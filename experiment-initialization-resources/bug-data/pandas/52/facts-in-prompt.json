{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nimport numpy as np\nfrom pandas.core.dtypes.missing import _isna_ndarraylike, isna, notna\nimport pandas.core.algorithms as algorithms\nfrom pandas.core.series import Series\n```\n\n# The source code of the buggy function\n```python\n# The relative path of the buggy file: pandas/core/groupby/generic.py\n\n\n\n    # this is the buggy function you need to fix\n    def nunique(self, dropna: bool = True) -> Series:\n        \"\"\"\n        Return number of unique elements in the group.\n    \n        Returns\n        -------\n        Series\n            Number of unique values within each group.\n        \"\"\"\n        ids, _, _ = self.grouper.group_info\n    \n        val = self.obj._internal_get_values()\n    \n        # GH 27951\n        # temporary fix while we wait for NumPy bug 12629 to be fixed\n        val[isna(val)] = np.datetime64(\"NaT\")\n    \n        try:\n            sorter = np.lexsort((val, ids))\n        except TypeError:  # catches object dtypes\n            msg = f\"val.dtype must be object, got {val.dtype}\"\n            assert val.dtype == object, msg\n            val, _ = algorithms.factorize(val, sort=False)\n            sorter = np.lexsort((val, ids))\n            _isna = lambda a: a == -1\n        else:\n            _isna = isna\n    \n        ids, val = ids[sorter], val[sorter]\n    \n        # group boundaries are where group ids change\n        # unique observations are where sorted values change\n        idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n        inc = np.r_[1, val[1:] != val[:-1]]\n    \n        # 1st item of each group is a new unique observation\n        mask = _isna(val)\n        if dropna:\n            inc[idx] = 1\n            inc[mask] = 0\n        else:\n            inc[mask & np.r_[False, mask[:-1]]] = 0\n            inc[idx] = 1\n    \n        out = np.add.reduceat(inc, idx).astype(\"int64\", copy=False)\n        if len(ids):\n            # NaN/NaT group exists if the head of ids is -1,\n            # so remove it from res and exclude its index from idx\n            if ids[0] == -1:\n                res = out[1:]\n                idx = idx[np.flatnonzero(idx)]\n            else:\n                res = out\n        else:\n            res = out[1:]\n        ri = self.grouper.result_index\n    \n        # we might have duplications among the bins\n        if len(res) != len(ri):\n            res, out = np.zeros(len(ri), dtype=out.dtype), res\n            res[ids[idx]] = out\n    \n        result = Series(res, index=ri, name=self._selection_name)\n        return self._reindex_output(result, fill_value=0)\n    \n```",
    "2": "# The declaration of the class containing the buggy function\n@pin_whitelisted_properties(Series, base.series_apply_whitelist)\nclass SeriesGroupBy(GroupBy):\n\n\n\n",
    "3": "# This function from the same file, but not the same class, is called by the buggy function\ndef _selection_name(self):\n    # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def _selection_name(self):\n        # Please ignore the body of this function\n\n",
    "4": "# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n",
    "5": "## The error message from the failing test\n```text\nn = 100, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [7.0, 3.0, 9.0, 1.0, 7.0, 1.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 8.0, 0.0, 0.0, 2.0, 1.0, 6.0, 1.0, 1.0, 2.0, 7.0, 7.0, 5.0, 3.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 2.0, 5.0, 0.0, 4.0, 2.0, 2.0, 3.0, 3.0, 7.0, 7.0, 2.0, 5.0, 1.0, 0.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 3.0, 0.0, 9.0, 0.0, 3.0, 5.0, 0.0, 3.0, 2.0, 7.0, 0.0, 2.0, 1.0, 5.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 1.0, 9.0, 4.0, 9.0, 5.0, 2.0, 8.0, 1.0, 7.0, 6.0, 4.0, 8.0, 0.0, 9.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 4.0, 5.0, 9.0, 0.0, 8.0, 8.0, 0.0, 9.0, 1.0, 3.0, 1.0, 2.0, 3.0]\nE   [right]: [7.0, 3.0, 9.0, 1.0, 7.0, 1.0, 2.0, nan, nan, nan, 5.0, 8.0, 0.0, 0.0, 2.0, 1.0, 6.0, 1.0, 1.0, 2.0, 7.0, 7.0, 5.0, 3.0, 7.0, 0.0, nan, nan, nan, 9.0, 2.0, 5.0, 0.0, 4.0, 2.0, 2.0, 3.0, 3.0, 7.0, 7.0, 2.0, 5.0, 1.0, 0.0, 5.0, nan, nan, nan, 4.0, 3.0, 0.0, 9.0, 0.0, 3.0, 5.0, 0.0, 3.0, 2.0, 7.0, 0.0, 2.0, 1.0, 5.0, 4.0, nan, nan, nan, 4.0, 1.0, 9.0, 4.0, 9.0, 5.0, 2.0, 8.0, 1.0, 7.0, 6.0, 4.0, 8.0, 0.0, 9.0, 6.0, nan, nan, nan, 2.0, 4.0, 5.0, 9.0, 0.0, 8.0, 8.0, 0.0, 9.0, 1.0, 3.0, 1.0, 2.0, 3.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [2.0, 6.0, 4.0, 6.0, 4.0, 2.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 7.0, 6.0, 2.0, 0.0, 4.0, 3.0, 7.0, 3.0, 6.0, 4.0, 8.0, 3.0, 9.0, 6.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 8.0, 3.0, 8.0, 7.0, 8.0, 4.0, 7.0, 2.0, 2.0, 6.0, 5.0, 3.0, 9.0, 5.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 6.0, 1.0, 1.0, 0.0, 3.0, 9.0, 3.0, 7.0, 6.0, 0.0, 2.0, 1.0, 4.0, 5.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 6.0, 8.0, 6.0, 7.0, 1.0, 5.0, 6.0, 6.0, 4.0, 3.0, 7.0, 6.0, 1.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 6.0, 0.0, 6.0, 2.0, 8.0, 4.0, 9.0, 4.0, 1.0, 7.0, 2.0, 8.0, 7.0, ...]\nE   [right]: [2.0, 6.0, 4.0, 6.0, 4.0, 2.0, 0.0, nan, nan, nan, 7.0, 7.0, 6.0, 2.0, 0.0, 4.0, 3.0, 7.0, 3.0, 6.0, 4.0, 8.0, 3.0, 9.0, 6.0, 7.0, nan, nan, nan, 8.0, 8.0, 3.0, 8.0, 7.0, 8.0, 4.0, 7.0, 2.0, 2.0, 6.0, 5.0, 3.0, 9.0, 5.0, 0.0, nan, nan, nan, 3.0, 6.0, 1.0, 1.0, 0.0, 3.0, 9.0, 3.0, 7.0, 6.0, 0.0, 2.0, 1.0, 4.0, 5.0, 5.0, nan, nan, nan, 0.0, 6.0, 8.0, 6.0, 7.0, 1.0, 5.0, 6.0, 6.0, 4.0, 3.0, 7.0, 6.0, 1.0, 7.0, 0.0, nan, nan, nan, 4.0, 6.0, 0.0, 6.0, 2.0, 8.0, 4.0, 9.0, 4.0, 1.0, 7.0, 2.0, 8.0, 7.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [8.0, 9.0, 3.0, 2.0, 5.0, 8.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 5.0, 8.0, 8.0, 3.0, 5.0, 2.0, 4.0, 3.0, 5.0, 6.0, 0.0, 7.0, 5.0, 6.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 2.0, 0.0, 8.0, 0.0, 9.0, 4.0, 8.0, 6.0, 4.0, 4.0, 6.0, 2.0, 8.0, 8.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 9.0, 8.0, 3.0, 0.0, 9.0, 0.0, 8.0, 3.0, 8.0, 2.0, 6.0, 6.0, 1.0, 9.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 7.0, 8.0, 5.0, 3.0, 9.0, 5.0, 6.0, 2.0, 8.0, 9.0, 6.0, 4.0, 3.0, 9.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 1.0, 5.0, 7.0, 1.0, 7.0, 2.0, 9.0, 4.0, 5.0, 2.0, 2.0, 4.0, 0.0, ...]\nE   [right]: [8.0, 9.0, 3.0, 2.0, 5.0, 8.0, 1.0, nan, nan, nan, 6.0, 5.0, 8.0, 8.0, 3.0, 5.0, 2.0, 4.0, 3.0, 5.0, 6.0, 0.0, 7.0, 5.0, 6.0, 9.0, nan, nan, nan, 6.0, 2.0, 0.0, 8.0, 0.0, 9.0, 4.0, 8.0, 6.0, 4.0, 4.0, 6.0, 2.0, 8.0, 8.0, 4.0, nan, nan, nan, 8.0, 9.0, 8.0, 3.0, 0.0, 9.0, 0.0, 8.0, 3.0, 8.0, 2.0, 6.0, 6.0, 1.0, 9.0, 3.0, nan, nan, nan, 8.0, 7.0, 8.0, 5.0, 3.0, 9.0, 5.0, 6.0, 2.0, 8.0, 9.0, 6.0, 4.0, 3.0, 9.0, 4.0, nan, nan, nan, 5.0, 1.0, 5.0, 7.0, 1.0, 7.0, 2.0, 9.0, 4.0, 5.0, 2.0, 2.0, 4.0, 0.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [8.0, 8.0, 1.0, 9.0, 5.0, 7.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 8.0, 6.0, 3.0, 4.0, 8.0, 0.0, 2.0, 6.0, 1.0, 6.0, 0.0, 9.0, 5.0, 7.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 0.0, 4.0, 2.0, 2.0, 1.0, 6.0, 6.0, 0.0, 2.0, 7.0, 7.0, 6.0, 3.0, 2.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 3.0, 2.0, 7.0, 7.0, 5.0, 2.0, 3.0, 3.0, 9.0, 5.0, 0.0, 8.0, 4.0, 2.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 7.0, 6.0, 5.0, 6.0, 1.0, 4.0, 6.0, 0.0, 0.0, 4.0, 2.0, 2.0, 1.0, 4.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 2.0, 2.0, 9.0, 9.0, 9.0, 3.0, 5.0, 6.0, 7.0, 8.0, 1.0, 5.0, 7.0, ...]\nE   [right]: [8.0, 8.0, 1.0, 9.0, 5.0, 7.0, 8.0, nan, nan, nan, 9.0, 8.0, 6.0, 3.0, 4.0, 8.0, 0.0, 2.0, 6.0, 1.0, 6.0, 0.0, 9.0, 5.0, 7.0, 7.0, nan, nan, nan, 8.0, 0.0, 4.0, 2.0, 2.0, 1.0, 6.0, 6.0, 0.0, 2.0, 7.0, 7.0, 6.0, 3.0, 2.0, 7.0, nan, nan, nan, 2.0, 3.0, 2.0, 7.0, 7.0, 5.0, 2.0, 3.0, 3.0, 9.0, 5.0, 0.0, 8.0, 4.0, 2.0, 0.0, nan, nan, nan, 3.0, 7.0, 6.0, 5.0, 6.0, 1.0, 4.0, 6.0, 0.0, 0.0, 4.0, 2.0, 2.0, 1.0, 4.0, 3.0, nan, nan, nan, 9.0, 2.0, 2.0, 9.0, 9.0, 9.0, 3.0, 5.0, 6.0, 7.0, 8.0, 1.0, 5.0, 7.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [13.0, 12.0, 92.0, 50.0, 56.0, 62.0, 19.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 57.0, 89.0, 34.0, 66.0, 21.0, 4.0, 35.0, 7.0, 18.0, 11.0, 20.0, 14.0, 89.0, 36.0, 58.0, 57.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 12.0, 23.0, 79.0, 86.0, 69.0, 63.0, 7.0, 86.0, 94.0, 11.0, 17.0, 87.0, 49.0, 34.0, 9.0, 73.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 31.0, 55.0, 79.0, 84.0, 15.0, 80.0, 14.0, 61.0, 98.0, 96.0, 0.0, 38.0, 77.0, 75.0, 48.0, 24.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 94.0, 75.0, 34.0, 33.0, 98.0, 20.0, 35.0, 34.0, 75.0, 77.0, 34.0, 16.0, 20.0, 7.0, 54.0, 60.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 20.0, 62.0, 35.0, 96.0, 77.0, 40.0, 94.0, 99.0, 14.0, 65.0, 61.0, 10.0, 67.0, 3.0]\nE   [right]: [13.0, 12.0, 92.0, 50.0, 56.0, 62.0, 19.0, nan, nan, nan, 57.0, 89.0, 34.0, 66.0, 21.0, 4.0, 35.0, 7.0, 18.0, 11.0, 20.0, 14.0, 89.0, 36.0, 58.0, 57.0, nan, nan, nan, 12.0, 23.0, 79.0, 86.0, 69.0, 63.0, 7.0, 86.0, 94.0, 11.0, 17.0, 87.0, 49.0, 34.0, 9.0, 73.0, nan, nan, nan, 31.0, 55.0, 79.0, 84.0, 15.0, 80.0, 14.0, 61.0, 98.0, 96.0, 0.0, 38.0, 77.0, 75.0, 48.0, 24.0, nan, nan, nan, 94.0, 75.0, 34.0, 33.0, 98.0, 20.0, 35.0, 34.0, 75.0, 77.0, 34.0, 16.0, 20.0, 7.0, 54.0, 60.0, nan, nan, nan, 20.0, 62.0, 35.0, 96.0, 77.0, 40.0, 94.0, 99.0, 14.0, 65.0, 61.0, 10.0, 67.0, 3.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [85.0, 72.0, 64.0, 5.0, 79.0, 21.0, 96.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 24.0, 41.0, 54.0, 16.0, 83.0, 47.0, 7.0, 94.0, 92.0, 16.0, 50.0, 7.0, 81.0, 71.0, 14.0, 68.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 36.0, 86.0, 76.0, 10.0, 73.0, 52.0, 20.0, 75.0, 44.0, 65.0, 46.0, 98.0, 61.0, 54.0, 76.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 68.0, 78.0, 86.0, 60.0, 2.0, 41.0, 88.0, 77.0, 80.0, 53.0, 36.0, 81.0, 79.0, 43.0, 30.0, 47.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 22.0, 85.0, 12.0, 57.0, 6.0, 62.0, 80.0, 6.0, 42.0, 62.0, 20.0, 16.0, 36.0, 36.0, 93.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 46.0, 18.0, 24.0, 50.0, 90.0, 5.0, 78.0, 49.0, 77.0, 76.0, 37.0, 61.0, 76.0, 38.0, ...]\nE   [right]: [85.0, 72.0, 64.0, 5.0, 79.0, 21.0, 96.0, nan, nan, nan, 24.0, 41.0, 54.0, 16.0, 83.0, 47.0, 7.0, 94.0, 92.0, 16.0, 50.0, 7.0, 81.0, 71.0, 14.0, 68.0, nan, nan, nan, 25.0, 36.0, 86.0, 76.0, 10.0, 73.0, 52.0, 20.0, 75.0, 44.0, 65.0, 46.0, 98.0, 61.0, 54.0, 76.0, nan, nan, nan, 68.0, 78.0, 86.0, 60.0, 2.0, 41.0, 88.0, 77.0, 80.0, 53.0, 36.0, 81.0, 79.0, 43.0, 30.0, 47.0, nan, nan, nan, 8.0, 22.0, 85.0, 12.0, 57.0, 6.0, 62.0, 80.0, 6.0, 42.0, 62.0, 20.0, 16.0, 36.0, 36.0, 93.0, nan, nan, nan, 46.0, 18.0, 24.0, 50.0, 90.0, 5.0, 78.0, 49.0, 77.0, 76.0, 37.0, 61.0, 76.0, 38.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [62.0, 92.0, 48.0, 94.0, 52.0, 60.0, 26.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 44.0, 66.0, 68.0, 45.0, 17.0, 16.0, 21.0, 24.0, 49.0, 7.0, 97.0, 59.0, 81.0, 38.0, 85.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 11.0, 34.0, 5.0, 63.0, 85.0, 67.0, 89.0, 87.0, 98.0, 33.0, 84.0, 58.0, 39.0, 81.0, 65.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 12.0, 35.0, 38.0, 85.0, 70.0, 53.0, 84.0, 68.0, 54.0, 77.0, 33.0, 73.0, 68.0, 93.0, 56.0, 51.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 88.0, 2.0, 18.0, 0.0, 13.0, 44.0, 86.0, 97.0, 0.0, 66.0, 78.0, 47.0, 89.0, 95.0, 83.0, 38.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 83.0, 14.0, 89.0, 86.0, 23.0, 33.0, 56.0, 75.0, 72.0, 57.0, 32.0, 71.0, 71.0, 87.0, ...]\nE   [right]: [62.0, 92.0, 48.0, 94.0, 52.0, 60.0, 26.0, nan, nan, nan, 8.0, 44.0, 66.0, 68.0, 45.0, 17.0, 16.0, 21.0, 24.0, 49.0, 7.0, 97.0, 59.0, 81.0, 38.0, 85.0, nan, nan, nan, 3.0, 11.0, 34.0, 5.0, 63.0, 85.0, 67.0, 89.0, 87.0, 98.0, 33.0, 84.0, 58.0, 39.0, 81.0, 65.0, nan, nan, nan, 12.0, 35.0, 38.0, 85.0, 70.0, 53.0, 84.0, 68.0, 54.0, 77.0, 33.0, 73.0, 68.0, 93.0, 56.0, 51.0, nan, nan, nan, 88.0, 2.0, 18.0, 0.0, 13.0, 44.0, 86.0, 97.0, 0.0, 66.0, 78.0, 47.0, 89.0, 95.0, 83.0, 38.0, nan, nan, nan, 83.0, 14.0, 89.0, 86.0, 23.0, 33.0, 56.0, 75.0, 72.0, 57.0, 32.0, 71.0, 71.0, 87.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [10.0, 18.0, 55.0, 95.0, 70.0, 65.0, 23.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 31.0, 70.0, 62.0, 94.0, 17.0, 68.0, 60.0, 56.0, 69.0, 15.0, 23.0, 99.0, 13.0, 86.0, 93.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 22.0, 3.0, 17.0, 67.0, 90.0, 71.0, 21.0, 89.0, 10.0, 31.0, 38.0, 71.0, 50.0, 12.0, 39.0, 98.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 95.0, 74.0, 23.0, 34.0, 15.0, 41.0, 95.0, 88.0, 89.0, 99.0, 48.0, 77.0, 76.0, 50.0, 30.0, 34.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 82.0, 60.0, 68.0, 77.0, 58.0, 89.0, 96.0, 79.0, 74.0, 26.0, 85.0, 44.0, 0.0, 58.0, 45.0, 23.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 30.0, 68.0, 62.0, 85.0, 78.0, 9.0, 33.0, 63.0, 94.0, 33.0, 60.0, 60.0, 60.0, 60.0, ...]\nE   [right]: [10.0, 18.0, 55.0, 95.0, 70.0, 65.0, 23.0, nan, nan, nan, 31.0, 70.0, 62.0, 94.0, 17.0, 68.0, 60.0, 56.0, 69.0, 15.0, 23.0, 99.0, 13.0, 86.0, 93.0, 6.0, nan, nan, nan, 22.0, 3.0, 17.0, 67.0, 90.0, 71.0, 21.0, 89.0, 10.0, 31.0, 38.0, 71.0, 50.0, 12.0, 39.0, 98.0, nan, nan, nan, 95.0, 74.0, 23.0, 34.0, 15.0, 41.0, 95.0, 88.0, 89.0, 99.0, 48.0, 77.0, 76.0, 50.0, 30.0, 34.0, nan, nan, nan, 82.0, 60.0, 68.0, 77.0, 58.0, 89.0, 96.0, 79.0, 74.0, 26.0, 85.0, 44.0, 0.0, 58.0, 45.0, 23.0, nan, nan, nan, 30.0, 68.0, 62.0, 85.0, 78.0, 9.0, 33.0, 63.0, 94.0, 33.0, 60.0, 60.0, 60.0, 60.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [83.0, 990.0, 168.0, 324.0, 53.0, 82.0, 806.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 403.0, 618.0, 421.0, 299.0, 240.0, 165.0, 94.0, 468.0, 24.0, 877.0, 687.0, 232.0, 648.0, 531.0, 602.0, 476.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 699.0, 389.0, 934.0, 40.0, 615.0, 14.0, 173.0, 869.0, 991.0, 322.0, 816.0, 92.0, 517.0, 797.0, 866.0, 257.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 747.0, 247.0, 992.0, 828.0, 982.0, 2.0, 957.0, 580.0, 368.0, 689.0, 263.0, 49.0, 450.0, 505.0, 655.0, 500.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 723.0, 376.0, 976.0, 705.0, 22.0, 500.0, 707.0, 244.0, 81.0, 125.0, 122.0, 125.0, 665.0, 43.0, 455.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 896.0, 859.0, 481.0, 567.0, 454.0, 344.0, 472.0, 121.0, 303.0, 17.0, 318.0, 363.0, 519.0, 916.0]\nE   [right]: [83.0, 990.0, 168.0, 324.0, 53.0, 82.0, 806.0, nan, nan, nan, 403.0, 618.0, 421.0, 299.0, 240.0, 165.0, 94.0, 468.0, 24.0, 877.0, 687.0, 232.0, 648.0, 531.0, 602.0, 476.0, nan, nan, nan, 699.0, 389.0, 934.0, 40.0, 615.0, 14.0, 173.0, 869.0, 991.0, 322.0, 816.0, 92.0, 517.0, 797.0, 866.0, 257.0, nan, nan, nan, 747.0, 247.0, 992.0, 828.0, 982.0, 2.0, 957.0, 580.0, 368.0, 689.0, 263.0, 49.0, 450.0, 505.0, 655.0, 500.0, nan, nan, nan, 7.0, 723.0, 376.0, 976.0, 705.0, 22.0, 500.0, 707.0, 244.0, 81.0, 125.0, 122.0, 125.0, 665.0, 43.0, 455.0, nan, nan, nan, 896.0, 859.0, 481.0, 567.0, 454.0, 344.0, 472.0, 121.0, 303.0, 17.0, 318.0, 363.0, 519.0, 916.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [585.0, 115.0, 31.0, 661.0, 715.0, 892.0, 485.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 805.0, 691.0, 261.0, 735.0, 678.0, 466.0, 945.0, 214.0, 337.0, 301.0, 263.0, 880.0, 843.0, 891.0, 97.0, 438.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 22.0, 918.0, 225.0, 765.0, 738.0, 538.0, 903.0, 891.0, 177.0, 272.0, 316.0, 563.0, 389.0, 334.0, 558.0, 177.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 785.0, 90.0, 84.0, 323.0, 211.0, 619.0, 304.0, 167.0, 207.0, 475.0, 102.0, 412.0, 506.0, 151.0, 971.0, 577.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 98.0, 901.0, 430.0, 294.0, 685.0, 636.0, 564.0, 457.0, 375.0, 333.0, 148.0, 908.0, 227.0, 742.0, 912.0, 507.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 177.0, 874.0, 877.0, 703.0, 266.0, 37.0, 929.0, 628.0, 21.0, 514.0, 168.0, 798.0, 343.0, ...]\nE   [right]: [585.0, 115.0, 31.0, 661.0, 715.0, 892.0, 485.0, nan, nan, nan, 805.0, 691.0, 261.0, 735.0, 678.0, 466.0, 945.0, 214.0, 337.0, 301.0, 263.0, 880.0, 843.0, 891.0, 97.0, 438.0, nan, nan, nan, 22.0, 918.0, 225.0, 765.0, 738.0, 538.0, 903.0, 891.0, 177.0, 272.0, 316.0, 563.0, 389.0, 334.0, 558.0, 177.0, nan, nan, nan, 785.0, 90.0, 84.0, 323.0, 211.0, 619.0, 304.0, 167.0, 207.0, 475.0, 102.0, 412.0, 506.0, 151.0, 971.0, 577.0, nan, nan, nan, 98.0, 901.0, 430.0, 294.0, 685.0, 636.0, 564.0, 457.0, 375.0, 333.0, 148.0, 908.0, 227.0, 742.0, 912.0, 507.0, nan, nan, nan, 3.0, 177.0, 874.0, 877.0, 703.0, 266.0, 37.0, 929.0, 628.0, 21.0, 514.0, 168.0, 798.0, 343.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [785.0, 383.0, 995.0, 912.0, 663.0, 58.0, 551.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 724.0, 150.0, 140.0, 681.0, 96.0, 117.0, 262.0, 197.0, 954.0, 509.0, 29.0, 962.0, 532.0, 619.0, 75.0, 270.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 158.0, 189.0, 666.0, 327.0, 696.0, 322.0, 794.0, 811.0, 904.0, 624.0, 840.0, 243.0, 697.0, 810.0, 668.0, 117.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 748.0, 840.0, 453.0, 62.0, 662.0, 279.0, 457.0, 564.0, 494.0, 164.0, 967.0, 10.0, 154.0, 185.0, 457.0, 796.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 538.0, 601.0, 461.0, 975.0, 685.0, 760.0, 347.0, 155.0, 748.0, 910.0, 87.0, 258.0, 484.0, 430.0, 493.0, 490.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 145.0, 464.0, 114.0, 324.0, 130.0, 435.0, 795.0, 611.0, 848.0, 906.0, 167.0, 783.0, 637.0, 413.0, ...]\nE   [right]: [785.0, 383.0, 995.0, 912.0, 663.0, 58.0, 551.0, nan, nan, nan, 724.0, 150.0, 140.0, 681.0, 96.0, 117.0, 262.0, 197.0, 954.0, 509.0, 29.0, 962.0, 532.0, 619.0, 75.0, 270.0, nan, nan, nan, 158.0, 189.0, 666.0, 327.0, 696.0, 322.0, 794.0, 811.0, 904.0, 624.0, 840.0, 243.0, 697.0, 810.0, 668.0, 117.0, nan, nan, nan, 748.0, 840.0, 453.0, 62.0, 662.0, 279.0, 457.0, 564.0, 494.0, 164.0, 967.0, 10.0, 154.0, 185.0, 457.0, 796.0, nan, nan, nan, 538.0, 601.0, 461.0, 975.0, 685.0, 760.0, 347.0, 155.0, 748.0, 910.0, 87.0, 258.0, 484.0, 430.0, 493.0, 490.0, nan, nan, nan, 145.0, 464.0, 114.0, 324.0, 130.0, 435.0, 795.0, 611.0, 848.0, 906.0, 167.0, 783.0, 637.0, 413.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [413.0, 600.0, 526.0, 771.0, 417.0, 160.0, 393.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 23.0, 411.0, 47.0, 832.0, 27.0, 479.0, 622.0, 385.0, 758.0, 479.0, 606.0, 717.0, 979.0, 842.0, 247.0, 630.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 556.0, 367.0, 76.0, 784.0, 644.0, 362.0, 571.0, 997.0, 919.0, 335.0, 849.0, 832.0, 322.0, 878.0, 537.0, 390.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 390.0, 83.0, 829.0, 361.0, 434.0, 292.0, 602.0, 595.0, 194.0, 746.0, 27.0, 369.0, 688.0, 275.0, 221.0, 529.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 538.0, 523.0, 524.0, 834.0, 918.0, 317.0, 72.0, 347.0, 18.0, 835.0, 760.0, 96.0, 739.0, 438.0, 493.0, 688.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 995.0, 329.0, 364.0, 240.0, 715.0, 782.0, 23.0, 10.0, 743.0, 207.0, 155.0, 287.0, 889.0, 54.0, ...]\nE   [right]: [413.0, 600.0, 526.0, 771.0, 417.0, 160.0, 393.0, nan, nan, nan, 23.0, 411.0, 47.0, 832.0, 27.0, 479.0, 622.0, 385.0, 758.0, 479.0, 606.0, 717.0, 979.0, 842.0, 247.0, 630.0, nan, nan, nan, 556.0, 367.0, 76.0, 784.0, 644.0, 362.0, 571.0, 997.0, 919.0, 335.0, 849.0, 832.0, 322.0, 878.0, 537.0, 390.0, nan, nan, nan, 390.0, 83.0, 829.0, 361.0, 434.0, 292.0, 602.0, 595.0, 194.0, 746.0, 27.0, 369.0, 688.0, 275.0, 221.0, 529.0, nan, nan, nan, 538.0, 523.0, 524.0, 834.0, 918.0, 317.0, 72.0, 347.0, 18.0, 835.0, 760.0, 96.0, 739.0, 438.0, 493.0, 688.0, nan, nan, nan, 995.0, 329.0, 364.0, 240.0, 715.0, 782.0, 23.0, 10.0, 743.0, 207.0, 155.0, 287.0, 889.0, 54.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [4.0, 6.0, 1.0, 1.0, 9.0, 2.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 9.0, 9.0, 5.0, 6.0, 3.0, 0.0, 8.0, 7.0, 6.0, 0.0, 8.0, 9.0, 8.0, 8.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 6.0, 5.0, 8.0, 9.0, 8.0, 0.0, 6.0, 8.0, 2.0, 1.0, 1.0, 3.0, 8.0, 8.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 3.0, 7.0, 4.0, 1.0, 6.0, 7.0, 3.0, 4.0, 0.0, 7.0, 8.0, 1.0, 7.0, 5.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 4.0, 6.0, 1.0, 2.0, 9.0, 4.0, 1.0, 2.0, 2.0, 8.0, 0.0, 6.0, 0.0, 5.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 3.0, 3.0, 7.0, 1.0, 1.0, 5.0, 0.0, 6.0, 3.0, 3.0, 8.0, 1.0, 2.0]\nE   [right]: [4.0, 6.0, 1.0, 1.0, 9.0, 2.0, 4.0, nan, nan, nan, 6.0, 9.0, 9.0, 5.0, 6.0, 3.0, 0.0, 8.0, 7.0, 6.0, 0.0, 8.0, 9.0, 8.0, 8.0, 8.0, nan, nan, nan, 0.0, 6.0, 5.0, 8.0, 9.0, 8.0, 0.0, 6.0, 8.0, 2.0, 1.0, 1.0, 3.0, 8.0, 8.0, 3.0, nan, nan, nan, 8.0, 3.0, 7.0, 4.0, 1.0, 6.0, 7.0, 3.0, 4.0, 0.0, 7.0, 8.0, 1.0, 7.0, 5.0, 8.0, nan, nan, nan, 8.0, 4.0, 6.0, 1.0, 2.0, 9.0, 4.0, 1.0, 2.0, 2.0, 8.0, 0.0, 6.0, 0.0, 5.0, 3.0, nan, nan, nan, 8.0, 3.0, 3.0, 7.0, 1.0, 1.0, 5.0, 0.0, 6.0, 3.0, 3.0, 8.0, 1.0, 2.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [8.0, 1.0, 4.0, 6.0, 4.0, 4.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 3.0, 7.0, 8.0, 5.0, 8.0, 2.0, 0.0, 9.0, 5.0, 8.0, 9.0, 2.0, 3.0, 2.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 1.0, 2.0, 8.0, 8.0, 1.0, 7.0, 1.0, 7.0, 9.0, 5.0, 0.0, 4.0, 7.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 4.0, 8.0, 8.0, 1.0, 5.0, 7.0, 2.0, 3.0, 7.0, 9.0, 0.0, 2.0, 2.0, 9.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 8.0, 6.0, 1.0, 2.0, 2.0, 9.0, 9.0, 1.0, 8.0, 9.0, 6.0, 4.0, 0.0, 1.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 6.0, 7.0, 3.0, 0.0, 1.0, 7.0, 3.0, 2.0, 4.0, 6.0, 2.0, 3.0, 2.0, ...]\nE   [right]: [8.0, 1.0, 4.0, 6.0, 4.0, 4.0, 5.0, nan, nan, nan, 1.0, 3.0, 7.0, 8.0, 5.0, 8.0, 2.0, 0.0, 9.0, 5.0, 8.0, 9.0, 2.0, 3.0, 2.0, 3.0, nan, nan, nan, 1.0, 1.0, 2.0, 8.0, 8.0, 1.0, 7.0, 1.0, 7.0, 9.0, 5.0, 0.0, 4.0, 7.0, 0.0, 3.0, nan, nan, nan, 5.0, 4.0, 8.0, 8.0, 1.0, 5.0, 7.0, 2.0, 3.0, 7.0, 9.0, 0.0, 2.0, 2.0, 9.0, 3.0, nan, nan, nan, 0.0, 8.0, 6.0, 1.0, 2.0, 2.0, 9.0, 9.0, 1.0, 8.0, 9.0, 6.0, 4.0, 0.0, 1.0, 0.0, nan, nan, nan, 2.0, 6.0, 7.0, 3.0, 0.0, 1.0, 7.0, 3.0, 2.0, 4.0, 6.0, 2.0, 3.0, 2.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [6.0, 6.0, 7.0, 0.0, 2.0, 7.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 7.0, 0.0, 9.0, 3.0, 3.0, 4.0, 1.0, 7.0, 6.0, 5.0, 6.0, 7.0, 1.0, 2.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 4.0, 5.0, 7.0, 1.0, 4.0, 6.0, 8.0, 7.0, 1.0, 0.0, 9.0, 3.0, 0.0, 5.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 8.0, 1.0, 3.0, 5.0, 5.0, 4.0, 9.0, 5.0, 4.0, 0.0, 2.0, 2.0, 5.0, 3.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 7.0, 6.0, 9.0, 0.0, 3.0, 4.0, 2.0, 7.0, 6.0, 2.0, 8.0, 7.0, 6.0, 2.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 2.0, 6.0, 8.0, 5.0, 3.0, 6.0, 6.0, 2.0, 8.0, 0.0, 2.0, 5.0, 6.0, ...]\nE   [right]: [6.0, 6.0, 7.0, 0.0, 2.0, 7.0, 7.0, nan, nan, nan, 7.0, 7.0, 0.0, 9.0, 3.0, 3.0, 4.0, 1.0, 7.0, 6.0, 5.0, 6.0, 7.0, 1.0, 2.0, 8.0, nan, nan, nan, 1.0, 4.0, 5.0, 7.0, 1.0, 4.0, 6.0, 8.0, 7.0, 1.0, 0.0, 9.0, 3.0, 0.0, 5.0, 4.0, nan, nan, nan, 8.0, 8.0, 1.0, 3.0, 5.0, 5.0, 4.0, 9.0, 5.0, 4.0, 0.0, 2.0, 2.0, 5.0, 3.0, 3.0, nan, nan, nan, 7.0, 7.0, 6.0, 9.0, 0.0, 3.0, 4.0, 2.0, 7.0, 6.0, 2.0, 8.0, 7.0, 6.0, 2.0, 8.0, nan, nan, nan, 2.0, 2.0, 6.0, 8.0, 5.0, 3.0, 6.0, 6.0, 2.0, 8.0, 0.0, 2.0, 5.0, 6.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [8.0, 9.0, 5.0, 8.0, 7.0, 0.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 4.0, 5.0, 4.0, 5.0, 5.0, 2.0, 8.0, 3.0, 5.0, 6.0, 5.0, 2.0, 1.0, 2.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 3.0, 6.0, 5.0, 8.0, 7.0, 7.0, 7.0, 4.0, 7.0, 7.0, 0.0, 4.0, 8.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 5.0, 2.0, 1.0, 8.0, 7.0, 8.0, 4.0, 6.0, 9.0, 1.0, 7.0, 4.0, 2.0, 5.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 8.0, 1.0, 9.0, 3.0, 3.0, 0.0, 5.0, 5.0, 9.0, 1.0, 0.0, 9.0, 9.0, 5.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 4.0, 6.0, 5.0, 6.0, 7.0, 7.0, 0.0, 0.0, 2.0, 5.0, 0.0, 3.0, 3.0, ...]\nE   [right]: [8.0, 9.0, 5.0, 8.0, 7.0, 0.0, 1.0, nan, nan, nan, 9.0, 4.0, 5.0, 4.0, 5.0, 5.0, 2.0, 8.0, 3.0, 5.0, 6.0, 5.0, 2.0, 1.0, 2.0, 2.0, nan, nan, nan, 6.0, 3.0, 6.0, 5.0, 8.0, 7.0, 7.0, 7.0, 4.0, 7.0, 7.0, 0.0, 4.0, 8.0, 0.0, 3.0, nan, nan, nan, 5.0, 5.0, 2.0, 1.0, 8.0, 7.0, 8.0, 4.0, 6.0, 9.0, 1.0, 7.0, 4.0, 2.0, 5.0, 7.0, nan, nan, nan, 2.0, 8.0, 1.0, 9.0, 3.0, 3.0, 0.0, 5.0, 5.0, 9.0, 1.0, 0.0, 9.0, 9.0, 5.0, 5.0, nan, nan, nan, 4.0, 4.0, 6.0, 5.0, 6.0, 7.0, 7.0, 0.0, 0.0, 2.0, 5.0, 0.0, 3.0, 3.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [93.0, 55.0, 99.0, 59.0, 66.0, 51.0, 78.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 69.0, 5.0, 48.0, 53.0, 91.0, 97.0, 79.0, 75.0, 6.0, 59.0, 64.0, 39.0, 8.0, 16.0, 91.0, 90.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 14.0, 66.0, 95.0, 5.0, 7.0, 93.0, 20.0, 58.0, 85.0, 88.0, 45.0, 85.0, 14.0, 14.0, 14.0, 19.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 37.0, 76.0, 99.0, 95.0, 62.0, 46.0, 70.0, 69.0, 88.0, 98.0, 19.0, 43.0, 16.0, 65.0, 76.0, 46.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 85.0, 77.0, 90.0, 61.0, 52.0, 46.0, 61.0, 22.0, 19.0, 86.0, 1.0, 87.0, 13.0, 64.0, 83.0, 14.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 84.0, 75.0, 43.0, 33.0, 1.0, 99.0, 28.0, 91.0, 76.0, 72.0, 38.0, 3.0, 1.0, 8.0]\nE   [right]: [93.0, 55.0, 99.0, 59.0, 66.0, 51.0, 78.0, nan, nan, nan, 69.0, 5.0, 48.0, 53.0, 91.0, 97.0, 79.0, 75.0, 6.0, 59.0, 64.0, 39.0, 8.0, 16.0, 91.0, 90.0, nan, nan, nan, 14.0, 66.0, 95.0, 5.0, 7.0, 93.0, 20.0, 58.0, 85.0, 88.0, 45.0, 85.0, 14.0, 14.0, 14.0, 19.0, nan, nan, nan, 37.0, 76.0, 99.0, 95.0, 62.0, 46.0, 70.0, 69.0, 88.0, 98.0, 19.0, 43.0, 16.0, 65.0, 76.0, 46.0, nan, nan, nan, 85.0, 77.0, 90.0, 61.0, 52.0, 46.0, 61.0, 22.0, 19.0, 86.0, 1.0, 87.0, 13.0, 64.0, 83.0, 14.0, nan, nan, nan, 84.0, 75.0, 43.0, 33.0, 1.0, 99.0, 28.0, 91.0, 76.0, 72.0, 38.0, 3.0, 1.0, 8.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [40.0, 42.0, 24.0, 12.0, 33.0, 64.0, 57.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 49.0, 19.0, 36.0, 48.0, 61.0, 13.0, 34.0, 77.0, 14.0, 21.0, 93.0, 91.0, 71.0, 45.0, 89.0, 20.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 58.0, 81.0, 1.0, 98.0, 73.0, 20.0, 31.0, 81.0, 12.0, 55.0, 73.0, 31.0, 80.0, 41.0, 34.0, 88.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 84.0, 97.0, 60.0, 25.0, 38.0, 16.0, 10.0, 84.0, 31.0, 83.0, 36.0, 82.0, 33.0, 91.0, 35.0, 94.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 30.0, 1.0, 21.0, 1.0, 57.0, 83.0, 40.0, 3.0, 72.0, 11.0, 99.0, 90.0, 81.0, 7.0, 70.0, 27.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 82.0, 62.0, 81.0, 58.0, 32.0, 25.0, 9.0, 77.0, 58.0, 22.0, 62.0, 57.0, 41.0, 49.0, ...]\nE   [right]: [40.0, 42.0, 24.0, 12.0, 33.0, 64.0, 57.0, nan, nan, nan, 49.0, 19.0, 36.0, 48.0, 61.0, 13.0, 34.0, 77.0, 14.0, 21.0, 93.0, 91.0, 71.0, 45.0, 89.0, 20.0, nan, nan, nan, 58.0, 81.0, 1.0, 98.0, 73.0, 20.0, 31.0, 81.0, 12.0, 55.0, 73.0, 31.0, 80.0, 41.0, 34.0, 88.0, nan, nan, nan, 84.0, 97.0, 60.0, 25.0, 38.0, 16.0, 10.0, 84.0, 31.0, 83.0, 36.0, 82.0, 33.0, 91.0, 35.0, 94.0, nan, nan, nan, 30.0, 1.0, 21.0, 1.0, 57.0, 83.0, 40.0, 3.0, 72.0, 11.0, 99.0, 90.0, 81.0, 7.0, 70.0, 27.0, nan, nan, nan, 82.0, 62.0, 81.0, 58.0, 32.0, 25.0, 9.0, 77.0, 58.0, 22.0, 62.0, 57.0, 41.0, 49.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [56.0, 49.0, 90.0, 34.0, 58.0, 43.0, 88.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 11.0, 35.0, 77.0, 93.0, 97.0, 98.0, 70.0, 87.0, 43.0, 15.0, 33.0, 27.0, 15.0, 6.0, 78.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 80.0, 82.0, 73.0, 15.0, 94.0, 59.0, 75.0, 88.0, 65.0, 51.0, 9.0, 7.0, 4.0, 88.0, 90.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 55.0, 88.0, 97.0, 20.0, 98.0, 27.0, 1.0, 18.0, 82.0, 70.0, 96.0, 48.0, 56.0, 80.0, 75.0, 70.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 83.0, 70.0, 86.0, 95.0, 19.0, 25.0, 79.0, 23.0, 96.0, 39.0, 28.0, 5.0, 78.0, 20.0, 76.0, 36.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 90.0, 57.0, 35.0, 73.0, 9.0, 48.0, 17.0, 93.0, 86.0, 88.0, 36.0, 65.0, 15.0, ...]\nE   [right]: [56.0, 49.0, 90.0, 34.0, 58.0, 43.0, 88.0, nan, nan, nan, 11.0, 35.0, 77.0, 93.0, 97.0, 98.0, 70.0, 87.0, 43.0, 15.0, 33.0, 27.0, 15.0, 6.0, 78.0, 2.0, nan, nan, nan, 80.0, 82.0, 73.0, 15.0, 94.0, 59.0, 75.0, 88.0, 65.0, 51.0, 9.0, 7.0, 4.0, 88.0, 90.0, 5.0, nan, nan, nan, 55.0, 88.0, 97.0, 20.0, 98.0, 27.0, 1.0, 18.0, 82.0, 70.0, 96.0, 48.0, 56.0, 80.0, 75.0, 70.0, nan, nan, nan, 83.0, 70.0, 86.0, 95.0, 19.0, 25.0, 79.0, 23.0, 96.0, 39.0, 28.0, 5.0, 78.0, 20.0, 76.0, 36.0, nan, nan, nan, 25.0, 90.0, 57.0, 35.0, 73.0, 9.0, 48.0, 17.0, 93.0, 86.0, 88.0, 36.0, 65.0, 15.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [32.0, 22.0, 71.0, 21.0, 87.0, 83.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 97.0, 73.0, 30.0, 8.0, 94.0, 16.0, 43.0, 40.0, 83.0, 57.0, 67.0, 16.0, 95.0, 14.0, 32.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 13.0, 95.0, 21.0, 38.0, 65.0, 55.0, 99.0, 56.0, 72.0, 29.0, 87.0, 62.0, 46.0, 59.0, 56.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 79.0, 82.0, 59.0, 47.0, 69.0, 92.0, 35.0, 99.0, 13.0, 38.0, 39.0, 80.0, 27.0, 60.0, 45.0, 78.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 95.0, 84.0, 89.0, 71.0, 21.0, 71.0, 82.0, 97.0, 54.0, 22.0, 86.0, 59.0, 99.0, 3.0, 54.0, 22.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 29.0, 21.0, 27.0, 66.0, 9.0, 35.0, 8.0, 5.0, 18.0, 73.0, 83.0, 87.0, 57.0, 84.0, ...]\nE   [right]: [32.0, 22.0, 71.0, 21.0, 87.0, 83.0, 6.0, nan, nan, nan, 25.0, 97.0, 73.0, 30.0, 8.0, 94.0, 16.0, 43.0, 40.0, 83.0, 57.0, 67.0, 16.0, 95.0, 14.0, 32.0, nan, nan, nan, 9.0, 13.0, 95.0, 21.0, 38.0, 65.0, 55.0, 99.0, 56.0, 72.0, 29.0, 87.0, 62.0, 46.0, 59.0, 56.0, nan, nan, nan, 79.0, 82.0, 59.0, 47.0, 69.0, 92.0, 35.0, 99.0, 13.0, 38.0, 39.0, 80.0, 27.0, 60.0, 45.0, 78.0, nan, nan, nan, 95.0, 84.0, 89.0, 71.0, 21.0, 71.0, 82.0, 97.0, 54.0, 22.0, 86.0, 59.0, 99.0, 3.0, 54.0, 22.0, nan, nan, nan, 29.0, 21.0, 27.0, 66.0, 9.0, 35.0, 8.0, 5.0, 18.0, 73.0, 83.0, 87.0, 57.0, 84.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [432.0, 808.0, 781.0, 382.0, 829.0, 578.0, 919.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 604.0, 844.0, 669.0, 216.0, 599.0, 281.0, 410.0, 301.0, 242.0, 358.0, 901.0, 402.0, 930.0, 158.0, 555.0, 176.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 79.0, 881.0, 690.0, 658.0, 840.0, 250.0, 386.0, 832.0, 166.0, 660.0, 275.0, 745.0, 937.0, 430.0, 481.0, 957.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 820.0, 111.0, 195.0, 458.0, 980.0, 395.0, 710.0, 183.0, 202.0, 156.0, 682.0, 353.0, 454.0, 894.0, 510.0, 752.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 927.0, 795.0, 353.0, 99.0, 279.0, 493.0, 127.0, 402.0, 453.0, 654.0, 771.0, 590.0, 899.0, 132.0, 646.0, 633.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 910.0, 700.0, 396.0, 195.0, 123.0, 938.0, 187.0, 192.0, 247.0, 643.0, 65.0, 686.0, 824.0, 485.0]\nE   [right]: [432.0, 808.0, 781.0, 382.0, 829.0, 578.0, 919.0, nan, nan, nan, 604.0, 844.0, 669.0, 216.0, 599.0, 281.0, 410.0, 301.0, 242.0, 358.0, 901.0, 402.0, 930.0, 158.0, 555.0, 176.0, nan, nan, nan, 79.0, 881.0, 690.0, 658.0, 840.0, 250.0, 386.0, 832.0, 166.0, 660.0, 275.0, 745.0, 937.0, 430.0, 481.0, 957.0, nan, nan, nan, 820.0, 111.0, 195.0, 458.0, 980.0, 395.0, 710.0, 183.0, 202.0, 156.0, 682.0, 353.0, 454.0, 894.0, 510.0, 752.0, nan, nan, nan, 927.0, 795.0, 353.0, 99.0, 279.0, 493.0, 127.0, 402.0, 453.0, 654.0, 771.0, 590.0, 899.0, 132.0, 646.0, 633.0, nan, nan, nan, 910.0, 700.0, 396.0, 195.0, 123.0, 938.0, 187.0, 192.0, 247.0, 643.0, 65.0, 686.0, 824.0, 485.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [897.0, 433.0, 941.0, 271.0, 83.0, 971.0, 999.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 537.0, 722.0, 307.0, 333.0, 518.0, 469.0, 875.0, 63.0, 195.0, 864.0, 527.0, 868.0, 646.0, 896.0, 723.0, 277.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 416.0, 546.0, 820.0, 900.0, 78.0, 368.0, 566.0, 434.0, 197.0, 133.0, 270.0, 332.0, 221.0, 906.0, 902.0, 334.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 728.0, 45.0, 930.0, 969.0, 597.0, 919.0, 798.0, 5.0, 604.0, 346.0, 602.0, 943.0, 518.0, 808.0, 164.0, 148.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 595.0, 763.0, 654.0, 578.0, 335.0, 188.0, 222.0, 312.0, 868.0, 30.0, 253.0, 159.0, 128.0, 616.0, 828.0, 198.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 362.0, 115.0, 947.0, 14.0, 997.0, 276.0, 418.0, 791.0, 50.0, 177.0, 96.0, 862.0, 252.0, 503.0, ...]\nE   [right]: [897.0, 433.0, 941.0, 271.0, 83.0, 971.0, 999.0, nan, nan, nan, 537.0, 722.0, 307.0, 333.0, 518.0, 469.0, 875.0, 63.0, 195.0, 864.0, 527.0, 868.0, 646.0, 896.0, 723.0, 277.0, nan, nan, nan, 416.0, 546.0, 820.0, 900.0, 78.0, 368.0, 566.0, 434.0, 197.0, 133.0, 270.0, 332.0, 221.0, 906.0, 902.0, 334.0, nan, nan, nan, 728.0, 45.0, 930.0, 969.0, 597.0, 919.0, 798.0, 5.0, 604.0, 346.0, 602.0, 943.0, 518.0, 808.0, 164.0, 148.0, nan, nan, nan, 595.0, 763.0, 654.0, 578.0, 335.0, 188.0, 222.0, 312.0, 868.0, 30.0, 253.0, 159.0, 128.0, 616.0, 828.0, 198.0, nan, nan, nan, 362.0, 115.0, 947.0, 14.0, 997.0, 276.0, 418.0, 791.0, 50.0, 177.0, 96.0, 862.0, 252.0, 503.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [273.0, 742.0, 324.0, 113.0, 701.0, 11.0, 231.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 888.0, 161.0, 856.0, 388.0, 994.0, 164.0, 47.0, 640.0, 298.0, 575.0, 183.0, 864.0, 114.0, 314.0, 374.0, 458.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 34.0, 488.0, 120.0, 27.0, 828.0, 579.0, 859.0, 184.0, 64.0, 246.0, 240.0, 387.0, 553.0, 787.0, 579.0, 115.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 492.0, 662.0, 950.0, 804.0, 485.0, 886.0, 453.0, 453.0, 253.0, 811.0, 540.0, 804.0, 33.0, 617.0, 231.0, 369.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 943.0, 221.0, 271.0, 867.0, 740.0, 765.0, 952.0, 201.0, 540.0, 124.0, 914.0, 42.0, 853.0, 489.0, 215.0, 42.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 206.0, 488.0, 163.0, 716.0, 891.0, 892.0, 421.0, 130.0, 906.0, 414.0, 346.0, 226.0, 189.0, 940.0, ...]\nE   [right]: [273.0, 742.0, 324.0, 113.0, 701.0, 11.0, 231.0, nan, nan, nan, 888.0, 161.0, 856.0, 388.0, 994.0, 164.0, 47.0, 640.0, 298.0, 575.0, 183.0, 864.0, 114.0, 314.0, 374.0, 458.0, nan, nan, nan, 34.0, 488.0, 120.0, 27.0, 828.0, 579.0, 859.0, 184.0, 64.0, 246.0, 240.0, 387.0, 553.0, 787.0, 579.0, 115.0, nan, nan, nan, 492.0, 662.0, 950.0, 804.0, 485.0, 886.0, 453.0, 453.0, 253.0, 811.0, 540.0, 804.0, 33.0, 617.0, 231.0, 369.0, nan, nan, nan, 943.0, 221.0, 271.0, 867.0, 740.0, 765.0, 952.0, 201.0, 540.0, 124.0, 914.0, 42.0, 853.0, 489.0, 215.0, 42.0, nan, nan, nan, 206.0, 488.0, 163.0, 716.0, 891.0, 892.0, 421.0, 130.0, 906.0, 414.0, 346.0, 226.0, 189.0, 940.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [662.0, 133.0, 154.0, 152.0, 79.0, 764.0, 999.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 697.0, 87.0, 161.0, 513.0, 678.0, 64.0, 300.0, 22.0, 157.0, 369.0, 789.0, 237.0, 49.0, 793.0, 667.0, 822.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 491.0, 600.0, 883.0, 190.0, 356.0, 803.0, 100.0, 535.0, 810.0, 824.0, 896.0, 298.0, 466.0, 847.0, 90.0, 383.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 576.0, 38.0, 83.0, 349.0, 133.0, 291.0, 702.0, 381.0, 299.0, 75.0, 606.0, 982.0, 169.0, 921.0, 715.0, 190.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 637.0, 731.0, 366.0, 191.0, 730.0, 981.0, 41.0, 76.0, 311.0, 831.0, 783.0, 565.0, 391.0, 579.0, 709.0, 274.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 989.0, 818.0, 287.0, 48.0, 350.0, 200.0, 844.0, 475.0, 271.0, 233.0, 107.0, 490.0, 690.0, 998.0, ...]\nE   [right]: [662.0, 133.0, 154.0, 152.0, 79.0, 764.0, 999.0, nan, nan, nan, 697.0, 87.0, 161.0, 513.0, 678.0, 64.0, 300.0, 22.0, 157.0, 369.0, 789.0, 237.0, 49.0, 793.0, 667.0, 822.0, nan, nan, nan, 491.0, 600.0, 883.0, 190.0, 356.0, 803.0, 100.0, 535.0, 810.0, 824.0, 896.0, 298.0, 466.0, 847.0, 90.0, 383.0, nan, nan, nan, 576.0, 38.0, 83.0, 349.0, 133.0, 291.0, 702.0, 381.0, 299.0, 75.0, 606.0, 982.0, 169.0, 921.0, 715.0, 190.0, nan, nan, nan, 637.0, 731.0, 366.0, 191.0, 730.0, 981.0, 41.0, 76.0, 311.0, 831.0, 783.0, 565.0, 391.0, 579.0, 709.0, 274.0, nan, nan, nan, 989.0, 818.0, 287.0, 48.0, 350.0, 200.0, 844.0, 475.0, 271.0, 233.0, 107.0, 490.0, 690.0, 998.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [0.0, 4.0, 6.0, 6.0, 8.0, 9.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 5.0, 2.0, 5.0, 7.0, 6.0, 5.0, 8.0, 0.0, 3.0, 8.0, 4.0, 4.0, 3.0, 5.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 1.0, 7.0, 2.0, 5.0, 3.0, 0.0, 8.0, 9.0, 4.0, 4.0, 4.0, 8.0, 9.0, 0.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 5.0, 3.0, 2.0, 8.0, 7.0, 6.0, 3.0, 9.0, 8.0, 7.0, 7.0, 9.0, 3.0, 0.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 4.0, 4.0, 2.0, 5.0, 8.0, 4.0, 9.0, 4.0, 7.0, 2.0, 7.0, 9.0, 2.0, 0.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 4.0, 0.0, 7.0, 4.0, 1.0, 3.0, 1.0, 6.0, 5.0, 8.0, 6.0, 1.0, 7.0]\nE   [right]: [0.0, 4.0, 6.0, 6.0, 8.0, 9.0, 4.0, nan, nan, nan, 2.0, 5.0, 2.0, 5.0, 7.0, 6.0, 5.0, 8.0, 0.0, 3.0, 8.0, 4.0, 4.0, 3.0, 5.0, 6.0, nan, nan, nan, 9.0, 1.0, 7.0, 2.0, 5.0, 3.0, 0.0, 8.0, 9.0, 4.0, 4.0, 4.0, 8.0, 9.0, 0.0, 0.0, nan, nan, nan, 0.0, 5.0, 3.0, 2.0, 8.0, 7.0, 6.0, 3.0, 9.0, 8.0, 7.0, 7.0, 9.0, 3.0, 0.0, 2.0, nan, nan, nan, 7.0, 4.0, 4.0, 2.0, 5.0, 8.0, 4.0, 9.0, 4.0, 7.0, 2.0, 7.0, 9.0, 2.0, 0.0, 8.0, nan, nan, nan, 7.0, 4.0, 0.0, 7.0, 4.0, 1.0, 3.0, 1.0, 6.0, 5.0, 8.0, 6.0, 1.0, 7.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [4.0, 9.0, 0.0, 7.0, 0.0, 5.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 8.0, 6.0, 8.0, 0.0, 0.0, 8.0, 8.0, 1.0, 5.0, 4.0, 8.0, 4.0, 7.0, 3.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 6.0, 8.0, 3.0, 2.0, 8.0, 8.0, 9.0, 2.0, 2.0, 5.0, 0.0, 3.0, 4.0, 4.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 2.0, 2.0, 0.0, 2.0, 8.0, 3.0, 3.0, 6.0, 4.0, 9.0, 0.0, 8.0, 0.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 6.0, 8.0, 6.0, 7.0, 7.0, 1.0, 9.0, 3.0, 0.0, 9.0, 1.0, 1.0, 8.0, 3.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 9.0, 5.0, 8.0, 4.0, 5.0, 2.0, 1.0, 7.0, 5.0, 8.0, 0.0, 7.0, 5.0, ...]\nE   [right]: [4.0, 9.0, 0.0, 7.0, 0.0, 5.0, 7.0, nan, nan, nan, 2.0, 8.0, 6.0, 8.0, 0.0, 0.0, 8.0, 8.0, 1.0, 5.0, 4.0, 8.0, 4.0, 7.0, 3.0, 2.0, nan, nan, nan, 8.0, 6.0, 8.0, 3.0, 2.0, 8.0, 8.0, 9.0, 2.0, 2.0, 5.0, 0.0, 3.0, 4.0, 4.0, 2.0, nan, nan, nan, 6.0, 2.0, 2.0, 0.0, 2.0, 8.0, 3.0, 3.0, 6.0, 4.0, 9.0, 0.0, 8.0, 0.0, 7.0, 0.0, nan, nan, nan, 2.0, 6.0, 8.0, 6.0, 7.0, 7.0, 1.0, 9.0, 3.0, 0.0, 9.0, 1.0, 1.0, 8.0, 3.0, 7.0, nan, nan, nan, 2.0, 9.0, 5.0, 8.0, 4.0, 5.0, 2.0, 1.0, 7.0, 5.0, 8.0, 0.0, 7.0, 5.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [1.0, 3.0, 0.0, 7.0, 1.0, 5.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 4.0, 6.0, 1.0, 4.0, 2.0, 8.0, 7.0, 4.0, 7.0, 4.0, 3.0, 0.0, 8.0, 9.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 1.0, 8.0, 0.0, 8.0, 3.0, 6.0, 5.0, 5.0, 7.0, 9.0, 6.0, 3.0, 7.0, 5.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 9.0, 7.0, 5.0, 1.0, 6.0, 4.0, 0.0, 7.0, 4.0, 9.0, 4.0, 8.0, 6.0, 5.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 1.0, 9.0, 9.0, 5.0, 0.0, 5.0, 3.0, 0.0, 6.0, 5.0, 0.0, 3.0, 8.0, 3.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 1.0, 9.0, 4.0, 4.0, 2.0, 2.0, 3.0, 8.0, 0.0, 8.0, 8.0, 3.0, 8.0, ...]\nE   [right]: [1.0, 3.0, 0.0, 7.0, 1.0, 5.0, 5.0, nan, nan, nan, 7.0, 4.0, 6.0, 1.0, 4.0, 2.0, 8.0, 7.0, 4.0, 7.0, 4.0, 3.0, 0.0, 8.0, 9.0, 2.0, nan, nan, nan, 3.0, 1.0, 8.0, 0.0, 8.0, 3.0, 6.0, 5.0, 5.0, 7.0, 9.0, 6.0, 3.0, 7.0, 5.0, 1.0, nan, nan, nan, 5.0, 9.0, 7.0, 5.0, 1.0, 6.0, 4.0, 0.0, 7.0, 4.0, 9.0, 4.0, 8.0, 6.0, 5.0, 4.0, nan, nan, nan, 8.0, 1.0, 9.0, 9.0, 5.0, 0.0, 5.0, 3.0, 0.0, 6.0, 5.0, 0.0, 3.0, 8.0, 3.0, 9.0, nan, nan, nan, 0.0, 1.0, 9.0, 4.0, 4.0, 2.0, 2.0, 3.0, 8.0, 0.0, 8.0, 8.0, 3.0, 8.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [0.0, 9.0, 8.0, 1.0, 0.0, 7.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 8.0, 9.0, 5.0, 9.0, 9.0, 9.0, 6.0, 0.0, 6.0, 8.0, 4.0, 3.0, 1.0, 5.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 9.0, 9.0, 8.0, 8.0, 7.0, 9.0, 0.0, 9.0, 9.0, 1.0, 0.0, 7.0, 9.0, 3.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 4.0, 2.0, 2.0, 2.0, 3.0, 5.0, 8.0, 1.0, 2.0, 8.0, 6.0, 7.0, 9.0, 2.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 6.0, 9.0, 7.0, 6.0, 7.0, 6.0, 7.0, 0.0, 4.0, 8.0, 9.0, 6.0, 6.0, 7.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 1.0, 5.0, 1.0, 9.0, 7.0, 5.0, 0.0, 4.0, 5.0, 0.0, 3.0, 4.0, 1.0, ...]\nE   [right]: [0.0, 9.0, 8.0, 1.0, 0.0, 7.0, 5.0, nan, nan, nan, 0.0, 8.0, 9.0, 5.0, 9.0, 9.0, 9.0, 6.0, 0.0, 6.0, 8.0, 4.0, 3.0, 1.0, 5.0, 9.0, nan, nan, nan, 6.0, 9.0, 9.0, 8.0, 8.0, 7.0, 9.0, 0.0, 9.0, 9.0, 1.0, 0.0, 7.0, 9.0, 3.0, 5.0, nan, nan, nan, 6.0, 4.0, 2.0, 2.0, 2.0, 3.0, 5.0, 8.0, 1.0, 2.0, 8.0, 6.0, 7.0, 9.0, 2.0, 7.0, nan, nan, nan, 3.0, 6.0, 9.0, 7.0, 6.0, 7.0, 6.0, 7.0, 0.0, 4.0, 8.0, 9.0, 6.0, 6.0, 7.0, 4.0, nan, nan, nan, 4.0, 1.0, 5.0, 1.0, 9.0, 7.0, 5.0, 0.0, 4.0, 5.0, 0.0, 3.0, 4.0, 1.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [2.0, 72.0, 1.0, 96.0, 49.0, 63.0, 49.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 23.0, 74.0, 40.0, 81.0, 2.0, 94.0, 14.0, 39.0, 6.0, 25.0, 65.0, 57.0, 61.0, 96.0, 39.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 34.0, 3.0, 8.0, 20.0, 36.0, 21.0, 11.0, 57.0, 19.0, 85.0, 44.0, 37.0, 10.0, 58.0, 87.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 48.0, 92.0, 40.0, 66.0, 71.0, 41.0, 35.0, 34.0, 75.0, 12.0, 9.0, 53.0, 12.0, 37.0, 37.0, 46.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 21.0, 71.0, 94.0, 91.0, 72.0, 37.0, 46.0, 44.0, 3.0, 64.0, 60.0, 77.0, 13.0, 66.0, 5.0, 46.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 94.0, 19.0, 96.0, 75.0, 48.0, 80.0, 56.0, 45.0, 98.0, 49.0, 18.0, 19.0, 60.0]\nE   [right]: [2.0, 72.0, 1.0, 96.0, 49.0, 63.0, 49.0, nan, nan, nan, 23.0, 74.0, 40.0, 81.0, 2.0, 94.0, 14.0, 39.0, 6.0, 25.0, 65.0, 57.0, 61.0, 96.0, 39.0, 1.0, nan, nan, nan, 25.0, 34.0, 3.0, 8.0, 20.0, 36.0, 21.0, 11.0, 57.0, 19.0, 85.0, 44.0, 37.0, 10.0, 58.0, 87.0, nan, nan, nan, 48.0, 92.0, 40.0, 66.0, 71.0, 41.0, 35.0, 34.0, 75.0, 12.0, 9.0, 53.0, 12.0, 37.0, 37.0, 46.0, nan, nan, nan, 21.0, 71.0, 94.0, 91.0, 72.0, 37.0, 46.0, 44.0, 3.0, 64.0, 60.0, 77.0, 13.0, 66.0, 5.0, 46.0, nan, nan, nan, 5.0, 94.0, 19.0, 96.0, 75.0, 48.0, 80.0, 56.0, 45.0, 98.0, 49.0, 18.0, 19.0, 60.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [15.0, 2.0, 46.0, 4.0, 18.0, 35.0, 89.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 55.0, 65.0, 52.0, 80.0, 97.0, 81.0, 49.0, 2.0, 82.0, 74.0, 25.0, 83.0, 19.0, 76.0, 13.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 39.0, 49.0, 72.0, 21.0, 3.0, 77.0, 84.0, 77.0, 37.0, 86.0, 83.0, 41.0, 87.0, 2.0, 73.0, 49.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 68.0, 80.0, 7.0, 19.0, 49.0, 77.0, 75.0, 11.0, 11.0, 96.0, 71.0, 22.0, 30.0, 3.0, 18.0, 82.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 37.0, 77.0, 33.0, 36.0, 87.0, 92.0, 54.0, 48.0, 39.0, 80.0, 38.0, 6.0, 61.0, 58.0, 49.0, 85.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 70.0, 74.0, 89.0, 46.0, 62.0, 54.0, 46.0, 79.0, 9.0, 31.0, 62.0, 80.0, 56.0, 4.0, ...]\nE   [right]: [15.0, 2.0, 46.0, 4.0, 18.0, 35.0, 89.0, nan, nan, nan, 55.0, 65.0, 52.0, 80.0, 97.0, 81.0, 49.0, 2.0, 82.0, 74.0, 25.0, 83.0, 19.0, 76.0, 13.0, 1.0, nan, nan, nan, 39.0, 49.0, 72.0, 21.0, 3.0, 77.0, 84.0, 77.0, 37.0, 86.0, 83.0, 41.0, 87.0, 2.0, 73.0, 49.0, nan, nan, nan, 68.0, 80.0, 7.0, 19.0, 49.0, 77.0, 75.0, 11.0, 11.0, 96.0, 71.0, 22.0, 30.0, 3.0, 18.0, 82.0, nan, nan, nan, 37.0, 77.0, 33.0, 36.0, 87.0, 92.0, 54.0, 48.0, 39.0, 80.0, 38.0, 6.0, 61.0, 58.0, 49.0, 85.0, nan, nan, nan, 70.0, 74.0, 89.0, 46.0, 62.0, 54.0, 46.0, 79.0, 9.0, 31.0, 62.0, 80.0, 56.0, 4.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [77.0, 51.0, 98.0, 74.0, 5.0, 82.0, 80.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 29.0, 88.0, 37.0, 22.0, 24.0, 82.0, 74.0, 73.0, 49.0, 56.0, 64.0, 67.0, 32.0, 14.0, 45.0, 53.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 70.0, 89.0, 85.0, 25.0, 50.0, 69.0, 52.0, 31.0, 86.0, 6.0, 16.0, 6.0, 91.0, 90.0, 75.0, 35.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 41.0, 48.0, 25.0, 71.0, 19.0, 91.0, 20.0, 96.0, 12.0, 52.0, 84.0, 21.0, 89.0, 52.0, 91.0, 69.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 55.0, 43.0, 27.0, 74.0, 84.0, 63.0, 32.0, 54.0, 53.0, 68.0, 89.0, 0.0, 1.0, 69.0, 4.0, 31.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 31.0, 16.0, 76.0, 84.0, 19.0, 81.0, 73.0, 65.0, 59.0, 51.0, 20.0, 69.0, 22.0, 48.0, ...]\nE   [right]: [77.0, 51.0, 98.0, 74.0, 5.0, 82.0, 80.0, nan, nan, nan, 29.0, 88.0, 37.0, 22.0, 24.0, 82.0, 74.0, 73.0, 49.0, 56.0, 64.0, 67.0, 32.0, 14.0, 45.0, 53.0, nan, nan, nan, 70.0, 89.0, 85.0, 25.0, 50.0, 69.0, 52.0, 31.0, 86.0, 6.0, 16.0, 6.0, 91.0, 90.0, 75.0, 35.0, nan, nan, nan, 41.0, 48.0, 25.0, 71.0, 19.0, 91.0, 20.0, 96.0, 12.0, 52.0, 84.0, 21.0, 89.0, 52.0, 91.0, 69.0, nan, nan, nan, 55.0, 43.0, 27.0, 74.0, 84.0, 63.0, 32.0, 54.0, 53.0, 68.0, 89.0, 0.0, 1.0, 69.0, 4.0, 31.0, nan, nan, nan, 31.0, 16.0, 76.0, 84.0, 19.0, 81.0, 73.0, 65.0, 59.0, 51.0, 20.0, 69.0, 22.0, 48.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [22.0, 42.0, 90.0, 26.0, 25.0, 24.0, 72.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 79.0, 35.0, 50.0, 28.0, 92.0, 96.0, 74.0, 16.0, 86.0, 19.0, 47.0, 6.0, 21.0, 46.0, 51.0, 79.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 13.0, 17.0, 74.0, 91.0, 58.0, 92.0, 64.0, 2.0, 15.0, 73.0, 0.0, 71.0, 2.0, 10.0, 41.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 13.0, 64.0, 95.0, 24.0, 34.0, 31.0, 80.0, 41.0, 76.0, 90.0, 58.0, 84.0, 38.0, 40.0, 49.0, 39.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 99.0, 70.0, 47.0, 51.0, 84.0, 52.0, 1.0, 26.0, 54.0, 32.0, 17.0, 89.0, 56.0, 88.0, 97.0, 28.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 32.0, 39.0, 42.0, 39.0, 72.0, 11.0, 41.0, 23.0, 56.0, 61.0, 37.0, 76.0, 36.0, 35.0, ...]\nE   [right]: [22.0, 42.0, 90.0, 26.0, 25.0, 24.0, 72.0, nan, nan, nan, 79.0, 35.0, 50.0, 28.0, 92.0, 96.0, 74.0, 16.0, 86.0, 19.0, 47.0, 6.0, 21.0, 46.0, 51.0, 79.0, nan, nan, nan, 13.0, 17.0, 74.0, 91.0, 58.0, 92.0, 64.0, 2.0, 15.0, 73.0, 0.0, 71.0, 2.0, 10.0, 41.0, 6.0, nan, nan, nan, 13.0, 64.0, 95.0, 24.0, 34.0, 31.0, 80.0, 41.0, 76.0, 90.0, 58.0, 84.0, 38.0, 40.0, 49.0, 39.0, nan, nan, nan, 99.0, 70.0, 47.0, 51.0, 84.0, 52.0, 1.0, 26.0, 54.0, 32.0, 17.0, 89.0, 56.0, 88.0, 97.0, 28.0, nan, nan, nan, 32.0, 39.0, 42.0, 39.0, 72.0, 11.0, 41.0, 23.0, 56.0, 61.0, 37.0, 76.0, 36.0, 35.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [879.0, 72.0, 245.0, 235.0, 856.0, 44.0, 790.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 490.0, 448.0, 635.0, 35.0, 758.0, 871.0, 906.0, 400.0, 608.0, 705.0, 256.0, 725.0, 675.0, 753.0, 903.0, 864.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 978.0, 361.0, 319.0, 648.0, 773.0, 375.0, 835.0, 306.0, 188.0, 416.0, 83.0, 817.0, 232.0, 782.0, 705.0, 32.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 417.0, 700.0, 609.0, 754.0, 587.0, 587.0, 288.0, 837.0, 842.0, 535.0, 12.0, 995.0, 157.0, 831.0, 780.0, 648.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 363.0, 506.0, 224.0, 872.0, 865.0, 59.0, 748.0, 21.0, 369.0, 349.0, 671.0, 754.0, 961.0, 298.0, 712.0, 695.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 330.0, 62.0, 346.0, 408.0, 78.0, 926.0, 396.0, 79.0, 495.0, 107.0, 783.0, 35.0, 957.0, 5.0]\nE   [right]: [879.0, 72.0, 245.0, 235.0, 856.0, 44.0, 790.0, nan, nan, nan, 490.0, 448.0, 635.0, 35.0, 758.0, 871.0, 906.0, 400.0, 608.0, 705.0, 256.0, 725.0, 675.0, 753.0, 903.0, 864.0, nan, nan, nan, 978.0, 361.0, 319.0, 648.0, 773.0, 375.0, 835.0, 306.0, 188.0, 416.0, 83.0, 817.0, 232.0, 782.0, 705.0, 32.0, nan, nan, nan, 417.0, 700.0, 609.0, 754.0, 587.0, 587.0, 288.0, 837.0, 842.0, 535.0, 12.0, 995.0, 157.0, 831.0, 780.0, 648.0, nan, nan, nan, 363.0, 506.0, 224.0, 872.0, 865.0, 59.0, 748.0, 21.0, 369.0, 349.0, 671.0, 754.0, 961.0, 298.0, 712.0, 695.0, nan, nan, nan, 330.0, 62.0, 346.0, 408.0, 78.0, 926.0, 396.0, 79.0, 495.0, 107.0, 783.0, 35.0, 957.0, 5.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [857.0, 446.0, 86.0, 443.0, 376.0, 169.0, 351.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 468.0, 162.0, 690.0, 937.0, 938.0, 308.0, 337.0, 217.0, 510.0, 132.0, 61.0, 852.0, 377.0, 18.0, 856.0, 693.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 831.0, 919.0, 103.0, 830.0, 666.0, 875.0, 625.0, 328.0, 556.0, 265.0, 82.0, 434.0, 608.0, 592.0, 42.0, 297.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 882.0, 198.0, 356.0, 918.0, 640.0, 897.0, 149.0, 804.0, 295.0, 614.0, 458.0, 701.0, 56.0, 989.0, 223.0, 513.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 699.0, 482.0, 391.0, 136.0, 952.0, 520.0, 171.0, 223.0, 780.0, 63.0, 541.0, 823.0, 831.0, 959.0, 659.0, 927.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 377.0, 722.0, 171.0, 408.0, 238.0, 372.0, 827.0, 986.0, 377.0, 619.0, 113.0, 802.0, 515.0, 162.0, ...]\nE   [right]: [857.0, 446.0, 86.0, 443.0, 376.0, 169.0, 351.0, nan, nan, nan, 468.0, 162.0, 690.0, 937.0, 938.0, 308.0, 337.0, 217.0, 510.0, 132.0, 61.0, 852.0, 377.0, 18.0, 856.0, 693.0, nan, nan, nan, 831.0, 919.0, 103.0, 830.0, 666.0, 875.0, 625.0, 328.0, 556.0, 265.0, 82.0, 434.0, 608.0, 592.0, 42.0, 297.0, nan, nan, nan, 882.0, 198.0, 356.0, 918.0, 640.0, 897.0, 149.0, 804.0, 295.0, 614.0, 458.0, 701.0, 56.0, 989.0, 223.0, 513.0, nan, nan, nan, 699.0, 482.0, 391.0, 136.0, 952.0, 520.0, 171.0, 223.0, 780.0, 63.0, 541.0, 823.0, 831.0, 959.0, 659.0, 927.0, nan, nan, nan, 377.0, 722.0, 171.0, 408.0, 238.0, 372.0, 827.0, 986.0, 377.0, 619.0, 113.0, 802.0, 515.0, 162.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [422.0, 939.0, 236.0, 358.0, 364.0, 134.0, 13.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 241.0, 68.0, 329.0, 751.0, 689.0, 520.0, 102.0, 51.0, 84.0, 698.0, 747.0, 563.0, 565.0, 56.0, 681.0, 201.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 999.0, 529.0, 733.0, 234.0, 826.0, 371.0, 600.0, 47.0, 328.0, 7.0, 58.0, 673.0, 774.0, 935.0, 259.0, 294.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 651.0, 719.0, 275.0, 522.0, 611.0, 188.0, 4.0, 696.0, 659.0, 214.0, 934.0, 270.0, 69.0, 314.0, 15.0, 797.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 370.0, 897.0, 138.0, 325.0, 640.0, 923.0, 445.0, 653.0, 45.0, 156.0, 958.0, 838.0, 482.0, 844.0, 320.0, 569.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 238.0, 569.0, 344.0, 33.0, 381.0, 409.0, 930.0, 944.0, 432.0, 278.0, 79.0, 509.0, 400.0, 147.0, ...]\nE   [right]: [422.0, 939.0, 236.0, 358.0, 364.0, 134.0, 13.0, nan, nan, nan, 241.0, 68.0, 329.0, 751.0, 689.0, 520.0, 102.0, 51.0, 84.0, 698.0, 747.0, 563.0, 565.0, 56.0, 681.0, 201.0, nan, nan, nan, 999.0, 529.0, 733.0, 234.0, 826.0, 371.0, 600.0, 47.0, 328.0, 7.0, 58.0, 673.0, 774.0, 935.0, 259.0, 294.0, nan, nan, nan, 651.0, 719.0, 275.0, 522.0, 611.0, 188.0, 4.0, 696.0, 659.0, 214.0, 934.0, 270.0, 69.0, 314.0, 15.0, 797.0, nan, nan, nan, 370.0, 897.0, 138.0, 325.0, 640.0, 923.0, 445.0, 653.0, 45.0, 156.0, 958.0, 838.0, 482.0, 844.0, 320.0, 569.0, nan, nan, nan, 238.0, 569.0, 344.0, 33.0, 381.0, 409.0, 930.0, 944.0, 432.0, 278.0, 79.0, 509.0, 400.0, 147.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [318.0, 71.0, 992.0, 640.0, 610.0, 851.0, 92.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 423.0, 29.0, 501.0, 304.0, 225.0, 539.0, 486.0, 196.0, 738.0, 654.0, 182.0, 55.0, 552.0, 682.0, 633.0, 160.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 147.0, 412.0, 55.0, 922.0, 999.0, 840.0, 319.0, 444.0, 761.0, 944.0, 314.0, 689.0, 296.0, 27.0, 493.0, 56.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 983.0, 594.0, 215.0, 622.0, 303.0, 276.0, 878.0, 240.0, 340.0, 929.0, 150.0, 882.0, 372.0, 607.0, 173.0, 419.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 379.0, 848.0, 765.0, 751.0, 925.0, 922.0, 797.0, 449.0, 808.0, 522.0, 534.0, 7.0, 302.0, 772.0, 161.0, 265.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 287.0, 291.0, 587.0, 297.0, 563.0, 654.0, 585.0, 92.0, 559.0, 845.0, 342.0, 632.0, 182.0, 124.0, ...]\nE   [right]: [318.0, 71.0, 992.0, 640.0, 610.0, 851.0, 92.0, nan, nan, nan, 423.0, 29.0, 501.0, 304.0, 225.0, 539.0, 486.0, 196.0, 738.0, 654.0, 182.0, 55.0, 552.0, 682.0, 633.0, 160.0, nan, nan, nan, 147.0, 412.0, 55.0, 922.0, 999.0, 840.0, 319.0, 444.0, 761.0, 944.0, 314.0, 689.0, 296.0, 27.0, 493.0, 56.0, nan, nan, nan, 983.0, 594.0, 215.0, 622.0, 303.0, 276.0, 878.0, 240.0, 340.0, 929.0, 150.0, 882.0, 372.0, 607.0, 173.0, 419.0, nan, nan, nan, 379.0, 848.0, 765.0, 751.0, 925.0, 922.0, 797.0, 449.0, 808.0, 522.0, 534.0, 7.0, 302.0, 772.0, 161.0, 265.0, nan, nan, nan, 287.0, 291.0, 587.0, 297.0, 563.0, 654.0, 585.0, 92.0, 559.0, 845.0, 342.0, 632.0, 182.0, 124.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [8.0, 3.0, 7.0, 7.0, 4.0, 2.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 2.0, 0.0, 9.0, 7.0, 8.0, 7.0, 3.0, 1.0, 0.0, 6.0, 4.0, 0.0, 3.0, 7.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 7.0, 3.0, 0.0, 9.0, 5.0, 7.0, 6.0, 1.0, 4.0, 7.0, 1.0, 6.0, 9.0, 4.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 1.0, 5.0, 1.0, 3.0, 3.0, 8.0, 9.0, 0.0, 8.0, 4.0, 8.0, 4.0, 9.0, 3.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 1.0, 9.0, 1.0, 8.0, 5.0, 7.0, 7.0, 3.0, 5.0, 0.0, 5.0, 0.0, 4.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 4.0, 4.0, 2.0, 7.0, 1.0, 9.0, 7.0, 8.0, 9.0, 0.0, 6.0, 6.0, 9.0]\nE   [right]: [8.0, 3.0, 7.0, 7.0, 4.0, 2.0, 1.0, nan, nan, nan, 2.0, 2.0, 0.0, 9.0, 7.0, 8.0, 7.0, 3.0, 1.0, 0.0, 6.0, 4.0, 0.0, 3.0, 7.0, 7.0, nan, nan, nan, 9.0, 7.0, 3.0, 0.0, 9.0, 5.0, 7.0, 6.0, 1.0, 4.0, 7.0, 1.0, 6.0, 9.0, 4.0, 9.0, nan, nan, nan, 2.0, 1.0, 5.0, 1.0, 3.0, 3.0, 8.0, 9.0, 0.0, 8.0, 4.0, 8.0, 4.0, 9.0, 3.0, 8.0, nan, nan, nan, 7.0, 1.0, 9.0, 1.0, 8.0, 5.0, 7.0, 7.0, 3.0, 5.0, 0.0, 5.0, 0.0, 4.0, 0.0, 3.0, nan, nan, nan, 5.0, 4.0, 4.0, 2.0, 7.0, 1.0, 9.0, 7.0, 8.0, 9.0, 0.0, 6.0, 6.0, 9.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [9.0, 4.0, 5.0, 8.0, 2.0, 7.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 7.0, 0.0, 3.0, 9.0, 4.0, 2.0, 4.0, 1.0, 7.0, 9.0, 5.0, 5.0, 7.0, 7.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 9.0, 4.0, 7.0, 1.0, 0.0, 4.0, 9.0, 6.0, 2.0, 0.0, 3.0, 3.0, 8.0, 7.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 5.0, 4.0, 9.0, 5.0, 3.0, 0.0, 7.0, 7.0, 1.0, 0.0, 0.0, 7.0, 7.0, 0.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 9.0, 9.0, 5.0, 9.0, 1.0, 7.0, 0.0, 6.0, 1.0, 2.0, 6.0, 2.0, 7.0, 7.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 4.0, 7.0, 2.0, 4.0, 1.0, 8.0, 5.0, 5.0, 0.0, 3.0, 5.0, 9.0, 5.0, ...]\nE   [right]: [9.0, 4.0, 5.0, 8.0, 2.0, 7.0, 6.0, nan, nan, nan, 7.0, 7.0, 0.0, 3.0, 9.0, 4.0, 2.0, 4.0, 1.0, 7.0, 9.0, 5.0, 5.0, 7.0, 7.0, 6.0, nan, nan, nan, 0.0, 9.0, 4.0, 7.0, 1.0, 0.0, 4.0, 9.0, 6.0, 2.0, 0.0, 3.0, 3.0, 8.0, 7.0, 3.0, nan, nan, nan, 1.0, 5.0, 4.0, 9.0, 5.0, 3.0, 0.0, 7.0, 7.0, 1.0, 0.0, 0.0, 7.0, 7.0, 0.0, 1.0, nan, nan, nan, 1.0, 9.0, 9.0, 5.0, 9.0, 1.0, 7.0, 0.0, 6.0, 1.0, 2.0, 6.0, 2.0, 7.0, 7.0, 6.0, nan, nan, nan, 7.0, 4.0, 7.0, 2.0, 4.0, 1.0, 8.0, 5.0, 5.0, 0.0, 3.0, 5.0, 9.0, 5.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [9.0, 3.0, 4.0, 0.0, 2.0, 2.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 8.0, 6.0, 2.0, 0.0, 1.0, 0.0, 7.0, 5.0, 6.0, 9.0, 6.0, 8.0, 3.0, 1.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 4.0, 7.0, 8.0, 1.0, 6.0, 1.0, 5.0, 5.0, 3.0, 0.0, 6.0, 0.0, 5.0, 8.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 4.0, 2.0, 5.0, 9.0, 6.0, 0.0, 4.0, 9.0, 9.0, 4.0, 2.0, 0.0, 9.0, 0.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 0.0, 1.0, 1.0, 7.0, 6.0, 5.0, 5.0, 8.0, 5.0, 8.0, 7.0, 3.0, 3.0, 6.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 6.0, 8.0, 4.0, 8.0, 9.0, 7.0, 0.0, 0.0, 9.0, 2.0, 9.0, 6.0, 5.0, ...]\nE   [right]: [9.0, 3.0, 4.0, 0.0, 2.0, 2.0, 4.0, nan, nan, nan, 9.0, 8.0, 6.0, 2.0, 0.0, 1.0, 0.0, 7.0, 5.0, 6.0, 9.0, 6.0, 8.0, 3.0, 1.0, 0.0, nan, nan, nan, 6.0, 4.0, 7.0, 8.0, 1.0, 6.0, 1.0, 5.0, 5.0, 3.0, 0.0, 6.0, 0.0, 5.0, 8.0, 7.0, nan, nan, nan, 5.0, 4.0, 2.0, 5.0, 9.0, 6.0, 0.0, 4.0, 9.0, 9.0, 4.0, 2.0, 0.0, 9.0, 0.0, 6.0, nan, nan, nan, 7.0, 0.0, 1.0, 1.0, 7.0, 6.0, 5.0, 5.0, 8.0, 5.0, 8.0, 7.0, 3.0, 3.0, 6.0, 2.0, nan, nan, nan, 6.0, 6.0, 8.0, 4.0, 8.0, 9.0, 7.0, 0.0, 0.0, 9.0, 2.0, 9.0, 6.0, 5.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [1.0, 8.0, 0.0, 3.0, 8.0, 8.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 2.0, 2.0, 6.0, 7.0, 2.0, 2.0, 6.0, 4.0, 0.0, 1.0, 7.0, 2.0, 4.0, 5.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 1.0, 5.0, 5.0, 5.0, 8.0, 7.0, 7.0, 1.0, 8.0, 1.0, 6.0, 6.0, 3.0, 4.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 8.0, 3.0, 1.0, 2.0, 4.0, 8.0, 1.0, 5.0, 9.0, 0.0, 2.0, 8.0, 6.0, 2.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 6.0, 3.0, 9.0, 3.0, 9.0, 9.0, 8.0, 4.0, 6.0, 7.0, 3.0, 9.0, 2.0, 6.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 8.0, 8.0, 8.0, 6.0, 5.0, 0.0, 9.0, 4.0, 8.0, 4.0, 5.0, 5.0, 4.0, ...]\nE   [right]: [1.0, 8.0, 0.0, 3.0, 8.0, 8.0, 5.0, nan, nan, nan, 9.0, 2.0, 2.0, 6.0, 7.0, 2.0, 2.0, 6.0, 4.0, 0.0, 1.0, 7.0, 2.0, 4.0, 5.0, 6.0, nan, nan, nan, 8.0, 1.0, 5.0, 5.0, 5.0, 8.0, 7.0, 7.0, 1.0, 8.0, 1.0, 6.0, 6.0, 3.0, 4.0, 4.0, nan, nan, nan, 4.0, 8.0, 3.0, 1.0, 2.0, 4.0, 8.0, 1.0, 5.0, 9.0, 0.0, 2.0, 8.0, 6.0, 2.0, 9.0, nan, nan, nan, 7.0, 6.0, 3.0, 9.0, 3.0, 9.0, 9.0, 8.0, 4.0, 6.0, 7.0, 3.0, 9.0, 2.0, 6.0, 7.0, nan, nan, nan, 3.0, 8.0, 8.0, 8.0, 6.0, 5.0, 0.0, 9.0, 4.0, 8.0, 4.0, 5.0, 5.0, 4.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [8.0, 34.0, 71.0, 72.0, 17.0, 25.0, 94.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 29.0, 77.0, 89.0, 98.0, 49.0, 26.0, 69.0, 86.0, 15.0, 5.0, 21.0, 86.0, 49.0, 37.0, 96.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 20.0, 49.0, 91.0, 74.0, 72.0, 51.0, 54.0, 52.0, 14.0, 71.0, 17.0, 92.0, 51.0, 86.0, 5.0, 20.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 53.0, 96.0, 34.0, 20.0, 2.0, 13.0, 85.0, 56.0, 66.0, 11.0, 6.0, 94.0, 35.0, 49.0, 52.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 12.0, 97.0, 26.0, 66.0, 76.0, 93.0, 87.0, 12.0, 24.0, 72.0, 0.0, 73.0, 50.0, 67.0, 90.0, 16.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 74.0, 8.0, 49.0, 96.0, 53.0, 47.0, 27.0, 54.0, 7.0, 54.0, 25.0, 48.0, 8.0, 72.0]\nE   [right]: [8.0, 34.0, 71.0, 72.0, 17.0, 25.0, 94.0, nan, nan, nan, 0.0, 29.0, 77.0, 89.0, 98.0, 49.0, 26.0, 69.0, 86.0, 15.0, 5.0, 21.0, 86.0, 49.0, 37.0, 96.0, nan, nan, nan, 20.0, 49.0, 91.0, 74.0, 72.0, 51.0, 54.0, 52.0, 14.0, 71.0, 17.0, 92.0, 51.0, 86.0, 5.0, 20.0, nan, nan, nan, 53.0, 96.0, 34.0, 20.0, 2.0, 13.0, 85.0, 56.0, 66.0, 11.0, 6.0, 94.0, 35.0, 49.0, 52.0, 25.0, nan, nan, nan, 12.0, 97.0, 26.0, 66.0, 76.0, 93.0, 87.0, 12.0, 24.0, 72.0, 0.0, 73.0, 50.0, 67.0, 90.0, 16.0, nan, nan, nan, 74.0, 8.0, 49.0, 96.0, 53.0, 47.0, 27.0, 54.0, 7.0, 54.0, 25.0, 48.0, 8.0, 72.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [13.0, 26.0, 31.0, 22.0, 50.0, 34.0, 88.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 51.0, 28.0, 9.0, 63.0, 6.0, 78.0, 27.0, 26.0, 40.0, 5.0, 1.0, 47.0, 25.0, 97.0, 15.0, 75.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 73.0, 35.0, 46.0, 65.0, 77.0, 54.0, 82.0, 17.0, 11.0, 20.0, 5.0, 43.0, 89.0, 77.0, 4.0, 12.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 64.0, 70.0, 5.0, 51.0, 44.0, 84.0, 43.0, 90.0, 93.0, 78.0, 30.0, 11.0, 52.0, 58.0, 74.0, 19.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 15.0, 51.0, 35.0, 60.0, 34.0, 65.0, 77.0, 96.0, 26.0, 69.0, 59.0, 81.0, 68.0, 56.0, 35.0, 89.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 20.0, 58.0, 72.0, 82.0, 83.0, 11.0, 69.0, 41.0, 95.0, 18.0, 31.0, 27.0, 64.0, 38.0, ...]\nE   [right]: [13.0, 26.0, 31.0, 22.0, 50.0, 34.0, 88.0, nan, nan, nan, 51.0, 28.0, 9.0, 63.0, 6.0, 78.0, 27.0, 26.0, 40.0, 5.0, 1.0, 47.0, 25.0, 97.0, 15.0, 75.0, nan, nan, nan, 73.0, 35.0, 46.0, 65.0, 77.0, 54.0, 82.0, 17.0, 11.0, 20.0, 5.0, 43.0, 89.0, 77.0, 4.0, 12.0, nan, nan, nan, 64.0, 70.0, 5.0, 51.0, 44.0, 84.0, 43.0, 90.0, 93.0, 78.0, 30.0, 11.0, 52.0, 58.0, 74.0, 19.0, nan, nan, nan, 15.0, 51.0, 35.0, 60.0, 34.0, 65.0, 77.0, 96.0, 26.0, 69.0, 59.0, 81.0, 68.0, 56.0, 35.0, 89.0, nan, nan, nan, 20.0, 58.0, 72.0, 82.0, 83.0, 11.0, 69.0, 41.0, 95.0, 18.0, 31.0, 27.0, 64.0, 38.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [99.0, 7.0, 89.0, 28.0, 17.0, 58.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 55.0, 73.0, 95.0, 2.0, 94.0, 3.0, 20.0, 6.0, 41.0, 87.0, 81.0, 4.0, 53.0, 21.0, 88.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 17.0, 82.0, 24.0, 61.0, 25.0, 37.0, 70.0, 84.0, 13.0, 57.0, 35.0, 88.0, 83.0, 99.0, 19.0, 40.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 71.0, 41.0, 35.0, 2.0, 54.0, 44.0, 50.0, 59.0, 47.0, 51.0, 43.0, 26.0, 92.0, 81.0, 87.0, 52.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 78.0, 41.0, 76.0, 17.0, 66.0, 87.0, 42.0, 31.0, 11.0, 55.0, 6.0, 15.0, 27.0, 46.0, 92.0, 74.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 18.0, 8.0, 73.0, 52.0, 41.0, 71.0, 63.0, 43.0, 34.0, 42.0, 13.0, 99.0, 37.0, 0.0, ...]\nE   [right]: [99.0, 7.0, 89.0, 28.0, 17.0, 58.0, 4.0, nan, nan, nan, 55.0, 73.0, 95.0, 2.0, 94.0, 3.0, 20.0, 6.0, 41.0, 87.0, 81.0, 4.0, 53.0, 21.0, 88.0, 0.0, nan, nan, nan, 17.0, 82.0, 24.0, 61.0, 25.0, 37.0, 70.0, 84.0, 13.0, 57.0, 35.0, 88.0, 83.0, 99.0, 19.0, 40.0, nan, nan, nan, 71.0, 41.0, 35.0, 2.0, 54.0, 44.0, 50.0, 59.0, 47.0, 51.0, 43.0, 26.0, 92.0, 81.0, 87.0, 52.0, nan, nan, nan, 78.0, 41.0, 76.0, 17.0, 66.0, 87.0, 42.0, 31.0, 11.0, 55.0, 6.0, 15.0, 27.0, 46.0, 92.0, 74.0, nan, nan, nan, 18.0, 8.0, 73.0, 52.0, 41.0, 71.0, 63.0, 43.0, 34.0, 42.0, 13.0, 99.0, 37.0, 0.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [89.0, 25.0, 0.0, 16.0, 88.0, 8.0, 99.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 38.0, 64.0, 7.0, 68.0, 28.0, 41.0, 72.0, 21.0, 51.0, 94.0, 34.0, 65.0, 18.0, 14.0, 14.0, 68.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 72.0, 30.0, 34.0, 61.0, 40.0, 98.0, 80.0, 15.0, 55.0, 77.0, 75.0, 68.0, 49.0, 63.0, 77.0, 37.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 45.0, 20.0, 93.0, 59.0, 55.0, 60.0, 92.0, 80.0, 90.0, 68.0, 99.0, 16.0, 66.0, 61.0, 95.0, 20.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 80.0, 0.0, 51.0, 22.0, 46.0, 62.0, 87.0, 32.0, 22.0, 32.0, 84.0, 87.0, 2.0, 33.0, 80.0, 99.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 63.0, 41.0, 19.0, 5.0, 86.0, 22.0, 67.0, 17.0, 71.0, 5.0, 42.0, 74.0, 50.0, 27.0, ...]\nE   [right]: [89.0, 25.0, 0.0, 16.0, 88.0, 8.0, 99.0, nan, nan, nan, 38.0, 64.0, 7.0, 68.0, 28.0, 41.0, 72.0, 21.0, 51.0, 94.0, 34.0, 65.0, 18.0, 14.0, 14.0, 68.0, nan, nan, nan, 72.0, 30.0, 34.0, 61.0, 40.0, 98.0, 80.0, 15.0, 55.0, 77.0, 75.0, 68.0, 49.0, 63.0, 77.0, 37.0, nan, nan, nan, 45.0, 20.0, 93.0, 59.0, 55.0, 60.0, 92.0, 80.0, 90.0, 68.0, 99.0, 16.0, 66.0, 61.0, 95.0, 20.0, nan, nan, nan, 80.0, 0.0, 51.0, 22.0, 46.0, 62.0, 87.0, 32.0, 22.0, 32.0, 84.0, 87.0, 2.0, 33.0, 80.0, 99.0, nan, nan, nan, 63.0, 41.0, 19.0, 5.0, 86.0, 22.0, 67.0, 17.0, 71.0, 5.0, 42.0, 74.0, 50.0, 27.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [91.0, 624.0, 121.0, 553.0, 544.0, 460.0, 607.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 907.0, 123.0, 903.0, 837.0, 771.0, 763.0, 713.0, 872.0, 421.0, 590.0, 921.0, 549.0, 196.0, 982.0, 379.0, 665.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 964.0, 419.0, 930.0, 792.0, 21.0, 636.0, 280.0, 460.0, 16.0, 105.0, 721.0, 40.0, 187.0, 825.0, 932.0, 594.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 466.0, 708.0, 537.0, 825.0, 492.0, 420.0, 558.0, 200.0, 923.0, 208.0, 891.0, 656.0, 516.0, 563.0, 692.0, 293.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 177.0, 720.0, 157.0, 495.0, 887.0, 64.0, 680.0, 211.0, 781.0, 245.0, 410.0, 288.0, 873.0, 426.0, 447.0, 234.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 415.0, 358.0, 694.0, 168.0, 600.0, 335.0, 47.0, 724.0, 596.0, 419.0, 647.0, 808.0, 463.0, 217.0]\nE   [right]: [91.0, 624.0, 121.0, 553.0, 544.0, 460.0, 607.0, nan, nan, nan, 907.0, 123.0, 903.0, 837.0, 771.0, 763.0, 713.0, 872.0, 421.0, 590.0, 921.0, 549.0, 196.0, 982.0, 379.0, 665.0, nan, nan, nan, 964.0, 419.0, 930.0, 792.0, 21.0, 636.0, 280.0, 460.0, 16.0, 105.0, 721.0, 40.0, 187.0, 825.0, 932.0, 594.0, nan, nan, nan, 466.0, 708.0, 537.0, 825.0, 492.0, 420.0, 558.0, 200.0, 923.0, 208.0, 891.0, 656.0, 516.0, 563.0, 692.0, 293.0, nan, nan, nan, 177.0, 720.0, 157.0, 495.0, 887.0, 64.0, 680.0, 211.0, 781.0, 245.0, 410.0, 288.0, 873.0, 426.0, 447.0, 234.0, nan, nan, nan, 415.0, 358.0, 694.0, 168.0, 600.0, 335.0, 47.0, 724.0, 596.0, 419.0, 647.0, 808.0, 463.0, 217.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 1000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [511.0, 992.0, 976.0, 25.0, 447.0, 743.0, 231.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 907.0, 394.0, 110.0, 355.0, 144.0, 81.0, 689.0, 50.0, 410.0, 964.0, 35.0, 794.0, 957.0, 823.0, 102.0, 844.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 272.0, 729.0, 254.0, 834.0, 330.0, 582.0, 674.0, 825.0, 59.0, 890.0, 136.0, 743.0, 445.0, 616.0, 651.0, 982.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 686.0, 350.0, 395.0, 172.0, 208.0, 603.0, 191.0, 654.0, 765.0, 830.0, 340.0, 781.0, 727.0, 906.0, 363.0, 418.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 468.0, 356.0, 478.0, 927.0, 393.0, 580.0, 723.0, 960.0, 10.0, 444.0, 141.0, 948.0, 631.0, 749.0, 984.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 317.0, 552.0, 790.0, 534.0, 671.0, 567.0, 760.0, 504.0, 757.0, 303.0, 800.0, 97.0, 697.0, 930.0, ...]\nE   [right]: [511.0, 992.0, 976.0, 25.0, 447.0, 743.0, 231.0, nan, nan, nan, 907.0, 394.0, 110.0, 355.0, 144.0, 81.0, 689.0, 50.0, 410.0, 964.0, 35.0, 794.0, 957.0, 823.0, 102.0, 844.0, nan, nan, nan, 272.0, 729.0, 254.0, 834.0, 330.0, 582.0, 674.0, 825.0, 59.0, 890.0, 136.0, 743.0, 445.0, 616.0, 651.0, 982.0, nan, nan, nan, 686.0, 350.0, 395.0, 172.0, 208.0, 603.0, 191.0, 654.0, 765.0, 830.0, 340.0, 781.0, 727.0, 906.0, 363.0, 418.0, nan, nan, nan, 25.0, 468.0, 356.0, 478.0, 927.0, 393.0, 580.0, 723.0, 960.0, 10.0, 444.0, 141.0, 948.0, 631.0, 749.0, 984.0, nan, nan, nan, 317.0, 552.0, 790.0, 534.0, 671.0, 567.0, 760.0, 504.0, 757.0, 303.0, 800.0, 97.0, 697.0, 930.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 10000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [368.0, 756.0, 971.0, 894.0, 566.0, 311.0, 456.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 263.0, 224.0, 751.0, 917.0, 361.0, 333.0, 390.0, 528.0, 426.0, 897.0, 973.0, 239.0, 216.0, 779.0, 805.0, 480.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 353.0, 297.0, 288.0, 128.0, 634.0, 552.0, 770.0, 641.0, 703.0, 683.0, 737.0, 532.0, 368.0, 212.0, 359.0, 876.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 700.0, 82.0, 567.0, 95.0, 582.0, 743.0, 741.0, 890.0, 609.0, 87.0, 354.0, 587.0, 21.0, 342.0, 37.0, 92.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 372.0, 793.0, 864.0, 923.0, 615.0, 147.0, 674.0, 794.0, 432.0, 314.0, 448.0, 647.0, 768.0, 868.0, 737.0, 414.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 774.0, 715.0, 336.0, 976.0, 259.0, 121.0, 444.0, 318.0, 806.0, 716.0, 141.0, 598.0, 908.0, 764.0, ...]\nE   [right]: [368.0, 756.0, 971.0, 894.0, 566.0, 311.0, 456.0, nan, nan, nan, 263.0, 224.0, 751.0, 917.0, 361.0, 333.0, 390.0, 528.0, 426.0, 897.0, 973.0, 239.0, 216.0, 779.0, 805.0, 480.0, nan, nan, nan, 353.0, 297.0, 288.0, 128.0, 634.0, 552.0, 770.0, 641.0, 703.0, 683.0, 737.0, 532.0, 368.0, 212.0, 359.0, 876.0, nan, nan, nan, 700.0, 82.0, 567.0, 95.0, 582.0, 743.0, 741.0, 890.0, 609.0, 87.0, 354.0, 587.0, 21.0, 342.0, 37.0, 92.0, nan, nan, nan, 372.0, 793.0, 864.0, 923.0, 615.0, 147.0, 674.0, 794.0, 432.0, 314.0, 448.0, 647.0, 768.0, 868.0, 737.0, 414.0, nan, nan, nan, 774.0, 715.0, 336.0, 976.0, 259.0, 121.0, 444.0, 318.0, 806.0, 716.0, 141.0, 598.0, 908.0, 764.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n## The error message from the failing test\n```text\nn = 100000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [348.0, 457.0, 239.0, 442.0, 17.0, 321.0, 458.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 800.0, 36.0, 428.0, 182.0, 311.0, 743.0, 780.0, 791.0, 696.0, 70.0, 4.0, 900.0, 649.0, 573.0, 231.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 713.0, 457.0, 633.0, 197.0, 727.0, 853.0, 557.0, 971.0, 817.0, 727.0, 649.0, 759.0, 367.0, 544.0, 171.0, 910.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 149.0, 35.0, 53.0, 994.0, 7.0, 828.0, 888.0, 438.0, 837.0, 900.0, 540.0, 689.0, 720.0, 459.0, 388.0, 690.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 961.0, 748.0, 905.0, 259.0, 185.0, 875.0, 386.0, 437.0, 313.0, 511.0, 641.0, 850.0, 649.0, 567.0, 307.0, 827.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 481.0, 762.0, 925.0, 714.0, 791.0, 467.0, 371.0, 325.0, 804.0, 185.0, 104.0, 727.0, 159.0, 429.0, ...]\nE   [right]: [348.0, 457.0, 239.0, 442.0, 17.0, 321.0, 458.0, nan, nan, nan, 5.0, 800.0, 36.0, 428.0, 182.0, 311.0, 743.0, 780.0, 791.0, 696.0, 70.0, 4.0, 900.0, 649.0, 573.0, 231.0, nan, nan, nan, 713.0, 457.0, 633.0, 197.0, 727.0, 853.0, 557.0, 971.0, 817.0, 727.0, 649.0, 759.0, 367.0, 544.0, 171.0, 910.0, nan, nan, nan, 149.0, 35.0, 53.0, 994.0, 7.0, 828.0, 888.0, 438.0, 837.0, 900.0, 540.0, 689.0, 720.0, 459.0, 388.0, 690.0, nan, nan, nan, 961.0, 748.0, 905.0, 259.0, 185.0, 875.0, 386.0, 437.0, 313.0, 511.0, 641.0, 850.0, 649.0, 567.0, 307.0, 827.0, nan, nan, nan, 481.0, 762.0, 925.0, 714.0, 791.0, 467.0, 371.0, 325.0, 804.0, 185.0, 104.0, 727.0, 159.0, 429.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n",
    "6": "# Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n## Case 1\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     9\n1     0\n2     3\n3     1\n4     0\n     ..\n95    5\n96    2\n97    9\n98    1\n99    6\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  3,  3,\n        4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,\n        7,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 10,\n       10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14,\n       15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19,\n       19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([9, 0, 3, 1, 2, 8, 5, 6, 7, 4])`, type: `ndarray`\n\nval, value: `array([9, 0, 3, 1, 0, 2, 0, 1, 8, 2, 0, 2, 5, 5, 5, 8, 0, 6, 7, 4, 7, 8,\n       6, 6, 5, 3, 2, 9, 7, 4, 5, 2, 3, 3, 3, 5, 7, 9, 3, 2, 9, 5, 7, 6,\n       5, 3, 0, 3, 8, 3, 4, 6, 6, 8, 7, 3, 1, 3, 4, 1, 4, 8, 1, 2, 0, 8,\n       9, 6, 2, 7, 0, 2, 3, 0, 9, 6, 0, 0, 5, 7, 1, 1, 5, 5, 9, 2, 2, 7,\n       2, 4, 2, 5, 2, 4, 8, 5, 2, 9, 1, 6])`, type: `ndarray`\n\ncodes, value: `array([0, 4, 5, 6, 7, 1, 4, 4, 7, 1, 2, 2, 0, 2, 2, 3, 7, 0, 1, 6, 4, 7,\n       9, 0, 1, 2, 7, 7, 1, 1, 2, 2, 3, 5, 6, 2, 3, 4, 4, 4, 5, 7, 0, 1,\n       4, 6, 8, 8, 9, 4, 6, 6, 1, 2, 8, 8, 9, 2, 5, 6, 0, 6, 9, 2, 4, 5,\n       5, 9, 1, 4, 4, 8, 6, 8, 9, 0, 6, 7, 9, 1, 3, 6, 1, 3, 3, 8, 5, 6,\n       7, 8, 2, 3, 4, 3, 4, 5, 0, 4, 6, 8])`, type: `ndarray`\n\nsorter, value: `array([ 0, 11,  8, 12, 22,  1, 39, 90, 52, 16,  2, 72, 74, 34, 49,  3, 67,\n       37,  4, 41,  5, 99, 19, 97,  6, 32, 23, 43, 64, 73, 45, 57,  7, 94,\n       14, 47, 81,  9, 85, 86, 15, 17, 84, 10, 96, 83, 20, 28, 29, 63, 13,\n       30, 70, 33, 18, 36, 50, 38, 21, 95, 27, 24, 60, 25, 26, 48, 53, 93,\n       76, 31, 68, 42, 35, 54, 89, 40, 82, 75, 58, 77, 80, 44, 46, 56, 59,\n       87, 65, 91, 51, 79, 55, 98, 88, 62, 92, 61, 66, 71, 78, 69])`, type: `ndarray`\n\nidx, value: `array([ 0,  5,  9, 12, 17, 20, 23, 28, 35, 42, 49, 52, 57, 60, 63, 68, 72,\n       75, 79, 82, 86, 90, 93, 96, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 3, 2, 4, 3, 3, 4, 5, 5, 6, 2, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3,\n       3, 1, 3])`, type: `ndarray`\n\nres, value: `array([5, 3, 2, 4, 3, 3, 4, 5, 5, 6, 2, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3,\n       3, 1, 3])`, type: `ndarray`\n\nri, value: `Index(['q', 'w', 'b', 'm', 'k', 'e', 'a', 'l', 'u', 'o', 'p', 't', 'v', 'd',\n       'g', 'j', 'f', 'c', 'i', 'x', 'z', 'y', 's', 'n', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nq    5\nw    3\nb    2\nm    4\nk    3\ne    3\na    4\nl    5\nu    5\no    6\np    2\nt    4\nv    3\nd    3\ng    4\nj    3\nf    3\nc    4\ni    3\nx    3\nz    4\ny    3\ns    3\nn    1\nr    3\nName: julie, dtype: int64`, type: `Series`\n\n## Case 2\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     9\n1     0\n2     3\n3     1\n4     0\n     ..\n95    5\n96    2\n97    9\n98    1\n99    6\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  7,  8,  8,  9,  9,  9, 10, 10, 11,\n       12, 13, 14, 15, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 22, 23, 24,\n       25, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38,\n       39, 40, 41, 41, 42, 43, 43, 44, 44, 45, 46, 47, 48, 49, 50, 50, 51,\n       52, 52, 53, 53, 54, 55, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 68, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, value: `array([9, 0, 3, 1, 2, 8, 5, 6, 7, 4])`, type: `ndarray`\n\nval, value: `array([9, 0, 3, 1, 0, 2, 0, 1, 8, 2, 0, 2, 5, 5, 5, 8, 0, 6, 7, 4, 7, 8,\n       6, 6, 5, 3, 2, 9, 7, 4, 5, 2, 3, 3, 3, 5, 7, 9, 3, 2, 9, 5, 7, 6,\n       5, 3, 0, 3, 8, 3, 4, 6, 6, 8, 7, 3, 1, 3, 4, 1, 4, 8, 1, 2, 0, 8,\n       9, 6, 2, 7, 0, 2, 3, 0, 9, 6, 0, 0, 5, 7, 1, 1, 5, 5, 9, 2, 2, 7,\n       2, 4, 2, 5, 2, 4, 8, 5, 2, 9, 1, 6])`, type: `ndarray`\n\ncodes, value: `array([0, 1, 2, 3, 1, 4, 1, 1, 3, 5, 7, 2, 4, 7, 1, 8, 4, 6, 6, 6, 5, 1,\n       2, 8, 9, 8, 9, 5, 6, 0, 7, 6, 2, 4, 0, 9, 4, 6, 4, 2, 2, 6, 8, 0,\n       2, 4, 0, 7, 6, 8, 7, 6, 2, 1, 3, 5, 2, 7, 1, 9, 7, 7, 5, 8, 2, 1,\n       2, 9, 3, 8, 4, 5, 3, 5, 6, 8, 0, 4, 8, 4, 2, 0, 1, 1, 6, 3, 3, 6,\n       4, 6, 0, 4, 4, 4, 9, 4, 9, 5, 3, 7])`, type: `ndarray`\n\nsorter, value: `array([ 0,  1,  2,  3,  4,  5,  6, 64,  7,  8, 22, 47,  9, 17, 10, 28, 11,\n       12, 13, 14, 15, 16, 33, 18, 19, 20, 29, 21, 95, 97, 23, 24, 25, 26,\n       27, 60, 63, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 75, 41, 42, 43,\n       44, 45, 46, 56, 48, 49, 67, 70, 50, 51, 52, 53, 54, 55, 73, 57, 58,\n       59, 87, 92, 61, 62, 65, 91, 79, 66, 68, 69, 71, 72, 74, 76, 77, 78,\n       80, 81, 82, 96, 83, 84, 85, 86, 88, 89, 90, 93, 94, 98, 99])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  9, 11, 14, 16, 17, 18, 19, 20, 21,\n       22, 24, 25, 27, 29, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44,\n       45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 63, 64, 65,\n       67, 68, 70, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\n       88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2,\n       1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2,\n       2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2,\n       1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2,\n       2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('q', '2015-08-29') ... ('e', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nq    2015-08-29    1\nw    2015-08-28    1\nb    2015-08-28    1\nm    2015-08-24    1\nk    2015-08-23    1\n                  ..\nw    2015-08-25    1\ng    2015-08-25    1\nl    2015-08-25    1\ny    2015-08-23    1\ne    2015-09-01    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n## Case 3\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     9.0\n1     0.0\n2     3.0\n3     1.0\n4     0.0\n     ... \n95    5.0\n96    2.0\n97    9.0\n98    1.0\n99    6.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,\n        2,  2,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,\n        9,  9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13,\n       14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18,\n       19, 19, 19, 19, 20, 20, 21, 21, 21, 22, 22, 22, 23, 24, 24])`, type: `ndarray`\n\n_, value: `array([9., 0., 3., 1., 2., 5., 8., 6., 7., 4.])`, type: `ndarray`\n\nval, value: `array([ 9.,  0.,  3.,  1.,  0., ... ,  8.,  5.,  2.,  9.,  1.,  6.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  4,  5,  7,  8,  8, -1,  0,  4,  5,  7,  1,  2,  2,  0,  2,  2,\n        3,  7,  0,  1,  5,  4,  7,  9,  0,  1,  2,  7,  7, -1, -1, -1,  1,\n        2,  5,  6, -1, -1, -1,  3,  6,  7, -1, -1, -1,  1,  4,  8,  9,  4,\n        5,  5,  2,  5,  6, -1,  5,  9, -1,  2,  6,  6,  9,  1,  4,  4,  8,\n        1,  2,  8,  9,  4,  4,  0,  5,  7,  9,  1,  3,  5, -1,  3,  3,  8,\n       -1,  5,  7,  8,  8,  9,  2,  3,  4,  3,  4,  6, -1,  4,  5])`, type: `ndarray`\n\nsorter, value: `array([ 1, 86, 35, 52, 18, 69,  8,  0, 11, 12, 22, 16,  2, 72, 74, 34, 49,\n        3, 67, 37,  4, 41,  5, 99, 19, 97,  6, 32, 23, 43,  7, 45, 64, 73,\n       57, 14, 94,  9, 47, 85, 81, 15, 17, 28, 83, 84, 10, 96, 20, 29, 63,\n       13, 30, 38, 95, 21, 27, 24, 60, 26, 25, 48, 53, 93, 76, 31, 68, 42,\n       70, 33, 36, 50, 39, 90, 40, 82, 75, 58, 77, 80, 44, 46, 56, 59, 87,\n       65, 91, 51, 79, 54, 89, 55, 98, 88, 62, 92, 61, 66, 71, 78])`, type: `ndarray`\n\nidx, value: `array([ 6, 11, 14, 19, 22, 25, 30, 37, 43, 50, 53, 56, 59, 64, 68, 72, 74,\n       78, 81, 85, 89, 91, 94, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 5, 2, 4, 3, 3, 4, 5, 4, 5, 2, 3, 3, 4, 3, 4, 1, 4, 3, 3, 4, 2,\n       3, 3, 1, 2])`, type: `ndarray`\n\nres, value: `array([5, 2, 4, 3, 3, 4, 5, 4, 5, 2, 3, 3, 4, 3, 4, 1, 4, 3, 3, 4, 2, 3,\n       3, 1, 2])`, type: `ndarray`\n\nri, value: `Index(['q', 'b', 'm', 'k', 'e', 'a', 'l', 'u', 'o', 'p', 'v', 'd', 'g', 'j',\n       't', 'w', 'c', 'i', 'x', 'z', 'f', 'y', 's', 'n', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nq    5\nb    2\nm    4\nk    3\ne    3\na    4\nl    5\nu    4\no    5\np    2\nv    3\nd    3\ng    4\nj    3\nt    4\nw    1\nc    4\ni    3\nx    3\nz    4\nf    2\ny    3\ns    3\nn    1\nr    2\nName: julie, dtype: int64`, type: `Series`\n\n## Case 4\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     9.0\n1     0.0\n2     3.0\n3     1.0\n4     0.0\n     ... \n95    5.0\n96    2.0\n97    9.0\n98    1.0\n99    6.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  5,  6,\n        6,  7,  7,  7,  8,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 17,\n       18, 18, 19, 20, 21, 22, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n       32, 33, 34, 35, 36, 37, 37, 38, 39, 39, 40, 40, 41, 42, 43, 44, 45,\n       45, 46, 47, 47, 48, 48, 49, 50, 50, 50, 51, 52, 53, 54, 55, 56, 57,\n       58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71])`, type: `ndarray`\n\n_, value: `array([9., 0., 3., 1., 2., 5., 8., 6., 7., 4.])`, type: `ndarray`\n\nval, value: `array([ 9.,  0.,  3.,  1.,  0., ... ,  8.,  5.,  2.,  9.,  1.,  6.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  1,  3,  4,  5,  7,  8,  8,  0,  2,  1,  4,  1, -1, -1, -1,\n        7, -1, -1,  7, -1,  1,  4,  5,  5,  5,  6,  1,  9,  8,  9,  5,  6,\n        0,  7,  5,  2, -1, -1,  9,  4,  5,  4,  2,  2,  2,  8,  0,  2,  4,\n        5,  8,  7,  5, -1, -1,  3,  6,  2,  7,  1,  9,  7,  6,  8,  2,  1,\n        2,  9,  3,  8,  4,  6,  3, -1,  5,  8, -1,  4,  4,  2,  0,  7,  1,\n        5,  3,  3,  5, -1,  4, -1, -1,  4,  9,  4,  9,  6,  3,  7])`, type: `ndarray`\n\nsorter, value: `array([40,  1, 77,  3, 86, 35, 52, 18, 69,  0,  2,  4,  5,  6,  7, 64,  8,\n       22,  9, 47, 17, 28, 10, 11, 12, 13, 14, 15, 16, 19, 20, 29, 95, 21,\n       97, 23, 24, 25, 26, 27, 60, 63, 30, 31, 32, 33, 34, 36, 37, 38, 39,\n       41, 42, 43, 44, 45, 46, 56, 48, 49, 67, 70, 50, 51, 53, 54, 55, 73,\n       57, 58, 59, 87, 92, 61, 62, 65, 91, 79, 66, 68, 71, 72, 74, 75, 76,\n       78, 80, 81, 82, 83, 96, 84, 85, 88, 89, 90, 93, 94, 98, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 16, 18, 21, 23, 24, 25, 26, 27, 28, 29, 30,\n       32, 34, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 66, 67, 69, 70, 72, 74, 75,\n       78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95,\n       96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([7, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1,\n       1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1,\n       1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1,\n       1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('q', '2015-08-29') ... ('e', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(72,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nq    2015-08-29    1\nb    2015-08-28    1\nk    2015-08-23    1\ne    2015-08-30    1\na    2015-08-24    1\n                  ..\nw    2015-08-25    1\ng    2015-08-25    1\nl    2015-08-25    1\ny    2015-08-23    1\ne    2015-09-01    1\nName: julie, Length: 72, dtype: int64`, type: `Series`\n\n## Case 5\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     9.0\n1     0.0\n2     3.0\n3     1.0\n4     0.0\n     ... \n95    5.0\n96    2.0\n97    9.0\n98    1.0\n99    6.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,\n        2,  2,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,\n        9,  9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13,\n       14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18,\n       19, 19, 19, 19, 20, 20, 21, 21, 21, 22, 22, 22, 23, 24, 24])`, type: `ndarray`\n\n_, value: `array([9., 0., 3., 1., 2., 5., 8., 6., 7., 4.])`, type: `ndarray`\n\nval, value: `array([ 9.,  0.,  3.,  1.,  0., ... ,  8.,  5.,  2.,  9.,  1.,  6.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  4,  5,  7,  8,  8, -1,  0,  4,  5,  7,  1,  2,  2,  0,  2,  2,\n        3,  7,  0,  1,  5,  4,  7,  9,  0,  1,  2,  7,  7, -1, -1, -1,  1,\n        2,  5,  6, -1, -1, -1,  3,  6,  7, -1, -1, -1,  1,  4,  8,  9,  4,\n        5,  5,  2,  5,  6, -1,  5,  9, -1,  2,  6,  6,  9,  1,  4,  4,  8,\n        1,  2,  8,  9,  4,  4,  0,  5,  7,  9,  1,  3,  5, -1,  3,  3,  8,\n       -1,  5,  7,  8,  8,  9,  2,  3,  4,  3,  4,  6, -1,  4,  5])`, type: `ndarray`\n\nsorter, value: `array([ 1, 86, 35, 52, 18, 69,  8,  0, 11, 12, 22, 16,  2, 72, 74, 34, 49,\n        3, 67, 37,  4, 41,  5, 99, 19, 97,  6, 32, 23, 43,  7, 45, 64, 73,\n       57, 14, 94,  9, 47, 85, 81, 15, 17, 28, 83, 84, 10, 96, 20, 29, 63,\n       13, 30, 38, 95, 21, 27, 24, 60, 26, 25, 48, 53, 93, 76, 31, 68, 42,\n       70, 33, 36, 50, 39, 90, 40, 82, 75, 58, 77, 80, 44, 46, 56, 59, 87,\n       65, 91, 51, 79, 54, 89, 55, 98, 88, 62, 92, 61, 66, 71, 78])`, type: `ndarray`\n\nidx, value: `array([ 6, 11, 14, 19, 22, 25, 30, 37, 43, 50, 53, 56, 59, 64, 68, 72, 74,\n       78, 81, 85, 89, 91, 94, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 5, 2, 4, 3, 3, 4, 5, 4, 5, 2, 3, 3, 4, 3, 4, 1, 4, 3, 3, 4, 2,\n       3, 3, 1, 2])`, type: `ndarray`\n\nres, value: `array([5, 2, 4, 3, 3, 4, 5, 4, 5, 2, 3, 3, 4, 3, 4, 1, 4, 3, 3, 4, 2, 3,\n       3, 1, 2])`, type: `ndarray`\n\nri, value: `Index(['q', 'b', 'm', 'k', 'e', 'a', 'l', 'u', 'o', 'p', 'v', 'd', 'g', 'j',\n       't', 'w', 'c', 'i', 'x', 'z', 'f', 'y', 's', 'n', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nq    5\nb    2\nm    4\nk    3\ne    3\na    4\nl    5\nu    4\no    5\np    2\nv    3\nd    3\ng    4\nj    3\nt    4\nw    1\nc    4\ni    3\nx    3\nz    4\nf    2\ny    3\ns    3\nn    1\nr    2\nName: julie, dtype: int64`, type: `Series`\n\n## Case 6\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     9.0\n1     0.0\n2     3.0\n3     1.0\n4     0.0\n     ... \n95    5.0\n96    2.0\n97    9.0\n98    1.0\n99    6.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  5,  6,\n        6,  7,  7,  7,  8,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 17,\n       18, 18, 19, 20, 21, 22, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n       32, 33, 34, 35, 36, 37, 37, 38, 39, 39, 40, 40, 41, 42, 43, 44, 45,\n       45, 46, 47, 47, 48, 48, 49, 50, 50, 50, 51, 52, 53, 54, 55, 56, 57,\n       58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71])`, type: `ndarray`\n\n_, value: `array([9., 0., 3., 1., 2., 5., 8., 6., 7., 4.])`, type: `ndarray`\n\nval, value: `array([ 9.,  0.,  3.,  1.,  0., ... ,  8.,  5.,  2.,  9.,  1.,  6.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  1,  3,  4,  5,  7,  8,  8,  0,  2,  1,  4,  1, -1, -1, -1,\n        7, -1, -1,  7, -1,  1,  4,  5,  5,  5,  6,  1,  9,  8,  9,  5,  6,\n        0,  7,  5,  2, -1, -1,  9,  4,  5,  4,  2,  2,  2,  8,  0,  2,  4,\n        5,  8,  7,  5, -1, -1,  3,  6,  2,  7,  1,  9,  7,  6,  8,  2,  1,\n        2,  9,  3,  8,  4,  6,  3, -1,  5,  8, -1,  4,  4,  2,  0,  7,  1,\n        5,  3,  3,  5, -1,  4, -1, -1,  4,  9,  4,  9,  6,  3,  7])`, type: `ndarray`\n\nsorter, value: `array([40,  1, 77,  3, 86, 35, 52, 18, 69,  0,  2,  4,  5,  6,  7, 64,  8,\n       22,  9, 47, 17, 28, 10, 11, 12, 13, 14, 15, 16, 19, 20, 29, 95, 21,\n       97, 23, 24, 25, 26, 27, 60, 63, 30, 31, 32, 33, 34, 36, 37, 38, 39,\n       41, 42, 43, 44, 45, 46, 56, 48, 49, 67, 70, 50, 51, 53, 54, 55, 73,\n       57, 58, 59, 87, 92, 61, 62, 65, 91, 79, 66, 68, 71, 72, 74, 75, 76,\n       78, 80, 81, 82, 83, 96, 84, 85, 88, 89, 90, 93, 94, 98, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 16, 18, 21, 23, 24, 25, 26, 27, 28, 29, 30,\n       32, 34, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 66, 67, 69, 70, 72, 74, 75,\n       78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95,\n       96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([7, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1,\n       1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1,\n       1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1,\n       1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('q', '2015-08-29') ... ('e', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(72,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nq    2015-08-29    1\nb    2015-08-28    1\nk    2015-08-23    1\ne    2015-08-30    1\na    2015-08-24    1\n                  ..\nw    2015-08-25    1\ng    2015-08-25    1\nl    2015-08-25    1\ny    2015-08-23    1\ne    2015-09-01    1\nName: julie, Length: 72, dtype: int64`, type: `Series`\n\n## Case 7\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5\n1      4\n2      3\n3      7\n4      5\n      ..\n995    0\n996    7\n997    3\n998    4\n999    1\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5, 4, 3, 7, 9, 6, 2, 0, 1, 8])`, type: `ndarray`\n\nval, value: `array([5, 4, 3, 7, 5, 7, 9, 6, 2, ... ,\n       0, 9, 8, 7, 3, 0, 7, 3, 4, 1])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, 1, 1, 1, 1, 2, 3, ... ,\n       6, 7, 7, 7, 8, 8, 8, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0, 243, 398, 345, 366, ... , 334, 563, 813, 422, 640, 677])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  37,  77, 122, 160, 195, 233, 272, 309, 341, 381, 415, 444,\n       486, 525, 560, 611, 659, 695, 730, 767, 797, 842, 878, 910, 963])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 1, 0, 0, 0, 1, 1, ... ,\n       0, 1, 0, 0, 1, 0, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10, 10,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10, 10,  9, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10, 10,  9, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['s', 'v', 'q', 'g', 'r', 'l', 'i', 't', 'z', 'y', 'h', 'w', 'k', 'c',\n       'm', 'o', 'x', 'a', 'b', 'p', 'u', 'd', 'j', 'e', 'f', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ns    10\nv    10\nq     9\ng    10\nr    10\nl    10\ni    10\nt    10\nz    10\ny    10\nh    10\nw    10\nk    10\nc    10\nm    10\no    10\nx    10\na     9\nb    10\np    10\nu    10\nd    10\nj     9\ne    10\nf    10\nn    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 8\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5\n1      4\n2      3\n3      7\n4      5\n      ..\n995    0\n996    7\n997    3\n998    4\n999    1\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   1,   1, ... , 249, 250, 250, 250, 251, 252])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5, 4, 3, 7, 9, 6, 2, 0, 1, 8])`, type: `ndarray`\n\nval, value: `array([5, 4, 3, 7, 5, 7, 9, 6, 2, ... ,\n       0, 9, 8, 7, 3, 0, 7, 3, 4, 1])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([0, 4, 5, 1, 1, 2, 2, 3, 5, ... ,\n       7, 2, 4, 5, 3, 4, 7, 8, 4, 7])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0, 487, 834,   1,  89, ... , 875, 924, 986, 900, 979, 981])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   3,  10,  15,  18, ... ,\n       989, 991, 994, 995, 998, 999])`, shape: `(253,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 0, 1, 0, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([3, 5, 5, 3, 6, 4, 4, 5, 2, ... , 1, 1, 1, 2, 2, 3, 1, 3, 1, 1])`, shape: `(253,)`, type: `ndarray`\n\nres, value: `array([3, 5, 5, 3, 6, 4, 4, 5, 2, ... , 1, 1, 1, 2, 2, 3, 1, 3, 1, 1])`, shape: `(253,)`, type: `ndarray`\n\nri, value: `MultiIndex([('s', '2015-08-27') ... ('r', '2015-08-30')],\n           names=['jim', 'joe'], length=253)`, shape: `(253,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ns    2015-08-27    3\nv    2015-08-26    5\nq    2015-08-24    5\ng    2015-08-29    3\nr    2015-09-01    6\n                  ..\no    2015-08-28    3\nj    2015-08-31    1\nr    2015-08-25    3\nz    2015-08-24    1\nr    2015-08-30    1\nName: julie, Length: 253, dtype: int64`, type: `Series`\n\n## Case 9\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5.0\n1      4.0\n2      3.0\n3      7.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    1.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5., 4., 3., 7., 9., 2., 6., 0., 1., 8.])`, type: `ndarray`\n\nval, value: `array([ 5.,  4.,  3.,  7.,  5., ... ,  3., nan, nan, nan,  4.,  1.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7,  7,  8,  8,  8,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 334, 563, 813, 422, 640, 677])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  95, 140, 174, 209, 245, 284, 316, 348, 386, 419, 446, 486,\n       524, 558, 594, 641, 688, 720, 752, 779, 820, 854, 887, 917, 966])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 0, 1, 0, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11, 11, 10, 10, 10, 11, 11, 10, 10, 11, 10, 11, 10, 10, 10, 11, 11,\n       10, 10, 10, 10, 11, 10, 10, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 10, 10, 10, 11, 11, 10, 10, 11, 10, 11, 10, 10, 10, 11, 11, 10,\n       10, 10, 10, 11, 10, 10, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['s', 'q', 'g', 'r', 'l', 'i', 't', 'z', 'y', 'h', 'w', 'k', 'c', 'm',\n       'v', 'o', 'x', 'b', 'p', 'u', 'd', 'j', 'a', 'e', 'f', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ns    11\nq    10\ng    10\nr    10\nl    11\ni    11\nt    10\nz    10\ny    11\nh    10\nw    11\nk    10\nc    10\nm    10\nv    11\no    11\nx    10\nb    10\np    10\nu    10\nd    11\nj    10\na    10\ne    11\nf    11\nn    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 10\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5.0\n1      4.0\n2      3.0\n3      7.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    1.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 248, 249, 249, 249, 250, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5., 4., 3., 7., 9., 2., 6., 0., 1., 8.])`, type: `ndarray`\n\nval, value: `array([ 5.,  4.,  3.,  7.,  5., ... ,  3., nan, nan, nan,  4.,  1.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  3,  2,  4, -1,  4,  7,  4,  7])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 897, 900, 924, 986, 979, 981])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  86,  91,  97, 102, ... ,\n       992, 993, 995, 998, 999])`, shape: `(252,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11,  2,  5,  6,  4,  4,  4, ... ,  2,  2,  1,  1,  2,  3,  1,  1])`, shape: `(253,)`, type: `ndarray`\n\nres, value: `array([2, 5, 6, 4, 4, 4, 2, 5, 2, ... ,\n       1, 1, 2, 2, 1, 1, 2, 3, 1, 1])`, shape: `(252,)`, type: `ndarray`\n\nri, value: `MultiIndex([('s', '2015-08-27') ... ('r', '2015-08-30')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ns    2015-08-27    2\nq    2015-08-24    5\nr    2015-09-01    6\nl    2015-08-27    4\ni    2015-09-01    4\n                  ..\nj    2015-08-31    1\no    2015-08-28    2\nr    2015-08-25    3\nz    2015-08-24    1\nr    2015-08-30    1\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n## Case 11\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5.0\n1      4.0\n2      3.0\n3      7.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    1.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5., 4., 3., 7., 9., 2., 6., 0., 1., 8.])`, type: `ndarray`\n\nval, value: `array([ 5.,  4.,  3.,  7.,  5., ... ,  3., nan, nan, nan,  4.,  1.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7,  7,  8,  8,  8,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 334, 563, 813, 422, 640, 677])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  95, 140, 174, 209, 245, 284, 316, 348, 386, 419, 446, 486,\n       524, 558, 594, 641, 688, 720, 752, 779, 820, 854, 887, 917, 966])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 0, 1, 0, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11, 11, 10, 10, 10, 11, 11, 10, 10, 11, 10, 11, 10, 10, 10, 11, 11,\n       10, 10, 10, 10, 11, 10, 10, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 10, 10, 10, 11, 11, 10, 10, 11, 10, 11, 10, 10, 10, 11, 11, 10,\n       10, 10, 10, 11, 10, 10, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['s', 'q', 'g', 'r', 'l', 'i', 't', 'z', 'y', 'h', 'w', 'k', 'c', 'm',\n       'v', 'o', 'x', 'b', 'p', 'u', 'd', 'j', 'a', 'e', 'f', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ns    11\nq    10\ng    10\nr    10\nl    11\ni    11\nt    10\nz    10\ny    11\nh    10\nw    11\nk    10\nc    10\nm    10\nv    11\no    11\nx    10\nb    10\np    10\nu    10\nd    11\nj    10\na    10\ne    11\nf    11\nn    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 12\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5.0\n1      4.0\n2      3.0\n3      7.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    1.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 248, 249, 249, 249, 250, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5., 4., 3., 7., 9., 2., 6., 0., 1., 8.])`, type: `ndarray`\n\nval, value: `array([ 5.,  4.,  3.,  7.,  5., ... ,  3., nan, nan, nan,  4.,  1.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  3,  2,  4, -1,  4,  7,  4,  7])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 897, 900, 924, 986, 979, 981])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  86,  91,  97, 102, ... ,\n       992, 993, 995, 998, 999])`, shape: `(252,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11,  2,  5,  6,  4,  4,  4, ... ,  2,  2,  1,  1,  2,  3,  1,  1])`, shape: `(253,)`, type: `ndarray`\n\nres, value: `array([2, 5, 6, 4, 4, 4, 2, 5, 2, ... ,\n       1, 1, 2, 2, 1, 1, 2, 3, 1, 1])`, shape: `(252,)`, type: `ndarray`\n\nri, value: `MultiIndex([('s', '2015-08-27') ... ('r', '2015-08-30')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ns    2015-08-27    2\nq    2015-08-24    5\nr    2015-09-01    6\nl    2015-08-27    4\ni    2015-09-01    4\n                  ..\nj    2015-08-31    1\no    2015-08-28    2\nr    2015-08-25    3\nz    2015-08-24    1\nr    2015-08-30    1\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n## Case 13\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4\n1       0\n2       1\n3       7\n4       0\n       ..\n9995    3\n9996    2\n9997    6\n9998    8\n9999    1\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([4, 0, 1, 7, 3, 5, 2, 9, 8, 6])`, type: `ndarray`\n\nval, value: `array([4, 0, 1, ..., 6, 8, 1])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([   0,  172,  555, ..., 9064, 9066, 9471])`, type: `ndarray`\n\nidx, value: `array([   0,  379,  739, 1080, 1459, 1842, 2239, 2664, 3057, 3411, 3806,\n       4160, 4555, 4954, 5362, 5766, 6169, 6558, 6946, 7328, 7698, 8108,\n       8516, 8886, 9232, 9616])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['g', 'x', 'u', 'h', 'e', 'f', 'q', 'n', 'j', 'y', 'r', 's', 'l', 'b',\n       'a', 'k', 'v', 'z', 'c', 't', 'd', 'o', 'i', 'w', 'p', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ng    10\nx    10\nu    10\nh    10\ne    10\nf    10\nq    10\nn    10\nj    10\ny    10\nr    10\ns    10\nl    10\nb    10\na    10\nk    10\nv    10\nz    10\nc    10\nt    10\nd    10\no    10\ni    10\nw    10\np    10\nm    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 14\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4\n1       0\n2       1\n3       7\n4       0\n       ..\n9995    3\n9996    2\n9997    6\n9998    8\n9999    1\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([4, 0, 1, 7, 3, 5, 2, 9, 8, 6])`, type: `ndarray`\n\nval, value: `array([4, 0, 1, ..., 6, 8, 1])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 1, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([   0, 4529,  518, ..., 2699, 5200, 9836])`, type: `ndarray`\n\nidx, value: `array([   0,   34,   58,   97,  146, ... , 9837, 9877, 9909, 9939, 9966])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10,  9, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10,  9, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('g', '2015-08-28') ... ('h', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ng    2015-08-28    10\nx    2015-08-31    10\nu    2015-08-27    10\nh    2015-08-24    10\ne    2015-08-29    10\n                   ..\nb    2015-08-26    10\nw    2015-08-28    10\nr    2015-08-26    10\nu    2015-08-25     9\nh    2015-08-30    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 15\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4.0\n1       0.0\n2       1.0\n3       7.0\n4       0.0\n       ... \n9995    3.0\n9996    2.0\n9997    6.0\n9998    8.0\n9999    1.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([4., 0., 1., 7., 3., 2., 9., 5., 8., 6.])`, type: `ndarray`\n\nval, value: `array([4., 0., 1., ..., 6., 8., 1.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 8856, 9064, 9066])`, type: `ndarray`\n\nidx, value: `array([ 589,  946, 1275, 1636, 1997, 2376, 2774, 3147, 3479, 3848, 4181,\n       4560, 4926, 5309, 5690, 6069, 6431, 6784, 7136, 7481, 7833, 8213,\n       8603, 8950, 9279, 9638])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['g', 'u', 'h', 'e', 'f', 'q', 'n', 'j', 'y', 'r', 's', 'l', 'b', 'a',\n       'k', 'v', 'z', 'c', 'x', 't', 'd', 'o', 'i', 'w', 'p', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ng    11\nu    11\nh    11\ne    11\nf    11\nq    11\nn    11\nj    11\ny    11\nr    11\ns    11\nl    11\nb    11\na    11\nk    11\nv    11\nz    11\nc    11\nx    11\nt    11\nd    11\no    11\ni    11\nw    11\np    11\nm    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 16\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4.0\n1       0.0\n2       1.0\n3       7.0\n4       0.0\n       ... \n9995    3.0\n9996    2.0\n9997    6.0\n9998    8.0\n9999    1.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([4., 0., 1., 7., 3., 2., 9., 5., 8., 6.])`, type: `ndarray`\n\nval, value: `array([4., 0., 1., ..., 6., 8., 1.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 2699, 5200, 9836])`, type: `ndarray`\n\nidx, value: `array([ 844,  878,  915,  937,  973, ... , 9865, 9894, 9921, 9943, 9969])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 10, 11, 11, 10, ... ,\n       11, 10, 10, 10, 10, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([11, 11, 10, 11, 11, 10, 11, ... , 11,\n       10, 10, 10, 10, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('g', '2015-08-28') ... ('h', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ng    2015-08-28    11\nu    2015-08-27    11\ne    2015-08-29    10\nf    2015-09-01    11\nq    2015-08-26    11\n                   ..\nv    2015-08-24    10\nr    2015-08-26    10\nx    2015-08-31    10\nu    2015-08-25    10\nh    2015-08-30    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 17\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4.0\n1       0.0\n2       1.0\n3       7.0\n4       0.0\n       ... \n9995    3.0\n9996    2.0\n9997    6.0\n9998    8.0\n9999    1.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([4., 0., 1., 7., 3., 2., 9., 5., 8., 6.])`, type: `ndarray`\n\nval, value: `array([4., 0., 1., ..., 6., 8., 1.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 8856, 9064, 9066])`, type: `ndarray`\n\nidx, value: `array([ 589,  946, 1275, 1636, 1997, 2376, 2774, 3147, 3479, 3848, 4181,\n       4560, 4926, 5309, 5690, 6069, 6431, 6784, 7136, 7481, 7833, 8213,\n       8603, 8950, 9279, 9638])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['g', 'u', 'h', 'e', 'f', 'q', 'n', 'j', 'y', 'r', 's', 'l', 'b', 'a',\n       'k', 'v', 'z', 'c', 'x', 't', 'd', 'o', 'i', 'w', 'p', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ng    11\nu    11\nh    11\ne    11\nf    11\nq    11\nn    11\nj    11\ny    11\nr    11\ns    11\nl    11\nb    11\na    11\nk    11\nv    11\nz    11\nc    11\nx    11\nt    11\nd    11\no    11\ni    11\nw    11\np    11\nm    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 18\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4.0\n1       0.0\n2       1.0\n3       7.0\n4       0.0\n       ... \n9995    3.0\n9996    2.0\n9997    6.0\n9998    8.0\n9999    1.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([4., 0., 1., 7., 3., 2., 9., 5., 8., 6.])`, type: `ndarray`\n\nval, value: `array([4., 0., 1., ..., 6., 8., 1.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 2699, 5200, 9836])`, type: `ndarray`\n\nidx, value: `array([ 844,  878,  915,  937,  973, ... , 9865, 9894, 9921, 9943, 9969])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 10, 11, 11, 10, ... ,\n       11, 10, 10, 10, 10, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([11, 11, 10, 11, 11, 10, 11, ... , 11,\n       10, 10, 10, 10, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('g', '2015-08-28') ... ('h', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ng    2015-08-28    11\nu    2015-08-27    11\ne    2015-08-29    10\nf    2015-09-01    11\nq    2015-08-26    11\n                   ..\nv    2015-08-24    10\nr    2015-08-26    10\nx    2015-08-31    10\nu    2015-08-25    10\nh    2015-08-30    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 19\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        1\n1        7\n2        5\n3        5\n4        7\n        ..\n99995    7\n99996    2\n99997    5\n99998    0\n99999    9\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([1, 7, 5, 9, 0, 2, 6, 4, 8, 3])`, type: `ndarray`\n\nval, value: `array([1, 7, 5, ..., 5, 0, 9])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([    0,   772,  1466, ..., 99499, 99651, 99771])`, type: `ndarray`\n\nidx, value: `array([    0,  3927,  7852, 11595, 15563, 19417, 23322, 27246, 31052,\n       34823, 38708, 42466, 46205, 50029, 53987, 57750, 61726, 65608,\n       69475, 73251, 77051, 80866, 84694, 88555, 92354, 96168])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['k', 'a', 'q', 'l', 'f', 'o', 'm', 'y', 'n', 'w', 'u', 'g', 'e', 'x',\n       'j', 'c', 'p', 't', 'i', 's', 'v', 'b', 'h', 'z', 'r', 'd'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    10\na    10\nq    10\nl    10\nf    10\no    10\nm    10\ny    10\nn    10\nw    10\nu    10\ng    10\ne    10\nx    10\nj    10\nc    10\np    10\nt    10\ni    10\ns    10\nv    10\nb    10\nh    10\nz    10\nr    10\nd    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 20\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        1\n1        7\n2        5\n3        5\n4        7\n        ..\n99995    7\n99996    2\n99997    5\n99998    0\n99999    9\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([1, 7, 5, 9, 0, 2, 6, 4, 8, 3])`, type: `ndarray`\n\nval, value: `array([1, 7, 5, ..., 5, 0, 9])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([    0,  1466,  4733, ..., 94517, 96432, 97384])`, type: `ndarray`\n\nidx, value: `array([    0,   417,   828,  1187, ... , 98069, 98453, 98847, 99233, 99610])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-08-27') ... ('v', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-08-27    10\na    2015-08-23    10\nq    2015-08-28    10\nl    2015-08-26    10\nf    2015-08-23    10\n                   ..\nb    2015-08-24    10\nv    2015-08-29    10\nt    2015-08-30    10\na    2015-08-24    10\nv    2015-08-24    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 21\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        1.0\n1        7.0\n2        5.0\n3        5.0\n4        7.0\n        ... \n99995    7.0\n99996    2.0\n99997    5.0\n99998    0.0\n99999    9.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([1., 7., 5., 9., 2., 0., 6., 4., 3., 8.])`, type: `ndarray`\n\nval, value: `array([1., 7., 5., ..., 5., 0., 9.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 99628, 99657, 99772])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9576, 13105, 16852, 20488, 24171, 27854, 31438, 34969,\n       38603, 42155, 45675, 49287, 52826, 56548, 60296, 63932, 67631,\n       71274, 74823, 78388, 82000, 85627, 89203, 92795, 96402])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['k', 'q', 'l', 'f', 'o', 'm', 'y', 'n', 'w', 'u', 'g', 'e', 'j', 'x',\n       'c', 'p', 'a', 't', 'i', 's', 'b', 'h', 'z', 'r', 'd', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    11\nq    11\nl    11\nf    11\no    11\nm    11\ny    11\nn    11\nw    11\nu    11\ng    11\ne    11\nj    11\nx    11\nc    11\np    11\na    11\nt    11\ni    11\ns    11\nb    11\nh    11\nz    11\nr    11\nd    11\nv    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 22\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        1.0\n1        7.0\n2        5.0\n3        5.0\n4        7.0\n        ... \n99995    7.0\n99996    2.0\n99997    5.0\n99998    0.0\n99999    9.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([1., 7., 5., 9., 2., 0., 6., 4., 3., 8.])`, type: `ndarray`\n\nval, value: `array([1., 7., 5., ..., 5., 0., 9.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 94441, 96818, 99657])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8806,  9139,  9513, ... , 98189, 98574, 98935, 99301, 99645])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, ... ,\n       11, 11, 11, 11, 11, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, ... , 11,\n       11, 11, 11, 11, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-08-27') ... ('v', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-08-27    11\nq    2015-08-28    11\nf    2015-08-23    11\no    2015-08-26    11\nm    2015-09-01    11\n                   ..\nx    2015-08-23    11\nt    2015-08-30    11\nv    2015-08-29    11\na    2015-08-24    11\nv    2015-08-24    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 23\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        1.0\n1        7.0\n2        5.0\n3        5.0\n4        7.0\n        ... \n99995    7.0\n99996    2.0\n99997    5.0\n99998    0.0\n99999    9.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([1., 7., 5., 9., 2., 0., 6., 4., 3., 8.])`, type: `ndarray`\n\nval, value: `array([1., 7., 5., ..., 5., 0., 9.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 99628, 99657, 99772])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9576, 13105, 16852, 20488, 24171, 27854, 31438, 34969,\n       38603, 42155, 45675, 49287, 52826, 56548, 60296, 63932, 67631,\n       71274, 74823, 78388, 82000, 85627, 89203, 92795, 96402])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['k', 'q', 'l', 'f', 'o', 'm', 'y', 'n', 'w', 'u', 'g', 'e', 'j', 'x',\n       'c', 'p', 'a', 't', 'i', 's', 'b', 'h', 'z', 'r', 'd', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    11\nq    11\nl    11\nf    11\no    11\nm    11\ny    11\nn    11\nw    11\nu    11\ng    11\ne    11\nj    11\nx    11\nc    11\np    11\na    11\nt    11\ni    11\ns    11\nb    11\nh    11\nz    11\nr    11\nd    11\nv    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 24\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        1.0\n1        7.0\n2        5.0\n3        5.0\n4        7.0\n        ... \n99995    7.0\n99996    2.0\n99997    5.0\n99998    0.0\n99999    9.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([1., 7., 5., 9., 2., 0., 6., 4., 3., 8.])`, type: `ndarray`\n\nval, value: `array([1., 7., 5., ..., 5., 0., 9.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 94441, 96818, 99657])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8806,  9139,  9513, ... , 98189, 98574, 98935, 99301, 99645])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, ... ,\n       11, 11, 11, 11, 11, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, ... , 11,\n       11, 11, 11, 11, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-08-27') ... ('v', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-08-27    11\nq    2015-08-28    11\nf    2015-08-23    11\no    2015-08-26    11\nm    2015-09-01    11\n                   ..\nx    2015-08-23    11\nt    2015-08-30    11\nv    2015-08-29    11\na    2015-08-24    11\nv    2015-08-24    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 25\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     34\n1     57\n2     98\n3     78\n4     31\n      ..\n95    22\n96    81\n97    39\n98    22\n99    99\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  3,  3,  4,\n        4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n        6,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10,\n       11, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14,\n       14, 14, 15, 15, 15, 15, 15, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19,\n       19, 20, 20, 20, 20, 20, 21, 22, 23, 23, 24, 24, 24, 25, 25])`, type: `ndarray`\n\n_, value: `array([34, 57, 98, 78, 31, 64, 18, 84, 28, 14,  0,  3, 89, 21, 49, 38, 32,\n       11, 91, 24, 86, 22, 13,  6, 52, 67, 58, 36, 80, 56, 60, 72,  9, 17,\n       39, 92, 74, 20, 59, 88, 29,  4, 61, 68, 87, 26,  8, 12, 85, 40, 33,\n       83, 75,  7, 70, 30, 82, 77, 81, 99])`, type: `ndarray`\n\nval, value: `array([34, 57, 98, 78, 31, 64, 18, 84, 98, 28, 14,  0,  3, 89, 21, 49, 38,\n       32, 11, 91, 24, 86, 22, 13,  6, 34, 64, 52, 67, 67, 32, 58, 36, 80,\n       67, 56, 60, 72,  9, 17, 39, 92, 18, 74, 20, 59, 74, 18,  9, 52, 88,\n       29,  4, 67, 61, 39, 68, 87, 78, 26,  8, 61, 87, 12, 38, 91, 85, 40,\n       33, 89, 83, 32, 75,  9, 33, 11, 38,  7, 33, 83, 22, 70, 98, 75, 30,\n       60, 85, 31, 36, 72, 29, 22, 33, 82, 77, 22, 81, 39, 22, 99])`, type: `ndarray`\n\ncodes, value: `array([ 0, 12,  1,  6, 15, 21, 35, 48,  2,  3, 25,  4, 21, 44, 48, 55,  5,\n        8, 27, 36, 40,  6,  6, 23, 37,  0,  7, 16, 16, 20, 21, 42, 49, 51,\n       56,  2, 58,  9, 16, 30, 31, 34, 47, 52, 10, 24, 34, 50, 11, 15, 25,\n       13, 25, 25, 32, 36, 41, 14, 43, 45, 12, 17, 18, 50, 54, 18, 31, 34,\n       52, 59, 19, 21, 24, 32, 53, 21, 22, 32, 33,  2,  5, 29, 26, 40, 44,\n       51, 27, 28, 39, 46, 57, 38, 42,  3,  4, 15, 30, 50, 17, 50])`, type: `ndarray`\n\nsorter, value: `array([ 0, 13,  1, 42, 76, 95, 41, 66,  2,  3, 29,  4, 80, 62, 86, 84,  5,\n        9, 88, 46, 90,  6, 47, 24, 44, 25,  7, 17, 71, 21, 98, 61, 67, 70,\n       93,  8, 96, 10, 30, 36, 89, 40, 63, 72, 11, 27, 97, 92, 12, 16, 28,\n       14, 34, 53, 38, 43, 52, 15, 56, 59, 69, 18, 65, 78, 81, 19, 37, 55,\n       83, 99, 20, 91, 49, 73, 77, 22, 23, 48, 39, 82, 26, 35, 31, 51, 57,\n       79, 32, 33, 50, 60, 94, 45, 54, 58, 87, 64, 85, 68, 75, 74])`, type: `ndarray`\n\nidx, value: `array([ 0,  2,  8, 11, 16, 21, 25, 35, 37, 44, 48, 51, 57, 60, 65, 70, 75,\n       76, 79, 82, 86, 91, 92, 93, 95, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([2, 6, 3, 5, 5, 3, 9, 2, 7, 4, 3, 5, 3, 5, 5, 5, 1, 3, 3, 4, 5, 1,\n       1, 2, 3, 2])`, type: `ndarray`\n\nres, value: `array([2, 6, 3, 5, 5, 3, 9, 2, 7, 4, 3, 5, 3, 5, 5, 5, 1, 3, 3, 4, 5, 1,\n       1, 2, 3, 2])`, type: `ndarray`\n\nri, value: `Index(['b', 'o', 'c', 'u', 'n', 'e', 'r', 'l', 'h', 't', 'g', 'i', 'z', 'f',\n       'p', 'k', 'v', 'd', 'x', 'w', 'q', 'j', 'a', 'y', 's', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nb    2\no    6\nc    3\nu    5\nn    5\ne    3\nr    9\nl    2\nh    7\nt    4\ng    3\ni    5\nz    3\nf    5\np    5\nk    5\nv    1\nd    3\nx    3\nw    4\nq    5\nj    1\na    1\ny    2\ns    3\nm    2\nName: julie, dtype: int64`, type: `Series`\n\n## Case 26\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     34\n1     57\n2     98\n3     78\n4     31\n      ..\n95    22\n96    81\n97    39\n98    22\n99    99\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  3,  4,  5,  5,  6,  6,  7,  8,  9, 10, 10, 11, 12, 13,\n       14, 14, 15, 15, 16, 17, 17, 17, 18, 19, 19, 19, 20, 21, 22, 23, 24,\n       25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 34, 35, 36, 37, 38, 39, 40,\n       41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 54, 55, 56,\n       57, 57, 57, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n       71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85])`, type: `ndarray`\n\n_, value: `array([34, 57, 98, 78, 31, 64, 18, 84, 28, 14,  0,  3, 89, 21, 49, 38, 32,\n       11, 91, 24, 86, 22, 13,  6, 52, 67, 58, 36, 80, 56, 60, 72,  9, 17,\n       39, 92, 74, 20, 59, 88, 29,  4, 61, 68, 87, 26,  8, 12, 85, 40, 33,\n       83, 75,  7, 70, 30, 82, 77, 81, 99])`, type: `ndarray`\n\nval, value: `array([34, 57, 98, 78, 31, 64, 18, 84, 98, 28, 14,  0,  3, 89, 21, 49, 38,\n       32, 11, 91, 24, 86, 22, 13,  6, 34, 64, 52, 67, 67, 32, 58, 36, 80,\n       67, 56, 60, 72,  9, 17, 39, 92, 18, 74, 20, 59, 74, 18,  9, 52, 88,\n       29,  4, 67, 61, 39, 68, 87, 78, 26,  8, 61, 87, 12, 38, 91, 85, 40,\n       33, 89, 83, 32, 75,  9, 33, 11, 38,  7, 33, 83, 22, 70, 98, 75, 30,\n       60, 85, 31, 36, 72, 29, 22, 33, 82, 77, 22, 81, 39, 22, 99])`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  2,  3,  4,  5, 40,  6, 37,  7,  2,  8,  9, 34, 10, 11, 12,\n       13, 41, 14, 43, 15,  0, 16, 42, 17, 18, 31, 52, 19, 20, 21, 22, 23,\n        5, 24, 25, 25, 16, 26, 27, 28, 25, 36, 29, 30, 32, 33, 35,  6, 38,\n       36,  6, 32, 24, 39, 40, 25, 42, 34, 44,  3, 45, 46, 44, 48, 47, 15,\n       18, 50, 54, 15, 48, 49, 50, 12, 51, 16, 52, 32, 50, 17, 53, 51, 21,\n        2, 55, 30,  4, 27, 31, 21, 50, 56, 57, 21, 58, 34, 21, 59])`, type: `ndarray`\n\nsorter, value: `array([ 0,  1,  2,  3,  4,  5, 90,  6, 44,  7,  8,  9, 10, 40, 11, 12, 13,\n       14, 52, 15, 56, 16, 25, 17, 61, 18, 19, 37, 83, 20, 21, 22, 23, 24,\n       26, 27, 28, 29, 30, 31, 32, 33, 34, 43, 35, 36, 38, 39, 41, 42, 45,\n       46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 86, 63, 64,\n       65, 78, 81, 76, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80,\n       82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  2,  3,  4,  5,  7,  9, 10, 11, 12, 14, 15, 16, 17, 19, 21,\n       22, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n       44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 63, 64, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81,\n       82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n       99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 3, 1, 3, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 3, 1, 3, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('b', '2015-08-26') ... ('p', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(86,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nb    2015-08-26    1\no    2015-08-29    1\nc    2015-08-28    1\n     2015-08-27    1\nu    2015-08-24    1\n                  ..\no    2015-09-01    1\nl    2015-09-01    1\nt    2015-08-27    1\nr    2015-09-01    1\np    2015-09-01    1\nName: julie, Length: 86, dtype: int64`, type: `Series`\n\n## Case 27\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     34.0\n1     57.0\n2     98.0\n3     78.0\n4     31.0\n      ... \n95    22.0\n96    81.0\n97    39.0\n98    22.0\n99    99.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  2,  2,  2,  2,  3,  3,\n        3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n        6,  6,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9, 10,\n       10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13,\n       14, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19,\n       19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25])`, type: `ndarray`\n\n_, value: `array([34., 57., 98., 78., 31., 64., 18., 14.,  0.,  3., 89., 21., 49.,\n       38., 32., 11., 91., 24., 86., 22., 13.,  6., 67., 58., 36., 80.,\n       56., 60., 72.,  9., 17., 39., 92., 74., 20., 52., 88., 29.,  4.,\n       61., 68., 87., 26.,  8., 12., 40., 33., 83., 75.,  7., 70., 85.,\n       82., 77., 81., 99.])`, type: `ndarray`\n\nval, value: `array([34., 57., 98., 78., 31., ... , 77., 22., 81., 39., 22., 99.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 10, 15, 26, 38, 51,  0, 10,  2,  3, 22, -1,  4, 19, 41, -1, -1,\n        5, 24, 37, -1,  6, 21, 34, -1,  0, 14, 14, 18, 19, 39, 45, 47, 52,\n       -1, 54,  7, 14, 27, 28, 31, 44, 48, -1,  8, 31, 46, -1,  9, 13, 11,\n       22, 22, 29, 33, 12, 40, 42, -1, 16, 28, 31, 55, 17, 19, 29, 35, 49,\n       19, 20, 29, 30, -1,  2, 23, 37, 41, 47, 24, 25, 36, 43, 53, -1,  6,\n       13, 19, 32, -1, 39,  3,  4, -1, -1, 46, -1, 46, 50, 15, 46])`, type: `ndarray`\n\nsorter, value: `array([ 1, 69, 18, 35, 52, 86,  0, 13,  2,  3, 29, 84,  4, 80, 62,  9, 46,\n        5, 88, 90, 47,  6, 24, 44,  7, 25, 17, 71, 21, 98, 61, 67, 70, 93,\n        8, 96, 10, 30, 36, 89, 40, 63, 72, 27, 11, 97, 92, 28, 12, 16, 14,\n       34, 53, 38, 43, 15, 56, 59, 83, 19, 37, 55, 99, 20, 91, 73, 49, 77,\n       22, 23, 48, 39, 26, 82, 31, 51, 57, 79, 32, 33, 50, 60, 94, 66, 42,\n       76, 95, 41, 45, 54, 58, 87, 64, 85, 68, 65, 78, 81, 75, 74])`, type: `ndarray`\n\nidx, value: `array([ 6,  8, 11, 15, 20, 24, 34, 36, 43, 47, 50, 55, 58, 63, 68, 69, 72,\n       74, 78, 83, 88, 89, 90, 92, 95, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 2, 3, 4, 4, 4, 9, 2, 7, 4, 3, 4, 3, 5, 5, 1, 3, 2, 4, 5, 5, 1,\n       1, 2, 2, 3, 2])`, type: `ndarray`\n\nres, value: `array([2, 3, 4, 4, 4, 9, 2, 7, 4, 3, 4, 3, 5, 5, 1, 3, 2, 4, 5, 5, 1, 1,\n       2, 2, 3, 2])`, type: `ndarray`\n\nri, value: `Index(['b', 'c', 'u', 'n', 'e', 'r', 'l', 'h', 't', 'g', 'i', 'z', 'p', 'k',\n       'v', 'd', 'x', 'w', 'q', 'o', 'j', 'a', 'y', 's', 'f', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nb    2\nc    3\nu    4\nn    4\ne    4\nr    9\nl    2\nh    7\nt    4\ng    3\ni    4\nz    3\np    5\nk    5\nv    1\nd    3\nx    2\nw    4\nq    5\no    5\nj    1\na    1\ny    2\ns    2\nf    3\nm    2\nName: julie, dtype: int64`, type: `Series`\n\n## Case 28\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     34.0\n1     57.0\n2     98.0\n3     78.0\n4     31.0\n      ... \n95    22.0\n96    81.0\n97    39.0\n98    22.0\n99    99.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  3,  4,  4,  5,\n        6,  7,  8,  9, 10, 11, 12, 13, 13, 14, 15, 15, 15, 16, 16, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 53, 53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79])`, type: `ndarray`\n\n_, value: `array([34., 57., 98., 78., 31., 64., 18., 14.,  0.,  3., 89., 21., 49.,\n       38., 32., 11., 91., 24., 86., 22., 13.,  6., 67., 58., 36., 80.,\n       56., 60., 72.,  9., 17., 39., 92., 74., 20., 52., 88., 29.,  4.,\n       61., 68., 87., 26.,  8., 12., 40., 33., 83., 75.,  7., 70., 85.,\n       82., 77., 81., 99.])`, type: `ndarray`\n\nval, value: `array([34., 57., 98., 78., 31., ... , 77., 22., 81., 39., 22., 99.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 10, 15, 26, 31, 38, 49, 51,  0,  2,  4,  5, 37,  6, 34, -1,\n       -1, -1,  7,  8,  9, 10, 11, 12, 40, 13,  0, 14, 39, -1, 16, 28, 17,\n       18, 19, 20, 21, -1, -1, -1, 22, 14, 23, 24, 25, 22, 33, 27, 29, 30,\n       32,  6, -1, -1, -1, 29, 35, 36, 37, 22, 39, 31, 41,  3, 42, 43, 41,\n       44, -1, -1, 46, 50, -1, 13, 45, 46, 47, 14, 48, 29, 46, 15, 47, 19,\n        2, -1, -1,  4, 24, 28, 19, 46, 52, 53, 19, 54, 31, 19, 55])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 69, 18, 35, 40, 52, 77, 86,  0,  2,  4,  5, 90,  6, 44,  7,\n        8,  9, 10, 11, 12, 13, 14, 15, 56, 16, 25, 17, 61, 83, 19, 37, 20,\n       21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 43, 36, 38, 39,\n       41, 42, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62,\n       63, 64, 65, 78, 81, 66, 76, 67, 68, 70, 71, 72, 73, 74, 75, 79, 80,\n       82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\n       88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('b', '2015-08-26') ... ('p', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(80,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nb    2015-08-26    1\nc    2015-08-28    1\nu    2015-08-24    1\nn    2015-08-24    2\ne    2015-08-26    2\n                  ..\no    2015-09-01    1\nl    2015-09-01    1\nt    2015-08-27    1\nr    2015-09-01    1\np    2015-09-01    1\nName: julie, Length: 80, dtype: int64`, type: `Series`\n\n## Case 29\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     34.0\n1     57.0\n2     98.0\n3     78.0\n4     31.0\n      ... \n95    22.0\n96    81.0\n97    39.0\n98    22.0\n99    99.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  2,  2,  2,  2,  3,  3,\n        3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n        6,  6,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9, 10,\n       10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13,\n       14, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19,\n       19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25])`, type: `ndarray`\n\n_, value: `array([34., 57., 98., 78., 31., 64., 18., 14.,  0.,  3., 89., 21., 49.,\n       38., 32., 11., 91., 24., 86., 22., 13.,  6., 67., 58., 36., 80.,\n       56., 60., 72.,  9., 17., 39., 92., 74., 20., 52., 88., 29.,  4.,\n       61., 68., 87., 26.,  8., 12., 40., 33., 83., 75.,  7., 70., 85.,\n       82., 77., 81., 99.])`, type: `ndarray`\n\nval, value: `array([34., 57., 98., 78., 31., ... , 77., 22., 81., 39., 22., 99.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 10, 15, 26, 38, 51,  0, 10,  2,  3, 22, -1,  4, 19, 41, -1, -1,\n        5, 24, 37, -1,  6, 21, 34, -1,  0, 14, 14, 18, 19, 39, 45, 47, 52,\n       -1, 54,  7, 14, 27, 28, 31, 44, 48, -1,  8, 31, 46, -1,  9, 13, 11,\n       22, 22, 29, 33, 12, 40, 42, -1, 16, 28, 31, 55, 17, 19, 29, 35, 49,\n       19, 20, 29, 30, -1,  2, 23, 37, 41, 47, 24, 25, 36, 43, 53, -1,  6,\n       13, 19, 32, -1, 39,  3,  4, -1, -1, 46, -1, 46, 50, 15, 46])`, type: `ndarray`\n\nsorter, value: `array([ 1, 69, 18, 35, 52, 86,  0, 13,  2,  3, 29, 84,  4, 80, 62,  9, 46,\n        5, 88, 90, 47,  6, 24, 44,  7, 25, 17, 71, 21, 98, 61, 67, 70, 93,\n        8, 96, 10, 30, 36, 89, 40, 63, 72, 27, 11, 97, 92, 28, 12, 16, 14,\n       34, 53, 38, 43, 15, 56, 59, 83, 19, 37, 55, 99, 20, 91, 73, 49, 77,\n       22, 23, 48, 39, 26, 82, 31, 51, 57, 79, 32, 33, 50, 60, 94, 66, 42,\n       76, 95, 41, 45, 54, 58, 87, 64, 85, 68, 65, 78, 81, 75, 74])`, type: `ndarray`\n\nidx, value: `array([ 6,  8, 11, 15, 20, 24, 34, 36, 43, 47, 50, 55, 58, 63, 68, 69, 72,\n       74, 78, 83, 88, 89, 90, 92, 95, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 2, 3, 4, 4, 4, 9, 2, 7, 4, 3, 4, 3, 5, 5, 1, 3, 2, 4, 5, 5, 1,\n       1, 2, 2, 3, 2])`, type: `ndarray`\n\nres, value: `array([2, 3, 4, 4, 4, 9, 2, 7, 4, 3, 4, 3, 5, 5, 1, 3, 2, 4, 5, 5, 1, 1,\n       2, 2, 3, 2])`, type: `ndarray`\n\nri, value: `Index(['b', 'c', 'u', 'n', 'e', 'r', 'l', 'h', 't', 'g', 'i', 'z', 'p', 'k',\n       'v', 'd', 'x', 'w', 'q', 'o', 'j', 'a', 'y', 's', 'f', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nb    2\nc    3\nu    4\nn    4\ne    4\nr    9\nl    2\nh    7\nt    4\ng    3\ni    4\nz    3\np    5\nk    5\nv    1\nd    3\nx    2\nw    4\nq    5\no    5\nj    1\na    1\ny    2\ns    2\nf    3\nm    2\nName: julie, dtype: int64`, type: `Series`\n\n## Case 30\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     34.0\n1     57.0\n2     98.0\n3     78.0\n4     31.0\n      ... \n95    22.0\n96    81.0\n97    39.0\n98    22.0\n99    99.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  3,  4,  4,  5,\n        6,  7,  8,  9, 10, 11, 12, 13, 13, 14, 15, 15, 15, 16, 16, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 53, 53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79])`, type: `ndarray`\n\n_, value: `array([34., 57., 98., 78., 31., 64., 18., 14.,  0.,  3., 89., 21., 49.,\n       38., 32., 11., 91., 24., 86., 22., 13.,  6., 67., 58., 36., 80.,\n       56., 60., 72.,  9., 17., 39., 92., 74., 20., 52., 88., 29.,  4.,\n       61., 68., 87., 26.,  8., 12., 40., 33., 83., 75.,  7., 70., 85.,\n       82., 77., 81., 99.])`, type: `ndarray`\n\nval, value: `array([34., 57., 98., 78., 31., ... , 77., 22., 81., 39., 22., 99.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 10, 15, 26, 31, 38, 49, 51,  0,  2,  4,  5, 37,  6, 34, -1,\n       -1, -1,  7,  8,  9, 10, 11, 12, 40, 13,  0, 14, 39, -1, 16, 28, 17,\n       18, 19, 20, 21, -1, -1, -1, 22, 14, 23, 24, 25, 22, 33, 27, 29, 30,\n       32,  6, -1, -1, -1, 29, 35, 36, 37, 22, 39, 31, 41,  3, 42, 43, 41,\n       44, -1, -1, 46, 50, -1, 13, 45, 46, 47, 14, 48, 29, 46, 15, 47, 19,\n        2, -1, -1,  4, 24, 28, 19, 46, 52, 53, 19, 54, 31, 19, 55])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 69, 18, 35, 40, 52, 77, 86,  0,  2,  4,  5, 90,  6, 44,  7,\n        8,  9, 10, 11, 12, 13, 14, 15, 56, 16, 25, 17, 61, 83, 19, 37, 20,\n       21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 43, 36, 38, 39,\n       41, 42, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62,\n       63, 64, 65, 78, 81, 66, 76, 67, 68, 70, 71, 72, 73, 74, 75, 79, 80,\n       82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\n       88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('b', '2015-08-26') ... ('p', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(80,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nb    2015-08-26    1\nc    2015-08-28    1\nu    2015-08-24    1\nn    2015-08-24    2\ne    2015-08-26    2\n                  ..\no    2015-09-01    1\nl    2015-09-01    1\nt    2015-08-27    1\nr    2015-09-01    1\np    2015-09-01    1\nName: julie, Length: 80, dtype: int64`, type: `Series`\n\n## Case 31\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      45\n1      88\n2      98\n3      65\n4      91\n       ..\n995    75\n996    54\n997    10\n998     6\n999    93\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([45, 88, 98, 65, 91,  7, 93, 74, 26, 21, 48,  6, 22, 15, 67, 47,  9,\n       29, 58, 43, 20, 63, 62, 24, 94, 83, 25, 77, 23, 50,  2, 12, 60, 38,\n       59, 52, 40, 39, 89, 66, 53, 72, 34, 41, 96, 55, 10, 70, 71, 87, 49,\n       64, 57, 75, 17, 19, 81, 84, 90, 99, 78, 35, 92, 68, 86, 95, 31, 11,\n       79, 27, 28, 30,  1,  8, 69, 82, 44, 36, 73, 13, 46, 18, 80,  3, 97,\n       33, 14, 37, 32,  5, 56,  0,  4, 16, 51, 76, 61, 42, 85, 54])`, type: `ndarray`\n\nval, value: `array([45, 88, 98, 65, 91,  7, 93, ... , 57, 90,  3, 75, 54, 10,  6, 93])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  2,  5,  5,  7,  8,  9, ... , 87, 92, 94, 94, 94, 95, 96, 98])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0,   2, 840, 867, 727, ... , 523, 734, 740, 538, 494, 576])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  47,  81, 120, 166, 204, 251, 290, 327, 379, 424, 458, 489,\n       533, 565, 607, 646, 676, 718, 764, 799, 834, 869, 907, 942, 970])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 1, 1, 1, 0, ... ,\n       1, 1, 1, 1, 1, 0, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([36, 27, 33, 37, 31, 38, 31, 32, 42, 38, 33, 26, 39, 28, 32, 27, 27,\n       33, 35, 31, 31, 28, 33, 27, 25, 26])`, type: `ndarray`\n\nres, value: `array([36, 27, 33, 37, 31, 38, 31, 32, 42, 38, 33, 26, 39, 28, 32, 27, 27,\n       33, 35, 31, 31, 28, 33, 27, 25, 26])`, type: `ndarray`\n\nri, value: `Index(['f', 'u', 'p', 'd', 'g', 's', 'k', 'z', 'j', 'b', 'i', 'l', 'c', 'y',\n       'x', 'o', 'w', 't', 'n', 'm', 'v', 'e', 'r', 'a', 'h', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nf    36\nu    27\np    33\nd    37\ng    31\ns    38\nk    31\nz    32\nj    42\nb    38\ni    33\nl    26\nc    39\ny    28\nx    32\no    27\nw    27\nt    33\nn    35\nm    31\nv    31\ne    28\nr    33\na    27\nh    25\nq    26\nName: julie, dtype: int64`, type: `Series`\n\n## Case 32\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      45\n1      88\n2      98\n3      65\n4      91\n       ..\n995    75\n996    54\n997    10\n998     6\n999    93\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 250, 251, 252, 252, 253, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([45, 88, 98, 65, 91,  7, 93, 74, 26, 21, 48,  6, 22, 15, 67, 47,  9,\n       29, 58, 43, 20, 63, 62, 24, 94, 83, 25, 77, 23, 50,  2, 12, 60, 38,\n       59, 52, 40, 39, 89, 66, 53, 72, 34, 41, 96, 55, 10, 70, 71, 87, 49,\n       64, 57, 75, 17, 19, 81, 84, 90, 99, 78, 35, 92, 68, 86, 95, 31, 11,\n       79, 27, 28, 30,  1,  8, 69, 82, 44, 36, 73, 13, 46, 18, 80,  3, 97,\n       33, 14, 37, 32,  5, 56,  0,  4, 16, 51, 76, 61, 42, 85, 54])`, type: `ndarray`\n\nval, value: `array([45, 88, 98, 65, 91,  7, 93, ... , 57, 90,  3, 75, 54, 10,  6, 93])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  8, 32, 39, 58, 59, 69, ... , 10,  1, 34, 79, 20, 73, 23, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0,   8, 605,  50, 993, ... , 893, 920, 961, 948, 960, 996])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   8,  12,  17,  23, ... , 992, 993, 995, 996, 998, 999])`, shape: `(255,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 8,  4,  5,  6,  4,  2,  6, ... ,  1,  1,  1,  2,  1,  2,  1,  1])`, shape: `(255,)`, type: `ndarray`\n\nres, value: `array([ 8,  4,  5,  6,  4,  2,  6, ... ,  1,  1,  1,  2,  1,  2,  1,  1])`, shape: `(255,)`, type: `ndarray`\n\nri, value: `MultiIndex([('f', '2015-08-27') ... ('l', '2015-08-25')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nf    2015-08-27    8\nu    2015-08-23    4\nf    2015-08-29    5\np    2015-08-27    6\nd    2015-08-30    4\n                  ..\np    2015-08-28    2\ng    2015-08-29    1\nj    2015-08-26    2\nf    2015-09-01    1\nl    2015-08-25    1\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n## Case 33\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      45.0\n1      88.0\n2      98.0\n3      65.0\n4      91.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     6.0\n999    93.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([45., 88., 98., 65., 91., ... , 61., 80., 42., 85., 54., 51.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([45., 88., 98., 65., 91., ... ,  3., nan, nan, nan,  6., 93.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 83, 89, 92, 93, 97, 99, 99, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 261, 538, 576, 523, 734, 740])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59, 104, 141, 184, 220, 264, 299, 333, 385, 428, 460, 490, 533,\n       574, 611, 641, 670, 710, 752, 780, 813, 845, 876, 913, 947, 974])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([42, 30, 28, 36, 29, 33, 23, 26, 39, 36, 24, 20, 33, 31, 23, 23, 21,\n       27, 29, 22, 26, 25, 19, 31, 25, 20, 22])`, type: `ndarray`\n\nres, value: `array([30, 28, 36, 29, 33, 23, 26, 39, 36, 24, 20, 33, 31, 23, 23, 21, 27,\n       29, 22, 26, 25, 19, 31, 25, 20, 22])`, type: `ndarray`\n\nri, value: `Index(['f', 'p', 'd', 'g', 's', 'k', 'z', 'j', 'b', 'i', 'l', 'c', 'x', 'o',\n       'w', 'y', 't', 'n', 'u', 'm', 'v', 'e', 'r', 'a', 'h', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nf    30\np    28\nd    36\ng    29\ns    33\nk    23\nz    26\nj    39\nb    36\ni    24\nl    20\nc    33\nx    31\no    23\nw    23\ny    21\nt    27\nn    29\nu    22\nm    26\nv    25\ne    19\nr    31\na    25\nh    20\nq    22\nName: julie, dtype: int64`, type: `Series`\n\n## Case 34\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      45.0\n1      88.0\n2      98.0\n3      65.0\n4      91.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     6.0\n999    93.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 249, 250, 250, 251, 252, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([45., 88., 98., 65., 91., ... , 61., 80., 42., 85., 54., 51.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([45., 88., 98., 65., 91., ... ,  3., nan, nan, nan,  6., 93.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  1, 32, -1, 17, 70, 51, 94, -1])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 920, 961, 948, 960, 966, 996])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  92,  97, 102, 104, ... , 992, 994, 995, 997, 998, 999])`, shape: `(254,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n        True])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([55,  7,  4,  4,  2,  5,  3, ... ,  1,  1,  2,  1,  2,  1,  1,  1])`, shape: `(255,)`, type: `ndarray`\n\nres, value: `array([7, 4, 4, 2, 5, 3, 3, 7, 5, ... , 1, 1, 1, 1, 2, 1, 2, 1, 1, 1])`, shape: `(254,)`, type: `ndarray`\n\nri, value: `MultiIndex([('f', '2015-08-27') ... ('l', '2015-08-25')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nf    2015-08-27    7\n     2015-08-29    4\nd    2015-08-30    4\ng    2015-08-23    2\ns    2015-09-01    5\n                  ..\ng    2015-08-29    1\nj    2015-08-26    2\nf    2015-09-01    1\nu    2015-09-01    1\nl    2015-08-25    1\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n## Case 35\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      45.0\n1      88.0\n2      98.0\n3      65.0\n4      91.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     6.0\n999    93.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([45., 88., 98., 65., 91., ... , 61., 80., 42., 85., 54., 51.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([45., 88., 98., 65., 91., ... ,  3., nan, nan, nan,  6., 93.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 83, 89, 92, 93, 97, 99, 99, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 261, 538, 576, 523, 734, 740])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59, 104, 141, 184, 220, 264, 299, 333, 385, 428, 460, 490, 533,\n       574, 611, 641, 670, 710, 752, 780, 813, 845, 876, 913, 947, 974])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([42, 30, 28, 36, 29, 33, 23, 26, 39, 36, 24, 20, 33, 31, 23, 23, 21,\n       27, 29, 22, 26, 25, 19, 31, 25, 20, 22])`, type: `ndarray`\n\nres, value: `array([30, 28, 36, 29, 33, 23, 26, 39, 36, 24, 20, 33, 31, 23, 23, 21, 27,\n       29, 22, 26, 25, 19, 31, 25, 20, 22])`, type: `ndarray`\n\nri, value: `Index(['f', 'p', 'd', 'g', 's', 'k', 'z', 'j', 'b', 'i', 'l', 'c', 'x', 'o',\n       'w', 'y', 't', 'n', 'u', 'm', 'v', 'e', 'r', 'a', 'h', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nf    30\np    28\nd    36\ng    29\ns    33\nk    23\nz    26\nj    39\nb    36\ni    24\nl    20\nc    33\nx    31\no    23\nw    23\ny    21\nt    27\nn    29\nu    22\nm    26\nv    25\ne    19\nr    31\na    25\nh    20\nq    22\nName: julie, dtype: int64`, type: `Series`\n\n## Case 36\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      45.0\n1      88.0\n2      98.0\n3      65.0\n4      91.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     6.0\n999    93.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 249, 250, 250, 251, 252, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([45., 88., 98., 65., 91., ... , 61., 80., 42., 85., 54., 51.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([45., 88., 98., 65., 91., ... ,  3., nan, nan, nan,  6., 93.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  1, 32, -1, 17, 70, 51, 94, -1])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 920, 961, 948, 960, 966, 996])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  92,  97, 102, 104, ... , 992, 994, 995, 997, 998, 999])`, shape: `(254,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n        True])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([55,  7,  4,  4,  2,  5,  3, ... ,  1,  1,  2,  1,  2,  1,  1,  1])`, shape: `(255,)`, type: `ndarray`\n\nres, value: `array([7, 4, 4, 2, 5, 3, 3, 7, 5, ... , 1, 1, 1, 1, 2, 1, 2, 1, 1, 1])`, shape: `(254,)`, type: `ndarray`\n\nri, value: `MultiIndex([('f', '2015-08-27') ... ('l', '2015-08-25')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nf    2015-08-27    7\n     2015-08-29    4\nd    2015-08-30    4\ng    2015-08-23    2\ns    2015-09-01    5\n                  ..\ng    2015-08-29    1\nj    2015-08-26    2\nf    2015-09-01    1\nu    2015-09-01    1\nl    2015-08-25    1\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n## Case 37\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       27\n1       38\n2        8\n3       49\n4       84\n        ..\n9995    95\n9996    10\n9997     9\n9998    30\n9999    28\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([27, 38,  8, 49, 84, 63, 78, 31,  0,  9, 16,  2, 55, 35, 39,  7,  6,\n       77, 99, 82, 36, 42, 41, 20, 75, 73, 91, 19,  3, 70, 62, 14, 26, 81,\n       57, 95, 25, 48, 34, 89, 22, 76, 61, 32, 15, 93,  5, 50, 86, 74, 24,\n       58, 11, 96, 44, 65, 98, 33, 97, 29, 54, 83,  4, 90, 71, 28, 12, 92,\n       69, 21, 56, 37, 64, 68, 53, 23,  1, 79, 10, 72, 30, 17, 43, 52, 88,\n       51, 59, 47, 45, 66, 13, 94, 18, 40, 60, 67, 80, 87, 46, 85])`, type: `ndarray`\n\nval, value: `array([27, 38,  8, ...,  9, 30, 28])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([   0, 2900, 6999, ..., 1758, 2019, 3247])`, type: `ndarray`\n\nidx, value: `array([   0,  395,  785, 1164, 1542, 1980, 2368, 2761, 3137, 3523, 3924,\n       4305, 4700, 5073, 5441, 5816, 6179, 6568, 6932, 7301, 7658, 8063,\n       8465, 8855, 9248, 9637])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 99, 100,  98,  97,  99,  99,  98,  98,  98,  98,  98,  98,  97,\n        99,  97,  98,  96,  96,  98,  97,  94,  99,  98,  99,  99,  97])`, type: `ndarray`\n\nres, value: `array([ 99, 100,  98,  97,  99,  99,  98,  98,  98,  98,  98,  98,  97,\n        99,  97,  98,  96,  96,  98,  97,  94,  99,  98,  99,  99,  97])`, type: `ndarray`\n\nri, value: `Index(['d', 'u', 'v', 'a', 'i', 'k', 's', 'r', 'g', 'l', 'p', 'w', 'e', 'j',\n       'z', 'o', 'h', 'c', 't', 'y', 'f', 'x', 'n', 'm', 'b', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nd     99\nu    100\nv     98\na     97\ni     99\nk     99\ns     98\nr     98\ng     98\nl     98\np     98\nw     98\ne     97\nj     99\nz     97\no     98\nh     96\nc     96\nt     98\ny     97\nf     94\nx     99\nn     98\nm     99\nb     99\nq     97\nName: julie, dtype: int64`, type: `Series`\n\n## Case 38\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       27\n1       38\n2        8\n3       49\n4       84\n        ..\n9995    95\n9996    10\n9997     9\n9998    30\n9999    28\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([27, 38,  8, 49, 84, 63, 78, 31,  0,  9, 16,  2, 55, 35, 39,  7,  6,\n       77, 99, 82, 36, 42, 41, 20, 75, 73, 91, 19,  3, 70, 62, 14, 26, 81,\n       57, 95, 25, 48, 34, 89, 22, 76, 61, 32, 15, 93,  5, 50, 86, 74, 24,\n       58, 11, 96, 44, 65, 98, 33, 97, 29, 54, 83,  4, 90, 71, 28, 12, 92,\n       69, 21, 56, 37, 64, 68, 53, 23,  1, 79, 10, 72, 30, 17, 43, 52, 88,\n       51, 59, 47, 45, 66, 13, 94, 18, 40, 60, 67, 80, 87, 46, 85])`, type: `ndarray`\n\nval, value: `array([27, 38,  8, ...,  9, 30, 28])`, type: `ndarray`\n\ncodes, value: `array([ 0,  3,  9, ..., 84, 86, 88])`, type: `ndarray`\n\nsorter, value: `array([   0, 6934, 9939, ..., 7690, 7023, 7408])`, type: `ndarray`\n\nidx, value: `array([   0,   42,   91,  124,  160, ... , 9834, 9866, 9898, 9938, 9973])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([37, 42, 32, 30, 25, 42, 38, ... , 31,\n       23, 27, 29, 31, 23])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([37, 42, 32, 30, 25, 42, 38, ... , 31,\n       23, 27, 29, 31, 23])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('d', '2015-08-30') ... ('a', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nd    2015-08-30    37\nu    2015-08-29    42\nd    2015-09-01    32\nv    2015-08-28    30\na    2015-08-30    25\n                   ..\nf    2015-08-29    23\nj    2015-08-25    27\nt    2015-08-30    29\nb    2015-08-30    31\na    2015-08-24    23\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 39\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       27.0\n1       38.0\n2        8.0\n3       49.0\n4       84.0\n        ... \n9995    95.0\n9996    10.0\n9997     9.0\n9998    30.0\n9999    28.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([27., 38.,  8., 49., 84., ... , 94., 47., 46., 74., 85., 59.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([27., 38.,  8., ...,  9., 30., 28.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 3247, 4576, 7555])`, type: `ndarray`\n\nidx, value: `array([ 589,  956, 1320, 1683, 2101, 2469, 2838, 3194, 3556, 3933, 4299,\n       4673, 5021, 5369, 5724, 6065, 6430, 6777, 7138, 7487, 7816, 8194,\n       8570, 8935, 9296, 9658])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  96,  97,  97, 100,  98,  93,  97,  97,  94,  96,  98,  97,\n        97,  95,  98,  93,  95,  99,  95,  97,  93,  99,  97,  99,  99,\n        92])`, type: `ndarray`\n\nres, value: `array([ 96,  97,  97, 100,  98,  93,  97,  97,  94,  96,  98,  97,  97,\n        95,  98,  93,  95,  99,  95,  97,  93,  99,  97,  99,  99,  92])`, type: `ndarray`\n\nri, value: `Index(['d', 'v', 'a', 'i', 'k', 's', 'r', 'g', 'l', 'p', 'w', 'e', 'j', 'z',\n       'o', 'h', 'c', 'u', 't', 'y', 'f', 'x', 'n', 'm', 'b', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nd     96\nv     97\na     97\ni    100\nk     98\ns     93\nr     97\ng     97\nl     94\np     96\nw     98\ne     97\nj     97\nz     95\no     98\nh     93\nc     95\nu     99\nt     95\ny     97\nf     93\nx     99\nn     97\nm     99\nb     99\nq     92\nName: julie, dtype: int64`, type: `Series`\n\n## Case 40\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       27.0\n1       38.0\n2        8.0\n3       49.0\n4       84.0\n        ... \n9995    95.0\n9996    10.0\n9997     9.0\n9998    30.0\n9999    28.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([27., 38.,  8., 49., 84., ... , 94., 47., 46., 74., 85., 59.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([27., 38.,  8., ...,  9., 30., 28.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 87, 87, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6969, 7492, 7023])`, type: `ndarray`\n\nidx, value: `array([ 844,  880,  909,  941,  987, ... , 9841, 9872, 9904, 9943, 9974])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  30,  22,  24,  34, ... ,  22,  25,  27,  24,\n        22])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([30, 22, 24, 34, 35, 26, 30, ... , 21,\n       22, 25, 27, 24, 22])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('d', '2015-08-30') ... ('a', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nd    2015-08-30    30\n     2015-09-01    22\na    2015-08-30    24\ni    2015-08-26    34\nk    2015-08-25    35\n                   ..\nj    2015-08-25    22\no    2015-08-31    25\nt    2015-08-30    27\nb    2015-08-30    24\na    2015-08-24    22\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 41\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       27.0\n1       38.0\n2        8.0\n3       49.0\n4       84.0\n        ... \n9995    95.0\n9996    10.0\n9997     9.0\n9998    30.0\n9999    28.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([27., 38.,  8., 49., 84., ... , 94., 47., 46., 74., 85., 59.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([27., 38.,  8., ...,  9., 30., 28.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 3247, 4576, 7555])`, type: `ndarray`\n\nidx, value: `array([ 589,  956, 1320, 1683, 2101, 2469, 2838, 3194, 3556, 3933, 4299,\n       4673, 5021, 5369, 5724, 6065, 6430, 6777, 7138, 7487, 7816, 8194,\n       8570, 8935, 9296, 9658])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  96,  97,  97, 100,  98,  93,  97,  97,  94,  96,  98,  97,\n        97,  95,  98,  93,  95,  99,  95,  97,  93,  99,  97,  99,  99,\n        92])`, type: `ndarray`\n\nres, value: `array([ 96,  97,  97, 100,  98,  93,  97,  97,  94,  96,  98,  97,  97,\n        95,  98,  93,  95,  99,  95,  97,  93,  99,  97,  99,  99,  92])`, type: `ndarray`\n\nri, value: `Index(['d', 'v', 'a', 'i', 'k', 's', 'r', 'g', 'l', 'p', 'w', 'e', 'j', 'z',\n       'o', 'h', 'c', 'u', 't', 'y', 'f', 'x', 'n', 'm', 'b', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nd     96\nv     97\na     97\ni    100\nk     98\ns     93\nr     97\ng     97\nl     94\np     96\nw     98\ne     97\nj     97\nz     95\no     98\nh     93\nc     95\nu     99\nt     95\ny     97\nf     93\nx     99\nn     97\nm     99\nb     99\nq     92\nName: julie, dtype: int64`, type: `Series`\n\n## Case 42\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       27.0\n1       38.0\n2        8.0\n3       49.0\n4       84.0\n        ... \n9995    95.0\n9996    10.0\n9997     9.0\n9998    30.0\n9999    28.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([27., 38.,  8., 49., 84., ... , 94., 47., 46., 74., 85., 59.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([27., 38.,  8., ...,  9., 30., 28.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 87, 87, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6969, 7492, 7023])`, type: `ndarray`\n\nidx, value: `array([ 844,  880,  909,  941,  987, ... , 9841, 9872, 9904, 9943, 9974])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  30,  22,  24,  34, ... ,  22,  25,  27,  24,\n        22])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([30, 22, 24, 34, 35, 26, 30, ... , 21,\n       22, 25, 27, 24, 22])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('d', '2015-08-30') ... ('a', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nd    2015-08-30    30\n     2015-09-01    22\na    2015-08-30    24\ni    2015-08-26    34\nk    2015-08-25    35\n                   ..\nj    2015-08-25    22\no    2015-08-31    25\nt    2015-08-30    27\nb    2015-08-30    24\na    2015-08-24    22\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 43\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        48\n1        82\n2        33\n3        89\n4        70\n         ..\n99995    60\n99996    39\n99997    32\n99998    61\n99999    35\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([48, 82, 33, 89, 70, 88, 67, 29, 85, 41, 80, 42, 90, 87, 26, 55, 24,\n       98, 84, 52,  5, 93,  4, 38, 15, 73, 27, 28, 31, 57, 16, 94, 74, 32,\n       13,  9, 71, 78, 36, 81, 43, 59, 79, 66, 35, 68, 34, 21, 51, 47, 20,\n       50, 22, 69, 14, 53, 56,  7, 65, 11, 72, 75,  1,  3, 10, 63, 64, 62,\n        0, 76, 83, 54, 97, 92, 58, 19,  6, 17, 49, 37, 12, 39, 60, 46, 86,\n       23, 96, 18, 40, 44,  8, 25, 95, 61, 45, 30, 91,  2, 99, 77])`, type: `ndarray`\n\nval, value: `array([48, 82, 33, ..., 32, 61, 35])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([    0,  2042,  3038, ..., 93313, 97599, 98241])`, type: `ndarray`\n\nidx, value: `array([    0,  3873,  7815, 11627, 15445, 19259, 22969, 26689, 30555,\n       34438, 38288, 42092, 45928, 49901, 53827, 57692, 61565, 65415,\n       69267, 73159, 76992, 80848, 84702, 88550, 92356, 96258])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['c', 'm', 'b', 'f', 'p', 'u', 'j', 'w', 's', 'l', 't', 'n', 'r', 'g',\n       'x', 'd', 'k', 'y', 'v', 'a', 'i', 'o', 'z', 'h', 'e', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nc    100\nm    100\nb    100\nf    100\np    100\nu    100\nj    100\nw    100\ns    100\nl    100\nt    100\nn    100\nr    100\ng    100\nx    100\nd    100\nk    100\ny    100\nv    100\na    100\ni    100\no    100\nz    100\nh    100\ne    100\nq    100\nName: julie, dtype: int64`, type: `Series`\n\n## Case 44\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        48\n1        82\n2        33\n3        89\n4        70\n         ..\n99995    60\n99996    39\n99997    32\n99998    61\n99999    35\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([48, 82, 33, 89, 70, 88, 67, 29, 85, 41, 80, 42, 90, 87, 26, 55, 24,\n       98, 84, 52,  5, 93,  4, 38, 15, 73, 27, 28, 31, 57, 16, 94, 74, 32,\n       13,  9, 71, 78, 36, 81, 43, 59, 79, 66, 35, 68, 34, 21, 51, 47, 20,\n       50, 22, 69, 14, 53, 56,  7, 65, 11, 72, 75,  1,  3, 10, 63, 64, 62,\n        0, 76, 83, 54, 97, 92, 58, 19,  6, 17, 49, 37, 12, 39, 60, 46, 86,\n       23, 96, 18, 40, 44,  8, 25, 95, 61, 45, 30, 91,  2, 99, 77])`, type: `ndarray`\n\nval, value: `array([48, 82, 33, ..., 32, 61, 35])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([    0,  2042,  6360, ..., 46253, 82194, 89074])`, type: `ndarray`\n\nidx, value: `array([    0,   387,   784,  1170, ... , 98091, 98465, 98858, 99222, 99595])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 98, 100,  96,  96,  97, ... , 100,  99,  98,  99,  98,  96])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([ 98, 100,  96,  96,  97, ... , 100,  99,  98,  99,  98,  96])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('c', '2015-08-27') ... ('x', '2015-08-25')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nc    2015-08-27     98\nm    2015-08-30    100\nb    2015-08-29     96\n     2015-08-26     96\nf    2015-08-23     97\n                  ... \np    2015-09-01     99\nz    2015-08-31     98\nk    2015-08-24     99\nx    2015-08-26     98\n     2015-08-25     96\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 45\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        48.0\n1        82.0\n2        33.0\n3        89.0\n4        70.0\n         ... \n99995    60.0\n99996    39.0\n99997    32.0\n99998    61.0\n99999    35.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([48., 82., 33., 89., 70., ... , 40., 91.,  2., 71., 99., 77.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([48., 82., 33., ..., 32., 61., 35.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 93313, 97599, 98241])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9560, 13160, 16747, 20335, 23816, 27329, 30959, 34627,\n       38258, 41823, 45532, 49282, 52988, 56597, 60252, 63871, 67471,\n       71084, 74760, 78361, 81982, 85615, 89227, 92798, 96485])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, value: `Index(['c', 'b', 'f', 'p', 'u', 'j', 'w', 's', 'l', 't', 'm', 'r', 'g', 'x',\n       'd', 'k', 'n', 'y', 'v', 'a', 'i', 'o', 'z', 'h', 'e', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nc    101\nb    101\nf    101\np    101\nu    101\nj    101\nw    101\ns    101\nl    101\nt    101\nm    101\nr    101\ng    101\nx    101\nd    101\nk    101\nn    101\ny    101\nv    101\na    101\ni    101\no    101\nz    101\nh    101\ne    101\nq    101\nName: julie, dtype: int64`, type: `Series`\n\n## Case 46\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        48.0\n1        82.0\n2        33.0\n3        89.0\n4        70.0\n         ... \n99995    60.0\n99996    39.0\n99997    32.0\n99998    61.0\n99999    35.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([48., 82., 33., 89., 70., ... , 40., 91.,  2., 71., 99., 77.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([48., 82., 33., ..., 32., 61., 35.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 15195, 61081, 82869])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8785,  9145,  9506, ... , 98285, 98617, 98971, 99311, 99649])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  94,  93,  93,  92, ... ,  98,  93,  99,  95,\n        98])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 94,  93,  93,  92,  98, ... ,  91,  98,  93,  99,  95,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('c', '2015-08-27') ... ('a', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nc    2015-08-27    94\nb    2015-08-29    93\nf    2015-08-23    93\np    2015-08-30    92\nu    2015-08-28    98\n                   ..\nk    2015-08-24    98\nx    2015-08-25    93\nu    2015-08-26    99\nx    2015-08-26    95\na    2015-09-01    98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 47\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        48.0\n1        82.0\n2        33.0\n3        89.0\n4        70.0\n         ... \n99995    60.0\n99996    39.0\n99997    32.0\n99998    61.0\n99999    35.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([48., 82., 33., 89., 70., ... , 40., 91.,  2., 71., 99., 77.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([48., 82., 33., ..., 32., 61., 35.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 93313, 97599, 98241])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9560, 13160, 16747, 20335, 23816, 27329, 30959, 34627,\n       38258, 41823, 45532, 49282, 52988, 56597, 60252, 63871, 67471,\n       71084, 74760, 78361, 81982, 85615, 89227, 92798, 96485])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, value: `Index(['c', 'b', 'f', 'p', 'u', 'j', 'w', 's', 'l', 't', 'm', 'r', 'g', 'x',\n       'd', 'k', 'n', 'y', 'v', 'a', 'i', 'o', 'z', 'h', 'e', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nc    101\nb    101\nf    101\np    101\nu    101\nj    101\nw    101\ns    101\nl    101\nt    101\nm    101\nr    101\ng    101\nx    101\nd    101\nk    101\nn    101\ny    101\nv    101\na    101\ni    101\no    101\nz    101\nh    101\ne    101\nq    101\nName: julie, dtype: int64`, type: `Series`\n\n## Case 48\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        48.0\n1        82.0\n2        33.0\n3        89.0\n4        70.0\n         ... \n99995    60.0\n99996    39.0\n99997    32.0\n99998    61.0\n99999    35.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([48., 82., 33., 89., 70., ... , 40., 91.,  2., 71., 99., 77.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([48., 82., 33., ..., 32., 61., 35.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 15195, 61081, 82869])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8785,  9145,  9506, ... , 98285, 98617, 98971, 99311, 99649])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  94,  93,  93,  92, ... ,  98,  93,  99,  95,\n        98])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 94,  93,  93,  92,  98, ... ,  91,  98,  93,  99,  95,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('c', '2015-08-27') ... ('a', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nc    2015-08-27    94\nb    2015-08-29    93\nf    2015-08-23    93\np    2015-08-30    92\nu    2015-08-28    98\n                   ..\nk    2015-08-24    98\nx    2015-08-25    93\nu    2015-08-26    99\nx    2015-08-26    95\na    2015-09-01    98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 49\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     114\n1     180\n2     587\n3     205\n4     881\n     ... \n95    641\n96    925\n97     98\n98    277\n99    308\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  3,  3,\n        3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,\n        7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,\n        9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n       14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18,\n       18, 19, 19, 19, 19, 20, 21, 21, 21, 22, 22, 23, 23, 23, 24])`, type: `ndarray`\n\n_, value: `array([114, 180, 587, 205, 881, ... , 927, 641,\n       925,  98, 308])`, shape: `(94,)`, type: `ndarray`\n\nval, value: `array([114, 180, 587, 205, 881, ... , 927, 641, 925,  98, 277, 308])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  3, 10, 13, 31, 40, 63, 91,  1, 44, 66, 67,  2, 23, 78,  4, 33,\n       70, 84,  5, 49, 55,  6, 41, 43, 46, 64, 75, 76,  7, 16, 20, 60, 88,\n        8, 62, 86, 90, 93,  9, 15, 21, 37, 38, 58, 68, 71, 11, 17, 29, 39,\n       92, 12, 72, 82,  3, 22, 25, 27, 50, 80, 83, 14, 32, 57, 18, 59, 81,\n       19, 36, 42, 24, 30, 53, 26, 34, 74, 89, 28, 51, 54, 85, 35, 38, 40,\n       48, 45, 69, 77, 87, 47, 50, 52, 73, 51, 56, 61, 65, 78, 79])`, type: `ndarray`\n\nsorter, value: `array([ 0,  3, 10, 14, 32, 81, 66, 96,  1, 45, 69, 70,  2, 24, 88,  4, 34,\n       73, 89,  5, 51, 58,  6, 42, 44, 48, 67, 78, 79,  7, 17, 21, 63, 93,\n        8, 65, 91, 95, 99,  9, 16, 22, 38, 47, 61, 71, 74, 11, 18, 30, 40,\n       97, 12, 75, 86, 13, 23, 26, 28, 52, 84, 87, 15, 33, 60, 19, 62, 85,\n       20, 37, 43, 25, 31, 55, 27, 35, 77, 94, 29, 53, 56, 90, 36, 39, 41,\n       50, 46, 72, 80, 92, 49, 57, 54, 76, 98, 59, 64, 68, 82, 83])`, type: `ndarray`\n\nidx, value: `array([ 0,  8, 12, 15, 19, 22, 29, 34, 39, 47, 52, 55, 62, 65, 68, 71, 74,\n       78, 82, 86, 90, 91, 94, 96, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([8, 4, 3, 4, 3, 7, 5, 5, 8, 5, 3, 7, 3, 3, 3, 3, 4, 4, 4, 4, 1, 3,\n       2, 3, 1])`, type: `ndarray`\n\nres, value: `array([8, 4, 3, 4, 3, 7, 5, 5, 8, 5, 3, 7, 3, 3, 3, 3, 4, 4, 4, 4, 1, 3,\n       2, 3, 1])`, type: `ndarray`\n\nri, value: `Index(['i', 'p', 'u', 'x', 'h', 't', 'q', 'c', 's', 'm', 'k', 'e', 'b', 'l',\n       'w', 'd', 'v', 'z', 'a', 'y', 'r', 'g', 'o', 'n', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ni    8\np    4\nu    3\nx    4\nh    3\nt    7\nq    5\nc    5\ns    8\nm    5\nk    3\ne    7\nb    3\nl    3\nw    3\nd    3\nv    4\nz    4\na    4\ny    4\nr    1\ng    3\no    2\nn    3\nj    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 50\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     114\n1     180\n2     587\n3     205\n4     881\n     ... \n95    641\n96    925\n97     98\n98    277\n99    308\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  2,  3,  3,  3,  4,  4,  5,  6,  6,  7,  8,  9, 10, 11,\n       12, 12, 13, 14, 15, 15, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 23,\n       23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 31, 32, 33, 34, 35, 36, 37,\n       38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53,\n       54, 54, 55, 55, 56, 57, 58, 59, 59, 60, 61, 62, 62, 63, 63, 64, 65,\n       66, 67, 68, 69, 70, 71, 72, 73, 74, 74, 75, 76, 77, 78, 79])`, type: `ndarray`\n\n_, value: `array([114, 180, 587, 205, 881, ... , 927, 641,\n       925,  98, 308])`, shape: `(94,)`, type: `ndarray`\n\nval, value: `array([114, 180, 587, 205, 881, ... , 927, 641, 925,  98, 277, 308])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  2, 78,  3, 13, 31,  4, 70,  5,  6, 46,  7,  8,  9, 10, 11,\n       12, 72,  3, 14, 15, 21, 71, 16, 17, 18, 19, 20, 22, 50, 23, 24, 30,\n       53, 25, 80, 26, 27, 28, 29, 32, 33, 34, 74, 35, 36, 37, 38, 39, 40,\n       41, 42, 43, 44, 45, 38, 47, 48, 49, 51, 52, 54, 50, 55, 51, 56, 57,\n       58, 68, 59, 81, 60, 61, 62, 63, 91, 64, 65, 66, 67, 69, 77, 73, 75,\n       76, 40, 78, 79, 82, 83, 84, 85, 86, 93, 87, 88, 89, 90, 92])`, type: `ndarray`\n\nsorter, value: `array([ 0,  1,  2, 88,  3, 14, 32,  4, 73,  5,  6, 48,  7,  8,  9, 10, 11,\n       12, 75, 13, 15, 16, 22, 74, 17, 18, 19, 20, 21, 23, 52, 24, 25, 31,\n       55, 26, 84, 27, 28, 29, 30, 33, 34, 35, 77, 36, 37, 38, 39, 40, 41,\n       42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 98, 59, 60,\n       61, 71, 62, 85, 63, 64, 65, 66, 96, 67, 68, 69, 70, 72, 80, 76, 78,\n       79, 81, 82, 83, 86, 87, 89, 90, 91, 99, 92, 93, 94, 95, 97])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  2,  4,  7,  9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24,\n       25, 26, 27, 28, 29, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46,\n       47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86,\n       87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 2, 3, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 2,\n       1, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 2, 3, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 2,\n       1, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('i', '2015-08-30') ... ('m', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(80,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ni    2015-08-30    1\np    2015-08-30    1\nu    2015-08-29    2\ni    2015-08-29    3\nx    2015-08-25    2\n                  ..\ny    2015-08-31    1\nq    2015-08-30    1\nv    2015-08-29    1\nc    2015-08-23    1\nm    2015-08-27    1\nName: julie, Length: 80, dtype: int64`, type: `Series`\n\n## Case 51\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     114.0\n1     180.0\n2     587.0\n3     205.0\n4     881.0\n      ...  \n95    641.0\n96    925.0\n97     98.0\n98    277.0\n99    308.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,\n        2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,\n        5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,\n        8,  8,  9,  9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13,\n       13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18,\n       18, 19, 19, 19, 19, 20, 21, 21, 21, 22, 22, 23, 23, 23, 24])`, type: `ndarray`\n\n_, value: `array([114., 180., 587., 205., 881., ... , 641.,\n       925.,  98., 308.])`, shape: `(80,)`, type: `ndarray`\n\nval, value: `array([114., 180., 587., 205., 881., ... , 925.,  98., 277.,\n       308.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 14, 28, 42, 55, 68, -1,  0,  3,  7, 10, 25, 34, 77,  2, 20, 67,\n        4, 27, 59, 70,  5, 41, 47,  6, 35, 37, 38, 53, 64, 65, -1, 13, 17,\n       52, 74, -1, -1, 72, 76, 79, -1, -1, 12, 18, 31, 50, 57, 60,  8, 23,\n       33, 78,  9, 61, -1, -1, -1,  3, 19, 69, 11, 26, 49, -1, 15, 51, 16,\n       30, 36, 21, 24, 45, -1, 63, 75, 22, 43, 46, 71, 29, 32, 34, 40, -1,\n       56, -1, 58, 66, 73, 39, 42, 44, 62, 43, 48, -1, 54, 67, -1])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 35, 52, 69, 86, 66,  0,  3, 10, 14, 32, 81, 96,  2, 24, 88,\n        4, 34, 73, 89,  5, 51, 58,  6, 42, 44, 48, 67, 78, 79,  7, 17, 21,\n       63, 93,  8, 65, 91, 95, 99,  9, 47, 16, 22, 38, 61, 71, 74, 11, 30,\n       40, 97, 12, 75, 26, 28, 84, 13, 23, 87, 15, 33, 60, 85, 19, 62, 20,\n       37, 43, 25, 31, 55, 27, 77, 94, 29, 53, 56, 90, 36, 39, 41, 50, 45,\n       70, 46, 72, 80, 92, 49, 57, 54, 76, 98, 59, 64, 68, 82, 83])`, type: `ndarray`\n\nidx, value: `array([ 6, 14, 17, 21, 24, 31, 36, 41, 49, 53, 55, 61, 64, 67, 70, 73, 76,\n       80, 84, 86, 90, 91, 94, 96, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... ,  True, False, False,\n        True])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 8, 3, 4, 3, 7, 5, 4, 7, 4, 2, 4, 3, 3, 3, 3, 3, 4, 4, 2, 4, 1,\n       3, 2, 3, 1])`, type: `ndarray`\n\nres, value: `array([8, 3, 4, 3, 7, 5, 4, 7, 4, 2, 4, 3, 3, 3, 3, 3, 4, 4, 2, 4, 1, 3,\n       2, 3, 1])`, type: `ndarray`\n\nri, value: `Index(['i', 'u', 'x', 'h', 't', 'q', 'c', 's', 'm', 'k', 'e', 'b', 'l', 'w',\n       'd', 'v', 'z', 'a', 'p', 'y', 'r', 'g', 'o', 'n', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ni    8\nu    3\nx    4\nh    3\nt    7\nq    5\nc    4\ns    7\nm    4\nk    2\ne    4\nb    3\nl    3\nw    3\nd    3\nv    3\nz    4\na    4\np    2\ny    4\nr    1\ng    3\no    2\nn    3\nj    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 52\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     114.0\n1     180.0\n2     587.0\n3     205.0\n4     881.0\n      ...  \n95    641.0\n96    925.0\n97     98.0\n98    277.0\n99    308.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  2,  3,  4,  4,\n        5,  6,  7,  8,  9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 16, 17,\n       18, 19, 20, 21, 21, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n       32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n       48, 49, 50, 50, 51, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 59, 60,\n       61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71, 72, 73, 74])`, type: `ndarray`\n\n_, value: `array([114., 180., 587., 205., 881., ... , 641.,\n       925.,  98., 308.])`, shape: `(80,)`, type: `ndarray`\n\nval, value: `array([114., 180., 587., 205., 881., ... , 925.,  98., 277.,\n       308.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 14, 28, 33, 42, 55, 63, 68,  0,  2, 67,  4, 59,  5,  6, 38,\n       -1, -1, -1,  7,  8,  9, 61,  3, 10, 25, 11, 12, 18, 60, 13, 15, 16,\n       17, 19, 20, 21, 24, 45, -1, -1, -1, -1, 22, 23, 26, 27, 29, 30, 31,\n       32, 34, 35, 36, 37, -1, -1, -1, 39, 40, 41, 43, 44, 46, 42, 47, 43,\n       48, 49, 50, 57, -1, 51, 52, -1, -1, -1, 77, 53, 54, 56, 58, 66, 62,\n       64, 65, 34, 67, -1, 69, 70, 71, 72, 79, 73, 74, 75, 76, 78])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0,  2, 88,  4, 73,  5,  6, 48,\n        7,  8,  9, 10, 11, 12, 75, 13, 14, 32, 15, 16, 22, 74, 17, 19, 20,\n       21, 23, 24, 25, 31, 55, 26, 84, 27, 28, 29, 30, 33, 34, 36, 37, 38,\n       39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 98,\n       59, 60, 61, 71, 85, 62, 63, 64, 65, 66, 96, 67, 68, 70, 72, 80, 76,\n       78, 79, 81, 82, 83, 87, 89, 90, 91, 99, 92, 93, 94, 95, 97])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 31, 32,\n       33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70,\n       72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91,\n       92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 3,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('i', '2015-08-30') ... ('m', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(75,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ni    2015-08-30    1\nu    2015-08-29    2\nx    2015-08-25    2\nh    2015-08-23    1\nt    2015-08-27    2\n                  ..\ny    2015-08-31    1\nq    2015-08-30    1\nv    2015-08-29    1\nc    2015-08-23    1\nm    2015-08-27    1\nName: julie, Length: 75, dtype: int64`, type: `Series`\n\n## Case 53\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     114.0\n1     180.0\n2     587.0\n3     205.0\n4     881.0\n      ...  \n95    641.0\n96    925.0\n97     98.0\n98    277.0\n99    308.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,\n        2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,\n        5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,\n        8,  8,  9,  9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13,\n       13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18,\n       18, 19, 19, 19, 19, 20, 21, 21, 21, 22, 22, 23, 23, 23, 24])`, type: `ndarray`\n\n_, value: `array([114., 180., 587., 205., 881., ... , 641.,\n       925.,  98., 308.])`, shape: `(80,)`, type: `ndarray`\n\nval, value: `array([114., 180., 587., 205., 881., ... , 925.,  98., 277.,\n       308.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 14, 28, 42, 55, 68, -1,  0,  3,  7, 10, 25, 34, 77,  2, 20, 67,\n        4, 27, 59, 70,  5, 41, 47,  6, 35, 37, 38, 53, 64, 65, -1, 13, 17,\n       52, 74, -1, -1, 72, 76, 79, -1, -1, 12, 18, 31, 50, 57, 60,  8, 23,\n       33, 78,  9, 61, -1, -1, -1,  3, 19, 69, 11, 26, 49, -1, 15, 51, 16,\n       30, 36, 21, 24, 45, -1, 63, 75, 22, 43, 46, 71, 29, 32, 34, 40, -1,\n       56, -1, 58, 66, 73, 39, 42, 44, 62, 43, 48, -1, 54, 67, -1])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 35, 52, 69, 86, 66,  0,  3, 10, 14, 32, 81, 96,  2, 24, 88,\n        4, 34, 73, 89,  5, 51, 58,  6, 42, 44, 48, 67, 78, 79,  7, 17, 21,\n       63, 93,  8, 65, 91, 95, 99,  9, 47, 16, 22, 38, 61, 71, 74, 11, 30,\n       40, 97, 12, 75, 26, 28, 84, 13, 23, 87, 15, 33, 60, 85, 19, 62, 20,\n       37, 43, 25, 31, 55, 27, 77, 94, 29, 53, 56, 90, 36, 39, 41, 50, 45,\n       70, 46, 72, 80, 92, 49, 57, 54, 76, 98, 59, 64, 68, 82, 83])`, type: `ndarray`\n\nidx, value: `array([ 6, 14, 17, 21, 24, 31, 36, 41, 49, 53, 55, 61, 64, 67, 70, 73, 76,\n       80, 84, 86, 90, 91, 94, 96, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... ,  True, False, False,\n        True])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 8, 3, 4, 3, 7, 5, 4, 7, 4, 2, 4, 3, 3, 3, 3, 3, 4, 4, 2, 4, 1,\n       3, 2, 3, 1])`, type: `ndarray`\n\nres, value: `array([8, 3, 4, 3, 7, 5, 4, 7, 4, 2, 4, 3, 3, 3, 3, 3, 4, 4, 2, 4, 1, 3,\n       2, 3, 1])`, type: `ndarray`\n\nri, value: `Index(['i', 'u', 'x', 'h', 't', 'q', 'c', 's', 'm', 'k', 'e', 'b', 'l', 'w',\n       'd', 'v', 'z', 'a', 'p', 'y', 'r', 'g', 'o', 'n', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ni    8\nu    3\nx    4\nh    3\nt    7\nq    5\nc    4\ns    7\nm    4\nk    2\ne    4\nb    3\nl    3\nw    3\nd    3\nv    3\nz    4\na    4\np    2\ny    4\nr    1\ng    3\no    2\nn    3\nj    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 54\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     114.0\n1     180.0\n2     587.0\n3     205.0\n4     881.0\n      ...  \n95    641.0\n96    925.0\n97     98.0\n98    277.0\n99    308.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  2,  3,  4,  4,\n        5,  6,  7,  8,  9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 16, 17,\n       18, 19, 20, 21, 21, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n       32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n       48, 49, 50, 50, 51, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 59, 60,\n       61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71, 72, 73, 74])`, type: `ndarray`\n\n_, value: `array([114., 180., 587., 205., 881., ... , 641.,\n       925.,  98., 308.])`, shape: `(80,)`, type: `ndarray`\n\nval, value: `array([114., 180., 587., 205., 881., ... , 925.,  98., 277.,\n       308.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 14, 28, 33, 42, 55, 63, 68,  0,  2, 67,  4, 59,  5,  6, 38,\n       -1, -1, -1,  7,  8,  9, 61,  3, 10, 25, 11, 12, 18, 60, 13, 15, 16,\n       17, 19, 20, 21, 24, 45, -1, -1, -1, -1, 22, 23, 26, 27, 29, 30, 31,\n       32, 34, 35, 36, 37, -1, -1, -1, 39, 40, 41, 43, 44, 46, 42, 47, 43,\n       48, 49, 50, 57, -1, 51, 52, -1, -1, -1, 77, 53, 54, 56, 58, 66, 62,\n       64, 65, 34, 67, -1, 69, 70, 71, 72, 79, 73, 74, 75, 76, 78])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0,  2, 88,  4, 73,  5,  6, 48,\n        7,  8,  9, 10, 11, 12, 75, 13, 14, 32, 15, 16, 22, 74, 17, 19, 20,\n       21, 23, 24, 25, 31, 55, 26, 84, 27, 28, 29, 30, 33, 34, 36, 37, 38,\n       39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 98,\n       59, 60, 61, 71, 85, 62, 63, 64, 65, 66, 96, 67, 68, 70, 72, 80, 76,\n       78, 79, 81, 82, 83, 87, 89, 90, 91, 99, 92, 93, 94, 95, 97])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 31, 32,\n       33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70,\n       72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91,\n       92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 3,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('i', '2015-08-30') ... ('m', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(75,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ni    2015-08-30    1\nu    2015-08-29    2\nx    2015-08-25    2\nh    2015-08-23    1\nt    2015-08-27    2\n                  ..\ny    2015-08-31    1\nq    2015-08-30    1\nv    2015-08-29    1\nc    2015-08-23    1\nm    2015-08-27    1\nName: julie, Length: 75, dtype: int64`, type: `Series`\n\n## Case 55\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      938\n1      396\n2      651\n3      851\n4      288\n      ... \n995    988\n996     24\n997    608\n998    108\n999    508\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([938, 396, 651, 851, 288, ... ,\n       817, 171, 401,  24, 608, 508])`, shape: `(630,)`, type: `ndarray`\n\nval, value: `array([938, 396, 651, 851, 288, ... , 124, 988,  24, 608, 108, 508])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([  0,  17,  23,  44, 122, ... , 544, 573, 597, 607, 616, 617])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0,  17,  23,  45, 358, ... , 790, 867, 912, 931, 957, 959])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  47,  96, 145, 181, 231, 260, 305, 347, 384, 440, 473, 495,\n       536, 580, 614, 640, 672, 714, 748, 781, 806, 840, 880, 923, 966])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([47, 48, 46, 36, 49, 29, 43, 39, 37, 54, 31, 21, 39, 43, 34, 25, 32,\n       42, 33, 33, 25, 34, 39, 42, 43, 34])`, type: `ndarray`\n\nres, value: `array([47, 48, 46, 36, 49, 29, 43, 39, 37, 54, 31, 21, 39, 43, 34, 25, 32,\n       42, 33, 33, 25, 34, 39, 42, 43, 34])`, type: `ndarray`\n\nri, value: `Index(['p', 'a', 'e', 'g', 'f', 'o', 't', 'w', 'k', 'y', 'x', 'z', 'l', 'i',\n       'h', 's', 'm', 'j', 'q', 'c', 'r', 'b', 'd', 'n', 'v', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    47\na    48\ne    46\ng    36\nf    49\no    29\nt    43\nw    39\nk    37\ny    54\nx    31\nz    21\nl    39\ni    43\nh    34\ns    25\nm    32\nj    42\nq    33\nc    33\nr    25\nb    34\nd    39\nn    42\nv    43\nu    34\nName: julie, dtype: int64`, type: `Series`\n\n## Case 56\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      938\n1      396\n2      651\n3      851\n4      288\n      ... \n995    988\n996     24\n997    608\n998    108\n999    508\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 248, 248, 248, 249, 250, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([938, 396, 651, 851, 288, ... ,\n       817, 171, 401,  24, 608, 508])`, shape: `(630,)`, type: `ndarray`\n\nval, value: `array([938, 396, 651, 851, 288, ... , 124, 988,  24, 608, 108, 508])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([  0,  23, 136, 198, 200, ... , 514, 528, 575, 579, 581, 617])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0,  23, 140, 465, 727, ... , 998, 975, 872, 878, 881, 959])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   8,  12,  16,  22, ... ,\n       992, 994, 997, 998, 999])`, shape: `(252,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 8,  4,  4,  6,  4,  8,  5, ... ,  3,  3,  3,  2,  3,  1,  1,  1])`, shape: `(252,)`, type: `ndarray`\n\nres, value: `array([ 8,  4,  4,  6,  4,  8,  5, ... ,  3,  3,  3,  2,  3,  1,  1,  1])`, shape: `(252,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-08-26') ... ('u', '2015-08-25')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-08-26    8\na    2015-08-26    4\ne    2015-08-26    4\ng    2015-08-27    6\nf    2015-08-24    4\n                  ..\np    2015-08-29    2\ny    2015-08-28    3\nv    2015-08-23    1\nm    2015-08-25    1\nu    2015-08-25    1\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n## Case 57\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      938.0\n1      396.0\n2      651.0\n3      851.0\n4      288.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    108.0\n999    508.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([938., 396., 651., 851., 288., ... , 751., 171., 401., 108., 508.])`, shape: `(557,)`, type: `ndarray`\n\nval, value: `array([938., 396., 651., 851., 288., ... ,  nan,  nan,  nan, 108., 508.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 443, 451, 479, 508, 530, 538])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 716, 948, 790, 867, 912, 931])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59, 101, 146, 180, 228, 255, 295, 332, 366, 420, 450, 472, 519,\n       557, 600, 633, 658, 688, 727, 760, 792, 816, 850, 888, 930, 967])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([49, 31, 39, 31, 40, 25, 31, 31, 25, 47, 27, 17, 37, 32, 38, 30, 23,\n       27, 34, 27, 30, 23, 31, 27, 38, 32, 28])`, type: `ndarray`\n\nres, value: `array([31, 39, 31, 40, 25, 31, 31, 25, 47, 27, 17, 37, 32, 38, 30, 23, 27,\n       34, 27, 30, 23, 31, 27, 38, 32, 28])`, type: `ndarray`\n\nri, value: `Index(['p', 'e', 'g', 'f', 'o', 't', 'w', 'k', 'y', 'x', 'z', 'a', 'l', 'i',\n       'h', 's', 'm', 'j', 'q', 'c', 'r', 'b', 'd', 'n', 'v', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    31\ne    39\ng    31\nf    40\no    25\nt    31\nw    31\nk    25\ny    47\nx    27\nz    17\na    37\nl    32\ni    38\nh    30\ns    23\nm    27\nj    34\nq    27\nc    30\nr    23\nb    31\nd    27\nn    38\nv    32\nu    28\nName: julie, dtype: int64`, type: `Series`\n\n## Case 58\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      938.0\n1      396.0\n2      651.0\n3      851.0\n4      288.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    108.0\n999    508.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 246, 246, 247, 248, 249, 250])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([938., 396., 651., 851., 288., ... , 751., 171., 401., 108., 508.])`, shape: `(557,)`, type: `ndarray`\n\nval, value: `array([938., 396., 651., 851., 288., ... ,  nan,  nan,  nan, 108., 508.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 511, 555, 515,  -1, 292,  -1])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 872, 998, 878, 881, 929, 959])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  91,  95,  98, 105, ... , 993,\n       996, 997, 998, 999])`, shape: `(251,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False,  True, False,\n        True])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([70,  6,  4,  3,  7,  5,  4, ... ,  3,  3,  2,  3,  1,  1,  1,  1])`, shape: `(252,)`, type: `ndarray`\n\nres, value: `array([ 6,  4,  3,  7,  5,  4,  2, ... ,  3,  3,  2,  3,  1,  1,  1,  1])`, shape: `(251,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-08-26') ... ('u', '2015-08-25')],\n           names=['jim', 'joe'], length=251)`, shape: `(251,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-08-26    6\ne    2015-08-26    4\nf    2015-08-24    3\n     2015-08-23    7\no    2015-08-30    5\n                  ..\ny    2015-08-28    3\nv    2015-08-23    1\nm    2015-08-25    1\nj    2015-08-31    1\nu    2015-08-25    1\nName: julie, Length: 251, dtype: int64`, type: `Series`\n\n## Case 59\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      938.0\n1      396.0\n2      651.0\n3      851.0\n4      288.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    108.0\n999    508.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([938., 396., 651., 851., 288., ... , 751., 171., 401., 108., 508.])`, shape: `(557,)`, type: `ndarray`\n\nval, value: `array([938., 396., 651., 851., 288., ... ,  nan,  nan,  nan, 108., 508.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 443, 451, 479, 508, 530, 538])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 716, 948, 790, 867, 912, 931])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59, 101, 146, 180, 228, 255, 295, 332, 366, 420, 450, 472, 519,\n       557, 600, 633, 658, 688, 727, 760, 792, 816, 850, 888, 930, 967])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([49, 31, 39, 31, 40, 25, 31, 31, 25, 47, 27, 17, 37, 32, 38, 30, 23,\n       27, 34, 27, 30, 23, 31, 27, 38, 32, 28])`, type: `ndarray`\n\nres, value: `array([31, 39, 31, 40, 25, 31, 31, 25, 47, 27, 17, 37, 32, 38, 30, 23, 27,\n       34, 27, 30, 23, 31, 27, 38, 32, 28])`, type: `ndarray`\n\nri, value: `Index(['p', 'e', 'g', 'f', 'o', 't', 'w', 'k', 'y', 'x', 'z', 'a', 'l', 'i',\n       'h', 's', 'm', 'j', 'q', 'c', 'r', 'b', 'd', 'n', 'v', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    31\ne    39\ng    31\nf    40\no    25\nt    31\nw    31\nk    25\ny    47\nx    27\nz    17\na    37\nl    32\ni    38\nh    30\ns    23\nm    27\nj    34\nq    27\nc    30\nr    23\nb    31\nd    27\nn    38\nv    32\nu    28\nName: julie, dtype: int64`, type: `Series`\n\n## Case 60\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      938.0\n1      396.0\n2      651.0\n3      851.0\n4      288.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    108.0\n999    508.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 246, 246, 247, 248, 249, 250])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([938., 396., 651., 851., 288., ... , 751., 171., 401., 108., 508.])`, shape: `(557,)`, type: `ndarray`\n\nval, value: `array([938., 396., 651., 851., 288., ... ,  nan,  nan,  nan, 108., 508.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 511, 555, 515,  -1, 292,  -1])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 872, 998, 878, 881, 929, 959])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  91,  95,  98, 105, ... , 993,\n       996, 997, 998, 999])`, shape: `(251,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False,  True, False,\n        True])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([70,  6,  4,  3,  7,  5,  4, ... ,  3,  3,  2,  3,  1,  1,  1,  1])`, shape: `(252,)`, type: `ndarray`\n\nres, value: `array([ 6,  4,  3,  7,  5,  4,  2, ... ,  3,  3,  2,  3,  1,  1,  1,  1])`, shape: `(251,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-08-26') ... ('u', '2015-08-25')],\n           names=['jim', 'joe'], length=251)`, shape: `(251,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-08-26    6\ne    2015-08-26    4\nf    2015-08-24    3\n     2015-08-23    7\no    2015-08-30    5\n                  ..\ny    2015-08-28    3\nv    2015-08-23    1\nm    2015-08-25    1\nj    2015-08-31    1\nu    2015-08-25    1\nName: julie, Length: 251, dtype: int64`, type: `Series`\n\n## Case 61\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        16\n1       439\n2       991\n3       317\n4       722\n       ... \n9995    520\n9996    350\n9997    173\n9998    409\n9999    830\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([ 16, 439, 991, 317, 722, ... , 157, 162, 843, 321, 338, 484])`, shape: `(998,)`, type: `ndarray`\n\nval, value: `array([ 16, 439, 991, ..., 173, 409, 830])`, type: `ndarray`\n\ncodes, value: `array([  0,   3,   7, ..., 979, 982, 983])`, type: `ndarray`\n\nsorter, value: `array([   0, 7810,  167, ..., 8774, 7794, 6075])`, type: `ndarray`\n\nidx, value: `array([   0,  361,  743, 1129, 1483, 1846, 2262, 2636, 3039, 3420, 3813,\n       4199, 4540, 4964, 5376, 5768, 6124, 6543, 6944, 7349, 7721, 8117,\n       8484, 8872, 9265, 9631])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([307, 326, 319, 297, 304, 334, 316, 341, 318, 332, 320, 285, 346,\n       341, 313, 295, 338, 331, 331, 307, 323, 308, 317, 337, 299, 314])`, type: `ndarray`\n\nres, value: `array([307, 326, 319, 297, 304, 334, 316, 341, 318, 332, 320, 285, 346,\n       341, 313, 295, 338, 331, 331, 307, 323, 308, 317, 337, 299, 314])`, type: `ndarray`\n\nri, value: `Index(['z', 'v', 'a', 'o', 'q', 'd', 't', 'e', 'r', 'x', 'f', 'p', 'h', 'w',\n       's', 'b', 'i', 'j', 'y', 'l', 'c', 'g', 'n', 'u', 'k', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nz    307\nv    326\na    319\no    297\nq    304\nd    334\nt    316\ne    341\nr    318\nx    332\nf    320\np    285\nh    346\nw    341\ns    313\nb    295\ni    338\nj    331\ny    331\nl    307\nc    323\ng    308\nn    317\nu    337\nk    299\nm    314\nName: julie, dtype: int64`, type: `Series`\n\n## Case 62\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        16\n1       439\n2       991\n3       317\n4       722\n       ... \n9995    520\n9996    350\n9997    173\n9998    409\n9999    830\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([ 16, 439, 991, 317, 722, ... , 157, 162, 843, 321, 338, 484])`, shape: `(998,)`, type: `ndarray`\n\nval, value: `array([ 16, 439, 991, ..., 173, 409, 830])`, type: `ndarray`\n\ncodes, value: `array([  0,  81,  92, ..., 921, 928, 981])`, type: `ndarray`\n\nsorter, value: `array([   0, 9012,   96, ..., 8183, 2777, 4413])`, type: `ndarray`\n\nidx, value: `array([   0,   30,   62,  106,  151, ... , 9832, 9869, 9895, 9929, 9967])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([30, 30, 44, 44, 30, 35, 50, ... , 30,\n       36, 26, 34, 38, 32])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([30, 30, 44, 44, 30, 35, 50, ... , 30,\n       36, 26, 34, 38, 32])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('z', '2015-08-25') ... ('t', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nz    2015-08-25    30\nv    2015-08-26    30\na    2015-08-30    44\no    2015-09-01    44\nv    2015-08-31    30\n                   ..\np    2015-08-28    36\nq    2015-08-27    26\na    2015-08-29    34\nr    2015-08-25    38\nt    2015-08-30    32\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 63\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        16.0\n1       439.0\n2       991.0\n3       317.0\n4       722.0\n        ...  \n9995    520.0\n9996    350.0\n9997    173.0\n9998    409.0\n9999    830.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([ 16., 439., 991., 317., 722., ... , 843., 381., 983., 321., 338.])`, shape: `(996,)`, type: `ndarray`\n\nval, value: `array([ 16., 439., 991., ..., 173., 409., 830.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 971, 973, 985])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 7794, 6075, 6421])`, type: `ndarray`\n\nidx, value: `array([ 589,  921, 1285, 1615, 1968, 2313, 2707, 3068, 3455, 3821, 4193,\n       4557, 4872, 5277, 5663, 6032, 6356, 6750, 7123, 7502, 7849, 8226,\n       8569, 8935, 9313, 9660])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([376, 250, 273, 232, 255, 255, 281, 269, 290, 263, 271, 258, 229,\n       293, 284, 248, 241, 282, 276, 276, 251, 265, 248, 269, 294, 253,\n       255])`, type: `ndarray`\n\nres, value: `array([250, 273, 232, 255, 255, 281, 269, 290, 263, 271, 258, 229, 293,\n       284, 248, 241, 282, 276, 276, 251, 265, 248, 269, 294, 253, 255])`, type: `ndarray`\n\nri, value: `Index(['z', 'a', 'o', 'v', 'q', 'd', 't', 'e', 'r', 'x', 'f', 'p', 'h', 'w',\n       's', 'b', 'i', 'j', 'y', 'l', 'c', 'g', 'n', 'u', 'k', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nz    250\na    273\no    232\nv    255\nq    255\nd    281\nt    269\ne    290\nr    263\nx    271\nf    258\np    229\nh    293\nw    284\ns    248\nb    241\ni    282\nj    276\ny    276\nl    251\nc    265\ng    248\nn    269\nu    294\nk    253\nm    255\nName: julie, dtype: int64`, type: `Series`\n\n## Case 64\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        16.0\n1       439.0\n2       991.0\n3       317.0\n4       722.0\n        ...  \n9995    520.0\n9996    350.0\n9997    173.0\n9998    409.0\n9999    830.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([ 16., 439., 991., 317., 722., ... , 843., 381., 983., 321., 338.])`, shape: `(996,)`, type: `ndarray`\n\nval, value: `array([ 16., 439., 991., ..., 173., 409., 830.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 727, 880, 923])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 8642, 3327, 7049])`, type: `ndarray`\n\nidx, value: `array([ 844,  871,  914,  941,  975, ... , 9853, 9885, 9918, 9945, 9973])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([488,  21,  41,  22,  27, ... ,  27,  27,  26,  26,\n        21])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([21, 41, 22, 27, 34, 34, 38, ... , 32,\n       27, 27, 26, 26, 21])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('z', '2015-08-25') ... ('j', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nz    2015-08-25    21\na    2015-08-30    41\nv    2015-08-31    22\nq    2015-08-24    27\nd    2015-08-25    34\n                   ..\nr    2015-08-25    27\nt    2015-08-30    27\nm    2015-08-25    26\nb    2015-09-01    26\nj    2015-08-27    21\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 65\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        16.0\n1       439.0\n2       991.0\n3       317.0\n4       722.0\n        ...  \n9995    520.0\n9996    350.0\n9997    173.0\n9998    409.0\n9999    830.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([ 16., 439., 991., 317., 722., ... , 843., 381., 983., 321., 338.])`, shape: `(996,)`, type: `ndarray`\n\nval, value: `array([ 16., 439., 991., ..., 173., 409., 830.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 971, 973, 985])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 7794, 6075, 6421])`, type: `ndarray`\n\nidx, value: `array([ 589,  921, 1285, 1615, 1968, 2313, 2707, 3068, 3455, 3821, 4193,\n       4557, 4872, 5277, 5663, 6032, 6356, 6750, 7123, 7502, 7849, 8226,\n       8569, 8935, 9313, 9660])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([376, 250, 273, 232, 255, 255, 281, 269, 290, 263, 271, 258, 229,\n       293, 284, 248, 241, 282, 276, 276, 251, 265, 248, 269, 294, 253,\n       255])`, type: `ndarray`\n\nres, value: `array([250, 273, 232, 255, 255, 281, 269, 290, 263, 271, 258, 229, 293,\n       284, 248, 241, 282, 276, 276, 251, 265, 248, 269, 294, 253, 255])`, type: `ndarray`\n\nri, value: `Index(['z', 'a', 'o', 'v', 'q', 'd', 't', 'e', 'r', 'x', 'f', 'p', 'h', 'w',\n       's', 'b', 'i', 'j', 'y', 'l', 'c', 'g', 'n', 'u', 'k', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nz    250\na    273\no    232\nv    255\nq    255\nd    281\nt    269\ne    290\nr    263\nx    271\nf    258\np    229\nh    293\nw    284\ns    248\nb    241\ni    282\nj    276\ny    276\nl    251\nc    265\ng    248\nn    269\nu    294\nk    253\nm    255\nName: julie, dtype: int64`, type: `Series`\n\n## Case 66\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        16.0\n1       439.0\n2       991.0\n3       317.0\n4       722.0\n        ...  \n9995    520.0\n9996    350.0\n9997    173.0\n9998    409.0\n9999    830.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([ 16., 439., 991., 317., 722., ... , 843., 381., 983., 321., 338.])`, shape: `(996,)`, type: `ndarray`\n\nval, value: `array([ 16., 439., 991., ..., 173., 409., 830.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 727, 880, 923])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 8642, 3327, 7049])`, type: `ndarray`\n\nidx, value: `array([ 844,  871,  914,  941,  975, ... , 9853, 9885, 9918, 9945, 9973])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([488,  21,  41,  22,  27, ... ,  27,  27,  26,  26,\n        21])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([21, 41, 22, 27, 34, 34, 38, ... , 32,\n       27, 27, 26, 26, 21])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('z', '2015-08-25') ... ('j', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nz    2015-08-25    21\na    2015-08-30    41\nv    2015-08-31    22\nq    2015-08-24    27\nd    2015-08-25    34\n                   ..\nr    2015-08-25    27\nt    2015-08-30    27\nm    2015-08-25    26\nb    2015-09-01    26\nj    2015-08-27    21\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 67\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        296\n1        643\n2        823\n3        255\n4        897\n        ... \n99995    921\n99996    179\n99997    491\n99998    675\n99999    307\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([296, 643, 823, 255, 897, ... , 338,  11,  63, 536, 949, 866])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([296, 643, 823, ..., 491, 675, 307])`, type: `ndarray`\n\ncodes, value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([    0, 20333, 23018, ..., 28972, 53277, 85059])`, type: `ndarray`\n\nidx, value: `array([    0,  3927,  7844, 11691, 15433, 19356, 23190, 27157, 30889,\n       34808, 38595, 42406, 46313, 50049, 53916, 57737, 61608, 65448,\n       69348, 73118, 77059, 80969, 84820, 88606, 92439, 96210])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([981, 986, 980, 969, 983, 980, 982, 971, 979, 975, 981, 978, 978,\n       977, 975, 979, 984, 975, 969, 984, 981, 973, 977, 979, 984, 976])`, type: `ndarray`\n\nres, value: `array([981, 986, 980, 969, 983, 980, 982, 971, 979, 975, 981, 978, 978,\n       977, 975, 979, 984, 975, 969, 984, 981, 973, 977, 979, 984, 976])`, type: `ndarray`\n\nri, value: `Index(['m', 'n', 'a', 't', 'e', 'r', 'h', 'g', 'p', 'y', 'u', 'q', 'o', 'c',\n       'd', 's', 'x', 'z', 'b', 'j', 'f', 'k', 'v', 'i', 'l', 'w'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nm    981\nn    986\na    980\nt    969\ne    983\nr    980\nh    982\ng    971\np    979\ny    975\nu    981\nq    978\no    978\nc    977\nd    975\ns    979\nx    984\nz    975\nb    969\nj    984\nf    981\nk    973\nv    977\ni    979\nl    984\nw    976\nName: julie, dtype: int64`, type: `Series`\n\n## Case 68\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        296\n1        643\n2        823\n3        255\n4        897\n        ... \n99995    921\n99996    179\n99997    491\n99998    675\n99999    307\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([296, 643, 823, 255, 897, ... , 338,  11,  63, 536, 949, 866])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([296, 643, 823, ..., 491, 675, 307])`, type: `ndarray`\n\ncodes, value: `array([  0,   0,   2, ..., 994, 996, 998])`, type: `ndarray`\n\nsorter, value: `array([    0, 20333, 29743, ..., 54787, 56288, 16426])`, type: `ndarray`\n\nidx, value: `array([    0,   382,   775,  1157, ... , 98084, 98488, 98883, 99242, 99620])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([315, 331, 309, 317, 337, ... , 327, 329, 324, 302, 311, 320])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([315, 331, 309, 317, 337, ... , 327, 329, 324, 302, 311, 320])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('m', '2015-08-24') ... ('c', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nm    2015-08-24    315\nn    2015-08-24    331\na    2015-08-24    309\nt    2015-08-27    317\ne    2015-08-25    337\n                  ... \no    2015-08-26    329\na    2015-08-25    324\nu    2015-08-24    302\ny    2015-08-28    311\nc    2015-08-30    320\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 69\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        296.0\n1        643.0\n2        823.0\n3        255.0\n4        897.0\n         ...  \n99995    921.0\n99996    179.0\n99997    491.0\n99998    675.0\n99999    307.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([296., 643., 823., 255., 897., ... , 389., 995., 984., 899., 363.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([296., 643., 823., ..., 491., 675., 307.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 87087, 87991, 90520])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9595, 13211, 16746, 20452, 24040, 27780, 31301, 35008,\n       38568, 42142, 45804, 49319, 52954, 56554, 60216, 63802, 67492,\n       71170, 74877, 78552, 82124, 85748, 89305, 92873, 96385])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([993, 958, 959, 951, 959, 955, 957, 940, 957, 949, 951, 955, 953,\n       947, 952, 958, 959, 958, 953, 957, 965, 959, 953, 964, 948, 952,\n       952])`, type: `ndarray`\n\nres, value: `array([958, 959, 951, 959, 955, 957, 940, 957, 949, 951, 955, 953, 947,\n       952, 958, 959, 958, 953, 957, 965, 959, 953, 964, 948, 952, 952])`, type: `ndarray`\n\nri, value: `Index(['m', 'a', 't', 'e', 'r', 'h', 'g', 'p', 'y', 'u', 'q', 'o', 'c', 'd',\n       's', 'x', 'n', 'z', 'j', 'f', 'v', 'i', 'l', 'w', 'b', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nm    958\na    959\nt    951\ne    959\nr    955\nh    957\ng    940\np    957\ny    949\nu    951\nq    955\no    953\nc    947\nd    952\ns    958\nx    959\nn    958\nz    953\nj    957\nf    965\nv    959\ni    953\nl    964\nw    948\nb    952\nk    952\nName: julie, dtype: int64`, type: `Series`\n\n## Case 70\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        296.0\n1        643.0\n2        823.0\n3        255.0\n4        897.0\n         ...  \n99995    921.0\n99996    179.0\n99997    491.0\n99998    675.0\n99999    307.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([296., 643., 823., 255., 897., ... , 389., 995., 984., 899., 363.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([296., 643., 823., ..., 491., 675., 307.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 995, 997, 998])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 50958, 21219, 36379])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8781,  9135,  9504, ... , 98295, 98624, 98964, 99303, 99674])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([1001,  260,  248,  261,  236, ... ,  241,  244,  252,  271,  254])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([260, 248, 261, 236, 271, ... , 271, 241, 244, 252, 271, 254])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('m', '2015-08-24') ... ('q', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nm    2015-08-24    260\na    2015-08-24    248\ne    2015-08-25    261\nr    2015-08-27    236\nh    2015-08-27    271\n                  ... \nu    2015-08-24    241\ny    2015-08-28    244\nc    2015-08-30    252\na    2015-08-25    271\nq    2015-08-27    254\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 71\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        296.0\n1        643.0\n2        823.0\n3        255.0\n4        897.0\n         ...  \n99995    921.0\n99996    179.0\n99997    491.0\n99998    675.0\n99999    307.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([296., 643., 823., 255., 897., ... , 389., 995., 984., 899., 363.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([296., 643., 823., ..., 491., 675., 307.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 87087, 87991, 90520])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9595, 13211, 16746, 20452, 24040, 27780, 31301, 35008,\n       38568, 42142, 45804, 49319, 52954, 56554, 60216, 63802, 67492,\n       71170, 74877, 78552, 82124, 85748, 89305, 92873, 96385])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([993, 958, 959, 951, 959, 955, 957, 940, 957, 949, 951, 955, 953,\n       947, 952, 958, 959, 958, 953, 957, 965, 959, 953, 964, 948, 952,\n       952])`, type: `ndarray`\n\nres, value: `array([958, 959, 951, 959, 955, 957, 940, 957, 949, 951, 955, 953, 947,\n       952, 958, 959, 958, 953, 957, 965, 959, 953, 964, 948, 952, 952])`, type: `ndarray`\n\nri, value: `Index(['m', 'a', 't', 'e', 'r', 'h', 'g', 'p', 'y', 'u', 'q', 'o', 'c', 'd',\n       's', 'x', 'n', 'z', 'j', 'f', 'v', 'i', 'l', 'w', 'b', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nm    958\na    959\nt    951\ne    959\nr    955\nh    957\ng    940\np    957\ny    949\nu    951\nq    955\no    953\nc    947\nd    952\ns    958\nx    959\nn    958\nz    953\nj    957\nf    965\nv    959\ni    953\nl    964\nw    948\nb    952\nk    952\nName: julie, dtype: int64`, type: `Series`\n\n## Case 72\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        296.0\n1        643.0\n2        823.0\n3        255.0\n4        897.0\n         ...  \n99995    921.0\n99996    179.0\n99997    491.0\n99998    675.0\n99999    307.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([296., 643., 823., 255., 897., ... , 389., 995., 984., 899., 363.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([296., 643., 823., ..., 491., 675., 307.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 995, 997, 998])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 50958, 21219, 36379])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8781,  9135,  9504, ... , 98295, 98624, 98964, 99303, 99674])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([1001,  260,  248,  261,  236, ... ,  241,  244,  252,  271,  254])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([260, 248, 261, 236, 271, ... , 271, 241, 244, 252, 271, 254])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('m', '2015-08-24') ... ('q', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nm    2015-08-24    260\na    2015-08-24    248\ne    2015-08-25    261\nr    2015-08-27    236\nh    2015-08-27    271\n                  ... \nu    2015-08-24    241\ny    2015-08-28    244\nc    2015-08-30    252\na    2015-08-25    271\nq    2015-08-27    254\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 73\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     1\n1     5\n2     6\n3     2\n4     7\n     ..\n95    3\n96    7\n97    6\n98    5\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  4,  4,\n        5,  5,  5,  5,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,\n        9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 12, 12, 13,\n       13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16,\n       17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 21, 21, 22, 22, 22, 22,\n       22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25])`, type: `ndarray`\n\n_, value: `array([1, 5, 6, 2, 7, 9, 8, 3, 4, 0])`, type: `ndarray`\n\nval, value: `array([1, 5, 6, 2, 7, 6, 6, 9, 8, 7, 1, 1, 1, 6, 9, 7, 2, 9, 2, 3, 1, 7,\n       9, 1, 4, 2, 7, 4, 1, 5, 9, 3, 6, 4, 0, 7, 4, 8, 7, 7, 4, 5, 8, 6,\n       4, 8, 9, 8, 5, 3, 9, 1, 3, 3, 7, 7, 4, 2, 6, 9, 4, 7, 6, 7, 5, 5,\n       6, 0, 3, 9, 8, 3, 9, 2, 3, 4, 7, 9, 1, 8, 9, 3, 3, 3, 4, 8, 0, 2,\n       7, 8, 7, 0, 1, 5, 6, 3, 7, 6, 5, 5])`, type: `ndarray`\n\ncodes, value: `array([0, 1, 3, 8, 9, 1, 7, 4, 6, 7, 9, 0, 9, 6, 6, 6, 8, 0, 0, 1, 2, 0,\n       7, 0, 4, 4, 4, 5, 5, 2, 5, 6, 7, 8, 0, 1, 1, 3, 4, 4, 7, 8, 1, 2,\n       4, 8, 5, 9, 1, 3, 4, 5, 7, 2, 4, 4, 0, 4, 5, 6, 6, 7, 0, 1, 2, 3,\n       3, 4, 1, 6, 2, 3, 8, 8, 2, 2, 4, 7, 3, 2, 8, 0, 5, 5, 7, 7, 8, 4,\n       4, 5, 6, 8, 2, 4, 5, 5, 5, 7, 7, 2])`, type: `ndarray`\n\nsorter, value: `array([11, 65, 57, 24, 86, 41, 82, 54, 79, 71, 67, 28, 34,  8, 37, 85, 44,\n       10, 23, 93, 62, 92, 19, 51,  4, 35, 90, 14, 69, 43, 80, 89, 49, 75,\n        0, 64, 99, 87, 38, 88, 52, 27,  1,  6, 26, 36, 50, 91, 48,  3, 55,\n       77, 74, 13, 39, 61, 12, 76, 59, 47, 70, 81, 78, 98, 66, 16, 73, 63,\n       29, 42,  2, 25, 56, 84, 32, 94, 15, 68, 18,  5, 40, 20, 22, 46, 83,\n       95, 33,  9, 21,  7, 45, 60, 58, 96, 17, 30, 72, 31, 53, 97])`, type: `ndarray`\n\nidx, value: `array([ 0,  5,  7, 11, 13, 17, 21, 23, 29, 34, 42, 46, 48, 50, 53, 56, 62,\n       68, 70, 74, 78, 79, 81, 87, 92, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 2, 4, 2, 2, 3, 2, 3, 5, 6, 4, 2, 2, 3, 2, 5, 5, 2, 3, 3, 1, 2,\n       4, 4, 4, 1])`, type: `ndarray`\n\nres, value: `array([5, 2, 4, 2, 2, 3, 2, 3, 5, 6, 4, 2, 2, 3, 2, 5, 5, 2, 3, 3, 1, 2,\n       4, 4, 4, 1])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    5\nb    2\nc    4\nd    2\ne    2\nf    3\ng    2\nh    3\ni    5\nj    6\nk    4\nl    2\nm    2\nn    3\no    2\np    5\nq    5\nr    2\ns    3\nt    3\nu    1\nv    2\nw    4\nx    4\ny    4\nz    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 74\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     1\n1     5\n2     6\n3     2\n4     7\n     ..\n95    3\n96    7\n97    6\n98    5\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 11, 11, 12,\n       13, 14, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 23, 23, 24, 25, 26,\n       27, 28, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n       43, 44, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 54, 55, 56, 56,\n       57, 58, 59, 60, 61, 62, 63, 63, 64, 64, 65, 66, 67, 68, 68, 69, 69,\n       70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 79, 80, 81, 82, 83])`, type: `ndarray`\n\n_, value: `array([1, 5, 6, 2, 7, 9, 8, 3, 4, 0])`, type: `ndarray`\n\nval, value: `array([1, 5, 6, 2, 7, 6, 6, 9, 8, 7, 1, 1, 1, 6, 9, 7, 2, 9, 2, 3, 1, 7,\n       9, 1, 4, 2, 7, 4, 1, 5, 9, 3, 6, 4, 0, 7, 4, 8, 7, 7, 4, 5, 8, 6,\n       4, 8, 9, 8, 5, 3, 9, 1, 3, 3, 7, 7, 4, 2, 6, 9, 4, 7, 6, 7, 5, 5,\n       6, 0, 3, 9, 8, 3, 9, 2, 3, 4, 7, 9, 1, 8, 9, 3, 3, 3, 4, 8, 0, 2,\n       7, 8, 7, 0, 1, 5, 6, 3, 7, 6, 5, 5])`, type: `ndarray`\n\ncodes, value: `array([8, 9, 0, 1, 3, 7, 1, 7, 9, 6, 4, 9, 0, 6, 6, 8, 6, 0, 2, 1, 0, 7,\n       0, 4, 0, 4, 5, 4, 5, 2, 5, 8, 7, 6, 4, 0, 1, 7, 1, 4, 8, 3, 2, 8,\n       1, 4, 5, 9, 1, 3, 5, 7, 4, 4, 4, 2, 4, 5, 6, 0, 7, 6, 4, 1, 3, 3,\n       0, 2, 6, 1, 8, 3, 2, 8, 4, 7, 2, 2, 3, 8, 2, 5, 7, 0, 8, 7, 5, 5,\n       8, 4, 6, 4, 5, 7, 7, 2, 4, 5, 5, 2])`, type: `ndarray`\n\nsorter, value: `array([24, 86, 11, 65, 57, 82, 41, 71, 67, 79, 54, 34, 28,  8, 37, 44, 85,\n       23, 62, 93, 10, 19, 92, 35, 51,  4, 14, 90, 69, 43, 80, 75, 49, 89,\n       88,  0, 64, 52, 99, 38, 27, 87,  6, 36,  1, 26, 50, 91, 48,  3, 77,\n       74, 55, 61, 39, 13, 76, 59, 70, 12, 81, 47, 63, 98, 16, 73, 78, 66,\n       42, 29, 56, 25,  2, 84, 15, 68, 32, 94, 18, 40,  5, 22, 83, 20, 33,\n       95, 46,  7, 60,  9, 45, 21, 17, 53, 31, 58, 96, 30, 72, 97])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  2,  4,  5,  6,  7,  9, 10, 11, 12, 13, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 26, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41,\n       42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59,\n       60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80,\n       81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    1\n     2015-08-25    2\n     2015-08-28    1\nb    2015-08-23    1\n                  ..\ny    2015-08-27    1\n     2015-08-28    1\n     2015-08-31    1\n     2015-09-01    1\nz    2015-08-27    1\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n## Case 75\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     1.0\n1     5.0\n2     6.0\n3     2.0\n4     7.0\n     ... \n95    3.0\n96    7.0\n97    6.0\n98    5.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  3,\n        3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  7,  7,  7,  7,  8,  8,\n        8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 11, 11, 12, 12,\n       13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16,\n       16, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 21, 21,\n       21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24])`, type: `ndarray`\n\n_, value: `array([1., 5., 6., 2., 7., 9., 3., 4., 0., 8.])`, type: `ndarray`\n\nval, value: `array([ 1.,  5.,  6.,  2.,  7., ... ,  6.,  3.,  7.,  6.,  5.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3,  4,  5,  6,  8, -1,  0,  3,  7,  1,  6,  4,  6,  8,  9, -1,\n        8, -1, -1,  7,  9,  0,  0,  1,  2,  0,  6,  0,  4,  4,  5,  2,  5,\n        6,  7,  9, -1, -1,  0,  1,  3,  4,  4, -1,  2,  7,  5,  8,  1,  3,\n        4,  5,  6,  2,  4,  4, -1,  0,  4,  5,  6,  9, -1,  0,  1,  3,  3,\n        4,  1,  9, -1,  2,  3,  7,  2,  2,  4,  6,  2,  7, -1, -1,  0,  5,\n        6,  7, -1, -1, -1,  4,  7,  2,  4,  5,  5,  5,  6,  6,  2])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 35, 69, 52, 86, 65, 11, 57, 24, 41, 82, 54, 71, 67, 79, 28,\n       34,  8, 85, 44, 37, 10, 23, 93, 62, 92, 19, 51,  4, 90, 14, 43, 80,\n       49, 75, 89, 27, 64,  0, 99, 87, 38, 88, 26,  6, 36, 50, 91, 48,  3,\n       55, 77, 74, 13, 39, 61, 47, 12, 76, 59, 81, 70, 66, 78, 98, 16, 73,\n       63, 29, 42, 84,  2, 25, 56, 32, 94, 15, 68,  5, 40, 46, 83, 20, 22,\n       95, 33,  7,  9, 45, 21, 60, 58, 96, 17, 30, 72, 31, 53, 97])`, type: `ndarray`\n\nidx, value: `array([ 6, 10, 12, 16, 18, 22, 26, 28, 32, 37, 44, 47, 49, 51, 54, 57, 63,\n       69, 71, 75, 79, 81, 87, 92, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 4, 2, 4, 2, 3, 3, 2, 3, 5, 5, 3, 2, 2, 3, 2, 6, 5, 2, 4, 3, 2,\n       5, 3, 4, 1])`, type: `ndarray`\n\nres, value: `array([4, 2, 4, 2, 3, 3, 2, 3, 5, 5, 3, 2, 2, 3, 2, 6, 5, 2, 4, 3, 2, 5,\n       3, 4, 1])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    4\nb    2\nc    4\nd    2\ne    3\nf    3\ng    2\nh    3\ni    5\nj    5\nk    3\nl    2\nm    2\nn    3\no    2\np    6\nq    5\nr    2\ns    4\nt    3\nv    2\nw    5\nx    3\ny    4\nz    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 76\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     1.0\n1     5.0\n2     6.0\n3     2.0\n4     7.0\n     ... \n95    3.0\n96    7.0\n97    6.0\n98    5.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  5,\n        6,  7,  8,  9, 10, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18, 19,\n       20, 21, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49,\n       50, 50, 51, 52, 53, 54, 55, 56, 57, 57, 58, 58, 59, 60, 60, 61, 61,\n       62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71, 72, 73, 74, 75])`, type: `ndarray`\n\n_, value: `array([1., 5., 6., 2., 7., 9., 3., 4., 0., 8.])`, type: `ndarray`\n\nval, value: `array([ 1.,  5.,  6.,  2.,  7., ... ,  6.,  3.,  7.,  6.,  5.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3,  3,  4,  5,  5,  6,  7,  8,  7, -1,  0,  3,  6,  1,  6,  8,\n        9,  4,  8, -1, -1,  7,  9, -1,  0,  2,  1,  0,  6,  0,  0,  4,  5,\n        4,  2,  5,  7,  6,  9,  4, -1,  0,  1,  4, -1,  3,  2,  7, -1,  5,\n        8,  1,  6,  4,  4,  4,  2,  4,  5,  9,  0,  6, -1,  4,  1,  3,  3,\n       -1,  0,  9,  1,  7,  3,  2, -1,  4,  6,  2,  2,  2, -1,  5,  0,  7,\n        6, -1, -1,  7, -1, -1,  4,  5,  6,  6,  2,  4,  5,  5,  2])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 35, 69, 77, 52, 40, 86, 24, 65, 11, 57, 82, 41, 71, 67,\n       79, 54, 34, 28,  8, 44, 37, 85, 23, 62, 93, 10, 19, 92, 51,  4, 14,\n       90, 43, 80, 75, 49, 89, 88, 64,  0, 99, 38, 27, 87,  6, 36, 26, 50,\n       91, 48, 74, 55, 61, 39, 13, 76, 59, 70, 12, 81, 47, 63, 98, 16, 73,\n       66, 78, 42, 29, 56, 25,  2, 84, 15, 68, 32, 94,  5, 83, 22, 20, 33,\n       95, 46,  7, 60,  9, 45, 21, 17, 53, 31, 58, 96, 30, 72, 97])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29,\n       30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68,\n       70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 83, 85, 86, 87, 88, 89, 90,\n       91, 92, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([7, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(76,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-25    2\n     2015-08-28    1\nb    2015-08-23    1\n     2015-08-31    1\n                  ..\ny    2015-08-27    1\n     2015-08-28    1\n     2015-08-31    1\n     2015-09-01    1\nz    2015-08-27    1\nName: julie, Length: 76, dtype: int64`, type: `Series`\n\n## Case 77\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     1.0\n1     5.0\n2     6.0\n3     2.0\n4     7.0\n     ... \n95    3.0\n96    7.0\n97    6.0\n98    5.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  3,\n        3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  7,  7,  7,  7,  8,  8,\n        8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 11, 11, 12, 12,\n       13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16,\n       16, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 21, 21,\n       21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24])`, type: `ndarray`\n\n_, value: `array([1., 5., 6., 2., 7., 9., 3., 4., 0., 8.])`, type: `ndarray`\n\nval, value: `array([ 1.,  5.,  6.,  2.,  7., ... ,  6.,  3.,  7.,  6.,  5.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3,  4,  5,  6,  8, -1,  0,  3,  7,  1,  6,  4,  6,  8,  9, -1,\n        8, -1, -1,  7,  9,  0,  0,  1,  2,  0,  6,  0,  4,  4,  5,  2,  5,\n        6,  7,  9, -1, -1,  0,  1,  3,  4,  4, -1,  2,  7,  5,  8,  1,  3,\n        4,  5,  6,  2,  4,  4, -1,  0,  4,  5,  6,  9, -1,  0,  1,  3,  3,\n        4,  1,  9, -1,  2,  3,  7,  2,  2,  4,  6,  2,  7, -1, -1,  0,  5,\n        6,  7, -1, -1, -1,  4,  7,  2,  4,  5,  5,  5,  6,  6,  2])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 35, 69, 52, 86, 65, 11, 57, 24, 41, 82, 54, 71, 67, 79, 28,\n       34,  8, 85, 44, 37, 10, 23, 93, 62, 92, 19, 51,  4, 90, 14, 43, 80,\n       49, 75, 89, 27, 64,  0, 99, 87, 38, 88, 26,  6, 36, 50, 91, 48,  3,\n       55, 77, 74, 13, 39, 61, 47, 12, 76, 59, 81, 70, 66, 78, 98, 16, 73,\n       63, 29, 42, 84,  2, 25, 56, 32, 94, 15, 68,  5, 40, 46, 83, 20, 22,\n       95, 33,  7,  9, 45, 21, 60, 58, 96, 17, 30, 72, 31, 53, 97])`, type: `ndarray`\n\nidx, value: `array([ 6, 10, 12, 16, 18, 22, 26, 28, 32, 37, 44, 47, 49, 51, 54, 57, 63,\n       69, 71, 75, 79, 81, 87, 92, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 4, 2, 4, 2, 3, 3, 2, 3, 5, 5, 3, 2, 2, 3, 2, 6, 5, 2, 4, 3, 2,\n       5, 3, 4, 1])`, type: `ndarray`\n\nres, value: `array([4, 2, 4, 2, 3, 3, 2, 3, 5, 5, 3, 2, 2, 3, 2, 6, 5, 2, 4, 3, 2, 5,\n       3, 4, 1])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    4\nb    2\nc    4\nd    2\ne    3\nf    3\ng    2\nh    3\ni    5\nj    5\nk    3\nl    2\nm    2\nn    3\no    2\np    6\nq    5\nr    2\ns    4\nt    3\nv    2\nw    5\nx    3\ny    4\nz    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 78\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     1.0\n1     5.0\n2     6.0\n3     2.0\n4     7.0\n     ... \n95    3.0\n96    7.0\n97    6.0\n98    5.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  5,\n        6,  7,  8,  9, 10, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18, 19,\n       20, 21, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49,\n       50, 50, 51, 52, 53, 54, 55, 56, 57, 57, 58, 58, 59, 60, 60, 61, 61,\n       62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71, 72, 73, 74, 75])`, type: `ndarray`\n\n_, value: `array([1., 5., 6., 2., 7., 9., 3., 4., 0., 8.])`, type: `ndarray`\n\nval, value: `array([ 1.,  5.,  6.,  2.,  7., ... ,  6.,  3.,  7.,  6.,  5.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3,  3,  4,  5,  5,  6,  7,  8,  7, -1,  0,  3,  6,  1,  6,  8,\n        9,  4,  8, -1, -1,  7,  9, -1,  0,  2,  1,  0,  6,  0,  0,  4,  5,\n        4,  2,  5,  7,  6,  9,  4, -1,  0,  1,  4, -1,  3,  2,  7, -1,  5,\n        8,  1,  6,  4,  4,  4,  2,  4,  5,  9,  0,  6, -1,  4,  1,  3,  3,\n       -1,  0,  9,  1,  7,  3,  2, -1,  4,  6,  2,  2,  2, -1,  5,  0,  7,\n        6, -1, -1,  7, -1, -1,  4,  5,  6,  6,  2,  4,  5,  5,  2])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 35, 69, 77, 52, 40, 86, 24, 65, 11, 57, 82, 41, 71, 67,\n       79, 54, 34, 28,  8, 44, 37, 85, 23, 62, 93, 10, 19, 92, 51,  4, 14,\n       90, 43, 80, 75, 49, 89, 88, 64,  0, 99, 38, 27, 87,  6, 36, 26, 50,\n       91, 48, 74, 55, 61, 39, 13, 76, 59, 70, 12, 81, 47, 63, 98, 16, 73,\n       66, 78, 42, 29, 56, 25,  2, 84, 15, 68, 32, 94,  5, 83, 22, 20, 33,\n       95, 46,  7, 60,  9, 45, 21, 17, 53, 31, 58, 96, 30, 72, 97])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29,\n       30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68,\n       70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 83, 85, 86, 87, 88, 89, 90,\n       91, 92, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([7, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(76,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-25    2\n     2015-08-28    1\nb    2015-08-23    1\n     2015-08-31    1\n                  ..\ny    2015-08-27    1\n     2015-08-28    1\n     2015-08-31    1\n     2015-09-01    1\nz    2015-08-27    1\nName: julie, Length: 76, dtype: int64`, type: `Series`\n\n## Case 79\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      3\n1      0\n2      1\n3      3\n4      2\n      ..\n995    3\n996    2\n997    9\n998    5\n999    9\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([3, 0, 1, 2, 9, 8, 4, 5, 7, 6])`, type: `ndarray`\n\nval, value: `array([3, 0, 1, 3, 2, 9, 1, 8, 4, ... ,\n       0, 0, 8, 3, 5, 3, 2, 9, 5, 9])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, 0, 1, 1, 1, 1, 1, ... ,\n       5, 5, 6, 6, 7, 7, 8, 8, 8, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([378, 487, 522, 732, 131, ... , 647, 758,  37, 153, 288, 108])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  51,  93, 129, 174, 205, 244, 287, 327, 371, 414, 456, 486,\n       516, 560, 595, 615, 643, 683, 720, 758, 786, 828, 872, 917, 963])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 1, 0, 0, 0, 0, ... ,\n       0, 0, 1, 0, 1, 0, 1, 0, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10,  9, 10,  9, 10,  8, 10,\n       10, 10, 10,  9, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10,  9, 10,  9, 10,  8, 10,\n       10, 10, 10,  9, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng     9\nh    10\ni    10\nj     9\nk    10\nl     9\nm    10\nn     9\no    10\np     8\nq    10\nr    10\ns    10\nt    10\nu     9\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 80\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      3\n1      0\n2      1\n3      3\n4      2\n      ..\n995    3\n996    2\n997    9\n998    5\n999    9\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 257, 257, 257, 258, 258, 258])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([3, 0, 1, 2, 9, 8, 4, 5, 7, 6])`, type: `ndarray`\n\nval, value: `array([3, 0, 1, 3, 2, 9, 1, 8, 4, ... ,\n       0, 0, 8, 3, 5, 3, 2, 9, 5, 9])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([1, 1, 4, 4, 5, 6, 1, 2, 2, ... ,\n       3, 0, 2, 7, 2, 6, 6, 1, 2, 3])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([564, 813, 323, 469, 806, ... ,  46,  53, 183, 801, 168, 763])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   6,  16,  22,  27, ... , 982, 988, 989, 991, 994, 997])`, shape: `(259,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 0, 1, 1, 1, 1, 0, ... ,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([4, 7, 4, 5, 5, 2, 2, 5, 6, ... , 3, 4, 4, 5, 5, 1, 2, 3, 2, 3])`, shape: `(259,)`, type: `ndarray`\n\nres, value: `array([4, 7, 4, 5, 5, 2, 2, 5, 6, ... , 3, 4, 4, 5, 5, 1, 2, 3, 2, 3])`, shape: `(259,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=259)`, shape: `(259,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    7\n     2015-08-25    4\n     2015-08-26    5\n     2015-08-27    5\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    2\n     2015-09-01    3\nName: julie, Length: 259, dtype: int64`, type: `Series`\n\n## Case 81\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      3.0\n1      0.0\n2      1.0\n3      3.0\n4      2.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    9.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([3., 0., 1., 2., 9., 5., 8., 7., 6., 4.])`, type: `ndarray`\n\nval, value: `array([ 3.,  0.,  1.,  3.,  2., ... ,  5., nan, nan, nan,  5.,  9.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6,  6,  7,  7,  7,  8,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... ,  37, 153, 288, 108,  53, 183])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59, 108, 147, 182, 226, 256, 292, 334, 373, 416, 453, 491, 517,\n       543, 585, 619, 638, 664, 701, 737, 772, 798, 836, 879, 920, 965])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 0, 1, 0, 0, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 10, 10, 11, 11, 10, 11, 10, 11, 10, 11,  8,\n       11, 10, 11, 10, 10, 11, 11, 11, 10, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 10, 10, 11, 11, 10, 11, 10, 11, 10, 11,  8, 11,\n       10, 11, 10, 10, 11, 11, 11, 10, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    10\ng    10\nh    11\ni    11\nj    10\nk    11\nl    10\nm    11\nn    10\no    11\np     8\nq    11\nr    10\ns    11\nt    10\nu    10\nv    11\nw    11\nx    11\ny    10\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 82\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      3.0\n1      0.0\n2      1.0\n3      3.0\n4      2.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    9.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 255, 255, 255, 256, 256, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([3., 0., 1., 2., 9., 5., 8., 7., 6., 4.])`, type: `ndarray`\n\nval, value: `array([ 3.,  0.,  1.,  3.,  2., ... ,  5., nan, nan, nan,  5.,  9.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  2,  5, -1,  9,  9,  1,  2,  3])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... ,  46,  53, 183, 801, 168, 763])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  90, 100, 106, 111, ... , 983, 988, 989, 991, 994, 997])`, shape: `(257,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11,  4,  7,  5,  5,  4,  2, ... ,  4,  1,  2,\n        3,  2,  3])`, shape: `(258,)`, type: `ndarray`\n\nres, value: `array([4, 7, 5, 5, 4, 2, 2, 4, 5, ... , 4, 4, 3, 5, 4, 1, 2, 3, 2, 3])`, shape: `(257,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    7\n     2015-08-25    5\n     2015-08-26    5\n     2015-08-27    4\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    2\n     2015-09-01    3\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n## Case 83\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      3.0\n1      0.0\n2      1.0\n3      3.0\n4      2.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    9.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([3., 0., 1., 2., 9., 5., 8., 7., 6., 4.])`, type: `ndarray`\n\nval, value: `array([ 3.,  0.,  1.,  3.,  2., ... ,  5., nan, nan, nan,  5.,  9.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6,  6,  7,  7,  7,  8,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... ,  37, 153, 288, 108,  53, 183])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59, 108, 147, 182, 226, 256, 292, 334, 373, 416, 453, 491, 517,\n       543, 585, 619, 638, 664, 701, 737, 772, 798, 836, 879, 920, 965])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 0, 1, 0, 0, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 10, 10, 11, 11, 10, 11, 10, 11, 10, 11,  8,\n       11, 10, 11, 10, 10, 11, 11, 11, 10, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 10, 10, 11, 11, 10, 11, 10, 11, 10, 11,  8, 11,\n       10, 11, 10, 10, 11, 11, 11, 10, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    10\ng    10\nh    11\ni    11\nj    10\nk    11\nl    10\nm    11\nn    10\no    11\np     8\nq    11\nr    10\ns    11\nt    10\nu    10\nv    11\nw    11\nx    11\ny    10\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 84\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      3.0\n1      0.0\n2      1.0\n3      3.0\n4      2.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    9.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 255, 255, 255, 256, 256, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([3., 0., 1., 2., 9., 5., 8., 7., 6., 4.])`, type: `ndarray`\n\nval, value: `array([ 3.,  0.,  1.,  3.,  2., ... ,  5., nan, nan, nan,  5.,  9.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  2,  5, -1,  9,  9,  1,  2,  3])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... ,  46,  53, 183, 801, 168, 763])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  90, 100, 106, 111, ... , 983, 988, 989, 991, 994, 997])`, shape: `(257,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11,  4,  7,  5,  5,  4,  2, ... ,  4,  1,  2,\n        3,  2,  3])`, shape: `(258,)`, type: `ndarray`\n\nres, value: `array([4, 7, 5, 5, 4, 2, 2, 4, 5, ... , 4, 4, 3, 5, 4, 1, 2, 3, 2, 3])`, shape: `(257,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    7\n     2015-08-25    5\n     2015-08-26    5\n     2015-08-27    4\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    2\n     2015-09-01    3\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n## Case 85\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0\n1       1\n2       8\n3       9\n4       0\n       ..\n9995    6\n9996    6\n9997    7\n9998    3\n9999    6\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([0, 1, 8, 9, 5, 3, 7, 6, 4, 2])`, type: `ndarray`\n\nval, value: `array([0, 1, 8, ..., 7, 3, 6])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([ 869, 1082, 1121, ..., 9535, 9809, 9954])`, type: `ndarray`\n\nidx, value: `array([   0,  374,  736, 1171, 1550, 1936, 2320, 2714, 3094, 3503, 3847,\n       4265, 4657, 5032, 5417, 5749, 6140, 6542, 6942, 7318, 7706, 8079,\n       8469, 8836, 9218, 9615])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 86\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0\n1       1\n2       8\n3       9\n4       0\n       ..\n9995    6\n9996    6\n9997    7\n9998    3\n9999    6\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([0, 1, 8, 9, 5, 3, 7, 6, 4, 2])`, type: `ndarray`\n\nval, value: `array([0, 1, 8, ..., 7, 3, 6])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([1121, 1963, 2081, ..., 1864, 4139, 4805])`, type: `ndarray`\n\nidx, value: `array([   0,   33,   67,  106,  148, ... , 9807, 9847, 9887, 9926, 9961])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10,  9, 10, ... , 10,\n       10, 10, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10,  9, 10, ... , 10,\n       10, 10, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 87\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1       1.0\n2       8.0\n3       9.0\n4       0.0\n       ... \n9995    6.0\n9996    6.0\n9997    7.0\n9998    3.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([0., 1., 8., 9., 7., 3., 6., 4., 5., 2.])`, type: `ndarray`\n\nval, value: `array([0., 1., 8., ..., 7., 3., 6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9535, 9809, 9954])`, type: `ndarray`\n\nidx, value: `array([ 589,  932, 1272, 1683, 2043, 2408, 2769, 3138, 3495, 3881, 4201,\n       4593, 4970, 5324, 5680, 5992, 6361, 6745, 7123, 7481, 7844, 8196,\n       8562, 8906, 9261, 9634])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 88\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1       1.0\n2       8.0\n3       9.0\n4       0.0\n       ... \n9995    6.0\n9996    6.0\n9997    7.0\n9998    3.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([0., 1., 8., 9., 7., 3., 6., 4., 5., 2.])`, type: `ndarray`\n\nval, value: `array([0., 1., 8., ..., 7., 3., 6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 1864, 4139, 4805])`, type: `ndarray`\n\nidx, value: `array([ 844,  874,  907,  938,  976, ... , 9825, 9862, 9896, 9934, 9965])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 10, 11, 11, 10, ... ,\n       10,  9, 11, 11, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([11, 11, 10, 11, 11, 10, 11, ... , 10,\n        9, 11, 11, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    10\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28     9\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 89\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1       1.0\n2       8.0\n3       9.0\n4       0.0\n       ... \n9995    6.0\n9996    6.0\n9997    7.0\n9998    3.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([0., 1., 8., 9., 7., 3., 6., 4., 5., 2.])`, type: `ndarray`\n\nval, value: `array([0., 1., 8., ..., 7., 3., 6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9535, 9809, 9954])`, type: `ndarray`\n\nidx, value: `array([ 589,  932, 1272, 1683, 2043, 2408, 2769, 3138, 3495, 3881, 4201,\n       4593, 4970, 5324, 5680, 5992, 6361, 6745, 7123, 7481, 7844, 8196,\n       8562, 8906, 9261, 9634])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 90\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1       1.0\n2       8.0\n3       9.0\n4       0.0\n       ... \n9995    6.0\n9996    6.0\n9997    7.0\n9998    3.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([0., 1., 8., 9., 7., 3., 6., 4., 5., 2.])`, type: `ndarray`\n\nval, value: `array([0., 1., 8., ..., 7., 3., 6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 1864, 4139, 4805])`, type: `ndarray`\n\nidx, value: `array([ 844,  874,  907,  938,  976, ... , 9825, 9862, 9896, 9934, 9965])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 10, 11, 11, 10, ... ,\n       10,  9, 11, 11, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([11, 11, 10, 11, 11, 10, 11, ... , 10,\n        9, 11, 11, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    10\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28     9\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 91\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7\n1        1\n2        0\n3        0\n4        3\n        ..\n99995    4\n99996    1\n99997    6\n99998    7\n99999    9\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([7, 1, 0, 3, 2, 4, 5, 8, 9, 6])`, type: `ndarray`\n\nval, value: `array([7, 1, 0, ..., 6, 7, 9])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([   46,   340,   545, ..., 99220, 99570, 99844])`, type: `ndarray`\n\nidx, value: `array([    0,  3793,  7476, 11315, 15197, 19007, 22903, 26690, 30481,\n       34342, 38291, 42128, 45973, 49862, 53697, 57663, 61449, 65315,\n       69106, 72974, 76844, 80739, 84610, 88501, 92388, 96197])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 92\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7\n1        1\n2        0\n3        0\n4        3\n        ..\n99995    4\n99996    1\n99997    6\n99998    7\n99999    9\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([7, 1, 0, 3, 2, 4, 5, 8, 9, 6])`, type: `ndarray`\n\nval, value: `array([7, 1, 0, ..., 6, 7, 9])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([ 5375,  6531,  7157, ..., 94902, 96931, 99844])`, type: `ndarray`\n\nidx, value: `array([    0,   389,   752,  1143, ... , 98106, 98500, 98888, 99245, 99619])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 93\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7.0\n1        1.0\n2        0.0\n3        0.0\n4        3.0\n        ... \n99995    4.0\n99996    1.0\n99997    6.0\n99998    7.0\n99999    9.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([7., 1., 0., 3., 2., 8., 9., 4., 5., 6.])`, type: `ndarray`\n\nval, value: `array([7., 1., 0., ..., 6., 7., 9.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 98943, 99220, 99844])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9445, 12932, 16539, 20219, 23789, 27444, 30982, 34547,\n       38191, 41892, 45497, 49109, 52773, 56360, 60101, 63688, 67315,\n       70865, 74507, 78159, 81842, 85484, 89151, 92848, 96413])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 94\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7.0\n1        1.0\n2        0.0\n3        0.0\n4        3.0\n        ... \n99995    4.0\n99996    1.0\n99997    6.0\n99998    7.0\n99999    9.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([7., 1., 0., 3., 2., 8., 9., 4., 5., 6.])`, type: `ndarray`\n\nval, value: `array([7., 1., 0., ..., 6., 7., 9.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 94902, 96931, 99844])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8779,  9122,  9465, ... , 98254, 98623, 98968, 99299, 99648])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, ... ,\n       11, 11, 11, 11, 11, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, ... , 11,\n       11, 11, 11, 11, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 95\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7.0\n1        1.0\n2        0.0\n3        0.0\n4        3.0\n        ... \n99995    4.0\n99996    1.0\n99997    6.0\n99998    7.0\n99999    9.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([7., 1., 0., 3., 2., 8., 9., 4., 5., 6.])`, type: `ndarray`\n\nval, value: `array([7., 1., 0., ..., 6., 7., 9.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 98943, 99220, 99844])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9445, 12932, 16539, 20219, 23789, 27444, 30982, 34547,\n       38191, 41892, 45497, 49109, 52773, 56360, 60101, 63688, 67315,\n       70865, 74507, 78159, 81842, 85484, 89151, 92848, 96413])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Case 96\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7.0\n1        1.0\n2        0.0\n3        0.0\n4        3.0\n        ... \n99995    4.0\n99996    1.0\n99997    6.0\n99998    7.0\n99999    9.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([7., 1., 0., 3., 2., 8., 9., 4., 5., 6.])`, type: `ndarray`\n\nval, value: `array([7., 1., 0., ..., 6., 7., 9.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 94902, 96931, 99844])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8779,  9122,  9465, ... , 98254, 98623, 98968, 99299, 99648])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, ... ,\n       11, 11, 11, 11, 11, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, ... , 11,\n       11, 11, 11, 11, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 97\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     17\n1     61\n2     66\n3     75\n4     79\n      ..\n95    80\n96    69\n97     0\n98    71\n99    24\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  3,  4,  4,\n        5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,\n        9,  9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13,\n       13, 14, 14, 15, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18,\n       18, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22,\n       22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([17, 61, 66, 75, 79, 14, 71, 54, 10, 32, 39, 24,  9, 82, 91, 90, 55,\n       84, 67, 16, 57, 47, 51, 31, 35, 40, 63, 89,  5, 30, 25, 44, 18, 20,\n       97, 93,  8, 11, 69, 95, 86, 33, 87, 37, 80, 19,  6, 27, 73, 92, 88,\n       48,  2, 42, 85, 26, 62, 94, 65, 83,  4,  0])`, type: `ndarray`\n\nval, value: `array([17, 61, 66, 75, 79, 14, 71, 54, 10, 32, 39, 24, 66,  9, 82, 91, 90,\n       55, 84, 67, 16, 57, 47, 51, 31, 35, 40, 47, 63, 89,  5, 30, 25, 75,\n       44, 61, 55, 90, 63, 35, 18, 31, 55, 84, 30, 20, 97, 93,  8, 11, 30,\n       69, 95, 95, 35, 55, 16,  9, 86, 25, 33, 87, 37,  8, 80, 67, 19, 31,\n        6, 27, 73,  6, 92, 24, 88, 24, 48,  2, 42, 85, 39, 95, 31, 80, 75,\n       39, 26, 62, 14, 94, 79, 65, 83,  4,  4, 80, 69,  0, 71, 24])`, type: `ndarray`\n\ncodes, value: `array([ 1,  4, 12, 23, 24, 30, 58, 10, 42,  2, 11, 13, 16, 26, 22,  0, 45,\n        5, 15, 28, 36, 17, 27, 61,  9, 18, 24, 39, 44,  4, 29, 31, 55, 17,\n       41, 46, 11, 16, 21, 16, 19, 33, 46, 47, 49,  3, 18, 37, 40, 59,  6,\n       34,  8, 21,  1, 23, 38, 12, 23, 14, 20, 25, 29, 48, 60,  3, 29, 39,\n       53,  7, 39, 44,  6, 19, 23, 24, 26, 50, 54, 32, 35, 57,  3,  5, 11,\n       30, 60, 16, 36, 43, 52, 56, 11, 15, 44,  2, 10, 10, 38, 51])`, type: `ndarray`\n\nsorter, value: `array([ 1, 90, 13, 41, 54, 32, 91, 10, 61, 12, 11, 14, 36, 28, 23,  0, 66,\n       88, 37, 30, 63, 43, 29, 97,  9, 19, 39, 81, 95,  4, 50, 34, 86, 18,\n       60, 71, 99, 55, 27, 17, 20, 45, 68, 69, 72, 33, 65, 49, 58, 92, 98,\n       46,  8, 22, 35, 24, 51, 57, 82, 15, 21, 26, 44, 70, 93,  3, 31, 52,\n       78,  7, 53, 64,  6, 56, 67, 25, 38, 74, 79, 40, 47, 89, 84,  5, 75,\n       59, 94, 42, 48, 62, 77, 87, 73, 16, 83,  2, 80, 85, 96, 76])`, type: `ndarray`\n\nidx, value: `array([ 0,  7,  9, 14, 15, 17, 21, 24, 29, 33, 36, 39, 45, 50, 52, 54, 57,\n       59, 65, 69, 72, 79, 82, 87, 92, 95])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([7, 2, 5, 1, 2, 4, 3, 5, 4, 3, 3, 6, 5, 2, 2, 3, 2, 6, 4, 3, 7, 3,\n       5, 5, 3, 4])`, type: `ndarray`\n\nres, value: `array([7, 2, 5, 1, 2, 4, 3, 5, 4, 3, 3, 6, 5, 2, 2, 3, 2, 6, 4, 3, 7, 3,\n       5, 5, 3, 4])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    7\nb    2\nc    5\nd    1\ne    2\nf    4\ng    3\nh    5\ni    4\nj    3\nk    3\nl    6\nm    5\nn    2\no    2\np    3\nq    2\nr    6\ns    4\nt    3\nu    7\nv    3\nw    5\nx    5\ny    3\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n## Case 98\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     17\n1     61\n2     66\n3     75\n4     79\n      ..\n95    80\n96    69\n97     0\n98    71\n99    24\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  1,  2,  3,  3,  4,  5,  6,  7,  8,  8,  9, 10, 11, 12, 13,\n       14, 15, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 25, 26, 27,\n       28, 28, 29, 30, 31, 32, 33, 33, 34, 35, 36, 37, 38, 38, 39, 40, 41,\n       42, 43, 44, 45, 45, 46, 47, 48, 49, 50, 50, 51, 52, 52, 53, 54, 55,\n       56, 57, 58, 59, 60, 61, 62, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70,\n       71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 80, 81, 82, 83])`, type: `ndarray`\n\n_, value: `array([17, 61, 66, 75, 79, 14, 71, 54, 10, 32, 39, 24,  9, 82, 91, 90, 55,\n       84, 67, 16, 57, 47, 51, 31, 35, 40, 63, 89,  5, 30, 25, 44, 18, 20,\n       97, 93,  8, 11, 69, 95, 86, 33, 87, 37, 80, 19,  6, 27, 73, 92, 88,\n       48,  2, 42, 85, 26, 62, 94, 65, 83,  4,  0])`, type: `ndarray`\n\nval, value: `array([17, 61, 66, 75, 79, 14, 71, 54, 10, 32, 39, 24, 66,  9, 82, 91, 90,\n       55, 84, 67, 16, 57, 47, 51, 31, 35, 40, 47, 63, 89,  5, 30, 25, 75,\n       44, 61, 55, 90, 63, 35, 18, 31, 55, 84, 30, 20, 97, 93,  8, 11, 30,\n       69, 95, 95, 35, 55, 16,  9, 86, 25, 33, 87, 37,  8, 80, 67, 19, 31,\n        6, 27, 73,  6, 92, 24, 88, 24, 48,  2, 42, 85, 39, 95, 31, 80, 75,\n       39, 26, 62, 14, 94, 79, 65, 83,  4,  4, 80, 69,  0, 71, 24])`, type: `ndarray`\n\ncodes, value: `array([ 1, 30, 12, 24,  4, 23, 58, 10, 42, 13, 11, 26,  2, 16, 22,  0, 45,\n       15, 28, 36,  5, 61, 27, 17, 39, 24,  9, 18, 44, 31, 29, 55,  4, 46,\n       17, 41, 16, 21, 11, 46, 16, 49, 47, 19, 33, 18,  3, 37, 59, 40,  6,\n       34,  8, 21,  1, 23, 38, 12, 23, 14, 29, 60, 25, 20, 48,  3, 39, 29,\n       53, 44, 39,  7, 50,  6, 23, 54, 19, 26, 24, 35, 32, 57, 30, 11,  3,\n        5, 60, 56, 16, 43, 52, 36, 44, 11, 15, 10, 10, 51, 38,  2])`, type: `ndarray`\n\nsorter, value: `array([ 1, 32, 13, 54, 90, 41, 91, 10, 61, 14, 11, 28, 12, 36, 23,  0, 66,\n       37, 30, 63, 88, 97, 29, 43, 81, 39,  9, 19, 95, 34, 50, 86,  4, 71,\n       18, 60, 55, 27, 99, 68, 17, 72, 69, 20, 45, 65, 33, 49, 92, 58, 98,\n       46,  8, 22, 35, 24, 51, 57, 82, 15, 44, 93, 26, 21, 70,  3, 52, 31,\n       78, 64, 53,  7, 74,  6, 67, 79, 56, 38, 25, 47, 40, 89, 59, 75, 84,\n        5, 94, 87, 42, 62, 77, 48, 83, 73, 16, 80, 85, 76, 96,  2])`, type: `ndarray`\n\nidx, value: `array([ 0,  2,  3,  4,  6,  7,  8,  9, 10, 12, 13, 14, 15, 16, 17, 18, 20,\n       21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40,\n       42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60,\n       62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81,\n       82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    2\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-29    2\n     2015-08-31    1\n                  ..\ny    2015-08-28    1\nz    2015-08-24    1\n     2015-08-28    1\n     2015-08-31    1\n     2015-09-01    1\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n## Case 99\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     17.0\n1     61.0\n2     66.0\n3     75.0\n4     79.0\n      ... \n95    80.0\n96    69.0\n97     0.0\n98    71.0\n99    24.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,\n        2,  2,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7,  7,\n        8,  8,  8,  9,  9, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12,\n       12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18,\n       18, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22,\n       22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([17., 61., 66., 75., 79., 14., 71., 39., 24.,  9., 82., 91., 90.,\n       55., 84., 67., 16., 57., 47., 51., 31., 35., 89.,  5., 30., 25.,\n       44., 63., 18.,  8., 11., 69., 95., 86., 33., 87., 37.,  6., 27.,\n       73., 92., 88., 48.,  2., 42., 85., 26., 62., 94., 65., 83.,  4.,\n       80.,  0.])`, type: `ndarray`\n\nval, value: `array([17., 61., 66., 75., 79., ... ,  4., 80., 69.,  0., 71., 24.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  1, 14, 32, 38, 46,  4,  9, 20, 21, 25, 49,  7, 35, -1,  2,  8,\n       10, 13, 19, -1,  0,  5, 12, 23, 29, 14, 22, 53, -1, 15, 21, 32, 52,\n        4, 24, 26, 34, 37, -1,  8, 13, -1, 13, 16, 37, 40, -1,  3, 30, 33,\n       50, -1,  6, -1, 18, 20, 31,  9, 20, -1, 11, 17, 24, 39, 51,  3, 24,\n       44, -1, -1, 32,  6, 16, 20, 21, 27, 41, 45, -1, 28, 48, -1,  5,  8,\n       25, 51, 13, 29, 36, 43, 47, -1,  8, 12, -1,  2,  7, 31, 42])`, type: `ndarray`\n\nsorter, value: `array([ 1, 35, 18, 52, 69, 86, 90, 13, 41, 54, 32, 91, 10, 61, 28, 12, 11,\n       14, 36, 23, 66,  0, 88, 37, 30, 63, 43, 29, 97,  9, 19, 39, 81, 95,\n        4, 50, 34, 60, 71, 27, 99, 55, 45, 17, 20, 68, 72, 65, 33, 49, 58,\n       92, 46, 98,  8, 22, 24, 51, 57, 82, 26, 15, 21, 44, 70, 93,  3, 31,\n       78,  7, 64, 53,  6, 56, 67, 25, 38, 74, 79, 47, 40, 89, 84,  5, 75,\n       59, 94, 42, 48, 62, 77, 87, 83, 73, 16, 85,  2, 80, 96, 76])`, type: `ndarray`\n\nidx, value: `array([ 6, 12, 14, 19, 20, 22, 26, 29, 34, 37, 39, 42, 47, 52, 54, 56, 58,\n       60, 66, 69, 72, 79, 82, 87, 92, 95])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 6, 2, 5, 1, 2, 4, 3, 5, 3, 2, 3, 5, 5, 2, 2, 2, 2, 6, 3, 2, 7,\n       3, 5, 5, 3, 5])`, type: `ndarray`\n\nres, value: `array([6, 2, 5, 1, 2, 4, 3, 5, 3, 2, 3, 5, 5, 2, 2, 2, 2, 6, 3, 2, 7, 3,\n       5, 5, 3, 5])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    6\nb    2\nc    5\nd    1\ne    2\nf    4\ng    3\nh    5\ni    3\nj    2\nk    3\nl    5\nm    5\nn    2\no    2\np    2\nq    2\nr    6\ns    3\nt    2\nu    7\nv    3\nw    5\nx    5\ny    3\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n## Case 100\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     17.0\n1     61.0\n2     66.0\n3     75.0\n4     79.0\n      ... \n95    80.0\n96    69.0\n97     0.0\n98    71.0\n99    24.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  3,  4,  5,  6,\n        7,  8,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21,\n       22, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35,\n       36, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49, 50,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 58, 59, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 75, 76, 77, 78])`, type: `ndarray`\n\n_, value: `array([17., 61., 66., 75., 79., 14., 71., 39., 24.,  9., 82., 91., 90.,\n       55., 84., 67., 16., 57., 47., 51., 31., 35., 89.,  5., 30., 25.,\n       44., 63., 18.,  8., 11., 69., 95., 86., 33., 87., 37.,  6., 27.,\n       73., 92., 88., 48.,  2., 42., 85., 26., 62., 94., 65., 83.,  4.,\n       80.,  0.])`, type: `ndarray`\n\nval, value: `array([17., 61., 66., 75., 79., ... ,  4., 80., 69.,  0., 71., 24.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  1,  3, 14, 28, 32, 38, 43, 46, 25,  9, 21,  4, 20, 49,  7, 35,\n       10, -1,  8,  2, 13, 19,  0, -1, 12, 23, 29,  5, 53, 22, 14, 32, 21,\n       -1, 15, 52, 26, 24,  4, 37, 34, 13, -1,  8, 37, 13, 40, 16, -1, -1,\n        3, 30, 50, 33,  6, -1, -1, 18, 20, 31,  9, 20, 11, 24, 51, -1, 17,\n       39, 24, 44, -1, 32, -1, 41,  6, 20, 45, 16, 27, 21, -1, 48, 25,  8,\n       -1,  5, 51, 47, 13, 36, 29, -1,  8, 12, -1,  7, 42, 31,  2])`, type: `ndarray`\n\nsorter, value: `array([ 1, 35,  3, 18, 40, 52, 69, 77, 86, 32, 13, 54, 90, 41, 91, 10, 61,\n       14, 28, 11, 12, 36, 23,  0, 66, 37, 30, 63, 88, 97, 29, 43, 81, 39,\n        9, 19, 95, 34, 50,  4, 71, 60, 55, 27, 99, 68, 17, 72, 20, 45, 65,\n       33, 49, 92, 58, 98, 46,  8, 22, 24, 51, 57, 82, 15, 44, 93, 26, 21,\n       70, 31, 78, 64, 53,  7, 74,  6, 67, 79, 56, 38, 25, 47, 89, 59, 75,\n       84,  5, 94, 87, 42, 62, 48, 83, 73, 16, 85, 80, 76, 96,  2])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28,\n       29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48,\n       49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67,\n       69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87,\n       88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([8, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-29    2\n     2015-08-31    1\n                  ..\ny    2015-08-28    1\nz    2015-08-24    2\n     2015-08-28    1\n     2015-08-31    1\n     2015-09-01    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n## Case 101\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     17.0\n1     61.0\n2     66.0\n3     75.0\n4     79.0\n      ... \n95    80.0\n96    69.0\n97     0.0\n98    71.0\n99    24.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,\n        2,  2,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7,  7,\n        8,  8,  8,  9,  9, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12,\n       12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18,\n       18, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22,\n       22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([17., 61., 66., 75., 79., 14., 71., 39., 24.,  9., 82., 91., 90.,\n       55., 84., 67., 16., 57., 47., 51., 31., 35., 89.,  5., 30., 25.,\n       44., 63., 18.,  8., 11., 69., 95., 86., 33., 87., 37.,  6., 27.,\n       73., 92., 88., 48.,  2., 42., 85., 26., 62., 94., 65., 83.,  4.,\n       80.,  0.])`, type: `ndarray`\n\nval, value: `array([17., 61., 66., 75., 79., ... ,  4., 80., 69.,  0., 71., 24.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  1, 14, 32, 38, 46,  4,  9, 20, 21, 25, 49,  7, 35, -1,  2,  8,\n       10, 13, 19, -1,  0,  5, 12, 23, 29, 14, 22, 53, -1, 15, 21, 32, 52,\n        4, 24, 26, 34, 37, -1,  8, 13, -1, 13, 16, 37, 40, -1,  3, 30, 33,\n       50, -1,  6, -1, 18, 20, 31,  9, 20, -1, 11, 17, 24, 39, 51,  3, 24,\n       44, -1, -1, 32,  6, 16, 20, 21, 27, 41, 45, -1, 28, 48, -1,  5,  8,\n       25, 51, 13, 29, 36, 43, 47, -1,  8, 12, -1,  2,  7, 31, 42])`, type: `ndarray`\n\nsorter, value: `array([ 1, 35, 18, 52, 69, 86, 90, 13, 41, 54, 32, 91, 10, 61, 28, 12, 11,\n       14, 36, 23, 66,  0, 88, 37, 30, 63, 43, 29, 97,  9, 19, 39, 81, 95,\n        4, 50, 34, 60, 71, 27, 99, 55, 45, 17, 20, 68, 72, 65, 33, 49, 58,\n       92, 46, 98,  8, 22, 24, 51, 57, 82, 26, 15, 21, 44, 70, 93,  3, 31,\n       78,  7, 64, 53,  6, 56, 67, 25, 38, 74, 79, 47, 40, 89, 84,  5, 75,\n       59, 94, 42, 48, 62, 77, 87, 83, 73, 16, 85,  2, 80, 96, 76])`, type: `ndarray`\n\nidx, value: `array([ 6, 12, 14, 19, 20, 22, 26, 29, 34, 37, 39, 42, 47, 52, 54, 56, 58,\n       60, 66, 69, 72, 79, 82, 87, 92, 95])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 6, 2, 5, 1, 2, 4, 3, 5, 3, 2, 3, 5, 5, 2, 2, 2, 2, 6, 3, 2, 7,\n       3, 5, 5, 3, 5])`, type: `ndarray`\n\nres, value: `array([6, 2, 5, 1, 2, 4, 3, 5, 3, 2, 3, 5, 5, 2, 2, 2, 2, 6, 3, 2, 7, 3,\n       5, 5, 3, 5])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    6\nb    2\nc    5\nd    1\ne    2\nf    4\ng    3\nh    5\ni    3\nj    2\nk    3\nl    5\nm    5\nn    2\no    2\np    2\nq    2\nr    6\ns    3\nt    2\nu    7\nv    3\nw    5\nx    5\ny    3\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n## Case 102\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     17.0\n1     61.0\n2     66.0\n3     75.0\n4     79.0\n      ... \n95    80.0\n96    69.0\n97     0.0\n98    71.0\n99    24.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  3,  4,  5,  6,\n        7,  8,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21,\n       22, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35,\n       36, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49, 50,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 58, 59, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 75, 76, 77, 78])`, type: `ndarray`\n\n_, value: `array([17., 61., 66., 75., 79., 14., 71., 39., 24.,  9., 82., 91., 90.,\n       55., 84., 67., 16., 57., 47., 51., 31., 35., 89.,  5., 30., 25.,\n       44., 63., 18.,  8., 11., 69., 95., 86., 33., 87., 37.,  6., 27.,\n       73., 92., 88., 48.,  2., 42., 85., 26., 62., 94., 65., 83.,  4.,\n       80.,  0.])`, type: `ndarray`\n\nval, value: `array([17., 61., 66., 75., 79., ... ,  4., 80., 69.,  0., 71., 24.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  1,  3, 14, 28, 32, 38, 43, 46, 25,  9, 21,  4, 20, 49,  7, 35,\n       10, -1,  8,  2, 13, 19,  0, -1, 12, 23, 29,  5, 53, 22, 14, 32, 21,\n       -1, 15, 52, 26, 24,  4, 37, 34, 13, -1,  8, 37, 13, 40, 16, -1, -1,\n        3, 30, 50, 33,  6, -1, -1, 18, 20, 31,  9, 20, 11, 24, 51, -1, 17,\n       39, 24, 44, -1, 32, -1, 41,  6, 20, 45, 16, 27, 21, -1, 48, 25,  8,\n       -1,  5, 51, 47, 13, 36, 29, -1,  8, 12, -1,  7, 42, 31,  2])`, type: `ndarray`\n\nsorter, value: `array([ 1, 35,  3, 18, 40, 52, 69, 77, 86, 32, 13, 54, 90, 41, 91, 10, 61,\n       14, 28, 11, 12, 36, 23,  0, 66, 37, 30, 63, 88, 97, 29, 43, 81, 39,\n        9, 19, 95, 34, 50,  4, 71, 60, 55, 27, 99, 68, 17, 72, 20, 45, 65,\n       33, 49, 92, 58, 98, 46,  8, 22, 24, 51, 57, 82, 15, 44, 93, 26, 21,\n       70, 31, 78, 64, 53,  7, 74,  6, 67, 79, 56, 38, 25, 47, 89, 59, 75,\n       84,  5, 94, 87, 42, 62, 48, 83, 73, 16, 85, 80, 76, 96,  2])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28,\n       29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48,\n       49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67,\n       69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87,\n       88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([8, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-29    2\n     2015-08-31    1\n                  ..\ny    2015-08-28    1\nz    2015-08-24    2\n     2015-08-28    1\n     2015-08-31    1\n     2015-09-01    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n## Case 103\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0\n1      26\n2      34\n3      81\n4      55\n       ..\n995    50\n996    75\n997    14\n998    37\n999    95\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 0, 26, 34, 81, 55, 99, 67, 84, 16, 86, 62, 43, 45, 47, 14,  2, 93,\n       29, 15, 32, 31, 85, 22, 38, 83, 82,  9, 63,  3, 36,  5, 13, 80, 42,\n       92, 72, 10, 27, 97, 33, 73, 44, 24,  6, 56, 88,  8, 79, 75, 65, 89,\n       68, 35, 54, 50, 28, 74, 53, 78, 21, 96,  1, 94,  7, 59, 30, 58, 61,\n       11, 41, 49, 25, 66, 23, 70, 98, 37, 40, 57, 12, 48, 90, 39, 91, 51,\n       71, 17, 69, 46, 19, 64, 76, 20, 95,  4, 60, 18, 87, 77, 52])`, type: `ndarray`\n\nval, value: `array([ 0, 26, 34, 81, 55, 99, 67, ... , 57, 49, 41, 50, 75, 14, 37, 95])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  7,  8,  8, 10, 12, 15, ... , 79, 82, 90, 91, 92, 94, 96, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([494, 270, 657, 906, 197, ... , 611, 337, 829, 884, 853, 778])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  38,  73, 119, 155, 184, 224, 259, 297, 338, 372, 414, 453,\n       502, 530, 580, 620, 674, 704, 736, 785, 825, 852, 894, 927, 968])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 1, 1, 0, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([33, 27, 35, 33, 26, 34, 32, 29, 29, 29, 34, 29, 37, 27, 37, 31, 40,\n       23, 29, 39, 36, 22, 33, 29, 31, 30])`, type: `ndarray`\n\nres, value: `array([33, 27, 35, 33, 26, 34, 32, 29, 29, 29, 34, 29, 37, 27, 37, 31, 40,\n       23, 29, 39, 36, 22, 33, 29, 31, 30])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    33\nb    27\nc    35\nd    33\ne    26\nf    34\ng    32\nh    29\ni    29\nj    29\nk    34\nl    29\nm    37\nn    27\no    37\np    31\nq    40\nr    23\ns    29\nt    39\nu    36\nv    22\nw    33\nx    29\ny    31\nz    30\nName: julie, dtype: int64`, type: `Series`\n\n## Case 104\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0\n1      26\n2      34\n3      81\n4      55\n       ..\n995    50\n996    75\n997    14\n998    37\n999    95\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 251, 252, 252, 252, 252, 252])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 0, 26, 34, 81, 55, 99, 67, 84, 16, 86, 62, 43, 45, 47, 14,  2, 93,\n       29, 15, 32, 31, 85, 22, 38, 83, 82,  9, 63,  3, 36,  5, 13, 80, 42,\n       92, 72, 10, 27, 97, 33, 73, 44, 24,  6, 56, 88,  8, 79, 75, 65, 89,\n       68, 35, 54, 50, 28, 74, 53, 78, 21, 96,  1, 94,  7, 59, 30, 58, 61,\n       11, 41, 49, 25, 66, 23, 70, 98, 37, 40, 57, 12, 48, 90, 39, 91, 51,\n       71, 17, 69, 46, 19, 64, 76, 20, 95,  4, 60, 18, 87, 77, 52])`, type: `ndarray`\n\nval, value: `array([ 0, 26, 34, 81, 55, 99, 67, ... , 57, 49, 41, 50, 75, 14, 37, 95])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ 8, 15, 17, 37, 70, 29, 72, ... ,  6, 90, 96,  5, 11, 22, 49, 91])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([657, 555, 718,  67, 993, ... , 853, 898, 451,  93, 485, 337])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   5,   7,  11,  13, ... ,\n       979, 983, 987, 989, 991, 995])`, shape: `(253,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([5, 2, 4, 2, 5, 2, 4, 7, 2, ... , 3, 4, 1, 6, 4, 4, 2, 2, 4, 5])`, shape: `(253,)`, type: `ndarray`\n\nres, value: `array([5, 2, 4, 2, 5, 2, 4, 7, 2, ... , 3, 4, 1, 6, 4, 4, 2, 2, 4, 5])`, shape: `(253,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=253)`, shape: `(253,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    5\n     2015-08-24    2\n     2015-08-25    4\n     2015-08-26    2\n     2015-08-27    5\n                  ..\nz    2015-08-28    4\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    5\nName: julie, Length: 253, dtype: int64`, type: `Series`\n\n## Case 105\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1      26.0\n2      34.0\n3      81.0\n4      55.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    37.0\n999    95.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 0., 26., 34., 81., 55., ... , 16., 87., 77., 49., 91., 52.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([ 0., 26., 34., 81., 55., ... , 41., nan, nan, nan, 37., 95.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 70, 75, 82, 83, 84, 91, 93, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 611, 337, 829, 853, 884, 778])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  95, 127, 171, 204, 233, 268, 301, 338, 375, 406, 445, 480,\n       527, 554, 602, 641, 693, 721, 752, 798, 835, 860, 900, 928, 968])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([40, 31, 24, 33, 20, 23, 26, 24, 26, 25, 21, 30, 25, 32, 26, 33, 26,\n       37, 23, 27, 35, 27, 19, 26, 21, 28, 27])`, type: `ndarray`\n\nres, value: `array([31, 24, 33, 20, 23, 26, 24, 26, 25, 21, 30, 25, 32, 26, 33, 26, 37,\n       23, 27, 35, 27, 19, 26, 21, 28, 27])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    31\nb    24\nc    33\nd    20\ne    23\nf    26\ng    24\nh    26\ni    25\nj    21\nk    30\nl    25\nm    32\nn    26\no    33\np    26\nq    37\nr    23\ns    27\nt    35\nu    27\nv    19\nw    26\nx    21\ny    28\nz    27\nName: julie, dtype: int64`, type: `Series`\n\n## Case 106\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1      26.0\n2      34.0\n3      81.0\n4      55.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    37.0\n999    95.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 250, 251, 251, 251, 251, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 0., 26., 34., 81., 55., ... , 16., 87., 77., 49., 91., 52.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([ 0., 26., 34., 81., 55., ... , 41., nan, nan, nan, 37., 95.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6, 82, 91,  5,  8, 19, 44, 83])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 853, 898, 451,  93, 485, 337])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  89,  91,  94,  96, ... ,\n       983, 987, 989, 991, 995])`, shape: `(252,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([55,  5,  2,  3,  2,  5,  2, ... ,  1,  6,  2,  4,  2,  2,  4,  5])`, shape: `(253,)`, type: `ndarray`\n\nres, value: `array([5, 2, 3, 2, 5, 2, 3, 7, 2, ... ,\n       3, 4, 1, 6, 2, 4, 2, 2, 4, 5])`, shape: `(252,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    5\n     2015-08-24    2\n     2015-08-25    3\n     2015-08-26    2\n     2015-08-27    5\n                  ..\nz    2015-08-28    4\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    5\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n## Case 107\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1      26.0\n2      34.0\n3      81.0\n4      55.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    37.0\n999    95.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 0., 26., 34., 81., 55., ... , 16., 87., 77., 49., 91., 52.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([ 0., 26., 34., 81., 55., ... , 41., nan, nan, nan, 37., 95.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 70, 75, 82, 83, 84, 91, 93, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 611, 337, 829, 853, 884, 778])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  95, 127, 171, 204, 233, 268, 301, 338, 375, 406, 445, 480,\n       527, 554, 602, 641, 693, 721, 752, 798, 835, 860, 900, 928, 968])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([40, 31, 24, 33, 20, 23, 26, 24, 26, 25, 21, 30, 25, 32, 26, 33, 26,\n       37, 23, 27, 35, 27, 19, 26, 21, 28, 27])`, type: `ndarray`\n\nres, value: `array([31, 24, 33, 20, 23, 26, 24, 26, 25, 21, 30, 25, 32, 26, 33, 26, 37,\n       23, 27, 35, 27, 19, 26, 21, 28, 27])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    31\nb    24\nc    33\nd    20\ne    23\nf    26\ng    24\nh    26\ni    25\nj    21\nk    30\nl    25\nm    32\nn    26\no    33\np    26\nq    37\nr    23\ns    27\nt    35\nu    27\nv    19\nw    26\nx    21\ny    28\nz    27\nName: julie, dtype: int64`, type: `Series`\n\n## Case 108\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1      26.0\n2      34.0\n3      81.0\n4      55.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    37.0\n999    95.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 250, 251, 251, 251, 251, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 0., 26., 34., 81., 55., ... , 16., 87., 77., 49., 91., 52.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([ 0., 26., 34., 81., 55., ... , 41., nan, nan, nan, 37., 95.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6, 82, 91,  5,  8, 19, 44, 83])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 853, 898, 451,  93, 485, 337])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  89,  91,  94,  96, ... ,\n       983, 987, 989, 991, 995])`, shape: `(252,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([55,  5,  2,  3,  2,  5,  2, ... ,  1,  6,  2,  4,  2,  2,  4,  5])`, shape: `(253,)`, type: `ndarray`\n\nres, value: `array([5, 2, 3, 2, 5, 2, 3, 7, 2, ... ,\n       3, 4, 1, 6, 2, 4, 2, 2, 4, 5])`, shape: `(252,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    5\n     2015-08-24    2\n     2015-08-25    3\n     2015-08-26    2\n     2015-08-27    5\n                  ..\nz    2015-08-28    4\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    5\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n## Case 109\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       39\n1       37\n2       35\n3       64\n4        7\n        ..\n9995    76\n9996    65\n9997    91\n9998    17\n9999    82\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([39, 37, 35, 64,  7, 31, 60, 48, 74, 22, 17, 85, 21, 78, 19, 44, 32,\n       73, 18, 52, 50, 23, 99, 28, 15, 98, 54, 24, 56, 77, 75, 63, 82,  4,\n       61, 51,  9, 96, 34, 43, 79, 45, 65, 91, 87, 76, 13, 84, 12, 94, 67,\n       92, 53, 59, 95, 80, 42, 10, 72, 11, 40, 30, 58, 69, 36, 86, 27, 47,\n       14, 26, 38, 41, 49,  1, 55, 57, 62, 90, 71, 97, 29, 16,  2, 25, 93,\n       81, 33,  3, 46,  0, 66, 20, 89,  6, 68, 70, 88,  8, 83,  5])`, type: `ndarray`\n\nval, value: `array([39, 37, 35, ..., 91, 17, 82])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([1719, 4549, 3170, ..., 3130, 6833, 7940])`, type: `ndarray`\n\nidx, value: `array([   0,  340,  713, 1102, 1467, 1844, 2245, 2659, 3026, 3433, 3830,\n       4203, 4625, 4996, 5407, 5773, 6147, 6509, 6853, 7264, 7651, 8031,\n       8402, 8815, 9194, 9588])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 98,  98, 100,  98,  98,  98,  98,  96,  98,  99, 100, 100, 100,\n        96,  95,  98,  97,  97,  99,  99,  97,  99, 100,  99, 100,  98])`, type: `ndarray`\n\nres, value: `array([ 98,  98, 100,  98,  98,  98,  98,  96,  98,  99, 100, 100, 100,\n        96,  95,  98,  97,  97,  99,  99,  97,  99, 100,  99, 100,  98])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na     98\nb     98\nc    100\nd     98\ne     98\nf     98\ng     98\nh     96\ni     98\nj     99\nk    100\nl    100\nm    100\nn     96\no     95\np     98\nq     97\nr     97\ns     99\nt     99\nu     97\nv     99\nw    100\nx     99\ny    100\nz     98\nName: julie, dtype: int64`, type: `Series`\n\n## Case 110\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       39\n1       37\n2       35\n3       64\n4        7\n        ..\n9995    76\n9996    65\n9997    91\n9998    17\n9999    82\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([39, 37, 35, 64,  7, 31, 60, 48, 74, 22, 17, 85, 21, 78, 19, 44, 32,\n       73, 18, 52, 50, 23, 99, 28, 15, 98, 54, 24, 56, 77, 75, 63, 82,  4,\n       61, 51,  9, 96, 34, 43, 79, 45, 65, 91, 87, 76, 13, 84, 12, 94, 67,\n       92, 53, 59, 95, 80, 42, 10, 72, 11, 40, 30, 58, 69, 36, 86, 27, 47,\n       14, 26, 38, 41, 49,  1, 55, 57, 62, 90, 71, 97, 29, 16,  2, 25, 93,\n       81, 33,  3, 46,  0, 66, 20, 89,  6, 68, 70, 88,  8, 83,  5])`, type: `ndarray`\n\nval, value: `array([39, 37, 35, ..., 91, 17, 82])`, type: `ndarray`\n\ncodes, value: `array([ 0,  4,  4, ..., 91, 97, 98])`, type: `ndarray`\n\nsorter, value: `array([1719, 2107, 6890, ..., 3101, 7726, 8460])`, type: `ndarray`\n\nidx, value: `array([   0,   41,   65,  102,  141, ... , 9778, 9819, 9868, 9915, 9946])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([34, 23, 31, 32, 30, 22, 30, ... , 33,\n       33, 38, 40, 27, 46])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([34, 23, 31, 32, 30, 22, 30, ... , 33,\n       33, 38, 40, 27, 46])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    34\n     2015-08-24    23\n     2015-08-25    31\n     2015-08-26    32\n     2015-08-27    30\n                   ..\nz    2015-08-28    33\n     2015-08-29    38\n     2015-08-30    40\n     2015-08-31    27\n     2015-09-01    46\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 111\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       39.0\n1       37.0\n2       35.0\n3       64.0\n4        7.0\n        ... \n9995    76.0\n9996    65.0\n9997    91.0\n9998    17.0\n9999    82.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([39., 37., 35., 64.,  7., ... , 88., 46., 83.,  8.,  3.,  5.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([39., 37., 35., ..., 91., 17., 82.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 7420, 3130, 6833])`, type: `ndarray`\n\nidx, value: `array([ 589,  910, 1263, 1626, 1970, 2326, 2707, 3101, 3448, 3826, 4202,\n       4549, 4947, 5300, 5691, 6032, 6386, 6729, 7052, 7434, 7794, 8150,\n       8502, 8886, 9243, 9614])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  97,  95,  99,  97,  96,  94,  97,  93,  97,  96, 100, 100,\n       100,  94,  95,  99,  96,  95,  95,  99,  95,  94,  99,  97, 100,\n        96])`, type: `ndarray`\n\nres, value: `array([ 97,  95,  99,  97,  96,  94,  97,  93,  97,  96, 100, 100, 100,\n        94,  95,  99,  96,  95,  95,  99,  95,  94,  99,  97, 100,  96])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na     97\nb     95\nc     99\nd     97\ne     96\nf     94\ng     97\nh     93\ni     97\nj     96\nk    100\nl    100\nm    100\nn     94\no     95\np     99\nq     96\nr     95\ns     95\nt     99\nu     95\nv     94\nw     99\nx     97\ny    100\nz     96\nName: julie, dtype: int64`, type: `Series`\n\n## Case 112\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       39.0\n1       37.0\n2       35.0\n3       64.0\n4        7.0\n        ... \n9995    76.0\n9996    65.0\n9997    91.0\n9998    17.0\n9999    82.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([39., 37., 35., 64.,  7., ... , 88., 46., 83.,  8.,  3.,  5.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([39., 37., 35., ..., 91., 17., 82.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 97, 98, 98])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 7726, 3698, 3944])`, type: `ndarray`\n\nidx, value: `array([ 844,  882,  905,  940,  972, ... , 9800, 9836, 9879, 9922, 9951])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  26,  20,  25,  23, ... ,  23,  27,  32,  24,\n        38])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([26, 20, 25, 23, 26, 21, 28, ... , 26,\n       23, 27, 32, 24, 38])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    26\n     2015-08-24    20\n     2015-08-25    25\n     2015-08-26    23\n     2015-08-27    26\n                   ..\nz    2015-08-28    23\n     2015-08-29    27\n     2015-08-30    32\n     2015-08-31    24\n     2015-09-01    38\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 113\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       39.0\n1       37.0\n2       35.0\n3       64.0\n4        7.0\n        ... \n9995    76.0\n9996    65.0\n9997    91.0\n9998    17.0\n9999    82.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([39., 37., 35., 64.,  7., ... , 88., 46., 83.,  8.,  3.,  5.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([39., 37., 35., ..., 91., 17., 82.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 7420, 3130, 6833])`, type: `ndarray`\n\nidx, value: `array([ 589,  910, 1263, 1626, 1970, 2326, 2707, 3101, 3448, 3826, 4202,\n       4549, 4947, 5300, 5691, 6032, 6386, 6729, 7052, 7434, 7794, 8150,\n       8502, 8886, 9243, 9614])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  97,  95,  99,  97,  96,  94,  97,  93,  97,  96, 100, 100,\n       100,  94,  95,  99,  96,  95,  95,  99,  95,  94,  99,  97, 100,\n        96])`, type: `ndarray`\n\nres, value: `array([ 97,  95,  99,  97,  96,  94,  97,  93,  97,  96, 100, 100, 100,\n        94,  95,  99,  96,  95,  95,  99,  95,  94,  99,  97, 100,  96])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na     97\nb     95\nc     99\nd     97\ne     96\nf     94\ng     97\nh     93\ni     97\nj     96\nk    100\nl    100\nm    100\nn     94\no     95\np     99\nq     96\nr     95\ns     95\nt     99\nu     95\nv     94\nw     99\nx     97\ny    100\nz     96\nName: julie, dtype: int64`, type: `Series`\n\n## Case 114\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       39.0\n1       37.0\n2       35.0\n3       64.0\n4        7.0\n        ... \n9995    76.0\n9996    65.0\n9997    91.0\n9998    17.0\n9999    82.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([39., 37., 35., 64.,  7., ... , 88., 46., 83.,  8.,  3.,  5.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([39., 37., 35., ..., 91., 17., 82.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 97, 98, 98])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 7726, 3698, 3944])`, type: `ndarray`\n\nidx, value: `array([ 844,  882,  905,  940,  972, ... , 9800, 9836, 9879, 9922, 9951])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  26,  20,  25,  23, ... ,  23,  27,  32,  24,\n        38])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([26, 20, 25, 23, 26, 21, 28, ... , 26,\n       23, 27, 32, 24, 38])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    26\n     2015-08-24    20\n     2015-08-25    25\n     2015-08-26    23\n     2015-08-27    26\n                   ..\nz    2015-08-28    23\n     2015-08-29    27\n     2015-08-30    32\n     2015-08-31    24\n     2015-09-01    38\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 115\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        73\n1        56\n2        15\n3        82\n4        69\n         ..\n99995    31\n99996    98\n99997    88\n99998    52\n99999    72\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([73, 56, 15, 82, 69, 41, 97, 27,  7, 38, 39, 93, 42, 46, 21, 88, 87,\n       40, 64, 34, 94, 14, 19, 20, 91, 83, 54, 92, 84, 67, 30, 13, 52, 12,\n       44,  2,  0, 25, 98, 18, 17, 66, 78, 65, 74, 48, 68, 76,  5, 10, 62,\n       43,  8, 47, 16,  4, 80, 50, 75, 61, 70, 22, 29, 55,  9, 57, 72, 86,\n       33, 45, 95, 96, 11, 35, 59, 90, 49,  1, 51, 99, 79, 63, 53, 28, 60,\n       32, 23, 58, 37, 81,  6, 36, 26,  3, 24, 89, 71, 31, 77, 85])`, type: `ndarray`\n\nval, value: `array([73, 56, 15, ..., 88, 52, 72])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  202,  3007,  4050, ..., 87810, 90899, 99368])`, type: `ndarray`\n\nidx, value: `array([    0,  3893,  7679, 11493, 15324, 19202, 23124, 27039, 30832,\n       34691, 38499, 42361, 46237, 50207, 53963, 57879, 61727, 65495,\n       69404, 73173, 77064, 80877, 84655, 88514, 92378, 96273])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n## Case 116\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        73\n1        56\n2        15\n3        82\n4        69\n         ..\n99995    31\n99996    98\n99997    88\n99998    52\n99999    72\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([73, 56, 15, 82, 69, 41, 97, 27,  7, 38, 39, 93, 42, 46, 21, 88, 87,\n       40, 64, 34, 94, 14, 19, 20, 91, 83, 54, 92, 84, 67, 30, 13, 52, 12,\n       44,  2,  0, 25, 98, 18, 17, 66, 78, 65, 74, 48, 68, 76,  5, 10, 62,\n       43,  8, 47, 16,  4, 80, 50, 75, 61, 70, 22, 29, 55,  9, 57, 72, 86,\n       33, 45, 95, 96, 11, 35, 59, 90, 49,  1, 51, 99, 79, 63, 53, 28, 60,\n       32, 23, 58, 37, 81,  6, 36, 26,  3, 24, 89, 71, 31, 77, 85])`, type: `ndarray`\n\nval, value: `array([73, 56, 15, ..., 88, 52, 72])`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([13060,  8751, 30221, ..., 30249, 34301, 37536])`, type: `ndarray`\n\nidx, value: `array([    0,   373,   770,  1184, ... , 98174, 98523, 98922, 99291, 99667])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 97,  97, 100,  97,  99, ... ,  97,  98,  98,  99, 100,  97])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([ 97,  97, 100,  97,  99, ... ,  97,  98,  98,  99, 100,  97])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23     97\n     2015-08-24     97\n     2015-08-25    100\n     2015-08-26     97\n     2015-08-27     99\n                  ... \nz    2015-08-28     98\n     2015-08-29     98\n     2015-08-30     99\n     2015-08-31    100\n     2015-09-01     97\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 117\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        73.0\n1        56.0\n2        15.0\n3        82.0\n4        69.0\n         ... \n99995    31.0\n99996    98.0\n99997    88.0\n99998    52.0\n99999    72.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([73., 56., 15., 82., 69., ... , 24., 71., 31., 77., 85., 27.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([73., 56., 15., ..., 88., 52., 72.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 91775, 92564, 97832])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9545, 13113, 16712, 20293, 23952, 27636, 31346, 34904,\n       38527, 42122, 45763, 49426, 53140, 56666, 60328, 63944, 67505,\n       71186, 74709, 78388, 81980, 85551, 89181, 92819, 96482])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64`, type: `Series`\n\n## Case 118\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        73.0\n1        56.0\n2        15.0\n3        82.0\n4        69.0\n         ... \n99995    31.0\n99996    98.0\n99997    88.0\n99998    52.0\n99999    72.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([73., 56., 15., 82., 69., ... , 24., 71., 31., 77., 85., 27.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([73., 56., 15., ..., 88., 52., 72.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 57134, 57799, 68016])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8770,  9140,  9515, ... , 98313, 98636, 99008, 99343, 99699])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  96,  94,  98,  95, ... ,  93,  99,  98,  99,\n        93])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 96,  94,  98,  95,  97, ... ,  96,  93,  99,  98,  99,  93])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    96\n     2015-08-24    94\n     2015-08-25    98\n     2015-08-26    95\n     2015-08-27    97\n                   ..\nz    2015-08-28    93\n     2015-08-29    99\n     2015-08-30    98\n     2015-08-31    99\n     2015-09-01    93\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 119\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        73.0\n1        56.0\n2        15.0\n3        82.0\n4        69.0\n         ... \n99995    31.0\n99996    98.0\n99997    88.0\n99998    52.0\n99999    72.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([73., 56., 15., 82., 69., ... , 24., 71., 31., 77., 85., 27.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([73., 56., 15., ..., 88., 52., 72.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 91775, 92564, 97832])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9545, 13113, 16712, 20293, 23952, 27636, 31346, 34904,\n       38527, 42122, 45763, 49426, 53140, 56666, 60328, 63944, 67505,\n       71186, 74709, 78388, 81980, 85551, 89181, 92819, 96482])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64`, type: `Series`\n\n## Case 120\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        73.0\n1        56.0\n2        15.0\n3        82.0\n4        69.0\n         ... \n99995    31.0\n99996    98.0\n99997    88.0\n99998    52.0\n99999    72.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([73., 56., 15., 82., 69., ... , 24., 71., 31., 77., 85., 27.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([73., 56., 15., ..., 88., 52., 72.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 57134, 57799, 68016])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8770,  9140,  9515, ... , 98313, 98636, 99008, 99343, 99699])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  96,  94,  98,  95, ... ,  93,  99,  98,  99,\n        93])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 96,  94,  98,  95,  97, ... ,  96,  93,  99,  98,  99,  93])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    96\n     2015-08-24    94\n     2015-08-25    98\n     2015-08-26    95\n     2015-08-27    97\n                   ..\nz    2015-08-28    93\n     2015-08-29    99\n     2015-08-30    98\n     2015-08-31    99\n     2015-09-01    93\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 121\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     407\n1     417\n2     701\n3     719\n4     585\n     ... \n95    811\n96    812\n97    695\n98    433\n99    904\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,\n        4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,\n        8,  8,  9,  9, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13,\n       13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 16, 16,\n       17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21,\n       21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([407, 417, 701, 719, 585, ... , 811,\n       812, 695, 433, 904])`, shape: `(95,)`, type: `ndarray`\n\nval, value: `array([407, 417, 701, 719, 585, ... , 122, 811, 812, 695, 433, 904])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([34, 46, 51, 73, 73, 74,  0, 13, 18, 49, 65, 91,  3, 52, 54, 62, 30,\n       35, 71, 92,  5, 72, 83, 90, 28, 56, 70, 77, 27, 29, 41, 48, 22, 43,\n       67, 80, 11, 76,  2,  4, 20, 75, 85, 37, 87,  0, 15, 23, 63, 81,  0,\n        1,  8,  9, 12, 45, 47, 50, 25, 38, 49, 10, 94, 26, 44, 64, 69, 93,\n       31, 89, 53, 57, 86, 14, 17, 36, 39, 42, 58, 16, 68, 84, 88,  7, 55,\n       79, 11, 19, 21, 33, 78, 24, 32, 40, 60, 66, 82,  6, 59, 61])`, type: `ndarray`\n\nsorter, value: `array([34, 46, 51, 75, 92, 76, 81, 13, 18, 70, 66, 96,  3, 52, 55, 63, 30,\n       35, 73, 97,  5, 74, 87, 95, 28, 57, 72, 79, 27, 29, 41, 48, 22, 43,\n       68, 83, 53, 78,  2,  4, 20, 77, 89, 37, 91, 86, 15, 23, 64, 84,  0,\n        1,  8,  9, 12, 45, 47, 50, 25, 38, 49, 10, 99, 26, 44, 65, 71, 98,\n       31, 94, 54, 58, 90, 14, 17, 36, 39, 42, 59, 16, 69, 88, 93,  7, 56,\n       82, 11, 19, 21, 33, 80, 24, 32, 40, 61, 67, 85,  6, 60, 62])`, type: `ndarray`\n\nidx, value: `array([ 0,  4,  6, 12, 16, 20, 24, 28, 32, 36, 38, 43, 45, 50, 58, 61, 63,\n       68, 70, 73, 79, 83, 86, 91, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([4, 2, 6, 4, 4, 4, 4, 4, 4, 2, 5, 2, 5, 8, 3, 2, 5, 2, 3, 6, 4, 3,\n       5, 6, 3])`, type: `ndarray`\n\nres, value: `array([4, 2, 6, 4, 4, 4, 4, 4, 4, 2, 5, 2, 5, 8, 3, 2, 5, 2, 3, 6, 4, 3,\n       5, 6, 3])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    4\nb    2\nc    6\nd    4\nf    4\ng    4\nh    4\ni    4\nj    4\nk    2\nl    5\nm    2\nn    5\no    8\np    3\nq    2\nr    5\ns    2\nt    3\nu    6\nv    4\nw    3\nx    5\ny    6\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n## Case 122\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     407\n1     417\n2     701\n3     719\n4     585\n     ... \n95    811\n96    812\n97    695\n98    433\n99    904\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9,  9, 10, 10, 11, 12, 13,\n       14, 15, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27,\n       28, 29, 30, 31, 32, 33, 34, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n       43, 44, 45, 45, 45, 46, 46, 47, 48, 48, 49, 50, 51, 52, 53, 54, 54,\n       55, 55, 56, 57, 58, 59, 59, 60, 61, 62, 63, 64, 65, 65, 66, 67, 67,\n       67, 68, 69, 70, 71, 72, 73, 74, 74, 75, 75, 76, 77, 78, 79])`, type: `ndarray`\n\n_, value: `array([407, 417, 701, 719, 585, ... , 811,\n       812, 695, 433, 904])`, shape: `(95,)`, type: `ndarray`\n\nval, value: `array([407, 417, 701, 719, 585, ... , 122, 811, 812, 695, 433, 904])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([51, 46, 34, 73, 74, 73,  0, 49, 13, 65, 18, 91, 52, 54,  3, 62, 92,\n       30, 35, 71, 72, 90,  5, 83, 70, 28, 77, 56, 29, 41, 48, 27, 67, 80,\n       22, 43, 11, 76, 75, 20,  2, 85,  4, 87, 37, 15,  0, 23, 63, 81,  8,\n       50, 12,  0,  9, 47,  1, 45, 49, 25, 38, 94, 10, 64, 69, 26, 44, 93,\n       31, 89, 57, 53, 86, 36, 58, 17, 14, 39, 42, 88, 16, 84, 68,  7, 55,\n       79, 78, 19, 11, 33, 21, 60, 32, 82, 24, 40, 66,  6, 59, 61])`, type: `ndarray`\n\nsorter, value: `array([51, 46, 34, 75, 76, 92, 81, 70, 13, 66, 18, 96, 52, 55,  3, 63, 97,\n       30, 35, 73, 74, 95,  5, 87, 72, 28, 79, 57, 29, 41, 48, 27, 68, 83,\n       22, 43, 53, 78, 77, 20,  2, 89,  4, 91, 37, 15, 86, 23, 64, 84,  8,\n       50, 12,  0,  9, 47,  1, 45, 49, 25, 38, 99, 10, 65, 71, 26, 44, 98,\n       31, 94, 58, 54, 90, 36, 59, 17, 14, 39, 42, 93, 16, 88, 69,  7, 56,\n       82, 80, 19, 11, 33, 21, 61, 32, 85, 24, 40, 67,  6, 60, 62])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 12, 14, 15, 16, 17, 18, 20,\n       22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39,\n       40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 56, 58, 59, 61, 62,\n       63, 64, 65, 66, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83,\n       86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 3, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2,\n       1, 3, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 3, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2,\n       1, 3, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(80,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-25    1\n     2015-08-26    1\n     2015-08-27    1\n     2015-08-29    1\nb    2015-08-25    1\n                  ..\ny    2015-08-29    2\n     2015-08-31    1\nz    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\nName: julie, Length: 80, dtype: int64`, type: `Series`\n\n## Case 123\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     407.0\n1     417.0\n2     701.0\n3     719.0\n4     585.0\n      ...  \n95    811.0\n96    812.0\n97    695.0\n98    433.0\n99    904.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,\n        3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,\n        7,  8,  8,  8,  8,  9,  9, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12,\n       12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 16,\n       16, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21,\n       21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([407., 417., 701., 719., 585., ... , 812.,\n       695., 433., 904.])`, shape: `(80,)`, type: `ndarray`\n\nval, value: `array([407., 417., 701., 719., 585., ... , 812., 695., 433.,\n       904.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1, 15, 29, 43, 56, -1, 28, 42, 61, 61, 62, -1,  0, 10, 40, 76,\n        3, 45, 53, 24, 59, 77,  5, 60, 68, 75, -1, 47, 58, 65, -1, 23, 35,\n       39, -1, 19, 37, 55,  8, 64,  2,  4, 17, 63, 70, 31, 72, -1, -1, 12,\n       20, -1, -1, -1, -1,  0,  9, 41, 22, 32, 40,  7, 79, -1, -1, 38, 57,\n       78, 25, 74, 44, 48, 71, 11, 14, 30, 33, 36, 49, 13, 69, 73, -1, 46,\n       67,  8, 16, 18, 27, 66, -1, 21, 26, 34, 51, 54,  6, 50, 52])`, type: `ndarray`\n\nsorter, value: `array([86,  1, 18, 35, 52, 69, 46, 34, 51, 75, 92, 76, 66, 81, 13, 70, 96,\n        3, 55, 63, 30, 73, 97,  5, 74, 87, 95, 28, 57, 72, 79, 27, 29, 41,\n       48, 83, 22, 43, 68, 53, 78,  2,  4, 20, 77, 89, 37, 91, 64, 84, 15,\n       23,  8,  9, 45, 47,  0, 12, 50, 25, 38, 49, 10, 99, 26, 65, 44, 71,\n       98, 31, 94, 54, 58, 90, 14, 17, 36, 39, 42, 59, 16, 88, 93,  7, 56,\n       82, 11, 19, 21, 33, 80, 85, 24, 32, 40, 61, 67,  6, 60, 62])`, type: `ndarray`\n\nidx, value: `array([ 6, 10, 12, 17, 20, 23, 27, 31, 35, 39, 41, 46, 48, 52, 59, 62, 64,\n       69, 71, 74, 80, 83, 86, 91, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 4, 2, 5, 3, 3, 4, 4, 4, 4, 2, 5, 2, 3, 4, 3, 2, 4, 2, 3, 6, 3,\n       3, 5, 6, 3])`, type: `ndarray`\n\nres, value: `array([4, 2, 5, 3, 3, 4, 4, 4, 4, 2, 5, 2, 3, 4, 3, 2, 4, 2, 3, 6, 3, 3,\n       5, 6, 3])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    4\nb    2\nc    5\nd    3\nf    3\ng    4\nh    4\ni    4\nj    4\nk    2\nl    5\nm    2\nn    3\no    4\np    3\nq    2\nr    4\ns    2\nt    3\nu    6\nv    3\nw    3\nx    5\ny    6\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n## Case 124\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     407.0\n1     417.0\n2     701.0\n3     719.0\n4     585.0\n      ...  \n95    811.0\n96    812.0\n97    695.0\n98    433.0\n99    904.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37,\n       38, 39, 40, 40, 41, 42, 42, 42, 43, 44, 45, 45, 46, 47, 48, 49, 50,\n       51, 51, 52, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 62, 63,\n       63, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71, 72, 73, 74, 75])`, type: `ndarray`\n\n_, value: `array([407., 417., 701., 719., 585., ... , 812.,\n       695., 433., 904.])`, shape: `(80,)`, type: `ndarray`\n\nval, value: `array([407., 417., 701., 719., 585., ... , 812., 695., 433.,\n       904.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  3, 15, 29, 34, 43, 56, 63, 42, -1, 28, 61, 62, 61,  0, 40,\n       -1, 10, 76, 45, 53, 77, 24, 59, 60, 75,  5, 68, 58, -1, 65, 47, 23,\n       35, 39, -1, -1, 55, 19, 37,  8, 64, 17,  2, 70,  4, 72, 31, 12, 20,\n       -1, -1, -1, 41,  9, -1, -1,  0, -1, 40, 22, 32, 79,  7, -1, 57, -1,\n       38, 78, 25, 74, 48, 44, 71, 30, 49, 14, 11, 33, 36, 73, 13, 69, -1,\n       46, 67, 66, 16,  8, 27, 18, 51, -1, 26, 21, 54,  6, 50, 52])`, type: `ndarray`\n\nsorter, value: `array([86,  1,  3, 18, 35, 40, 52, 69, 77, 51, 46, 34, 75, 76, 92, 81, 70,\n       66, 13, 96, 55, 63, 97, 30, 73, 74, 95,  5, 87, 72, 28, 79, 57, 29,\n       41, 48, 27, 83, 68, 22, 43, 53, 78, 20,  2, 89,  4, 91, 37, 15, 23,\n       64, 84,  8, 50, 12,  9, 47,  0, 45, 49, 25, 38, 99, 10, 65, 71, 26,\n       44, 98, 31, 94, 58, 54, 90, 36, 59, 17, 14, 39, 42, 93, 16, 88,  7,\n       56, 82, 80, 19, 11, 33, 21, 61, 85, 32, 24, 67,  6, 60, 62])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46,\n       47, 48, 49, 50, 51, 52, 53, 55, 56, 59, 60, 61, 63, 64, 65, 66, 67,\n       68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90,\n       91, 92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(76,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-25    1\n     2015-08-26    1\n     2015-08-27    1\n     2015-08-29    1\nb    2015-08-25    1\n                  ..\ny    2015-08-29    1\n     2015-08-31    1\nz    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\nName: julie, Length: 76, dtype: int64`, type: `Series`\n\n## Case 125\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     407.0\n1     417.0\n2     701.0\n3     719.0\n4     585.0\n      ...  \n95    811.0\n96    812.0\n97    695.0\n98    433.0\n99    904.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,\n        3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,\n        7,  8,  8,  8,  8,  9,  9, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12,\n       12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 16,\n       16, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21,\n       21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([407., 417., 701., 719., 585., ... , 812.,\n       695., 433., 904.])`, shape: `(80,)`, type: `ndarray`\n\nval, value: `array([407., 417., 701., 719., 585., ... , 812., 695., 433.,\n       904.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1, 15, 29, 43, 56, -1, 28, 42, 61, 61, 62, -1,  0, 10, 40, 76,\n        3, 45, 53, 24, 59, 77,  5, 60, 68, 75, -1, 47, 58, 65, -1, 23, 35,\n       39, -1, 19, 37, 55,  8, 64,  2,  4, 17, 63, 70, 31, 72, -1, -1, 12,\n       20, -1, -1, -1, -1,  0,  9, 41, 22, 32, 40,  7, 79, -1, -1, 38, 57,\n       78, 25, 74, 44, 48, 71, 11, 14, 30, 33, 36, 49, 13, 69, 73, -1, 46,\n       67,  8, 16, 18, 27, 66, -1, 21, 26, 34, 51, 54,  6, 50, 52])`, type: `ndarray`\n\nsorter, value: `array([86,  1, 18, 35, 52, 69, 46, 34, 51, 75, 92, 76, 66, 81, 13, 70, 96,\n        3, 55, 63, 30, 73, 97,  5, 74, 87, 95, 28, 57, 72, 79, 27, 29, 41,\n       48, 83, 22, 43, 68, 53, 78,  2,  4, 20, 77, 89, 37, 91, 64, 84, 15,\n       23,  8,  9, 45, 47,  0, 12, 50, 25, 38, 49, 10, 99, 26, 65, 44, 71,\n       98, 31, 94, 54, 58, 90, 14, 17, 36, 39, 42, 59, 16, 88, 93,  7, 56,\n       82, 11, 19, 21, 33, 80, 85, 24, 32, 40, 61, 67,  6, 60, 62])`, type: `ndarray`\n\nidx, value: `array([ 6, 10, 12, 17, 20, 23, 27, 31, 35, 39, 41, 46, 48, 52, 59, 62, 64,\n       69, 71, 74, 80, 83, 86, 91, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 4, 2, 5, 3, 3, 4, 4, 4, 4, 2, 5, 2, 3, 4, 3, 2, 4, 2, 3, 6, 3,\n       3, 5, 6, 3])`, type: `ndarray`\n\nres, value: `array([4, 2, 5, 3, 3, 4, 4, 4, 4, 2, 5, 2, 3, 4, 3, 2, 4, 2, 3, 6, 3, 3,\n       5, 6, 3])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    4\nb    2\nc    5\nd    3\nf    3\ng    4\nh    4\ni    4\nj    4\nk    2\nl    5\nm    2\nn    3\no    4\np    3\nq    2\nr    4\ns    2\nt    3\nu    6\nv    3\nw    3\nx    5\ny    6\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n## Case 126\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     407.0\n1     417.0\n2     701.0\n3     719.0\n4     585.0\n      ...  \n95    811.0\n96    812.0\n97    695.0\n98    433.0\n99    904.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37,\n       38, 39, 40, 40, 41, 42, 42, 42, 43, 44, 45, 45, 46, 47, 48, 49, 50,\n       51, 51, 52, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 62, 63,\n       63, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71, 72, 73, 74, 75])`, type: `ndarray`\n\n_, value: `array([407., 417., 701., 719., 585., ... , 812.,\n       695., 433., 904.])`, shape: `(80,)`, type: `ndarray`\n\nval, value: `array([407., 417., 701., 719., 585., ... , 812., 695., 433.,\n       904.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  3, 15, 29, 34, 43, 56, 63, 42, -1, 28, 61, 62, 61,  0, 40,\n       -1, 10, 76, 45, 53, 77, 24, 59, 60, 75,  5, 68, 58, -1, 65, 47, 23,\n       35, 39, -1, -1, 55, 19, 37,  8, 64, 17,  2, 70,  4, 72, 31, 12, 20,\n       -1, -1, -1, 41,  9, -1, -1,  0, -1, 40, 22, 32, 79,  7, -1, 57, -1,\n       38, 78, 25, 74, 48, 44, 71, 30, 49, 14, 11, 33, 36, 73, 13, 69, -1,\n       46, 67, 66, 16,  8, 27, 18, 51, -1, 26, 21, 54,  6, 50, 52])`, type: `ndarray`\n\nsorter, value: `array([86,  1,  3, 18, 35, 40, 52, 69, 77, 51, 46, 34, 75, 76, 92, 81, 70,\n       66, 13, 96, 55, 63, 97, 30, 73, 74, 95,  5, 87, 72, 28, 79, 57, 29,\n       41, 48, 27, 83, 68, 22, 43, 53, 78, 20,  2, 89,  4, 91, 37, 15, 23,\n       64, 84,  8, 50, 12,  9, 47,  0, 45, 49, 25, 38, 99, 10, 65, 71, 26,\n       44, 98, 31, 94, 58, 54, 90, 36, 59, 17, 14, 39, 42, 93, 16, 88,  7,\n       56, 82, 80, 19, 11, 33, 21, 61, 85, 32, 24, 67,  6, 60, 62])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46,\n       47, 48, 49, 50, 51, 52, 53, 55, 56, 59, 60, 61, 63, 64, 65, 66, 67,\n       68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90,\n       91, 92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(76,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-25    1\n     2015-08-26    1\n     2015-08-27    1\n     2015-08-29    1\nb    2015-08-25    1\n                  ..\ny    2015-08-29    1\n     2015-08-31    1\nz    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\nName: julie, Length: 76, dtype: int64`, type: `Series`\n\n## Case 127\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      340\n1       74\n2      564\n3      370\n4      797\n      ... \n995    637\n996    378\n997    156\n998    725\n999    808\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([340,  74, 564, 370, 797, ... , 460, 113, 378, 971, 730, 528])`, shape: `(624,)`, type: `ndarray`\n\nval, value: `array([340,  74, 564, 370, 797, ... , 528, 637, 378, 156, 725, 808])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([  4,  15,  36,  38,  48, ... , 573, 574, 579, 585, 587, 620])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  4,  15, 858,  39,  49, ... , 864, 865, 879, 894, 896, 996])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  51,  76, 118, 164, 192, 231, 284, 325, 353, 390, 433, 474,\n       516, 549, 575, 615, 650, 688, 724, 761, 789, 836, 882, 922, 955])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 0, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([47, 24, 37, 46, 28, 39, 50, 41, 27, 36, 43, 39, 42, 33, 26, 40, 35,\n       38, 35, 35, 28, 46, 45, 39, 33, 45])`, type: `ndarray`\n\nres, value: `array([47, 24, 37, 46, 28, 39, 50, 41, 27, 36, 43, 39, 42, 33, 26, 40, 35,\n       38, 35, 35, 28, 46, 45, 39, 33, 45])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    47\nb    24\nc    37\nd    46\ne    28\nf    39\ng    50\nh    41\ni    27\nj    36\nk    43\nl    39\nm    42\nn    33\no    26\np    40\nq    35\nr    38\ns    35\nt    35\nu    28\nv    46\nw    45\nx    39\ny    33\nz    45\nName: julie, dtype: int64`, type: `Series`\n\n## Case 128\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      340\n1       74\n2      564\n3      370\n4      797\n      ... \n995    637\n996    378\n997    156\n998    725\n999    808\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   1,   1,   1,   1, ... , 253, 253, 253, 254, 254, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([340,  74, 564, 370, 797, ... , 460, 113, 378, 971, 730, 528])`, shape: `(624,)`, type: `ndarray`\n\nval, value: `array([340,  74, 564, 370, 797, ... , 528, 637, 378, 156, 725, 808])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([161, 154, 170, 251, 283, ... ,  89, 186, 314, 209, 231, 475])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([287, 404, 187, 343, 484, ... , 606, 549, 654, 239, 265, 659])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   1,   6,  15,  22, ... , 976, 982, 989, 992, 994, 997])`, shape: `(255,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 1,  5,  9,  7,  6,  7,  3, ... ,  4, 11,  6,  7,  3,  2,  3,  3])`, shape: `(255,)`, type: `ndarray`\n\nres, value: `array([ 1,  5,  9,  7,  6,  7,  3, ... ,  4, 11,  6,  7,  3,  2,  3,  3])`, shape: `(255,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    5\n     2015-08-25    9\n     2015-08-26    7\n     2015-08-27    6\n                  ..\nz    2015-08-28    7\n     2015-08-29    3\n     2015-08-30    2\n     2015-08-31    3\n     2015-09-01    3\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n## Case 129\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      340.0\n1       74.0\n2      564.0\n3      370.0\n4      797.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    725.0\n999    808.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([340.,  74., 564., 370., 797., ... , 378., 971., 730., 528., 808.])`, shape: `(567,)`, type: `ndarray`\n\nval, value: `array([340.,  74., 564., 370., 797., ... ,  nan,  nan,  nan, 725., 808.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 464, 466, 513, 519, 525, 527])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 754, 756, 865, 879, 894, 896])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59, 107, 130, 170, 214, 241, 279, 329, 368, 393, 427, 468, 505,\n       543, 575, 600, 638, 671, 705, 738, 774, 801, 847, 888, 927, 959])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([51, 37, 22, 32, 37, 24, 30, 44, 35, 23, 31, 33, 31, 35, 26, 20, 32,\n       32, 28, 25, 26, 27, 41, 36, 35, 26, 36])`, type: `ndarray`\n\nres, value: `array([37, 22, 32, 37, 24, 30, 44, 35, 23, 31, 33, 31, 35, 26, 20, 32, 32,\n       28, 25, 26, 27, 41, 36, 35, 26, 36])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    37\nb    22\nc    32\nd    37\ne    24\nf    30\ng    44\nh    35\ni    23\nj    31\nk    33\nl    31\nm    35\nn    26\no    20\np    32\nq    32\nr    28\ns    25\nt    26\nu    27\nv    41\nw    36\nx    35\ny    26\nz    36\nName: julie, dtype: int64`, type: `Series`\n\n## Case 130\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      340.0\n1       74.0\n2      564.0\n3      370.0\n4      797.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    725.0\n999    808.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 252, 252, 252, 253, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([340.,  74., 564., 370., 797., ... , 378., 971., 730., 528., 808.])`, shape: `(567,)`, type: `ndarray`\n\nval, value: `array([340.,  74., 564., 370., 797., ... ,  nan,  nan,  nan, 725., 808.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 519,  -1,  74, 163, 201, 426])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 879, 654, 606, 549, 265, 659])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  85,  89,  97, 104, ... , 979, 985, 991, 994, 995, 998])`, shape: `(254,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([72,  1,  4,  8,  5,  5,  6, ... ,  2,  9,  6,  5,  3,  1,  3,  2])`, shape: `(255,)`, type: `ndarray`\n\nres, value: `array([ 1,  4,  8,  5,  5,  6,  3, ... ,  2,  9,  6,  5,  3,  1,  3,  2])`, shape: `(254,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    4\n     2015-08-25    8\n     2015-08-26    5\n     2015-08-27    5\n                  ..\nz    2015-08-28    5\n     2015-08-29    3\n     2015-08-30    1\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n## Case 131\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      340.0\n1       74.0\n2      564.0\n3      370.0\n4      797.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    725.0\n999    808.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([340.,  74., 564., 370., 797., ... , 378., 971., 730., 528., 808.])`, shape: `(567,)`, type: `ndarray`\n\nval, value: `array([340.,  74., 564., 370., 797., ... ,  nan,  nan,  nan, 725., 808.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 464, 466, 513, 519, 525, 527])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 754, 756, 865, 879, 894, 896])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59, 107, 130, 170, 214, 241, 279, 329, 368, 393, 427, 468, 505,\n       543, 575, 600, 638, 671, 705, 738, 774, 801, 847, 888, 927, 959])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([51, 37, 22, 32, 37, 24, 30, 44, 35, 23, 31, 33, 31, 35, 26, 20, 32,\n       32, 28, 25, 26, 27, 41, 36, 35, 26, 36])`, type: `ndarray`\n\nres, value: `array([37, 22, 32, 37, 24, 30, 44, 35, 23, 31, 33, 31, 35, 26, 20, 32, 32,\n       28, 25, 26, 27, 41, 36, 35, 26, 36])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    37\nb    22\nc    32\nd    37\ne    24\nf    30\ng    44\nh    35\ni    23\nj    31\nk    33\nl    31\nm    35\nn    26\no    20\np    32\nq    32\nr    28\ns    25\nt    26\nu    27\nv    41\nw    36\nx    35\ny    26\nz    36\nName: julie, dtype: int64`, type: `Series`\n\n## Case 132\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      340.0\n1       74.0\n2      564.0\n3      370.0\n4      797.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    725.0\n999    808.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 252, 252, 252, 253, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([340.,  74., 564., 370., 797., ... , 378., 971., 730., 528., 808.])`, shape: `(567,)`, type: `ndarray`\n\nval, value: `array([340.,  74., 564., 370., 797., ... ,  nan,  nan,  nan, 725., 808.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 519,  -1,  74, 163, 201, 426])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 879, 654, 606, 549, 265, 659])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  85,  89,  97, 104, ... , 979, 985, 991, 994, 995, 998])`, shape: `(254,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([72,  1,  4,  8,  5,  5,  6, ... ,  2,  9,  6,  5,  3,  1,  3,  2])`, shape: `(255,)`, type: `ndarray`\n\nres, value: `array([ 1,  4,  8,  5,  5,  6,  3, ... ,  2,  9,  6,  5,  3,  1,  3,  2])`, shape: `(254,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    4\n     2015-08-25    8\n     2015-08-26    5\n     2015-08-27    5\n                  ..\nz    2015-08-28    5\n     2015-08-29    3\n     2015-08-30    1\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n## Case 133\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       400\n1       496\n2        21\n3       237\n4       577\n       ... \n9995    309\n9996    636\n9997    627\n9998    520\n9999    799\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([400, 496,  21, 237, 577, ... , 214, 854,  87, 709, 182, 325])`, shape: `(999,)`, type: `ndarray`\n\nval, value: `array([400, 496,  21, ..., 627, 520, 799])`, type: `ndarray`\n\ncodes, value: `array([  0,   0,   4, ..., 987, 989, 996])`, type: `ndarray`\n\nsorter, value: `array([   0, 4594, 9986, ..., 8712, 9712, 6223])`, type: `ndarray`\n\nidx, value: `array([   0,  397,  802, 1176, 1563, 1911, 2269, 2675, 3073, 3439, 3783,\n       4162, 4555, 4943, 5313, 5735, 6133, 6549, 6947, 7349, 7757, 8132,\n       8485, 8854, 9232, 9601])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([324, 326, 312, 327, 294, 306, 327, 335, 314, 283, 319, 317, 321,\n       311, 329, 325, 349, 322, 321, 336, 306, 291, 298, 312, 298, 344])`, type: `ndarray`\n\nres, value: `array([324, 326, 312, 327, 294, 306, 327, 335, 314, 283, 319, 317, 321,\n       311, 329, 325, 349, 322, 321, 336, 306, 291, 298, 312, 298, 344])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    324\nb    326\nc    312\nd    327\ne    294\nf    306\ng    327\nh    335\ni    314\nj    283\nk    319\nl    317\nm    321\nn    311\no    329\np    325\nq    349\nr    322\ns    321\nt    336\nu    306\nv    291\nw    298\nx    312\ny    298\nz    344\nName: julie, dtype: int64`, type: `Series`\n\n## Case 134\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       400\n1       496\n2        21\n3       237\n4       577\n       ... \n9995    309\n9996    636\n9997    627\n9998    520\n9999    799\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([400, 496,  21, 237, 577, ... , 214, 854,  87, 709, 182, 325])`, shape: `(999,)`, type: `ndarray`\n\nval, value: `array([400, 496,  21, ..., 627, 520, 799])`, type: `ndarray`\n\ncodes, value: `array([131, 145, 244, ..., 946, 947, 955])`, type: `ndarray`\n\nsorter, value: `array([ 143, 3413, 2286, ..., 4843, 2918, 3891])`, type: `ndarray`\n\nidx, value: `array([   0,   31,   83,  108,  143, ... , 9793, 9833, 9873, 9919, 9962])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([30, 51, 25, 34, 57, 41, 37, ... , 43,\n       38, 40, 45, 43, 38])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([30, 51, 25, 34, 57, 41, 37, ... , 43,\n       38, 40, 45, 43, 38])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    30\n     2015-08-24    51\n     2015-08-25    25\n     2015-08-26    34\n     2015-08-27    57\n                   ..\nz    2015-08-28    38\n     2015-08-29    40\n     2015-08-30    45\n     2015-08-31    43\n     2015-09-01    38\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 135\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       400.0\n1       496.0\n2        21.0\n3       237.0\n4       577.0\n        ...  \n9995    309.0\n9996    636.0\n9997    627.0\n9998    520.0\n9999    799.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([400., 496.,  21., 237., 577., ... , 653., 291.,  39., 532., 325.])`, shape: `(999,)`, type: `ndarray`\n\nval, value: `array([400., 496.,  21., ..., 627., 520., 799.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 983, 987, 991])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 5071, 9211, 8947])`, type: `ndarray`\n\nidx, value: `array([ 589,  965, 1344, 1699, 2060, 2389, 2719, 3100, 3469, 3824, 4151,\n       4513, 4885, 5252, 5596, 5989, 6364, 6752, 7134, 7514, 7892, 8242,\n       8569, 8914, 9274, 9621])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([390, 264, 276, 260, 269, 245, 247, 269, 275, 254, 227, 260, 266,\n       274, 248, 279, 277, 287, 266, 273, 287, 251, 237, 235, 257, 248,\n       286])`, type: `ndarray`\n\nres, value: `array([264, 276, 260, 269, 245, 247, 269, 275, 254, 227, 260, 266, 274,\n       248, 279, 277, 287, 266, 273, 287, 251, 237, 235, 257, 248, 286])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    264\nb    276\nc    260\nd    269\ne    245\nf    247\ng    269\nh    275\ni    254\nj    227\nk    260\nl    266\nm    274\nn    248\no    279\np    277\nq    287\nr    266\ns    273\nt    287\nu    251\nv    237\nw    235\nx    257\ny    248\nz    286\nName: julie, dtype: int64`, type: `Series`\n\n## Case 136\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       400.0\n1       496.0\n2        21.0\n3       237.0\n4       577.0\n        ...  \n9995    309.0\n9996    636.0\n9997    627.0\n9998    520.0\n9999    799.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([400., 496.,  21., 237., 577., ... , 653., 291.,  39., 532., 325.])`, shape: `(999,)`, type: `ndarray`\n\nval, value: `array([400., 496.,  21., ..., 627., 520., 799.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 919, 962, 983])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 3891, 4843, 5071])`, type: `ndarray`\n\nidx, value: `array([ 844,  872,  922,  945,  978, ... , 9810, 9846, 9884, 9925, 9963])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([506,  25,  38,  22,  32, ... ,  29,  36,  34,  31,\n        32])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([25, 38, 22, 32, 45, 33, 30, ... , 37,\n       29, 36, 34, 31, 32])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    25\n     2015-08-24    38\n     2015-08-25    22\n     2015-08-26    32\n     2015-08-27    45\n                   ..\nz    2015-08-28    29\n     2015-08-29    36\n     2015-08-30    34\n     2015-08-31    31\n     2015-09-01    32\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 137\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       400.0\n1       496.0\n2        21.0\n3       237.0\n4       577.0\n        ...  \n9995    309.0\n9996    636.0\n9997    627.0\n9998    520.0\n9999    799.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([400., 496.,  21., 237., 577., ... , 653., 291.,  39., 532., 325.])`, shape: `(999,)`, type: `ndarray`\n\nval, value: `array([400., 496.,  21., ..., 627., 520., 799.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 983, 987, 991])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 5071, 9211, 8947])`, type: `ndarray`\n\nidx, value: `array([ 589,  965, 1344, 1699, 2060, 2389, 2719, 3100, 3469, 3824, 4151,\n       4513, 4885, 5252, 5596, 5989, 6364, 6752, 7134, 7514, 7892, 8242,\n       8569, 8914, 9274, 9621])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([390, 264, 276, 260, 269, 245, 247, 269, 275, 254, 227, 260, 266,\n       274, 248, 279, 277, 287, 266, 273, 287, 251, 237, 235, 257, 248,\n       286])`, type: `ndarray`\n\nres, value: `array([264, 276, 260, 269, 245, 247, 269, 275, 254, 227, 260, 266, 274,\n       248, 279, 277, 287, 266, 273, 287, 251, 237, 235, 257, 248, 286])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    264\nb    276\nc    260\nd    269\ne    245\nf    247\ng    269\nh    275\ni    254\nj    227\nk    260\nl    266\nm    274\nn    248\no    279\np    277\nq    287\nr    266\ns    273\nt    287\nu    251\nv    237\nw    235\nx    257\ny    248\nz    286\nName: julie, dtype: int64`, type: `Series`\n\n## Case 138\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       400.0\n1       496.0\n2        21.0\n3       237.0\n4       577.0\n        ...  \n9995    309.0\n9996    636.0\n9997    627.0\n9998    520.0\n9999    799.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([400., 496.,  21., 237., 577., ... , 653., 291.,  39., 532., 325.])`, shape: `(999,)`, type: `ndarray`\n\nval, value: `array([400., 496.,  21., ..., 627., 520., 799.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 919, 962, 983])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 3891, 4843, 5071])`, type: `ndarray`\n\nidx, value: `array([ 844,  872,  922,  945,  978, ... , 9810, 9846, 9884, 9925, 9963])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([506,  25,  38,  22,  32, ... ,  29,  36,  34,  31,\n        32])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([25, 38, 22, 32, 45, 33, 30, ... , 37,\n       29, 36, 34, 31, 32])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    25\n     2015-08-24    38\n     2015-08-25    22\n     2015-08-26    32\n     2015-08-27    45\n                   ..\nz    2015-08-28    29\n     2015-08-29    36\n     2015-08-30    34\n     2015-08-31    31\n     2015-09-01    32\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 139\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        509\n1        310\n2        760\n3        236\n4        163\n        ... \n99995     76\n99996    249\n99997    709\n99998    995\n99999    178\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([509, 310, 760, 236, 163, ... , 665, 808, 978, 207, 968, 398])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([509, 310, 760, ..., 709, 995, 178])`, type: `ndarray`\n\ncodes, value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([58340, 65252, 95900, ..., 55115, 56601, 69445])`, type: `ndarray`\n\nidx, value: `array([    0,  3973,  7962, 11769, 15556, 19349, 23084, 26937, 30674,\n       34632, 38511, 42329, 46213, 50019, 53914, 57811, 61663, 65512,\n       69353, 73122, 76980, 80777, 84599, 88445, 92314, 96174])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([984, 984, 973, 977, 982, 971, 978, 979, 977, 980, 979, 986, 982,\n       984, 978, 980, 974, 973, 983, 980, 975, 985, 975, 986, 984, 984])`, type: `ndarray`\n\nres, value: `array([984, 984, 973, 977, 982, 971, 978, 979, 977, 980, 979, 986, 982,\n       984, 978, 980, 974, 973, 983, 980, 975, 985, 975, 986, 984, 984])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    984\nb    984\nc    973\nd    977\ne    982\nf    971\ng    978\nh    979\ni    977\nj    980\nk    979\nl    986\nm    982\nn    984\no    978\np    980\nq    974\nr    973\ns    983\nt    980\nu    975\nv    985\nw    975\nx    986\ny    984\nz    984\nName: julie, dtype: int64`, type: `Series`\n\n## Case 140\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        509\n1        310\n2        760\n3        236\n4        163\n        ... \n99995     76\n99996    249\n99997    709\n99998    995\n99999    178\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([509, 310, 760, 236, 163, ... , 665, 808, 978, 207, 968, 398])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([509, 310, 760, ..., 709, 995, 178])`, type: `ndarray`\n\ncodes, value: `array([  0,   3,   3, ..., 996, 997, 998])`, type: `ndarray`\n\nsorter, value: `array([95900, 23386, 60087, ..., 43262, 43002, 75704])`, type: `ndarray`\n\nidx, value: `array([    0,   423,   821,  1196, ... , 98128, 98478, 98871, 99255, 99633])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([350, 318, 323, 367, 327, ... , 331, 295, 338, 313, 323, 317])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([350, 318, 323, 367, 327, ... , 331, 295, 338, 313, 323, 317])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    350\n     2015-08-24    318\n     2015-08-25    323\n     2015-08-26    367\n     2015-08-27    327\n                  ... \nz    2015-08-28    295\n     2015-08-29    338\n     2015-08-30    313\n     2015-08-31    323\n     2015-09-01    317\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 141\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        509.0\n1        310.0\n2        760.0\n3        236.0\n4        163.0\n         ...  \n99995     76.0\n99996    249.0\n99997    709.0\n99998    995.0\n99999    178.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([509., 310., 760., 236., 163., ... , 398., 815., 330., 354., 639.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([509., 310., 760., ..., 709., 995., 178.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 56860, 33204, 85111])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9652, 13388, 16977, 20557, 24126, 27629, 31233, 34769,\n       38489, 42144, 45734, 49397, 52964, 56637, 60277, 63900, 67527,\n       71157, 74705, 78344, 81904, 85493, 89087, 92737, 96389])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([997, 968, 960, 951, 944, 962, 942, 954, 956, 947, 952, 948, 966,\n       964, 964, 956, 961, 953, 960, 952, 961, 945, 952, 954, 963, 967,\n       954])`, type: `ndarray`\n\nres, value: `array([968, 960, 951, 944, 962, 942, 954, 956, 947, 952, 948, 966, 964,\n       964, 956, 961, 953, 960, 952, 961, 945, 952, 954, 963, 967, 954])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    968\nb    960\nc    951\nd    944\ne    962\nf    942\ng    954\nh    956\ni    947\nj    952\nk    948\nl    966\nm    964\nn    964\no    956\np    961\nq    953\nr    960\ns    952\nt    961\nu    945\nv    952\nw    954\nx    963\ny    967\nz    954\nName: julie, dtype: int64`, type: `Series`\n\n## Case 142\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        509.0\n1        310.0\n2        760.0\n3        236.0\n4        163.0\n         ...  \n99995     76.0\n99996    249.0\n99997    709.0\n99998    995.0\n99999    178.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([509., 310., 760., 236., 163., ... , 398., 815., 330., 354., 639.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([509., 310., 760., ..., 709., 995., 178.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 992, 993, 996])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 43262, 43002, 80364])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8814,  9178,  9525, ... , 98279, 98611, 98973, 99325, 99675])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([1001,  296,  267,  254,  286, ... ,  243,  272,  252,  262,  242])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([296, 267, 254, 286, 262, ... , 277, 243, 272, 252, 262, 242])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    296\n     2015-08-24    267\n     2015-08-25    254\n     2015-08-26    286\n     2015-08-27    262\n                  ... \nz    2015-08-28    243\n     2015-08-29    272\n     2015-08-30    252\n     2015-08-31    262\n     2015-09-01    242\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 143\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        509.0\n1        310.0\n2        760.0\n3        236.0\n4        163.0\n         ...  \n99995     76.0\n99996    249.0\n99997    709.0\n99998    995.0\n99999    178.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([509., 310., 760., 236., 163., ... , 398., 815., 330., 354., 639.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([509., 310., 760., ..., 709., 995., 178.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 56860, 33204, 85111])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9652, 13388, 16977, 20557, 24126, 27629, 31233, 34769,\n       38489, 42144, 45734, 49397, 52964, 56637, 60277, 63900, 67527,\n       71157, 74705, 78344, 81904, 85493, 89087, 92737, 96389])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([997, 968, 960, 951, 944, 962, 942, 954, 956, 947, 952, 948, 966,\n       964, 964, 956, 961, 953, 960, 952, 961, 945, 952, 954, 963, 967,\n       954])`, type: `ndarray`\n\nres, value: `array([968, 960, 951, 944, 962, 942, 954, 956, 947, 952, 948, 966, 964,\n       964, 956, 961, 953, 960, 952, 961, 945, 952, 954, 963, 967, 954])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    968\nb    960\nc    951\nd    944\ne    962\nf    942\ng    954\nh    956\ni    947\nj    952\nk    948\nl    966\nm    964\nn    964\no    956\np    961\nq    953\nr    960\ns    952\nt    961\nu    945\nv    952\nw    954\nx    963\ny    967\nz    954\nName: julie, dtype: int64`, type: `Series`\n\n## Case 144\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        509.0\n1        310.0\n2        760.0\n3        236.0\n4        163.0\n         ...  \n99995     76.0\n99996    249.0\n99997    709.0\n99998    995.0\n99999    178.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([509., 310., 760., 236., 163., ... , 398., 815., 330., 354., 639.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([509., 310., 760., ..., 709., 995., 178.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 992, 993, 996])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 43262, 43002, 80364])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8814,  9178,  9525, ... , 98279, 98611, 98973, 99325, 99675])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([1001,  296,  267,  254,  286, ... ,  243,  272,  252,  262,  242])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([296, 267, 254, 286, 262, ... , 277, 243, 272, 252, 262, 242])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    296\n     2015-08-24    267\n     2015-08-25    254\n     2015-08-26    286\n     2015-08-27    262\n                  ... \nz    2015-08-28    243\n     2015-08-29    272\n     2015-08-30    252\n     2015-08-31    262\n     2015-09-01    242\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 145\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     2\n1     6\n2     8\n3     8\n4     3\n     ..\n95    9\n96    4\n97    8\n98    4\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  5,\n        5,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,\n        8,  8,  8,  9,  9,  9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13,\n       13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 16, 17,\n       17, 17, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 22,\n       22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25])`, type: `ndarray`\n\n_, value: `array([2, 6, 8, 3, 1, 0, 5, 4, 7, 9])`, type: `ndarray`\n\nval, value: `array([2, 6, 8, 8, 3, 1, 0, 2, 8, 0, 6, 3, 5, 3, 8, 5, 4, 5, 7, 8, 5, 7,\n       8, 8, 7, 6, 9, 7, 3, 1, 8, 4, 5, 0, 8, 2, 3, 2, 0, 6, 1, 1, 4, 8,\n       9, 0, 0, 3, 4, 0, 3, 3, 0, 2, 1, 8, 5, 6, 0, 4, 4, 8, 5, 5, 1, 1,\n       8, 9, 5, 9, 0, 7, 6, 6, 5, 2, 7, 1, 9, 5, 2, 1, 5, 7, 6, 5, 9, 8,\n       0, 1, 5, 1, 9, 4, 9, 9, 4, 8, 4, 5])`, type: `ndarray`\n\ncodes, value: `array([0, 1, 6, 7, 1, 2, 4, 1, 2, 3, 2, 5, 7, 3, 4, 4, 4, 5, 3, 5, 8, 9,\n       0, 4, 5, 5, 5, 7, 1, 1, 2, 2, 3, 4, 5, 8, 9, 2, 3, 7, 2, 6, 0, 3,\n       2, 2, 2, 5, 1, 1, 2, 6, 6, 6, 4, 4, 6, 7, 9, 9, 2, 6, 6, 8, 9, 9,\n       9, 6, 6, 8, 0, 2, 6, 2, 5, 7, 8, 3, 6, 6, 8, 9, 4, 8, 4, 5, 6, 9,\n       0, 0, 4, 7, 7, 0, 1, 3, 5, 6, 2, 7])`, type: `ndarray`\n\nsorter, value: `array([ 0, 25, 99, 96,  1,  8, 29, 57,  2, 50,  3, 88, 31,  4, 41, 65,  5,\n       70, 36,  6, 76, 94,  7, 81,  9, 38, 52, 42, 10, 72, 23, 34, 28, 54,\n       49, 71, 69, 61, 11, 48, 43, 12, 53, 13, 14, 66, 97, 46, 39, 73, 19,\n       15, 56, 82, 40, 64, 90, 16, 44, 78, 55, 17, 85, 18, 67, 92, 95, 20,\n       74, 21, 75, 22, 68, 30, 58, 93, 24, 47, 62, 63, 83, 26, 89, 27, 91,\n       33, 32, 86, 35, 37, 77, 59, 98, 80, 84, 51, 45, 79, 87, 60])`, type: `ndarray`\n\nidx, value: `array([ 0,  4,  7, 10, 13, 16, 18, 22, 28, 37, 40, 42, 44, 48, 54, 60, 62,\n       67, 70, 73, 77, 82, 84, 88, 93, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,\n       0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([4, 3, 3, 3, 2, 2, 4, 4, 7, 3, 2, 2, 2, 3, 4, 2, 3, 2, 3, 4, 4, 2,\n       4, 3, 5, 2])`, type: `ndarray`\n\nres, value: `array([4, 3, 3, 3, 2, 2, 4, 4, 7, 3, 2, 2, 2, 3, 4, 2, 3, 2, 3, 4, 4, 2,\n       4, 3, 5, 2])`, type: `ndarray`\n\nri, value: `Index(['h', 'v', 'n', 'i', 'y', 'c', 'u', 'o', 's', 'd', 'f', 'r', 'q', 'a',\n       'k', 'x', 'g', 'm', 'w', 'e', 'l', 't', 'p', 'z', 'j', 'b'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nh    4\nv    3\nn    3\ni    3\ny    2\nc    2\nu    4\no    4\ns    7\nd    3\nf    2\nr    2\nq    2\na    3\nk    4\nx    2\ng    3\nm    2\nw    3\ne    4\nl    4\nt    2\np    4\nz    3\nj    5\nb    2\nName: julie, dtype: int64`, type: `Series`\n\n## Case 146\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     2\n1     6\n2     8\n3     8\n4     3\n     ..\n95    9\n96    4\n97    8\n98    4\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  3,  4,  5,  5,  6,  6,  7,  8,  9, 10, 10, 10, 11, 11,\n       12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 23, 24, 25, 26,\n       26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 37, 38, 38, 39,\n       40, 40, 41, 42, 43, 43, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69,\n       70, 71, 72, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83])`, type: `ndarray`\n\n_, value: `array([2, 6, 8, 3, 1, 0, 5, 4, 7, 9])`, type: `ndarray`\n\nval, value: `array([2, 6, 8, 8, 3, 1, 0, 2, 8, 0, 6, 3, 5, 3, 8, 5, 4, 5, 7, 8, 5, 7,\n       8, 8, 7, 6, 9, 7, 3, 1, 8, 4, 5, 0, 8, 2, 3, 2, 0, 6, 1, 1, 4, 8,\n       9, 0, 0, 3, 4, 0, 3, 3, 0, 2, 1, 8, 5, 6, 0, 4, 4, 8, 5, 5, 1, 1,\n       8, 9, 5, 9, 0, 7, 6, 6, 5, 2, 7, 1, 9, 5, 2, 1, 5, 7, 6, 5, 9, 8,\n       0, 1, 5, 1, 9, 4, 9, 9, 4, 8, 4, 5])`, type: `ndarray`\n\ncodes, value: `array([0, 1, 2, 2, 3, 4, 5, 3, 5, 0, 2, 5, 1, 1, 2, 2, 3, 6, 3, 2, 6, 7,\n       6, 8, 2, 6, 6, 8, 2, 2, 4, 8, 1, 6, 9, 8, 3, 4, 2, 7, 6, 9, 5, 0,\n       0, 5, 1, 6, 4, 4, 4, 4, 7, 2, 9, 0, 1, 5, 5, 3, 7, 5, 3, 3, 5, 0,\n       2, 1, 5, 7, 7, 6, 4, 2, 9, 6, 9, 8, 1, 0, 8, 4, 7, 9, 6, 6, 8, 6,\n       9, 2, 5, 4, 6, 4, 7, 9, 9, 7, 2, 6])`, type: `ndarray`\n\nsorter, value: `array([ 0,  1,  2,  3,  4,  5, 70, 36,  6,  7,  8,  9, 10, 72, 34, 61, 11,\n       12, 13, 14, 15, 16, 17, 18, 19, 20, 74, 21, 22, 23, 54, 24, 25, 62,\n       26, 27, 28, 29, 30, 31, 32, 86, 33, 35, 37, 38, 39, 56, 40, 64, 41,\n       81, 42, 43, 44, 80, 84, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57,\n       58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 73, 75, 76, 77, 98, 78, 79,\n       82, 83, 85, 92, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  2,  3,  4,  5,  7,  9, 10, 11, 12, 15, 17, 18, 19, 20, 21,\n       22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42,\n       43, 44, 45, 46, 48, 50, 51, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\n       83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 3,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 3,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('h', '2015-08-28') ... ('h', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nh    2015-08-28    1\nv    2015-08-23    1\nn    2015-08-28    1\ni    2015-08-27    1\ny    2015-08-25    1\n                  ..\nu    2015-08-26    1\ng    2015-08-30    1\nh    2015-08-27    1\nq    2015-08-26    1\nh    2015-08-31    1\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n## Case 147\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     2.0\n1     6.0\n2     8.0\n3     8.0\n4     3.0\n     ... \n95    9.0\n96    4.0\n97    8.0\n98    4.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  3,\n        3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  8,  8,\n        8,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 11, 11, 12, 12, 12, 12,\n       13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16,\n       17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 21, 21, 21,\n       22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([2., 6., 8., 3., 1., 0., 5., 4., 7., 9.])`, type: `ndarray`\n\nval, value: `array([ 2.,  6.,  8.,  8.,  3., ... ,  9.,  9.,  4.,  8.,  4.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  5,  8,  9,  9,  0,  1,  6,  7,  1,  2,  3,  2,  5,  7, -1,\n        3,  4,  4,  5,  3,  5,  8,  9, -1, -1,  4,  5,  7, -1,  4, -1,  1,\n        1,  2,  2,  4,  5,  8,  2,  3,  7,  2,  6,  0,  3, -1, -1,  2,  2,\n        1,  1,  2,  6,  6,  6, -1,  4,  6,  7,  9,  9,  2,  6,  6,  6,  8,\n        0,  2,  6,  2,  5,  7,  8, -1, -1, -1,  6,  6, -1,  4,  4,  5,  6,\n        0,  4,  7,  7, -1, -1,  0,  3,  6,  2,  7, -1,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([35,  1, 52, 18, 69, 86,  0, 25, 99, 96, 57,  2, 50,  3, 88, 31, 65,\n        4, 41,  5, 70, 36,  6, 76, 94,  7,  9, 81, 38, 42,  8, 29, 28, 10,\n       72, 23, 34, 54, 49, 71, 61, 11, 48, 43, 12, 53, 13, 46, 66, 14, 97,\n       39, 73, 19, 15, 56, 82, 64, 40, 90, 16, 44, 78, 55, 17, 20, 74, 21,\n       75, 22, 68, 30, 58, 93, 24, 26, 47, 83, 62, 63, 27, 89, 91, 33, 32,\n       37, 77, 59, 98, 45, 84, 80, 51, 79, 87, 60, 85, 67, 92, 95])`, type: `ndarray`\n\nidx, value: `array([ 6, 10, 13, 16, 19, 21, 25, 30, 32, 40, 43, 45, 47, 51, 57, 63, 65,\n       68, 71, 75, 80, 82, 85, 89, 94, 96])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... ,  True, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 4, 3, 3, 2, 2, 4, 3, 1, 5, 3, 2, 2, 1, 3, 4, 2, 2, 3, 4, 1, 1,\n       3, 3, 3, 2, 1])`, type: `ndarray`\n\nres, value: `array([4, 3, 3, 2, 2, 4, 3, 1, 5, 3, 2, 2, 1, 3, 4, 2, 2, 3, 4, 1, 1, 3,\n       3, 3, 2, 1])`, type: `ndarray`\n\nri, value: `Index(['h', 'n', 'i', 'y', 'c', 'u', 'o', 'v', 's', 'd', 'f', 'r', 'q', 'a',\n       'k', 'x', 'm', 'w', 'e', 'l', 't', 'p', 'z', 'j', 'b', 'g'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nh    4\nn    3\ni    3\ny    2\nc    2\nu    4\no    3\nv    1\ns    5\nd    3\nf    2\nr    2\nq    1\na    3\nk    4\nx    2\nm    2\nw    3\ne    4\nl    1\nt    1\np    3\nz    3\nj    3\nb    2\ng    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 148\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     2.0\n1     6.0\n2     8.0\n3     8.0\n4     3.0\n     ... \n95    9.0\n96    4.0\n97    8.0\n98    4.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  3,  4,  4,  5,\n        6,  7,  8,  8,  8,  9,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18,\n       19, 20, 20, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       33, 34, 35, 35, 36, 37, 38, 38, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n       47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77])`, type: `ndarray`\n\n_, value: `array([2., 6., 8., 3., 1., 0., 5., 4., 7., 9.])`, type: `ndarray`\n\nval, value: `array([ 2.,  6.,  8.,  8.,  3., ... ,  9.,  9.,  4.,  8.,  4.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  2,  4,  4,  5,  8,  9,  9,  0,  2,  3,  4,  5,  3,  5, -1,\n       -1, -1,  1,  1,  2,  2,  3,  6,  3,  2,  6,  7,  6,  2,  6,  6,  8,\n        2,  2,  4,  8,  1, -1,  6, -1, -1,  4,  2,  7,  6,  5,  0,  5,  1,\n        6,  4,  4,  7,  2,  9, -1, -1,  0, -1, -1,  7,  5,  3,  3,  0,  2,\n        1,  5,  7,  7,  6, -1, -1, -1,  9,  6,  8,  1,  0,  8,  9,  6,  6,\n       -1, -1,  9,  2,  5,  4,  6,  4,  7,  9,  9,  7,  2,  7,  6])`, type: `ndarray`\n\nsorter, value: `array([35,  1,  3, 40, 77, 52, 18, 69, 86,  0,  2,  4,  5, 70, 36,  6,  7,\n        8,  9, 10, 72, 34, 61, 11, 12, 13, 14, 15, 16, 17, 19, 20, 74, 21,\n       22, 23, 54, 24, 25, 26, 62, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39,\n       56, 41, 81, 42, 43, 44, 45, 84, 80, 46, 47, 48, 49, 50, 51, 53, 55,\n       57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 71, 73, 75, 76, 78, 79, 82,\n       83, 85, 92, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 24, 25, 26, 27, 28, 29, 30,\n       31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       52, 53, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n       72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([7, 1, 1, 1, 2, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 2, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('h', '2015-08-28') ... ('h', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(78,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nh    2015-08-28    1\nn    2015-08-28    1\ny    2015-08-25    1\nc    2015-08-26    2\nu    2015-08-30    2\n                  ..\ng    2015-08-30    1\nh    2015-08-27    1\nq    2015-08-26    1\nz    2015-08-23    1\nh    2015-08-31    1\nName: julie, Length: 78, dtype: int64`, type: `Series`\n\n## Case 149\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     2.0\n1     6.0\n2     8.0\n3     8.0\n4     3.0\n     ... \n95    9.0\n96    4.0\n97    8.0\n98    4.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  3,\n        3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  8,  8,\n        8,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 11, 11, 12, 12, 12, 12,\n       13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16,\n       17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 21, 21, 21,\n       22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([2., 6., 8., 3., 1., 0., 5., 4., 7., 9.])`, type: `ndarray`\n\nval, value: `array([ 2.,  6.,  8.,  8.,  3., ... ,  9.,  9.,  4.,  8.,  4.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  5,  8,  9,  9,  0,  1,  6,  7,  1,  2,  3,  2,  5,  7, -1,\n        3,  4,  4,  5,  3,  5,  8,  9, -1, -1,  4,  5,  7, -1,  4, -1,  1,\n        1,  2,  2,  4,  5,  8,  2,  3,  7,  2,  6,  0,  3, -1, -1,  2,  2,\n        1,  1,  2,  6,  6,  6, -1,  4,  6,  7,  9,  9,  2,  6,  6,  6,  8,\n        0,  2,  6,  2,  5,  7,  8, -1, -1, -1,  6,  6, -1,  4,  4,  5,  6,\n        0,  4,  7,  7, -1, -1,  0,  3,  6,  2,  7, -1,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([35,  1, 52, 18, 69, 86,  0, 25, 99, 96, 57,  2, 50,  3, 88, 31, 65,\n        4, 41,  5, 70, 36,  6, 76, 94,  7,  9, 81, 38, 42,  8, 29, 28, 10,\n       72, 23, 34, 54, 49, 71, 61, 11, 48, 43, 12, 53, 13, 46, 66, 14, 97,\n       39, 73, 19, 15, 56, 82, 64, 40, 90, 16, 44, 78, 55, 17, 20, 74, 21,\n       75, 22, 68, 30, 58, 93, 24, 26, 47, 83, 62, 63, 27, 89, 91, 33, 32,\n       37, 77, 59, 98, 45, 84, 80, 51, 79, 87, 60, 85, 67, 92, 95])`, type: `ndarray`\n\nidx, value: `array([ 6, 10, 13, 16, 19, 21, 25, 30, 32, 40, 43, 45, 47, 51, 57, 63, 65,\n       68, 71, 75, 80, 82, 85, 89, 94, 96])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... ,  True, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 4, 3, 3, 2, 2, 4, 3, 1, 5, 3, 2, 2, 1, 3, 4, 2, 2, 3, 4, 1, 1,\n       3, 3, 3, 2, 1])`, type: `ndarray`\n\nres, value: `array([4, 3, 3, 2, 2, 4, 3, 1, 5, 3, 2, 2, 1, 3, 4, 2, 2, 3, 4, 1, 1, 3,\n       3, 3, 2, 1])`, type: `ndarray`\n\nri, value: `Index(['h', 'n', 'i', 'y', 'c', 'u', 'o', 'v', 's', 'd', 'f', 'r', 'q', 'a',\n       'k', 'x', 'm', 'w', 'e', 'l', 't', 'p', 'z', 'j', 'b', 'g'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nh    4\nn    3\ni    3\ny    2\nc    2\nu    4\no    3\nv    1\ns    5\nd    3\nf    2\nr    2\nq    1\na    3\nk    4\nx    2\nm    2\nw    3\ne    4\nl    1\nt    1\np    3\nz    3\nj    3\nb    2\ng    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 150\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     2.0\n1     6.0\n2     8.0\n3     8.0\n4     3.0\n     ... \n95    9.0\n96    4.0\n97    8.0\n98    4.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  3,  4,  4,  5,\n        6,  7,  8,  8,  8,  9,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18,\n       19, 20, 20, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       33, 34, 35, 35, 36, 37, 38, 38, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n       47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77])`, type: `ndarray`\n\n_, value: `array([2., 6., 8., 3., 1., 0., 5., 4., 7., 9.])`, type: `ndarray`\n\nval, value: `array([ 2.,  6.,  8.,  8.,  3., ... ,  9.,  9.,  4.,  8.,  4.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  2,  4,  4,  5,  8,  9,  9,  0,  2,  3,  4,  5,  3,  5, -1,\n       -1, -1,  1,  1,  2,  2,  3,  6,  3,  2,  6,  7,  6,  2,  6,  6,  8,\n        2,  2,  4,  8,  1, -1,  6, -1, -1,  4,  2,  7,  6,  5,  0,  5,  1,\n        6,  4,  4,  7,  2,  9, -1, -1,  0, -1, -1,  7,  5,  3,  3,  0,  2,\n        1,  5,  7,  7,  6, -1, -1, -1,  9,  6,  8,  1,  0,  8,  9,  6,  6,\n       -1, -1,  9,  2,  5,  4,  6,  4,  7,  9,  9,  7,  2,  7,  6])`, type: `ndarray`\n\nsorter, value: `array([35,  1,  3, 40, 77, 52, 18, 69, 86,  0,  2,  4,  5, 70, 36,  6,  7,\n        8,  9, 10, 72, 34, 61, 11, 12, 13, 14, 15, 16, 17, 19, 20, 74, 21,\n       22, 23, 54, 24, 25, 26, 62, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39,\n       56, 41, 81, 42, 43, 44, 45, 84, 80, 46, 47, 48, 49, 50, 51, 53, 55,\n       57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 71, 73, 75, 76, 78, 79, 82,\n       83, 85, 92, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 24, 25, 26, 27, 28, 29, 30,\n       31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       52, 53, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n       72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([7, 1, 1, 1, 2, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 2, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('h', '2015-08-28') ... ('h', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(78,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nh    2015-08-28    1\nn    2015-08-28    1\ny    2015-08-25    1\nc    2015-08-26    2\nu    2015-08-30    2\n                  ..\ng    2015-08-30    1\nh    2015-08-27    1\nq    2015-08-26    1\nz    2015-08-23    1\nh    2015-08-31    1\nName: julie, Length: 78, dtype: int64`, type: `Series`\n\n## Case 151\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      1\n1      3\n2      8\n3      2\n4      3\n      ..\n995    8\n996    5\n997    1\n998    6\n999    5\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([1, 3, 8, 2, 4, 6, 5, 9, 0, 7])`, type: `ndarray`\n\nval, value: `array([1, 3, 8, 2, 3, 2, 4, 6, 5, ... ,\n       3, 0, 1, 5, 7, 8, 5, 1, 6, 5])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([0, 0, 1, 1, 1, 1, 1, 2, 3, ... ,\n       6, 6, 6, 7, 7, 8, 9, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0, 756,  82, 123, 154, ... , 412, 684, 132, 356, 562, 597])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  36,  78, 113, 147, 192, 233, 271, 313, 346, 387, 432, 472,\n       510, 552, 594, 628, 665, 695, 733, 773, 811, 845, 886, 925, 964])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 0, 0, 0, 0, 1, 1, ... ,\n       0, 0, 0, 1, 0, 1, 1, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10, 10, 10,  9, 10,  9])`, type: `ndarray`\n\nres, value: `array([ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10, 10, 10,  9, 10,  9])`, type: `ndarray`\n\nri, value: `Index(['p', 'g', 'l', 'u', 'o', 'c', 'x', 'h', 'q', 'b', 'z', 'v', 't', 'w',\n       'a', 's', 'y', 'm', 'd', 'e', 'k', 'n', 'j', 'i', 'r', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np     9\ng    10\nl    10\nu    10\no    10\nc    10\nx    10\nh    10\nq    10\nb    10\nz    10\nv    10\nt    10\nw    10\na    10\ns    10\ny    10\nm     9\nd    10\ne    10\nk    10\nn    10\nj    10\ni     9\nr    10\nf     9\nName: julie, dtype: int64`, type: `Series`\n\n## Case 152\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      1\n1      3\n2      8\n3      2\n4      3\n      ..\n995    8\n996    5\n997    1\n998    6\n999    5\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 253, 253, 254, 255, 255, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([1, 3, 8, 2, 4, 6, 5, 9, 0, 7])`, type: `ndarray`\n\nval, value: `array([1, 3, 8, 2, 3, 2, 4, 6, 5, ... ,\n       3, 0, 1, 5, 7, 8, 5, 1, 6, 5])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([0, 1, 1, 7, 8, 8, 8, 1, 4, ... ,\n       5, 0, 1, 8, 6, 8, 0, 7, 9, 4])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0, 123, 353, 709,  18, ... , 910, 824, 841, 944, 900, 947])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   7,  11,  17,  22, ... , 992, 993, 994, 996, 997, 999])`, shape: `(257,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 0, 0, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([4, 3, 5, 3, 4, 5, 2, 2, 3, ... , 2, 2, 2, 1, 1, 1, 2, 1, 2, 1])`, shape: `(257,)`, type: `ndarray`\n\nres, value: `array([4, 3, 5, 3, 4, 5, 2, 2, 3, ... , 2, 2, 2, 1, 1, 1, 2, 1, 2, 1])`, shape: `(257,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-09-01') ... ('b', '2015-08-30')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-09-01    4\ng    2015-08-23    3\nl    2015-09-01    5\nu    2015-08-25    3\no    2015-08-28    4\n                  ..\nb    2015-08-31    1\nu    2015-08-31    2\ne    2015-08-28    1\nx    2015-08-26    2\nb    2015-08-30    1\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n## Case 153\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      1.0\n1      3.0\n2      8.0\n3      2.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    6.0\n999    5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([1., 3., 8., 2., 4., 5., 9., 6., 0., 7.])`, type: `ndarray`\n\nval, value: `array([ 1.,  3.,  8.,  2.,  3., ... ,  7., nan, nan, nan,  6.,  5.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7,  7,  8,  8,  8,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 547, 771, 979, 145, 390, 451])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  91, 122, 154, 197, 237, 273, 311, 343, 381, 425, 463, 500,\n       541, 583, 611, 645, 672, 706, 745, 779, 811, 852, 889, 925, 960])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 0, 0, 1, 0, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10, 10, 10,  9,  9,\n        9,  9, 10, 10,  9, 10,  9, 10,  9, 10])`, type: `ndarray`\n\nres, value: `array([ 9, 10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10, 10, 10,  9,  9,  9,\n        9, 10, 10,  9, 10,  9, 10,  9, 10])`, type: `ndarray`\n\nri, value: `Index(['p', 'l', 'u', 'o', 'c', 'x', 'h', 'q', 'b', 'z', 'v', 't', 'w', 'a',\n       's', 'y', 'm', 'd', 'e', 'k', 'n', 'j', 'i', 'r', 'f', 'g'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np     9\nl    10\nu    10\no    10\nc    10\nx    10\nh    10\nq     9\nb    10\nz    10\nv     9\nt    10\nw    10\na    10\ns     9\ny     9\nm     9\nd     9\ne    10\nk    10\nn     9\nj    10\ni     9\nr    10\nf     9\ng    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 154\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      1.0\n1      3.0\n2      8.0\n3      2.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    6.0\n999    5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 250, 251, 252, 252, 253, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([1., 3., 8., 2., 4., 5., 9., 6., 0., 7.])`, type: `ndarray`\n\nval, value: `array([ 1.,  3.,  8.,  2.,  3., ... ,  7., nan, nan, nan,  6.,  5.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  5,  0,  3,  1, -1,  6,  6,  4])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 860, 879, 900, 944, 907, 947])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  90,  96, 100, 107, ... , 993, 994, 995, 996, 998, 999])`, shape: `(255,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 1, 1, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... ,  True, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10,  4,  5,  4,  5,  2,  0, ... ,  1,  1,  1,  1,  1,\n        1])`, shape: `(256,)`, type: `ndarray`\n\nres, value: `array([4, 5, 4, 5, 2, 0, 1, 3, 3, ... , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(255,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-09-01') ... ('b', '2015-08-30')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-09-01    4\nl    2015-09-01    5\no    2015-08-28    4\nc    2015-08-28    5\nx    2015-08-28    2\n                  ..\nb    2015-08-25    1\nh    2015-08-30    1\nx    2015-08-26    1\nr    2015-09-01    1\nb    2015-08-30    1\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n## Case 155\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      1.0\n1      3.0\n2      8.0\n3      2.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    6.0\n999    5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([1., 3., 8., 2., 4., 5., 9., 6., 0., 7.])`, type: `ndarray`\n\nval, value: `array([ 1.,  3.,  8.,  2.,  3., ... ,  7., nan, nan, nan,  6.,  5.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7,  7,  8,  8,  8,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 547, 771, 979, 145, 390, 451])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  91, 122, 154, 197, 237, 273, 311, 343, 381, 425, 463, 500,\n       541, 583, 611, 645, 672, 706, 745, 779, 811, 852, 889, 925, 960])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 0, 0, 1, 0, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10, 10, 10,  9,  9,\n        9,  9, 10, 10,  9, 10,  9, 10,  9, 10])`, type: `ndarray`\n\nres, value: `array([ 9, 10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10, 10, 10,  9,  9,  9,\n        9, 10, 10,  9, 10,  9, 10,  9, 10])`, type: `ndarray`\n\nri, value: `Index(['p', 'l', 'u', 'o', 'c', 'x', 'h', 'q', 'b', 'z', 'v', 't', 'w', 'a',\n       's', 'y', 'm', 'd', 'e', 'k', 'n', 'j', 'i', 'r', 'f', 'g'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np     9\nl    10\nu    10\no    10\nc    10\nx    10\nh    10\nq     9\nb    10\nz    10\nv     9\nt    10\nw    10\na    10\ns     9\ny     9\nm     9\nd     9\ne    10\nk    10\nn     9\nj    10\ni     9\nr    10\nf     9\ng    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 156\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      1.0\n1      3.0\n2      8.0\n3      2.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    6.0\n999    5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 250, 251, 252, 252, 253, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([1., 3., 8., 2., 4., 5., 9., 6., 0., 7.])`, type: `ndarray`\n\nval, value: `array([ 1.,  3.,  8.,  2.,  3., ... ,  7., nan, nan, nan,  6.,  5.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  5,  0,  3,  1, -1,  6,  6,  4])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 860, 879, 900, 944, 907, 947])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  90,  96, 100, 107, ... , 993, 994, 995, 996, 998, 999])`, shape: `(255,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 1, 1, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... ,  True, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10,  4,  5,  4,  5,  2,  0, ... ,  1,  1,  1,  1,  1,\n        1])`, shape: `(256,)`, type: `ndarray`\n\nres, value: `array([4, 5, 4, 5, 2, 0, 1, 3, 3, ... , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(255,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-09-01') ... ('b', '2015-08-30')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-09-01    4\nl    2015-09-01    5\no    2015-08-28    4\nc    2015-08-28    5\nx    2015-08-28    2\n                  ..\nb    2015-08-25    1\nh    2015-08-30    1\nx    2015-08-26    1\nr    2015-09-01    1\nb    2015-08-30    1\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n## Case 157\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4\n1       3\n2       9\n3       4\n4       4\n       ..\n9995    9\n9996    5\n9997    5\n9998    5\n9999    0\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([4, 3, 9, 1, 7, 0, 5, 6, 8, 2])`, type: `ndarray`\n\nval, value: `array([4, 3, 9, ..., 5, 5, 0])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([   0,  155,  757, ..., 9341, 9572, 9767])`, type: `ndarray`\n\nidx, value: `array([   0,  405,  776, 1168, 1562, 1970, 2352, 2765, 3131, 3517, 3913,\n       4257, 4660, 5077, 5448, 5855, 6214, 6618, 6969, 7360, 7745, 8115,\n       8493, 8863, 9274, 9633])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['p', 'w', 'j', 't', 'f', 'z', 'b', 'x', 'd', 'v', 'u', 'a', 'q', 's',\n       'm', 'g', 'y', 'r', 'l', 'e', 'n', 'k', 'o', 'c', 'i', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    10\nw    10\nj    10\nt    10\nf    10\nz    10\nb    10\nx    10\nd    10\nv    10\nu    10\na    10\nq    10\ns    10\nm    10\ng    10\ny    10\nr    10\nl    10\ne    10\nn    10\nk    10\no    10\nc    10\ni    10\nh    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 158\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4\n1       3\n2       9\n3       4\n4       4\n       ..\n9995    9\n9996    5\n9997    5\n9998    5\n9999    0\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([4, 3, 9, 1, 7, 0, 5, 6, 8, 2])`, type: `ndarray`\n\nval, value: `array([4, 3, 9, ..., 5, 5, 0])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([   0,  155, 2424, ..., 6919, 8015, 9979])`, type: `ndarray`\n\nidx, value: `array([   0,   52,   92,  133,  176, ... , 9804, 9855, 9898, 9934, 9961])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10,  9, 10,  9, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10,  9, 10,  9, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-08-29') ... ('t', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-08-29    10\nw    2015-08-28    10\nj    2015-09-01    10\nt    2015-08-27    10\nf    2015-09-01    10\n                   ..\nc    2015-08-24    10\nm    2015-08-25     9\nd    2015-08-23    10\nf    2015-08-26     9\nt    2015-08-30    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 159\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4.0\n1       3.0\n2       9.0\n3       4.0\n4       4.0\n       ... \n9995    9.0\n9996    5.0\n9997    5.0\n9998    5.0\n9999    0.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([4., 3., 9., 5., 0., 1., 7., 6., 8., 2.])`, type: `ndarray`\n\nval, value: `array([4., 3., 9., ..., 5., 5., 0.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9307, 9341, 9767])`, type: `ndarray`\n\nidx, value: `array([ 589,  972, 1339, 1713, 2098, 2460, 2842, 3187, 3552, 3928, 4244,\n       4623, 5020, 5370, 5753, 6088, 6475, 6811, 7174, 7537, 7881, 8226,\n       8577, 8929, 9324, 9663])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['p', 'j', 't', 'f', 'z', 'b', 'x', 'd', 'v', 'u', 'a', 'q', 's', 'm',\n       'g', 'y', 'r', 'l', 'e', 'n', 'w', 'k', 'o', 'c', 'i', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    10\nj    10\nt    10\nf    10\nz    10\nb    10\nx    10\nd    10\nv    10\nu    10\na    10\nq    10\ns    10\nm    10\ng    10\ny    10\nr    10\nl    10\ne    10\nn    10\nw    10\nk    10\no    10\nc    10\ni    10\nh    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 160\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4.0\n1       3.0\n2       9.0\n3       4.0\n4       4.0\n       ... \n9995    9.0\n9996    5.0\n9997    5.0\n9998    5.0\n9999    0.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([4., 3., 9., 5., 0., 1., 7., 6., 8., 2.])`, type: `ndarray`\n\nval, value: `array([4., 3., 9., ..., 5., 5., 0.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6919, 8015, 9979])`, type: `ndarray`\n\nidx, value: `array([ 844,  892,  930,  973, 1015, ... , 9840, 9875, 9905, 9938, 9963])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n        8,  9,  9,  9,  9,  9])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10,  9, ... ,  8,\n        9,  9,  9,  9,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-08-29') ... ('t', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-08-29    10\nj    2015-09-01    10\nf    2015-09-01    10\nz    2015-08-27    10\nj    2015-08-24    10\n                   ..\ny    2015-08-29     9\nd    2015-08-23     9\no    2015-08-31     9\nf    2015-08-26     9\nt    2015-08-30     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 161\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4.0\n1       3.0\n2       9.0\n3       4.0\n4       4.0\n       ... \n9995    9.0\n9996    5.0\n9997    5.0\n9998    5.0\n9999    0.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([4., 3., 9., 5., 0., 1., 7., 6., 8., 2.])`, type: `ndarray`\n\nval, value: `array([4., 3., 9., ..., 5., 5., 0.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9307, 9341, 9767])`, type: `ndarray`\n\nidx, value: `array([ 589,  972, 1339, 1713, 2098, 2460, 2842, 3187, 3552, 3928, 4244,\n       4623, 5020, 5370, 5753, 6088, 6475, 6811, 7174, 7537, 7881, 8226,\n       8577, 8929, 9324, 9663])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['p', 'j', 't', 'f', 'z', 'b', 'x', 'd', 'v', 'u', 'a', 'q', 's', 'm',\n       'g', 'y', 'r', 'l', 'e', 'n', 'w', 'k', 'o', 'c', 'i', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    10\nj    10\nt    10\nf    10\nz    10\nb    10\nx    10\nd    10\nv    10\nu    10\na    10\nq    10\ns    10\nm    10\ng    10\ny    10\nr    10\nl    10\ne    10\nn    10\nw    10\nk    10\no    10\nc    10\ni    10\nh    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 162\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       4.0\n1       3.0\n2       9.0\n3       4.0\n4       4.0\n       ... \n9995    9.0\n9996    5.0\n9997    5.0\n9998    5.0\n9999    0.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([4., 3., 9., 5., 0., 1., 7., 6., 8., 2.])`, type: `ndarray`\n\nval, value: `array([4., 3., 9., ..., 5., 5., 0.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6919, 8015, 9979])`, type: `ndarray`\n\nidx, value: `array([ 844,  892,  930,  973, 1015, ... , 9840, 9875, 9905, 9938, 9963])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n        8,  9,  9,  9,  9,  9])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10,  9, ... ,  8,\n        9,  9,  9,  9,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-08-29') ... ('t', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-08-29    10\nj    2015-09-01    10\nf    2015-09-01    10\nz    2015-08-27    10\nj    2015-08-24    10\n                   ..\ny    2015-08-29     9\nd    2015-08-23     9\no    2015-08-31     9\nf    2015-08-26     9\nt    2015-08-30     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 163\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        4\n1        6\n2        2\n3        5\n4        6\n        ..\n99995    7\n99996    8\n99997    5\n99998    0\n99999    5\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([4, 6, 2, 5, 3, 7, 0, 1, 8, 9])`, type: `ndarray`\n\nval, value: `array([4, 6, 2, ..., 5, 0, 5])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([    0,   226,   383, ..., 99394, 99887, 99990])`, type: `ndarray`\n\nidx, value: `array([    0,  3841,  7784, 11732, 15650, 19456, 23390, 27247, 31084,\n       34873, 38764, 42645, 46513, 50363, 54194, 58030, 61761, 65547,\n       69332, 73212, 77124, 81002, 84806, 88613, 92409, 96242])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['i', 'f', 'r', 'l', 'x', 'j', 'p', 'm', 'g', 'd', 'y', 'a', 'e', 'w',\n       'b', 'q', 'c', 'u', 'n', 'h', 't', 'k', 'z', 'o', 'v', 's'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ni    10\nf    10\nr    10\nl    10\nx    10\nj    10\np    10\nm    10\ng    10\nd    10\ny    10\na    10\ne    10\nw    10\nb    10\nq    10\nc    10\nu    10\nn    10\nh    10\nt    10\nk    10\nz    10\no    10\nv    10\ns    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 164\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        4\n1        6\n2        2\n3        5\n4        6\n        ..\n99995    7\n99996    8\n99997    5\n99998    0\n99999    5\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([4, 6, 2, 5, 3, 7, 0, 1, 8, 9])`, type: `ndarray`\n\nval, value: `array([4, 6, 2, ..., 5, 0, 5])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([    0,  6396,  6872, ..., 87206, 94470, 98577])`, type: `ndarray`\n\nidx, value: `array([    0,   401,   801,  1204, ... , 98086, 98470, 98877, 99231, 99598])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('i', '2015-08-29') ... ('v', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ni    2015-08-29    10\nf    2015-08-24    10\nr    2015-09-01    10\nl    2015-08-23    10\nx    2015-08-28    10\n                   ..\nd    2015-09-01    10\nj    2015-08-27    10\nx    2015-08-25    10\nr    2015-08-30    10\nv    2015-08-23    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 165\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        4.0\n1        6.0\n2        2.0\n3        5.0\n4        6.0\n        ... \n99995    7.0\n99996    8.0\n99997    5.0\n99998    0.0\n99999    5.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([4., 6., 2., 5., 3., 7., 0., 1., 8., 9.])`, type: `ndarray`\n\nval, value: `array([4., 6., 2., ..., 5., 0., 5.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 99280, 99710, 99867])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9494, 13225, 16909, 20484, 24184, 27822, 31439, 35021,\n       38685, 42336, 45961, 49585, 53180, 56808, 60332, 63893, 67466,\n       71105, 74778, 78422, 82001, 85592, 89171, 92783, 96302])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['i', 'r', 'l', 'x', 'j', 'p', 'm', 'g', 'd', 'y', 'a', 'e', 'w', 'b',\n       'q', 'c', 'u', 'n', 'h', 't', 'k', 'z', 'o', 'v', 's', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ni    10\nr    10\nl    10\nx    10\nj    10\np    10\nm    10\ng    10\nd    10\ny    10\na    10\ne    10\nw    10\nb    10\nq    10\nc    10\nu    10\nn    10\nh    10\nt    10\nk    10\nz    10\no    10\nv    10\ns    10\nf    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 166\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        4.0\n1        6.0\n2        2.0\n3        5.0\n4        6.0\n        ... \n99995    7.0\n99996    8.0\n99997    5.0\n99998    0.0\n99999    5.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([4., 6., 2., 5., 3., 7., 0., 1., 8., 9.])`, type: `ndarray`\n\nval, value: `array([4., 6., 2., ..., 5., 0., 5.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 87558, 90739, 98288])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8786,  9168,  9524, ... , 98215, 98547, 98951, 99323, 99631])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n       10, 10, 10, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('i', '2015-08-29') ... ('b', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ni    2015-08-29    10\nr    2015-09-01    10\nx    2015-08-28    10\nj    2015-08-24    10\np    2015-08-27    10\n                   ..\nr    2015-08-30    10\nh    2015-08-27    10\nv    2015-08-23    10\nq    2015-08-25    10\nb    2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 167\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        4.0\n1        6.0\n2        2.0\n3        5.0\n4        6.0\n        ... \n99995    7.0\n99996    8.0\n99997    5.0\n99998    0.0\n99999    5.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([4., 6., 2., 5., 3., 7., 0., 1., 8., 9.])`, type: `ndarray`\n\nval, value: `array([4., 6., 2., ..., 5., 0., 5.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 99280, 99710, 99867])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9494, 13225, 16909, 20484, 24184, 27822, 31439, 35021,\n       38685, 42336, 45961, 49585, 53180, 56808, 60332, 63893, 67466,\n       71105, 74778, 78422, 82001, 85592, 89171, 92783, 96302])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['i', 'r', 'l', 'x', 'j', 'p', 'm', 'g', 'd', 'y', 'a', 'e', 'w', 'b',\n       'q', 'c', 'u', 'n', 'h', 't', 'k', 'z', 'o', 'v', 's', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ni    10\nr    10\nl    10\nx    10\nj    10\np    10\nm    10\ng    10\nd    10\ny    10\na    10\ne    10\nw    10\nb    10\nq    10\nc    10\nu    10\nn    10\nh    10\nt    10\nk    10\nz    10\no    10\nv    10\ns    10\nf    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 168\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        4.0\n1        6.0\n2        2.0\n3        5.0\n4        6.0\n        ... \n99995    7.0\n99996    8.0\n99997    5.0\n99998    0.0\n99999    5.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([4., 6., 2., 5., 3., 7., 0., 1., 8., 9.])`, type: `ndarray`\n\nval, value: `array([4., 6., 2., ..., 5., 0., 5.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 87558, 90739, 98288])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8786,  9168,  9524, ... , 98215, 98547, 98951, 99323, 99631])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n       10, 10, 10, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('i', '2015-08-29') ... ('b', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ni    2015-08-29    10\nr    2015-09-01    10\nx    2015-08-28    10\nj    2015-08-24    10\np    2015-08-27    10\n                   ..\nr    2015-08-30    10\nh    2015-08-27    10\nv    2015-08-23    10\nq    2015-08-25    10\nb    2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 169\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     39\n1     51\n2     25\n3     45\n4     39\n      ..\n95     1\n96    24\n97    20\n98    31\n99    22\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,\n        2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,\n        4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,\n        8,  8,  8,  8,  8,  9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12,\n       12, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 17,\n       18, 18, 18, 19, 19, 20, 21, 21, 21, 22, 23, 23, 23, 23, 24])`, type: `ndarray`\n\n_, value: `array([39, 51, 25, 45, 18,  5, 54, 38, 19, 13, 67,  1, 75, 93, 43, 62, 60,\n       29, 34, 85, 95, 90, 16, 57, 28, 55, 20, 71, 74, 33, 99,  4,  7, 86,\n        9, 12, 70, 47, 81, 41, 26,  2, 24, 23, 87,  3, 78, 56, 49, 91, 36,\n       40, 59, 61, 98, 21, 27, 31, 22])`, type: `ndarray`\n\nval, value: `array([39, 51, 25, 45, 39, 18,  5, 54, 38, 19, 13, 13, 67,  1, 75, 93, 67,\n       43, 62, 60, 29, 18, 43, 34, 85, 95, 90, 75, 51, 16, 57, 28, 55, 19,\n       20, 75, 75, 71, 74, 33, 99, 74,  4,  7, 51, 86, 57, 33, 19, 29,  9,\n       34, 12, 12, 39, 70, 55, 47, 12, 81, 41,  7, 26, 55,  2, 12, 24, 23,\n        7, 25,  7, 87,  3, 78, 56, 49, 91, 12, 36, 23,  5,  5, 40, 59, 61,\n       57, 56, 86, 57,  1, 13, 98, 26, 21, 27,  1, 24, 20, 31, 22])`, type: `ndarray`\n\ncodes, value: `array([ 0,  4,  9, 25, 25, 35, 42,  1, 12, 18, 22, 26, 32, 33, 34,  2, 11,\n       14, 23, 43,  3, 11, 14, 30, 35, 35, 36, 37,  0, 18, 20, 25, 27, 35,\n       39,  5, 23, 28, 31,  6, 12, 32, 38, 55,  1,  7,  9, 13, 47, 52,  4,\n        8, 24, 35, 48, 54,  9, 10, 26, 44,  1,  2, 11, 16, 42, 57, 12, 43,\n       58, 10, 45, 50, 15, 33, 56, 17, 19,  5, 21, 46, 12, 23, 28, 32, 40,\n        8, 17, 49, 29, 47, 23,  8, 29, 41,  0,  5, 32, 51, 53, 40])`, type: `ndarray`\n\nsorter, value: `array([ 0,  5, 11, 32, 56, 77, 96,  1, 36, 51, 29, 34, 61, 87, 50,  2, 95,\n       22, 85, 79,  3, 89, 17, 40, 52, 65, 55, 57,  4, 23, 25, 63, 37, 58,\n       60,  6, 30, 41, 42,  7, 35, 43, 59, 93, 44,  8, 90, 15, 86, 83, 21,\n        9, 31, 53, 75, 91, 10, 12, 97, 71, 28, 69, 13, 19, 66, 98, 14, 67,\n       99, 16, 72, 78, 18, 45, 94, 20, 24, 80, 26, 73, 27, 88, 38, 70, 62,\n       33, 49, 76, 39, 74, 46, 48, 47, 64, 54, 81, 68, 82, 84, 92])`, type: `ndarray`\n\nidx, value: `array([ 0,  7, 15, 20, 28, 35, 39, 44, 50, 56, 57, 60, 66, 69, 72, 75, 77,\n       80, 85, 88, 90, 91, 94, 95, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 8, 5, 7, 7, 4, 5, 6, 6, 1, 3, 6, 3, 3, 3, 2, 3, 5, 3, 2, 1, 3,\n       1, 4, 1])`, type: `ndarray`\n\nres, value: `array([6, 8, 5, 7, 7, 4, 5, 6, 6, 1, 3, 6, 3, 3, 3, 2, 3, 5, 3, 2, 1, 3,\n       1, 4, 1])`, type: `ndarray`\n\nri, value: `Index(['e', 'x', 'g', 'm', 'q', 'k', 'u', 'o', 'c', 'z', 'v', 'i', 'l', 'b',\n       'r', 'a', 'n', 'd', 't', 'w', 'p', 'f', 's', 'j', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ne    6\nx    8\ng    5\nm    7\nq    7\nk    4\nu    5\no    6\nc    6\nz    1\nv    3\ni    6\nl    3\nb    3\nr    3\na    2\nn    3\nd    5\nt    3\nw    2\np    1\nf    3\ns    1\nj    4\nh    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 170\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     39\n1     51\n2     25\n3     45\n4     39\n      ..\n95     1\n96    24\n97    20\n98    31\n99    22\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  1,  1,  2,  3,  3,  3,  4,  5,  5,  6,  7,  7,  7,  7,\n        8,  9, 10, 11, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 21,\n       22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 70, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81])`, type: `ndarray`\n\n_, value: `array([39, 51, 25, 45, 18,  5, 54, 38, 19, 13, 67,  1, 75, 93, 43, 62, 60,\n       29, 34, 85, 95, 90, 16, 57, 28, 55, 20, 71, 74, 33, 99,  4,  7, 86,\n        9, 12, 70, 47, 81, 41, 26,  2, 24, 23, 87,  3, 78, 56, 49, 91, 36,\n       40, 59, 61, 98, 21, 27, 31, 22])`, type: `ndarray`\n\nval, value: `array([39, 51, 25, 45, 39, 18,  5, 54, 38, 19, 13, 13, 67,  1, 75, 93, 67,\n       43, 62, 60, 29, 18, 43, 34, 85, 95, 90, 75, 51, 16, 57, 28, 55, 19,\n       20, 75, 75, 71, 74, 33, 99, 74,  4,  7, 51, 86, 57, 33, 19, 29,  9,\n       34, 12, 12, 39, 70, 55, 47, 12, 81, 41,  7, 26, 55,  2, 12, 24, 23,\n        7, 25,  7, 87,  3, 78, 56, 49, 91, 12, 36, 23,  5,  5, 40, 59, 61,\n       57, 56, 86, 57,  1, 13, 98, 26, 21, 27,  1, 24, 20, 31, 22])`, type: `ndarray`\n\ncodes, value: `array([ 0,  4,  9,  1, 33,  2,  3, 30, 35,  0,  5, 28,  6,  7, 13, 47, 52,\n        8,  9, 10, 11, 12, 10, 11, 14, 15,  2, 16, 17,  4, 35, 14, 18, 19,\n       20, 21, 12,  1, 57, 22, 23, 24, 25,  8, 26, 12, 38, 12, 27, 28, 29,\n       47, 31, 32,  1, 33, 23, 29,  8, 17, 34, 18,  0, 36, 25, 37, 35, 39,\n       32, 32, 40, 25, 41, 35, 42, 43, 32, 44, 45, 46, 48, 49, 35, 50, 43,\n        5,  5, 51, 53, 23, 23,  9, 54, 40, 55, 56, 11, 42, 26, 58])`, type: `ndarray`\n\nsorter, value: `array([ 0,  5, 11,  1, 87,  2,  3, 40, 52,  4,  6, 41,  7,  8, 15, 86, 83,\n        9, 10, 12, 13, 14, 16, 89, 17, 18, 69, 19, 20, 21, 53, 22, 23, 24,\n       25, 26, 27, 28, 98, 29, 30, 31, 32, 33, 34, 35, 59, 36, 37, 38, 39,\n       74, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 60,\n       61, 70, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79,\n       80, 81, 82, 84, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\nidx, value: `array([ 0,  3,  5,  6,  9, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 26,\n       28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47,\n       48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([3, 2, 1, 3, 1, 2, 1, 4, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([3, 2, 1, 3, 1, 2, 1, 4, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('e', '2015-08-25') ... ('l', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(82,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ne    2015-08-25    3\nx    2015-08-24    2\ng    2015-08-26    1\nm    2015-08-31    3\nq    2015-08-28    1\n                  ..\nr    2015-08-29    1\ng    2015-08-31    1\ne    2015-08-24    1\nv    2015-08-23    1\nl    2015-08-31    1\nName: julie, Length: 82, dtype: int64`, type: `Series`\n\n## Case 171\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     39.0\n1     51.0\n2     25.0\n3     45.0\n4     39.0\n      ... \n95     1.0\n96    24.0\n97    20.0\n98    31.0\n99    22.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        1,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  4,  4,\n        4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,\n        8,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13,\n       14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17,\n       17, 18, 18, 19, 19, 20, 21, 21, 21, 22, 23, 23, 23, 23, 24])`, type: `ndarray`\n\n_, value: `array([39., 51., 25., 45., 18.,  5., 13., 67.,  1., 75., 93., 43., 62.,\n       60., 29., 34., 85., 95., 16., 57., 28., 55., 19., 20., 71., 74.,\n       33., 99.,  4.,  7.,  9., 12., 70., 47., 81., 41., 26., 23., 87.,\n        3., 78., 56., 49., 91., 36., 40., 86., 98., 21., 27., 24., 31.,\n       22.])`, type: `ndarray`\n\nval, value: `array([39., 51., 25., 45., 39., ... , 27.,  1., 24., 20., 31., 22.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  2,  9, 12, 31, 41,  0,  4,  6, 21, 21, 31, 50, -1,  2,  8, 11,\n       37, -1,  3,  8, 11, 27, 32, 33,  0, 15, 17, 21, 24, 31, 35,  5, 19,\n       25, 28, -1, 29, 34, 48, -1, -1,  1,  6, 10, -1,  4, 20, 31, 42, 47,\n        6,  7, 23, 38, -1, -1,  8, 13, 51,  9, 37, 52,  7, 39, 44, 14, 16,\n       -1,  5, 40, -1, 19, 25, 29, 36,  9, 15, 18, 23, 29, 30, 46, 14, 22,\n       43, 26, 41, -1, 49, -1, -1, -1, 22,  0, -1,  5, 29, 45, 36])`, type: `ndarray`\n\nsorter, value: `array([ 1, 69, 35, 18, 52, 86,  0,  5, 11, 32, 56, 77, 96, 85,  2, 95, 22,\n       79, 65,  3, 89, 17, 40, 55, 57,  4, 23, 25, 63, 37, 58, 60,  6, 30,\n       41, 42,  7, 43, 59, 93,  8, 83, 44, 90, 15,  9, 21, 31, 53, 75, 91,\n       10, 12, 97, 71, 28, 66, 13, 19, 98, 14, 67, 99, 16, 72, 78, 20, 24,\n       26, 80, 73, 27, 88, 38, 70, 62, 36, 51, 29, 34, 61, 50, 87, 49, 33,\n       76, 39, 74, 45, 94, 46, 47, 64, 48, 54, 84, 81, 68, 82, 92])`, type: `ndarray`\n\nidx, value: `array([ 6, 13, 18, 25, 32, 36, 40, 45, 51, 52, 55, 60, 63, 66, 68, 71, 76,\n       83, 86, 88, 90, 91, 94, 95, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 6, 4, 6, 7, 4, 3, 3, 5, 1, 3, 3, 3, 3, 2, 2, 4, 7, 3, 2, 1, 0,\n       1, 1, 3, 1])`, type: `ndarray`\n\nres, value: `array([6, 4, 6, 7, 4, 3, 3, 5, 1, 3, 3, 3, 3, 2, 2, 4, 7, 3, 2, 1, 0, 1,\n       1, 3, 1])`, type: `ndarray`\n\nri, value: `Index(['e', 'g', 'm', 'q', 'k', 'u', 'o', 'c', 'z', 'v', 'i', 'l', 'b', 'a',\n       'n', 'd', 'x', 't', 'w', 'r', 'p', 'f', 's', 'j', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ne    6\ng    4\nm    6\nq    7\nk    4\nu    3\no    3\nc    5\nz    1\nv    3\ni    3\nl    3\nb    3\na    2\nn    2\nd    4\nx    7\nt    3\nw    2\nr    1\np    0\nf    1\ns    1\nj    3\nh    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 172\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     39.0\n1     51.0\n2     25.0\n3     45.0\n4     39.0\n      ... \n95     1.0\n96    24.0\n97    20.0\n98    31.0\n99    22.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  3,  3,  4,\n        5,  5,  5,  6,  7,  8,  9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17,\n       18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 66, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, value: `array([39., 51., 25., 45., 18.,  5., 13., 67.,  1., 75., 93., 43., 62.,\n       60., 29., 34., 85., 95., 16., 57., 28., 55., 19., 20., 71., 74.,\n       33., 99.,  4.,  7.,  9., 12., 70., 47., 81., 41., 26., 23., 87.,\n        3., 78., 56., 49., 91., 36., 40., 86., 98., 21., 27., 24., 31.,\n       22.])`, type: `ndarray`\n\nval, value: `array([39., 51., 25., 45., 39., ... , 27.,  1., 24., 20., 31., 22.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  2,  3,  9, 12, 27, 31, 31, 41,  0,  4,  6,  2,  0,  5, 25, -1,\n       -1, -1, 10, -1,  6,  7,  8,  9,  7,  8, 11, 13, 14,  4, 31, 11, 15,\n       16, 17, -1, -1, -1, 51, 18, 19, 20, 21, 22, 23,  9, 24, 25, 26, 41,\n       28, 29,  1, -1, -1, -1, 22, 14, 30, 15,  0, 32, 21, 33, 31, 34, 35,\n       29, 29, 36, 21, -1, -1, -1, 37, 29, 38, 39, 40, 42, 43, 44, 37,  5,\n       -1,  5, 45, -1, 46, 19,  6, 47, 36, 48, 49,  8, 50, 23, 52])`, type: `ndarray`\n\nsorter, value: `array([ 1, 69,  3, 35, 18, 40, 52, 77, 86,  0,  5, 11,  2,  4,  6, 41,  7,\n        8, 83, 15,  9, 10, 12, 13, 14, 16, 89, 17, 19, 20, 21, 53, 22, 23,\n       24, 25, 26, 27, 28, 98, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 74,\n       42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60,\n       61, 70, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 78, 79, 80,\n       84, 81, 82, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 12, 13, 14, 16, 17, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32,\n       33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([8, 3, 1, 1, 2, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 0,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([3, 1, 1, 2, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('e', '2015-08-25') ... ('l', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ne    2015-08-25    3\ng    2015-08-26    1\nq    2015-08-28    1\nk    2015-08-23    2\nu    2015-09-01    0\n                  ..\nr    2015-08-29    1\ng    2015-08-31    1\ne    2015-08-24    1\nv    2015-08-23    1\nl    2015-08-31    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n## Case 173\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     39.0\n1     51.0\n2     25.0\n3     45.0\n4     39.0\n      ... \n95     1.0\n96    24.0\n97    20.0\n98    31.0\n99    22.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        1,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  4,  4,\n        4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,\n        8,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13,\n       14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17,\n       17, 18, 18, 19, 19, 20, 21, 21, 21, 22, 23, 23, 23, 23, 24])`, type: `ndarray`\n\n_, value: `array([39., 51., 25., 45., 18.,  5., 13., 67.,  1., 75., 93., 43., 62.,\n       60., 29., 34., 85., 95., 16., 57., 28., 55., 19., 20., 71., 74.,\n       33., 99.,  4.,  7.,  9., 12., 70., 47., 81., 41., 26., 23., 87.,\n        3., 78., 56., 49., 91., 36., 40., 86., 98., 21., 27., 24., 31.,\n       22.])`, type: `ndarray`\n\nval, value: `array([39., 51., 25., 45., 39., ... , 27.,  1., 24., 20., 31., 22.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  2,  9, 12, 31, 41,  0,  4,  6, 21, 21, 31, 50, -1,  2,  8, 11,\n       37, -1,  3,  8, 11, 27, 32, 33,  0, 15, 17, 21, 24, 31, 35,  5, 19,\n       25, 28, -1, 29, 34, 48, -1, -1,  1,  6, 10, -1,  4, 20, 31, 42, 47,\n        6,  7, 23, 38, -1, -1,  8, 13, 51,  9, 37, 52,  7, 39, 44, 14, 16,\n       -1,  5, 40, -1, 19, 25, 29, 36,  9, 15, 18, 23, 29, 30, 46, 14, 22,\n       43, 26, 41, -1, 49, -1, -1, -1, 22,  0, -1,  5, 29, 45, 36])`, type: `ndarray`\n\nsorter, value: `array([ 1, 69, 35, 18, 52, 86,  0,  5, 11, 32, 56, 77, 96, 85,  2, 95, 22,\n       79, 65,  3, 89, 17, 40, 55, 57,  4, 23, 25, 63, 37, 58, 60,  6, 30,\n       41, 42,  7, 43, 59, 93,  8, 83, 44, 90, 15,  9, 21, 31, 53, 75, 91,\n       10, 12, 97, 71, 28, 66, 13, 19, 98, 14, 67, 99, 16, 72, 78, 20, 24,\n       26, 80, 73, 27, 88, 38, 70, 62, 36, 51, 29, 34, 61, 50, 87, 49, 33,\n       76, 39, 74, 45, 94, 46, 47, 64, 48, 54, 84, 81, 68, 82, 92])`, type: `ndarray`\n\nidx, value: `array([ 6, 13, 18, 25, 32, 36, 40, 45, 51, 52, 55, 60, 63, 66, 68, 71, 76,\n       83, 86, 88, 90, 91, 94, 95, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 6, 4, 6, 7, 4, 3, 3, 5, 1, 3, 3, 3, 3, 2, 2, 4, 7, 3, 2, 1, 0,\n       1, 1, 3, 1])`, type: `ndarray`\n\nres, value: `array([6, 4, 6, 7, 4, 3, 3, 5, 1, 3, 3, 3, 3, 2, 2, 4, 7, 3, 2, 1, 0, 1,\n       1, 3, 1])`, type: `ndarray`\n\nri, value: `Index(['e', 'g', 'm', 'q', 'k', 'u', 'o', 'c', 'z', 'v', 'i', 'l', 'b', 'a',\n       'n', 'd', 'x', 't', 'w', 'r', 'p', 'f', 's', 'j', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ne    6\ng    4\nm    6\nq    7\nk    4\nu    3\no    3\nc    5\nz    1\nv    3\ni    3\nl    3\nb    3\na    2\nn    2\nd    4\nx    7\nt    3\nw    2\nr    1\np    0\nf    1\ns    1\nj    3\nh    1\nName: julie, dtype: int64`, type: `Series`\n\n## Case 174\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     39.0\n1     51.0\n2     25.0\n3     45.0\n4     39.0\n      ... \n95     1.0\n96    24.0\n97    20.0\n98    31.0\n99    22.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  3,  3,  4,\n        5,  5,  5,  6,  7,  8,  9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17,\n       18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 66, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, value: `array([39., 51., 25., 45., 18.,  5., 13., 67.,  1., 75., 93., 43., 62.,\n       60., 29., 34., 85., 95., 16., 57., 28., 55., 19., 20., 71., 74.,\n       33., 99.,  4.,  7.,  9., 12., 70., 47., 81., 41., 26., 23., 87.,\n        3., 78., 56., 49., 91., 36., 40., 86., 98., 21., 27., 24., 31.,\n       22.])`, type: `ndarray`\n\nval, value: `array([39., 51., 25., 45., 39., ... , 27.,  1., 24., 20., 31., 22.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  2,  3,  9, 12, 27, 31, 31, 41,  0,  4,  6,  2,  0,  5, 25, -1,\n       -1, -1, 10, -1,  6,  7,  8,  9,  7,  8, 11, 13, 14,  4, 31, 11, 15,\n       16, 17, -1, -1, -1, 51, 18, 19, 20, 21, 22, 23,  9, 24, 25, 26, 41,\n       28, 29,  1, -1, -1, -1, 22, 14, 30, 15,  0, 32, 21, 33, 31, 34, 35,\n       29, 29, 36, 21, -1, -1, -1, 37, 29, 38, 39, 40, 42, 43, 44, 37,  5,\n       -1,  5, 45, -1, 46, 19,  6, 47, 36, 48, 49,  8, 50, 23, 52])`, type: `ndarray`\n\nsorter, value: `array([ 1, 69,  3, 35, 18, 40, 52, 77, 86,  0,  5, 11,  2,  4,  6, 41,  7,\n        8, 83, 15,  9, 10, 12, 13, 14, 16, 89, 17, 19, 20, 21, 53, 22, 23,\n       24, 25, 26, 27, 28, 98, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 74,\n       42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60,\n       61, 70, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 78, 79, 80,\n       84, 81, 82, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 12, 13, 14, 16, 17, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32,\n       33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([8, 3, 1, 1, 2, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 0,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([3, 1, 1, 2, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('e', '2015-08-25') ... ('l', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ne    2015-08-25    3\ng    2015-08-26    1\nq    2015-08-28    1\nk    2015-08-23    2\nu    2015-09-01    0\n                  ..\nr    2015-08-29    1\ng    2015-08-31    1\ne    2015-08-24    1\nv    2015-08-23    1\nl    2015-08-31    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n## Case 175\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      38\n1      16\n2      66\n3      17\n4      37\n       ..\n995    36\n996    58\n997    18\n998    66\n999    38\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([38, 16, 66, 17, 37, 41, 84, 71, 10, 76, 36, 18, 46, 74, 13, 55, 20,\n       85, 28, 22,  0, 47, 19, 44, 92, 91, 50, 42, 78, 94, 21, 33,  7, 24,\n       64, 12, 67, 59, 72, 81,  3, 11, 61, 45, 14, 23, 40, 35,  8, 89,  4,\n       70, 51, 68,  5, 54, 62, 43, 30, 25, 93, 88,  6, 27, 48, 34, 63, 53,\n       31, 49, 15, 90, 87, 96, 26, 39, 86, 29, 79, 80, 52, 73, 65, 95,  2,\n       57, 98, 75, 82, 69, 32, 56, 58, 97, 77,  9,  1, 99, 83, 60])`, type: `ndarray`\n\nval, value: `array([38, 16, 66, 17, 37, 41, 84, ... , 33, 11, 56, 36, 58, 18, 66, 38])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  3,  4,  6,  7,  8, ... , 75, 78, 86, 88, 90, 92, 96, 96])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0, 478,  55, 785, 288, ... , 484, 917, 289, 253, 346, 675])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  42,  89, 129, 169, 213, 248, 280, 320, 355, 400, 434, 466,\n       504, 532, 574, 615, 647, 681, 718, 770, 800, 841, 881, 910, 955])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, ... ,\n       0, 1, 0, 1, 1, 1, 1, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([33, 34, 34, 35, 32, 31, 26, 31, 32, 37, 31, 29, 33, 22, 34, 33, 27,\n       29, 30, 41, 23, 36, 33, 27, 35, 37])`, type: `ndarray`\n\nres, value: `array([33, 34, 34, 35, 32, 31, 26, 31, 32, 37, 31, 29, 33, 22, 34, 33, 27,\n       29, 30, 41, 23, 36, 33, 27, 35, 37])`, type: `ndarray`\n\nri, value: `Index(['a', 'i', 'l', 't', 'm', 'r', 'e', 'j', 'o', 'n', 'k', 'y', 'z', 'g',\n       'x', 'd', 'q', 's', 'b', 'u', 'w', 'h', 'f', 'c', 'p', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    33\ni    34\nl    34\nt    35\nm    32\nr    31\ne    26\nj    31\no    32\nn    37\nk    31\ny    29\nz    33\ng    22\nx    34\nd    33\nq    27\ns    29\nb    30\nu    41\nw    23\nh    36\nf    33\nc    27\np    35\nv    37\nName: julie, dtype: int64`, type: `Series`\n\n## Case 176\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      38\n1      16\n2      66\n3      17\n4      37\n       ..\n995    36\n996    58\n997    18\n998    66\n999    38\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   1, ... , 248, 248, 249, 249, 249, 250])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([38, 16, 66, 17, 37, 41, 84, 71, 10, 76, 36, 18, 46, 74, 13, 55, 20,\n       85, 28, 22,  0, 47, 19, 44, 92, 91, 50, 42, 78, 94, 21, 33,  7, 24,\n       64, 12, 67, 59, 72, 81,  3, 11, 61, 45, 14, 23, 40, 35,  8, 89,  4,\n       70, 51, 68,  5, 54, 62, 43, 30, 25, 93, 88,  6, 27, 48, 34, 63, 53,\n       31, 49, 15, 90, 87, 96, 26, 39, 86, 29, 79, 80, 52, 73, 65, 95,  2,\n       57, 98, 75, 82, 69, 32, 56, 58, 97, 77,  9,  1, 99, 83, 60])`, type: `ndarray`\n\nval, value: `array([38, 16, 66, 17, 37, 41, 84, ... , 33, 11, 56, 36, 58, 18, 66, 38])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ 0, 19, 30, 87,  1,  4, 30, ... , 24,  6, 54, 97,  0, 44, 61, 79])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0, 690, 192, 873,   1, ... , 762, 844, 895, 984, 832, 972])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   4,   8,  15,  20, ... , 991,\n       992, 993, 996, 999])`, shape: `(251,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 4,  4,  7,  4,  8,  3,  1, ... ,  3,  2,  1,  1,  1,  3,  3,  1])`, shape: `(251,)`, type: `ndarray`\n\nres, value: `array([ 4,  4,  7,  4,  8,  3,  1, ... ,  3,  2,  1,  1,  1,  3,  3,  1])`, shape: `(251,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-26') ... ('r', '2015-08-23')],\n           names=['jim', 'joe'], length=251)`, shape: `(251,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-26    4\ni    2015-08-26    4\nl    2015-08-23    7\nt    2015-08-29    4\nm    2015-08-26    8\n                  ..\nt    2015-08-28    1\nk    2015-08-26    1\nt    2015-08-26    3\ne    2015-08-24    3\nr    2015-08-23    1\nName: julie, Length: 251, dtype: int64`, type: `Series`\n\n## Case 177\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      38.0\n1      16.0\n2      66.0\n3      17.0\n4      37.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    66.0\n999    38.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([38., 16., 66., 17., 37., ... , 59.,  1., 99., 83., 60., 77.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([38., 16., 66., 17., 37., ... , 56., nan, nan, nan, 66., 38.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 79, 83, 85, 89, 90, 91, 95, 95])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 917, 253, 278, 289, 346, 675])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  99, 139, 178, 221, 254, 285, 321, 353, 394, 427, 456, 490,\n       516, 560, 597, 636, 669, 704, 753, 783, 813, 849, 889, 916, 958])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([39, 29, 27, 28, 28, 23, 20, 25, 25, 29, 27, 24, 25, 20, 29, 28, 27,\n       24, 24, 33, 22, 26, 32, 29, 24, 28, 27])`, type: `ndarray`\n\nres, value: `array([29, 27, 28, 28, 23, 20, 25, 25, 29, 27, 24, 25, 20, 29, 28, 27, 24,\n       24, 33, 22, 26, 32, 29, 24, 28, 27])`, type: `ndarray`\n\nri, value: `Index(['a', 'l', 't', 'm', 'r', 'e', 'j', 'o', 'n', 'k', 'y', 'z', 'g', 'i',\n       'x', 'd', 's', 'b', 'u', 'w', 'q', 'h', 'f', 'c', 'p', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    29\nl    27\nt    28\nm    28\nr    23\ne    20\nj    25\no    25\nn    29\nk    27\ny    24\nz    25\ng    20\ni    29\nx    28\nd    27\ns    24\nb    24\nu    33\nw    22\nq    26\nh    32\nf    29\nc    24\np    28\nv    27\nName: julie, dtype: int64`, type: `Series`\n\n## Case 178\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      38.0\n1      16.0\n2      66.0\n3      17.0\n4      37.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    66.0\n999    38.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 247, 247, 248, 248, 248, 249])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([38., 16., 66., 17., 37., ... , 59.,  1., 99., 83., 60., 77.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([38., 16., 66., 17., 37., ... , 56., nan, nan, nan, 66., 38.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6, 48, -1,  6,  0, 39, 54, 71])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 788, 903, 895, 984, 832, 972])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  88,  95, 103, 106, ... , 990, 991,\n       994, 996, 999])`, shape: `(250,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([53,  4,  6,  7,  3,  1,  3, ... ,  2,  0,  1,  1,  2,  1,  3,  1])`, shape: `(251,)`, type: `ndarray`\n\nres, value: `array([4, 6, 7, 3, 1, 3, 3, 3, 3, ... ,\n       2, 0, 1, 1, 2, 1, 3, 1])`, shape: `(250,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-26') ... ('r', '2015-08-23')],\n           names=['jim', 'joe'], length=250)`, shape: `(250,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-26    4\nl    2015-08-23    6\nm    2015-08-26    7\nr    2015-08-30    3\ne    2015-08-25    1\n                  ..\nk    2015-08-26    1\nt    2015-08-26    2\ni    2015-08-28    1\ne    2015-08-24    3\nr    2015-08-23    1\nName: julie, Length: 250, dtype: int64`, type: `Series`\n\n## Case 179\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      38.0\n1      16.0\n2      66.0\n3      17.0\n4      37.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    66.0\n999    38.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([38., 16., 66., 17., 37., ... , 59.,  1., 99., 83., 60., 77.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([38., 16., 66., 17., 37., ... , 56., nan, nan, nan, 66., 38.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 79, 83, 85, 89, 90, 91, 95, 95])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 917, 253, 278, 289, 346, 675])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  99, 139, 178, 221, 254, 285, 321, 353, 394, 427, 456, 490,\n       516, 560, 597, 636, 669, 704, 753, 783, 813, 849, 889, 916, 958])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([39, 29, 27, 28, 28, 23, 20, 25, 25, 29, 27, 24, 25, 20, 29, 28, 27,\n       24, 24, 33, 22, 26, 32, 29, 24, 28, 27])`, type: `ndarray`\n\nres, value: `array([29, 27, 28, 28, 23, 20, 25, 25, 29, 27, 24, 25, 20, 29, 28, 27, 24,\n       24, 33, 22, 26, 32, 29, 24, 28, 27])`, type: `ndarray`\n\nri, value: `Index(['a', 'l', 't', 'm', 'r', 'e', 'j', 'o', 'n', 'k', 'y', 'z', 'g', 'i',\n       'x', 'd', 's', 'b', 'u', 'w', 'q', 'h', 'f', 'c', 'p', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    29\nl    27\nt    28\nm    28\nr    23\ne    20\nj    25\no    25\nn    29\nk    27\ny    24\nz    25\ng    20\ni    29\nx    28\nd    27\ns    24\nb    24\nu    33\nw    22\nq    26\nh    32\nf    29\nc    24\np    28\nv    27\nName: julie, dtype: int64`, type: `Series`\n\n## Case 180\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      38.0\n1      16.0\n2      66.0\n3      17.0\n4      37.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    66.0\n999    38.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 247, 247, 248, 248, 248, 249])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([38., 16., 66., 17., 37., ... , 59.,  1., 99., 83., 60., 77.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([38., 16., 66., 17., 37., ... , 56., nan, nan, nan, 66., 38.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6, 48, -1,  6,  0, 39, 54, 71])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 788, 903, 895, 984, 832, 972])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  88,  95, 103, 106, ... , 990, 991,\n       994, 996, 999])`, shape: `(250,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([53,  4,  6,  7,  3,  1,  3, ... ,  2,  0,  1,  1,  2,  1,  3,  1])`, shape: `(251,)`, type: `ndarray`\n\nres, value: `array([4, 6, 7, 3, 1, 3, 3, 3, 3, ... ,\n       2, 0, 1, 1, 2, 1, 3, 1])`, shape: `(250,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-26') ... ('r', '2015-08-23')],\n           names=['jim', 'joe'], length=250)`, shape: `(250,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-26    4\nl    2015-08-23    6\nm    2015-08-26    7\nr    2015-08-30    3\ne    2015-08-25    1\n                  ..\nk    2015-08-26    1\nt    2015-08-26    2\ni    2015-08-28    1\ne    2015-08-24    3\nr    2015-08-23    1\nName: julie, Length: 250, dtype: int64`, type: `Series`\n\n## Case 181\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       48\n1       64\n2       93\n3        9\n4        0\n        ..\n9995    92\n9996    63\n9997    95\n9998    56\n9999    63\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([48, 64, 93,  9,  0, 94, 57, 63, 10, 85, 95, 87, 83,  2, 74, 46, 45,\n       77, 72, 51, 89, 76, 40, 47, 16, 32, 22,  5, 20, 24, 91, 13, 60, 43,\n       78,  8, 36, 96, 79, 50, 28, 29, 68, 17, 37, 30, 84,  3, 80, 82, 70,\n       26, 27, 62, 98,  7, 88, 15, 21, 73, 11, 44,  4, 33, 25, 18, 34, 35,\n       90, 54, 56, 41, 12, 39, 71, 65, 38, 14, 99, 42, 23, 75,  6, 59, 19,\n       55, 69, 81, 61, 66, 86,  1, 97, 67, 52, 31, 58, 53, 49, 92])`, type: `ndarray`\n\nval, value: `array([48, 64, 93, ..., 95, 56, 63])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([   0, 1767, 7787, ..., 2722, 4705, 5182])`, type: `ndarray`\n\nidx, value: `array([   0,  455,  844, 1215, 1597, 2005, 2394, 2717, 3100, 3462, 3846,\n       4237, 4606, 4985, 5351, 5751, 6144, 6536, 6930, 7319, 7687, 8071,\n       8474, 8863, 9235, 9624])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  99,  97,  98,  98,  98,  96,  98,  99,  96, 100,  97,  97,\n       100,  98,  98,  97,  98, 100,  99,  98,  99,  97,  97,  98,  97])`, type: `ndarray`\n\nres, value: `array([100,  99,  97,  98,  98,  98,  96,  98,  99,  96, 100,  97,  97,\n       100,  98,  98,  97,  98, 100,  99,  98,  99,  97,  97,  98,  97])`, type: `ndarray`\n\nri, value: `Index(['d', 'q', 'u', 'x', 'h', 'v', 'e', 'r', 't', 'g', 'z', 'f', 'b', 'o',\n       'c', 'y', 'k', 'j', 'w', 'a', 'n', 'm', 's', 'p', 'i', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nd    100\nq     99\nu     97\nx     98\nh     98\nv     98\ne     96\nr     98\nt     99\ng     96\nz    100\nf     97\nb     97\no    100\nc     98\ny     98\nk     97\nj     98\nw    100\na     99\nn     98\nm     99\ns     97\np     97\ni     98\nl     97\nName: julie, dtype: int64`, type: `Series`\n\n## Case 182\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       48\n1       64\n2       93\n3        9\n4        0\n        ..\n9995    92\n9996    63\n9997    95\n9998    56\n9999    63\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([48, 64, 93,  9,  0, 94, 57, 63, 10, 85, 95, 87, 83,  2, 74, 46, 45,\n       77, 72, 51, 89, 76, 40, 47, 16, 32, 22,  5, 20, 24, 91, 13, 60, 43,\n       78,  8, 36, 96, 79, 50, 28, 29, 68, 17, 37, 30, 84,  3, 80, 82, 70,\n       26, 27, 62, 98,  7, 88, 15, 21, 73, 11, 44,  4, 33, 25, 18, 34, 35,\n       90, 54, 56, 41, 12, 39, 71, 65, 38, 14, 99, 42, 23, 75,  6, 59, 19,\n       55, 69, 81, 61, 66, 86,  1, 97, 67, 52, 31, 58, 53, 49, 92])`, type: `ndarray`\n\nval, value: `array([48, 64, 93, ..., 95, 56, 63])`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  6, ..., 94, 98, 98])`, type: `ndarray`\n\nsorter, value: `array([   0, 7710, 3579, ..., 6475, 2565, 9965])`, type: `ndarray`\n\nidx, value: `array([   0,   36,   68,  101,  143, ... , 9833, 9865, 9906, 9942, 9973])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([29, 30, 31, 33, 45, 36, 36, ... , 30,\n       30, 35, 30, 28, 20])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([29, 30, 31, 33, 45, 36, 36, ... , 30,\n       30, 35, 30, 28, 20])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('d', '2015-08-23') ... ('k', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nd    2015-08-23    29\nq    2015-08-23    30\nu    2015-08-26    31\nx    2015-08-23    33\nh    2015-08-27    45\n                   ..\ny    2015-08-23    30\nm    2015-08-28    35\nx    2015-08-31    30\nv    2015-08-24    28\nk    2015-08-28    20\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 183\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       48.0\n1       64.0\n2       93.0\n3        9.0\n4        0.0\n        ... \n9995    92.0\n9996    63.0\n9997    95.0\n9998    56.0\n9999    63.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([48., 64., 93.,  9.,  0., ... , 53., 14., 49., 40., 92., 99.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([48., 64., 93., ..., 95., 56., 63.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6701, 7218, 9295])`, type: `ndarray`\n\nidx, value: `array([ 589, 1008, 1359, 1714, 2100, 2464, 2770, 3131, 3473, 3840, 4211,\n       4553, 4913, 5256, 5627, 6003, 6367, 6737, 7115, 7474, 7841, 8226,\n       8592, 8939, 9288, 9651])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([99, 97, 94, 95, 96, 97, 91, 97, 95, 96, 99, 95, 96, 99, 96, 95, 96,\n       94, 96, 98, 97, 97, 95, 94, 95, 96, 95])`, type: `ndarray`\n\nres, value: `array([97, 94, 95, 96, 97, 91, 97, 95, 96, 99, 95, 96, 99, 96, 95, 96, 94,\n       96, 98, 97, 97, 95, 94, 95, 96, 95])`, type: `ndarray`\n\nri, value: `Index(['d', 'u', 'x', 'h', 'v', 'e', 'r', 't', 'g', 'z', 'f', 'b', 'o', 'c',\n       'y', 'q', 'k', 'j', 'w', 'n', 'm', 's', 'p', 'a', 'i', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nd    97\nu    94\nx    95\nh    96\nv    97\ne    91\nr    97\nt    95\ng    96\nz    99\nf    95\nb    96\no    99\nc    96\ny    95\nq    96\nk    94\nj    96\nw    98\nn    97\nm    97\ns    95\np    94\na    95\ni    96\nl    95\nName: julie, dtype: int64`, type: `Series`\n\n## Case 184\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       48.0\n1       64.0\n2       93.0\n3        9.0\n4        0.0\n        ... \n9995    92.0\n9996    63.0\n9997    95.0\n9998    56.0\n9999    63.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([48., 64., 93.,  9.,  0., ... , 53., 14., 49., 40., 92., 99.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([48., 64., 93., ..., 95., 56., 63.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 89, 93, 96])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6475, 6439, 2565])`, type: `ndarray`\n\nidx, value: `array([ 844,  879,  910,  964,  999, ... , 9852, 9876, 9913, 9946, 9974])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([99, 23, 23, 35, 30, 34, 19, ... ,\n       24, 20, 27, 26, 23, 18])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([23, 23, 35, 30, 34, 19, 29, ... , 24,\n       20, 27, 26, 23, 18])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('d', '2015-08-23') ... ('k', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nd    2015-08-23    23\nu    2015-08-26    23\nh    2015-08-27    35\nu    2015-08-27    30\nv    2015-08-26    34\n                   ..\nn    2015-09-01    20\nm    2015-08-28    27\nx    2015-08-31    26\nv    2015-08-24    23\nk    2015-08-28    18\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 185\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       48.0\n1       64.0\n2       93.0\n3        9.0\n4        0.0\n        ... \n9995    92.0\n9996    63.0\n9997    95.0\n9998    56.0\n9999    63.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([48., 64., 93.,  9.,  0., ... , 53., 14., 49., 40., 92., 99.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([48., 64., 93., ..., 95., 56., 63.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6701, 7218, 9295])`, type: `ndarray`\n\nidx, value: `array([ 589, 1008, 1359, 1714, 2100, 2464, 2770, 3131, 3473, 3840, 4211,\n       4553, 4913, 5256, 5627, 6003, 6367, 6737, 7115, 7474, 7841, 8226,\n       8592, 8939, 9288, 9651])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([99, 97, 94, 95, 96, 97, 91, 97, 95, 96, 99, 95, 96, 99, 96, 95, 96,\n       94, 96, 98, 97, 97, 95, 94, 95, 96, 95])`, type: `ndarray`\n\nres, value: `array([97, 94, 95, 96, 97, 91, 97, 95, 96, 99, 95, 96, 99, 96, 95, 96, 94,\n       96, 98, 97, 97, 95, 94, 95, 96, 95])`, type: `ndarray`\n\nri, value: `Index(['d', 'u', 'x', 'h', 'v', 'e', 'r', 't', 'g', 'z', 'f', 'b', 'o', 'c',\n       'y', 'q', 'k', 'j', 'w', 'n', 'm', 's', 'p', 'a', 'i', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nd    97\nu    94\nx    95\nh    96\nv    97\ne    91\nr    97\nt    95\ng    96\nz    99\nf    95\nb    96\no    99\nc    96\ny    95\nq    96\nk    94\nj    96\nw    98\nn    97\nm    97\ns    95\np    94\na    95\ni    96\nl    95\nName: julie, dtype: int64`, type: `Series`\n\n## Case 186\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       48.0\n1       64.0\n2       93.0\n3        9.0\n4        0.0\n        ... \n9995    92.0\n9996    63.0\n9997    95.0\n9998    56.0\n9999    63.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([48., 64., 93.,  9.,  0., ... , 53., 14., 49., 40., 92., 99.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([48., 64., 93., ..., 95., 56., 63.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 89, 93, 96])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6475, 6439, 2565])`, type: `ndarray`\n\nidx, value: `array([ 844,  879,  910,  964,  999, ... , 9852, 9876, 9913, 9946, 9974])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([99, 23, 23, 35, 30, 34, 19, ... ,\n       24, 20, 27, 26, 23, 18])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([23, 23, 35, 30, 34, 19, 29, ... , 24,\n       20, 27, 26, 23, 18])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('d', '2015-08-23') ... ('k', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nd    2015-08-23    23\nu    2015-08-26    23\nh    2015-08-27    35\nu    2015-08-27    30\nv    2015-08-26    34\n                   ..\nn    2015-09-01    20\nm    2015-08-28    27\nx    2015-08-31    26\nv    2015-08-24    23\nk    2015-08-28    18\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 187\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        43\n1        15\n2        14\n3        54\n4        37\n         ..\n99995    92\n99996    23\n99997    14\n99998    93\n99999     6\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([43, 15, 14, 54, 37, 82, 60, 57, 36, 45, 13, 48, 93, 61, 44, 76, 74,\n        9, 55, 40, 99, 72, 67, 92, 52, 65, 73, 97, 33, 80, 64, 77, 31, 19,\n       71, 51, 34, 25, 53, 47, 84, 68, 88, 12, 21, 95, 23, 58, 17, 24, 38,\n       63,  8, 94, 66,  0, 87, 50, 26, 69, 91, 49, 30, 62, 16,  4, 28, 90,\n       75, 96, 81,  2, 20, 27, 59, 78,  7, 85, 98, 46, 42, 18, 83, 79, 70,\n       41, 22, 56, 35, 39,  5, 86, 89, 32,  3,  6, 29, 10,  1, 11])`, type: `ndarray`\n\nval, value: `array([43, 15, 14, ..., 14, 93,  6])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([    0,   573,  2689, ..., 97566, 98626, 99164])`, type: `ndarray`\n\nidx, value: `array([    0,  3878,  7718, 11679, 15463, 19265, 23049, 26911, 30785,\n       34744, 38560, 42356, 46176, 50096, 53970, 57831, 61797, 65654,\n       69448, 73223, 76994, 80847, 84666, 88566, 92328, 96177])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['k', 's', 'd', 'g', 'z', 'u', 'h', 'e', 'o', 'm', 'y', 'p', 'b', 'l',\n       'a', 'x', 'f', 'q', 'v', 'w', 'c', 'n', 'r', 't', 'j', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    100\ns    100\nd    100\ng    100\nz    100\nu    100\nh    100\ne    100\no    100\nm    100\ny    100\np    100\nb    100\nl    100\na    100\nx    100\nf    100\nq    100\nv    100\nw    100\nc    100\nn    100\nr    100\nt    100\nj    100\ni    100\nName: julie, dtype: int64`, type: `Series`\n\n## Case 188\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        43\n1        15\n2        14\n3        54\n4        37\n         ..\n99995    92\n99996    23\n99997    14\n99998    93\n99999     6\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([43, 15, 14, 54, 37, 82, 60, 57, 36, 45, 13, 48, 93, 61, 44, 76, 74,\n        9, 55, 40, 99, 72, 67, 92, 52, 65, 73, 97, 33, 80, 64, 77, 31, 19,\n       71, 51, 34, 25, 53, 47, 84, 68, 88, 12, 21, 95, 23, 58, 17, 24, 38,\n       63,  8, 94, 66,  0, 87, 50, 26, 69, 91, 49, 30, 62, 16,  4, 28, 90,\n       75, 96, 81,  2, 20, 27, 59, 78,  7, 85, 98, 46, 42, 18, 83, 79, 70,\n       41, 22, 56, 35, 39,  5, 86, 89, 32,  3,  6, 29, 10,  1, 11])`, type: `ndarray`\n\nval, value: `array([43, 15, 14, ..., 14, 93,  6])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 97, 97, 99])`, type: `ndarray`\n\nsorter, value: `array([    0, 14993, 32098, ..., 68546, 84243, 99958])`, type: `ndarray`\n\nidx, value: `array([    0,   376,   757,  1184, ... , 98116, 98486, 98877, 99254, 99598])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 99,  96,  99,  98,  96, ... ,  96,  95,  98,  97,  97,  99])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([ 99,  96,  99,  98,  96, ... ,  96,  95,  98,  97,  97,  99])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-08-31') ... ('b', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-08-31    99\ns    2015-08-24    96\nd    2015-08-24    99\ng    2015-08-25    98\nz    2015-08-29    96\n                   ..\nc    2015-08-23    95\nd    2015-08-29    98\ni    2015-08-31    97\nm    2015-08-28    97\nb    2015-08-27    99\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 189\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        43.0\n1        15.0\n2        14.0\n3        54.0\n4        37.0\n         ... \n99995    92.0\n99996    23.0\n99997    14.0\n99998    93.0\n99999     6.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([43., 15., 14., 54., 37., ... ,  6., 29., 10.,  1., 36., 11.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([43., 15., 14., ..., 14., 93.,  6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 97566, 98626, 99164])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9524, 13254, 16834, 20425, 23976, 27611, 31264, 34981,\n       38556, 42119, 45722, 49327, 53032, 56671, 60325, 64070, 67713,\n       71283, 74845, 78384, 82018, 85559, 89248, 92773, 96391])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['k', 'd', 'g', 'z', 'u', 'h', 'e', 'o', 'm', 'y', 's', 'p', 'b', 'l',\n       'a', 'x', 'f', 'q', 'v', 'w', 'c', 'n', 'r', 't', 'j', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    100\nd    100\ng    100\nz    100\nu    100\nh    100\ne    100\no    100\nm    100\ny    100\ns    100\np    100\nb    100\nl    100\na    100\nx    100\nf    100\nq    100\nv    100\nw    100\nc    100\nn    100\nr    100\nt    100\nj    100\ni    100\nName: julie, dtype: int64`, type: `Series`\n\n## Case 190\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        43.0\n1        15.0\n2        14.0\n3        54.0\n4        37.0\n         ... \n99995    92.0\n99996    23.0\n99997    14.0\n99998    93.0\n99999     6.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([43., 15., 14., 54., 37., ... ,  6., 29., 10.,  1., 36., 11.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([43., 15., 14., ..., 14., 93.,  6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 32652, 59868, 76795])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8783,  9172,  9525, ... , 98261, 98600, 98917, 99306, 99647])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  98,  97,  90,  98, ... ,  94,  95,  98,  94,\n        98])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 98,  97,  90,  98,  95, ... ,  91,  94,  95,  98,  94,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-08-31') ... ('n', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-08-31    98\nd    2015-08-24    97\nz    2015-08-29    90\nu    2015-08-31    98\nh    2015-08-29    95\n                   ..\ni    2015-08-31    94\nm    2015-08-28    95\nb    2015-08-27    98\np    2015-08-25    94\nn    2015-09-01    98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 191\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        43.0\n1        15.0\n2        14.0\n3        54.0\n4        37.0\n         ... \n99995    92.0\n99996    23.0\n99997    14.0\n99998    93.0\n99999     6.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([43., 15., 14., 54., 37., ... ,  6., 29., 10.,  1., 36., 11.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([43., 15., 14., ..., 14., 93.,  6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 97566, 98626, 99164])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9524, 13254, 16834, 20425, 23976, 27611, 31264, 34981,\n       38556, 42119, 45722, 49327, 53032, 56671, 60325, 64070, 67713,\n       71283, 74845, 78384, 82018, 85559, 89248, 92773, 96391])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['k', 'd', 'g', 'z', 'u', 'h', 'e', 'o', 'm', 'y', 's', 'p', 'b', 'l',\n       'a', 'x', 'f', 'q', 'v', 'w', 'c', 'n', 'r', 't', 'j', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    100\nd    100\ng    100\nz    100\nu    100\nh    100\ne    100\no    100\nm    100\ny    100\ns    100\np    100\nb    100\nl    100\na    100\nx    100\nf    100\nq    100\nv    100\nw    100\nc    100\nn    100\nr    100\nt    100\nj    100\ni    100\nName: julie, dtype: int64`, type: `Series`\n\n## Case 192\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        43.0\n1        15.0\n2        14.0\n3        54.0\n4        37.0\n         ... \n99995    92.0\n99996    23.0\n99997    14.0\n99998    93.0\n99999     6.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([43., 15., 14., 54., 37., ... ,  6., 29., 10.,  1., 36., 11.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([43., 15., 14., ..., 14., 93.,  6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 32652, 59868, 76795])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8783,  9172,  9525, ... , 98261, 98600, 98917, 99306, 99647])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  98,  97,  90,  98, ... ,  94,  95,  98,  94,\n        98])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 98,  97,  90,  98,  95, ... ,  91,  94,  95,  98,  94,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-08-31') ... ('n', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-08-31    98\nd    2015-08-24    97\nz    2015-08-29    90\nu    2015-08-31    98\nh    2015-08-29    95\n                   ..\ni    2015-08-31    94\nm    2015-08-28    95\nb    2015-08-27    98\np    2015-08-25    94\nn    2015-09-01    98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 193\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     633\n1      25\n2     833\n3     849\n4     930\n     ... \n95    531\n96    769\n97    760\n98    924\n99    579\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,\n        3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,\n        6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10,\n       11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n       16, 16, 16, 16, 16, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n       19, 19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 24, 24])`, type: `ndarray`\n\n_, value: `array([633,  25, 833, 849, 930, ... , 732,\n       531, 769, 760, 579])`, shape: `(95,)`, type: `ndarray`\n\nval, value: `array([633,  25, 833, 849, 930, ... , 338, 531, 769, 760, 924, 579])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0, 83, 91,  1,  3, 16, 51, 61, 76, 94,  2, 35, 35, 40, 50,  4,  6,\n       30, 63, 67,  5, 13, 38, 52, 80,  7, 31, 74, 78, 81, 89,  8, 20, 22,\n       47, 70,  9, 21, 25, 73, 10, 48, 49, 55, 72, 92, 11, 14, 60, 12, 42,\n       15, 17, 32, 54, 58, 18, 59, 68, 19, 82, 21, 34, 39, 56, 90, 23, 33,\n       24, 25, 29, 46, 62, 26, 71, 27, 36, 37, 64, 65, 75, 84, 85, 87, 28,\n       41, 77, 43, 44, 45, 57, 40, 49, 69, 53, 79, 88, 66, 86, 93])`, type: `ndarray`\n\nsorter, value: `array([ 0, 85, 95,  1,  3, 16, 52, 62, 78, 99,  2, 36, 75, 41, 51,  4,  6,\n       31, 64, 68,  5, 13, 39, 53, 82,  7, 32, 76, 80, 83, 91,  8, 20, 22,\n       48, 71,  9, 26, 25, 74, 10, 49, 93, 56, 73, 96, 11, 14, 61, 12, 43,\n       15, 17, 33, 55, 59, 18, 60, 69, 19, 84, 21, 35, 40, 57, 92, 23, 34,\n       24, 94, 30, 47, 63, 27, 72, 28, 37, 38, 65, 66, 77, 86, 87, 89, 29,\n       42, 79, 44, 45, 46, 58, 98, 50, 70, 54, 81, 90, 67, 88, 97])`, type: `ndarray`\n\nidx, value: `array([ 0,  3, 10, 15, 20, 25, 31, 36, 40, 46, 49, 51, 56, 59, 61, 66, 68,\n       73, 75, 84, 87, 91, 94, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([3, 7, 4, 5, 5, 6, 5, 4, 6, 3, 2, 5, 3, 2, 5, 2, 5, 2, 9, 3, 4, 3,\n       3, 1, 2])`, type: `ndarray`\n\nres, value: `array([3, 7, 4, 5, 5, 6, 5, 4, 6, 3, 2, 5, 3, 2, 5, 2, 5, 2, 9, 3, 4, 3,\n       3, 1, 2])`, type: `ndarray`\n\nri, value: `Index(['h', 's', 'z', 'k', 'r', 'g', 'n', 'w', 'i', 'f', 'e', 'o', 'v', 'b',\n       'x', 'q', 'p', 'd', 'j', 'm', 'u', 'l', 't', 'a', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nh    3\ns    7\nz    4\nk    5\nr    5\ng    6\nn    5\nw    4\ni    6\nf    3\ne    2\no    5\nv    3\nb    2\nx    5\nq    2\np    5\nd    2\nj    9\nm    3\nu    4\nl    3\nt    3\na    1\ny    2\nName: julie, dtype: int64`, type: `Series`\n\n## Case 194\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     633\n1      25\n2     833\n3     849\n4     930\n     ... \n95    531\n96    769\n97    760\n98    924\n99    579\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 10, 10, 11, 12, 13,\n       14, 15, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27,\n       28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 36, 36, 36, 36, 36, 37, 37,\n       38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69,\n       70, 70, 71, 72, 73, 74, 75, 75, 76, 76, 77, 78, 79, 80, 81])`, type: `ndarray`\n\n_, value: `array([633,  25, 833, 849, 930, ... , 732,\n       531, 769, 760, 579])`, shape: `(95,)`, type: `ndarray`\n\nval, value: `array([633,  25, 833, 849, 930, ... , 338, 531, 769, 760, 924, 579])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1, 76,  2,  3,  4,  5,  6,  7,  8,  9, 10, 49, 92, 11, 12, 13,\n       14, 15, 17, 16, 61, 18, 19, 20, 21, 22, 23, 24, 25, 21, 26, 27, 87,\n       28, 29, 30, 67, 31, 32, 54, 33, 34, 35, 36, 37, 64, 65, 75, 38, 52,\n       39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 72, 49, 50, 51, 53, 55, 56,\n       57, 58, 59, 60, 62, 63, 66, 68, 40, 69, 70, 71, 73, 35, 74, 77, 78,\n       79, 88, 80, 81, 82, 83, 84, 85, 86, 93, 89, 90, 25, 91, 94])`, type: `ndarray`\n\nsorter, value: `array([ 0,  1, 78,  2,  3,  4,  5,  6,  7,  8,  9, 10, 93, 96, 11, 12, 13,\n       14, 15, 17, 16, 62, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 89,\n       29, 30, 31, 68, 32, 33, 55, 34, 35, 36, 37, 38, 65, 66, 77, 39, 53,\n       40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 73, 50, 51, 52, 54, 56, 57,\n       58, 59, 60, 61, 63, 64, 67, 69, 98, 70, 71, 72, 74, 75, 76, 79, 80,\n       81, 90, 82, 83, 84, 85, 86, 87, 88, 97, 91, 92, 94, 95, 99])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  3,  4,  5,  6,  7,  8,  9, 10, 11, 14, 15, 16, 17, 18, 20,\n       22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 41,\n       42, 43, 44, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64,\n       65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82,\n       83, 84, 85, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 5, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 5, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('h', '2015-08-31') ... ('s', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(82,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nh    2015-08-31    1\ns    2015-08-27    2\nz    2015-08-24    1\ns    2015-08-25    1\nk    2015-08-27    1\n                  ..\ng    2015-08-24    1\nx    2015-08-29    1\np    2015-08-24    1\nh    2015-08-24    1\ns    2015-08-30    1\nName: julie, Length: 82, dtype: int64`, type: `Series`\n\n## Case 195\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     633.0\n1      25.0\n2     833.0\n3     849.0\n4     930.0\n      ...  \n95    531.0\n96    769.0\n97    760.0\n98    924.0\n99    579.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,\n        2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,\n        5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,\n        9,  9, 10, 10, 11, 11, 11, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14,\n       15, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18,\n       18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 23, 24, 24])`, type: `ndarray`\n\n_, value: `array([633.,  25., 833., 849., 930., ... ,\n       531., 769., 760., 579.])`, shape: `(81,)`, type: `ndarray`\n\nval, value: `array([633.,  25., 833., 849., 930., ... , 769., 760., 924.,\n       579.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 15, 29, 43, 57, 70, -1,  0, 77,  2, 30, 30, 35, 42,  3, 13, 53,\n       65, 80, -1,  4,  6, 25, 56,  5, 10, 33, 44, 69, -1, -1, 26, 63, 67,\n       75, -1, 17, 19, 39, 59, -1, -1, 22, 62,  7, 40, 41, 47, 61, 78,  8,\n       11, 52,  9, 37, 12, 14, 27, 46, 50, -1, 16, 18, 34, 48, 76, 20, 28,\n       -1, 21, 22, 24, 54, -1, 60, -1, -1, -1, 31, 32, 64, 71, 73, 23, 36,\n       66, -1, -1, 38, 49, 35, 41, 58, 45, 68, 74, 51, 55, 72, 79])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 35, 52, 69, 86, 85,  0, 95,  2, 36, 75, 41, 51,  3, 16, 62,\n       78, 99, 64,  4,  6, 31, 68,  5, 13, 39, 53, 82,  7, 83, 32, 76, 80,\n       91,  8, 20, 22, 48, 71,  9, 26, 25, 74, 10, 49, 93, 56, 73, 96, 11,\n       14, 61, 12, 43, 15, 17, 33, 55, 59, 84, 19, 21, 40, 57, 92, 23, 34,\n       47, 24, 94, 30, 63, 27, 72, 28, 65, 66, 37, 38, 77, 87, 89, 29, 42,\n       79, 45, 46, 44, 58, 98, 50, 70, 54, 81, 90, 60, 67, 88, 97])`, type: `ndarray`\n\nidx, value: `array([ 6,  9, 14, 19, 24, 29, 35, 40, 44, 50, 53, 55, 60, 62, 66, 68, 73,\n       75, 83, 86, 90, 93, 96, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 2, 4, 5, 4, 5, 4, 4, 2, 6, 3, 2, 5, 1, 4, 2, 4, 1, 5, 3, 2, 3,\n       3, 1, 1, 2])`, type: `ndarray`\n\nres, value: `array([2, 4, 5, 4, 5, 4, 4, 2, 6, 3, 2, 5, 1, 4, 2, 4, 1, 5, 3, 2, 3, 3,\n       1, 1, 2])`, type: `ndarray`\n\nri, value: `Index(['h', 'z', 's', 'k', 'r', 'g', 'n', 'w', 'i', 'f', 'e', 'o', 'b', 'x',\n       'q', 'p', 'd', 'j', 'm', 'u', 'l', 't', 'v', 'a', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nh    2\nz    4\ns    5\nk    4\nr    5\ng    4\nn    4\nw    2\ni    6\nf    3\ne    2\no    5\nb    1\nx    4\nq    2\np    4\nd    1\nj    5\nm    3\nu    2\nl    3\nt    3\nv    1\na    1\ny    2\nName: julie, dtype: int64`, type: `Series`\n\n## Case 196\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     633.0\n1      25.0\n2     833.0\n3     849.0\n4     930.0\n      ...  \n95    531.0\n96    769.0\n97    760.0\n98    924.0\n99    579.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  8,  8,  9, 10, 11, 12, 13, 13, 14, 14, 15, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 32,\n       32, 33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46,\n       47, 48, 49, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 60, 61, 62,\n       63, 64, 64, 65, 66, 67, 68, 69, 70, 70, 71, 72, 73, 74, 75])`, type: `ndarray`\n\n_, value: `array([633.,  25., 833., 849., 930., ... ,\n       531., 769., 760., 579.])`, shape: `(81,)`, type: `ndarray`\n\nval, value: `array([633.,  25., 833., 849., 930., ... , 769., 760., 924.,\n       579.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 15, 29, 34, 43, 57, 64, 70,  0,  2,  4,  5,  6, -1, -1, -1,\n        7, 41, 78,  8,  9, 10, 11, 12, 14, 13, 53, 16, 17, 18, 19, 20, 21,\n       22, -1, -1, -1, 73, 23, 24, 25, 56, 26, 27, 46, 28, 30, -1, -1, 31,\n       32, 33, 44, 35, 36, 37, 38, -1, -1, -1, 39, 40, 61, 41, 42, 45, 47,\n       48, 49, 50, 51, 52, 54, -1, 55, 35, 58, 59, 60, 62, 30, 63, 65, 66,\n       67, 68, 74, 69, -1, -1, -1, 71, 72, 79, 75, 76, 22, 77, 80])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0,  2,  4,  5,  6,  7,  8,  9,\n       10, 93, 96, 11, 12, 13, 14, 15, 17, 16, 62, 19, 20, 21, 22, 23, 24,\n       25, 26, 27, 28, 89, 29, 30, 31, 68, 32, 33, 55, 34, 36, 65, 66, 37,\n       38, 39, 53, 41, 42, 43, 44, 45, 46, 47, 48, 49, 73, 50, 51, 54, 56,\n       57, 58, 59, 60, 61, 63, 64, 67, 98, 70, 71, 72, 74, 75, 76, 78, 79,\n       80, 81, 90, 82, 83, 84, 85, 87, 88, 97, 91, 92, 94, 95, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 26, 28, 29,\n       30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 52,\n       54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71,\n       72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90,\n       91, 92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 1, 1, 1, 1, 0, 0, 0, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 0, 0, 0, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       0, 0, 0, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('h', '2015-08-31') ... ('s', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(76,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nh    2015-08-31    1\nz    2015-08-24    1\nk    2015-08-27    1\nr    2015-08-31    1\nk    2015-08-25    1\n                  ..\ng    2015-08-24    1\nx    2015-08-29    1\np    2015-08-24    1\nh    2015-08-24    1\ns    2015-08-30    1\nName: julie, Length: 76, dtype: int64`, type: `Series`\n\n## Case 197\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     633.0\n1      25.0\n2     833.0\n3     849.0\n4     930.0\n      ...  \n95    531.0\n96    769.0\n97    760.0\n98    924.0\n99    579.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,\n        2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,\n        5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,\n        9,  9, 10, 10, 11, 11, 11, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14,\n       15, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18,\n       18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 23, 24, 24])`, type: `ndarray`\n\n_, value: `array([633.,  25., 833., 849., 930., ... ,\n       531., 769., 760., 579.])`, shape: `(81,)`, type: `ndarray`\n\nval, value: `array([633.,  25., 833., 849., 930., ... , 769., 760., 924.,\n       579.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 15, 29, 43, 57, 70, -1,  0, 77,  2, 30, 30, 35, 42,  3, 13, 53,\n       65, 80, -1,  4,  6, 25, 56,  5, 10, 33, 44, 69, -1, -1, 26, 63, 67,\n       75, -1, 17, 19, 39, 59, -1, -1, 22, 62,  7, 40, 41, 47, 61, 78,  8,\n       11, 52,  9, 37, 12, 14, 27, 46, 50, -1, 16, 18, 34, 48, 76, 20, 28,\n       -1, 21, 22, 24, 54, -1, 60, -1, -1, -1, 31, 32, 64, 71, 73, 23, 36,\n       66, -1, -1, 38, 49, 35, 41, 58, 45, 68, 74, 51, 55, 72, 79])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 35, 52, 69, 86, 85,  0, 95,  2, 36, 75, 41, 51,  3, 16, 62,\n       78, 99, 64,  4,  6, 31, 68,  5, 13, 39, 53, 82,  7, 83, 32, 76, 80,\n       91,  8, 20, 22, 48, 71,  9, 26, 25, 74, 10, 49, 93, 56, 73, 96, 11,\n       14, 61, 12, 43, 15, 17, 33, 55, 59, 84, 19, 21, 40, 57, 92, 23, 34,\n       47, 24, 94, 30, 63, 27, 72, 28, 65, 66, 37, 38, 77, 87, 89, 29, 42,\n       79, 45, 46, 44, 58, 98, 50, 70, 54, 81, 90, 60, 67, 88, 97])`, type: `ndarray`\n\nidx, value: `array([ 6,  9, 14, 19, 24, 29, 35, 40, 44, 50, 53, 55, 60, 62, 66, 68, 73,\n       75, 83, 86, 90, 93, 96, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 2, 4, 5, 4, 5, 4, 4, 2, 6, 3, 2, 5, 1, 4, 2, 4, 1, 5, 3, 2, 3,\n       3, 1, 1, 2])`, type: `ndarray`\n\nres, value: `array([2, 4, 5, 4, 5, 4, 4, 2, 6, 3, 2, 5, 1, 4, 2, 4, 1, 5, 3, 2, 3, 3,\n       1, 1, 2])`, type: `ndarray`\n\nri, value: `Index(['h', 'z', 's', 'k', 'r', 'g', 'n', 'w', 'i', 'f', 'e', 'o', 'b', 'x',\n       'q', 'p', 'd', 'j', 'm', 'u', 'l', 't', 'v', 'a', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nh    2\nz    4\ns    5\nk    4\nr    5\ng    4\nn    4\nw    2\ni    6\nf    3\ne    2\no    5\nb    1\nx    4\nq    2\np    4\nd    1\nj    5\nm    3\nu    2\nl    3\nt    3\nv    1\na    1\ny    2\nName: julie, dtype: int64`, type: `Series`\n\n## Case 198\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     633.0\n1      25.0\n2     833.0\n3     849.0\n4     930.0\n      ...  \n95    531.0\n96    769.0\n97    760.0\n98    924.0\n99    579.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  8,  8,  9, 10, 11, 12, 13, 13, 14, 14, 15, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 32,\n       32, 33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46,\n       47, 48, 49, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 60, 61, 62,\n       63, 64, 64, 65, 66, 67, 68, 69, 70, 70, 71, 72, 73, 74, 75])`, type: `ndarray`\n\n_, value: `array([633.,  25., 833., 849., 930., ... ,\n       531., 769., 760., 579.])`, shape: `(81,)`, type: `ndarray`\n\nval, value: `array([633.,  25., 833., 849., 930., ... , 769., 760., 924.,\n       579.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 15, 29, 34, 43, 57, 64, 70,  0,  2,  4,  5,  6, -1, -1, -1,\n        7, 41, 78,  8,  9, 10, 11, 12, 14, 13, 53, 16, 17, 18, 19, 20, 21,\n       22, -1, -1, -1, 73, 23, 24, 25, 56, 26, 27, 46, 28, 30, -1, -1, 31,\n       32, 33, 44, 35, 36, 37, 38, -1, -1, -1, 39, 40, 61, 41, 42, 45, 47,\n       48, 49, 50, 51, 52, 54, -1, 55, 35, 58, 59, 60, 62, 30, 63, 65, 66,\n       67, 68, 74, 69, -1, -1, -1, 71, 72, 79, 75, 76, 22, 77, 80])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0,  2,  4,  5,  6,  7,  8,  9,\n       10, 93, 96, 11, 12, 13, 14, 15, 17, 16, 62, 19, 20, 21, 22, 23, 24,\n       25, 26, 27, 28, 89, 29, 30, 31, 68, 32, 33, 55, 34, 36, 65, 66, 37,\n       38, 39, 53, 41, 42, 43, 44, 45, 46, 47, 48, 49, 73, 50, 51, 54, 56,\n       57, 58, 59, 60, 61, 63, 64, 67, 98, 70, 71, 72, 74, 75, 76, 78, 79,\n       80, 81, 90, 82, 83, 84, 85, 87, 88, 97, 91, 92, 94, 95, 99])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 26, 28, 29,\n       30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 52,\n       54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71,\n       72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90,\n       91, 92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 1, 1, 1, 1, 0, 0, 0, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 0, 0, 0, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       0, 0, 0, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('h', '2015-08-31') ... ('s', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(76,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nh    2015-08-31    1\nz    2015-08-24    1\nk    2015-08-27    1\nr    2015-08-31    1\nk    2015-08-25    1\n                  ..\ng    2015-08-24    1\nx    2015-08-29    1\np    2015-08-24    1\nh    2015-08-24    1\ns    2015-08-30    1\nName: julie, Length: 76, dtype: int64`, type: `Series`\n\n## Case 199\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      530\n1      506\n2       40\n3      487\n4      187\n      ... \n995    949\n996     17\n997    638\n998    793\n999    368\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([530, 506,  40, 487, 187, ... , 360, 393, 631,\n       915,  17])`, shape: `(639,)`, type: `ndarray`\n\nval, value: `array([530, 506,  40, 487, 187, ... ,  24, 949,  17, 638, 793, 368])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([  0,  11,  20,  21,  53, ... , 479, 498, 515, 544, 563, 588])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0,  11, 510,  21, 401, ... , 646, 774, 710, 776, 902, 871])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  42,  74, 115, 142, 195, 239, 285, 310, 345, 389, 433, 468,\n       497, 540, 582, 615, 659, 702, 738, 776, 802, 839, 874, 922, 962])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([40, 32, 40, 26, 51, 43, 44, 24, 33, 44, 44, 31, 28, 40, 42, 33, 43,\n       42, 36, 36, 25, 35, 34, 48, 38, 37])`, type: `ndarray`\n\nres, value: `array([40, 32, 40, 26, 51, 43, 44, 24, 33, 44, 44, 31, 28, 40, 42, 33, 43,\n       42, 36, 36, 25, 35, 34, 48, 38, 37])`, type: `ndarray`\n\nri, value: `Index(['k', 'e', 'q', 'y', 'l', 's', 'u', 'p', 't', 'o', 'v', 'i', 'w', 'f',\n       'a', 'h', 'm', 'z', 'x', 'r', 'j', 'd', 'g', 'c', 'b', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    40\ne    32\nq    40\ny    26\nl    51\ns    43\nu    44\np    24\nt    33\no    44\nv    44\ni    31\nw    28\nf    40\na    42\nh    33\nm    43\nz    42\nx    36\nr    36\nj    25\nd    35\ng    34\nc    48\nb    38\nn    37\nName: julie, dtype: int64`, type: `Series`\n\n## Case 200\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      530\n1      506\n2       40\n3      487\n4      187\n      ... \n995    949\n996     17\n997    638\n998    793\n999    368\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 246, 247, 248, 249, 249, 250])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([530, 506,  40, 487, 187, ... , 360, 393, 631,\n       915,  17])`, shape: `(639,)`, type: `ndarray`\n\nval, value: `array([530, 506,  40, 487, 187, ... ,  24, 949,  17, 638, 793, 368])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([  0, 154, 190, 208, 321, ... , 611, 182, 134, 412, 449, 502])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0, 163, 204, 228, 374, ... , 919, 923, 941, 951, 971, 983])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   5,  11,  15,  19, ... , 993,\n       995, 996, 997, 999])`, shape: `(251,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 5,  6,  4,  4,  8,  8,  7, ... ,  2,  1,  1,  2,  1,  1,  2,  1])`, shape: `(251,)`, type: `ndarray`\n\nres, value: `array([ 5,  6,  4,  4,  8,  8,  7, ... ,  2,  1,  1,  2,  1,  1,  2,  1])`, shape: `(251,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-08-31') ... ('z', '2015-08-29')],\n           names=['jim', 'joe'], length=251)`, shape: `(251,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-08-31    5\ne    2015-08-31    6\nq    2015-08-30    4\ny    2015-08-26    4\nl    2015-08-30    8\n                  ..\nq    2015-08-29    2\nj    2015-08-26    1\n     2015-08-25    1\nw    2015-08-30    2\nz    2015-08-29    1\nName: julie, Length: 251, dtype: int64`, type: `Series`\n\n## Case 201\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      530.0\n1      506.0\n2       40.0\n3      487.0\n4      187.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    793.0\n999    368.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([530., 506.,  40., 487., 187., ... , 360., 393., 631., 424., 915.])`, shape: `(572,)`, type: `ndarray`\n\nval, value: `array([530., 506.,  40., 487., 187., ... ,  nan,  nan,  nan, 793., 368.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 422, 439, 481, 497, 497, 521])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 646, 774, 776, 818, 867, 871])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  97, 134, 159, 210, 254, 297, 320, 355, 398, 439, 470, 499,\n       539, 568, 610, 652, 686, 722, 746, 781, 827, 864, 902, 936, 964])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([50, 32, 31, 19, 38, 38, 38, 17, 26, 32, 33, 26, 25, 32, 26, 38, 32,\n       29, 28, 21, 26, 38, 32, 30, 30, 22, 31])`, type: `ndarray`\n\nres, value: `array([32, 31, 19, 38, 38, 38, 17, 26, 32, 33, 26, 25, 32, 26, 38, 32, 29,\n       28, 21, 26, 38, 32, 30, 30, 22, 31])`, type: `ndarray`\n\nri, value: `Index(['k', 'q', 'y', 'l', 's', 'u', 'p', 't', 'o', 'v', 'i', 'w', 'a', 'h',\n       'm', 'z', 'x', 'r', 'j', 'd', 'c', 'b', 'f', 'g', 'e', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    32\nq    31\ny    19\nl    38\ns    38\nu    38\np    17\nt    26\no    32\nv    33\ni    26\nw    25\na    32\nh    26\nm    38\nz    32\nx    29\nr    28\nj    21\nd    26\nc    38\nb    32\nf    30\ng    30\ne    22\nn    31\nName: julie, dtype: int64`, type: `Series`\n\n## Case 202\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      530.0\n1      506.0\n2       40.0\n3      487.0\n4      187.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    793.0\n999    368.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 243, 244, 244, 245, 246, 247])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([530., 506.,  40., 487., 187., ... , 360., 393., 631., 424., 915.])`, shape: `(572,)`, type: `ndarray`\n\nval, value: `array([530., 506.,  40., 487., 187., ... ,  nan,  nan,  nan, 793., 368.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 116, 358, 562, 152, 531, 565])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 941, 951, 971, 961, 973, 983])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  89,  93, 101, 109, ... , 994, 995, 997, 998,\n       999])`, shape: `(248,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([71,  5,  3,  7,  6,  6,  1, ... ,  1,  0,  1,  1,  2,  1,  1,  1])`, shape: `(249,)`, type: `ndarray`\n\nres, value: `array([5, 3, 7, 6, 6, 1, 4, 1, 3, ... , 1, 0,\n       1, 1, 2, 1, 1, 1])`, shape: `(248,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-08-31') ... ('z', '2015-08-29')],\n           names=['jim', 'joe'], length=248)`, shape: `(248,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-08-31    5\nq    2015-08-30    3\nl    2015-08-30    7\ns    2015-08-29    6\nu    2015-08-25    6\n                  ..\nj    2015-08-25    1\nw    2015-08-30    2\nh    2015-08-30    1\nq    2015-08-29    1\nz    2015-08-29    1\nName: julie, Length: 248, dtype: int64`, type: `Series`\n\n## Case 203\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      530.0\n1      506.0\n2       40.0\n3      487.0\n4      187.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    793.0\n999    368.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([530., 506.,  40., 487., 187., ... , 360., 393., 631., 424., 915.])`, shape: `(572,)`, type: `ndarray`\n\nval, value: `array([530., 506.,  40., 487., 187., ... ,  nan,  nan,  nan, 793., 368.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 422, 439, 481, 497, 497, 521])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 646, 774, 776, 818, 867, 871])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  97, 134, 159, 210, 254, 297, 320, 355, 398, 439, 470, 499,\n       539, 568, 610, 652, 686, 722, 746, 781, 827, 864, 902, 936, 964])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([50, 32, 31, 19, 38, 38, 38, 17, 26, 32, 33, 26, 25, 32, 26, 38, 32,\n       29, 28, 21, 26, 38, 32, 30, 30, 22, 31])`, type: `ndarray`\n\nres, value: `array([32, 31, 19, 38, 38, 38, 17, 26, 32, 33, 26, 25, 32, 26, 38, 32, 29,\n       28, 21, 26, 38, 32, 30, 30, 22, 31])`, type: `ndarray`\n\nri, value: `Index(['k', 'q', 'y', 'l', 's', 'u', 'p', 't', 'o', 'v', 'i', 'w', 'a', 'h',\n       'm', 'z', 'x', 'r', 'j', 'd', 'c', 'b', 'f', 'g', 'e', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    32\nq    31\ny    19\nl    38\ns    38\nu    38\np    17\nt    26\no    32\nv    33\ni    26\nw    25\na    32\nh    26\nm    38\nz    32\nx    29\nr    28\nj    21\nd    26\nc    38\nb    32\nf    30\ng    30\ne    22\nn    31\nName: julie, dtype: int64`, type: `Series`\n\n## Case 204\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      530.0\n1      506.0\n2       40.0\n3      487.0\n4      187.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    793.0\n999    368.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 243, 244, 244, 245, 246, 247])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([530., 506.,  40., 487., 187., ... , 360., 393., 631., 424., 915.])`, shape: `(572,)`, type: `ndarray`\n\nval, value: `array([530., 506.,  40., 487., 187., ... ,  nan,  nan,  nan, 793., 368.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 116, 358, 562, 152, 531, 565])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 941, 951, 971, 961, 973, 983])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  89,  93, 101, 109, ... , 994, 995, 997, 998,\n       999])`, shape: `(248,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([71,  5,  3,  7,  6,  6,  1, ... ,  1,  0,  1,  1,  2,  1,  1,  1])`, shape: `(249,)`, type: `ndarray`\n\nres, value: `array([5, 3, 7, 6, 6, 1, 4, 1, 3, ... , 1, 0,\n       1, 1, 2, 1, 1, 1])`, shape: `(248,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-08-31') ... ('z', '2015-08-29')],\n           names=['jim', 'joe'], length=248)`, shape: `(248,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-08-31    5\nq    2015-08-30    3\nl    2015-08-30    7\ns    2015-08-29    6\nu    2015-08-25    6\n                  ..\nj    2015-08-25    1\nw    2015-08-30    2\nh    2015-08-30    1\nq    2015-08-29    1\nz    2015-08-29    1\nName: julie, Length: 248, dtype: int64`, type: `Series`\n\n## Case 205\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       828\n1       297\n2       300\n3       382\n4       539\n       ... \n9995    549\n9996    510\n9997    984\n9998    555\n9999    290\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([828, 297, 300, 382, 539, ... , 384, 676,  88, 187, 982, 656])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([828, 297, 300, ..., 984, 555, 290])`, type: `ndarray`\n\ncodes, value: `array([  0,   2,   2, ..., 989, 995, 998])`, type: `ndarray`\n\nsorter, value: `array([   0, 3300, 6392, ..., 4336, 5235, 6083])`, type: `ndarray`\n\nidx, value: `array([   0,  408,  781, 1172, 1540, 1936, 2309, 2705, 3087, 3502, 3922,\n       4319, 4698, 5073, 5460, 5844, 6223, 6627, 6991, 7369, 7732, 8118,\n       8475, 8894, 9256, 9636])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([338, 318, 325, 303, 324, 316, 324, 312, 340, 352, 335, 317, 320,\n       330, 313, 322, 329, 305, 316, 299, 313, 313, 352, 316, 320, 301])`, type: `ndarray`\n\nres, value: `array([338, 318, 325, 303, 324, 316, 324, 312, 340, 352, 335, 317, 320,\n       330, 313, 322, 329, 305, 316, 299, 313, 313, 352, 316, 320, 301])`, type: `ndarray`\n\nri, value: `Index(['s', 'd', 'k', 'n', 'z', 'v', 'g', 'e', 'w', 'j', 'p', 'm', 'y', 'l',\n       'r', 'f', 'b', 'h', 'a', 'i', 'u', 'q', 'x', 'o', 't', 'c'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ns    338\nd    318\nk    325\nn    303\nz    324\nv    316\ng    324\ne    312\nw    340\nj    352\np    335\nm    317\ny    320\nl    330\nr    313\nf    322\nb    329\nh    305\na    316\ni    299\nu    313\nq    313\nx    352\no    316\nt    320\nc    301\nName: julie, dtype: int64`, type: `Series`\n\n## Case 206\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       828\n1       297\n2       300\n3       382\n4       539\n       ... \n9995    549\n9996    510\n9997    984\n9998    555\n9999    290\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([828, 297, 300, 382, 539, ... , 384, 676,  88, 187, 982, 656])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([828, 297, 300, ..., 984, 555, 290])`, type: `ndarray`\n\ncodes, value: `array([  0,   9,  63, ..., 927, 946, 960])`, type: `ndarray`\n\nsorter, value: `array([   0, 8840, 3843, ..., 9735, 6913, 8484])`, type: `ndarray`\n\nidx, value: `array([   0,   50,   85,  120,  153, ... , 9833, 9868, 9902, 9930, 9969])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([50, 35, 34, 32, 37, 35, 36, ... , 28,\n       35, 34, 28, 39, 29])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([50, 35, 34, 32, 37, 35, 36, ... , 28,\n       35, 34, 28, 39, 29])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('s', '2015-08-25') ... ('i', '2015-08-31')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ns    2015-08-25    50\nd    2015-08-29    35\nk    2015-08-25    34\nn    2015-08-25    32\nz    2015-08-29    37\n                   ..\nh    2015-08-29    35\nu    2015-08-28    34\ne    2015-08-26    28\nl    2015-08-23    39\ni    2015-08-31    29\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 207\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       828.0\n1       297.0\n2       300.0\n3       382.0\n4       539.0\n        ...  \n9995    549.0\n9996    510.0\n9997    984.0\n9998    555.0\n9999    290.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([828., 297., 300., 382., 539., ... , 108.,  45., 891., 656., 758.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([828., 297., 300., ..., 984., 555., 290.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 988, 991, 995])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 5235, 6083, 6439])`, type: `ndarray`\n\nidx, value: `array([ 589,  971, 1347, 1697, 2077, 2422, 2790, 3146, 3537, 3932, 4304,\n       4653, 5010, 5380, 5741, 6090, 6464, 6812, 7165, 7508, 7868, 8212,\n       8597, 8953, 9297, 9655])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([408, 272, 276, 253, 271, 254, 262, 258, 282, 298, 281, 262, 263,\n       273, 261, 253, 273, 252, 267, 243, 254, 260, 272, 264, 261, 257,\n       254])`, type: `ndarray`\n\nres, value: `array([272, 276, 253, 271, 254, 262, 258, 282, 298, 281, 262, 263, 273,\n       261, 253, 273, 252, 267, 243, 254, 260, 272, 264, 261, 257, 254])`, type: `ndarray`\n\nri, value: `Index(['s', 'k', 'n', 'z', 'v', 'g', 'e', 'w', 'j', 'p', 'm', 'y', 'l', 'r',\n       'f', 'b', 'h', 'a', 'i', 'u', 'q', 'x', 'd', 'o', 't', 'c'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ns    272\nk    276\nn    253\nz    271\nv    254\ng    262\ne    258\nw    282\nj    298\np    281\nm    262\ny    263\nl    273\nr    261\nf    253\nb    273\nh    252\na    267\ni    243\nu    254\nq    260\nx    272\nd    264\no    261\nt    257\nc    254\nName: julie, dtype: int64`, type: `Series`\n\n## Case 208\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       828.0\n1       297.0\n2       300.0\n3       382.0\n4       539.0\n        ...  \n9995    549.0\n9996    510.0\n9997    984.0\n9998    555.0\n9999    290.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([828., 297., 300., 382., 539., ... , 108.,  45., 891., 656., 758.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([828., 297., 300., ..., 984., 555., 290.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 916, 973, 973])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6913, 4329, 7939])`, type: `ndarray`\n\nidx, value: `array([ 844,  885,  919,  955,  991, ... , 9851, 9882, 9908, 9945, 9974])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([514,  36,  28,  26,  30, ... ,  23,  22,  33,  24,\n        19])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([36, 28, 26, 30, 29, 39, 25, ... , 25,\n       23, 22, 33, 24, 19])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('s', '2015-08-25') ... ('i', '2015-08-31')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ns    2015-08-25    36\nk    2015-08-25    28\nz    2015-08-29    26\nv    2015-08-26    30\ng    2015-08-31    29\n                   ..\nu    2015-08-28    23\ne    2015-08-26    22\nl    2015-08-23    33\nw    2015-08-25    24\ni    2015-08-31    19\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 209\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       828.0\n1       297.0\n2       300.0\n3       382.0\n4       539.0\n        ...  \n9995    549.0\n9996    510.0\n9997    984.0\n9998    555.0\n9999    290.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([828., 297., 300., 382., 539., ... , 108.,  45., 891., 656., 758.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([828., 297., 300., ..., 984., 555., 290.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 988, 991, 995])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 5235, 6083, 6439])`, type: `ndarray`\n\nidx, value: `array([ 589,  971, 1347, 1697, 2077, 2422, 2790, 3146, 3537, 3932, 4304,\n       4653, 5010, 5380, 5741, 6090, 6464, 6812, 7165, 7508, 7868, 8212,\n       8597, 8953, 9297, 9655])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([408, 272, 276, 253, 271, 254, 262, 258, 282, 298, 281, 262, 263,\n       273, 261, 253, 273, 252, 267, 243, 254, 260, 272, 264, 261, 257,\n       254])`, type: `ndarray`\n\nres, value: `array([272, 276, 253, 271, 254, 262, 258, 282, 298, 281, 262, 263, 273,\n       261, 253, 273, 252, 267, 243, 254, 260, 272, 264, 261, 257, 254])`, type: `ndarray`\n\nri, value: `Index(['s', 'k', 'n', 'z', 'v', 'g', 'e', 'w', 'j', 'p', 'm', 'y', 'l', 'r',\n       'f', 'b', 'h', 'a', 'i', 'u', 'q', 'x', 'd', 'o', 't', 'c'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ns    272\nk    276\nn    253\nz    271\nv    254\ng    262\ne    258\nw    282\nj    298\np    281\nm    262\ny    263\nl    273\nr    261\nf    253\nb    273\nh    252\na    267\ni    243\nu    254\nq    260\nx    272\nd    264\no    261\nt    257\nc    254\nName: julie, dtype: int64`, type: `Series`\n\n## Case 210\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       828.0\n1       297.0\n2       300.0\n3       382.0\n4       539.0\n        ...  \n9995    549.0\n9996    510.0\n9997    984.0\n9998    555.0\n9999    290.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([828., 297., 300., 382., 539., ... , 108.,  45., 891., 656., 758.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([828., 297., 300., ..., 984., 555., 290.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 916, 973, 973])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6913, 4329, 7939])`, type: `ndarray`\n\nidx, value: `array([ 844,  885,  919,  955,  991, ... , 9851, 9882, 9908, 9945, 9974])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([514,  36,  28,  26,  30, ... ,  23,  22,  33,  24,\n        19])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([36, 28, 26, 30, 29, 39, 25, ... , 25,\n       23, 22, 33, 24, 19])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('s', '2015-08-25') ... ('i', '2015-08-31')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ns    2015-08-25    36\nk    2015-08-25    28\nz    2015-08-29    26\nv    2015-08-26    30\ng    2015-08-31    29\n                   ..\nu    2015-08-28    23\ne    2015-08-26    22\nl    2015-08-23    33\nw    2015-08-25    24\ni    2015-08-31    19\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 211\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        394\n1         73\n2        902\n3        292\n4        104\n        ... \n99995    954\n99996    606\n99997    833\n99998    165\n99999    483\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([394,  73, 902, 292, 104, ... , 583, 960, 663, 344, 435, 697])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([394,  73, 902, ..., 833, 165, 483])`, type: `ndarray`\n\ncodes, value: `array([  0,   0,   1, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([    0, 12850, 10501, ..., 30222, 64626, 82313])`, type: `ndarray`\n\nidx, value: `array([    0,  3885,  7831, 11695, 15423, 19321, 23225, 27025, 30938,\n       34816, 38641, 42508, 46318, 50151, 53928, 57828, 61633, 65533,\n       69335, 73095, 76924, 80687, 84585, 88478, 92292, 96092])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([979, 986, 987, 975, 983, 980, 984, 988, 979, 979, 977, 975, 983,\n       987, 977, 983, 969, 978, 974, 980, 978, 988, 982, 970, 979, 974])`, type: `ndarray`\n\nres, value: `array([979, 986, 987, 975, 983, 980, 984, 988, 979, 979, 977, 975, 983,\n       987, 977, 983, 969, 978, 974, 980, 978, 988, 982, 970, 979, 974])`, type: `ndarray`\n\nri, value: `Index(['w', 'l', 'a', 'i', 'g', 'q', 'b', 'f', 'x', 'h', 'y', 'k', 'm', 't',\n       'z', 'e', 'c', 'r', 'o', 'n', 'j', 'u', 'p', 's', 'v', 'd'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nw    979\nl    986\na    987\ni    975\ng    983\nq    980\nb    984\nf    988\nx    979\nh    979\ny    977\nk    975\nm    983\nt    987\nz    977\ne    983\nc    969\nr    978\no    974\nn    980\nj    978\nu    988\np    982\ns    970\nv    979\nd    974\nName: julie, dtype: int64`, type: `Series`\n\n## Case 212\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        394\n1         73\n2        902\n3        292\n4        104\n        ... \n99995    954\n99996    606\n99997    833\n99998    165\n99999    483\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([394,  73, 902, 292, 104, ... , 583, 960, 663, 344, 435, 697])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([394,  73, 902, ..., 833, 165, 483])`, type: `ndarray`\n\ncodes, value: `array([  0,   3,   4, ..., 994, 994, 997])`, type: `ndarray`\n\nsorter, value: `array([    0, 66658, 20808, ..., 21249, 47578, 15970])`, type: `ndarray`\n\nidx, value: `array([    0,   385,   792,  1163, ... , 98106, 98493, 98879, 99241, 99594])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([313, 342, 323, 321, 298, ... , 317, 333, 320, 298, 300, 338])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([313, 342, 323, 321, 298, ... , 317, 333, 320, 298, 300, 338])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('w', '2015-08-24') ... ('a', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nw    2015-08-24    313\nl    2015-08-26    342\na    2015-08-29    323\ni    2015-08-25    321\ng    2015-08-28    298\n                  ... \nz    2015-08-29    333\np    2015-08-27    320\nn    2015-08-26    298\nr    2015-08-27    300\na    2015-08-24    338\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 213\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        394.0\n1         73.0\n2        902.0\n3        292.0\n4        104.0\n         ...  \n99995    954.0\n99996    606.0\n99997    833.0\n99998    165.0\n99999    483.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([394.,  73., 902., 292., 104., ... , 829., 478., 166., 451., 997.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([394.,  73., 902., ..., 833., 165., 483.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 81912, 83490, 87424])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9554, 13195, 16702, 20342, 24005, 27589, 31240, 34870,\n       38486, 42106, 45700, 49304, 52842, 56517, 60115, 63793, 67520,\n       71058, 74656, 78216, 81904, 85571, 89167, 92740, 96315])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([996, 948, 964, 946, 959, 963, 956, 954, 960, 949, 950, 950, 946,\n       962, 954, 957, 948, 960, 949, 946, 960, 961, 956, 947, 954, 955,\n       959])`, type: `ndarray`\n\nres, value: `array([948, 964, 946, 959, 963, 956, 954, 960, 949, 950, 950, 946, 962,\n       954, 957, 948, 960, 949, 946, 960, 961, 956, 947, 954, 955, 959])`, type: `ndarray`\n\nri, value: `Index(['w', 'a', 'i', 'g', 'q', 'b', 'f', 'x', 'h', 'y', 'k', 'm', 't', 'z',\n       'e', 'c', 'l', 'o', 'n', 'j', 'u', 'p', 's', 'r', 'v', 'd'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nw    948\na    964\ni    946\ng    959\nq    963\nb    956\nf    954\nx    960\nh    949\ny    950\nk    950\nm    946\nt    962\nz    954\ne    957\nc    948\nl    960\no    949\nn    946\nj    960\nu    961\np    956\ns    947\nr    954\nv    955\nd    959\nName: julie, dtype: int64`, type: `Series`\n\n## Case 214\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        394.0\n1         73.0\n2        902.0\n3        292.0\n4        104.0\n         ...  \n99995    954.0\n99996    606.0\n99997    833.0\n99998    165.0\n99999    483.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([394.,  73., 902., 292., 104., ... , 829., 478., 166., 451., 997.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([394.,  73., 902., ..., 833., 165., 483.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 979, 986, 992])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 71908, 71830,  8299])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8788,  9121,  9443, ... , 98242, 98592, 98918, 99252, 99625])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([1000,  254,  255,  239,  250, ... ,  248,  246,  243,  273,  265])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([254, 255, 239, 250, 253, ... , 250, 248, 246, 243, 273, 265])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('w', '2015-08-24') ... ('b', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nw    2015-08-24    254\na    2015-08-29    255\ng    2015-08-28    239\nq    2015-08-25    250\ni    2015-08-27    253\n                  ... \n     2015-08-25    248\nn    2015-08-26    246\nr    2015-08-27    243\na    2015-08-24    273\nb    2015-09-01    265\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 215\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        394.0\n1         73.0\n2        902.0\n3        292.0\n4        104.0\n         ...  \n99995    954.0\n99996    606.0\n99997    833.0\n99998    165.0\n99999    483.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([394.,  73., 902., 292., 104., ... , 829., 478., 166., 451., 997.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([394.,  73., 902., ..., 833., 165., 483.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 81912, 83490, 87424])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9554, 13195, 16702, 20342, 24005, 27589, 31240, 34870,\n       38486, 42106, 45700, 49304, 52842, 56517, 60115, 63793, 67520,\n       71058, 74656, 78216, 81904, 85571, 89167, 92740, 96315])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([996, 948, 964, 946, 959, 963, 956, 954, 960, 949, 950, 950, 946,\n       962, 954, 957, 948, 960, 949, 946, 960, 961, 956, 947, 954, 955,\n       959])`, type: `ndarray`\n\nres, value: `array([948, 964, 946, 959, 963, 956, 954, 960, 949, 950, 950, 946, 962,\n       954, 957, 948, 960, 949, 946, 960, 961, 956, 947, 954, 955, 959])`, type: `ndarray`\n\nri, value: `Index(['w', 'a', 'i', 'g', 'q', 'b', 'f', 'x', 'h', 'y', 'k', 'm', 't', 'z',\n       'e', 'c', 'l', 'o', 'n', 'j', 'u', 'p', 's', 'r', 'v', 'd'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nw    948\na    964\ni    946\ng    959\nq    963\nb    956\nf    954\nx    960\nh    949\ny    950\nk    950\nm    946\nt    962\nz    954\ne    957\nc    948\nl    960\no    949\nn    946\nj    960\nu    961\np    956\ns    947\nr    954\nv    955\nd    959\nName: julie, dtype: int64`, type: `Series`\n\n## Case 216\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        394.0\n1         73.0\n2        902.0\n3        292.0\n4        104.0\n         ...  \n99995    954.0\n99996    606.0\n99997    833.0\n99998    165.0\n99999    483.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([394.,  73., 902., 292., 104., ... , 829., 478., 166., 451., 997.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([394.,  73., 902., ..., 833., 165., 483.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 979, 986, 992])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 71908, 71830,  8299])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8788,  9121,  9443, ... , 98242, 98592, 98918, 99252, 99625])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([1000,  254,  255,  239,  250, ... ,  248,  246,  243,  273,  265])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([254, 255, 239, 250, 253, ... , 250, 248, 246, 243, 273, 265])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('w', '2015-08-24') ... ('b', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nw    2015-08-24    254\na    2015-08-29    255\ng    2015-08-28    239\nq    2015-08-25    250\ni    2015-08-27    253\n                  ... \n     2015-08-25    248\nn    2015-08-26    246\nr    2015-08-27    243\na    2015-08-24    273\nb    2015-09-01    265\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 217\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     8\n1     3\n2     6\n3     6\n4     2\n     ..\n95    6\n96    3\n97    0\n98    0\n99    7\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  1,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,\n        6,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,\n        9,  9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15,\n       15, 15, 15, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19,\n       19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23,\n       23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([8, 3, 6, 2, 1, 7, 0, 9, 4, 5])`, type: `ndarray`\n\nval, value: `array([8, 3, 6, 6, 2, 1, 2, 1, 7, 7, 0, 0, 6, 6, 9, 7, 0, 0, 7, 7, 1, 2,\n       6, 7, 4, 8, 9, 9, 2, 5, 6, 1, 1, 2, 8, 8, 7, 3, 4, 6, 1, 5, 5, 2,\n       2, 1, 1, 4, 5, 8, 9, 6, 6, 1, 5, 1, 3, 8, 0, 0, 8, 5, 7, 8, 6, 2,\n       0, 5, 8, 3, 9, 3, 0, 0, 5, 4, 3, 1, 5, 4, 3, 0, 2, 2, 8, 1, 4, 2,\n       4, 2, 1, 0, 6, 8, 3, 6, 3, 0, 0, 7])`, type: `ndarray`\n\ncodes, value: `array([6, 9, 9, 3, 6, 3, 3, 6, 9, 9, 0, 3, 3, 4, 4, 8, 9, 2, 4, 5, 6, 6,\n       7, 0, 1, 5, 0, 1, 2, 6, 8, 4, 5, 6, 7, 9, 1, 3, 2, 3, 5, 2, 6, 2,\n       6, 8, 0, 4, 4, 8, 1, 2, 4, 5, 2, 3, 0, 1, 4, 4, 9, 0, 2, 3, 5, 0,\n       0, 0, 8, 1, 1, 2, 2, 8, 0, 1, 6, 9, 0, 2, 5, 5, 6, 8, 4, 7, 2, 3,\n       5, 6, 1, 3, 3, 4, 4, 4, 6, 7, 7, 9])`, type: `ndarray`\n\nsorter, value: `array([10, 48, 67, 28, 97, 21, 65, 17, 42, 61, 49, 44, 82, 32, 53, 86, 74,\n        2,  7, 18, 66, 72, 50, 63, 80, 36, 93, 69, 30, 91, 24, 55, 23, 58,\n       26, 54, 96,  4, 13, 87, 62, 12, 59, 52, 73, 38, 84, 31, 40, 75, 71,\n       92, 45,  8,  3, 43, 35, 56,  5, 90, 78,  0, 64,  6, 19, 25, 34, 68,\n       88, 37, 76, 22, 39, 79, 57, 94, 11, 29, 60, 95,  9, 99, 98, 47, 20,\n       14, 51, 33, 15, 81,  1, 83, 89, 46, 77, 85, 16, 27, 70, 41])`, type: `ndarray`\n\nidx, value: `array([ 0,  3,  4,  5, 10, 15, 17, 23, 26, 31, 36, 38, 41, 43, 46, 50, 54,\n       56, 61, 65, 69, 74, 78, 84, 86, 90])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([2, 1, 1, 3, 3, 2, 5, 3, 5, 5, 2, 3, 2, 3, 3, 4, 2, 4, 4, 2, 3, 4,\n       5, 2, 4, 6])`, type: `ndarray`\n\nres, value: `array([2, 1, 1, 3, 3, 2, 5, 3, 5, 5, 2, 3, 2, 3, 3, 4, 2, 4, 4, 2, 3, 4,\n       5, 2, 4, 6])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    2\nb    1\nc    1\nd    3\ne    3\nf    2\ng    5\nh    3\ni    5\nj    5\nk    2\nl    3\nm    2\nn    3\no    3\np    4\nq    2\nr    4\ns    4\nt    2\nu    3\nv    4\nw    5\nx    2\ny    4\nz    6\nName: julie, dtype: int64`, type: `Series`\n\n## Case 218\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     8\n1     3\n2     6\n3     6\n4     2\n     ..\n95    6\n96    3\n97    0\n98    0\n99    7\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9, 10, 11, 11, 12, 13, 14,\n       15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 27, 28,\n       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 40, 41, 42, 43, 44,\n       44, 45, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57,\n       58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\n       75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 86, 86, 87])`, type: `ndarray`\n\n_, value: `array([8, 3, 6, 2, 1, 7, 0, 9, 4, 5])`, type: `ndarray`\n\nval, value: `array([8, 3, 6, 6, 2, 1, 2, 1, 7, 7, 0, 0, 6, 6, 9, 7, 0, 0, 7, 7, 1, 2,\n       6, 7, 4, 8, 9, 9, 2, 5, 6, 1, 1, 2, 8, 8, 7, 3, 4, 6, 1, 5, 5, 2,\n       2, 1, 1, 4, 5, 8, 9, 6, 6, 1, 5, 1, 3, 8, 0, 0, 8, 5, 7, 8, 6, 2,\n       0, 5, 8, 3, 9, 3, 0, 0, 5, 4, 3, 1, 5, 4, 3, 0, 2, 2, 8, 1, 4, 2,\n       4, 2, 1, 0, 6, 8, 3, 6, 3, 0, 0, 7])`, type: `ndarray`\n\ncodes, value: `array([9, 6, 9, 3, 6, 9, 6, 9, 3, 3, 4, 4, 3, 3, 0, 9, 8, 5, 6, 6, 7, 4,\n       2, 1, 5, 0, 8, 2, 1, 6, 0, 5, 7, 6, 9, 4, 1, 3, 2, 3, 5, 2, 6, 2,\n       6, 8, 8, 4, 4, 0, 2, 5, 1, 4, 2, 3, 4, 4, 1, 9, 0, 3, 5, 2, 0, 0,\n       0, 0, 8, 1, 8, 1, 2, 2, 9, 1, 6, 0, 0, 6, 2, 5, 5, 8, 7, 4, 3, 6,\n       5, 2, 7, 4, 6, 4, 3, 9, 1, 4, 7, 3])`, type: `ndarray`\n\nsorter, value: `array([48, 10, 67, 28, 97, 42, 17, 61, 21, 65, 53, 32, 44, 82, 49, 74, 86,\n       18, 66, 72, 50,  7,  2, 80, 36, 63, 24, 30, 69, 91, 93, 23, 26, 58,\n       54, 55, 96,  4, 13, 87, 62, 12, 59, 52, 73, 38, 75, 31, 40, 84, 92,\n        8, 71, 45,  3, 43,  5, 90, 56, 78, 35,  6, 19, 64,  0, 34, 68, 25,\n       88, 76, 79, 37, 39, 22, 29, 94, 11, 57, 60, 98, 95, 99,  9, 47, 14,\n       20, 33, 81, 15, 51, 70, 46, 16, 77, 83, 41,  1, 85, 27, 89])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 14, 15, 16, 17, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38,\n       39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n       78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,\n       95, 96, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(88,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-25    1\n     2015-08-26    1\n     2015-08-28    1\nb    2015-08-31    1\nc    2015-09-01    1\n                  ..\nz    2015-08-28    1\n     2015-08-29    1\n     2015-08-30    1\n     2015-08-31    3\n     2015-09-01    1\nName: julie, Length: 88, dtype: int64`, type: `Series`\n\n## Case 219\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     8.0\n1     3.0\n2     6.0\n3     6.0\n4     2.0\n     ... \n95    6.0\n96    3.0\n97    0.0\n98    0.0\n99    7.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  3,  3,  3,  3,  3,  4,\n        4,  4,  4,  4,  5,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,  8,\n        9,  9,  9,  9,  9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 14,\n       14, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,\n       19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n       23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([8., 3., 6., 2., 1., 0., 9., 7., 4., 5.])`, type: `ndarray`\n\nval, value: `array([ 8.,  3.,  6.,  6.,  2., ... ,  3.,  6.,  3.,  0.,  0.,  7.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  1,  2,  7,  8,  5,  9,  9, -1,  5, -1,  3,  5,  9,  9,  0,\n        3,  3,  4,  4,  9, -1, -1,  2,  5,  6,  0,  1,  7,  0,  2,  5,  8,\n       -1,  4,  5,  7,  9,  1,  3,  2,  3,  7,  2,  5,  5,  8, -1,  4,  4,\n        8, -1, -1,  1,  2,  2,  3,  1,  4,  4,  9, -1,  0,  3,  7,  0,  0,\n        0,  8,  1,  1,  2,  2,  8,  0,  1,  5,  9, -1, -1,  0,  2,  5,  7,\n        4,  6,  2,  3,  5,  7, -1, -1, -1, -1,  3,  4,  5,  6,  9])`, type: `ndarray`\n\nsorter, value: `array([35,  1, 69, 52, 18, 86, 10, 48, 67, 28, 97, 65, 21, 17, 42, 61, 49,\n       44, 82, 32, 53, 74,  7, 66,  2, 72, 50, 63, 80, 36, 93, 30, 91, 24,\n       26, 55, 58, 23, 54, 96,  4, 13, 87, 62, 12, 59, 73, 38, 84, 31, 40,\n       75,  8, 45, 71, 92,  3, 43, 56,  5, 90, 78, 64,  0,  6, 19, 25, 34,\n       68, 88, 37, 76, 22, 39, 79, 57, 94, 11, 29,  9, 47, 60, 95, 98, 99,\n       20, 14, 51, 33, 81, 15, 27, 46, 83, 85, 89, 77, 16, 70, 41])`, type: `ndarray`\n\nidx, value: `array([ 6,  9, 10, 11, 16, 21, 22, 27, 30, 34, 39, 41, 44, 46, 48, 52, 56,\n       58, 62, 66, 70, 75, 79, 85, 87, 91])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 2, 0, 1, 3, 3, 1, 3, 3, 4, 4, 2, 3, 2, 2, 2, 2, 2, 3, 3, 2, 3,\n       4, 4, 2, 4, 5])`, type: `ndarray`\n\nres, value: `array([2, 0, 1, 3, 3, 1, 3, 3, 4, 4, 2, 3, 2, 2, 2, 2, 2, 3, 3, 2, 3, 4,\n       4, 2, 4, 5])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    2\nb    0\nc    1\nd    3\ne    3\nf    1\ng    3\nh    3\ni    4\nj    4\nk    2\nl    3\nm    2\nn    2\no    2\np    2\nq    2\nr    3\ns    3\nt    2\nu    3\nv    4\nw    4\nx    2\ny    4\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n## Case 220\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     8.0\n1     3.0\n2     6.0\n3     6.0\n4     2.0\n     ... \n95    6.0\n96    3.0\n97    0.0\n98    0.0\n99    7.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  8,  9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\n       39, 40, 41, 42, 42, 43, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\n       70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 82, 83])`, type: `ndarray`\n\n_, value: `array([8., 3., 6., 2., 1., 0., 9., 7., 4., 5.])`, type: `ndarray`\n\nval, value: `array([ 8.,  3.,  6.,  6.,  2., ... ,  3.,  6.,  3.,  0.,  0.,  7.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  1,  2,  2,  4,  4,  7,  8,  9,  5,  9, -1,  5,  9,  5,  9,\n       -1,  3,  4,  4,  3,  3,  0,  9, -1,  5,  6, -1,  2,  1,  7,  0,  8,\n        2,  5,  0, -1,  7,  5,  9,  4,  1,  3,  2,  3,  7,  2,  5,  5,  8,\n        8,  4, -1, -1,  2, -1,  1,  3,  4,  4,  1,  9,  3,  7, -1,  0,  0,\n        0,  0,  8,  1,  8,  1,  2,  2,  9,  1,  5,  0,  0,  5,  2,  7, -1,\n       -1,  6,  4,  3,  5,  7,  2,  6, -1,  5, -1,  9, -1, -1,  3])`, type: `ndarray`\n\nsorter, value: `array([35,  1, 69,  3, 52, 40, 77, 18, 86, 48, 10, 67, 28, 97, 42, 17, 61,\n       65, 21, 53, 32, 44, 82, 49, 74, 66, 72, 50,  7,  2, 80, 36, 63, 24,\n       30, 91, 93, 26, 23, 58, 54, 55, 96,  4, 13, 87, 62, 12, 59, 73, 38,\n       75, 31, 84,  8, 92, 45, 71, 43,  5, 90, 56, 78,  6, 19, 64,  0, 34,\n       68, 25, 88, 76, 79, 37, 39, 22, 29, 94, 11, 57, 60, 98, 95, 99,  9,\n       47, 14, 20, 33, 81, 15, 51, 70, 46, 16, 83, 41, 27, 85, 89])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45,\n       46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n       83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False,  True,  True,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-25    1\n     2015-08-26    1\n     2015-08-28    1\nb    2015-08-31    0\nc    2015-09-01    1\n                  ..\nz    2015-08-26    1\n     2015-08-29    0\n     2015-08-30    1\n     2015-08-31    0\n     2015-09-01    1\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n## Case 221\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     8.0\n1     3.0\n2     6.0\n3     6.0\n4     2.0\n     ... \n95    6.0\n96    3.0\n97    0.0\n98    0.0\n99    7.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  3,  3,  3,  3,  3,  4,\n        4,  4,  4,  4,  5,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,  8,\n        9,  9,  9,  9,  9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 14,\n       14, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,\n       19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n       23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([8., 3., 6., 2., 1., 0., 9., 7., 4., 5.])`, type: `ndarray`\n\nval, value: `array([ 8.,  3.,  6.,  6.,  2., ... ,  3.,  6.,  3.,  0.,  0.,  7.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  1,  2,  7,  8,  5,  9,  9, -1,  5, -1,  3,  5,  9,  9,  0,\n        3,  3,  4,  4,  9, -1, -1,  2,  5,  6,  0,  1,  7,  0,  2,  5,  8,\n       -1,  4,  5,  7,  9,  1,  3,  2,  3,  7,  2,  5,  5,  8, -1,  4,  4,\n        8, -1, -1,  1,  2,  2,  3,  1,  4,  4,  9, -1,  0,  3,  7,  0,  0,\n        0,  8,  1,  1,  2,  2,  8,  0,  1,  5,  9, -1, -1,  0,  2,  5,  7,\n        4,  6,  2,  3,  5,  7, -1, -1, -1, -1,  3,  4,  5,  6,  9])`, type: `ndarray`\n\nsorter, value: `array([35,  1, 69, 52, 18, 86, 10, 48, 67, 28, 97, 65, 21, 17, 42, 61, 49,\n       44, 82, 32, 53, 74,  7, 66,  2, 72, 50, 63, 80, 36, 93, 30, 91, 24,\n       26, 55, 58, 23, 54, 96,  4, 13, 87, 62, 12, 59, 73, 38, 84, 31, 40,\n       75,  8, 45, 71, 92,  3, 43, 56,  5, 90, 78, 64,  0,  6, 19, 25, 34,\n       68, 88, 37, 76, 22, 39, 79, 57, 94, 11, 29,  9, 47, 60, 95, 98, 99,\n       20, 14, 51, 33, 81, 15, 27, 46, 83, 85, 89, 77, 16, 70, 41])`, type: `ndarray`\n\nidx, value: `array([ 6,  9, 10, 11, 16, 21, 22, 27, 30, 34, 39, 41, 44, 46, 48, 52, 56,\n       58, 62, 66, 70, 75, 79, 85, 87, 91])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 2, 0, 1, 3, 3, 1, 3, 3, 4, 4, 2, 3, 2, 2, 2, 2, 2, 3, 3, 2, 3,\n       4, 4, 2, 4, 5])`, type: `ndarray`\n\nres, value: `array([2, 0, 1, 3, 3, 1, 3, 3, 4, 4, 2, 3, 2, 2, 2, 2, 2, 3, 3, 2, 3, 4,\n       4, 2, 4, 5])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    2\nb    0\nc    1\nd    3\ne    3\nf    1\ng    3\nh    3\ni    4\nj    4\nk    2\nl    3\nm    2\nn    2\no    2\np    2\nq    2\nr    3\ns    3\nt    2\nu    3\nv    4\nw    4\nx    2\ny    4\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n## Case 222\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     8.0\n1     3.0\n2     6.0\n3     6.0\n4     2.0\n     ... \n95    6.0\n96    3.0\n97    0.0\n98    0.0\n99    7.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  8,  9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\n       39, 40, 41, 42, 42, 43, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\n       70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 82, 83])`, type: `ndarray`\n\n_, value: `array([8., 3., 6., 2., 1., 0., 9., 7., 4., 5.])`, type: `ndarray`\n\nval, value: `array([ 8.,  3.,  6.,  6.,  2., ... ,  3.,  6.,  3.,  0.,  0.,  7.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  1,  2,  2,  4,  4,  7,  8,  9,  5,  9, -1,  5,  9,  5,  9,\n       -1,  3,  4,  4,  3,  3,  0,  9, -1,  5,  6, -1,  2,  1,  7,  0,  8,\n        2,  5,  0, -1,  7,  5,  9,  4,  1,  3,  2,  3,  7,  2,  5,  5,  8,\n        8,  4, -1, -1,  2, -1,  1,  3,  4,  4,  1,  9,  3,  7, -1,  0,  0,\n        0,  0,  8,  1,  8,  1,  2,  2,  9,  1,  5,  0,  0,  5,  2,  7, -1,\n       -1,  6,  4,  3,  5,  7,  2,  6, -1,  5, -1,  9, -1, -1,  3])`, type: `ndarray`\n\nsorter, value: `array([35,  1, 69,  3, 52, 40, 77, 18, 86, 48, 10, 67, 28, 97, 42, 17, 61,\n       65, 21, 53, 32, 44, 82, 49, 74, 66, 72, 50,  7,  2, 80, 36, 63, 24,\n       30, 91, 93, 26, 23, 58, 54, 55, 96,  4, 13, 87, 62, 12, 59, 73, 38,\n       75, 31, 84,  8, 92, 45, 71, 43,  5, 90, 56, 78,  6, 19, 64,  0, 34,\n       68, 25, 88, 76, 79, 37, 39, 22, 29, 94, 11, 57, 60, 98, 95, 99,  9,\n       47, 14, 20, 33, 81, 15, 51, 70, 46, 16, 83, 41, 27, 85, 89])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45,\n       46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n       83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False,  True,  True,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-25    1\n     2015-08-26    1\n     2015-08-28    1\nb    2015-08-31    0\nc    2015-09-01    1\n                  ..\nz    2015-08-26    1\n     2015-08-29    0\n     2015-08-30    1\n     2015-08-31    0\n     2015-09-01    1\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n## Case 223\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5\n1      1\n2      0\n3      1\n4      5\n      ..\n995    9\n996    5\n997    0\n998    7\n999    5\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5, 1, 0, 7, 3, 6, 8, 9, 2, 4])`, type: `ndarray`\n\nval, value: `array([5, 1, 0, 1, 5, 7, 0, 3, 6, ... ,\n       1, 5, 6, 9, 5, 9, 5, 0, 7, 5])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, 0, 1, 1, 2, 2, 2, ... ,\n       6, 7, 7, 7, 7, 8, 8, 8, 8, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([578, 635, 846, 932,  37, ... , 764, 217, 244, 732, 776, 778])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  37,  97, 142, 181, 216, 261, 293, 325, 376, 417, 463, 495,\n       517, 559, 594, 629, 671, 716, 757, 789, 828, 872, 904, 939, 963])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 1, 0, 1, 0, 0, ... ,\n       1, 1, 0, 0, 0, 1, 0, 0, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10,  9, 10,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10,\n       10, 10, 10, 10, 10, 10, 10,  8, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10,  9, 10,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10,\n       10, 10, 10, 10, 10, 10, 10,  8, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf     9\ng    10\nh     9\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no     9\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny     8\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 224\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5\n1      1\n2      0\n3      1\n4      5\n      ..\n995    9\n996    5\n997    0\n998    7\n999    5\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 247, 247, 247, 248, 248, 248])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5, 1, 0, 7, 3, 6, 8, 9, 2, 4])`, type: `ndarray`\n\nval, value: `array([5, 1, 0, 1, 5, 7, 0, 3, 6, ... ,\n       1, 5, 6, 9, 5, 9, 5, 0, 7, 5])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([0, 3, 4, 5, 6, 0, 1, 3, 4, ... ,\n       4, 4, 8, 0, 2, 4, 8, 2, 7, 8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([578, 709, 289, 605, 345, ... , 737, 425, 217, 455,  90, 776])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   5,   6,  10,  14, ... , 983, 988, 989,\n       993, 997])`, shape: `(249,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([5, 1, 4, 4, 4, 2, 3, 3, 2, ... , 3,\n       4, 3, 3, 1, 3, 4, 3])`, shape: `(249,)`, type: `ndarray`\n\nres, value: `array([5, 1, 4, 4, 4, 2, 3, 3, 2, ... , 3,\n       4, 3, 3, 1, 3, 4, 3])`, shape: `(249,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=249)`, shape: `(249,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    5\n     2015-08-24    1\n     2015-08-25    4\n     2015-08-26    4\n     2015-08-27    4\n                  ..\nz    2015-08-28    3\n     2015-08-29    1\n     2015-08-30    3\n     2015-08-31    4\n     2015-09-01    3\nName: julie, Length: 249, dtype: int64`, type: `Series`\n\n## Case 225\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5.0\n1      1.0\n2      0.0\n3      1.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5., 1., 0., 7., 9., 8., 6., 3., 2., 4.])`, type: `ndarray`\n\nval, value: `array([ 5.,  1.,  0.,  1.,  5., ... ,  5., nan, nan, nan,  7.,  5.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  5,  6,  6,  7,  7,  8,  8,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 935, 224, 909, 244, 776, 778])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  96, 153, 196, 234, 268, 311, 342, 371, 421, 460, 501, 530,\n       551, 589, 623, 656, 694, 737, 776, 804, 842, 880, 912, 946, 968])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 0, 1, 1, 0, 1, 0, 1, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10,  9,  9, 10,  9, 10,  9, 10, 10, 10, 10,  8, 10,\n        9, 10, 10,  9, 10, 10, 10, 10,  8, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10,  9,  9, 10,  9, 10,  9, 10, 10, 10, 10,  8, 10,  9,\n       10, 10,  9, 10, 10, 10, 10,  8, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne     9\nf     9\ng    10\nh     9\ni    10\nj     9\nk    10\nl    10\nm    10\nn    10\no     8\np    10\nq     9\nr    10\ns    10\nt     9\nu    10\nv    10\nw    10\nx    10\ny     8\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 226\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5.0\n1      1.0\n2      0.0\n3      1.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 244, 244, 244, 245, 245, 245])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5., 1., 0., 7., 9., 8., 6., 3., 2., 4.])`, type: `ndarray`\n\nval, value: `array([ 5.,  1.,  0.,  1.,  5., ... ,  5., nan, nan, nan,  7.,  5.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  8, -1, -1,  0,  2,  2,  4,  8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 425,  87, 737, 455,  90, 776])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  89,  90,  94,  98, ... , 983, 985, 989, 990, 993, 997])`, shape: `(246,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10,  4,  0,  2,  4,  4,  2, ... ,  3,  3,  1,  3,  1,  3,  2,  3])`, shape: `(247,)`, type: `ndarray`\n\nres, value: `array([4, 0, 2, 4, 4, 2, 2, 2, 2, ... , 3, 3, 1, 3,\n       1, 3, 2, 3])`, shape: `(246,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=246)`, shape: `(246,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    0\n     2015-08-25    2\n     2015-08-26    4\n     2015-08-27    4\n                  ..\nz    2015-08-28    3\n     2015-08-29    1\n     2015-08-30    3\n     2015-08-31    2\n     2015-09-01    3\nName: julie, Length: 246, dtype: int64`, type: `Series`\n\n## Case 227\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5.0\n1      1.0\n2      0.0\n3      1.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5., 1., 0., 7., 9., 8., 6., 3., 2., 4.])`, type: `ndarray`\n\nval, value: `array([ 5.,  1.,  0.,  1.,  5., ... ,  5., nan, nan, nan,  7.,  5.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  5,  6,  6,  7,  7,  8,  8,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 935, 224, 909, 244, 776, 778])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  96, 153, 196, 234, 268, 311, 342, 371, 421, 460, 501, 530,\n       551, 589, 623, 656, 694, 737, 776, 804, 842, 880, 912, 946, 968])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 0, 1, 1, 0, 1, 0, 1, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10,  9,  9, 10,  9, 10,  9, 10, 10, 10, 10,  8, 10,\n        9, 10, 10,  9, 10, 10, 10, 10,  8, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10,  9,  9, 10,  9, 10,  9, 10, 10, 10, 10,  8, 10,  9,\n       10, 10,  9, 10, 10, 10, 10,  8, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne     9\nf     9\ng    10\nh     9\ni    10\nj     9\nk    10\nl    10\nm    10\nn    10\no     8\np    10\nq     9\nr    10\ns    10\nt     9\nu    10\nv    10\nw    10\nx    10\ny     8\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 228\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      5.0\n1      1.0\n2      0.0\n3      1.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 244, 244, 244, 245, 245, 245])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([5., 1., 0., 7., 9., 8., 6., 3., 2., 4.])`, type: `ndarray`\n\nval, value: `array([ 5.,  1.,  0.,  1.,  5., ... ,  5., nan, nan, nan,  7.,  5.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  8, -1, -1,  0,  2,  2,  4,  8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 425,  87, 737, 455,  90, 776])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  89,  90,  94,  98, ... , 983, 985, 989, 990, 993, 997])`, shape: `(246,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10,  4,  0,  2,  4,  4,  2, ... ,  3,  3,  1,  3,  1,  3,  2,  3])`, shape: `(247,)`, type: `ndarray`\n\nres, value: `array([4, 0, 2, 4, 4, 2, 2, 2, 2, ... , 3, 3, 1, 3,\n       1, 3, 2, 3])`, shape: `(246,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=246)`, shape: `(246,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    0\n     2015-08-25    2\n     2015-08-26    4\n     2015-08-27    4\n                  ..\nz    2015-08-28    3\n     2015-08-29    1\n     2015-08-30    3\n     2015-08-31    2\n     2015-09-01    3\nName: julie, Length: 246, dtype: int64`, type: `Series`\n\n## Case 229\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0\n1       1\n2       6\n3       2\n4       8\n       ..\n9995    5\n9996    2\n9997    2\n9998    1\n9999    6\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([0, 1, 6, 2, 8, 5, 9, 7, 3, 4])`, type: `ndarray`\n\nval, value: `array([0, 1, 6, ..., 2, 1, 6])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([  18,  324,  521, ..., 9452, 9655, 9808])`, type: `ndarray`\n\nidx, value: `array([   0,  364,  722, 1106, 1482, 1892, 2291, 2699, 3080, 3508, 3883,\n       4265, 4637, 4993, 5395, 5779, 6159, 6531, 6903, 7261, 7635, 8034,\n       8443, 8835, 9253, 9623])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 230\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0\n1       1\n2       6\n3       2\n4       8\n       ..\n9995    5\n9996    2\n9997    2\n9998    1\n9999    6\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([0, 1, 6, 2, 8, 5, 9, 7, 3, 4])`, type: `ndarray`\n\nval, value: `array([0, 1, 6, ..., 2, 1, 6])`, type: `ndarray`\n\ncodes, value: `array([0, 1, 1, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([2591,  797, 9520, ..., 6229, 7767, 8523])`, type: `ndarray`\n\nidx, value: `array([   0,   27,   68,  101,  142, ... , 9795, 9845, 9881, 9917, 9955])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 9, 10, 10, 10, 10,  9,  9, ... , 10,\n       10,  9, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([ 9, 10, 10, 10, 10,  9,  9, ... , 10,\n       10,  9, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23     9\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29     9\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 231\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1       1.0\n2       6.0\n3       2.0\n4       8.0\n       ... \n9995    5.0\n9996    2.0\n9997    2.0\n9998    1.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([0., 1., 6., 2., 8., 5., 9., 7., 3., 4.])`, type: `ndarray`\n\nval, value: `array([0., 1., 6., ..., 2., 1., 6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 8723, 9655, 9808])`, type: `ndarray`\n\nidx, value: `array([ 589,  930, 1272, 1639, 1996, 2387, 2760, 3146, 3509, 3906, 4254,\n       4612, 4961, 5301, 5681, 6033, 6390, 6730, 7077, 7414, 7766, 8145,\n       8525, 8899, 9288, 9638])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 232\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1       1.0\n2       6.0\n3       2.0\n4       8.0\n       ... \n9995    5.0\n9996    2.0\n9997    2.0\n9998    1.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([0., 1., 6., 2., 8., 5., 9., 7., 3., 4.])`, type: `ndarray`\n\nval, value: `array([0., 1., 6., ..., 2., 1., 6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6229, 7767, 8523])`, type: `ndarray`\n\nidx, value: `array([ 844,  870,  907,  937,  974, ... , 9812, 9861, 9893, 9924, 9957])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10,  8, 10, 10, 10, 10,  9, ... ,\n       10, 10,  9, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 8, 10, 10, 10, 10,  9,  9, ... , 10,\n       10,  9, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23     8\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29     9\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 233\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1       1.0\n2       6.0\n3       2.0\n4       8.0\n       ... \n9995    5.0\n9996    2.0\n9997    2.0\n9998    1.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([0., 1., 6., 2., 8., 5., 9., 7., 3., 4.])`, type: `ndarray`\n\nval, value: `array([0., 1., 6., ..., 2., 1., 6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 8723, 9655, 9808])`, type: `ndarray`\n\nidx, value: `array([ 589,  930, 1272, 1639, 1996, 2387, 2760, 3146, 3509, 3906, 4254,\n       4612, 4961, 5301, 5681, 6033, 6390, 6730, 7077, 7414, 7766, 8145,\n       8525, 8899, 9288, 9638])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 234\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       0.0\n1       1.0\n2       6.0\n3       2.0\n4       8.0\n       ... \n9995    5.0\n9996    2.0\n9997    2.0\n9998    1.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([0., 1., 6., 2., 8., 5., 9., 7., 3., 4.])`, type: `ndarray`\n\nval, value: `array([0., 1., 6., ..., 2., 1., 6.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6229, 7767, 8523])`, type: `ndarray`\n\nidx, value: `array([ 844,  870,  907,  937,  974, ... , 9812, 9861, 9893, 9924, 9957])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10,  8, 10, 10, 10, 10,  9, ... ,\n       10, 10,  9, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 8, 10, 10, 10, 10,  9,  9, ... , 10,\n       10,  9, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23     8\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29     9\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 235\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        3\n1        1\n2        2\n3        9\n4        4\n        ..\n99995    4\n99996    5\n99997    1\n99998    2\n99999    8\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([3, 1, 2, 9, 4, 7, 0, 6, 5, 8])`, type: `ndarray`\n\nval, value: `array([3, 1, 2, ..., 1, 2, 8])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([   89,   565,   756, ..., 98831, 99094, 99160])`, type: `ndarray`\n\nidx, value: `array([    0,  3905,  7725, 11467, 15410, 19277, 23120, 26960, 30849,\n       34656, 38612, 42436, 46313, 50123, 54155, 58114, 61944, 65770,\n       69574, 73346, 77159, 80970, 84781, 88609, 92352, 96200])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 236\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        3\n1        1\n2        2\n3        9\n4        4\n        ..\n99995    4\n99996    5\n99997    1\n99998    2\n99999    8\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([3, 1, 2, 9, 4, 7, 0, 6, 5, 8])`, type: `ndarray`\n\nval, value: `array([3, 1, 2, ..., 1, 2, 8])`, type: `ndarray`\n\ncodes, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([ 1668,  4967,  5763, ..., 85559, 88454, 98002])`, type: `ndarray`\n\nidx, value: `array([    0,   410,   844,  1212, ... , 98144, 98547, 98938, 99266, 99605])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 237\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        3.0\n1        1.0\n2        2.0\n3        9.0\n4        4.0\n        ... \n99995    4.0\n99996    5.0\n99997    1.0\n99998    2.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([3., 1., 2., 9., 4., 7., 6., 5., 0., 8.])`, type: `ndarray`\n\nval, value: `array([3., 1., 2., ..., 1., 2., 8.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 98060, 98831, 99160])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9568, 13179, 16685, 20392, 24038, 27642, 31246, 34918,\n       38492, 42184, 45769, 49411, 53003, 56809, 60519, 64107, 67718,\n       71328, 74867, 78462, 82056, 85650, 89235, 92791, 96420])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 238\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        3.0\n1        1.0\n2        2.0\n3        9.0\n4        4.0\n        ... \n99995    4.0\n99996    5.0\n99997    1.0\n99998    2.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([3., 1., 2., 9., 4., 7., 6., 5., 0., 8.])`, type: `ndarray`\n\nval, value: `array([3., 1., 2., ..., 1., 2., 8.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 85442, 85559, 98002])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8799,  9190,  9531, ... , 98286, 98648, 99010, 99313, 99627])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n       10, 10, 10, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 239\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        3.0\n1        1.0\n2        2.0\n3        9.0\n4        4.0\n        ... \n99995    4.0\n99996    5.0\n99997    1.0\n99998    2.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([3., 1., 2., 9., 4., 7., 6., 5., 0., 8.])`, type: `ndarray`\n\nval, value: `array([3., 1., 2., ..., 1., 2., 8.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 98060, 98831, 99160])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9568, 13179, 16685, 20392, 24038, 27642, 31246, 34918,\n       38492, 42184, 45769, 49411, 53003, 56809, 60519, 64107, 67718,\n       71328, 74867, 78462, 82056, 85650, 89235, 92791, 96420])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Case 240\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        3.0\n1        1.0\n2        2.0\n3        9.0\n4        4.0\n        ... \n99995    4.0\n99996    5.0\n99997    1.0\n99998    2.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([3., 1., 2., 9., 4., 7., 6., 5., 0., 8.])`, type: `ndarray`\n\nval, value: `array([3., 1., 2., ..., 1., 2., 8.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 85442, 85559, 98002])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8799,  9190,  9531, ... , 98286, 98648, 99010, 99313, 99627])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n       10, 10, 10, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 241\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     59\n1     77\n2     44\n3     48\n4     27\n      ..\n95    97\n96    64\n97    60\n98    16\n99    13\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,  4,  4,  4,  4,  4,\n        4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,  7,  7,  7,  7,  7,  7,\n        8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12,\n       12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17,\n       17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21,\n       21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([59, 77, 44, 48, 27, 73, 29, 39, 80, 50, 85, 43, 69, 68, 12, 22, 82,\n       87, 21, 90, 54, 96, 46, 51, 83, 93, 35, 56, 40,  6, 65, 61, 31,  3,\n       16, 28, 91, 55, 62,  0, 74,  1, 49, 13, 37, 99, 70, 41, 26, 92, 88,\n       34, 23, 15, 84, 89, 10, 36,  2, 97, 64, 60])`, type: `ndarray`\n\nval, value: `array([59, 77, 44, 48, 27, 73, 29, 39, 80, 50, 85, 43, 69, 29, 68, 12, 73,\n       22, 82, 87, 21, 90, 54, 96, 73, 46, 51, 83, 93, 35, 56, 83, 40, 68,\n        6, 65, 61, 31,  3, 31, 51, 21, 16, 28, 39, 91, 31, 55, 83, 62, 12,\n       96, 82, 69,  0, 16, 74,  1, 49, 13, 37, 46, 44, 48, 99, 70, 22, 41,\n       80, 26, 92, 26, 88, 48, 31, 34, 23, 15, 96, 51, 13, 84, 56, 50, 84,\n       89, 92, 43, 15, 80, 10, 36, 74, 61,  2, 97, 64, 60, 16, 13])`, type: `ndarray`\n\ncodes, value: `array([55,  3,  8, 21, 22, 27, 47,  2,  5, 11, 15, 31,  3,  5,  6, 15, 20,\n       23, 34, 12, 12, 18, 21, 24, 33, 54, 32, 59,  3,  7, 17, 32, 51, 56,\n        4, 49,  6, 23, 32, 43, 43, 53,  8, 16, 31, 48, 23, 24, 30, 32, 14,\n       18, 54, 21, 40,  1, 24, 28, 36,  0,  5, 25, 44, 50,  8, 27, 49, 40,\n       57, 14, 19, 34,  7, 22, 29, 34, 37, 39, 10, 13, 13, 42, 58,  9, 35,\n       38, 41, 45, 60,  9, 16, 48, 11, 26, 46, 52,  2, 43, 53, 61])`, type: `ndarray`\n\nsorter, value: `array([85, 63,  8, 78, 61, 30, 67,  2, 24, 11, 66, 36,  3, 16, 13, 17, 22,\n       26, 55, 12, 53, 41, 23, 27, 38, 84, 39, 95, 73, 44, 19, 74, 75, 90,\n        4, 70,  6, 40, 46, 80, 99, 88, 68, 52, 93, 71, 79, 31, 35, 37, 15,\n       20, 81, 51, 92,  1, 48, 32, 45,  0,  5, 28, 60, 72, 89, 82, 86, 56,\n       91, 50, 21, 42,  7, 25, 34, 98, 47, 54, 10, 14, 33, 58, 94,  9, 43,\n       49, 57, 64, 96, 83, 18, 69, 87, 29, 65, 76, 62, 59, 77, 97])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  7, 10, 12, 19, 26, 28, 34, 36, 42, 46, 50, 53, 55, 59, 64,\n       67, 69, 72, 78, 83, 89, 92, 96])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 6, 3, 2, 7, 6, 2, 6, 2, 5, 4, 4, 3, 2, 4, 5, 3, 2, 3, 6, 4, 6,\n       3, 4, 4])`, type: `ndarray`\n\nres, value: `array([1, 6, 3, 2, 7, 6, 2, 6, 2, 5, 4, 4, 3, 2, 4, 5, 3, 2, 3, 6, 4, 6,\n       3, 4, 4])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    1\nb    6\nd    3\ne    2\nf    7\ng    6\nh    2\ni    6\nj    2\nk    5\nl    4\nm    4\nn    3\no    2\np    4\nq    5\nr    3\ns    2\nt    3\nu    6\nv    4\nw    6\nx    3\ny    4\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n## Case 242\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     59\n1     77\n2     44\n3     48\n4     27\n      ..\n95    97\n96    64\n97    60\n98    16\n99    13\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 10, 10, 11, 12,\n       13, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n       28, 29, 30, 30, 31, 32, 33, 34, 35, 35, 36, 36, 37, 38, 39, 39, 40,\n       41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 55, 56,\n       57, 58, 59, 60, 61, 62, 63, 64, 65, 65, 66, 66, 67, 68, 69, 70, 71,\n       72, 72, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 83])`, type: `ndarray`\n\n_, value: `array([59, 77, 44, 48, 27, 73, 29, 39, 80, 50, 85, 43, 69, 68, 12, 22, 82,\n       87, 21, 90, 54, 96, 46, 51, 83, 93, 35, 56, 40,  6, 65, 61, 31,  3,\n       16, 28, 91, 55, 62,  0, 74,  1, 49, 13, 37, 99, 70, 41, 26, 92, 88,\n       34, 23, 15, 84, 89, 10, 36,  2, 97, 64, 60])`, type: `ndarray`\n\nval, value: `array([59, 77, 44, 48, 27, 73, 29, 39, 80, 50, 85, 43, 69, 29, 68, 12, 73,\n       22, 82, 87, 21, 90, 54, 96, 73, 46, 51, 83, 93, 35, 56, 83, 40, 68,\n        6, 65, 61, 31,  3, 31, 51, 21, 16, 28, 39, 91, 31, 55, 83, 62, 12,\n       96, 82, 69,  0, 16, 74,  1, 49, 13, 37, 46, 44, 48, 99, 70, 22, 41,\n       80, 26, 92, 26, 88, 48, 31, 34, 23, 15, 96, 51, 13, 84, 56, 50, 84,\n       89, 92, 43, 15, 80, 10, 36, 74, 61,  2, 97, 64, 60, 16, 13])`, type: `ndarray`\n\ncodes, value: `array([55, 27,  8, 22,  3, 47, 21,  2,  5, 11, 15, 31,  3,  5,  6, 23, 20,\n       15, 34, 21, 33, 54, 12, 12, 24, 18, 59, 32, 51, 17, 56,  7,  3, 32,\n        4, 49,  6, 32, 43, 43, 53, 23, 16, 48,  8, 31, 23, 24, 30, 32, 54,\n       14, 18, 21, 40,  1, 24, 28, 36,  0,  5, 50, 44, 25, 27,  8, 49, 57,\n       40, 19, 34, 14,  7, 29, 37, 39, 22, 34, 13, 13, 42, 58, 10, 35,  9,\n       38, 41, 45, 60, 16,  9, 48, 26, 11, 46, 52,  2, 61, 43, 53])`, type: `ndarray`\n\nsorter, value: `array([85, 30,  8, 61, 63, 67, 78,  2, 24, 11, 66, 36,  3, 16, 13, 26, 22,\n       17, 55, 23, 38, 84, 12, 53, 27, 41, 95, 39, 75, 19, 90, 44, 73, 74,\n        4, 70,  6, 46, 99, 80, 88, 40, 52, 71, 68, 93, 79, 31, 35, 37, 81,\n       15, 20, 51, 92,  1, 48, 32, 45,  0,  5, 72, 60, 28, 82, 89, 86, 91,\n       56, 21, 42, 50,  7, 34, 47, 54, 25, 98, 14, 33, 58, 94, 10, 43,  9,\n       49, 57, 64, 96, 18, 83, 69, 29, 87, 65, 76, 62, 97, 59, 77])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  2,  4,  5,  6,  7,  9, 10, 11, 12, 15, 16, 17, 19, 20, 21,\n       22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40,\n       41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80,\n       81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2])`, type: `ndarray`\n\nres, value: `array([1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-26') ... ('z', '2015-08-29')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-26    1\nb    2015-08-24    1\n     2015-08-25    2\n     2015-08-27    1\n     2015-08-29    1\n                  ..\ny    2015-08-30    1\n     2015-08-31    1\nz    2015-08-26    1\n     2015-08-27    1\n     2015-08-29    2\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n## Case 243\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     59.0\n1     77.0\n2     44.0\n3     48.0\n4     27.0\n      ... \n95    97.0\n96    64.0\n97    60.0\n98    16.0\n99    13.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,\n        3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,\n        7,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10,\n       11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 16,\n       16, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20,\n       21, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([59., 77., 44., 48., 27., 73., 29., 85., 43., 69., 68., 12., 22.,\n       82., 87., 21., 90., 54., 96., 46., 35., 56., 83., 40.,  6., 65.,\n       61., 31.,  3., 51., 16., 28., 39., 62.,  0., 74.,  1., 49., 13.,\n       37., 41., 80., 26., 92., 88., 34., 23., 15., 84., 10., 36.,  2.,\n       97., 64., 60.])`, type: `ndarray`\n\nval, value: `array([59., 77., 44., 48., 27., ... ,  2., 97., 64., 60., 16., 13.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 13, 13, 25, 42, 43, -1, -1,  3, 18, 19, 21, 40,  2,  5,  8, -1,\n       26, -1,  3,  5,  6, 12, 17, 30, -1, -1,  9,  9, 15, 18, 28, 27, 52,\n        3, 14, 27, 32, 45, 49,  4, 43, -1,  6, 29, 38, 38, 47, 26, 41, 42,\n       22, 27, 29, 11, 15, 48, 18, 35, -1, 22, 23, -1,  0,  5, 39, 44, 21,\n       41, 35, 50, 11, 16, 30, -1, -1, 19, 24, 30, 34,  7, 10, 10, 37, 51,\n       -1, -1, 31, 33, 36, 53, -1, -1,  8, 20, 46,  2, 38, 47, 54])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 52, 35, 69, 86, 85,  8, 63, 78, 61, 30, 67,  2, 24, 11, 66,\n       36, 26,  3, 16, 13, 17, 22, 55, 27, 84, 12, 53, 41, 23, 38, 39, 95,\n       73, 19, 74, 44, 75, 90,  4, 70, 46,  6, 40, 80, 99, 88, 93, 68, 71,\n       31, 37, 79, 15, 20, 81, 51, 92, 45, 48, 32, 28,  0,  5, 60, 72, 82,\n       89, 56, 91, 50, 21, 42,  7, 47, 25, 34, 98, 54, 10, 14, 33, 58, 94,\n        9, 64, 43, 49, 57, 96, 83, 65, 87, 29, 76, 62, 59, 77, 97])`, type: `ndarray`\n\nidx, value: `array([ 6,  7, 13, 16, 18, 25, 32, 34, 40, 42, 48, 51, 54, 57, 59, 62, 67,\n       69, 71, 74, 80, 85, 91, 92, 96])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 0, 5, 3, 1, 6, 4, 2, 6, 2, 4, 3, 3, 3, 2, 2, 4, 2, 2, 3, 4, 4,\n       4, 0, 3, 4])`, type: `ndarray`\n\nres, value: `array([0, 5, 3, 1, 6, 4, 2, 6, 2, 4, 3, 3, 3, 2, 2, 4, 2, 2, 3, 4, 4, 4,\n       0, 3, 4])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    0\nb    5\nd    3\ne    1\nf    6\ng    4\nh    2\ni    6\nj    2\nk    4\nl    3\nm    3\nn    3\no    2\np    2\nq    4\nr    2\ns    2\nt    3\nu    4\nv    4\nw    4\nx    0\ny    3\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n## Case 244\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     59.0\n1     77.0\n2     44.0\n3     48.0\n4     27.0\n      ... \n95    97.0\n96    64.0\n97    60.0\n98    16.0\n99    13.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  3,  4,  5,  6,\n        6,  7,  8,  9, 10, 10, 11, 12, 13, 13, 14, 15, 16, 17, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34, 35,\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 64, 65, 66,\n       67, 68, 69, 70, 70, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79])`, type: `ndarray`\n\n_, value: `array([59., 77., 44., 48., 27., 73., 29., 85., 43., 69., 68., 12., 22.,\n       82., 87., 21., 90., 54., 96., 46., 35., 56., 83., 40.,  6., 65.,\n       61., 31.,  3., 51., 16., 28., 39., 62.,  0., 74.,  1., 49., 13.,\n       37., 41., 80., 26., 92., 88., 34., 23., 15., 84., 10., 36.,  2.,\n       97., 64., 60.])`, type: `ndarray`\n\nval, value: `array([59., 77., 44., 48., 27., ... ,  2., 97., 64., 60., 16., 13.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 13, 13, 25, 29, 42, 43, 47, -1, 21, -1, 19,  3, 40, 18,  2,\n        5,  8, -1, 26,  5,  6, -1, 17, 12, 30, 18, 28, -1,  9,  9, -1, 15,\n       52, 27, 45, 14, 49, 32,  3, 27,  4, 43, -1,  6, 38, 38, 47, 42, 26,\n       41, 29, 22, 27, 48, 11, 15, 18, 35, 22, 23, -1,  0,  5, 44, 39, -1,\n       21, 41, 50, 35, 16, 30, 11, -1, 24, -1, 34, 19, 30, 10, 10, 37, 51,\n        7, 31, -1, -1, 33, 36, 53, -1, 20,  8, -1, 46,  2, 54, 38])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 52, 35, 40, 69, 86, 77, 85, 30,  8, 61, 63, 67, 78,  2,\n       24, 11, 66, 36, 16, 13, 26, 22, 17, 55, 23, 38, 84, 12, 53, 27, 41,\n       95, 39, 75, 19, 90, 44, 73, 74,  4, 70, 46,  6, 99, 80, 88, 71, 93,\n       68, 79, 31, 37, 81, 15, 20, 51, 92, 48, 32, 45,  0,  5, 72, 60, 28,\n       82, 89, 91, 56, 21, 42, 50,  7, 34, 47, 54, 25, 98, 14, 33, 58, 94,\n       10, 43,  9, 64, 49, 57, 96, 83, 29, 87, 65, 76, 62, 97, 59])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29,\n       30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48,\n       49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85,\n       86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([8, 0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 2, 1,\n       1, 1, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1,\n       1, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-26') ... ('z', '2015-08-29')],\n           names=['jim', 'joe'])`, shape: `(80,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-26    0\nb    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-29    1\n                  ..\ny    2015-08-30    0\n     2015-08-31    1\nz    2015-08-26    1\n     2015-08-27    1\n     2015-08-29    1\nName: julie, Length: 80, dtype: int64`, type: `Series`\n\n## Case 245\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     59.0\n1     77.0\n2     44.0\n3     48.0\n4     27.0\n      ... \n95    97.0\n96    64.0\n97    60.0\n98    16.0\n99    13.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,\n        3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,\n        7,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10,\n       11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 16,\n       16, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20,\n       21, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([59., 77., 44., 48., 27., 73., 29., 85., 43., 69., 68., 12., 22.,\n       82., 87., 21., 90., 54., 96., 46., 35., 56., 83., 40.,  6., 65.,\n       61., 31.,  3., 51., 16., 28., 39., 62.,  0., 74.,  1., 49., 13.,\n       37., 41., 80., 26., 92., 88., 34., 23., 15., 84., 10., 36.,  2.,\n       97., 64., 60.])`, type: `ndarray`\n\nval, value: `array([59., 77., 44., 48., 27., ... ,  2., 97., 64., 60., 16., 13.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 13, 13, 25, 42, 43, -1, -1,  3, 18, 19, 21, 40,  2,  5,  8, -1,\n       26, -1,  3,  5,  6, 12, 17, 30, -1, -1,  9,  9, 15, 18, 28, 27, 52,\n        3, 14, 27, 32, 45, 49,  4, 43, -1,  6, 29, 38, 38, 47, 26, 41, 42,\n       22, 27, 29, 11, 15, 48, 18, 35, -1, 22, 23, -1,  0,  5, 39, 44, 21,\n       41, 35, 50, 11, 16, 30, -1, -1, 19, 24, 30, 34,  7, 10, 10, 37, 51,\n       -1, -1, 31, 33, 36, 53, -1, -1,  8, 20, 46,  2, 38, 47, 54])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 52, 35, 69, 86, 85,  8, 63, 78, 61, 30, 67,  2, 24, 11, 66,\n       36, 26,  3, 16, 13, 17, 22, 55, 27, 84, 12, 53, 41, 23, 38, 39, 95,\n       73, 19, 74, 44, 75, 90,  4, 70, 46,  6, 40, 80, 99, 88, 93, 68, 71,\n       31, 37, 79, 15, 20, 81, 51, 92, 45, 48, 32, 28,  0,  5, 60, 72, 82,\n       89, 56, 91, 50, 21, 42,  7, 47, 25, 34, 98, 54, 10, 14, 33, 58, 94,\n        9, 64, 43, 49, 57, 96, 83, 65, 87, 29, 76, 62, 59, 77, 97])`, type: `ndarray`\n\nidx, value: `array([ 6,  7, 13, 16, 18, 25, 32, 34, 40, 42, 48, 51, 54, 57, 59, 62, 67,\n       69, 71, 74, 80, 85, 91, 92, 96])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 0, 5, 3, 1, 6, 4, 2, 6, 2, 4, 3, 3, 3, 2, 2, 4, 2, 2, 3, 4, 4,\n       4, 0, 3, 4])`, type: `ndarray`\n\nres, value: `array([0, 5, 3, 1, 6, 4, 2, 6, 2, 4, 3, 3, 3, 2, 2, 4, 2, 2, 3, 4, 4, 4,\n       0, 3, 4])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    0\nb    5\nd    3\ne    1\nf    6\ng    4\nh    2\ni    6\nj    2\nk    4\nl    3\nm    3\nn    3\no    2\np    2\nq    4\nr    2\ns    2\nt    3\nu    4\nv    4\nw    4\nx    0\ny    3\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n## Case 246\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     59.0\n1     77.0\n2     44.0\n3     48.0\n4     27.0\n      ... \n95    97.0\n96    64.0\n97    60.0\n98    16.0\n99    13.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  3,  4,  5,  6,\n        6,  7,  8,  9, 10, 10, 11, 12, 13, 13, 14, 15, 16, 17, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34, 35,\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 64, 65, 66,\n       67, 68, 69, 70, 70, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79])`, type: `ndarray`\n\n_, value: `array([59., 77., 44., 48., 27., 73., 29., 85., 43., 69., 68., 12., 22.,\n       82., 87., 21., 90., 54., 96., 46., 35., 56., 83., 40.,  6., 65.,\n       61., 31.,  3., 51., 16., 28., 39., 62.,  0., 74.,  1., 49., 13.,\n       37., 41., 80., 26., 92., 88., 34., 23., 15., 84., 10., 36.,  2.,\n       97., 64., 60.])`, type: `ndarray`\n\nval, value: `array([59., 77., 44., 48., 27., ... ,  2., 97., 64., 60., 16., 13.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 13, 13, 25, 29, 42, 43, 47, -1, 21, -1, 19,  3, 40, 18,  2,\n        5,  8, -1, 26,  5,  6, -1, 17, 12, 30, 18, 28, -1,  9,  9, -1, 15,\n       52, 27, 45, 14, 49, 32,  3, 27,  4, 43, -1,  6, 38, 38, 47, 42, 26,\n       41, 29, 22, 27, 48, 11, 15, 18, 35, 22, 23, -1,  0,  5, 44, 39, -1,\n       21, 41, 50, 35, 16, 30, 11, -1, 24, -1, 34, 19, 30, 10, 10, 37, 51,\n        7, 31, -1, -1, 33, 36, 53, -1, 20,  8, -1, 46,  2, 54, 38])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 52, 35, 40, 69, 86, 77, 85, 30,  8, 61, 63, 67, 78,  2,\n       24, 11, 66, 36, 16, 13, 26, 22, 17, 55, 23, 38, 84, 12, 53, 27, 41,\n       95, 39, 75, 19, 90, 44, 73, 74,  4, 70, 46,  6, 99, 80, 88, 71, 93,\n       68, 79, 31, 37, 81, 15, 20, 51, 92, 48, 32, 45,  0,  5, 72, 60, 28,\n       82, 89, 91, 56, 21, 42, 50,  7, 34, 47, 54, 25, 98, 14, 33, 58, 94,\n       10, 43,  9, 64, 49, 57, 96, 83, 29, 87, 65, 76, 62, 97, 59])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29,\n       30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48,\n       49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85,\n       86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([8, 0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 2, 1,\n       1, 1, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1,\n       1, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-26') ... ('z', '2015-08-29')],\n           names=['jim', 'joe'])`, shape: `(80,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-26    0\nb    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-29    1\n                  ..\ny    2015-08-30    0\n     2015-08-31    1\nz    2015-08-26    1\n     2015-08-27    1\n     2015-08-29    1\nName: julie, Length: 80, dtype: int64`, type: `Series`\n\n## Case 247\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       8\n1       7\n2      44\n3      47\n4      96\n       ..\n995    76\n996    97\n997    24\n998    14\n999    25\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 8,  7, 44, 47, 96, 21, 70, 99, 53, 95, 57,  6, 26, 74, 32, 92, 40,\n        5, 98, 91, 28, 25, 54, 55, 48,  4, 64, 18, 10, 51, 12, 84, 67, 86,\n       69, 71, 93, 29, 59, 60, 19, 75, 79, 78, 83, 22, 56, 33, 41, 34, 81,\n       39, 17, 63, 42, 31, 87, 90, 88, 46, 52, 68, 49, 82, 30,  2,  9, 50,\n       16, 15, 36, 85, 65, 73,  3, 14, 38, 97, 11,  1, 66, 72, 37, 61, 27,\n       35, 58, 23, 76, 94,  0, 80, 20, 43, 45, 77, 89, 13, 24, 62])`, type: `ndarray`\n\nval, value: `array([ 8,  7, 44, 47, 96, 21, 70, ... , 42,  8,  3, 76, 97, 24, 14, 25])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ 0,  1,  1,  4, 11, 11, 12, ... , 74, 76, 76, 77, 88, 89, 94, 94])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([993,   1, 945, 220,  12, ... , 738, 193, 501, 834, 405, 866])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  41,  81, 117, 151, 192, 235, 275, 310, 336, 378, 422, 473,\n       523, 560, 596, 638, 685, 719, 756, 798, 834, 859, 895, 934, 968])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 0, 1, 0, 1, ... ,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([31, 33, 32, 32, 33, 34, 32, 30, 22, 37, 38, 42, 38, 29, 31, 36, 38,\n       29, 30, 32, 32, 22, 32, 31, 29, 27])`, type: `ndarray`\n\nres, value: `array([31, 33, 32, 32, 33, 34, 32, 30, 22, 37, 38, 42, 38, 29, 31, 36, 38,\n       29, 30, 32, 32, 22, 32, 31, 29, 27])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    31\nb    33\nc    32\nd    32\ne    33\nf    34\ng    32\nh    30\ni    22\nj    37\nk    38\nl    42\nm    38\nn    29\no    31\np    36\nq    38\nr    29\ns    30\nt    32\nu    32\nv    22\nw    32\nx    31\ny    29\nz    27\nName: julie, dtype: int64`, type: `Series`\n\n## Case 248\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       8\n1       7\n2      44\n3      47\n4      96\n       ..\n995    76\n996    97\n997    24\n998    14\n999    25\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 253, 253, 253, 253, 253, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 8,  7, 44, 47, 96, 21, 70, 99, 53, 95, 57,  6, 26, 74, 32, 92, 40,\n        5, 98, 91, 28, 25, 54, 55, 48,  4, 64, 18, 10, 51, 12, 84, 67, 86,\n       69, 71, 93, 29, 59, 60, 19, 75, 79, 78, 83, 22, 56, 33, 41, 34, 81,\n       39, 17, 63, 42, 31, 87, 90, 88, 46, 52, 68, 49, 82, 30,  2,  9, 50,\n       16, 15, 36, 85, 65, 73,  3, 14, 38, 97, 11,  1, 66, 72, 37, 61, 27,\n       35, 58, 23, 76, 94,  0, 80, 20, 43, 45, 77, 89, 13, 24, 62])`, type: `ndarray`\n\nval, value: `array([ 8,  7, 44, 47, 96, 21, 70, ... , 42,  8,  3, 76, 97, 24, 14, 25])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([48, 49, 54, 72, 84, 88, 30, ... , 76, 88, 19, 30, 51, 61, 67, 70])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([138, 720, 936, 581, 179, ... , 683, 451, 974, 821, 266, 360])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   6,   9,  18,  23, ... , 977, 981, 984, 986, 990, 994])`, shape: `(254,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 6,  3,  9,  5,  4,  4,  4, ... ,  2,  4,  4,  3,  2,  4,  4,  6])`, shape: `(254,)`, type: `ndarray`\n\nres, value: `array([ 6,  3,  9,  5,  4,  4,  4, ... ,  2,  4,  4,  3,  2,  4,  4,  6])`, shape: `(254,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    6\n     2015-08-24    3\n     2015-08-25    9\n     2015-08-26    5\n     2015-08-27    4\n                  ..\nz    2015-08-28    3\n     2015-08-29    2\n     2015-08-30    4\n     2015-08-31    4\n     2015-09-01    6\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n## Case 249\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       8.0\n1       7.0\n2      44.0\n3      47.0\n4      96.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    14.0\n999    25.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 8.,  7., 44., 47., 96., ... , 38., 49., 13., 24., 62., 56.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([ 8.,  7., 44., 47., 96., ... ,  3., nan, nan, nan, 14., 25.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 63, 67, 81, 83, 88, 88, 94, 94])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 193, 760, 405, 866, 485, 738])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  97, 134, 168, 202, 243, 284, 321, 353, 377, 417, 459, 502,\n       548, 583, 615, 653, 696, 730, 766, 806, 841, 865, 899, 936, 969])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 1, 1, 1, 0, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([36, 28, 23, 27, 29, 26, 29, 27, 25, 15, 33, 35, 32, 28, 22, 23, 31,\n       32, 23, 27, 28, 26, 19, 26, 28, 24, 23])`, type: `ndarray`\n\nres, value: `array([28, 23, 27, 29, 26, 29, 27, 25, 15, 33, 35, 32, 28, 22, 23, 31, 32,\n       23, 27, 28, 26, 19, 26, 28, 24, 23])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    28\nb    23\nc    27\nd    29\ne    26\nf    29\ng    27\nh    25\ni    15\nj    33\nk    35\nl    32\nm    28\nn    22\no    23\np    31\nq    32\nr    23\ns    27\nt    28\nu    26\nv    19\nw    26\nx    28\ny    24\nz    23\nName: julie, dtype: int64`, type: `Series`\n\n## Case 250\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       8.0\n1       7.0\n2      44.0\n3      47.0\n4      96.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    14.0\n999    25.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 251, 251, 251, 251, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 8.,  7., 44., 47., 96., ... , 38., 49., 13., 24., 62., 56.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([ 8.,  7., 44., 47., 96., ... ,  3., nan, nan, nan, 14., 25.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 27, 94, 16, 25, 44, 53, 58, 63])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 683, 451, 974, 821, 266, 360])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  89,  92, 101, 104, ... ,\n       982, 985, 987, 990, 994])`, shape: `(252,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([50,  3,  2,  8,  3,  3,  3, ... ,  1,  4,  3,  2,  2,  3,  3,  6])`, shape: `(253,)`, type: `ndarray`\n\nres, value: `array([3, 2, 8, 3, 3, 3, 3, 2, 1, ... ,\n       2, 1, 1, 4, 3, 2, 2, 3, 3, 6])`, shape: `(252,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    8\n     2015-08-26    3\n     2015-08-27    3\n                  ..\nz    2015-08-28    2\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    3\n     2015-09-01    6\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n## Case 251\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       8.0\n1       7.0\n2      44.0\n3      47.0\n4      96.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    14.0\n999    25.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 8.,  7., 44., 47., 96., ... , 38., 49., 13., 24., 62., 56.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([ 8.,  7., 44., 47., 96., ... ,  3., nan, nan, nan, 14., 25.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 63, 67, 81, 83, 88, 88, 94, 94])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 193, 760, 405, 866, 485, 738])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  97, 134, 168, 202, 243, 284, 321, 353, 377, 417, 459, 502,\n       548, 583, 615, 653, 696, 730, 766, 806, 841, 865, 899, 936, 969])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 1, 1, 1, 0, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([36, 28, 23, 27, 29, 26, 29, 27, 25, 15, 33, 35, 32, 28, 22, 23, 31,\n       32, 23, 27, 28, 26, 19, 26, 28, 24, 23])`, type: `ndarray`\n\nres, value: `array([28, 23, 27, 29, 26, 29, 27, 25, 15, 33, 35, 32, 28, 22, 23, 31, 32,\n       23, 27, 28, 26, 19, 26, 28, 24, 23])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    28\nb    23\nc    27\nd    29\ne    26\nf    29\ng    27\nh    25\ni    15\nj    33\nk    35\nl    32\nm    28\nn    22\no    23\np    31\nq    32\nr    23\ns    27\nt    28\nu    26\nv    19\nw    26\nx    28\ny    24\nz    23\nName: julie, dtype: int64`, type: `Series`\n\n## Case 252\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       8.0\n1       7.0\n2      44.0\n3      47.0\n4      96.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    14.0\n999    25.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 251, 251, 251, 251, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([ 8.,  7., 44., 47., 96., ... , 38., 49., 13., 24., 62., 56.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([ 8.,  7., 44., 47., 96., ... ,  3., nan, nan, nan, 14., 25.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 27, 94, 16, 25, 44, 53, 58, 63])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... , 683, 451, 974, 821, 266, 360])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  89,  92, 101, 104, ... ,\n       982, 985, 987, 990, 994])`, shape: `(252,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([50,  3,  2,  8,  3,  3,  3, ... ,  1,  4,  3,  2,  2,  3,  3,  6])`, shape: `(253,)`, type: `ndarray`\n\nres, value: `array([3, 2, 8, 3, 3, 3, 3, 2, 1, ... ,\n       2, 1, 1, 4, 3, 2, 2, 3, 3, 6])`, shape: `(252,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    8\n     2015-08-26    3\n     2015-08-27    3\n                  ..\nz    2015-08-28    2\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    3\n     2015-09-01    6\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n## Case 253\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       90\n1       61\n2       66\n3       12\n4       76\n        ..\n9995    84\n9996    18\n9997    19\n9998     8\n9999    42\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([90, 61, 66, 12, 76, 47, 20, 32, 77, 91, 82, 51, 81, 16, 59, 31, 73,\n       25, 69,  4, 87,  3, 33, 93, 85, 38, 34, 56, 48, 94, 26, 15, 29, 88,\n       11, 53, 68, 49, 83, 46,  0, 28, 96,  5, 17, 80, 30, 19,  7, 36, 14,\n       65, 64, 70, 27, 95, 35, 72,  8, 79,  6, 63, 44, 42, 22, 74,  2, 39,\n       24, 10, 92,  1, 45, 54, 62, 21, 41, 52, 13, 97, 75, 50, 78, 58, 18,\n       86, 60, 89, 71,  9, 84, 55, 98, 57, 37, 99, 43, 67, 23, 40])`, type: `ndarray`\n\nval, value: `array([90, 61, 66, ..., 19,  8, 42])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([1216, 1300, 1357, ..., 8886, 9318, 9725])`, type: `ndarray`\n\nidx, value: `array([   0,  389,  797, 1194, 1613, 1993, 2382, 2774, 3149, 3532, 3898,\n       4266, 4628, 4998, 5360, 5768, 6126, 6504, 6899, 7267, 7638, 8013,\n       8410, 8790, 9190, 9603])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 99,  98,  99,  99, 100,  98,  98,  96,  96,  96,  96,  98,  97,\n        97,  99,  97,  95,  99,  99, 100,  99,  95,  98,  98,  98,  98])`, type: `ndarray`\n\nres, value: `array([ 99,  98,  99,  99, 100,  98,  98,  96,  96,  96,  96,  98,  97,\n        97,  99,  97,  95,  99,  99, 100,  99,  95,  98,  98,  98,  98])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na     99\nb     98\nc     99\nd     99\ne    100\nf     98\ng     98\nh     96\ni     96\nj     96\nk     96\nl     98\nm     97\nn     97\no     99\np     97\nq     95\nr     99\ns     99\nt    100\nu     99\nv     95\nw     98\nx     98\ny     98\nz     98\nName: julie, dtype: int64`, type: `Series`\n\n## Case 254\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       90\n1       61\n2       66\n3       12\n4       76\n        ..\n9995    84\n9996    18\n9997    19\n9998     8\n9999    42\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([90, 61, 66, 12, 76, 47, 20, 32, 77, 91, 82, 51, 81, 16, 59, 31, 73,\n       25, 69,  4, 87,  3, 33, 93, 85, 38, 34, 56, 48, 94, 26, 15, 29, 88,\n       11, 53, 68, 49, 83, 46,  0, 28, 96,  5, 17, 80, 30, 19,  7, 36, 14,\n       65, 64, 70, 27, 95, 35, 72,  8, 79,  6, 63, 44, 42, 22, 74,  2, 39,\n       24, 10, 92,  1, 45, 54, 62, 21, 41, 52, 13, 97, 75, 50, 78, 58, 18,\n       86, 60, 89, 71,  9, 84, 55, 98, 57, 37, 99, 43, 67, 23, 40])`, type: `ndarray`\n\nval, value: `array([90, 61, 66, ..., 19,  8, 42])`, type: `ndarray`\n\ncodes, value: `array([ 0, 13, 14, ..., 93, 95, 96])`, type: `ndarray`\n\nsorter, value: `array([1300, 3775, 6487, ..., 8602, 4472, 1475])`, type: `ndarray`\n\nidx, value: `array([   0,   40,   71,  107,  143, ... , 9798, 9838, 9871, 9918, 9958])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([37, 29, 29, 33, 35, 33, 31, ... , 32,\n       36, 30, 39, 36, 34])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([37, 29, 29, 33, 35, 33, 31, ... , 32,\n       36, 30, 39, 36, 34])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    37\n     2015-08-24    29\n     2015-08-25    29\n     2015-08-26    33\n     2015-08-27    35\n                   ..\nz    2015-08-28    36\n     2015-08-29    30\n     2015-08-30    39\n     2015-08-31    36\n     2015-09-01    34\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 255\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       90.0\n1       61.0\n2       66.0\n3       12.0\n4       76.0\n        ... \n9995    84.0\n9996    18.0\n9997    19.0\n9998     8.0\n9999    42.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([90., 61., 66., 12., 76., ... , 43., 84., 67., 23., 19., 40.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([90., 61., 66., ..., 19.,  8., 42.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9953, 1421, 8886])`, type: `ndarray`\n\nidx, value: `array([ 589,  960, 1350, 1719, 2118, 2475, 2847, 3219, 3566, 3936, 4279,\n       4623, 4965, 5314, 5654, 6033, 6370, 6726, 7097, 7452, 7798, 8145,\n       8514, 8860, 9246, 9636])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  98,  92,  97,  97,  98,  94,  95,  93,  95,  93,  93,  91,\n        95,  94,  97,  91,  94,  97,  97,  98,  96,  94,  97,  94,  96,\n        97])`, type: `ndarray`\n\nres, value: `array([98, 92, 97, 97, 98, 94, 95, 93, 95, 93, 93, 91, 95, 94, 97, 91, 94,\n       97, 97, 98, 96, 94, 97, 94, 96, 97])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    98\nb    92\nc    97\nd    97\ne    98\nf    94\ng    95\nh    93\ni    95\nj    93\nk    93\nl    91\nm    95\nn    94\no    97\np    91\nq    94\nr    97\ns    97\nt    98\nu    96\nv    94\nw    97\nx    94\ny    96\nz    97\nName: julie, dtype: int64`, type: `Series`\n\n## Case 256\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       90.0\n1       61.0\n2       66.0\n3       12.0\n4       76.0\n        ... \n9995    84.0\n9996    18.0\n9997    19.0\n9998     8.0\n9999    42.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([90., 61., 66., 12., 76., ... , 43., 84., 67., 23., 19., 40.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([90., 61., 66., ..., 19.,  8., 42.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 90, 90, 94])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 4543, 8602, 1475])`, type: `ndarray`\n\nidx, value: `array([ 844,  879,  909,  942,  970, ... , 9821, 9856, 9886, 9929, 9966])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  25,  23,  21,  22, ... ,  26,  20,  36,  29,\n        24])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([25, 23, 21, 22, 26, 22, 25, ... , 24,\n       26, 20, 36, 29, 24])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    25\n     2015-08-24    23\n     2015-08-25    21\n     2015-08-26    22\n     2015-08-27    26\n                   ..\nz    2015-08-28    26\n     2015-08-29    20\n     2015-08-30    36\n     2015-08-31    29\n     2015-09-01    24\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 257\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       90.0\n1       61.0\n2       66.0\n3       12.0\n4       76.0\n        ... \n9995    84.0\n9996    18.0\n9997    19.0\n9998     8.0\n9999    42.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([90., 61., 66., 12., 76., ... , 43., 84., 67., 23., 19., 40.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([90., 61., 66., ..., 19.,  8., 42.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9953, 1421, 8886])`, type: `ndarray`\n\nidx, value: `array([ 589,  960, 1350, 1719, 2118, 2475, 2847, 3219, 3566, 3936, 4279,\n       4623, 4965, 5314, 5654, 6033, 6370, 6726, 7097, 7452, 7798, 8145,\n       8514, 8860, 9246, 9636])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  98,  92,  97,  97,  98,  94,  95,  93,  95,  93,  93,  91,\n        95,  94,  97,  91,  94,  97,  97,  98,  96,  94,  97,  94,  96,\n        97])`, type: `ndarray`\n\nres, value: `array([98, 92, 97, 97, 98, 94, 95, 93, 95, 93, 93, 91, 95, 94, 97, 91, 94,\n       97, 97, 98, 96, 94, 97, 94, 96, 97])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    98\nb    92\nc    97\nd    97\ne    98\nf    94\ng    95\nh    93\ni    95\nj    93\nk    93\nl    91\nm    95\nn    94\no    97\np    91\nq    94\nr    97\ns    97\nt    98\nu    96\nv    94\nw    97\nx    94\ny    96\nz    97\nName: julie, dtype: int64`, type: `Series`\n\n## Case 258\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       90.0\n1       61.0\n2       66.0\n3       12.0\n4       76.0\n        ... \n9995    84.0\n9996    18.0\n9997    19.0\n9998     8.0\n9999    42.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([90., 61., 66., 12., 76., ... , 43., 84., 67., 23., 19., 40.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([90., 61., 66., ..., 19.,  8., 42.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 90, 90, 94])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 4543, 8602, 1475])`, type: `ndarray`\n\nidx, value: `array([ 844,  879,  909,  942,  970, ... , 9821, 9856, 9886, 9929, 9966])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  25,  23,  21,  22, ... ,  26,  20,  36,  29,\n        24])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([25, 23, 21, 22, 26, 22, 25, ... , 24,\n       26, 20, 36, 29, 24])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    25\n     2015-08-24    23\n     2015-08-25    21\n     2015-08-26    22\n     2015-08-27    26\n                   ..\nz    2015-08-28    26\n     2015-08-29    20\n     2015-08-30    36\n     2015-08-31    29\n     2015-09-01    24\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 259\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        78\n1        96\n2        11\n3        91\n4        71\n         ..\n99995    83\n99996    90\n99997    46\n99998    71\n99999    64\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([78, 96, 11, 91, 71, 79, 69, 59, 53, 70,  9, 74,  6, 35, 55, 14,  2,\n       84, 54, 41, 13, 21, 64, 49, 85, 68, 44, 51,  1, 48, 93, 26, 25, 56,\n       20, 32, 62, 63,  7, 99, 61, 65, 24, 92, 34, 45,  0, 95, 80, 23, 10,\n       30, 98, 47, 31, 18, 42, 39, 36, 38, 60, 15, 37, 90, 72, 66, 40, 82,\n       46, 27, 87, 67, 58,  5, 43,  8, 29, 50, 28,  4, 57, 89, 88, 81, 75,\n       16, 83, 17, 12,  3, 73, 86, 97, 94, 52, 76, 77, 19, 22, 33])`, type: `ndarray`\n\nval, value: `array([78, 96, 11, ..., 46, 71, 64])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 2366,  7634, 10159, ..., 92107, 93431, 99210])`, type: `ndarray`\n\nidx, value: `array([    0,  3754,  7558, 11478, 15362, 19110, 22945, 26782, 30676,\n       34520, 38340, 42230, 46118, 49995, 53764, 57613, 61438, 65233,\n       69089, 72983, 76883, 80713, 84595, 88344, 92282, 96152])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n## Case 260\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        78\n1        96\n2        11\n3        91\n4        71\n         ..\n99995    83\n99996    90\n99997    46\n99998    71\n99999    64\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([78, 96, 11, 91, 71, 79, 69, 59, 53, 70,  9, 74,  6, 35, 55, 14,  2,\n       84, 54, 41, 13, 21, 64, 49, 85, 68, 44, 51,  1, 48, 93, 26, 25, 56,\n       20, 32, 62, 63,  7, 99, 61, 65, 24, 92, 34, 45,  0, 95, 80, 23, 10,\n       30, 98, 47, 31, 18, 42, 39, 36, 38, 60, 15, 37, 90, 72, 66, 40, 82,\n       46, 27, 87, 67, 58,  5, 43,  8, 29, 50, 28,  4, 57, 89, 88, 81, 75,\n       16, 83, 17, 12,  3, 73, 86, 97, 94, 52, 76, 77, 19, 22, 33])`, type: `ndarray`\n\nval, value: `array([78, 96, 11, ..., 46, 71, 64])`, type: `ndarray`\n\ncodes, value: `array([ 0,  0,  0, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([10159, 15917, 18748, ..., 41102, 12816, 81080])`, type: `ndarray`\n\nidx, value: `array([    0,   405,   744,  1117, ... , 98072, 98452, 98816, 99217, 99629])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 95,  98,  97,  98,  97, ... ,  98,  97,  98,  99,  99,  98])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([ 95,  98,  97,  98,  97, ... ,  98,  97,  98,  99,  99,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    95\n     2015-08-24    98\n     2015-08-25    97\n     2015-08-26    98\n     2015-08-27    97\n                   ..\nz    2015-08-28    97\n     2015-08-29    98\n     2015-08-30    99\n     2015-08-31    99\n     2015-09-01    98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 261\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        78.0\n1        96.0\n2        11.0\n3        91.0\n4        71.0\n         ... \n99995    83.0\n99996    90.0\n99997    46.0\n99998    71.0\n99999    64.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([78., 96., 11., 91., 71., ... , 76., 22., 33.,  8., 36., 20.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([78., 96., 11., ..., 46., 71., 64.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 94180, 94542, 96949])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9414, 13002, 16698, 20365, 23895, 27502, 31108, 34768,\n       38390, 41986, 45632, 49289, 52918, 56458, 60071, 63677, 67223,\n       70861, 74532, 78208, 81832, 85475, 89002, 92706, 96379])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n## Case 262\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        78.0\n1        96.0\n2        11.0\n3        91.0\n4        71.0\n         ... \n99995    83.0\n99996    90.0\n99997    46.0\n99998    71.0\n99999    64.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([78., 96., 11., 91., 71., ... , 76., 22., 33.,  8., 36., 20.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([78., 96., 11., ..., 46., 71., 64.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 25751, 34802, 87057])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8800,  9109,  9447, ... , 98233, 98576, 98910, 99281, 99661])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  94,  93,  96,  93, ... ,  95,  95,  94,  98,\n        94])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 94,  93,  96,  93,  93, ... ,  93,  95,  95,  94,  98,  94])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    94\n     2015-08-24    93\n     2015-08-25    96\n     2015-08-26    93\n     2015-08-27    93\n                   ..\nz    2015-08-28    95\n     2015-08-29    95\n     2015-08-30    94\n     2015-08-31    98\n     2015-09-01    94\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 263\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        78.0\n1        96.0\n2        11.0\n3        91.0\n4        71.0\n         ... \n99995    83.0\n99996    90.0\n99997    46.0\n99998    71.0\n99999    64.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([78., 96., 11., 91., 71., ... , 76., 22., 33.,  8., 36., 20.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([78., 96., 11., ..., 46., 71., 64.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 94180, 94542, 96949])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9414, 13002, 16698, 20365, 23895, 27502, 31108, 34768,\n       38390, 41986, 45632, 49289, 52918, 56458, 60071, 63677, 67223,\n       70861, 74532, 78208, 81832, 85475, 89002, 92706, 96379])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n## Case 264\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        78.0\n1        96.0\n2        11.0\n3        91.0\n4        71.0\n         ... \n99995    83.0\n99996    90.0\n99997    46.0\n99998    71.0\n99999    64.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([78., 96., 11., 91., 71., ... , 76., 22., 33.,  8., 36., 20.])`, shape: `(100,)`, type: `ndarray`\n\nval, value: `array([78., 96., 11., ..., 46., 71., 64.])`, type: `ndarray`\n\ncodes, value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 25751, 34802, 87057])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8800,  9109,  9447, ... , 98233, 98576, 98910, 99281, 99661])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  94,  93,  96,  93, ... ,  95,  95,  94,  98,\n        94])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([ 94,  93,  96,  93,  93, ... ,  93,  95,  95,  94,  98,  94])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    94\n     2015-08-24    93\n     2015-08-25    96\n     2015-08-26    93\n     2015-08-27    93\n                   ..\nz    2015-08-28    95\n     2015-08-29    95\n     2015-08-30    94\n     2015-08-31    98\n     2015-09-01    94\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 265\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     525\n1      82\n2     729\n3     865\n4     955\n     ... \n95    726\n96    781\n97    686\n98    839\n99    843\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  3,  3,  3,  3,  3,  3,  4,\n        4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,\n        8,  8,  9,  9,  9,  9,  9,  9,  9,  9, 10, 11, 11, 11, 11, 12, 12,\n       12, 12, 12, 13, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 17,\n       17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20,\n       20, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([525,  82, 729, 865, 955, ... ,\n       945, 726, 781, 686, 839])`, shape: `(96,)`, type: `ndarray`\n\nval, value: `array([525,  82, 729, 865, 955, ... , 945, 726, 781, 686, 839, 843])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 32, 39,  6, 21, 37, 69, 81, 71, 92, 13, 13, 84, 87, 90, 93, 14,\n       42, 77, 80, 23, 62, 66, 82,  1, 18, 24, 41, 27, 31, 74, 17, 53, 57,\n       67, 85,  3, 34, 52, 54, 58, 60, 83, 94, 95, 40, 48, 56, 79,  2, 11,\n       59, 73, 89,  4, 33, 70, 25,  0,  9, 19, 30, 46, 47, 91, 29, 45,  7,\n        8, 38, 43, 50, 65, 87, 88, 35, 61, 86, 12, 63, 76, 26, 36, 51, 68,\n       72, 10, 20, 55, 57, 75, 49, 64, 78,  5, 15, 16, 22, 28, 44])`, type: `ndarray`\n\nsorter, value: `array([66, 32, 39,  6, 21, 37, 70, 83, 72, 95, 13, 89, 86, 99, 93, 96, 14,\n       42, 79, 82, 23, 62, 67, 84,  1, 18, 24, 41, 27, 31, 75, 17, 53, 57,\n       68, 87,  3, 34, 52, 54, 58, 60, 85, 97, 98, 40, 48, 56, 81,  2, 11,\n       59, 74, 92,  4, 33, 71, 25,  0,  9, 19, 30, 46, 47, 94, 29, 45,  7,\n        8, 38, 43, 50, 65, 90, 91, 35, 61, 88, 12, 63, 77, 26, 36, 51, 69,\n       73, 10, 20, 55, 78, 76, 49, 64, 80,  5, 15, 16, 22, 28, 44])`, type: `ndarray`\n\nidx, value: `array([ 0,  3,  8, 10, 16, 20, 24, 28, 31, 36, 44, 45, 49, 54, 57, 58, 65,\n       67, 75, 78, 81, 86, 89, 91, 94])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([3, 5, 2, 5, 4, 4, 4, 3, 5, 8, 1, 4, 5, 3, 1, 7, 2, 8, 3, 3, 5, 3,\n       2, 3, 6])`, type: `ndarray`\n\nres, value: `array([3, 5, 2, 5, 4, 4, 4, 3, 5, 8, 1, 4, 5, 3, 1, 7, 2, 8, 3, 3, 5, 3,\n       2, 3, 6])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    3\nb    5\nc    2\nd    5\ne    4\nf    4\ng    4\nh    3\ni    5\nj    8\nk    1\nl    4\nm    5\nn    3\no    1\np    7\nq    2\nr    8\ns    3\nu    3\nv    5\nw    3\nx    2\ny    3\nz    6\nName: julie, dtype: int64`, type: `Series`\n\n## Case 266\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     525\n1      82\n2     729\n3     865\n4     955\n     ... \n95    726\n96    781\n97    686\n98    839\n99    843\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 12, 13, 14,\n       15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 23, 24, 25, 26, 27, 27, 28,\n       29, 29, 30, 31, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 40, 41, 42,\n       43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 53, 54, 55, 56, 57, 58,\n       59, 60, 61, 61, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71, 72,\n       73, 74, 75, 75, 76, 76, 77, 77, 78, 79, 80, 81, 82, 83, 83])`, type: `ndarray`\n\n_, value: `array([525,  82, 729, 865, 955, ... ,\n       945, 726, 781, 686, 839])`, shape: `(96,)`, type: `ndarray`\n\nval, value: `array([525,  82, 729, 865, 955, ... , 945, 726, 781, 686, 839, 843])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([39,  1, 32, 37, 69,  6, 81, 21, 92, 71, 93, 13, 84, 13, 87, 90, 80,\n       77, 42, 14, 66, 23, 62, 82, 24, 18, 41,  1, 27, 74, 31, 17, 85, 67,\n       53, 57, 54,  3, 52, 94, 58, 83, 34, 60, 95, 48, 56, 79, 40, 11, 59,\n       73, 89,  2, 33,  4, 70, 25, 46,  9, 47, 19, 30,  0, 91, 29, 45, 87,\n       50, 43,  7, 65, 88,  8, 38, 86, 61, 35, 12, 63, 76, 36, 26, 72, 51,\n       68, 55, 10, 20, 57, 75, 49, 78, 64, 44, 22,  5, 28, 15, 16])`, type: `ndarray`\n\nsorter, value: `array([39, 66, 32, 37, 70,  6, 83, 21, 95, 72, 96, 13, 86, 89, 99, 93, 82,\n       79, 42, 14, 67, 23, 62, 84, 24, 18, 41,  1, 27, 75, 31, 17, 87, 68,\n       53, 57, 54,  3, 52, 97, 58, 85, 34, 60, 98, 48, 56, 81, 40, 11, 59,\n       74, 92,  2, 33,  4, 71, 25, 46,  9, 47, 19, 30,  0, 94, 29, 45, 90,\n       50, 43,  7, 65, 91,  8, 38, 88, 61, 35, 12, 63, 77, 36, 26, 73, 51,\n       69, 55, 10, 20, 78, 76, 49, 80, 64, 44, 22,  5, 28, 15, 16])`, type: `ndarray`\n\nidx, value: `array([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 12, 13, 15, 16, 17, 18,\n       19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40,\n       41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n       59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78,\n       79, 80, 81, 82, 84, 85, 86, 87, 89, 91, 93, 94, 95, 96, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-30    1\n     2015-08-31    1\nb    2015-08-24    1\n     2015-08-26    1\n                  ..\nz    2015-08-23    1\n     2015-08-26    1\n     2015-08-28    1\n     2015-08-29    1\n     2015-08-30    2\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n## Case 267\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     525.0\n1      82.0\n2     729.0\n3     865.0\n4     955.0\n      ...  \n95    726.0\n96    781.0\n97    686.0\n98    839.0\n99    843.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  3,\n        3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  7,  7,  7,\n        8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 11, 11, 11, 11,\n       12, 12, 12, 12, 12, 13, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15, 16,\n       16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19, 20, 20, 20,\n       20, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([525.,  82., 729., 865., 955., ... ,\n       945., 726., 781., 686., 839.])`, shape: `(82,)`, type: `ndarray`\n\nval, value: `array([525.,  82., 729., 865., 955., ... , 781., 686., 839.,\n       843.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 15, 29, 43, 57, 70, -1, 26, 33, -1,  6, 18, 31, 58, 60, 78, 10,\n       10, 73, 76, 79, 11, 36, 66, 69, -1, 20, 53, 55, 21, 35, -1, 25, 63,\n       14, 44, 48, 56, 71, -1,  3, 28, 45, 49, 51, 80, 81, 34, 39, 47, 68,\n        2,  8, 50, 62, 75,  4, 27, 59, 22, -1, -1, -1,  0, 16, 24, 77, -1,\n       23, -1, -1, -1, 32, 37, 41, 73, 74, 52, 72,  9, 54, 65, -1, 30, 42,\n       61,  7, 17, 46, 48, 64, -1, 40, 67, -1,  5, 12, 13, 19, 38])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 35, 52, 69, 86, 66, 32, 39, 83,  6, 21, 37, 70, 72, 95, 13,\n       89, 99, 93, 96, 14, 42, 79, 82, 84, 23, 62, 67, 24, 41, 27, 31, 75,\n       17, 53, 57, 68, 87, 85,  3, 34, 54, 58, 60, 97, 98, 40, 48, 56, 81,\n        2, 11, 59, 74, 92,  4, 33, 71, 25,  9, 46, 47,  0, 19, 30, 94, 45,\n       29,  7,  8, 65, 38, 43, 50, 90, 91, 61, 88, 12, 63, 77, 26, 36, 51,\n       73, 10, 20, 55, 78, 76, 64, 49, 80, 28,  5, 15, 16, 22, 44])`, type: `ndarray`\n\nidx, value: `array([ 6,  9, 14, 16, 21, 25, 29, 31, 34, 39, 46, 47, 51, 56, 59, 60, 67,\n       69, 77, 79, 82, 86, 89, 91, 94])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1,\n       1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 2, 4, 2, 4, 4, 3, 2, 2, 5, 6, 1, 4, 5, 3, 1, 4, 1, 5, 2, 3, 3,\n       3, 2, 2, 5])`, type: `ndarray`\n\nres, value: `array([2, 4, 2, 4, 4, 3, 2, 2, 5, 6, 1, 4, 5, 3, 1, 4, 1, 5, 2, 3, 3, 3,\n       2, 2, 5])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    2\nb    4\nc    2\nd    4\ne    4\nf    3\ng    2\nh    2\ni    5\nj    6\nk    1\nl    4\nm    5\nn    3\no    1\np    4\nq    1\nr    5\ns    2\nu    3\nv    3\nw    3\nx    2\ny    2\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n## Case 268\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     525.0\n1      82.0\n2     729.0\n3     865.0\n4     955.0\n      ...  \n95    726.0\n96    781.0\n97    686.0\n98    839.0\n99    843.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  5,  6,\n        7,  8,  9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21,\n       22, 23, 24, 25, 25, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 65,\n       66, 67, 68, 68, 69, 69, 70, 70, 71, 72, 73, 74, 75, 76, 76])`, type: `ndarray`\n\n_, value: `array([525.,  82., 729., 865., 955., ... ,\n       945., 726., 781., 686., 839.])`, shape: `(82,)`, type: `ndarray`\n\nval, value: `array([525.,  82., 729., 865., 955., ... , 781., 686., 839.,\n       843.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 15, 29, 34, 43, 57, 65, 70, 33, -1, 26, 31, 58, -1,  6, 18,\n       78, 60, 79, 10, 10, 73, 76, 69, 66, 36, 11, 55, 20, -1, 53, 21, 35,\n       -1, 63, 25, 14, 71, 56, 44, 48, 45, 80, 49, -1, 28, 51, 81, 39, 47,\n       68,  8, 50, 62, 75,  2, 27,  4, 59, 22, -1, -1, -1, 16, 24,  0, 77,\n       23, -1, 73, 41, 37, -1, -1, 74, -1, 32, 72, 52,  9, 54, 30, -1, 61,\n       42, 46,  7, 17, 48, 64, 40, 67, -1, 38, 19,  5, -1, 12, 13])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 39, 66, 32, 37, 70, 83,  6, 21,\n       95, 72, 96, 13, 89, 99, 93, 82, 79, 42, 14, 67, 23, 84, 62, 24, 41,\n       27, 75, 31, 17, 87, 68, 53, 57, 54, 97, 58, 85, 34, 60, 98, 48, 56,\n       81, 11, 59, 74, 92,  2, 33,  4, 71, 25, 46,  9, 47, 19, 30,  0, 94,\n       29, 45, 90, 50, 43,  7, 65, 91,  8, 38, 88, 61, 12, 63, 36, 26, 73,\n       51, 55, 10, 20, 78, 76, 49, 80, 64, 44, 22,  5, 28, 15, 16])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27,\n       28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 48,\n       49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66,\n       67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86,\n       87, 89, 91, 93, 94, 95, 96, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 2, 1, 2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 2, 2, 0, 1, 1, 1, 0, 2])`, type: `ndarray`\n\nres, value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 2, 1, 2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 2, 2, 0, 1, 1, 1, 0, 2])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(77,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-30    0\n     2015-08-31    1\nb    2015-08-24    1\n     2015-08-26    1\n                  ..\nz    2015-08-23    1\n     2015-08-26    1\n     2015-08-28    1\n     2015-08-29    0\n     2015-08-30    2\nName: julie, Length: 77, dtype: int64`, type: `Series`\n\n## Case 269\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     525.0\n1      82.0\n2     729.0\n3     865.0\n4     955.0\n      ...  \n95    726.0\n96    781.0\n97    686.0\n98    839.0\n99    843.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  3,\n        3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  7,  7,  7,\n        8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 11, 11, 11, 11,\n       12, 12, 12, 12, 12, 13, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15, 16,\n       16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19, 20, 20, 20,\n       20, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 24])`, type: `ndarray`\n\n_, value: `array([525.,  82., 729., 865., 955., ... ,\n       945., 726., 781., 686., 839.])`, shape: `(82,)`, type: `ndarray`\n\nval, value: `array([525.,  82., 729., 865., 955., ... , 781., 686., 839.,\n       843.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1, 15, 29, 43, 57, 70, -1, 26, 33, -1,  6, 18, 31, 58, 60, 78, 10,\n       10, 73, 76, 79, 11, 36, 66, 69, -1, 20, 53, 55, 21, 35, -1, 25, 63,\n       14, 44, 48, 56, 71, -1,  3, 28, 45, 49, 51, 80, 81, 34, 39, 47, 68,\n        2,  8, 50, 62, 75,  4, 27, 59, 22, -1, -1, -1,  0, 16, 24, 77, -1,\n       23, -1, -1, -1, 32, 37, 41, 73, 74, 52, 72,  9, 54, 65, -1, 30, 42,\n       61,  7, 17, 46, 48, 64, -1, 40, 67, -1,  5, 12, 13, 19, 38])`, type: `ndarray`\n\nsorter, value: `array([ 1, 18, 35, 52, 69, 86, 66, 32, 39, 83,  6, 21, 37, 70, 72, 95, 13,\n       89, 99, 93, 96, 14, 42, 79, 82, 84, 23, 62, 67, 24, 41, 27, 31, 75,\n       17, 53, 57, 68, 87, 85,  3, 34, 54, 58, 60, 97, 98, 40, 48, 56, 81,\n        2, 11, 59, 74, 92,  4, 33, 71, 25,  9, 46, 47,  0, 19, 30, 94, 45,\n       29,  7,  8, 65, 38, 43, 50, 90, 91, 61, 88, 12, 63, 77, 26, 36, 51,\n       73, 10, 20, 55, 78, 76, 64, 49, 80, 28,  5, 15, 16, 22, 44])`, type: `ndarray`\n\nidx, value: `array([ 6,  9, 14, 16, 21, 25, 29, 31, 34, 39, 46, 47, 51, 56, 59, 60, 67,\n       69, 77, 79, 82, 86, 89, 91, 94])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1,\n       1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 2, 4, 2, 4, 4, 3, 2, 2, 5, 6, 1, 4, 5, 3, 1, 4, 1, 5, 2, 3, 3,\n       3, 2, 2, 5])`, type: `ndarray`\n\nres, value: `array([2, 4, 2, 4, 4, 3, 2, 2, 5, 6, 1, 4, 5, 3, 1, 4, 1, 5, 2, 3, 3, 3,\n       2, 2, 5])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    2\nb    4\nc    2\nd    4\ne    4\nf    3\ng    2\nh    2\ni    5\nj    6\nk    1\nl    4\nm    5\nn    3\no    1\np    4\nq    1\nr    5\ns    2\nu    3\nv    3\nw    3\nx    2\ny    2\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n## Case 270\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     525.0\n1      82.0\n2     729.0\n3     865.0\n4     955.0\n      ...  \n95    726.0\n96    781.0\n97    686.0\n98    839.0\n99    843.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  5,  6,\n        7,  8,  9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21,\n       22, 23, 24, 25, 25, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 65,\n       66, 67, 68, 68, 69, 69, 70, 70, 71, 72, 73, 74, 75, 76, 76])`, type: `ndarray`\n\n_, value: `array([525.,  82., 729., 865., 955., ... ,\n       945., 726., 781., 686., 839.])`, shape: `(82,)`, type: `ndarray`\n\nval, value: `array([525.,  82., 729., 865., 955., ... , 781., 686., 839.,\n       843.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, value: `array([ 1,  3, 15, 29, 34, 43, 57, 65, 70, 33, -1, 26, 31, 58, -1,  6, 18,\n       78, 60, 79, 10, 10, 73, 76, 69, 66, 36, 11, 55, 20, -1, 53, 21, 35,\n       -1, 63, 25, 14, 71, 56, 44, 48, 45, 80, 49, -1, 28, 51, 81, 39, 47,\n       68,  8, 50, 62, 75,  2, 27,  4, 59, 22, -1, -1, -1, 16, 24,  0, 77,\n       23, -1, 73, 41, 37, -1, -1, 74, -1, 32, 72, 52,  9, 54, 30, -1, 61,\n       42, 46,  7, 17, 48, 64, 40, 67, -1, 38, 19,  5, -1, 12, 13])`, type: `ndarray`\n\nsorter, value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 39, 66, 32, 37, 70, 83,  6, 21,\n       95, 72, 96, 13, 89, 99, 93, 82, 79, 42, 14, 67, 23, 84, 62, 24, 41,\n       27, 75, 31, 17, 87, 68, 53, 57, 54, 97, 58, 85, 34, 60, 98, 48, 56,\n       81, 11, 59, 74, 92,  2, 33,  4, 71, 25, 46,  9, 47, 19, 30,  0, 94,\n       29, 45, 90, 50, 43,  7, 65, 91,  8, 38, 88, 61, 12, 63, 36, 26, 73,\n       51, 55, 10, 20, 78, 76, 49, 80, 64, 44, 22,  5, 28, 15, 16])`, type: `ndarray`\n\nidx, value: `array([ 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27,\n       28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 48,\n       49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66,\n       67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86,\n       87, 89, 91, 93, 94, 95, 96, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([9, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 2, 1, 2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 2, 2, 0, 1, 1, 1, 0, 2])`, type: `ndarray`\n\nres, value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 2, 1, 2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 2, 2, 0, 1, 1, 1, 0, 2])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(77,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-30    0\n     2015-08-31    1\nb    2015-08-24    1\n     2015-08-26    1\n                  ..\nz    2015-08-23    1\n     2015-08-26    1\n     2015-08-28    1\n     2015-08-29    0\n     2015-08-30    2\nName: julie, Length: 77, dtype: int64`, type: `Series`\n\n## Case 271\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      783\n1      585\n2      819\n3      568\n4      437\n      ... \n995    858\n996    343\n997    359\n998    833\n999    640\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([783, 585, 819, 568, 437, ... ,\n       912, 992, 338, 196, 833, 640])`, shape: `(643,)`, type: `ndarray`\n\nval, value: `array([783, 585, 819, 568, 437, ... , 180, 858, 343, 359, 833, 640])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([  5,  29,  37,  74, 113, ... , 446, 462, 476, 498, 508, 526])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  5,  30,  38,  77, 117, ... , 591, 694, 641, 679, 700, 730])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,  44,  85, 127, 165, 206, 248, 285, 315, 357, 392, 428, 465,\n       507, 542, 581, 620, 661, 704, 740, 780, 814, 853, 888, 929, 968])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([41, 40, 42, 38, 39, 42, 35, 29, 41, 34, 36, 36, 42, 35, 36, 37, 40,\n       43, 36, 40, 34, 39, 35, 41, 38, 30])`, type: `ndarray`\n\nres, value: `array([41, 40, 42, 38, 39, 42, 35, 29, 41, 34, 36, 36, 42, 35, 36, 37, 40,\n       43, 36, 40, 34, 39, 35, 41, 38, 30])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    41\nb    40\nc    42\nd    38\ne    39\nf    42\ng    35\nh    29\ni    41\nj    34\nk    36\nl    36\nm    42\nn    35\no    36\np    37\nq    40\nr    43\ns    36\nt    40\nu    34\nv    39\nw    35\nx    41\ny    38\nz    30\nName: julie, dtype: int64`, type: `Series`\n\n## Case 272\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      783\n1      585\n2      819\n3      568\n4      437\n      ... \n995    858\n996    343\n997    359\n998    833\n999    640\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   1, ... , 252, 252, 252, 252, 253, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([783, 585, 819, 568, 437, ... ,\n       912, 992, 338, 196, 833, 640])`, shape: `(643,)`, type: `ndarray`\n\nval, value: `array([783, 585, 819, 568, 437, ... , 180, 858, 343, 359, 833, 640])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([  5, 239, 457, 536,  74, ... ,  39, 412, 429, 446,   7, 129])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  5, 265, 609, 756,  77, ... ,  40, 531, 566, 591, 295, 134])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([  0,   4,   8,  17,  20, ... , 976, 983, 984, 988, 993, 998])`, shape: `(254,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 4,  4,  9,  3,  4,  8,  2, ... ,  3,  4,  7,  1,  4,  5,  5,  2])`, shape: `(254,)`, type: `ndarray`\n\nres, value: `array([ 4,  4,  9,  3,  4,  8,  2, ... ,  3,  4,  7,  1,  4,  5,  5,  2])`, shape: `(254,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    4\n     2015-08-25    9\n     2015-08-26    3\n     2015-08-27    4\n                  ..\nz    2015-08-28    1\n     2015-08-29    4\n     2015-08-30    5\n     2015-08-31    5\n     2015-09-01    2\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n## Case 273\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      783.0\n1      585.0\n2      819.0\n3      568.0\n4      437.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    833.0\n999    640.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([783., 585., 819., 568., 437., ... , 992., 338., 196., 833., 640.])`, shape: `(581,)`, type: `ndarray`\n\nval, value: `array([783., 585., 819., 568., 437., ... ,  nan,  nan,  nan, 833., 640.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 395, 408, 420, 432, 441, 451])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 591, 694, 641, 660, 679, 700])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  99, 137, 175, 211, 251, 293, 330, 358, 398, 432, 464, 499,\n       538, 573, 611, 645, 683, 722, 757, 793, 826, 863, 894, 933, 969])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([50, 32, 29, 34, 31, 34, 36, 31, 23, 30, 29, 27, 29, 33, 34, 25, 28,\n       28, 34, 28, 30, 27, 29, 26, 36, 28, 27])`, type: `ndarray`\n\nres, value: `array([32, 29, 34, 31, 34, 36, 31, 23, 30, 29, 27, 29, 33, 34, 25, 28, 28,\n       34, 28, 30, 27, 29, 26, 36, 28, 27])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    32\nb    29\nc    34\nd    31\ne    34\nf    36\ng    31\nh    23\ni    30\nj    29\nk    27\nl    29\nm    33\nn    34\no    25\np    28\nq    28\nr    34\ns    28\nt    30\nu    27\nv    29\nw    26\nx    36\ny    28\nz    27\nName: julie, dtype: int64`, type: `Series`\n\n## Case 274\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      783.0\n1      585.0\n2      819.0\n3      568.0\n4      437.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    833.0\n999    640.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 251, 251, 251, 252, 252])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([783., 585., 819., 568., 437., ... , 992., 338., 196., 833., 640.])`, shape: `(581,)`, type: `ndarray`\n\nval, value: `array([783., 585., 819., 568., 437., ... ,  nan,  nan,  nan, 833., 640.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... ,  -1, 364, 379, 395, 109, 223])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... ,   8, 531, 566, 591, 134, 295])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  88,  90,  98, 101, ... ,\n       977, 984, 985, 989, 994, 998])`, shape: `(253,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([71,  4,  2,  7,  3,  2,  6, ... ,  2,  3,  6,  1,  3,  5,  3,  2])`, shape: `(254,)`, type: `ndarray`\n\nres, value: `array([4, 2, 7, 3, 2, 6, 2, 3, 1, ... , 2, 1, 2, 3, 6, 1, 3, 5, 3, 2])`, shape: `(253,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=253)`, shape: `(253,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    2\n     2015-08-25    7\n     2015-08-26    3\n     2015-08-27    2\n                  ..\nz    2015-08-28    1\n     2015-08-29    3\n     2015-08-30    5\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 253, dtype: int64`, type: `Series`\n\n## Case 275\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      783.0\n1      585.0\n2      819.0\n3      568.0\n4      437.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    833.0\n999    640.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([783., 585., 819., 568., 437., ... , 992., 338., 196., 833., 640.])`, shape: `(581,)`, type: `ndarray`\n\nval, value: `array([783., 585., 819., 568., 437., ... ,  nan,  nan,  nan, 833., 640.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 395, 408, 420, 432, 441, 451])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 591, 694, 641, 660, 679, 700])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 59,  99, 137, 175, 211, 251, 293, 330, 358, 398, 432, 464, 499,\n       538, 573, 611, 645, 683, 722, 757, 793, 826, 863, 894, 933, 969])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([50, 32, 29, 34, 31, 34, 36, 31, 23, 30, 29, 27, 29, 33, 34, 25, 28,\n       28, 34, 28, 30, 27, 29, 26, 36, 28, 27])`, type: `ndarray`\n\nres, value: `array([32, 29, 34, 31, 34, 36, 31, 23, 30, 29, 27, 29, 33, 34, 25, 28, 28,\n       34, 28, 30, 27, 29, 26, 36, 28, 27])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    32\nb    29\nc    34\nd    31\ne    34\nf    36\ng    31\nh    23\ni    30\nj    29\nk    27\nl    29\nm    33\nn    34\no    25\np    28\nq    28\nr    34\ns    28\nt    30\nu    27\nv    29\nw    26\nx    36\ny    28\nz    27\nName: julie, dtype: int64`, type: `Series`\n\n## Case 276\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      783.0\n1      585.0\n2      819.0\n3      568.0\n4      437.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    833.0\n999    640.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 251, 251, 251, 252, 252])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `array([783., 585., 819., 568., 437., ... , 992., 338., 196., 833., 640.])`, shape: `(581,)`, type: `ndarray`\n\nval, value: `array([783., 585., 819., 568., 437., ... ,  nan,  nan,  nan, 833., 640.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1,  -1,  -1, ... ,  -1, 364, 379, 395, 109, 223])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([103, 256, 273, 426, 484, ... ,   8, 531, 566, 591, 134, 295])`, shape: `(1000,)`, type: `ndarray`\n\nidx, value: `array([ 84,  88,  90,  98, 101, ... ,\n       977, 984, 985, 989, 994, 998])`, shape: `(253,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([71,  4,  2,  7,  3,  2,  6, ... ,  2,  3,  6,  1,  3,  5,  3,  2])`, shape: `(254,)`, type: `ndarray`\n\nres, value: `array([4, 2, 7, 3, 2, 6, 2, 3, 1, ... , 2, 1, 2, 3, 6, 1, 3, 5, 3, 2])`, shape: `(253,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=253)`, shape: `(253,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    2\n     2015-08-25    7\n     2015-08-26    3\n     2015-08-27    2\n                  ..\nz    2015-08-28    1\n     2015-08-29    3\n     2015-08-30    5\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 253, dtype: int64`, type: `Series`\n\n## Case 277\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       746\n1       803\n2       629\n3       235\n4       827\n       ... \n9995     39\n9996    720\n9997    102\n9998    344\n9999    283\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([746, 803, 629, 235, 827, ... , 518, 810, 902,  78, 355, 685])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([746, 803, 629, ..., 102, 344, 283])`, type: `ndarray`\n\ncodes, value: `array([  0,   3,   5, ..., 993, 994, 997])`, type: `ndarray`\n\nsorter, value: `array([   0, 4373, 3548, ..., 9998, 9094, 5995])`, type: `ndarray`\n\nidx, value: `array([   0,  375,  773, 1129, 1533, 1890, 2273, 2699, 3093, 3495, 3885,\n       4287, 4654, 5025, 5388, 5809, 6172, 6581, 6932, 7344, 7745, 8126,\n       8496, 8881, 9233, 9606])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([320, 347, 295, 326, 308, 324, 349, 328, 327, 320, 321, 311, 314,\n       302, 349, 312, 336, 302, 337, 348, 320, 302, 316, 306, 325, 328])`, type: `ndarray`\n\nres, value: `array([320, 347, 295, 326, 308, 324, 349, 328, 327, 320, 321, 311, 314,\n       302, 349, 312, 336, 302, 337, 348, 320, 302, 316, 306, 325, 328])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    320\nb    347\nc    295\nd    326\ne    308\nf    324\ng    349\nh    328\ni    327\nj    320\nk    321\nl    311\nm    314\nn    302\no    349\np    312\nq    336\nr    302\ns    337\nt    348\nu    320\nv    302\nw    316\nx    306\ny    325\nz    328\nName: julie, dtype: int64`, type: `Series`\n\n## Case 278\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       746\n1       803\n2       629\n3       235\n4       827\n       ... \n9995     39\n9996    720\n9997    102\n9998    344\n9999    283\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([746, 803, 629, 235, 827, ... , 518, 810, 902,  78, 355, 685])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([746, 803, 629, ..., 102, 344, 283])`, type: `ndarray`\n\ncodes, value: `array([  0,   7,   9, ..., 869, 944, 997])`, type: `ndarray`\n\nsorter, value: `array([   0, 2163, 7440, ..., 2062, 4302, 5995])`, type: `ndarray`\n\nidx, value: `array([   0,   35,   77,  117,  139, ... , 9798, 9835, 9876, 9913, 9960])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([35, 42, 38, 22, 44, 38, 43, ... , 36,\n       37, 41, 34, 47, 40])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([35, 42, 38, 22, 44, 38, 43, ... , 36,\n       37, 41, 34, 47, 40])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    35\n     2015-08-24    42\n     2015-08-25    38\n     2015-08-26    22\n     2015-08-27    44\n                   ..\nz    2015-08-28    37\n     2015-08-29    41\n     2015-08-30    34\n     2015-08-31    47\n     2015-09-01    40\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 279\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       746.0\n1       803.0\n2       629.0\n3       235.0\n4       827.0\n        ...  \n9995     39.0\n9996    720.0\n9997    102.0\n9998    344.0\n9999    283.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([746., 803., 629., 235., 827., ... ,  78., 355., 268., 344., 685.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([746., 803., 629., ..., 102., 344., 283.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 988, 995, 998])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9094, 5995, 9998])`, type: `ndarray`\n\nidx, value: `array([ 589,  950, 1325, 1651, 2027, 2365, 2731, 3124, 3505, 3886, 4256,\n       4632, 4986, 5340, 5676, 6070, 6416, 6800, 7128, 7512, 7888, 8246,\n       8592, 8948, 9283, 9635])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([380, 273, 271, 244, 259, 258, 272, 294, 282, 265, 271, 270, 263,\n       266, 239, 278, 251, 274, 241, 277, 289, 250, 247, 259, 246, 260,\n       269])`, type: `ndarray`\n\nres, value: `array([273, 271, 244, 259, 258, 272, 294, 282, 265, 271, 270, 263, 266,\n       239, 278, 251, 274, 241, 277, 289, 250, 247, 259, 246, 260, 269])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    273\nb    271\nc    244\nd    259\ne    258\nf    272\ng    294\nh    282\ni    265\nj    271\nk    270\nl    263\nm    266\nn    239\no    278\np    251\nq    274\nr    241\ns    277\nt    289\nu    250\nv    247\nw    259\nx    246\ny    260\nz    269\nName: julie, dtype: int64`, type: `Series`\n\n## Case 280\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       746.0\n1       803.0\n2       629.0\n3       235.0\n4       827.0\n        ...  \n9995     39.0\n9996    720.0\n9997    102.0\n9998    344.0\n9999    283.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([746., 803., 629., 235., 827., ... ,  78., 355., 268., 344., 685.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([746., 803., 629., ..., 102., 344., 283.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 824, 894, 995])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 2062, 2911, 5995])`, type: `ndarray`\n\nidx, value: `array([ 844,  878,  919,  955,  974, ... , 9822, 9854, 9889, 9923, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([498,  27,  39,  33,  17, ... ,  26,  32,  29,  37,\n        28])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([27, 39, 33, 17, 36, 34, 33, ... , 26,\n       26, 32, 29, 37, 28])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    27\n     2015-08-24    39\n     2015-08-25    33\n     2015-08-26    17\n     2015-08-27    36\n                   ..\nz    2015-08-28    26\n     2015-08-29    32\n     2015-08-30    29\n     2015-08-31    37\n     2015-09-01    28\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 281\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       746.0\n1       803.0\n2       629.0\n3       235.0\n4       827.0\n        ...  \n9995     39.0\n9996    720.0\n9997    102.0\n9998    344.0\n9999    283.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([746., 803., 629., 235., 827., ... ,  78., 355., 268., 344., 685.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([746., 803., 629., ..., 102., 344., 283.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 988, 995, 998])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9094, 5995, 9998])`, type: `ndarray`\n\nidx, value: `array([ 589,  950, 1325, 1651, 2027, 2365, 2731, 3124, 3505, 3886, 4256,\n       4632, 4986, 5340, 5676, 6070, 6416, 6800, 7128, 7512, 7888, 8246,\n       8592, 8948, 9283, 9635])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([380, 273, 271, 244, 259, 258, 272, 294, 282, 265, 271, 270, 263,\n       266, 239, 278, 251, 274, 241, 277, 289, 250, 247, 259, 246, 260,\n       269])`, type: `ndarray`\n\nres, value: `array([273, 271, 244, 259, 258, 272, 294, 282, 265, 271, 270, 263, 266,\n       239, 278, 251, 274, 241, 277, 289, 250, 247, 259, 246, 260, 269])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    273\nb    271\nc    244\nd    259\ne    258\nf    272\ng    294\nh    282\ni    265\nj    271\nk    270\nl    263\nm    266\nn    239\no    278\np    251\nq    274\nr    241\ns    277\nt    289\nu    250\nv    247\nw    259\nx    246\ny    260\nz    269\nName: julie, dtype: int64`, type: `Series`\n\n## Case 282\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       746.0\n1       803.0\n2       629.0\n3       235.0\n4       827.0\n        ...  \n9995     39.0\n9996    720.0\n9997    102.0\n9998    344.0\n9999    283.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([746., 803., 629., 235., 827., ... ,  78., 355., 268., 344., 685.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([746., 803., 629., ..., 102., 344., 283.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 824, 894, 995])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 2062, 2911, 5995])`, type: `ndarray`\n\nidx, value: `array([ 844,  878,  919,  955,  974, ... , 9822, 9854, 9889, 9923, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([498,  27,  39,  33,  17, ... ,  26,  32,  29,  37,\n        28])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([27, 39, 33, 17, 36, 34, 33, ... , 26,\n       26, 32, 29, 37, 28])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    27\n     2015-08-24    39\n     2015-08-25    33\n     2015-08-26    17\n     2015-08-27    36\n                   ..\nz    2015-08-28    26\n     2015-08-29    32\n     2015-08-30    29\n     2015-08-31    37\n     2015-09-01    28\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 283\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        225\n1        353\n2         59\n3        201\n4        897\n        ... \n99995    204\n99996    697\n99997    365\n99998    280\n99999    519\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([225, 353,  59, 201, 897, ... , 411, 794, 988, 594, 152, 790])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([225, 353,  59, ..., 365, 280, 519])`, type: `ndarray`\n\ncodes, value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([ 3855,  8598, 24096, ..., 35905, 36323, 43166])`, type: `ndarray`\n\nidx, value: `array([    0,  3841,  7703, 11531, 15328, 19263, 23093, 27054, 30925,\n       34785, 38768, 42591, 46386, 50219, 54028, 57762, 61636, 65457,\n       69322, 73171, 76926, 80744, 84488, 88349, 92243, 96176])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([980, 979, 987, 973, 978, 980, 978, 986, 980, 978, 983, 987, 983,\n       980, 984, 978, 976, 984, 987, 979, 970, 980, 984, 977, 972, 979])`, type: `ndarray`\n\nres, value: `array([980, 979, 987, 973, 978, 980, 978, 986, 980, 978, 983, 987, 983,\n       980, 984, 978, 976, 984, 987, 979, 970, 980, 984, 977, 972, 979])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    980\nb    979\nc    987\nd    973\ne    978\nf    980\ng    978\nh    986\ni    980\nj    978\nk    983\nl    987\nm    983\nn    980\no    984\np    978\nq    976\nr    984\ns    987\nt    979\nu    970\nv    980\nw    984\nx    977\ny    972\nz    979\nName: julie, dtype: int64`, type: `Series`\n\n## Case 284\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        225\n1        353\n2         59\n3        201\n4        897\n        ... \n99995    204\n99996    697\n99997    365\n99998    280\n99999    519\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([225, 353,  59, 201, 897, ... , 411, 794, 988, 594, 152, 790])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([225, 353,  59, ..., 365, 280, 519])`, type: `ndarray`\n\ncodes, value: `array([  2,   3,   3, ..., 987, 991, 996])`, type: `ndarray`\n\nsorter, value: `array([94772, 37558, 80604, ...,  4796, 52619, 95047])`, type: `ndarray`\n\nidx, value: `array([    0,   391,   727,  1120, ... , 98066, 98413, 98798, 99191, 99594])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([333, 287, 325, 325, 321, ... , 308, 292, 316, 317, 342, 338])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([333, 287, 325, 325, 321, ... , 308, 292, 316, 317, 342, 338])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    333\n     2015-08-24    287\n     2015-08-25    325\n     2015-08-26    325\n     2015-08-27    321\n                  ... \nz    2015-08-28    292\n     2015-08-29    316\n     2015-08-30    317\n     2015-08-31    342\n     2015-09-01    338\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 285\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        225.0\n1        353.0\n2         59.0\n3        201.0\n4        897.0\n         ...  \n99995    204.0\n99996    697.0\n99997    365.0\n99998    280.0\n99999    519.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([225., 353.,  59., 201., 897., ... , 594., 335., 152., 790., 154.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([225., 353.,  59., ..., 365., 280., 519.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 43166, 27852, 36651])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9505, 13147, 16767, 20318, 24014, 27623, 31345, 34979,\n       38608, 42364, 45988, 49557, 53170, 56755, 60264, 63905, 67502,\n       71124, 74753, 78270, 81873, 85418, 89020, 92695, 96391])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([990, 951, 954, 963, 949, 954, 953, 951, 960, 954, 949, 955, 966,\n       964, 948, 958, 957, 946, 956, 955, 953, 941, 950, 952, 942, 949,\n       950])`, type: `ndarray`\n\nres, value: `array([951, 954, 963, 949, 954, 953, 951, 960, 954, 949, 955, 966, 964,\n       948, 958, 957, 946, 956, 955, 953, 941, 950, 952, 942, 949, 950])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    951\nb    954\nc    963\nd    949\ne    954\nf    953\ng    951\nh    960\ni    954\nj    949\nk    955\nl    966\nm    964\nn    948\no    958\np    957\nq    946\nr    956\ns    955\nt    953\nu    941\nv    950\nw    952\nx    942\ny    949\nz    950\nName: julie, dtype: int64`, type: `Series`\n\n## Case 286\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        225.0\n1        353.0\n2         59.0\n3        201.0\n4        897.0\n         ...  \n99995    204.0\n99996    697.0\n99997    365.0\n99998    280.0\n99999    519.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([225., 353.,  59., 201., 897., ... , 594., 335., 152., 790., 154.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([225., 353.,  59., ..., 365., 280., 519.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 977, 984, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 63324, 77199, 36651])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8790,  9096,  9456, ... , 98208, 98525, 98875, 99248, 99622])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([999, 269, 216, 266, 268, ... , 230, 253, 273, 271,\n       281])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([269, 216, 266, 268, 257, ... , 247, 230, 253, 273, 271, 281])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    269\n     2015-08-24    216\n     2015-08-25    266\n     2015-08-26    268\n     2015-08-27    257\n                  ... \nz    2015-08-28    230\n     2015-08-29    253\n     2015-08-30    273\n     2015-08-31    271\n     2015-09-01    281\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Case 287\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        225.0\n1        353.0\n2         59.0\n3        201.0\n4        897.0\n         ...  \n99995    204.0\n99996    697.0\n99997    365.0\n99998    280.0\n99999    519.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `array([225., 353.,  59., 201., 897., ... , 594., 335., 152., 790., 154.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([225., 353.,  59., ..., 365., 280., 519.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 43166, 27852, 36651])`, type: `ndarray`\n\nidx, value: `array([ 5883,  9505, 13147, 16767, 20318, 24014, 27623, 31345, 34979,\n       38608, 42364, 45988, 49557, 53170, 56755, 60264, 63905, 67502,\n       71124, 74753, 78270, 81873, 85418, 89020, 92695, 96391])`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([990, 951, 954, 963, 949, 954, 953, 951, 960, 954, 949, 955, 966,\n       964, 948, 958, 957, 946, 956, 955, 953, 941, 950, 952, 942, 949,\n       950])`, type: `ndarray`\n\nres, value: `array([951, 954, 963, 949, 954, 953, 951, 960, 954, 949, 955, 966, 964,\n       948, 958, 957, 946, 956, 955, 953, 941, 950, 952, 942, 949, 950])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    951\nb    954\nc    963\nd    949\ne    954\nf    953\ng    951\nh    960\ni    954\nj    949\nk    955\nl    966\nm    964\nn    948\no    958\np    957\nq    946\nr    956\ns    955\nt    953\nu    941\nv    950\nw    952\nx    942\ny    949\nz    950\nName: julie, dtype: int64`, type: `Series`\n\n## Case 288\n### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        225.0\n1        353.0\n2         59.0\n3        201.0\n4        897.0\n         ...  \n99995    204.0\n99996    697.0\n99997    365.0\n99998    280.0\n99999    519.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `array([225., 353.,  59., 201., 897., ... , 594., 335., 152., 790., 154.])`, shape: `(1000,)`, type: `ndarray`\n\nval, value: `array([225., 353.,  59., ..., 365., 280., 519.])`, type: `ndarray`\n\ncodes, value: `array([ -1,  -1,  -1, ..., 977, 984, 999])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 63324, 77199, 36651])`, type: `ndarray`\n\nidx, value: `array([ 8427,  8790,  9096,  9456, ... , 98208, 98525, 98875, 99248, 99622])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([999, 269, 216, 266, 268, ... , 230, 253, 273, 271,\n       281])`, shape: `(261,)`, type: `ndarray`\n\nres, value: `array([269, 216, 266, 268, 257, ... , 247, 230, 253, 273, 271, 281])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    269\n     2015-08-24    216\n     2015-08-25    266\n     2015-08-26    268\n     2015-08-27    257\n                  ... \nz    2015-08-28    230\n     2015-08-29    253\n     2015-08-30    273\n     2015-08-31    271\n     2015-09-01    281\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n",
    "7": "# Expected values and types of variables during the failing test execution\nEach case below includes input parameter values and types, and the expected values and types of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n## Expected case 1\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     0\n1     0\n2     7\n3     8\n4     7\n     ..\n95    8\n96    9\n97    0\n98    7\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,\n        4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  7,\n        7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9, 10,\n       10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13,\n       14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19,\n       19, 20, 21, 21, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 4, 5, 8, 0, 9, 3, 6, 7, 8, 8, 4, 8, 8, 9, 2, 3, 7, 0, 1, 2,\n       3, 5, 7, 0, 1, 4, 8, 0, 1, 2, 2, 4, 5, 7, 7, 8, 0, 2, 5, 6, 7, 7,\n       0, 0, 2, 3, 7, 9, 1, 1, 2, 3, 4, 9, 0, 2, 5, 8, 8, 2, 3, 5, 9, 0,\n       8, 8, 1, 5, 9, 1, 3, 4, 6, 1, 4, 7, 1, 7, 9, 4, 6, 8, 7, 8, 0, 2,\n       2, 3, 5, 6, 0, 1, 3, 6, 3, 5, 5, 9])`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 97, 76, 91, 88,  1, 68, 54, 16,  2, 24, 87, 30,  3, 60, 44, 52,\n       81,  4, 71,  5, 38, 49, 70, 10, 86, 12, 27,  6, 57, 82, 28, 33, 34,\n       79, 47, 92,  7, 62, 29, 50, 65,  8, 98, 78, 80, 41, 21, 61,  9, 26,\n       45, 55, 89, 11, 63, 19, 20, 13, 32, 95, 69, 67, 14, 48, 73, 15, 74,\n       17, 58, 66, 90, 42, 94, 18, 37, 75, 22, 23, 31, 36, 53, 93, 25, 35,\n       85, 39, 40, 46, 43, 99, 64, 72, 51, 56, 83, 59, 77, 84, 96])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  5,  7, 12, 16, 19, 25, 29, 38, 44, 50, 56, 61, 65, 68, 71, 75,\n       78, 81, 84, 86, 87, 89, 92, 96, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,\n       1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 2, 4, 3, 3, 6, 4, 7, 5, 5, 5, 4, 4, 2, 3, 4, 3, 3, 3, 2, 1, 1,\n       3, 4, 2, 2])`, type: `ndarray`\n\nres, expected value: `array([4, 2, 4, 3, 3, 6, 4, 7, 5, 5, 5, 4, 4, 2, 3, 4, 3, 3, 3, 2, 1, 1,\n       3, 4, 2, 2])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'o', 'f', 'y', 'a', 'p', 'n', 'r', 'q', 'i', 'e', 'g', 't', 'v',\n       'u', 'j', 'w', 'l', 'x', 'h', 'c', 'd', 'z', 's', 'b', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    4\no    2\nf    4\ny    3\na    3\np    6\nn    4\nr    7\nq    5\ni    5\ne    5\ng    4\nt    4\nv    2\nu    3\nj    4\nw    3\nl    3\nx    3\nh    2\nc    1\nd    1\nz    3\ns    4\nb    2\nk    2\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 2\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     0\n1     0\n2     7\n3     8\n4     7\n     ..\n95    8\n96    9\n97    0\n98    7\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  1,  2,  2,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 12, 13,\n       14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 23, 24, 24, 25, 26, 27,\n       27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 40,\n       41, 42, 43, 44, 44, 45, 46, 47, 48, 48, 49, 49, 49, 50, 51, 52, 53,\n       54, 54, 55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82])`, type: `ndarray`\n\n_, expected value: `83`, type: `int`\n\nval, expected value: `array([0, 0, 9, 6, 7, 8, 7, 1, 8, 8, 7, 0, 9, 7, 4, 1, 5, 5, 8, 1, 6, 0,\n       2, 8, 3, 7, 1, 8, 8, 6, 8, 1, 4, 2, 5, 7, 2, 4, 7, 8, 1, 2, 4, 7,\n       9, 1, 2, 0, 2, 0, 2, 3, 3, 9, 1, 2, 2, 9, 3, 0, 5, 1, 3, 6, 2, 4,\n       3, 0, 5, 9, 3, 8, 7, 9, 6, 6, 7, 3, 2, 5, 0, 0, 0, 8, 4, 4, 5, 3,\n       5, 8, 0, 0, 8, 3, 1, 5, 7, 4, 9, 5])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  1, 68, 16,  2,  3,  4,  5,  6,  7,  8, 80,  9, 10, 11, 12, 13,\n       14, 15, 17, 18, 19, 20, 95, 21, 22, 23, 24, 87, 93, 25, 26, 27, 28,\n       79, 47, 29, 30, 31, 32, 82, 33, 34, 35, 36, 37, 38, 39, 40, 78, 41,\n       42, 43, 44, 45, 55, 46, 48, 49, 62, 50, 51, 56, 83, 52, 53, 54, 57,\n       58, 66, 59, 60, 61, 63, 64, 65, 98, 67, 69, 70, 71, 72, 73, 74, 75,\n       76, 77, 81, 84, 85, 86, 97, 88, 89, 90, 91, 92, 94, 96, 99])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  1,  3,  5,  6,  7,  8,  9, 10, 11, 13, 14, 15, 16, 17, 18, 19,\n       20, 21, 22, 24, 25, 26, 27, 29, 31, 32, 33, 36, 37, 38, 39, 40, 42,\n       43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 61, 64,\n       65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       2, 1, 1, 1, 2, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       2, 1, 1, 1, 2, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('m', '2015-08-31') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(83,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nm    2015-08-31    1\no    2015-08-23    2\nf    2015-08-29    2\ny    2015-08-26    1\na    2015-08-29    1\n                  ..\nm    2015-08-24    1\nr    2015-08-27    1\nj    2015-08-27    1\nk    2015-08-29    1\nz    2015-09-01    1\nName: julie, Length: 83, dtype: int64`, type: `Series`\n\n## Expected case 3\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     0.0\n1     0.0\n2     7.0\n3     8.0\n4     7.0\n     ... \n95    8.0\n96    9.0\n97    0.0\n98    7.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,\n        2,  2,  2,  3,  3,  4,  4,  4,  4,  4,  4,  5,  5,  5,  6,  6,  6,\n        6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,\n        8,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12,\n       12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 18, 18, 19,\n       19, 19, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 24, 24, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0.00000000e+00,  0.00000000e+00, ... ,  9.00000000e+00, -9.22337204e+18])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 86, 52, 69, 18, 35,  0, 97, 76, 91, 88, 54, 16,  2, 24, 87, 30,\n        3, 60, 44, 81,  4, 71,  5, 38, 49, 70, 10, 27, 12,  6,  7, 28, 47,\n       57, 82, 33, 34, 79, 92,  8, 65, 62, 29, 50, 98,  9, 78, 80, 41, 21,\n       61, 26, 45, 55, 89, 11, 63, 19, 20, 13, 32, 95, 67, 14, 48, 73, 15,\n       74, 66, 17, 58, 37, 75, 22, 23, 31, 36, 53, 93, 25, 39, 46, 40, 90,\n       42, 94, 64, 43, 99, 83, 72, 51, 56, 59, 77, 68, 84, 96, 85])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6, 11, 16, 20, 22, 28, 31, 40, 46, 52, 58, 63, 66, 69, 72, 75, 78,\n       81, 82, 84, 87, 90, 94, 96, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 4, 4, 3, 2, 6, 3, 7, 5, 5, 5, 4, 3, 2, 3, 3, 3, 3, 1, 2, 3, 3,\n       4, 2, 1, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([4, 4, 3, 2, 6, 3, 7, 5, 5, 5, 4, 3, 2, 3, 3, 3, 3, 1, 2, 3, 3, 4,\n       2, 1, 2, 1])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'f', 'y', 'a', 'p', 'n', 'r', 'q', 'i', 'e', 'g', 't', 'v', 'u',\n       'w', 'l', 'x', 'c', 'd', 'j', 'z', 's', 'b', 'o', 'k', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    4\nf    4\ny    3\na    2\np    6\nn    3\nr    7\nq    5\ni    5\ne    5\ng    4\nt    3\nv    2\nu    3\nw    3\nl    3\nx    3\nc    1\nd    2\nj    3\nz    3\ns    4\nb    2\no    1\nk    2\nh    1\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 4\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      0\n1      6\n2      1\n3      3\n4      2\n      ..\n995    0\n996    1\n997    1\n998    5\n999    7\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, 0, 1, 1, 1, 2, 2, ... ,\n       8, 8, 9, 9, 9, 9, 9, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0, 140, 420, 466, 169, ... , 252, 365, 477, 532, 778, 993])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  47,  90, 145, 182, 220, 255, 293, 338, 386, 416, 463, 496,\n       528, 568, 599, 640, 672, 700, 733, 764, 808, 859, 892, 930, 962])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 1, 0, 0, 1, 0, ... ,\n       0, 0, 1, 0, 0, 0, 0, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 9, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10, 10, 10,  9,\n        9, 10,  8, 10, 10,  8, 10,  9, 10])`, type: `ndarray`\n\nres, expected value: `array([ 9, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10, 10, 10,  9,\n        9, 10,  8, 10, 10,  8, 10,  9, 10])`, type: `ndarray`\n\nri, expected value: `Index(['e', 'x', 'r', 'p', 'j', 'w', 'z', 'f', 'a', 'o', 'u', 's', 'k', 'g',\n       'n', 'l', 't', 'q', 'v', 'c', 'b', 'y', 'm', 'h', 'd', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ne     9\nx    10\nr    10\np    10\nj    10\nw    10\nz    10\nf    10\na     9\no    10\nu    10\ns    10\nk    10\ng    10\nn    10\nl    10\nt     9\nq     9\nv    10\nc     8\nb    10\ny    10\nm     8\nh    10\nd     9\ni    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 5\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      0\n1      6\n2      1\n3      3\n4      2\n      ..\n995    0\n996    1\n997    1\n998    5\n999    7\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   1, ... , 249, 250, 250, 251, 252, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `254`, type: `int`\n\nval, expected value: `array([0, 0, 2, 5, 2, 5, 6, 6, 8, ... ,\n       8, 3, 6, 1, 5, 4, 7, 4, 4, 1])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0, 140, 929, 131, 344, ... , 868, 988, 906, 952, 973, 997])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   4,  10,  12,  16, ... , 993, 994, 995, 997, 998, 999])`, shape: `(254,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 1, 0, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([3, 4, 2, 3, 4, 3, 6, 6, 4, ... , 3, 3, 1, 2, 1, 1, 2, 1, 1, 1])`, shape: `(254,)`, type: `ndarray`\n\nres, expected value: `array([3, 4, 2, 3, 4, 3, 6, 6, 4, ... , 3, 3, 1, 2, 1, 1, 2, 1, 1, 1])`, shape: `(254,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('e', '2015-08-29') ... ('t', '2015-08-24')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ne    2015-08-29    3\nx    2015-08-24    4\nr    2015-09-01    2\np    2015-08-31    3\nj    2015-08-23    4\n                  ..\no    2015-09-01    1\ns    2015-08-27    2\nh    2015-08-27    1\na    2015-08-26    1\nt    2015-08-24    1\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n## Expected case 6\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      0.0\n1      6.0\n2      1.0\n3      3.0\n4      2.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    7.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.00000000e+00,  9.00000000e+00])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      0.000000e+00\n1      6.000000e+00\n2      1.000000e+00\n3      3.000000e+00\n4      2.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    5.000000e+00\n999    7.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 165, 252, 365, 532, 778, 993])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59, 104, 152, 188, 224, 257, 294, 339, 381, 407, 450, 483, 514,\n       552, 581, 619, 650, 675, 706, 736, 777, 826, 857, 894, 924, 965])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 0, 0, 1, 0, 0, 0, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11, 10, 11, 11, 11, 11, 10, 11, 10, 10, 10, 11, 10, 10, 11, 11,  9,\n        9, 11,  8, 11, 11,  9, 10, 10, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([10, 11, 11, 11, 11, 10, 11, 10, 10, 10, 11, 10, 10, 11, 11,  9,  9,\n       11,  8, 11, 11,  9, 10, 10, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['e', 'r', 'p', 'j', 'w', 'z', 'f', 'a', 'o', 'u', 's', 'k', 'g', 'n',\n       'l', 't', 'q', 'v', 'c', 'b', 'y', 'm', 'h', 'd', 'x', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ne    10\nr    11\np    11\nj    11\nw    11\nz    10\nf    11\na    10\no    10\nu    10\ns    11\nk    10\ng    10\nn    11\nl    11\nt     9\nq     9\nv    11\nc     8\nb    11\ny    11\nm     9\nh    10\nd    10\nx    11\ni    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 7\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       7\n1       8\n2       0\n3       9\n4       1\n       ..\n9995    9\n9996    2\n9997    3\n9998    8\n9999    1\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([  57,  111,  398, ..., 7870, 9047, 9464])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  383,  778, 1157, 1548, 1958, 2360, 2758, 3160, 3540, 3902,\n       4286, 4691, 5075, 5432, 5876, 6247, 6634, 7018, 7411, 7823, 8183,\n       8546, 8909, 9281, 9662])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['n', 'k', 'm', 'q', 'f', 'r', 'l', 'u', 'e', 'c', 'b', 'o', 'i', 's',\n       'y', 'a', 'v', 'd', 'j', 't', 'h', 'x', 'z', 'g', 'w', 'p'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nn    10\nk    10\nm    10\nq    10\nf    10\nr    10\nl    10\nu    10\ne    10\nc    10\nb    10\no    10\ni    10\ns    10\ny    10\na    10\nv    10\nd    10\nj    10\nt    10\nh    10\nx    10\nz    10\ng    10\nw    10\np    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 8\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       7\n1       8\n2       0\n3       9\n4       1\n       ..\n9995    9\n9996    2\n9997    3\n9998    8\n9999    1\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([0, 1, 1, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([8504,   99,  532, ..., 2028, 3395, 4866])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   35,   77,  115,  155, ... , 9831, 9864, 9899, 9937, 9974])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10,  9, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10,  9, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('n', '2015-08-25') ... ('w', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nn    2015-08-25    10\nk    2015-08-28    10\nm    2015-09-01    10\nq    2015-09-01    10\nf    2015-09-01    10\n                   ..\np    2015-08-24    10\ni    2015-08-23     9\nr    2015-08-24    10\ni    2015-08-29    10\nw    2015-08-29     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 9\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       7.0\n1       8.0\n2       0.0\n3       9.0\n4       1.0\n       ... \n9995    9.0\n9996    2.0\n9997    3.0\n9998    8.0\n9999    1.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7870, 9047, 9464])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  950, 1312, 1680, 2060, 2433, 2802, 3176, 3538, 3881, 4247,\n       4619, 4978, 5314, 5732, 6089, 6455, 6816, 7188, 7579, 7922, 8257,\n       8630, 8972, 9322, 9679])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['n', 'm', 'q', 'f', 'r', 'l', 'u', 'e', 'c', 'b', 'o', 'i', 's', 'y',\n       'a', 'v', 'd', 'j', 't', 'h', 'x', 'k', 'z', 'g', 'w', 'p'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nn    11\nm    11\nq    11\nf    11\nr    11\nl    11\nu    11\ne    11\nc    11\nb    11\no    11\ni    11\ns    11\ny    11\na    11\nv    11\nd    11\nj    11\nt    11\nh    11\nx    11\nk    11\nz    11\ng    11\nw    11\np    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 10\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        0\n1        1\n2        7\n3        2\n4        9\n        ..\n99995    6\n99996    8\n99997    4\n99998    1\n99999    2\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([    0,   335,   702, ..., 98708, 98801, 98881])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3877,  7830, 11622, 15506, 19400, 23149, 26895, 30680,\n       34599, 38490, 42354, 46077, 49841, 53560, 57466, 61426, 65400,\n       69294, 73210, 76958, 80806, 84692, 88493, 92345, 96173])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['w', 'o', 't', 'z', 'v', 'h', 'p', 'f', 'd', 'c', 'l', 'u', 'q', 's',\n       'n', 'g', 'm', 'e', 'b', 'i', 'x', 'r', 'k', 'j', 'a', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nw    10\no    10\nt    10\nz    10\nv    10\nh    10\np    10\nf    10\nd    10\nc    10\nl    10\nu    10\nq    10\ns    10\nn    10\ng    10\nm    10\ne    10\nb    10\ni    10\nx    10\nr    10\nk    10\nj    10\na    10\ny    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 11\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        0\n1        1\n2        7\n3        2\n4        9\n        ..\n99995    6\n99996    8\n99997    4\n99998    1\n99999    2\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([    0,   702,  1787, ..., 94454, 97607, 98770])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   414,   847,  1221, ... , 98101, 98475, 98880, 99264, 99616])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('w', '2015-08-28') ... ('b', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nw    2015-08-28    10\no    2015-08-25    10\nt    2015-08-25    10\nz    2015-08-27    10\nv    2015-08-25    10\n                   ..\nb    2015-09-01    10\nt    2015-08-24    10\nk    2015-08-23    10\nd    2015-08-25    10\nb    2015-08-28    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 12\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        0.0\n1        1.0\n2        7.0\n3        2.0\n4        9.0\n        ... \n99995    6.0\n99996    8.0\n99997    4.0\n99998    1.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99561, 99744, 99792])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9545, 13121, 16775, 20430, 23942, 27681, 31213, 34785,\n       38483, 42122, 45724, 49205, 52744, 56254, 59936, 63675, 67343,\n       71038, 74564, 78185, 81850, 85408, 89048, 92643, 96269])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['w', 't', 'z', 'v', 'h', 'o', 'p', 'f', 'd', 'c', 'l', 'u', 'q', 's',\n       'n', 'm', 'e', 'b', 'i', 'x', 'r', 'k', 'j', 'a', 'y', 'g'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nw    11\nt    11\nz    11\nv    11\nh    11\no    11\np    11\nf    11\nd    11\nc    11\nl    11\nu    11\nq    11\ns    11\nn    11\nm    11\ne    11\nb    11\ni    11\nx    11\nr    11\nk    11\nj    11\na    11\ny    11\ng    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 13\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     66\n1     46\n2     42\n3     34\n4     23\n      ..\n95    75\n96    79\n97    82\n98    38\n99    64\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,\n        2,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,\n        7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10,\n       10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14,\n       14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17,\n       18, 19, 19, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23])`, type: `ndarray`\n\n_, expected value: `24`, type: `int`\n\nval, expected value: `array([25, 36, 47, 53, 55, 55, 66, 97,  3, 30, 46, 57, 77,  8, 36, 39, 42,\n       77, 34, 41, 23, 52, 72, 82, 82, 10, 21, 64, 84, 29, 40, 52, 56,  6,\n       14, 53, 61, 28, 46, 54, 57, 98,  6, 14, 15, 15, 51, 87, 22, 55, 71,\n       79, 82,  7, 11, 25, 27, 39, 53,  8, 18, 57, 97,  0, 19, 22,  1,  1,\n       26, 40, 65, 92, 98,  8, 15, 32, 41, 96,  7, 12, 43, 64, 37, 58, 68,\n       91, 29, 31, 35, 76, 96, 20, 59, 47, 75,  3, 35, 72, 95, 38])`, type: `ndarray`\n\nsorter, expected value: `array([64, 71, 51, 75, 27, 89,  0, 41, 33, 54,  1, 78, 43, 91, 86, 21,  2,\n       35,  3, 56,  4, 83, 34, 32, 36, 73,  7,  5, 62, 69,  6, 63, 52, 60,\n       68, 74,  8, 87, 44,  9, 26, 53, 88, 29, 15, 28, 10, 22, 11, 12, 93,\n       96, 97, 31, 67, 84, 72, 19, 13, 77, 18, 14, 94, 38, 16, 79, 17, 39,\n       46, 59, 82, 30, 37, 76, 49, 40, 45, 20, 23, 81, 92, 99, 24, 66, 90,\n       25, 48, 65, 85, 42, 80, 50, 47, 55, 95, 57, 70, 61, 58, 98])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  8, 13, 18, 20, 25, 29, 33, 37, 42, 48, 53, 59, 63, 66, 73, 78,\n       82, 85, 86, 91, 93, 95, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([7, 5, 5, 2, 4, 4, 4, 4, 5, 5, 5, 6, 4, 3, 6, 5, 4, 3, 1, 5, 2, 2,\n       4, 1])`, type: `ndarray`\n\nres, expected value: `array([7, 5, 5, 2, 4, 4, 4, 4, 5, 5, 5, 6, 4, 3, 6, 5, 4, 3, 1, 5, 2, 2,\n       4, 1])`, type: `ndarray`\n\nri, expected value: `Index(['n', 'm', 'p', 't', 'x', 'j', 'i', 'd', 'y', 'f', 'h', 'r', 'w', 'l',\n       'g', 'q', 'v', 'b', 'o', 'u', 'k', 'e', 'a', 'c'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nn    7\nm    5\np    5\nt    2\nx    4\nj    4\ni    4\nd    4\ny    5\nf    5\nh    5\nr    6\nw    4\nl    3\ng    6\nq    5\nv    4\nb    3\no    1\nu    5\nk    2\ne    2\na    4\nc    1\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 14\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     66\n1     46\n2     42\n3     34\n4     23\n      ..\n95    75\n96    79\n97    82\n98    38\n99    64\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  2,  3,  4,  5,  6,  7,  8,  8,  8,  9, 10, 10, 10, 11,\n       12, 12, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 20, 21, 21, 22, 23,\n       24, 25, 26, 27, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38,\n       38, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51, 52,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])`, type: `ndarray`\n\n_, expected value: `83`, type: `int`\n\nval, expected value: `array([66, 46, 39, 42, 34, 23, 64, 40, 21,  6, 53, 61, 54, 15, 51, 87, 22,\n       55, 79, 53, 57, 15, 19, 22,  1, 18, 11, 39, 41, 96,  7, 64, 37, 91,\n       57, 55, 14, 92,  7, 82,  3, 30, 72, 36, 77, 82, 98,  0,  1, 32, 53,\n       55, 97, 76, 77, 46, 26, 59, 29, 15, 20, 47, 52, 56, 98, 47, 41,  3,\n       95, 40, 72, 84, 25, 31, 58, 14, 29, 35, 36, 27, 10,  8,  8, 57, 35,\n       96, 12, 65, 52, 25, 28,  6, 68,  8, 43, 71, 97, 75, 82, 38])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  1, 21,  2,  3,  4,  5,  6,  7, 60, 74,  8,  9, 28, 10, 22, 11,\n       12, 96, 13, 14, 15, 16, 79, 17, 18, 67, 19, 45, 20, 23, 99, 24, 25,\n       26, 27, 29, 30, 31, 32, 33, 54, 34, 86, 35, 36, 37, 38, 39, 40, 75,\n       89, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 63, 52, 53, 55, 56, 57,\n       58, 59, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 76, 77, 78, 85,\n       80, 81, 82, 83, 84, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  1,  2,  4,  5,  6,  7,  8,  9, 12, 13, 16, 17, 19, 20, 21, 22,\n       24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45,\n       46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65,\n       66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('n', '2015-08-28') ... ('c', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(83,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nn    2015-08-28    1\nm    2015-08-31    1\np    2015-08-24    2\nt    2015-08-26    1\nx    2015-08-25    1\n                  ..\nh    2015-08-25    1\nw    2015-08-29    1\ne    2015-08-31    1\nh    2015-08-23    1\nc    2015-08-30    1\nName: julie, Length: 83, dtype: int64`, type: `Series`\n\n## Expected case 15\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     66.0\n1     46.0\n2     42.0\n3     34.0\n4     23.0\n      ... \n95    75.0\n96    79.0\n97    82.0\n98    38.0\n99    64.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,\n        2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6,  6,  6,\n        7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9, 10,\n       10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13,\n       13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 18, 18, 18,\n       18, 19, 19, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23])`, type: `ndarray`\n\n_, expected value: `24`, type: `int`\n\nval, expected value: `array([ 1.80000000e+01,  2.90000000e+01, ... ,  9.50000000e+01,  3.80000000e+01])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([18, 69, 86,  1, 52, 35, 27, 64, 71, 51, 75, 89,  0, 41, 91, 21,  2,\n        3, 56, 83,  4, 34, 32, 36,  7, 73,  5, 62,  6, 63,  8, 60, 68, 74,\n        9, 26, 87, 44, 53, 28, 88, 29, 15, 10, 22, 11, 12, 93, 96, 97, 84,\n       31, 67, 72, 19, 13, 77, 14, 94, 38, 16, 79, 46, 17, 39, 59, 82, 30,\n       37, 45, 76, 49, 40, 20, 23, 81, 92, 99, 66, 24, 90, 25, 33, 54, 78,\n       43, 65, 85, 48, 42, 80, 47, 50, 55, 95, 57, 70, 61, 58, 98])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6, 14, 17, 19, 24, 28, 30, 34, 39, 45, 50, 56, 59, 62, 69, 74, 78,\n       81, 82, 86, 91, 93, 95, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 7, 3, 2, 4, 4, 2, 4, 4, 6, 5, 6, 3, 3, 6, 5, 4, 3, 1, 4, 4, 2,\n       2, 4, 1])`, type: `ndarray`\n\nres, expected value: `array([7, 3, 2, 4, 4, 2, 4, 4, 6, 5, 6, 3, 3, 6, 5, 4, 3, 1, 4, 4, 2, 2,\n       4, 1])`, type: `ndarray`\n\nri, expected value: `Index(['n', 'p', 't', 'x', 'j', 'i', 'd', 'y', 'f', 'h', 'r', 'w', 'l', 'g',\n       'q', 'v', 'b', 'o', 'm', 'u', 'k', 'e', 'a', 'c'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nn    7\np    3\nt    2\nx    4\nj    4\ni    2\nd    4\ny    4\nf    6\nh    5\nr    6\nw    3\nl    3\ng    6\nq    5\nv    4\nb    3\no    1\nm    4\nu    4\nk    2\ne    2\na    4\nc    1\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 16\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      11\n1      57\n2      25\n3      91\n4      42\n       ..\n995    74\n996     7\n997    84\n998    61\n999    13\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  4,  5,  6,  6, 11, 13, ... , 71, 75, 78, 82, 91, 91, 93, 97])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([321,  87, 488, 227, 515, ... , 634, 507, 578, 847, 401, 837])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  54,  98, 137, 171, 212, 243, 282, 323, 363, 394, 428, 471,\n       504, 548, 592, 632, 669, 697, 737, 781, 813, 848, 881, 922, 964])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 0, 1, 1, 1, 0, ... ,\n       0, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([46, 35, 31, 32, 35, 28, 32, 35, 35, 27, 27, 34, 27, 35, 35, 32, 32,\n       22, 30, 36, 26, 32, 28, 30, 35, 28])`, type: `ndarray`\n\nres, expected value: `array([46, 35, 31, 32, 35, 28, 32, 35, 35, 27, 27, 34, 27, 35, 35, 32, 32,\n       22, 30, 36, 26, 32, 28, 30, 35, 28])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'e', 'z', 'l', 'q', 'c', 't', 'd', 'g', 'x', 'm', 'o', 'h', 'v',\n       'j', 'i', 'r', 'y', 'f', 's', 'n', 'w', 'p', 'a', 'u', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    46\ne    35\nz    31\nl    32\nq    35\nc    28\nt    32\nd    35\ng    35\nx    27\nm    27\no    34\nh    27\nv    35\nj    35\ni    32\nr    32\ny    22\nf    30\ns    36\nn    26\nw    32\np    28\na    30\nu    35\nk    28\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 17\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      11\n1      57\n2      25\n3      91\n4      42\n       ..\n995    74\n996     7\n997    84\n998    61\n999    13\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 246, 246, 247, 247, 248, 249])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `250`, type: `int`\n\nval, expected value: `array([ 0, 11, 13, 44, 72, 73, 51, ... , 45, 52,  4, 91,  5, 21, 61, 34])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([321,   0, 649, 574, 376, ... , 906, 743, 963, 761, 966, 993])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   6,  11,  16,  18, ... , 992, 994,\n       996, 998, 999])`, shape: `(250,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 6,  5,  5,  2,  6,  9,  5, ... ,  2,  2,  3,  2,  2,  2,  1,  1])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([ 6,  5,  5,  2,  6,  9,  5, ... ,  2,  2,  3,  2,  2,  2,  1,  1])`, shape: `(250,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('b', '2015-08-30') ... ('s', '2015-08-30')],\n           names=['jim', 'joe'], length=250)`, shape: `(250,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nb    2015-08-30    6\ne    2015-08-24    5\n     2015-08-26    5\nz    2015-08-26    2\nl    2015-08-24    6\n                  ..\np    2015-08-27    2\na    2015-09-01    2\nc    2015-08-31    2\nx    2015-08-26    1\ns    2015-08-30    1\nName: julie, Length: 250, dtype: int64`, type: `Series`\n\n## Expected case 18\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      11.0\n1      57.0\n2      25.0\n3      91.0\n4      42.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    61.0\n999    13.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.30000000e+01,  9.70000000e+01])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      1.100000e+01\n1      5.700000e+01\n2      2.500000e+01\n3      9.100000e+01\n4      4.200000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    6.100000e+01\n999    1.300000e+01\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 780, 983, 507, 847, 401, 837])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59, 109, 148, 184, 214, 255, 284, 323, 362, 402, 432, 463, 504,\n       536, 577, 617, 656, 690, 718, 755, 797, 827, 860, 891, 927, 965])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([39, 36, 29, 27, 24, 32, 24, 26, 31, 30, 22, 24, 31, 21, 32, 26, 29,\n       25, 17, 30, 33, 22, 26, 23, 26, 26, 26])`, type: `ndarray`\n\nres, expected value: `array([36, 29, 27, 24, 32, 24, 26, 31, 30, 22, 24, 31, 21, 32, 26, 29, 25,\n       17, 30, 33, 22, 26, 23, 26, 26, 26])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'e', 'z', 'l', 'q', 'c', 't', 'd', 'g', 'x', 'm', 'o', 'h', 'v',\n       'j', 'i', 'r', 'y', 'f', 's', 'n', 'w', 'p', 'u', 'a', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    36\ne    29\nz    27\nl    24\nq    32\nc    24\nt    26\nd    31\ng    30\nx    22\nm    24\no    31\nh    21\nv    32\nj    26\ni    29\nr    25\ny    17\nf    30\ns    33\nn    22\nw    26\np    23\nu    26\na    26\nk    26\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 19\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       22\n1       52\n2       10\n3       46\n4       94\n        ..\n9995    71\n9996    85\n9997    25\n9998    55\n9999    72\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  0,  1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([1411, 8648, 9459, ..., 3800, 4589, 4888])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  409,  785, 1147, 1577, 1930, 2331, 2704, 3052, 3397, 3790,\n       4172, 4549, 4958, 5348, 5754, 6118, 6503, 6902, 7309, 7693, 8070,\n       8430, 8819, 9169, 9582])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 97,  96,  98,  98,  96,  99,  97,  95,  98,  98,  99,  99, 100,\n       100,  96,  98,  99,  96, 100,  99,  98,  98,  99,  97,  96,  98])`, type: `ndarray`\n\nres, expected value: `array([ 97,  96,  98,  98,  96,  99,  97,  95,  98,  98,  99,  99, 100,\n       100,  96,  98,  99,  96, 100,  99,  98,  98,  99,  97,  96,  98])`, type: `ndarray`\n\nri, expected value: `Index(['i', 'x', 'n', 'c', 'l', 'e', 't', 'o', 'w', 'q', 'a', 'p', 'u', 'g',\n       'f', 'z', 'r', 'v', 'm', 'y', 'j', 'k', 'h', 'd', 'b', 's'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ni     97\nx     96\nn     98\nc     98\nl     96\ne     99\nt     97\no     95\nw     98\nq     98\na     99\np     99\nu    100\ng    100\nf     96\nz     98\nr     99\nv     96\nm    100\ny     99\nj     98\nk     98\nh     99\nd     97\nb     96\ns     98\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 20\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       22\n1       52\n2       10\n3       46\n4       94\n        ..\n9995    71\n9996    85\n9997    25\n9998    55\n9999    72\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 2,  2,  2, ..., 93, 94, 96])`, type: `ndarray`\n\nsorter, expected value: `array([2000, 2192, 3264, ..., 5599, 9600, 3091])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   46,   89,  120,  161, ... , 9814, 9854, 9897, 9933, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([39, 37, 28, 31, 23, 35, 38, ... , 32,\n       30, 34, 27, 27, 34])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([39, 37, 28, 31, 23, 35, 38, ... , 32,\n       30, 34, 27, 27, 34])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('i', '2015-09-01') ... ('v', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ni    2015-09-01    39\nx    2015-09-01    37\nn    2015-08-26    28\nc    2015-08-30    31\nl    2015-09-01    23\n                   ..\ny    2015-08-28    30\nd    2015-08-26    34\nn    2015-09-01    27\ny    2015-08-27    27\nv    2015-08-23    34\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 21\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       22.0\n1       52.0\n2       10.0\n3       46.0\n4       94.0\n        ... \n9995    71.0\n9996    85.0\n9997    25.0\n9998    55.0\n9999    72.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 3800, 4589, 4888])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  973, 1317, 1723, 2060, 2432, 2785, 3109, 3441, 3812, 4171,\n       4529, 4907, 5271, 5650, 5998, 6360, 6729, 7095, 7454, 7789, 8152,\n       8531, 8885, 9215, 9602])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  95,  95,  96,  94,  96,  95,  95,  93,  98,  98, 100,  99,\n        99,  95,  97,  98,  96,  97,  98,  96,  96,  98,  95,  95,  96,\n        97])`, type: `ndarray`\n\nres, expected value: `array([ 95,  95,  96,  94,  96,  95,  95,  93,  98,  98, 100,  99,  99,\n        95,  97,  98,  96,  97,  98,  96,  96,  98,  95,  95,  96,  97])`, type: `ndarray`\n\nri, expected value: `Index(['i', 'n', 'c', 'l', 'e', 't', 'o', 'w', 'q', 'a', 'p', 'u', 'g', 'f',\n       'z', 'r', 'v', 'y', 'j', 'k', 'h', 'm', 'x', 'd', 'b', 's'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ni     95\nn     95\nc     96\nl     94\ne     96\nt     95\no     95\nw     93\nq     98\na     98\np    100\nu     99\ng     99\nf     95\nz     97\nr     98\nv     96\ny     97\nj     98\nk     96\nh     96\nm     98\nx     95\nd     95\nb     96\ns     97\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 22\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        66\n1        13\n2         8\n3        31\n4        46\n         ..\n99995    58\n99996    76\n99997    53\n99998    93\n99999    34\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  634,  2616,  4403, ..., 95418, 96973, 97807])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3743,  7589, 11387, 15220, 19056, 22787, 26646, 30562,\n       34437, 38278, 42115, 45941, 49781, 53661, 57530, 61484, 65406,\n       69284, 73119, 76994, 80805, 84589, 88335, 92282, 96195])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['e', 'c', 'x', 'j', 'f', 'm', 'g', 'b', 'r', 'n', 'h', 'u', 'y', 'v',\n       'i', 'o', 's', 't', 'd', 'z', 'w', 'q', 'a', 'p', 'l', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ne    100\nc    100\nx    100\nj    100\nf    100\nm    100\ng    100\nb    100\nr    100\nn    100\nh    100\nu    100\ny    100\nv    100\ni    100\no    100\ns    100\nt    100\nd    100\nz    100\nw    100\nq    100\na    100\np    100\nl    100\nk    100\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 23\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        66\n1        13\n2         8\n3        31\n4        46\n         ..\n99995    58\n99996    76\n99997    53\n99998    93\n99999    34\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 98, 98, 98])`, type: `ndarray`\n\nsorter, expected value: `array([20978, 31112, 36970, ..., 32964, 40583, 67948])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   382,   807,  1153, ... , 98092, 98479, 98855, 99214, 99605])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 96,  98,  93, 100,  98, ... , 100,  98,  98,  97,  98,  94])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([ 96,  98,  93, 100,  98, ... , 100,  98,  98,  97,  98,  94])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('e', '2015-08-25') ... ('c', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ne    2015-08-25     96\nc    2015-08-26     98\nx    2015-08-30     93\nc    2015-08-25    100\nj    2015-08-29     98\n                  ... \nu    2015-09-01     98\n     2015-08-23     98\nm    2015-08-28     97\nv    2015-08-29     98\nc    2015-08-30     94\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 24\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        66.0\n1        13.0\n2         8.0\n3        31.0\n4        46.0\n         ... \n99995    58.0\n99996    76.0\n99997    53.0\n99998    93.0\n99999    34.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 95418, 96973, 97807])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9369, 12956, 16577, 20164, 23767, 27298, 30910, 34582,\n       38236, 41845, 45454, 49061, 52677, 56350, 59970, 63698, 67394,\n       71060, 74670, 78322, 81917, 85479, 89005, 92710, 96394])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, expected value: `Index(['e', 'x', 'c', 'j', 'f', 'm', 'g', 'b', 'r', 'n', 'h', 'u', 'y', 'v',\n       'i', 'o', 's', 't', 'd', 'z', 'w', 'q', 'a', 'p', 'l', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ne    101\nx    101\nc    101\nj    101\nf    101\nm    101\ng    101\nb    101\nr    101\nn    101\nh    101\nu    101\ny    101\nv    101\ni    101\no    101\ns    101\nt    101\nd    101\nz    101\nw    101\nq    101\na    101\np    101\nl    101\nk    101\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 25\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      11\n1     544\n2     330\n3     786\n4     757\n     ... \n95    956\n96    605\n97    251\n98    780\n99    605\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  1,  1,  1,  1,  2,  2,  2,  3,  3,  4,  4,  4,  4,  4,  4,\n        4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  8,\n        8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12,\n       12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n       15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 18, 19,\n       19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 23, 24])`, type: `ndarray`\n\n_, expected value: `25`, type: `int`\n\nval, expected value: `array([ 11, 912,  55, 544, 753, ... , 785, 134, 226, 636, 638, 855])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 18, 62,  1, 84, 75, 43,  2, 80, 30,  3, 85, 68, 52, 51, 60, 92,\n       99, 72,  4, 97,  8,  5, 76, 22,  6, 74, 79, 96, 65, 58, 39,  7, 38,\n       44, 67,  9, 27, 10, 32, 50, 47, 11, 63, 78, 28, 14, 13, 12, 49, 33,\n       53, 25, 15, 45, 86, 69, 83, 16, 82, 91, 17, 57, 77, 42, 55, 36, 59,\n       93, 19, 56, 40, 20, 37, 24, 61, 71, 73, 21, 70, 34, 94, 23, 54, 64,\n       26, 95, 35, 98, 29, 89, 31, 87, 41, 48, 81, 90, 46, 88, 66])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  2,  6,  9, 11, 20, 23, 31, 33, 38, 41, 46, 50, 55, 61, 66, 71,\n       76, 79, 84, 87, 90, 93, 95, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([2, 4, 3, 2, 8, 3, 8, 2, 5, 3, 5, 4, 5, 6, 5, 5, 5, 3, 5, 3, 3, 3,\n       2, 4, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 4, 3, 2, 8, 3, 8, 2, 5, 3, 5, 4, 5, 6, 5, 5, 5, 3, 5, 3, 3, 3,\n       2, 4, 1])`, type: `ndarray`\n\nri, expected value: `Index(['k', 'x', 'e', 'p', 'g', 'v', 'd', 'n', 'h', 'f', 'q', 'b', 'a', 'l',\n       't', 'z', 'y', 'm', 'i', 'c', 'u', 'j', 'w', 'r', 's'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    2\nx    4\ne    3\np    2\ng    8\nv    3\nd    8\nn    2\nh    5\nf    3\nq    5\nb    4\na    5\nl    6\nt    5\nz    5\ny    5\nm    3\ni    5\nc    3\nu    3\nj    3\nw    2\nr    4\ns    1\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 26\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      11\n1     544\n2     330\n3     786\n4     757\n     ... \n95    956\n96    605\n97    251\n98    780\n99    605\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  3,  4,  4,  5,  6,  7,  8,  9,  9, 10, 11, 12, 13, 14,\n       15, 15, 16, 17, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28,\n       28, 29, 29, 30, 31, 32, 33, 34, 34, 35, 35, 36, 37, 38, 39, 40, 41,\n       42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51, 52, 53, 54, 55, 55,\n       55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69, 70,\n       71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 80, 81, 82, 83, 84])`, type: `ndarray`\n\n_, expected value: `85`, type: `int`\n\nval, expected value: `array([ 11, 544, 330, 786, 594, ... , 605, 605, 956, 605, 251, 780])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  1,  2,  3, 60,  4,  5,  6,  7,  8, 44,  9, 10, 11, 12, 13, 14,\n       33, 15, 16, 17, 77, 18, 19, 20, 71, 21, 22, 23, 24, 25, 26, 27, 78,\n       28, 35, 29, 30, 31, 32, 34, 36, 93, 37, 61, 38, 39, 40, 41, 42, 43,\n       45, 46, 88, 47, 48, 49, 50, 85, 51, 52, 53, 54, 55, 56, 57, 74, 65,\n       58, 59, 62, 63, 64, 66, 67, 68, 69, 70, 94, 72, 73, 75, 76, 79, 80,\n       81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 99, 95, 96, 97, 98])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  1,  2,  3,  4,  6,  7,  8,  9, 10, 12, 13, 14, 15, 16, 17, 19,\n       20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40,\n       41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61,\n       62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81,\n       82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('k', '2015-08-26') ... ('u', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(85,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nk    2015-08-26    1\nx    2015-08-23    1\ne    2015-08-30    1\np    2015-08-31    1\ng    2015-08-24    2\n                  ..\n     2015-08-28    1\nc    2015-08-23    1\nd    2015-08-29    1\nv    2015-08-28    1\nu    2015-08-31    1\nName: julie, Length: 85, dtype: int64`, type: `Series`\n\n## Expected case 27\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      11.0\n1     544.0\n2     330.0\n3     786.0\n4     757.0\n      ...  \n95    956.0\n96    605.0\n97    251.0\n98    780.0\n99    605.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  1,  1,  1,  2,  2,  3,  3,  3,  3,  3,\n        3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  7,\n        7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11,\n       11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14,\n       14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18,\n       19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24])`, type: `ndarray`\n\n_, expected value: `25`, type: `int`\n\nval, expected value: `array([ 2.61000000e+02,  3.89000000e+02, ... ,  9.66000000e+02, -9.22337204e+18])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([52, 86,  1, 69, 35, 18,  0, 43,  2, 80, 30,  3, 85, 68, 51, 60, 92,\n       99, 72,  4,  8, 97,  5, 65, 76, 22,  6, 74, 79, 96, 58,  7, 39,  9,\n       27, 38, 44, 67, 10, 32, 50, 28, 47, 11, 63, 78, 14, 13, 12, 49, 45,\n       33, 53, 25, 15, 83, 16, 82, 91, 17, 57, 77, 42, 55, 36, 59, 93, 19,\n       56, 40, 20, 37, 24, 61, 71, 73, 21, 70, 34, 94, 23, 54, 26, 64, 95,\n       98, 29, 89, 31, 87, 41, 48, 46, 81, 90, 88, 84, 62, 75, 66])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6,  7, 10, 12, 20, 23, 31, 33, 38, 41, 46, 50, 55, 59, 64, 69, 74,\n       77, 82, 85, 87, 90, 92, 96, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 1, 3, 2, 7, 3, 8, 2, 4, 3, 4, 4, 5, 4, 5, 5, 5, 3, 5, 2, 2, 3,\n       2, 4, 3, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 3, 2, 7, 3, 8, 2, 4, 3, 4, 4, 5, 4, 5, 5, 5, 3, 5, 2, 2, 3, 2,\n       4, 3, 1])`, type: `ndarray`\n\nri, expected value: `Index(['k', 'e', 'p', 'g', 'v', 'd', 'n', 'h', 'f', 'q', 'b', 'a', 'l', 't',\n       'z', 'y', 'm', 'i', 'c', 'u', 'j', 'w', 'r', 'x', 's'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    1\ne    3\np    2\ng    7\nv    3\nd    8\nn    2\nh    4\nf    3\nq    4\nb    4\na    5\nl    4\nt    5\nz    5\ny    5\nm    3\ni    5\nc    2\nu    2\nj    3\nw    2\nr    4\nx    3\ns    1\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 28\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      790\n1      768\n2      636\n3      297\n4      304\n      ... \n995    857\n996     57\n997    180\n998    795\n999     10\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 60, 103, 163, 184, 185, ... , 810, 822, 857, 948, 962, 996])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([158, 966, 951,  77, 474, ... , 743, 592, 995, 786, 210, 615])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  39,  74, 108, 142, 182, 210, 250, 298, 333, 384, 431, 465,\n       500, 550, 595, 631, 674, 716, 749, 788, 826, 868, 902, 937, 970])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([39, 34, 33, 34, 40, 26, 40, 48, 35, 51, 47, 33, 35, 49, 45, 36, 42,\n       42, 32, 39, 38, 41, 33, 35, 33, 30])`, type: `ndarray`\n\nres, expected value: `array([39, 34, 33, 34, 40, 26, 40, 48, 35, 51, 47, 33, 35, 49, 45, 36, 42,\n       42, 32, 39, 38, 41, 33, 35, 33, 30])`, type: `ndarray`\n\nri, expected value: `Index(['w', 'h', 'p', 'r', 'i', 's', 'm', 'c', 'l', 'g', 'j', 'a', 'b', 'u',\n       'e', 'x', 'v', 't', 'f', 'd', 'n', 'z', 'q', 'k', 'o', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nw    39\nh    34\np    33\nr    34\ni    40\ns    26\nm    40\nc    48\nl    35\ng    51\nj    47\na    33\nb    35\nu    49\ne    45\nx    36\nv    42\nt    42\nf    32\nd    39\nn    38\nz    41\nq    33\nk    35\no    33\ny    30\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 29\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      790\n1      768\n2      636\n3      297\n4      304\n      ... \n995    857\n996     57\n997    180\n998    795\n999     10\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 251, 252, 253, 254, 255, 255])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `256`, type: `int`\n\nval, expected value: `array([304, 454, 471, 649, 655, ... , 949, 810, 737, 431, 408, 569])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([439, 531, 206, 464, 537, ... , 815, 838, 899, 952, 984, 990])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   8,  12,  17,  26, ... , 990, 992, 995, 996, 997, 998])`, shape: `(256,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 8,  4,  5,  9,  3,  3,  4, ... ,  2,  3,  1,  1,  1,\n        2])`, shape: `(256,)`, type: `ndarray`\n\nres, expected value: `array([ 8,  4,  5,  9,  3,  3,  4, ... ,  2,  3,  1,  1,  1,\n        2])`, shape: `(256,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('w', '2015-08-30') ... ('i', '2015-09-01')],\n           names=['jim', 'joe'], length=256)`, shape: `(256,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nw    2015-08-30    8\nh    2015-08-31    4\np    2015-08-25    5\nr    2015-08-23    9\ni    2015-08-26    3\n                  ..\ne    2015-08-31    3\no    2015-08-29    1\nw    2015-08-31    1\nn    2015-08-28    1\ni    2015-09-01    2\nName: julie, Length: 256, dtype: int64`, type: `Series`\n\n## Expected case 30\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      790.0\n1      768.0\n2      636.0\n3      297.0\n4      304.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    795.0\n999     10.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  8.22000000e+02,  9.62000000e+02])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      7.900000e+02\n1      7.680000e+02\n2      6.360000e+02\n3      2.970000e+02\n4      3.040000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    7.950000e+02\n999    1.000000e+01\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 594, 907, 568, 743, 592, 210])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  95, 129, 162, 202, 228, 267, 314, 348, 398, 442, 473, 506,\n       550, 592, 625, 667, 697, 732, 768, 805, 843, 874, 907, 939, 971])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([49, 34, 30, 28, 36, 23, 38, 41, 30, 38, 39, 27, 29, 37, 34, 29, 39,\n       28, 32, 29, 31, 32, 24, 26, 24, 29, 22])`, type: `ndarray`\n\nres, expected value: `array([34, 30, 28, 36, 23, 38, 41, 30, 38, 39, 27, 29, 37, 34, 29, 39, 28,\n       32, 29, 31, 32, 24, 26, 24, 29, 22])`, type: `ndarray`\n\nri, expected value: `Index(['w', 'p', 'r', 'i', 's', 'm', 'c', 'l', 'g', 'j', 'a', 'b', 'u', 'e',\n       'x', 'v', 'f', 'd', 'n', 't', 'z', 'h', 'q', 'k', 'o', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nw    34\np    30\nr    28\ni    36\ns    23\nm    38\nc    41\nl    30\ng    38\nj    39\na    27\nb    29\nu    37\ne    34\nx    29\nv    39\nf    28\nd    32\nn    29\nt    31\nz    32\nh    24\nq    26\nk    24\no    29\ny    22\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 31\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       997\n1       625\n2       572\n3        43\n4       725\n       ... \n9995    790\n9996    729\n9997    326\n9998    444\n9999    743\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([  0,   2,   6, ..., 990, 995, 996])`, type: `ndarray`\n\nsorter, expected value: `array([2873, 7143, 7814, ..., 9645,  320, 1911])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  321,  725, 1087, 1478, 1903, 2308, 2701, 3101, 3523, 3862,\n       4264, 4652, 4997, 5381, 5773, 6163, 6534, 6912, 7281, 7682, 8043,\n       8461, 8868, 9216, 9625])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([286, 335, 300, 318, 359, 335, 315, 327, 340, 281, 336, 335, 289,\n       325, 316, 317, 308, 325, 304, 329, 296, 338, 341, 295, 331, 310])`, type: `ndarray`\n\nres, expected value: `array([286, 335, 300, 318, 359, 335, 315, 327, 340, 281, 336, 335, 289,\n       325, 316, 317, 308, 325, 304, 329, 296, 338, 341, 295, 331, 310])`, type: `ndarray`\n\nri, expected value: `Index(['b', 't', 'q', 'r', 'j', 'k', 'o', 'i', 'y', 'n', 'e', 'c', 'x', 'm',\n       's', 'w', 'a', 'z', 'p', 'u', 'g', 'd', 'f', 'v', 'l', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    286\nt    335\nq    300\nr    318\nj    359\nk    335\no    315\ni    327\ny    340\nn    281\ne    336\nc    335\nx    289\nm    325\ns    316\nw    317\na    308\nz    325\np    304\nu    329\ng    296\nd    338\nf    341\nv    295\nl    331\nh    310\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 32\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       997\n1       625\n2       572\n3        43\n4       725\n       ... \n9995    790\n9996    729\n9997    326\n9998    444\n9999    743\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([  0,  28,  83, ..., 802, 815, 991])`, type: `ndarray`\n\nsorter, expected value: `array([2873, 5094, 7643, ..., 3138, 5685, 6898])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   39,   79,  112,  158, ... , 9845, 9874, 9899, 9934, 9972])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([38, 38, 33, 46, 41, 52, 35, ... , 30,\n       29, 25, 35, 37, 28])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([38, 38, 33, 46, 41, 52, 35, ... , 30,\n       29, 25, 35, 37, 28])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('b', '2015-08-31') ... ('v', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nb    2015-08-31    38\nt    2015-08-24    38\nq    2015-09-01    33\nr    2015-08-23    46\nj    2015-08-24    41\n                   ..\nh    2015-09-01    29\nb    2015-08-30    25\nt    2015-08-26    35\nq    2015-08-25    37\nv    2015-08-24    28\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 33\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       997.0\n1       625.0\n2       572.0\n3        43.0\n4       725.0\n        ...  \n9995    790.0\n9996    729.0\n9997    326.0\n9998    444.0\n9999    743.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+02,  9.95000000e+02,  9.96000000e+02])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9645,  320, 1911])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  887, 1228, 1601, 2003, 2390, 2757, 3136, 3524, 3845, 4234,\n       4594, 4912, 5276, 5646, 6023, 6370, 6724, 7067, 7446, 7786, 8165,\n       8549, 8933, 9264, 9645])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([399, 225, 246, 271, 296, 280, 262, 266, 265, 224, 288, 277, 233,\n       276, 266, 268, 247, 262, 239, 276, 252, 273, 268, 288, 249, 264,\n       254])`, type: `ndarray`\n\nres, expected value: `array([225, 246, 271, 296, 280, 262, 266, 265, 224, 288, 277, 233, 276,\n       266, 268, 247, 262, 239, 276, 252, 273, 268, 288, 249, 264, 254])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'q', 'r', 'j', 'k', 'o', 'i', 'y', 'n', 'e', 'c', 'x', 'm', 's',\n       'w', 'a', 'z', 'p', 'u', 'g', 't', 'd', 'f', 'v', 'l', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    225\nq    246\nr    271\nj    296\nk    280\no    262\ni    266\ny    265\nn    224\ne    288\nc    277\nx    233\nm    276\ns    266\nw    268\na    247\nz    262\np    239\nu    276\ng    252\nt    273\nd    268\nf    288\nv    249\nl    264\nh    254\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 34\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        254\n1        688\n2        895\n3        392\n4        744\n        ... \n99995    112\n99996    891\n99997    681\n99998    345\n99999    787\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([15156, 20266, 20586, ..., 38843, 88678, 91332])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3783,  7524, 11433, 15353, 19125, 22959, 26818, 30618,\n       34537, 38445, 42328, 46198, 50042, 53823, 57740, 61656, 65440,\n       69266, 73042, 76960, 80692, 84582, 88455, 92315, 96234])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([978, 977, 980, 982, 980, 977, 976, 975, 981, 988, 988, 976, 979,\n       977, 975, 979, 970, 975, 984, 978, 980, 978, 981, 973, 971, 974])`, type: `ndarray`\n\nres, expected value: `array([978, 977, 980, 982, 980, 977, 976, 975, 981, 988, 988, 976, 979,\n       977, 975, 979, 970, 975, 984, 978, 980, 978, 981, 973, 971, 974])`, type: `ndarray`\n\nri, expected value: `Index(['a', 's', 'h', 'z', 'p', 'b', 'l', 'k', 'd', 'w', 'v', 'm', 'q', 'x',\n       'r', 'f', 'j', 'e', 'g', 't', 'o', 'n', 'c', 'y', 'i', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    978\ns    977\nh    980\nz    982\np    980\nb    977\nl    976\nk    975\nd    981\nw    988\nv    988\nm    976\nq    979\nx    977\nr    975\nf    979\nj    970\ne    975\ng    984\nt    978\no    980\nn    978\nc    981\ny    973\ni    971\nu    974\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 35\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        254\n1        688\n2        895\n3        392\n4        744\n        ... \n99995    112\n99996    891\n99997    681\n99998    345\n99999    787\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([  4,   6,   8, ..., 994, 996, 996])`, type: `ndarray`\n\nsorter, expected value: `array([33302,   658, 31623, ..., 78271, 13692, 35112])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   376,   744,  1138, ... , 98127, 98505, 98891, 99255, 99617])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([311, 319, 331, 337, 316, ... , 325, 324, 326, 313, 304, 309])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([311, 319, 331, 337, 316, ... , 325, 324, 326, 313, 304, 309])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-24') ... ('f', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-24    311\ns    2015-08-31    319\nh    2015-08-25    331\nz    2015-08-26    337\np    2015-08-27    316\n                  ... \no    2015-08-24    324\np    2015-08-23    326\nt    2015-08-28    313\no    2015-09-01    304\nf    2015-08-24    309\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 36\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        254.0\n1        688.0\n2        895.0\n3        392.0\n4        744.0\n         ...  \n99995    112.0\n99996    891.0\n99997    681.0\n99998    345.0\n99999    787.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.98000000e+02,  9.98000000e+02,  9.99000000e+02])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 58782, 59240, 69299])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9440, 13123, 16812, 20355, 23982, 27616, 31175, 34863,\n       38543, 42197, 45854, 49442, 53007, 56517, 60213, 63880, 67453,\n       71066, 74609, 78322, 81838, 85485, 89112, 92791, 96326])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([996, 952, 952, 956, 957, 950, 953, 954, 961, 961, 968, 947, 951,\n       945, 956, 946, 942, 946, 945, 958, 951, 948, 953, 950, 949, 950,\n       951])`, type: `ndarray`\n\nres, expected value: `array([952, 952, 956, 957, 950, 953, 954, 961, 961, 968, 947, 951, 945,\n       956, 946, 942, 946, 945, 958, 951, 948, 953, 950, 949, 950, 951])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'h', 'z', 'p', 'b', 'l', 'k', 'd', 'w', 'v', 'm', 'q', 'x', 's',\n       'r', 'f', 'j', 'e', 'g', 't', 'o', 'c', 'y', 'i', 'u', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    952\nh    952\nz    956\np    957\nb    950\nl    953\nk    954\nd    961\nw    961\nv    968\nm    947\nq    951\nx    945\ns    956\nr    946\nf    942\nj    946\ne    945\ng    958\nt    951\no    948\nc    953\ny    950\ni    949\nu    950\nn    951\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 37\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     0\n1     4\n2     9\n3     5\n4     4\n     ..\n95    2\n96    4\n97    0\n98    4\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,\n        4,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7,  8,  8,  9,  9,\n        9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13,\n       14, 14, 14, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18,\n       19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22,\n       22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([1, 4, 5, 5, 5, 3, 4, 4, 4, 5, 6, 3, 5, 7, 0, 4, 8, 3, 4, 7, 0, 8,\n       8, 3, 3, 8, 4, 5, 5, 6, 7, 8, 0, 4, 9, 5, 5, 6, 8, 9, 9, 9, 1, 5,\n       6, 9, 4, 5, 2, 2, 3, 0, 4, 5, 3, 6, 9, 1, 1, 0, 4, 5, 9, 2, 3, 4,\n       4, 6, 4, 5, 6, 6, 0, 0, 1, 8, 1, 2, 5, 5, 9, 1, 1, 1, 4, 5, 6, 9,\n       1, 5, 6, 6, 0, 2, 0, 2, 2, 2, 4, 8])`, type: `ndarray`\n\nsorter, expected value: `array([ 9, 32,  3, 92, 99, 53, 42, 69, 98,  7, 77, 56, 47, 10,  6, 22, 45,\n       62, 73, 85, 29, 12, 33, 16, 52,  5, 80, 27, 61, 18, 66, 88,  0, 96,\n       64, 15, 78, 49, 58,  2, 44, 46, 51, 17, 20, 38, 91, 24, 30, 90, 19,\n       68, 87, 63, 57, 75, 74, 36, 39, 94,  4, 54, 82, 37, 60, 65, 89, 86,\n       31, 13, 25, 70, 11, 48, 28, 84, 76, 81, 34, 93, 71, 14, 23, 55,  1,\n        8, 59, 21, 43, 26, 40, 72, 79, 83, 97, 35, 41, 95, 50, 67])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  5, 11, 14, 17, 20, 23, 26, 30, 32, 35, 42, 46, 48, 51, 54, 57,\n       59, 63, 68, 72, 76, 81, 88, 92, 94])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 4, 3, 3, 3, 2, 2, 3, 2, 3, 4, 4, 2, 2, 3, 3, 1, 4, 4, 3, 3, 4,\n       5, 3, 2, 4])`, type: `ndarray`\n\nres, expected value: `array([3, 4, 3, 3, 3, 2, 2, 3, 2, 3, 4, 4, 2, 2, 3, 3, 1, 4, 4, 3, 3, 4,\n       5, 3, 2, 4])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    4\nc    3\nd    3\ne    3\nf    2\ng    2\nh    3\ni    2\nj    3\nk    4\nl    4\nm    2\nn    2\no    3\np    3\nq    1\nr    4\ns    4\nt    3\nu    3\nv    4\nw    5\nx    3\ny    2\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 38\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     0\n1     4\n2     9\n3     5\n4     4\n     ..\n95    2\n96    4\n97    0\n98    4\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 12, 13, 13,\n       14, 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n       30, 31, 31, 31, 32, 33, 34, 34, 35, 35, 36, 37, 38, 39, 40, 41, 42,\n       43, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 57,\n       58, 58, 59, 60, 61, 62, 62, 63, 64, 65, 65, 66, 66, 67, 68, 69, 69,\n       70, 70, 71, 72, 73, 73, 74, 75, 76, 77, 78, 79, 79, 80, 81])`, type: `ndarray`\n\n_, expected value: `82`, type: `int`\n\nval, expected value: `array([1, 5, 5, 4, 5, 4, 3, 4, 4, 6, 5, 5, 7, 3, 4, 0, 8, 7, 3, 4, 8, 0,\n       8, 8, 3, 3, 4, 5, 5, 6, 8, 7, 9, 0, 4, 5, 8, 9, 6, 9, 5, 9, 1, 9,\n       5, 6, 5, 4, 3, 2, 2, 4, 5, 0, 9, 3, 6, 1, 1, 9, 5, 4, 0, 2, 6, 4,\n       3, 4, 6, 6, 5, 4, 1, 0, 8, 0, 2, 1, 5, 5, 9, 5, 1, 6, 9, 1, 4, 1,\n       1, 6, 6, 5, 2, 0, 2, 2, 0, 2, 8, 4])`, type: `ndarray`\n\nsorter, expected value: `array([ 9, 99, 92, 32,  3, 42, 53, 69, 98, 77,  7, 47, 10, 56, 22,  6, 45,\n       85, 62, 73, 33, 29, 12,  5, 16, 52, 80, 61, 27, 18, 88, 66, 64,  0,\n       96, 78, 58, 46, 49, 44, 15,  2, 51, 38, 17, 20, 24, 91, 19, 90, 30,\n       87, 63, 68, 74, 57, 75, 39, 36, 82, 54,  4, 94, 37, 86, 89, 60, 65,\n       25, 70, 13, 31, 28, 11, 84, 48, 81, 76, 34, 93, 71,  8, 14, 59, 21,\n       23,  1, 55, 43, 40, 72, 26, 83, 79, 41, 95, 97, 35, 67, 50])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  2,  3,  4,  5,  6,  7,  9, 10, 11, 12, 13, 14, 15, 17, 18, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39,\n       40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 75, 76, 77, 79, 81,\n       82, 83, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2,\n       2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2,\n       2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-24') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(82,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-24    2\n     2015-08-30    1\n     2015-08-31    1\n     2015-09-01    1\nb    2015-08-24    1\n                  ..\nz    2015-08-23    1\n     2015-08-25    1\n     2015-08-29    2\n     2015-08-30    1\n     2015-09-01    1\nName: julie, Length: 82, dtype: int64`, type: `Series`\n\n## Expected case 39\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     0.0\n1     4.0\n2     9.0\n3     5.0\n4     4.0\n     ... \n95    2.0\n96    4.0\n97    0.0\n98    4.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,\n        2,  2,  3,  3,  3,  4,  4,  4,  5,  5,  5,  6,  6,  7,  7,  7,  8,\n        8,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12,\n       13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18,\n       18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22,\n       22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 2.00000000e+00,  3.00000000e+00, ... ,  4.00000000e+00,  8.00000000e+00])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([35, 52,  1, 69, 18, 86,  9, 32,  3, 92, 99,  7, 53, 42, 98, 77, 47,\n       56, 10, 45,  6, 22, 85, 62, 73, 29, 12, 33, 16,  5, 27, 80, 61, 66,\n       88, 64,  0, 96, 46, 15, 78, 49, 58,  2, 44, 51, 17, 20, 38, 91, 24,\n       30, 90, 19, 68, 87, 63, 57, 75, 74, 36, 39, 94,  4, 54, 82, 65, 37,\n       60, 89, 31, 13, 25, 70, 28, 84, 11, 48, 76, 81, 34, 93, 71,  8, 14,\n       23, 55, 59, 21, 26, 43, 40, 72, 83, 79, 97, 41, 95, 50, 67])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6, 11, 16, 19, 22, 25, 28, 30, 33, 35, 38, 45, 49, 51, 54, 57, 60,\n       62, 66, 70, 74, 78, 83, 89, 93, 95])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 3, 4, 3, 3, 3, 2, 2, 3, 2, 3, 5, 4, 2, 2, 3, 3, 1, 4, 4, 3, 2,\n       4, 4, 3, 2, 4])`, type: `ndarray`\n\nres, expected value: `array([3, 4, 3, 3, 3, 2, 2, 3, 2, 3, 5, 4, 2, 2, 3, 3, 1, 4, 4, 3, 2, 4,\n       4, 3, 2, 4])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    4\nc    3\nd    3\ne    3\nf    2\ng    2\nh    3\ni    2\nj    3\nk    5\nl    4\nm    2\nn    2\no    3\np    3\nq    1\nr    4\ns    4\nt    3\nu    2\nv    4\nw    4\nx    3\ny    2\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 40\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      8\n1      1\n2      6\n3      5\n4      7\n      ..\n995    7\n996    4\n997    8\n998    3\n999    9\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, 0, 1, 1, 1, 2, 2, ... ,\n       7, 7, 7, 8, 8, 8, 8, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([324, 537, 788, 811,   1, ... ,  52, 182, 623, 331, 474, 502])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  42,  77, 117, 169, 208, 246, 280, 314, 349, 382, 409, 451,\n       486, 530, 573, 615, 654, 695, 728, 768, 811, 853, 891, 928, 959])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 1, 0, 0, 1, 0, ... ,\n       1, 0, 0, 1, 0, 0, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10,  9, 10, 10, 10, 10, 10, 10,  9, 10,  9, 10, 10, 10, 10,  9, 10,\n       10, 10, 10, 10, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nres, expected value: `array([10,  9, 10, 10, 10, 10, 10, 10,  9, 10,  9, 10, 10, 10, 10,  9, 10,\n       10, 10, 10, 10, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb     9\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni     9\nj    10\nk     9\nl    10\nm    10\nn    10\no    10\np     9\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny     9\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 41\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      8\n1      1\n2      6\n3      5\n4      7\n      ..\n995    7\n996    4\n997    8\n998    3\n999    9\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   1,   1, ... , 254, 254, 255, 255, 255, 255])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `256`, type: `int`\n\nval, expected value: `array([4, 4, 5, 3, 5, 5, 7, 7, 2, ... ,\n       2, 2, 4, 6, 6, 6, 1, 2, 3, 4])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([809, 906, 131, 167, 637, ... , 851, 933, 151, 867, 518, 417])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   3,   8,  13,  17, ... , 972, 975, 977, 982, 989, 996])`, shape: `(256,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 0, 1, 0, 1, ... ,\n       1, 0, 1, 1, 0, 0, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([2, 3, 5, 3, 4, 3, 4, 3, 5, ... , 2, 3, 3, 4, 3, 2, 4, 5, 4, 4])`, shape: `(256,)`, type: `ndarray`\n\nres, expected value: `array([2, 3, 5, 3, 4, 3, 4, 3, 5, ... , 2, 3, 3, 4, 3, 2, 4, 5, 4, 4])`, shape: `(256,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=256)`, shape: `(256,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    3\n     2015-08-27    4\n                  ..\nz    2015-08-28    2\n     2015-08-29    4\n     2015-08-30    5\n     2015-08-31    4\n     2015-09-01    4\nName: julie, Length: 256, dtype: int64`, type: `Series`\n\n## Expected case 42\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      8.0\n1      1.0\n2      6.0\n3      5.0\n4      7.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    3.0\n999    9.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  8.00000000e+00,  9.00000000e+00])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      8.000000e+00\n1      1.000000e+00\n2      6.000000e+00\n3      5.000000e+00\n4      7.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    3.000000e+00\n999    9.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... ,  96, 316,  37, 182, 623, 474])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  99, 134, 171, 219, 256, 293, 324, 358, 388, 419, 445, 487,\n       519, 560, 601, 641, 675, 713, 745, 783, 823, 862, 897, 933, 963])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 0, 1, 0, 1, 0, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11, 11,  9, 11, 11, 11, 11, 11, 11, 10, 11, 10, 11, 10, 11, 11, 10,\n       10, 11, 10, 11, 11, 11, 11, 11, 10, 11])`, type: `ndarray`\n\nres, expected value: `array([11,  9, 11, 11, 11, 11, 11, 11, 10, 11, 10, 11, 10, 11, 11, 10, 10,\n       11, 10, 11, 11, 11, 11, 11, 10, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb     9\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    10\nj    11\nk    10\nl    11\nm    10\nn    11\no    11\np    10\nq    10\nr    11\ns    10\nt    11\nu    11\nv    11\nw    11\nx    11\ny    10\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 43\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       0\n1       3\n2       0\n3       1\n4       9\n       ..\n9995    2\n9996    9\n9997    5\n9998    9\n9999    9\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([  56,  176,  416, ..., 9269, 9693, 9767])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  371,  747, 1140, 1493, 1867, 2269, 2660, 3037, 3428, 3816,\n       4203, 4605, 5027, 5416, 5773, 6176, 6596, 6962, 7312, 7712, 8102,\n       8480, 8909, 9270, 9634])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 44\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       0\n1       3\n2       0\n3       1\n4       9\n       ..\n9995    2\n9996    9\n9997    5\n9998    9\n9999    9\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([0, 1, 1, ..., 8, 8, 8])`, type: `ndarray`\n\nsorter, expected value: `array([ 503, 4858, 5364, ..., 1161, 3939, 8493])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   45,   96,  132,  157, ... , 9828, 9869, 9900, 9939, 9972])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10,  8, 10, 10,  9, ... ,  9,\n       10,  9, 10,  8,  8])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10,  8, 10, 10,  9, ... ,  9,\n       10,  9, 10,  8,  8])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26     8\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29     9\n     2015-08-30    10\n     2015-08-31     8\n     2015-09-01     8\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 45\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       0.0\n1       3.0\n2       0.0\n3       1.0\n4       9.0\n       ... \n9995    2.0\n9996    9.0\n9997    5.0\n9998    9.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9269, 9693, 9767])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  937, 1293, 1653, 1979, 2329, 2700, 3072, 3425, 3794, 4165,\n       4525, 4911, 5310, 5673, 6014, 6402, 6793, 7146, 7478, 7853, 8217,\n       8579, 8975, 9316, 9656])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 46\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        4\n1        0\n2        3\n3        7\n4        3\n        ..\n99995    7\n99996    1\n99997    5\n99998    2\n99999    1\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([  322,   346,   405, ..., 99362, 99698, 99789])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3864,  7729, 11538, 15283, 19240, 23021, 26932, 30738,\n       34522, 38359, 42264, 46094, 49876, 53753, 57668, 61588, 65447,\n       69282, 73221, 77028, 80824, 84596, 88365, 92279, 96142])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 47\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        4\n1        0\n2        3\n3        7\n4        3\n        ..\n99995    7\n99996    1\n99997    5\n99998    2\n99999    1\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([  558,  4842, 11420, ..., 97041, 97475, 98606])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   355,   765,  1107, ... , 98102, 98467, 98853, 99243, 99608])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 48\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        4.0\n1        0.0\n2        3.0\n3        7.0\n4        3.0\n        ... \n99995    7.0\n99996    1.0\n99997    5.0\n99998    2.0\n99999    1.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99362, 99698, 99789])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9506, 13141, 16724, 20261, 23980, 27545, 31232, 34819,\n       38390, 42006, 45681, 49284, 52854, 56492, 60165, 63847, 67485,\n       71099, 74781, 78350, 81895, 85459, 89012, 92701, 96355])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 49\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     57\n1     37\n2     95\n3     53\n4     64\n      ..\n95    52\n96    32\n97    28\n98     9\n99    88\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,\n        3,  3,  4,  4,  5,  5,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,\n        8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11,\n       12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17,\n       17, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20,\n       21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 5,  8, 23, 24, 31, 45, 51, 53, 60, 88, 13, 19, 48, 51, 39, 45, 57,\n       64, 98, 52, 95, 14, 84,  2,  5, 28, 43, 62, 81,  5, 15, 67, 77, 82,\n       84, 88, 11, 22, 24, 28, 48, 68, 92, 42, 65, 76, 90, 96, 37, 53, 82,\n        0,  0, 45,  8, 11, 26, 27, 90, 23, 65, 82,  0,  3, 53,  7, 19, 57,\n       61, 53, 72,  1, 24, 32, 37, 68, 71, 84, 89, 95,  1, 37, 67, 84, 89,\n       55,  9, 10, 51, 11, 30, 40, 34, 66, 66, 71, 18, 64, 68, 84])`, type: `ndarray`\n\nsorter, expected value: `array([53, 77, 56, 78, 81,  7, 89,  3, 33, 99, 58, 88, 69, 84, 71, 65,  0,\n       36,  8, 95,  2, 94, 20,  5, 19, 46, 39, 49, 29, 23,  9, 10, 47, 48,\n       91, 50, 74, 82, 72, 97, 55, 44, 75, 41, 76,  6, 43, 57,  1, 12, 85,\n       60, 66, 22, 73, 64, 28, 54, 35, 16, 83, 38, 86, 21, 93, 61, 15, 70,\n       24, 18, 79, 34, 52, 96, 17, 68, 31, 30, 59, 27, 42, 11, 63, 67, 32,\n       40, 98, 14, 90, 92, 45, 37, 13, 62, 87, 51, 80,  4, 26, 25])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  3, 10, 14, 19, 21, 23, 29, 34, 36, 43, 48, 51, 54, 56, 59, 62,\n       65, 69, 71, 80, 85, 86, 89, 92, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 7, 4, 5, 2, 2, 6, 5, 2, 7, 5, 3, 2, 2, 3, 3, 3, 4, 2, 9, 5, 1,\n       3, 3, 3, 4])`, type: `ndarray`\n\nres, expected value: `array([3, 7, 4, 5, 2, 2, 6, 5, 2, 7, 5, 3, 2, 2, 3, 3, 3, 4, 2, 9, 5, 1,\n       3, 3, 3, 4])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    7\nc    4\nd    5\ne    2\nf    2\ng    6\nh    5\ni    2\nj    7\nk    5\nl    3\nm    2\nn    2\no    3\np    3\nq    3\nr    4\ns    2\nt    9\nu    5\nv    1\nw    3\nx    3\ny    3\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 50\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     57\n1     37\n2     95\n3     53\n4     64\n      ..\n95    52\n96    32\n97    28\n98     9\n99    88\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 24, 25, 26, 27, 28, 28,\n       29, 30, 31, 32, 33, 34, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43,\n       44, 45, 45, 46, 47, 48, 48, 49, 50, 50, 51, 52, 53, 53, 54, 55, 56,\n       57, 58, 59, 60, 61, 61, 61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 69,\n       70, 71, 71, 71, 72, 73, 74, 75, 76, 77, 78, 79, 79, 80, 80])`, type: `ndarray`\n\n_, expected value: `81`, type: `int`\n\nval, expected value: `array([23,  8,  5, 60, 88, 31, 24, 45, 51, 53, 51, 19, 48, 13, 98, 57, 39,\n       64, 45, 52, 95, 14, 84, 28, 62,  5, 43,  2, 81, 82, 67, 77,  5, 15,\n       88, 84, 11, 68, 48, 28, 92, 24, 22, 65, 90, 96, 76, 42, 53, 37, 82,\n        0,  0, 45, 11,  8, 26, 27, 90, 65, 82, 23,  0,  3, 53, 57, 19,  7,\n       61, 53, 72, 68, 32, 37, 95,  1, 71, 84, 89, 24, 89, 37,  1, 67, 84,\n       55,  9, 10, 51, 40, 11, 30, 34, 66, 66, 71, 68, 84, 18, 64])`, type: `ndarray`\n\nsorter, expected value: `array([56, 77, 53, 33, 99, 81, 78,  7, 89,  3, 84, 88, 69, 58,  8,  0, 71,\n       36, 65, 95,  2, 94, 20, 46, 49, 19, 39,  5, 29, 48, 10, 47, 23,  9,\n       50, 91, 74, 44, 55, 97, 75, 72, 82, 76, 43, 57,  6, 41, 12,  1, 85,\n       60, 66, 22, 64, 73, 28, 54, 35, 83, 38, 16, 86, 21, 93, 70, 15, 61,\n       24, 18, 79, 68, 96, 17, 27, 34, 31, 30, 59, 52, 32, 11, 42, 63, 67,\n       40, 98, 14, 90, 37, 92, 45, 13, 62, 87, 51, 26, 25, 80,  4])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 11, 12, 13, 14, 15, 16, 18,\n       19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38,\n       39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59,\n       61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80,\n       81, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1,\n       1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1,\n       1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-29') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(81,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-29    1\n     2015-08-30    1\n     2015-08-31    1\nb    2015-08-23    1\n     2015-08-25    1\n                  ..\ny    2015-08-24    1\n     2015-08-29    1\n     2015-08-30    1\nz    2015-08-28    2\n     2015-08-30    2\nName: julie, Length: 81, dtype: int64`, type: `Series`\n\n## Expected case 51\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     57.0\n1     37.0\n2     95.0\n3     53.0\n4     64.0\n      ... \n95    52.0\n96    32.0\n97    28.0\n98     9.0\n99    88.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,\n        2,  2,  3,  3,  3,  3,  3,  4,  4,  5,  5,  6,  6,  6,  6,  6,  6,\n        7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10,\n       10, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 16, 16, 17,\n       17, 17, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20,\n       21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0.00000000e+00,  2.40000000e+01, ... ,  6.40000000e+01,  8.40000000e+01])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([86, 52,  1, 69, 18, 35, 53, 77, 56,  7, 78, 81, 89,  3, 33, 99, 84,\n       58, 88,  8, 65, 71,  0, 36, 95,  2, 94, 20, 46,  5, 19, 39, 49, 29,\n        9, 47, 23, 10, 48, 91, 50, 74, 82, 72, 97, 55, 44, 75, 41, 76,  6,\n       43, 57, 85, 12, 66, 60, 22, 64, 73, 28, 54, 83, 16, 38, 21, 93, 61,\n       15, 70, 24, 79, 27, 34, 96, 17, 68, 31, 30, 59, 42, 11, 63, 67, 32,\n       40, 98, 14, 90, 45, 92, 37, 13, 62, 87, 51, 26, 80,  4, 25])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6,  9, 16, 19, 24, 26, 28, 34, 39, 41, 48, 53, 55, 58, 60, 62, 65,\n       67, 71, 72, 80, 85, 86, 89, 92, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 3, 7, 3, 4, 2, 2, 6, 4, 2, 7, 5, 2, 3, 2, 2, 3, 2, 4, 1, 8, 5,\n       1, 3, 3, 3, 4])`, type: `ndarray`\n\nres, expected value: `array([3, 7, 3, 4, 2, 2, 6, 4, 2, 7, 5, 2, 3, 2, 2, 3, 2, 4, 1, 8, 5, 1,\n       3, 3, 3, 4])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    7\nc    3\nd    4\ne    2\nf    2\ng    6\nh    4\ni    2\nj    7\nk    5\nl    2\nm    3\nn    2\no    2\np    3\nq    2\nr    4\ns    1\nt    8\nu    5\nv    1\nw    3\nx    3\ny    3\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 52\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      89\n1      32\n2      27\n3      58\n4      69\n       ..\n995    66\n996    25\n997    90\n998    10\n999    76\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  1,  2,  3,  5,  7, 16, ... , 79, 83, 86, 87, 92, 96, 96, 97])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([523, 566, 580, 791,  26, ... , 759, 853, 461, 505, 818, 900])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  36,  77, 127, 167, 219, 252, 294, 333, 369, 412, 448, 485,\n       530, 560, 603, 656, 698, 726, 760, 798, 832, 865, 908, 930, 967])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 0, 1, 1, 1, 1, 1, 1, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([34, 34, 38, 33, 41, 29, 32, 28, 31, 35, 30, 30, 35, 26, 38, 41, 35,\n       26, 30, 30, 30, 26, 30, 19, 29, 29])`, type: `ndarray`\n\nres, expected value: `array([34, 34, 38, 33, 41, 29, 32, 28, 31, 35, 30, 30, 35, 26, 38, 41, 35,\n       26, 30, 30, 30, 26, 30, 19, 29, 29])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    34\nb    34\nc    38\nd    33\ne    41\nf    29\ng    32\nh    28\ni    31\nj    35\nk    30\nl    30\nm    35\nn    26\no    38\np    41\nq    35\nr    26\ns    30\nt    30\nu    30\nv    26\nw    30\nx    19\ny    29\nz    29\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 53\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      89\n1      32\n2      27\n3      58\n4      69\n       ..\n995    66\n996    25\n997    90\n998    10\n999    76\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 252, 252, 253, 253, 253, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `254`, type: `int`\n\nval, expected value: `array([ 0, 22, 28, 39, 91,  1,  2, ... , 79, 77, 78, 96, 45, 62, 78, 83])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([523, 147, 540,  74, 892, ... , 307, 505, 977, 864, 522, 402])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   5,   9,  12,  13, ... , 980, 985, 987, 990, 993, 996])`, shape: `(254,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 5,  4,  3,  1,  6,  6,  4, ... ,  3,  3,  5,  2,  3,  3,  3,  4])`, shape: `(254,)`, type: `ndarray`\n\nres, expected value: `array([ 5,  4,  3,  1,  6,  6,  4, ... ,  3,  3,  5,  2,  3,  3,  3,  4])`, shape: `(254,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    5\n     2015-08-24    4\n     2015-08-26    3\n     2015-08-27    1\n     2015-08-28    6\n                  ..\nz    2015-08-28    2\n     2015-08-29    3\n     2015-08-30    3\n     2015-08-31    3\n     2015-09-01    4\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n## Expected case 54\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      89.0\n1      32.0\n2      27.0\n3      58.0\n4      69.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    10.0\n999    76.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.60000000e+01,  9.60000000e+01])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      8.900000e+01\n1      3.200000e+01\n2      2.700000e+01\n3      5.800000e+01\n4      6.900000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    1.000000e+01\n999    7.600000e+01\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 402, 759, 853, 461, 505, 818])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  95, 136, 184, 221, 269, 301, 341, 378, 412, 452, 484, 518,\n       561, 589, 632, 679, 719, 746, 776, 811, 842, 873, 912, 932, 968])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([42, 26, 31, 36, 26, 38, 28, 27, 24, 27, 27, 26, 24, 32, 20, 34, 34,\n       30, 20, 25, 26, 23, 23, 23, 17, 26, 22])`, type: `ndarray`\n\nres, expected value: `array([26, 31, 36, 26, 38, 28, 27, 24, 27, 27, 26, 24, 32, 20, 34, 34, 30,\n       20, 25, 26, 23, 23, 23, 17, 26, 22])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    26\nb    31\nc    36\nd    26\ne    38\nf    28\ng    27\nh    24\ni    27\nj    27\nk    26\nl    24\nm    32\nn    20\no    34\np    34\nq    30\nr    20\ns    25\nt    26\nu    23\nv    23\nw    23\nx    17\ny    26\nz    22\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 55\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       16\n1       59\n2       10\n3       13\n4       48\n        ..\n9995     3\n9996    65\n9997    81\n9998    27\n9999    57\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([1722, 8150, 9574, ..., 7442, 8630, 8978])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  375,  782, 1181, 1585, 1948, 2361, 2766, 3159, 3523, 3915,\n       4311, 4680, 5079, 5467, 5873, 6251, 6617, 6967, 7343, 7720, 8090,\n       8457, 8851, 9222, 9602])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 99,  99,  99,  96,  99, 100,  99,  99,  98,  99,  95,  98,  99,\n        97,  98,  96,  96,  95,  98,  97,  96,  98,  99,  99,  96,  99])`, type: `ndarray`\n\nres, expected value: `array([ 99,  99,  99,  96,  99, 100,  99,  99,  98,  99,  95,  98,  99,\n        97,  98,  96,  96,  95,  98,  97,  96,  98,  99,  99,  96,  99])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     99\nb     99\nc     99\nd     96\ne     99\nf    100\ng     99\nh     99\ni     98\nj     99\nk     95\nl     98\nm     99\nn     97\no     98\np     96\nq     96\nr     95\ns     98\nt     97\nu     96\nv     98\nw     99\nx     99\ny     96\nz     99\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 56\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       16\n1       59\n2       10\n3       13\n4       48\n        ..\n9995     3\n9996    65\n9997    81\n9998    27\n9999    57\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 1,  4,  4, ..., 96, 97, 98])`, type: `ndarray`\n\nsorter, expected value: `array([1445, 5957, 9679, ..., 3296, 2377, 7489])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   42,   79,  103,  130, ... , 9797, 9842, 9883, 9923, 9966])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([33, 30, 22, 26, 27, 42, 25, ... , 30,\n       36, 34, 33, 35, 30])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([33, 30, 22, 26, 27, 42, 25, ... , 30,\n       36, 34, 33, 35, 30])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    33\n     2015-08-24    30\n     2015-08-25    22\n     2015-08-26    26\n     2015-08-27    27\n                   ..\nz    2015-08-28    36\n     2015-08-29    34\n     2015-08-30    33\n     2015-08-31    35\n     2015-09-01    30\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 57\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       16.0\n1       59.0\n2       10.0\n3       13.0\n4       48.0\n        ... \n9995     3.0\n9996    65.0\n9997    81.0\n9998    27.0\n9999    57.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7442, 8630, 8978])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  943, 1322, 1689, 2075, 2413, 2803, 3187, 3553, 3903, 4265,\n       4639, 4981, 5365, 5729, 6111, 6464, 6808, 7140, 7498, 7851, 8194,\n       8543, 8915, 9264, 9622])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  97, 100,  95,  95,  98,  97,  97,  98,  98,  98,  91,  96,\n        98,  95,  98,  93,  93,  95,  94,  96,  97,  99,  98,  97,  94,\n        96])`, type: `ndarray`\n\nres, expected value: `array([ 97, 100,  95,  95,  98,  97,  97,  98,  98,  98,  91,  96,  98,\n        95,  98,  93,  93,  95,  94,  96,  97,  99,  98,  97,  94,  96])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     97\nb    100\nc     95\nd     95\ne     98\nf     97\ng     97\nh     98\ni     98\nj     98\nk     91\nl     96\nm     98\nn     95\no     98\np     93\nq     93\nr     95\ns     94\nt     96\nu     97\nv     99\nw     98\nx     97\ny     94\nz     96\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 58\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        51\n1        70\n2        23\n3        65\n4        39\n         ..\n99995    62\n99996    83\n99997    38\n99998    84\n99999    20\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  955,  6967,  7242, ..., 92310, 94075, 94929])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3801,  7636, 11448, 15403, 19129, 22992, 26876, 30764,\n       34742, 38603, 42374, 46217, 50168, 53987, 57838, 61670, 65528,\n       69318, 73162, 76990, 80864, 84591, 88496, 92371, 96232])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 59\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        51\n1        70\n2        23\n3        65\n4        39\n         ..\n99995    62\n99996    83\n99997    38\n99998    84\n99999    20\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  955, 34221, 51342, ..., 41758, 59143, 85033])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   384,   781,  1159, ... , 98169, 98495, 98878, 99240, 99635])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 97, 100,  94,  98,  98, ... ,  96,  95,  97,  98, 100,  96])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([ 97, 100,  94,  98,  98, ... ,  96,  95,  97,  98, 100,  96])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23     97\n     2015-08-24    100\n     2015-08-25     94\n     2015-08-26     98\n     2015-08-27     98\n                  ... \nz    2015-08-28     95\n     2015-08-29     97\n     2015-08-30     98\n     2015-08-31    100\n     2015-09-01     96\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 60\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        51.0\n1        70.0\n2        23.0\n3        65.0\n4        39.0\n         ... \n99995    62.0\n99996    83.0\n99997    38.0\n99998    84.0\n99999    20.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 83695, 88612, 94075])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9452, 13043, 16641, 20361, 23858, 27518, 31166, 34822,\n       38562, 42194, 45764, 49381, 53101, 56709, 60335, 63934, 67563,\n       71124, 74735, 78325, 81974, 85500, 89146, 92818, 96470])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 61\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      15\n1     150\n2     193\n3     734\n4     440\n     ... \n95    334\n96    941\n97     23\n98    798\n99    494\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  3,  3,  4,\n        4,  4,  5,  6,  6,  7,  7,  7,  7,  8,  8,  9,  9,  9, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13,\n       13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16,\n       17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20,\n       20, 21, 21, 21, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([349, 447, 590, 706, 101, ... , 641, 941, 957, 154, 734, 812])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([16, 78,  9, 64, 11, 76, 77, 48, 33, 80, 32, 92, 18, 84, 41, 67, 70,\n       82, 91, 24, 40, 83, 57, 89, 17, 34, 93, 75, 60, 51, 95, 54, 73, 61,\n       23, 88, 86, 43, 56, 30,  7, 74, 87,  4, 68, 13, 47, 14, 63, 42, 65,\n       44, 79, 20,  0, 31, 26, 69, 36, 58, 28, 29, 71, 10, 62, 35, 37, 38,\n       81,  2, 55, 66, 52, 27,  1, 15, 25, 98,  6,  8, 45, 94, 50, 53, 85,\n       59, 72, 99, 22, 46, 97, 39, 19,  5, 21, 96, 12, 49,  3, 90])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  4,  8, 11, 16, 19, 20, 22, 26, 28, 31, 42, 47, 50, 54, 57, 63,\n       68, 74, 79, 84, 86, 89, 90, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([ 4,  4,  3,  5,  3,  1,  2,  4,  2,  3, 11,  5,  3,  4,  3,  6,  5,\n        6,  5,  5,  2,  3,  1,  7,  2,  1])`, type: `ndarray`\n\nres, expected value: `array([ 4,  4,  3,  5,  3,  1,  2,  4,  2,  3, 11,  5,  3,  4,  3,  6,  5,\n        6,  5,  5,  2,  3,  1,  7,  2,  1])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     4\nb     4\nc     3\nd     5\ne     3\nf     1\ng     2\nh     4\ni     2\nj     3\nk    11\nl     5\nm     3\nn     4\no     3\np     6\nq     5\nr     6\ns     5\nt     5\nu     2\nv     3\nw     1\nx     7\ny     2\nz     1\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 62\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      15\n1     150\n2     193\n3     734\n4     440\n     ... \n95    334\n96    941\n97     23\n98    798\n99    494\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  1,  2,  3,  4,  5,  6,  7,  7,  8,  9, 10, 10, 11, 12, 13,\n       14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29,\n       30, 31, 31, 32, 32, 33, 33, 34, 35, 36, 37, 38, 38, 39, 40, 41, 42,\n       43, 44, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 54, 55, 55, 55,\n       56, 57, 57, 57, 57, 58, 59, 60, 61, 61, 61, 62, 62, 62, 63, 64, 65,\n       66, 67, 67, 68, 69, 70, 70, 70, 71, 72, 73, 74, 75, 76, 77])`, type: `ndarray`\n\n_, expected value: `78`, type: `int`\n\nval, expected value: `array([447, 706, 590, 349, 217, ... , 941, 957, 413, 154, 734, 812])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([78, 64,  9, 16, 76, 11, 48, 77, 33, 32, 80, 92, 84, 41, 67, 18, 70,\n       91, 82, 24, 83, 40, 89, 34, 17, 57, 75, 93, 95, 51, 60, 23,  7, 74,\n       56, 61, 43, 73, 86, 88, 30, 54, 47,  4, 68, 87, 13, 63, 42, 14, 79,\n       44, 65, 20, 26, 31,  0, 36, 29, 28, 58, 69, 71, 62, 38, 10, 35, 37,\n       55, 81, 66, 52, 27,  2, 98,  1, 15, 25,  6,  8, 94, 53, 50, 45, 59,\n       85, 72, 99, 22, 46, 97,  5, 21, 19, 96, 12, 39, 49,  3, 90])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 14, 15, 16, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39,\n       41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59,\n       60, 61, 63, 64, 65, 68, 69, 73, 74, 75, 76, 79, 82, 83, 84, 85, 86,\n       88, 89, 90, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 4, 1, 1, 1, 3, 3, 1, 1, 1,\n       1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 4, 1, 1, 1, 3, 3, 1, 1, 1,\n       1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-23')],\n           names=['jim', 'joe'])`, shape: `(78,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    2\n     2015-08-25    1\n     2015-08-26    1\nb    2015-08-23    1\n     2015-08-25    1\n                  ..\nx    2015-08-31    1\n     2015-09-01    1\ny    2015-08-24    1\n     2015-08-28    1\nz    2015-08-23    1\nName: julie, Length: 78, dtype: int64`, type: `Series`\n\n## Expected case 63\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      15.0\n1     150.0\n2     193.0\n3     734.0\n4     440.0\n      ...  \n95    334.0\n96    941.0\n97     23.0\n98    798.0\n99    494.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,\n        3,  3,  3,  3,  4,  4,  4,  5,  6,  6,  7,  7,  7,  7,  8,  8,  9,\n        9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11,\n       12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16,\n       16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20,\n       20, 21, 21, 21, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 1.50000000e+02,  1.88000000e+02, ... ,  7.34000000e+02,  8.12000000e+02])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 69, 35, 86, 18, 52,  9, 64, 16, 78, 11, 76, 77, 48, 33, 80, 32,\n       84, 92, 41, 67, 70, 82, 91, 24, 83, 40, 57, 89, 17, 34, 93, 75, 60,\n       51, 95,  7, 54, 73, 61, 23, 88, 43, 56, 30, 74, 47, 87,  4, 68, 13,\n       14, 63, 42, 65, 44, 79, 20, 26,  0, 31, 28, 36, 58, 29, 71, 10, 62,\n       37, 38, 27, 66, 81,  2, 55, 15, 25, 98,  6,  8, 45, 94, 50, 53, 85,\n       59, 72, 99, 22, 46, 97, 39, 19,  5, 21, 96, 12, 49,  3, 90])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6, 10, 14, 17, 21, 24, 25, 27, 31, 33, 36, 46, 51, 54, 58, 61, 66,\n       70, 75, 79, 84, 86, 89, 90, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([ 6,  3,  4,  3,  4,  3,  1,  2,  4,  2,  3, 10,  5,  3,  4,  3,  5,\n        4,  4,  4,  4,  2,  3,  1,  7,  2,  1])`, type: `ndarray`\n\nres, expected value: `array([ 3,  4,  3,  4,  3,  1,  2,  4,  2,  3, 10,  5,  3,  4,  3,  5,  4,\n        4,  4,  4,  2,  3,  1,  7,  2,  1])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     3\nb     4\nc     3\nd     4\ne     3\nf     1\ng     2\nh     4\ni     2\nj     3\nk    10\nl     5\nm     3\nn     4\no     3\np     5\nq     4\nr     4\ns     4\nt     4\nu     2\nv     3\nw     1\nx     7\ny     2\nz     1\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 64\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      263\n1      605\n2      111\n3      568\n4      606\n      ... \n995    154\n996    214\n997    227\n998    996\n999    942\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 24,  36,  52, 131, 132, ... , 826, 839, 878, 912, 928, 992])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([288, 892, 741, 955, 103, ... , 514, 716, 377, 553, 833, 260])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  38,  82, 114, 141, 172, 215, 262, 299, 334, 383, 419, 459,\n       503, 544, 584, 623, 665, 699, 741, 784, 819, 854, 890, 926, 965])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([38, 43, 32, 27, 31, 43, 44, 35, 35, 46, 36, 38, 44, 40, 40, 39, 42,\n       34, 41, 43, 35, 35, 36, 35, 38, 35])`, type: `ndarray`\n\nres, expected value: `array([38, 43, 32, 27, 31, 43, 44, 35, 35, 46, 36, 38, 44, 40, 40, 39, 42,\n       34, 41, 43, 35, 35, 36, 35, 38, 35])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    38\nb    43\nc    32\nd    27\ne    31\nf    43\ng    44\nh    35\ni    35\nj    46\nk    36\nl    38\nm    44\nn    40\no    40\np    39\nq    42\nr    34\ns    41\nt    43\nu    35\nv    35\nw    36\nx    35\ny    38\nz    35\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 65\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      263\n1      605\n2      111\n3      568\n4      606\n      ... \n995    154\n996    214\n997    227\n998    996\n999    942\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 254, 255, 256, 256, 256, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `257`, type: `int`\n\nval, expected value: `array([266, 451, 465, 592, 885, ... , 928, 390, 732, 820, 878, 912])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([624, 788, 696, 920, 253, ... , 833,  27, 893, 318, 377, 553])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   6,  11,  13,  15, ... , 977, 981, 986, 991, 995, 996])`, shape: `(257,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 6,  5,  2,  2,  1,  4,  6, ... ,  4,  5,  5,  4,\n        1,  4])`, shape: `(257,)`, type: `ndarray`\n\nres, expected value: `array([ 6,  5,  2,  2,  1,  4,  6, ... ,  4,  5,  5,  4,\n        1,  4])`, shape: `(257,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    6\n     2015-08-24    5\n     2015-08-25    2\n     2015-08-26    2\n     2015-08-27    1\n                  ..\nz    2015-08-28    5\n     2015-08-29    5\n     2015-08-30    4\n     2015-08-31    1\n     2015-09-01    4\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n## Expected case 66\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      263.0\n1      605.0\n2      111.0\n3      568.0\n4      606.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    996.0\n999    942.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.28000000e+02,  9.92000000e+02])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      2.630000e+02\n1      6.050000e+02\n2      1.110000e+02\n3      5.680000e+02\n4      6.060000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    9.960000e+02\n999    9.420000e+02\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 514, 716, 377, 553, 833, 260])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  96, 139, 169, 196, 226, 263, 308, 343, 375, 419, 453, 490,\n       529, 566, 605, 643, 683, 715, 755, 795, 827, 861, 895, 929, 965])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([50, 32, 36, 27, 23, 25, 35, 39, 32, 27, 34, 30, 32, 35, 32, 30, 32,\n       31, 26, 31, 34, 29, 32, 32, 30, 28, 35])`, type: `ndarray`\n\nres, expected value: `array([32, 36, 27, 23, 25, 35, 39, 32, 27, 34, 30, 32, 35, 32, 30, 32, 31,\n       26, 31, 34, 29, 32, 32, 30, 28, 35])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    32\nb    36\nc    27\nd    23\ne    25\nf    35\ng    39\nh    32\ni    27\nj    34\nk    30\nl    32\nm    35\nn    32\no    30\np    32\nq    31\nr    26\ns    31\nt    34\nu    29\nv    32\nw    32\nx    30\ny    28\nz    35\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 67\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       374\n1        39\n2       442\n3       533\n4       671\n       ... \n9995      5\n9996    535\n9997    372\n9998     10\n9999    733\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([  0,   0,   6, ..., 996, 996, 998])`, type: `ndarray`\n\nsorter, expected value: `array([2195, 4006, 3359, ..., 2587, 4619,  146])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  389,  771, 1168, 1567, 1922, 2305, 2691, 3052, 3448, 3865,\n       4243, 4614, 4991, 5381, 5740, 6129, 6529, 6904, 7301, 7699, 8066,\n       8463, 8827, 9217, 9606])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([334, 316, 329, 333, 298, 320, 317, 307, 324, 341, 320, 301, 313,\n       325, 309, 323, 332, 317, 328, 328, 305, 321, 312, 327, 319, 324])`, type: `ndarray`\n\nres, expected value: `array([334, 316, 329, 333, 298, 320, 317, 307, 324, 341, 320, 301, 313,\n       325, 309, 323, 332, 317, 328, 328, 305, 321, 312, 327, 319, 324])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    334\nb    316\nc    329\nd    333\ne    298\nf    320\ng    317\nh    307\ni    324\nj    341\nk    320\nl    301\nm    313\nn    325\no    309\np    323\nq    332\nr    317\ns    328\nt    328\nu    305\nv    321\nw    312\nx    327\ny    319\nz    324\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 68\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       374\n1        39\n2       442\n3       533\n4       671\n       ... \n9995      5\n9996    535\n9997    372\n9998     10\n9999    733\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 12,  17,  19, ..., 915, 936, 984])`, type: `ndarray`\n\nsorter, expected value: `array([2485, 1598, 3354, ..., 3051,  917, 9318])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   42,   92,  135,  179, ... , 9796, 9840, 9881, 9918, 9968])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([42, 49, 43, 44, 38, 31, 43, ... , 46,\n       43, 40, 36, 48, 32])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([42, 49, 43, 44, 38, 31, 43, ... , 46,\n       43, 40, 36, 48, 32])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    42\n     2015-08-24    49\n     2015-08-25    43\n     2015-08-26    44\n     2015-08-27    38\n                   ..\nz    2015-08-28    43\n     2015-08-29    40\n     2015-08-30    36\n     2015-08-31    48\n     2015-09-01    32\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 69\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       374.0\n1        39.0\n2       442.0\n3       533.0\n4       671.0\n        ...  \n9995      5.0\n9996    535.0\n9997    372.0\n9998     10.0\n9999    733.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.96000000e+02,  9.96000000e+02,  9.98000000e+02])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 2587, 4619,  146])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  961, 1323, 1695, 2071, 2393, 2752, 3114, 3455, 3828, 4221,\n       4570, 4920, 5276, 5641, 5977, 6341, 6721, 7077, 7452, 7829, 8185,\n       8557, 8894, 9260, 9629])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([414, 278, 261, 262, 272, 246, 280, 252, 256, 270, 267, 267, 261,\n       270, 264, 241, 267, 274, 268, 254, 269, 253, 267, 252, 267, 274,\n       271])`, type: `ndarray`\n\nres, expected value: `array([278, 261, 262, 272, 246, 280, 252, 256, 270, 267, 267, 261, 270,\n       264, 241, 267, 274, 268, 254, 269, 253, 267, 252, 267, 274, 271])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    278\nb    261\nc    262\nd    272\ne    246\nf    280\ng    252\nh    256\ni    270\nj    267\nk    267\nl    261\nm    270\nn    264\no    241\np    267\nq    274\nr    268\ns    254\nt    269\nu    253\nv    267\nw    252\nx    267\ny    274\nz    271\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 70\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        409\n1        373\n2        683\n3        542\n4        754\n        ... \n99995    409\n99996    946\n99997    806\n99998    318\n99999     73\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([  0,   0,   1, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([56933, 63429, 93777, ..., 52878, 83340, 96642])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3792,  7612, 11543, 15414, 19163, 23012, 26896, 30742,\n       34652, 38544, 42346, 46214, 50063, 53891, 57762, 61578, 65435,\n       69255, 73077, 76861, 80729, 84604, 88486, 92299, 96167])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([979, 982, 981, 978, 979, 972, 988, 980, 981, 984, 979, 988, 962,\n       973, 971, 976, 976, 973, 978, 984, 979, 987, 983, 976, 979, 975])`, type: `ndarray`\n\nres, expected value: `array([979, 982, 981, 978, 979, 972, 988, 980, 981, 984, 979, 988, 962,\n       973, 971, 976, 976, 973, 978, 984, 979, 987, 983, 976, 979, 975])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    979\nb    982\nc    981\nd    978\ne    979\nf    972\ng    988\nh    980\ni    981\nj    984\nk    979\nl    988\nm    962\nn    973\no    971\np    976\nq    976\nr    973\ns    978\nt    984\nu    979\nv    987\nw    983\nx    976\ny    979\nz    975\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 71\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        409\n1        373\n2        683\n3        542\n4        754\n        ... \n99995    409\n99996    946\n99997    806\n99998    318\n99999     73\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([  3,   3,   3, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([ 5786, 68101, 69421, ...,   756, 52878, 83340])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   363,   767,  1163, ... , 98067, 98479, 98879, 99244, 99606])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([296, 348, 329, 324, 332, ... , 308, 338, 322, 307, 298, 320])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([296, 348, 329, 324, 332, ... , 308, 338, 322, 307, 298, 320])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    296\n     2015-08-24    348\n     2015-08-25    329\n     2015-08-26    324\n     2015-08-27    332\n                  ... \nz    2015-08-28    338\n     2015-08-29    322\n     2015-08-30    307\n     2015-08-31    298\n     2015-09-01    320\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 72\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        409.0\n1        373.0\n2        683.0\n3        542.0\n4        754.0\n         ...  \n99995    409.0\n99996    946.0\n99997    806.0\n99998    318.0\n99999     73.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ...,   756, 52878, 83340])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9466, 13077, 16791, 20439, 23961, 27612, 31279, 34851,\n       38553, 42210, 45745, 49403, 52994, 56574, 60217, 63822, 67448,\n       71056, 74655, 78222, 81863, 85523, 89153, 92764, 96399])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([997, 956, 957, 967, 952, 952, 946, 959, 955, 960, 961, 952, 962,\n       937, 957, 947, 947, 948, 948, 950, 954, 957, 968, 957, 953, 953,\n       954])`, type: `ndarray`\n\nres, expected value: `array([956, 957, 967, 952, 952, 946, 959, 955, 960, 961, 952, 962, 937,\n       957, 947, 947, 948, 948, 950, 954, 957, 968, 957, 953, 953, 954])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    956\nb    957\nc    967\nd    952\ne    952\nf    946\ng    959\nh    955\ni    960\nj    961\nk    952\nl    962\nm    937\nn    957\no    947\np    947\nq    948\nr    948\ns    950\nt    954\nu    957\nv    968\nw    957\nx    953\ny    953\nz    954\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 73\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     2\n1     3\n2     6\n3     8\n4     5\n     ..\n95    9\n96    5\n97    2\n98    0\n99    9\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,\n        3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,\n        7,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10,\n       10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14,\n       14, 15, 15, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18,\n       18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 2, 3, 5, 6, 7, 0, 2, 5, 6, 7, 8, 0, 0, 1, 3, 4, 5, 9, 1, 2, 8,\n       9, 0, 3, 4, 8, 9, 9, 3, 6, 7, 8, 8, 1, 2, 2, 2, 3, 8, 1, 9, 0, 6,\n       8, 9, 9, 4, 4, 4, 8, 8, 5, 8, 9, 0, 4, 8, 5, 7, 9, 0, 0, 3, 4, 5,\n       6, 7, 8, 1, 5, 5, 7, 9, 9, 4, 7, 0, 3, 7, 7, 7, 9, 0, 1, 3, 6, 6,\n       8, 9, 1, 3, 1, 5, 1, 8, 9, 2, 3, 0])`, type: `ndarray`\n\nsorter, expected value: `array([83,  0,  1, 34,  2, 81, 45, 97, 71, 32, 28,  3, 60, 77, 41, 82, 84,\n        4, 12, 86, 62,  5, 54, 58, 38, 43, 90,  6, 33, 50, 13, 19,  7, 91,\n       48,  8, 59, 76, 35, 78, 39,  9, 10, 93, 14, 46, 99, 11, 53, 80, 40,\n       85, 17, 15, 95, 75, 16, 44, 18, 29, 47, 27, 55, 67, 56, 69, 20, 24,\n       42, 57, 73, 96, 21, 30, 65, 92, 22, 79, 37, 23, 68, 72, 87, 52, 51,\n       25, 49, 88, 26, 61, 70, 31, 66, 36, 63, 64, 89, 74, 94, 98])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  4,  6, 12, 19, 23, 29, 34, 40, 42, 47, 52, 55, 58, 61, 69, 75,\n       77, 83, 87, 90, 92, 94, 95, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 2, 6, 6, 4, 5, 4, 4, 2, 4, 2, 3, 3, 3, 7, 4, 2, 4, 4, 3, 2, 2,\n       1, 2, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([4, 2, 6, 6, 4, 5, 4, 4, 2, 4, 2, 3, 3, 3, 7, 4, 2, 4, 4, 3, 2, 2,\n       1, 2, 2, 1])`, type: `ndarray`\n\nri, expected value: `Index(['s', 'h', 'm', 'j', 'p', 'z', 'v', 'k', 'y', 'x', 'f', 'o', 'u', 'r',\n       'q', 'd', 'i', 't', 'e', 'c', 'a', 'w', 'g', 'n', 'b', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ns    4\nh    2\nm    6\nj    6\np    4\nz    5\nv    4\nk    4\ny    2\nx    4\nf    2\no    3\nu    3\nr    3\nq    7\nd    4\ni    2\nt    4\ne    4\nc    3\na    2\nw    2\ng    1\nn    2\nb    2\nl    1\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 74\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     2\n1     3\n2     6\n3     8\n4     5\n     ..\n95    9\n96    5\n97    2\n98    0\n99    9\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 11, 12, 13, 14,\n       15, 16, 17, 18, 19, 19, 20, 20, 20, 21, 21, 21, 22, 23, 24, 24, 25,\n       26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 36, 37, 38, 39, 40,\n       40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 54,\n       55, 56, 57, 58, 59, 60, 61, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69,\n       70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 80, 81, 82, 83])`, type: `ndarray`\n\n_, expected value: `84`, type: `int`\n\nval, expected value: `array([2, 3, 6, 8, 5, 8, 9, 8, 2, 1, 9, 0, 4, 4, 9, 6, 8, 8, 4, 5, 5, 7,\n       8, 0, 3, 6, 1, 7, 9, 7, 7, 7, 8, 3, 6, 8, 7, 7, 3, 6, 9, 5, 3, 5,\n       3, 3, 4, 8, 1, 8, 0, 2, 9, 9, 1, 2, 6, 3, 1, 0, 4, 9, 0, 4, 0, 8,\n       2, 0, 9, 2, 1, 8, 9, 1, 7, 9, 5, 1, 5, 7, 5, 5, 2, 0, 0, 8, 0, 7,\n       3, 0, 4, 8, 1, 9, 4, 6, 9, 3, 9, 0])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 39,  9, 10, 11, 80, 12, 13, 14,\n       15, 16, 17, 18, 19, 91, 27, 67, 20, 57, 21, 30, 22, 23, 24, 42, 25,\n       88, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 43, 40, 41, 44, 45,\n       97, 46, 47, 48, 76, 49, 50, 51, 52, 53, 54, 55, 56, 58, 90, 59, 60,\n       61, 62, 63, 64, 65, 66, 68, 87, 69, 70, 71, 72, 73, 96, 74, 75, 77,\n       78, 79, 81, 82, 83, 84, 85, 86, 89, 92, 93, 99, 94, 95, 98])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 11, 12, 14, 15, 16, 17, 18,\n       19, 20, 21, 23, 26, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42,\n       43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62,\n       63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82,\n       83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('s', '2015-08-23') ... ('l', '2015-08-24')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ns    2015-08-23    1\n     2015-08-25    1\nh    2015-08-26    1\nm    2015-08-31    1\nj    2015-08-29    1\n                  ..\ni    2015-08-25    1\nx    2015-08-25    2\nb    2015-08-31    1\no    2015-08-31    1\nl    2015-08-24    1\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n## Expected case 75\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     2.0\n1     3.0\n2     6.0\n3     8.0\n4     5.0\n     ... \n95    9.0\n96    5.0\n97    2.0\n98    0.0\n99    9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  2,\n        3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,\n        6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9, 10,\n       10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13,\n       14, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17,\n       18, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0.00000000e+00,  1.00000000e+00, ... ,  3.00000000e+00,  0.00000000e+00])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([52, 86,  1, 35, 18, 69, 83,  0, 34,  2, 81, 28, 45, 97, 71, 32,  3,\n       84, 60, 77, 41, 82,  4, 12, 62,  5, 54, 58, 38, 43, 90,  6, 33,  7,\n       50, 13, 19, 91,  8, 48, 59, 76, 78,  9, 39, 46, 10, 93, 14, 99, 85,\n       11, 53, 80, 40, 17, 15, 95, 75, 16, 44, 27, 55, 67, 56, 20, 24, 42,\n       65, 57, 73, 96, 21, 30, 92, 22, 79, 37, 23, 68, 72, 87, 51, 25, 49,\n       26, 88, 61, 47, 29, 70, 31, 66, 36, 63, 64, 89, 74, 94, 98])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6,  9, 11, 17, 24, 27, 33, 38, 43, 45, 50, 55, 58, 61, 68, 74, 76,\n       82, 85, 88, 90, 92, 94, 95, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 3, 2, 5, 6, 3, 5, 5, 4, 2, 5, 3, 3, 3, 7, 5, 2, 4, 3, 3, 2, 2,\n       2, 1, 2, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([3, 2, 5, 6, 3, 5, 5, 4, 2, 5, 3, 3, 3, 7, 5, 2, 4, 3, 3, 2, 2, 2,\n       1, 2, 2, 1])`, type: `ndarray`\n\nri, expected value: `Index(['s', 'h', 'm', 'j', 'p', 'z', 'v', 'k', 'y', 'x', 'f', 'o', 'u', 'q',\n       'd', 'i', 't', 'e', 'c', 'r', 'a', 'w', 'g', 'n', 'b', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ns    3\nh    2\nm    5\nj    6\np    3\nz    5\nv    5\nk    4\ny    2\nx    5\nf    3\no    3\nu    3\nq    7\nd    5\ni    2\nt    4\ne    3\nc    3\nr    2\na    2\nw    2\ng    1\nn    2\nb    2\nl    1\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 76\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      9\n1      6\n2      7\n3      8\n4      8\n      ..\n995    8\n996    9\n997    6\n998    2\n999    2\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, 0, 1, 1, 2, 2, 2, ... ,\n       7, 8, 8, 8, 8, 8, 9, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([ 62, 528, 628, 676, 206, ... , 744, 911, 488, 505, 906, 917])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  39,  80, 120, 159, 203, 227, 275, 310, 347, 385, 420, 458,\n       500, 525, 572, 615, 656, 692, 735, 765, 802, 836, 879, 916, 959])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 1, 0, 1, 0, 0, ... ,\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10,  9, 10, 10, 10,\n        9, 10,  9,  9,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10,  9, 10, 10, 10,\n        9, 10,  9,  9,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'i', 'l', 'x', 'r', 'h', 't', 'z', 'g', 's', 'a', 'm', 'w', 'd',\n       'n', 'p', 'k', 'y', 'o', 'e', 'c', 'f', 'v', 'j', 'u', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    10\ni    10\nl    10\nx    10\nr    10\nh    10\nt    10\nz    10\ng    10\ns     9\na    10\nm    10\nw    10\nd     9\nn    10\np    10\nk    10\ny     9\no    10\ne     9\nc     9\nf     9\nv    10\nj    10\nu    10\nq    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 77\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      9\n1      6\n2      7\n3      8\n4      8\n      ..\n995    8\n996    9\n997    6\n998    2\n999    2\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 245, 245, 246, 247, 248, 249])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `250`, type: `int`\n\nval, expected value: `array([0, 3, 7, 9, 9, 0, 2, 6, 8, ... ,\n       6, 7, 0, 0, 2, 5, 6, 8, 9, 5])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([ 62, 758, 146,   0,  35, ... , 950, 943, 925, 937, 973, 989])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   5,   9,  15,  19, ... , 992, 996,\n       997, 998, 999])`, shape: `(250,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 0, 1, 1, 1, 1, ... ,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([4, 4, 5, 3, 5, 4, 3, 6, 2, ... ,\n       1, 2, 1, 3, 1, 1, 1, 1])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([4, 4, 5, 3, 5, 4, 3, 6, 2, ... ,\n       1, 2, 1, 3, 1, 1, 1, 1])`, shape: `(250,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('b', '2015-09-01') ... ('f', '2015-08-28')],\n           names=['jim', 'joe'], length=250)`, shape: `(250,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nb    2015-09-01    4\ni    2015-08-26    4\n     2015-08-25    5\nl    2015-09-01    3\nx    2015-08-27    5\n                  ..\ny    2015-08-30    3\nk    2015-08-30    1\nh    2015-08-27    1\nj    2015-08-29    1\nf    2015-08-28    1\nName: julie, Length: 250, dtype: int64`, type: `Series`\n\n## Expected case 78\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      9.0\n1      6.0\n2      7.0\n3      8.0\n4      8.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    2.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.00000000e+00,  9.00000000e+00])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      9.000000e+00\n1      6.000000e+00\n2      7.000000e+00\n3      8.000000e+00\n4      8.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    2.000000e+00\n999    2.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 744, 911, 488, 505, 906, 917])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  96, 135, 170, 205, 248, 271, 317, 349, 384, 421, 453, 488,\n       524, 549, 595, 634, 674, 707, 748, 776, 812, 843, 885, 920, 962])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 11,  9, 11, 11,\n       11, 10, 11,  8, 10, 10, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 11,  9, 11, 11, 11,\n       10, 11,  8, 10, 10, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'i', 'l', 'x', 'r', 'h', 't', 'z', 'g', 's', 'a', 'm', 'w', 'd',\n       'n', 'p', 'k', 'y', 'o', 'e', 'c', 'f', 'v', 'j', 'u', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    11\ni    11\nl    11\nx    11\nr    11\nh    11\nt    11\nz    11\ng    11\ns    10\na    10\nm    10\nw    11\nd     9\nn    11\np    11\nk    11\ny    10\no    11\ne     8\nc    10\nf    10\nv    11\nj    11\nu    11\nq    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 79\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       7\n1       3\n2       4\n3       7\n4       2\n       ..\n9995    8\n9996    3\n9997    2\n9998    6\n9999    9\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([ 341,  359,  660, ..., 9677, 9801, 9927])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  381,  756, 1116, 1503, 1892, 2301, 2699, 3070, 3466, 3875,\n       4307, 4689, 5041, 5471, 5890, 6271, 6653, 7005, 7380, 7763, 8142,\n       8487, 8891, 9283, 9659])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'q', 'd', 'b', 'l', 'c', 'g', 'a', 'k', 't', 'h', 'j', 'v', 'r',\n       'i', 'w', 'n', 'u', 'z', 'p', 's', 'x', 'f', 'y', 'o', 'e'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    10\nq    10\nd    10\nb    10\nl    10\nc    10\ng    10\na    10\nk    10\nt    10\nh    10\nj    10\nv    10\nr    10\ni    10\nw    10\nn    10\nu    10\nz    10\np    10\ns    10\nx    10\nf    10\ny    10\no    10\ne    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 80\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       7\n1       3\n2       4\n3       7\n4       2\n       ..\n9995    8\n9996    3\n9997    2\n9998    6\n9999    9\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([3500, 6291, 7717, ..., 7853, 8556, 8557])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   38,   83,  120,  163, ... , 9837, 9873, 9910, 9940, 9979])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... ,  9,\n       10, 10, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... ,  9,\n       10, 10, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('m', '2015-08-30') ... ('v', '2015-08-25')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nm    2015-08-30    10\nq    2015-08-23    10\nd    2015-08-31    10\nb    2015-08-26    10\nl    2015-08-30    10\n                   ..\nw    2015-09-01    10\ne    2015-08-28    10\nx    2015-08-28    10\nw    2015-08-30    10\nv    2015-08-25     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 81\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       7.0\n1       3.0\n2       4.0\n3       7.0\n4       2.0\n       ... \n9995    8.0\n9996    3.0\n9997    2.0\n9998    6.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9345, 9677, 9801])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  948, 1284, 1651, 2018, 2407, 2782, 3135, 3514, 3905, 4308,\n       4661, 4991, 5341, 5739, 6101, 6460, 6788, 7138, 7545, 7903, 8229,\n       8598, 8971, 9328, 9684])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'd', 'b', 'l', 'c', 'g', 'a', 'k', 't', 'h', 'j', 'v', 'q', 'i',\n       'w', 'n', 'u', 'z', 'r', 'p', 'x', 'y', 'f', 'o', 's', 'e'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    11\nd    11\nb    11\nl    11\nc    11\ng    11\na    11\nk    11\nt    11\nh    11\nj    11\nv    11\nq    11\ni    11\nw    11\nn    11\nu    11\nz    11\nr    11\np    11\nx    11\ny    11\nf    11\no    11\ns    11\ne    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 82\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        1\n1        3\n2        3\n3        4\n4        0\n        ..\n99995    1\n99996    0\n99997    9\n99998    7\n99999    3\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([   69,   108,   657, ..., 99424, 99774, 99992])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3802,  7718, 11528, 15444, 19251, 23037, 26870, 30804,\n       34656, 38525, 42375, 46247, 50085, 53971, 57905, 61794, 65626,\n       69356, 73185, 77061, 80966, 84793, 88644, 92430, 96158])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['q', 'i', 'c', 'z', 's', 'h', 'k', 'u', 'y', 'b', 'a', 'p', 'g', 'r',\n       'x', 'm', 'l', 't', 'j', 'd', 'n', 'e', 'w', 'f', 'o', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nq    10\ni    10\nc    10\nz    10\ns    10\nh    10\nk    10\nu    10\ny    10\nb    10\na    10\np    10\ng    10\nr    10\nx    10\nm    10\nl    10\nt    10\nj    10\nd    10\nn    10\ne    10\nw    10\nf    10\no    10\nv    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 83\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        1\n1        3\n2        3\n3        4\n4        0\n        ..\n99995    1\n99996    0\n99997    9\n99998    7\n99999    3\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([ 3817,  3876,  9009, ..., 96888, 97446, 98009])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   397,   767,  1155, ... , 98105, 98476, 98863, 99254, 99622])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('q', '2015-08-29') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nq    2015-08-29    10\ni    2015-08-31    10\nc    2015-08-29    10\nz    2015-08-29    10\ns    2015-08-28    10\n                   ..\nq    2015-08-30    10\nn    2015-08-23    10\n     2015-09-01    10\n     2015-08-30    10\nz    2015-08-31    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 84\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        1.0\n1        3.0\n2        3.0\n3        4.0\n4        0.0\n        ... \n99995    1.0\n99996    0.0\n99997    9.0\n99998    7.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99274, 99424, 99992])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9447, 13039, 16712, 20321, 23887, 27508, 31220, 34829,\n       38459, 42142, 45775, 49427, 53066, 56708, 60386, 63975, 67479,\n       71105, 74749, 78392, 81992, 85674, 89311, 92881, 96373])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['q', 'c', 'z', 's', 'h', 'k', 'u', 'y', 'b', 'i', 'a', 'p', 'g', 'r',\n       'm', 'l', 't', 'j', 'd', 'n', 'e', 'x', 'w', 'f', 'o', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nq    11\nc    11\nz    11\ns    11\nh    11\nk    11\nu    11\ny    11\nb    11\ni    11\na    11\np    11\ng    11\nr    11\nm    11\nl    11\nt    11\nj    11\nd    11\nn    11\ne    11\nx    11\nw    11\nf    11\no    11\nv    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 85\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      8\n1     81\n2     90\n3     98\n4     73\n      ..\n95    86\n96    33\n97    84\n98    79\n99    16\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,\n        2,  2,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,\n        6,  6,  6,  6,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9, 10, 10, 10,\n       10, 10, 10, 10, 10, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14,\n       14, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19,\n       20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 24, 24, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 8, 25, 46, 47, 59, 80, 90, 49, 57, 76, 81,  8, 16, 17, 50, 60, 68,\n       79, 98, 15, 22, 44, 73, 96, 96, 19, 55, 62, 91, 15, 50, 85, 97, 19,\n       50, 62, 66, 96, 77, 97, 34, 43, 47, 55, 55, 85, 10, 28, 16, 16, 20,\n       40, 40, 60, 72, 82,  1, 43, 49, 33, 45, 72, 50, 58, 62, 73, 75, 94,\n       96,  8, 91, 32, 42, 19, 24, 46, 51, 75, 90, 10, 38, 96,  4, 14, 84,\n       16, 37, 50, 86, 29, 55, 68, 16, 37, 44, 23, 31, 66, 12, 70])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  7, 16, 47,  6, 63,  2, 91, 20,  9,  1, 66, 82, 70, 89, 14, 76,\n       98,  3, 81, 50, 48,  4, 26, 61, 39,  5, 37, 60, 40, 49, 22,  8, 27,\n       42, 43, 52, 10, 17, 11, 36, 79, 44, 55, 56, 12, 13, 71, 38, 53, 68,\n       15, 41, 77, 58, 18, 19, 23, 21, 96, 88, 24, 75, 34, 69, 25, 51, 31,\n       35, 28, 93, 29, 92, 80, 94, 30, 33, 45, 72, 87, 85, 32, 83, 46, 97,\n       99, 57, 54, 95, 74, 64, 59, 62, 78, 86, 65, 67, 73, 84, 90])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  7, 11, 19, 25, 29, 33, 38, 40, 46, 48, 56, 57, 59, 62, 69, 71,\n       73, 79, 82, 85, 89, 92, 95, 96, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([7, 4, 8, 5, 4, 4, 5, 2, 5, 2, 6, 1, 2, 3, 7, 2, 2, 6, 3, 3, 4, 3,\n       3, 1, 2, 2])`, type: `ndarray`\n\nres, expected value: `array([7, 4, 8, 5, 4, 4, 5, 2, 5, 2, 6, 1, 2, 3, 7, 2, 2, 6, 3, 3, 4, 3,\n       3, 1, 2, 2])`, type: `ndarray`\n\nri, expected value: `Index(['v', 'i', 'w', 'n', 'u', 'f', 'k', 'd', 'q', 'y', 'c', 'j', 'l', 'b',\n       'a', 'p', 'o', 't', 'm', 'r', 'g', 's', 'z', 'e', 'x', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nv    7\ni    4\nw    8\nn    5\nu    4\nf    4\nk    5\nd    2\nq    5\ny    2\nc    6\nj    1\nl    2\nb    3\na    7\np    2\no    2\nt    6\nm    3\nr    3\ng    4\ns    3\nz    3\ne    1\nx    2\nh    2\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 86\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      8\n1     81\n2     90\n3     98\n4     73\n      ..\n95    86\n96    33\n97    84\n98    79\n99    16\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  1,  1,  2,  3,  3,  3,  4,  5,  6,  6,  7,  8,  9, 10,\n       10, 11, 11, 12, 13, 14, 15, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23,\n       24, 25, 25, 26, 27, 27, 28, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51,\n       51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 59, 60, 61, 62, 63, 64, 65,\n       66, 66, 67, 68, 68, 69, 70, 70, 71, 72, 73, 74, 75, 76, 77])`, type: `ndarray`\n\n_, expected value: `78`, type: `int`\n\nval, expected value: `array([ 8, 46, 80, 57, 81, 90, 17, 79, 98, 73, 55, 47, 59, 25, 97, 76, 62,\n       96, 77, 97, 85, 10, 60, 40, 72, 16, 82,  1, 49, 85, 43, 72, 73, 96,\n       19,  8, 91, 32, 46, 51, 62, 94, 96, 58, 96, 34, 47, 62, 19, 15, 50,\n       40, 50, 75, 14, 44, 22, 75, 66, 16, 50, 43, 55, 55, 37, 68, 91, 15,\n       96, 16, 55, 23,  8, 68, 31, 20, 28, 19, 90, 66, 29, 50, 60, 37, 16,\n        4, 84, 12, 10, 38, 44, 33, 45, 50, 70, 49, 42, 24, 86, 16])`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 16, 63, 20,  1,  2, 70, 98,  3,  4,  5, 47,  6,  7,  8,  9, 43,\n       10, 17, 11, 12, 13, 14, 15, 58, 38, 18, 19, 21, 22, 23, 24, 25, 26,\n       27, 28, 93, 29, 30, 33, 69, 31, 32, 34, 35, 36, 44, 37, 39, 40, 49,\n       41, 42, 45, 46, 48, 50, 51, 52, 53, 54, 79, 55, 56, 57, 59, 60, 81,\n       61, 62, 64, 65, 66, 76, 67, 68, 71, 80, 72, 73, 74, 75, 77, 78, 82,\n       83, 97, 84, 87, 85, 86, 96, 88, 89, 90, 91, 92, 94, 95, 99])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  3,  5,  6,  9, 10, 11, 13, 14, 15, 16, 18, 20, 21, 22, 23, 25,\n       27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 42, 43, 44, 45, 47,\n       48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66,\n       67, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87,\n       88, 90, 91, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 2, 1, 3, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([3, 2, 1, 3, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('v', '2015-08-24') ... ('g', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(78,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nv    2015-08-24    3\ni    2015-08-23    2\nv    2015-08-27    1\nw    2015-08-30    3\nn    2015-08-23    1\n                  ..\ni    2015-08-25    1\no    2015-09-01    1\nt    2015-08-29    1\ng    2015-08-28    1\n     2015-08-30    1\nName: julie, Length: 78, dtype: int64`, type: `Series`\n\n## Expected case 87\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      8.0\n1     81.0\n2     90.0\n3     98.0\n4     73.0\n      ... \n95    86.0\n96    33.0\n97    84.0\n98    79.0\n99    16.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,\n        4,  5,  5,  5,  6,  6,  6,  6,  7,  7,  8,  8,  8,  8,  8,  8,  9,\n        9, 10, 10, 10, 10, 10, 10, 10, 11, 12, 12, 13, 13, 13, 14, 14, 14,\n       14, 14, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19,\n       19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 24, 24, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 4.40000000e+01,  6.20000000e+01, ... , -9.22337204e+18,  7.00000000e+01])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([86, 69, 52,  1, 18, 35,  7, 47,  0, 16,  6, 63,  2, 66, 82, 70, 89,\n       14, 76, 98,  3, 26, 81, 50, 48,  4, 61, 39,  5, 37, 60,  8, 40, 49,\n       22,  9, 91, 20, 27, 42, 43, 10, 17, 11, 36, 79, 44, 55, 56, 12, 13,\n       71, 38, 53, 68, 15, 41, 77, 58, 19, 23, 21, 96, 88, 24, 75, 34, 25,\n       51, 31, 28, 93, 29, 92, 45, 80, 94, 30, 33, 72, 85, 87, 32, 46, 83,\n       97, 99, 57, 54, 95, 64, 74, 59, 62, 78, 65, 67, 73, 84, 90])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6, 13, 21, 27, 31, 35, 38, 42, 44, 50, 52, 59, 60, 62, 65, 70, 72,\n       74, 80, 83, 86, 90, 93, 95, 96, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 6, 8, 6, 4, 4, 3, 4, 2, 5, 2, 5, 1, 2, 3, 5, 2, 2, 6, 3, 2, 4,\n       3, 2, 1, 2, 2])`, type: `ndarray`\n\nres, expected value: `array([6, 8, 6, 4, 4, 3, 4, 2, 5, 2, 5, 1, 2, 3, 5, 2, 2, 6, 3, 2, 4, 3,\n       2, 1, 2, 2])`, type: `ndarray`\n\nri, expected value: `Index(['v', 'w', 'n', 'u', 'f', 'i', 'k', 'd', 'q', 'y', 'c', 'j', 'l', 'b',\n       'a', 'p', 'o', 't', 'm', 'r', 'g', 's', 'z', 'e', 'x', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nv    6\nw    8\nn    6\nu    4\nf    4\ni    3\nk    4\nd    2\nq    5\ny    2\nc    5\nj    1\nl    2\nb    3\na    5\np    2\no    2\nt    6\nm    3\nr    2\ng    4\ns    3\nz    2\ne    1\nx    2\nh    2\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 88\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      80\n1      92\n2      45\n3      71\n4      30\n       ..\n995     7\n996    64\n997    22\n998    77\n999     5\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([14, 15, 22, 27, 28, 32, 41, ... , 69, 73, 78, 79, 84, 86, 93, 97])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([772, 445, 997, 919, 166, ... , 730, 715, 896, 135, 299,  62])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  23,  65, 101, 144, 193, 244, 282, 326, 359, 395, 437, 467,\n       517, 555, 593, 634, 674, 718, 755, 784, 818, 850, 891, 923, 967])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([20, 33, 30, 35, 43, 41, 29, 35, 28, 32, 33, 25, 37, 30, 33, 37, 33,\n       38, 29, 25, 32, 26, 35, 25, 36, 30])`, type: `ndarray`\n\nres, expected value: `array([20, 33, 30, 35, 43, 41, 29, 35, 28, 32, 33, 25, 37, 30, 33, 37, 33,\n       38, 29, 25, 32, 26, 35, 25, 36, 30])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'y', 'r', 'b', 'd', 'i', 't', 'o', 'h', 'f', 'e', 'v', 'z', 'j',\n       'g', 'k', 'l', 'c', 'w', 's', 'q', 'p', 'u', 'a', 'x', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    20\ny    33\nr    30\nb    35\nd    43\ni    41\nt    29\no    35\nh    28\nf    32\ne    33\nv    25\nz    37\nj    30\ng    33\nk    37\nl    33\nc    38\nw    29\ns    25\nq    32\np    26\nu    35\na    25\nx    36\nn    30\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 89\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      80\n1      92\n2      45\n3      71\n4      30\n       ..\n995     7\n996    64\n997    22\n998    77\n999     5\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 249, 250, 251, 252, 253, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `255`, type: `int`\n\nval, expected value: `array([41, 56, 71, 80, 90, 95, 43, ... , 83, 37, 17, 29, 78, 68, 69, 34])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([756, 147,   3,   0, 538, ... , 830, 849, 853, 865, 887, 891])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   6,  12,  17,  23, ... , 994, 995, 996, 997, 998, 999])`, shape: `(255,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 6,  5,  5,  6,  8,  5,  4, ... ,  4,  1,  1,  1,  1,  1,  1,  1])`, shape: `(255,)`, type: `ndarray`\n\nres, expected value: `array([ 6,  5,  5,  6,  8,  5,  4, ... ,  4,  1,  1,  1,  1,  1,  1,  1])`, shape: `(255,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('m', '2015-08-23') ... ('n', '2015-08-26')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nm    2015-08-23    6\ny    2015-08-25    5\n     2015-08-29    5\nr    2015-08-25    6\nb    2015-08-31    8\n                  ..\ns    2015-08-29    1\nq    2015-08-27    1\nx    2015-08-31    1\ne    2015-08-24    1\nn    2015-08-26    1\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n## Expected case 90\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      80.0\n1      92.0\n2      45.0\n3      71.0\n4      30.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    77.0\n999     5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.30000000e+01,  9.70000000e+01])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      8.000000e+01\n1      9.200000e+01\n2      4.500000e+01\n3      7.100000e+01\n4      3.000000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    7.700000e+01\n999    5.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 164, 470, 896, 135, 299,  62])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  81, 118, 154, 195, 241, 288, 324, 366, 398, 432, 472, 500,\n       548, 583, 617, 657, 695, 738, 771, 799, 830, 871, 901, 930, 969])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([41, 15, 27, 27, 33, 33, 33, 24, 31, 28, 27, 28, 24, 34, 26, 26, 32,\n       26, 33, 24, 22, 26, 26, 20, 23, 31, 25])`, type: `ndarray`\n\nres, expected value: `array([15, 27, 27, 33, 33, 33, 24, 31, 28, 27, 28, 24, 34, 26, 26, 32, 26,\n       33, 24, 22, 26, 26, 20, 23, 31, 25])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'y', 'r', 'b', 'd', 'i', 't', 'o', 'h', 'f', 'e', 'v', 'z', 'j',\n       'g', 'k', 'l', 'c', 'w', 's', 'q', 'u', 'a', 'p', 'x', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    15\ny    27\nr    27\nb    33\nd    33\ni    33\nt    24\no    31\nh    28\nf    27\ne    28\nv    24\nz    34\nj    26\ng    26\nk    32\nl    26\nc    33\nw    24\ns    22\nq    26\nu    26\na    20\np    23\nx    31\nn    25\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 91\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        0\n1       86\n2       57\n3       18\n4       16\n        ..\n9995    53\n9996    79\n9997    38\n9998     5\n9999    68\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([   0, 1322, 3621, ..., 3982, 4107, 5415])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  385,  776, 1160, 1555, 1911, 2299, 2683, 3078, 3471, 3847,\n       4210, 4589, 4957, 5362, 5776, 6127, 6495, 6869, 7272, 7668, 8094,\n       8462, 8832, 9229, 9609])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  98,  98,  98,  97,  94,  99,  98, 100,  96,  96,  99,  96,\n        98,  99,  98,  97,  97,  96,  97,  98,  95, 100,  98,  97,  97])`, type: `ndarray`\n\nres, expected value: `array([100,  98,  98,  98,  97,  94,  99,  98, 100,  96,  96,  99,  96,\n        98,  99,  98,  97,  97,  96,  97,  98,  95, 100,  98,  97,  97])`, type: `ndarray`\n\nri, expected value: `Index(['c', 'h', 'b', 'n', 'k', 'w', 'f', 'z', 'r', 'a', 'p', 'y', 'l', 'm',\n       'x', 'g', 'q', 't', 'i', 's', 'j', 'u', 'v', 'o', 'e', 'd'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nc    100\nh     98\nb     98\nn     98\nk     97\nw     94\nf     99\nz     98\nr    100\na     96\np     96\ny     99\nl     96\nm     98\nx     99\ng     98\nq     97\nt     97\ni     96\ns     97\nj     98\nu     95\nv    100\no     98\ne     97\nd     97\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 92\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        0\n1       86\n2       57\n3       18\n4       16\n        ..\n9995    53\n9996    79\n9997    38\n9998     5\n9999    68\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 0,  0,  1, ..., 84, 93, 93])`, type: `ndarray`\n\nsorter, expected value: `array([   0, 7713, 4378, ..., 2228, 1266, 5854])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   34,   82,  116,  164, ... , 9833, 9863, 9906, 9937, 9970])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([28, 39, 25, 38, 36, 29, 37, ... , 34,\n       25, 37, 28, 30, 25])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([28, 39, 25, 38, 36, 29, 37, ... , 34,\n       25, 37, 28, 30, 25])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('c', '2015-08-24') ... ('a', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nc    2015-08-24    28\nh    2015-08-24    39\nb    2015-08-26    25\nn    2015-08-30    38\nb    2015-09-01    36\n                   ..\nd    2015-09-01    25\nh    2015-08-28    37\nv    2015-08-29    28\nq    2015-08-24    30\na    2015-08-28    25\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 93\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        0.0\n1       86.0\n2       57.0\n3       18.0\n4       16.0\n        ... \n9995    53.0\n9996    79.0\n9997    38.0\n9998     5.0\n9999    68.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 3982, 4107, 5415])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  953, 1316, 1689, 2057, 2388, 2757, 3118, 3488, 3853, 4205,\n       4546, 4907, 5260, 5649, 5977, 6320, 6678, 7058, 7441, 7810, 8215,\n       8552, 8902, 9265, 9639])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101, 100,  98,  99,  98,  98,  94,  97,  98,  99,  94,  94,  95,\n        96,  99,  98,  93,  97,  94,  95,  95,  98,  95,  99,  97,  98,\n        95])`, type: `ndarray`\n\nres, expected value: `array([100,  98,  99,  98,  98,  94,  97,  98,  99,  94,  94,  95,  96,\n        99,  98,  93,  97,  94,  95,  95,  98,  95,  99,  97,  98,  95])`, type: `ndarray`\n\nri, expected value: `Index(['c', 'b', 'n', 'h', 'k', 'w', 'f', 'z', 'r', 'a', 'p', 'y', 'l', 'x',\n       'g', 'q', 't', 'i', 'm', 's', 'j', 'u', 'v', 'e', 'o', 'd'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nc    100\nb     98\nn     99\nh     98\nk     98\nw     94\nf     97\nz     98\nr     99\na     94\np     94\ny     95\nl     96\nx     99\ng     98\nq     93\nt     97\ni     94\nm     95\ns     95\nj     98\nu     95\nv     99\ne     97\no     98\nd     95\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 94\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        63\n1        53\n2        40\n3        33\n4        37\n         ..\n99995    30\n99996    41\n99997    44\n99998    83\n99999    97\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 3738,  4635,  7621, ..., 97336, 97802, 98496])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3941,  7829, 11664, 15465, 19389, 23152, 26951, 30760,\n       34661, 38439, 42258, 46043, 49864, 53751, 57609, 61530, 65435,\n       69290, 73180, 76990, 80672, 84591, 88348, 92279, 96135])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['p', 'd', 'n', 'j', 'a', 'b', 'z', 'h', 'm', 'q', 'x', 'f', 'e', 'v',\n       'i', 'r', 'k', 't', 's', 'c', 'l', 'o', 'y', 'w', 'u', 'g'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\np    100\nd    100\nn    100\nj    100\na    100\nb    100\nz    100\nh    100\nm    100\nq    100\nx    100\nf    100\ne    100\nv    100\ni    100\nr    100\nk    100\nt    100\ns    100\nc    100\nl    100\no    100\ny    100\nw    100\nu    100\ng    100\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 95\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        63\n1        53\n2        40\n3        33\n4        37\n         ..\n99995    30\n99996    41\n99997    44\n99998    83\n99999    97\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 1,  1,  1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([24921, 31963, 59543, ..., 93129, 15384, 62971])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   375,   765,  1125, ... , 98074, 98482, 98872, 99258, 99615])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 98,  98,  97, 100,  99, ... ,  97,  99,  98,  99,  97,  95])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([ 98,  98,  97, 100,  99, ... ,  97,  99,  98,  99,  97,  95])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('p', '2015-08-26') ... ('p', '2015-08-31')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \np    2015-08-26     98\nd    2015-08-25     98\nn    2015-09-01     97\nj    2015-08-29    100\na    2015-08-24     99\n                  ... \ns    2015-08-26     99\nc    2015-08-28     98\nk    2015-08-23     99\nz    2015-08-29     97\np    2015-08-31     95\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 96\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        63.0\n1        53.0\n2        40.0\n3        33.0\n4        37.0\n         ... \n99995    30.0\n99996    41.0\n99997    44.0\n99998    83.0\n99999    97.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 88043, 97336, 98496])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9599, 13212, 16781, 20476, 24038, 27629, 31222, 34890,\n       38428, 42018, 45597, 49190, 52850, 56490, 60186, 63849, 67466,\n       71112, 74675, 78114, 81806, 85356, 89052, 92698, 96359])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, expected value: `Index(['p', 'n', 'j', 'a', 'b', 'z', 'h', 'm', 'q', 'x', 'f', 'e', 'v', 'i',\n       'r', 'k', 't', 's', 'c', 'l', 'o', 'y', 'w', 'u', 'd', 'g'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\np    101\nn    101\nj    101\na    101\nb    101\nz    101\nh    101\nm    101\nq    101\nx    101\nf    101\ne    101\nv    101\ni    101\nr    101\nk    101\nt    101\ns    101\nc    101\nl    101\no    101\ny    101\nw    101\nu    101\nd    101\ng    101\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 97\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     145\n1     368\n2     342\n3     692\n4     895\n     ... \n95    723\n96    402\n97    591\n98    185\n99    720\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  4,  5,\n        5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,\n       10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12,\n       12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16,\n       16, 16, 16, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n       20, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `25`, type: `int`\n\nval, expected value: `array([145, 312, 232, 354, 368, ... , 185, 746, 763, 538, 540, 790])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 72, 42, 80,  1,  2, 29,  6,  3, 50, 68, 86, 65, 97, 99,  4, 77,\n       20,  5, 96, 35, 11,  7, 36, 13, 83,  8, 51, 74, 57, 22,  9, 23, 10,\n       41, 91, 43, 89, 88, 12, 79, 71, 14, 73, 53, 63, 69, 33, 15, 49, 54,\n       44, 95, 21, 45, 60, 62, 16, 59, 25, 39, 19, 17, 55, 18, 94, 87, 24,\n       81, 27, 78, 26, 38, 28, 32, 58, 52, 30, 67, 46, 75, 34, 90, 31, 64,\n       66, 47, 56, 37, 93, 40, 92, 84, 70, 98, 85, 48, 82, 61, 76])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  2,  5,  8, 11, 16, 21, 25, 29, 32, 34, 41, 47, 54, 58, 63, 67,\n       71, 72, 75, 82, 88, 90, 94, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([2, 3, 3, 3, 5, 5, 4, 4, 3, 2, 7, 6, 7, 4, 5, 4, 4, 1, 3, 7, 6, 2,\n       4, 3, 3])`, type: `ndarray`\n\nres, expected value: `array([2, 3, 3, 3, 5, 5, 4, 4, 3, 2, 7, 6, 7, 4, 5, 4, 4, 1, 3, 7, 6, 2,\n       4, 3, 3])`, type: `ndarray`\n\nri, expected value: `Index(['k', 'o', 'b', 't', 'v', 'd', 'l', 'y', 'n', 'c', 'g', 'j', 'i', 'p',\n       'u', 'w', 'q', 'f', 'a', 'h', 'm', 'x', 'e', 'z', 's'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    2\no    3\nb    3\nt    3\nv    5\nd    5\nl    4\ny    4\nn    3\nc    2\ng    7\nj    6\ni    7\np    4\nu    5\nw    4\nq    4\nf    1\na    3\nh    7\nm    6\nx    2\ne    4\nz    3\ns    3\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 98\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     145\n1     368\n2     342\n3     692\n4     895\n     ... \n95    723\n96    402\n97    591\n98    185\n99    720\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  1,  2,  3,  4,  4,  5,  5,  5,  6,  7,  7,  8,  9, 10, 11,\n       11, 11, 12, 13, 14, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23,\n       23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 31, 32, 33, 34, 35, 36, 37,\n       37, 38, 39, 40, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83])`, type: `ndarray`\n\n_, expected value: `84`, type: `int`\n\nval, expected value: `array([145, 312, 368, 342, 692, ... , 878, 337, 402, 591, 185, 720])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 72,  1,  2,  3, 65,  4, 20,  5, 35,  6, 11,  7,  8,  9, 10, 89,\n       12, 79, 13, 14, 33, 15, 95, 16, 17, 18, 19, 21, 22, 23, 24, 81, 25,\n       39, 26, 27, 28, 29, 30, 31, 56, 32, 75, 34, 36, 37, 38, 40, 41, 42,\n       80, 43, 44, 45, 60, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58,\n       59, 61, 62, 63, 69, 64, 66, 67, 68, 70, 71, 73, 74, 76, 77, 78, 82,\n       83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  2,  3,  4,  5,  7, 10, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25,\n       26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46,\n       47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([2, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('k', '2015-09-01') ... ('v', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nk    2015-09-01    2\no    2015-08-24    1\nb    2015-09-01    1\nt    2015-09-01    1\nv    2015-08-24    2\n                  ..\nw    2015-08-31    1\nd    2015-08-26    1\nv    2015-08-30    1\nz    2015-08-29    1\nv    2015-09-01    1\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n## Expected case 99\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     145.0\n1     368.0\n2     342.0\n3     692.0\n4     895.0\n      ...  \n95    723.0\n96    402.0\n97    591.0\n98    185.0\n99    720.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  2,  2,  2,  3,  3,  3,\n        3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  8,\n        8,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11,\n       11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15,\n       16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19,\n       20, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `25`, type: `int`\n\nval, expected value: `array([ 1.64000000e+02,  2.02000000e+02, ... ,  5.40000000e+02,  7.90000000e+02])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([86, 18, 52,  1, 35, 69,  0, 72,  2, 29,  6,  3, 50, 68, 65, 97, 99,\n        4, 77, 20,  5, 96,  7, 11, 36, 13,  8, 83, 51, 74,  9, 57, 22, 23,\n       10, 41, 91, 43, 89, 88, 12, 79, 71, 14, 73, 53, 63, 33, 15, 49, 54,\n       44, 95, 21, 45, 60, 62, 16, 59, 25, 39, 19, 17, 27, 24, 81, 78, 26,\n       28, 38, 32, 46, 58, 30, 67, 75, 34, 47, 64, 66, 90, 31, 56, 37, 93,\n       84, 40, 92, 70, 42, 80, 85, 98, 48, 55, 94, 87, 82, 61, 76])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6,  8, 11, 14, 18, 22, 26, 30, 33, 35, 42, 47, 54, 58, 63, 67, 68,\n       71, 77, 83, 85, 89, 91, 94, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 2, 3, 3, 4, 4, 4, 3, 3, 2, 7, 5, 7, 4, 5, 4, 1, 3, 6, 4, 2, 4,\n       2, 3, 3, 3])`, type: `ndarray`\n\nres, expected value: `array([2, 3, 3, 4, 4, 4, 3, 3, 2, 7, 5, 7, 4, 5, 4, 1, 3, 6, 4, 2, 4, 2,\n       3, 3, 3])`, type: `ndarray`\n\nri, expected value: `Index(['k', 'b', 't', 'v', 'd', 'l', 'y', 'n', 'c', 'g', 'j', 'i', 'p', 'u',\n       'q', 'f', 'a', 'h', 'm', 'x', 'e', 'o', 'z', 'w', 's'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    2\nb    3\nt    3\nv    4\nd    4\nl    4\ny    3\nn    3\nc    2\ng    7\nj    5\ni    7\np    4\nu    5\nq    4\nf    1\na    3\nh    6\nm    4\nx    2\ne    4\no    2\nz    3\nw    3\ns    3\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 100\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      545\n1      283\n2      647\n3      212\n4      923\n      ... \n995    596\n996    466\n997    788\n998    659\n999      9\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 11,  17,  17,  48,  55, ... , 788, 839, 890, 923, 981, 991])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([225, 721, 947, 688, 743, ... , 997, 888, 670, 629, 982, 203])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  44,  91, 138, 168, 216, 256, 299, 339, 373, 422, 462, 495,\n       542, 576, 614, 656, 688, 725, 755, 790, 826, 858, 893, 931, 970])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 1, 1, 1, 0, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([41, 45, 45, 30, 46, 38, 43, 39, 34, 48, 39, 33, 47, 33, 37, 42, 32,\n       37, 30, 35, 36, 32, 35, 36, 39, 30])`, type: `ndarray`\n\nres, expected value: `array([41, 45, 45, 30, 46, 38, 43, 39, 34, 48, 39, 33, 47, 33, 37, 42, 32,\n       37, 30, 35, 36, 32, 35, 36, 39, 30])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'h', 'c', 'z', 'x', 'r', 'o', 'm', 'q', 'y', 'n', 'b', 'j', 'i',\n       'f', 's', 't', 'k', 'v', 'w', 'g', 'e', 'l', 'd', 'p', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    41\nh    45\nc    45\nz    30\nx    46\nr    38\no    43\nm    39\nq    34\ny    48\nn    39\nb    33\nj    47\ni    33\nf    37\ns    42\nt    32\nk    37\nv    30\nw    35\ng    36\ne    32\nl    35\nd    36\np    39\nu    30\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 101\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      545\n1      283\n2      647\n3      212\n4      923\n      ... \n995    596\n996    466\n997    788\n998    659\n999      9\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 251, 252, 253, 254, 255, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `257`, type: `int`\n\nval, expected value: `array([ 79, 284, 545, 585, 701, ... , 457, 492, 768,  49, 594, 303])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([482, 353,   0, 640, 857, ... , 912, 952, 968, 970, 988, 993])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   6,  11,  16,  19, ... , 994, 995, 996, 997, 998, 999])`, shape: `(257,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 6,  5,  5,  3, 12,  4,  2, ... ,  1,  1,  1,  1,\n        1,  1])`, shape: `(257,)`, type: `ndarray`\n\nres, expected value: `array([ 6,  5,  5,  3, 12,  4,  2, ... ,  1,  1,  1,  1,\n        1,  1])`, shape: `(257,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-09-01') ... ('o', '2015-08-23')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-09-01     6\nh    2015-08-26     5\nc    2015-08-25     5\nz    2015-08-27     3\nx    2015-08-28    12\n                   ..\nb    2015-08-23     1\nr    2015-08-30     1\ne    2015-08-26     1\nv    2015-08-25     1\no    2015-08-23     1\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n## Expected case 102\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      545.0\n1      283.0\n2      647.0\n3      212.0\n4      923.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    659.0\n999      9.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.81000000e+02,  9.91000000e+02])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      5.450000e+02\n1      2.830000e+02\n2      6.470000e+02\n3      2.120000e+02\n4      9.230000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    6.590000e+02\n999    9.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 816, 888, 670, 629, 982, 203])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  99, 143, 171, 217, 255, 296, 336, 369, 416, 454, 484, 527,\n       559, 595, 635, 665, 699, 728, 760, 791, 822, 855, 892, 933, 972])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([48, 32, 37, 24, 38, 28, 34, 33, 28, 40, 33, 27, 38, 28, 32, 34, 28,\n       28, 24, 30, 27, 29, 31, 29, 35, 32, 24])`, type: `ndarray`\n\nres, expected value: `array([32, 37, 24, 38, 28, 34, 33, 28, 40, 33, 27, 38, 28, 32, 34, 28, 28,\n       24, 30, 27, 29, 31, 29, 35, 32, 24])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'c', 'z', 'x', 'r', 'o', 'm', 'q', 'y', 'n', 'b', 'j', 'i', 'f',\n       's', 't', 'k', 'v', 'w', 'g', 'e', 'l', 'd', 'h', 'p', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    32\nc    37\nz    24\nx    38\nr    28\no    34\nm    33\nq    28\ny    40\nn    33\nb    27\nj    38\ni    28\nf    32\ns    34\nt    28\nk    28\nv    24\nw    30\ng    27\ne    29\nl    31\nd    29\nh    35\np    32\nu    24\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 103\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        91\n1       104\n2       794\n3        66\n4       597\n       ... \n9995    111\n9996    957\n9997    990\n9998    315\n9999    377\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([  0,   4,   5, ..., 992, 994, 996])`, type: `ndarray`\n\nsorter, expected value: `array([3659, 7128, 2091, ...,  369,  417, 9742])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  396,  797, 1160, 1538, 1914, 2266, 2648, 3033, 3440, 3820,\n       4221, 4626, 4994, 5404, 5807, 6155, 6529, 6923, 7310, 7692, 8101,\n       8495, 8868, 9264, 9646])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([329, 337, 304, 319, 315, 303, 320, 309, 332, 310, 332, 328, 312,\n       340, 343, 297, 304, 329, 321, 309, 333, 327, 312, 329, 317, 294])`, type: `ndarray`\n\nres, expected value: `array([329, 337, 304, 319, 315, 303, 320, 309, 332, 310, 332, 328, 312,\n       340, 343, 297, 304, 329, 321, 309, 333, 327, 312, 329, 317, 294])`, type: `ndarray`\n\nri, expected value: `Index(['w', 's', 'b', 'o', 'd', 'h', 'j', 'c', 'y', 'p', 'l', 'g', 'e', 'v',\n       'x', 'k', 'f', 'u', 't', 'r', 'n', 'z', 'i', 'q', 'a', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nw    329\ns    337\nb    304\no    319\nd    315\nh    303\nj    320\nc    309\ny    332\np    310\nl    332\ng    328\ne    312\nv    340\nx    343\nk    297\nf    304\nu    329\nt    321\nr    309\nn    333\nz    327\ni    312\nq    329\na    317\nm    294\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 104\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        91\n1       104\n2       794\n3        66\n4       597\n       ... \n9995    111\n9996    957\n9997    990\n9998    315\n9999    377\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 33,  91, 117, ..., 952, 991, 994])`, type: `ndarray`\n\nsorter, expected value: `array([2825,    0, 3327, ..., 8322, 3614, 3108])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   46,   85,  120,  156, ... , 9831, 9858, 9896, 9929, 9965])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([46, 39, 34, 34, 34, 48, 34, ... , 30,\n       26, 38, 33, 36, 35])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([46, 39, 34, 34, 34, 48, 34, ... , 30,\n       26, 38, 33, 36, 35])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('w', '2015-08-23') ... ('w', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nw    2015-08-23    46\ns    2015-08-28    39\nb    2015-08-29    34\n     2015-08-28    34\no    2015-08-30    34\n                   ..\nr    2015-08-28    26\nk    2015-08-28    38\ns    2015-08-23    33\nt    2015-08-25    36\nw    2015-08-27    35\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 105\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        91.0\n1       104.0\n2       794.0\n3        66.0\n4       597.0\n        ...  \n9995    111.0\n9996    957.0\n9997    990.0\n9998    315.0\n9999    377.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.88000000e+02,  9.90000000e+02,  9.94000000e+02])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 3012, 1324, 9440])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  963, 1296, 1654, 2008, 2388, 2723, 3086, 3453, 3833, 4196,\n       4578, 4969, 5312, 5681, 6009, 6359, 6721, 7093, 7452, 7823, 8180,\n       8557, 8926, 9284, 9615])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([382, 269, 247, 260, 257, 272, 251, 272, 256, 270, 273, 267, 276,\n       254, 279, 246, 256, 260, 282, 261, 269, 259, 273, 261, 262, 240,\n       277])`, type: `ndarray`\n\nres, expected value: `array([269, 247, 260, 257, 272, 251, 272, 256, 270, 273, 267, 276, 254,\n       279, 246, 256, 260, 282, 261, 269, 259, 273, 261, 262, 240, 277])`, type: `ndarray`\n\nri, expected value: `Index(['w', 'b', 'o', 'd', 's', 'h', 'j', 'c', 'y', 'p', 'l', 'g', 'e', 'x',\n       'k', 'f', 'u', 't', 'r', 'z', 'i', 'n', 'q', 'a', 'm', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nw    269\nb    247\no    260\nd    257\ns    272\nh    251\nj    272\nc    256\ny    270\np    273\nl    267\ng    276\ne    254\nx    279\nk    246\nf    256\nu    260\nt    282\nr    261\nz    269\ni    259\nn    273\nq    261\na    262\nm    240\nv    277\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 106\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        438\n1        752\n2        578\n3        744\n4        569\n        ... \n99995     63\n99996    438\n99997    722\n99998    130\n99999    192\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([20997, 34380, 55106, ..., 64754, 87203, 91860])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3798,  7650, 11702, 15627, 19529, 23320, 27294, 31146,\n       34974, 38791, 42657, 46446, 50266, 54140, 57989, 61750, 65629,\n       69446, 73213, 77050, 80868, 84742, 88500, 92311, 96145])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([978, 986, 987, 984, 979, 981, 987, 982, 981, 976, 978, 979, 983,\n       976, 974, 984, 975, 980, 975, 980, 979, 975, 981, 977, 981, 984])`, type: `ndarray`\n\nres, expected value: `array([978, 986, 987, 984, 979, 981, 987, 982, 981, 976, 978, 979, 983,\n       976, 974, 984, 975, 980, 975, 980, 979, 975, 981, 977, 981, 984])`, type: `ndarray`\n\nri, expected value: `Index(['e', 'a', 'x', 'h', 'p', 'i', 'l', 'k', 't', 'r', 'g', 'v', 'y', 'z',\n       'o', 'm', 'n', 'f', 'b', 'c', 's', 'd', 'q', 'w', 'u', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ne    978\na    986\nx    987\nh    984\np    979\ni    981\nl    987\nk    982\nt    981\nr    976\ng    978\nv    979\ny    983\nz    976\no    974\nm    984\nn    975\nf    980\nb    975\nc    980\ns    979\nd    975\nq    981\nw    977\nu    981\nj    984\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 107\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        438\n1        752\n2        578\n3        744\n4        569\n        ... \n99995     63\n99996    438\n99997    722\n99998    130\n99999    192\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([  0,   5,   9, ..., 990, 991, 993])`, type: `ndarray`\n\nsorter, expected value: `array([80243, 47240, 67241, ..., 33736, 81530, 88831])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   364,   726,  1153, ... , 98136, 98542, 98914, 99274, 99639])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([314, 291, 344, 340, 317, ... , 318, 335, 304, 295, 303, 301])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([314, 291, 344, 340, 317, ... , 318, 335, 304, 295, 303, 301])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('e', '2015-08-23') ... ('q', '2015-08-25')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ne    2015-08-23    314\na    2015-08-31    291\nx    2015-08-27    344\nh    2015-08-31    340\np    2015-08-27    317\n                  ... \ng    2015-08-27    335\ne    2015-08-29    304\ny    2015-09-01    295\ns    2015-08-24    303\nq    2015-08-25    301\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 108\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        438.0\n1        752.0\n2        578.0\n3        744.0\n4        569.0\n         ...  \n99995     63.0\n99996    438.0\n99997    722.0\n99998    130.0\n99999    192.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 42975, 87203, 91860])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9478, 13307, 17003, 20673, 24252, 27952, 31600, 35187,\n       38775, 42423, 45995, 49631, 53258, 56816, 60465, 64117, 67705,\n       71296, 74822, 78452, 82049, 85678, 89218, 92799, 96386])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([996, 952, 963, 963, 951, 958, 969, 954, 951, 949, 962, 951, 949,\n       943, 951, 957, 961, 952, 960, 943, 948, 959, 953, 959, 946, 954,\n       953])`, type: `ndarray`\n\nres, expected value: `array([952, 963, 963, 951, 958, 969, 954, 951, 949, 962, 951, 949, 943,\n       951, 957, 961, 952, 960, 943, 948, 959, 953, 959, 946, 954, 953])`, type: `ndarray`\n\nri, expected value: `Index(['e', 'x', 'h', 'p', 'i', 'l', 'k', 't', 'r', 'g', 'v', 'z', 'o', 'm',\n       'a', 'n', 'f', 'y', 'b', 'c', 's', 'd', 'q', 'w', 'u', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ne    952\nx    963\nh    963\np    951\ni    958\nl    969\nk    954\nt    951\nr    949\ng    962\nv    951\nz    949\no    943\nm    951\na    957\nn    961\nf    952\ny    960\nb    943\nc    948\ns    959\nd    953\nq    959\nw    946\nu    954\nj    953\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 109\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     1\n1     7\n2     2\n3     8\n4     9\n     ..\n95    6\n96    6\n97    1\n98    2\n99    9\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  5,\n        5,  5,  5,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,\n       11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16,\n       16, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19,\n       19, 19, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24,\n       24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([1, 2, 3, 4, 2, 5, 1, 3, 5, 6, 0, 3, 4, 4, 8, 2, 0, 1, 1, 4, 2, 2,\n       6, 0, 6, 9, 9, 3, 8, 9, 2, 3, 6, 5, 3, 5, 8, 0, 1, 3, 0, 5, 1, 4,\n       7, 8, 0, 9, 9, 0, 1, 3, 3, 5, 6, 6, 0, 6, 9, 3, 5, 6, 6, 7, 8, 1,\n       4, 4, 5, 8, 5, 1, 3, 7, 7, 1, 3, 7, 1, 6, 7, 8, 9, 0, 2, 2, 3, 3,\n       4, 4, 9, 0, 1, 1, 2, 2, 4, 7, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([51, 54, 79, 76, 36, 53, 73, 43, 37, 28, 23, 39, 41, 60, 44, 63, 22,\n        0, 26, 82,  2, 88, 74, 65, 70,  4, 93, 56, 10, 61, 67, 87, 96, 55,\n       72, 59, 34, 89, 57, 12, 40, 50, 30, 31,  1,  3, 69, 81, 99, 64, 71,\n       17, 24, 35, 25, 95, 21, 49, 66,  8, 32, 58, 84, 13, 29, 38,  6, 62,\n       91, 46, 68, 11, 16, 15, 42, 86,  5, 75, 47, 27, 94,  7, 78, 83, 19,\n       85, 52, 92, 14, 20, 77, 18, 80, 97, 33, 98, 48, 45,  9, 90])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  4,  6, 10, 15, 16, 20, 23, 27, 30, 33, 34, 37, 40, 42, 46, 49,\n       56, 59, 65, 70, 71, 75, 78, 83, 91])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,\n       1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 2, 4, 4, 1, 3, 2, 3, 3, 3, 1, 3, 3, 2, 4, 2, 5, 3, 5, 4, 1, 3,\n       3, 5, 5, 6])`, type: `ndarray`\n\nres, expected value: `array([4, 2, 4, 4, 1, 3, 2, 3, 3, 3, 1, 3, 3, 2, 4, 2, 5, 3, 5, 4, 1, 3,\n       3, 5, 5, 6])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    4\nb    2\nc    4\nd    4\ne    1\nf    3\ng    2\nh    3\ni    3\nj    3\nk    1\nl    3\nm    3\nn    2\no    4\np    2\nq    5\nr    3\ns    5\nt    4\nu    1\nv    3\nw    3\nx    5\ny    5\nz    6\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 110\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     1\n1     7\n2     2\n3     8\n4     9\n     ..\n95    6\n96    6\n97    1\n98    2\n99    9\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 10, 11, 12, 13, 14,\n       15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 27, 27, 28, 29,\n       30, 31, 32, 33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\n       46, 47, 48, 48, 48, 49, 50, 50, 51, 52, 52, 53, 53, 54, 55, 55, 56,\n       56, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70,\n       71, 72, 73, 73, 74, 75, 76, 77, 78, 79, 79, 80, 81, 81, 82])`, type: `ndarray`\n\n_, expected value: `83`, type: `int`\n\nval, expected value: `array([3, 2, 1, 4, 5, 2, 1, 6, 3, 5, 4, 0, 8, 4, 3, 2, 0, 1, 1, 4, 2, 2,\n       6, 9, 9, 6, 0, 8, 3, 9, 2, 3, 6, 5, 8, 3, 5, 1, 3, 0, 5, 0, 4, 8,\n       7, 1, 9, 9, 0, 5, 6, 3, 0, 1, 3, 6, 0, 6, 9, 7, 6, 8, 3, 5, 6, 1,\n       5, 4, 4, 8, 5, 7, 1, 7, 3, 1, 3, 7, 8, 1, 7, 9, 6, 0, 3, 4, 2, 2,\n       9, 4, 3, 1, 9, 1, 2, 7, 9, 2, 4, 0])`, type: `ndarray`\n\nsorter, expected value: `array([79, 54, 51, 76, 53, 36, 73, 28, 43, 37, 41, 23, 44, 60, 39, 63, 22,\n        0, 26, 82,  2, 88, 74,  4, 93, 70, 65, 10, 56, 61, 67, 87, 96, 55,\n       34, 72, 59, 57, 12, 89, 50, 40, 31,  3,  1, 30, 81, 99, 69, 35, 95,\n       17, 64, 71, 24, 25, 21, 49, 66, 13, 84, 29,  8, 32, 58, 38, 91,  6,\n       62, 46, 68, 42, 11, 15, 16, 86,  5, 75,  7, 47, 94, 78, 27, 83, 92,\n       14, 19, 85, 77, 20, 52, 97, 90, 80, 98, 45,  9, 33, 48, 18])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 11, 13, 14, 15, 16, 17, 18,\n       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37,\n       39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57,\n       59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81,\n       82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(83,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    1\n     2015-08-26    1\n     2015-08-30    1\n     2015-08-31    1\nb    2015-08-24    1\n                  ..\nz    2015-08-25    1\n     2015-08-27    2\n     2015-08-28    1\n     2015-08-29    2\n     2015-09-01    1\nName: julie, Length: 83, dtype: int64`, type: `Series`\n\n## Expected case 111\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     1.0\n1     7.0\n2     2.0\n3     8.0\n4     9.0\n     ... \n95    6.0\n96    6.0\n97    1.0\n98    2.0\n99    9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  3,\n        3,  3,  3,  3,  4,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7,  8,\n        8,  8,  9,  9,  9, 10, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14,\n       15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 18, 18,\n       19, 19, 19, 19, 19, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23,\n       24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0.00000000e+00,  0.00000000e+00, ... ,  4.00000000e+00,  9.00000000e+00])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([18, 69, 86, 52, 35,  1, 51, 54, 79, 76, 36, 53, 28, 73, 43, 37, 23,\n       39, 41, 60, 44, 63, 26, 22,  0, 82,  2, 88, 74, 65, 70,  4, 93, 56,\n       10, 61, 67, 87, 96, 55, 72, 59, 34, 89, 57, 12, 40, 50, 30, 31,  3,\n       81, 99, 64, 71, 17, 24, 25, 95, 66, 21, 49,  8, 84, 32, 58, 13, 29,\n       46, 38,  6, 62, 91, 68, 11, 16, 15, 42,  5, 75,  7, 27, 47, 94, 78,\n       83, 85, 19, 92, 14, 20, 77,  9, 45, 80, 97, 33, 98, 48, 90])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6, 10, 12, 16, 21, 22, 26, 29, 33, 36, 39, 40, 43, 46, 48, 51, 53,\n       59, 62, 68, 73, 74, 78, 80, 85, 92])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([5, 4, 2, 4, 4, 1, 4, 2, 3, 3, 3, 1, 3, 3, 2, 3, 1, 4, 3, 5, 4, 1,\n       3, 2, 3, 5, 5])`, type: `ndarray`\n\nres, expected value: `array([4, 2, 4, 4, 1, 4, 2, 3, 3, 3, 1, 3, 3, 2, 3, 1, 4, 3, 5, 4, 1, 3,\n       2, 3, 5, 5])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    4\nb    2\nc    4\nd    4\ne    1\nf    4\ng    2\nh    3\ni    3\nj    3\nk    1\nl    3\nm    3\nn    2\no    3\np    1\nq    4\nr    3\ns    5\nt    4\nu    1\nv    3\nw    2\nx    3\ny    5\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 112\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      0\n1      6\n2      9\n3      0\n4      1\n      ..\n995    0\n996    3\n997    7\n998    5\n999    0\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 1, ... ,\n       7, 7, 7, 7, 8, 8, 9, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([171, 341, 476, 535, 551, ... , 251, 264,  52, 379, 528, 696])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  40,  81, 132, 178, 215, 272, 309, 349, 388, 432, 456, 500,\n       537, 569, 597, 632, 661, 706, 744, 777, 819, 854, 900, 942, 965])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 1, ... ,\n       0, 0, 0, 0, 1, 0, 1, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10,  9, 10, 10,  9, 10,  9,  9,  9, 10,  9, 10, 10,  9, 10,\n       10,  9, 10, 10, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10,  9, 10, 10,  9, 10,  9,  9,  9, 10,  9, 10, 10,  9, 10,\n       10,  9, 10, 10, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd     9\ne    10\nf    10\ng     9\nh    10\ni     9\nj     9\nk     9\nl    10\nm     9\nn    10\no    10\np     9\nq    10\nr    10\ns     9\nt    10\nu    10\nv    10\nw    10\nx    10\ny     9\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 113\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      0\n1      6\n2      9\n3      0\n4      1\n      ..\n995    0\n996    3\n997    7\n998    5\n999    0\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   1, ... , 251, 251, 251, 252, 252, 252])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `253`, type: `int`\n\nval, expected value: `array([3, 4, 7, 9, 0, 0, 3, 3, 5, ... ,\n       7, 7, 8, 2, 3, 5, 7, 5, 6, 8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([279, 237, 860, 123, 341, ... , 906, 213, 886, 480, 451, 264])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   4,   6,   9,  12, ... ,\n       981, 985, 987, 988, 993, 997])`, shape: `(253,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 0, 1, 0, 1, ... ,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([4, 1, 2, 3, 6, 3, 2, 4, 5, ... , 2, 3, 4, 6, 3, 2, 1, 4, 4, 3])`, shape: `(253,)`, type: `ndarray`\n\nres, expected value: `array([4, 1, 2, 3, 6, 3, 2, 4, 5, ... , 2, 3, 4, 6, 3, 2, 1, 4, 4, 3])`, shape: `(253,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=253)`, shape: `(253,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    1\n     2015-08-25    2\n     2015-08-26    3\n     2015-08-27    6\n                  ..\nz    2015-08-28    2\n     2015-08-29    1\n     2015-08-30    4\n     2015-08-31    4\n     2015-09-01    3\nName: julie, Length: 253, dtype: int64`, type: `Series`\n\n## Expected case 114\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      0.0\n1      6.0\n2      9.0\n3      0.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    0.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.00000000e+00,  9.00000000e+00])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      0.000000e+00\n1      6.000000e+00\n2      9.000000e+00\n3      0.000000e+00\n4      1.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    5.000000e+00\n999    0.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 755, 886, 251, 264, 379, 696])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  96, 134, 182, 225, 261, 314, 350, 389, 425, 466, 488, 529,\n       562, 591, 616, 650, 679, 723, 761, 791, 831, 864, 908, 947, 968])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 0, 0, 0, 1, 0, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11,  9, 11, 11, 10, 11, 10, 10,  9, 11,  9, 10, 11, 10,\n       11, 11, 10, 11, 11, 11, 10, 11, 10, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11,  9, 11, 11, 10, 11, 10, 10,  9, 11,  9, 10, 11, 10, 11,\n       11, 10, 11, 11, 11, 10, 11, 10, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb    11\nc    11\nd     9\ne    11\nf    11\ng    10\nh    11\ni    10\nj    10\nk     9\nl    11\nm     9\nn    10\no    11\np    10\nq    11\nr    11\ns    10\nt    11\nu    11\nv    11\nw    10\nx    11\ny    10\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 115\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       9\n1       9\n2       2\n3       2\n4       5\n       ..\n9995    5\n9996    3\n9997    4\n9998    4\n9999    8\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([   8,  470,  515, ..., 9248, 9637, 9714])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  423,  793, 1167, 1547, 1947, 2345, 2771, 3167, 3529, 3905,\n       4284, 4669, 5034, 5436, 5820, 6202, 6579, 6962, 7348, 7739, 8141,\n       8528, 8906, 9263, 9641])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 116\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       9\n1       9\n2       2\n3       2\n4       5\n       ..\n9995    5\n9996    3\n9997    4\n9998    4\n9999    8\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([4488, 5034, 6021, ..., 5625, 8269, 8925])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   44,   92,  138,  166, ... , 9819, 9865, 9894, 9923, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10,  9, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10,  9, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26     9\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 117\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       9.0\n1       9.0\n2       2.0\n3       2.0\n4       5.0\n       ... \n9995    5.0\n9996    3.0\n9997    4.0\n9998    4.0\n9999    8.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9248, 9637, 9714])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  982, 1329, 1680, 2037, 2409, 2782, 3185, 3554, 3901, 4257,\n       4612, 4966, 5314, 5694, 6047, 6404, 6760, 7125, 7494, 7870, 8255,\n       8618, 8972, 9309, 9660])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 118\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        5\n1        1\n2        6\n3        6\n4        5\n        ..\n99995    5\n99996    3\n99997    6\n99998    7\n99999    6\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([  328,   550,   784, ..., 99470, 99680, 99916])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3833,  7656, 11511, 15405, 19251, 23169, 27012, 30841,\n       34670, 38513, 42288, 46147, 49997, 53854, 57664, 61556, 65314,\n       69115, 73019, 76921, 80785, 84683, 88564, 92362, 96186])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 119\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        5\n1        1\n2        6\n3        6\n4        5\n        ..\n99995    5\n99996    3\n99997    6\n99998    7\n99999    6\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([ 3226,  3395,  5149, ..., 95106, 98548, 99462])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   387,   758,  1088, ... , 98077, 98432, 98839, 99210, 99590])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 120\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        5.0\n1        1.0\n2        6.0\n3        6.0\n4        5.0\n        ... \n99995    5.0\n99996    3.0\n99997    6.0\n99998    7.0\n99999    6.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99470, 99680, 99916])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9500, 13109, 16727, 20385, 24020, 27696, 31315, 34923,\n       38526, 42123, 45688, 49322, 52942, 56576, 60175, 63841, 67366,\n       70927, 74601, 78263, 81889, 85559, 89241, 92822, 96415])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 121\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     40\n1     92\n2     26\n3     81\n4      3\n      ..\n95    91\n96    39\n97    14\n98    60\n99    69\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  3,  3,  3,  4,  4,\n        4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  8,  8,\n        8,  8,  9,  9,  9,  9, 10, 10, 10, 11, 11, 11, 12, 13, 13, 14, 14,\n       14, 14, 15, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19,\n       19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22,\n       22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([32, 87, 90, 98,  3,  8, 16, 55, 25, 99,  7, 63, 78, 92, 95,  0, 25,\n       52, 79, 88, 10, 13, 81, 86, 91, 14, 18, 38, 51, 22, 83, 89, 19, 49,\n       57, 71, 45, 77, 83, 92,  4, 90, 92, 13, 27, 63, 87, 76, 91, 15, 22,\n       25, 76, 15, 27, 35, 35, 74, 34, 87,  7,  9, 57, 63,  4, 68, 94,  2,\n       29, 39, 40, 62, 85, 95, 25, 39, 56, 67, 30, 44, 82, 91, 40, 55, 60,\n       69, 10, 18, 26, 31, 66, 89, 92, 12, 37, 60, 38, 41, 70, 98])`, type: `ndarray`\n\nsorter, expected value: `array([11, 54, 21, 63,  4, 18, 88, 55, 45, 74, 70, 12, 16,  1, 94,  9, 33,\n       60, 25, 49, 19, 66,  3, 36, 95, 97, 59, 61, 91, 64, 30, 50, 14, 71,\n       90, 40, 26, 32, 83, 24, 73, 15, 38, 78, 80, 53, 13, 56, 82, 43,  6,\n       58,  7, 29, 51, 23, 69, 75, 46, 85, 77,  5, 62, 35, 17, 81, 79, 34,\n       87, 84,  0, 10, 67, 93, 48, 96, 57, 68, 22, 72, 31, 86, 92,  8, 20,\n       99, 65, 42,  2, 28, 37, 47, 89, 27, 41, 98, 52, 76, 39, 44])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  4,  8, 10, 15, 20, 25, 29, 32, 36, 40, 43, 46, 47, 49, 53, 58,\n       60, 64, 67, 74, 78, 82, 86, 93, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 4, 2, 5, 5, 5, 4, 3, 4, 4, 3, 3, 1, 2, 4, 4, 2, 4, 3, 7, 4, 4,\n       4, 7, 3, 4])`, type: `ndarray`\n\nres, expected value: `array([4, 4, 2, 5, 5, 5, 4, 3, 4, 4, 3, 3, 1, 2, 4, 4, 2, 4, 3, 7, 4, 4,\n       4, 7, 3, 4])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    4\nb    4\nc    2\nd    5\ne    5\nf    5\ng    4\nh    3\ni    4\nj    4\nk    3\nl    3\nm    1\nn    2\no    4\np    4\nq    2\nr    4\ns    3\nt    7\nu    4\nv    4\nw    4\nx    7\ny    3\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 122\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     40\n1     92\n2     26\n3     81\n4      3\n      ..\n95    91\n96    39\n97    14\n98    60\n99    69\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 11, 12, 13, 14, 14,\n       14, 15, 15, 16, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n       27, 28, 29, 30, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n       43, 44, 45, 46, 47, 47, 48, 49, 49, 50, 51, 51, 52, 53, 54, 55, 56,\n       56, 57, 58, 59, 60, 60, 61, 61, 62, 63, 64, 65, 66, 67, 68, 69, 69,\n       70, 71, 71, 72, 73, 74, 75, 76, 77, 78, 78, 79, 79, 80, 81])`, type: `ndarray`\n\n_, expected value: `82`, type: `int`\n\nval, expected value: `array([87, 90, 98, 32, 55, 16,  8,  3, 99, 25, 95,  7, 63, 92, 78,  0, 25,\n       88, 52, 79, 13, 81, 91, 86, 10, 38, 18, 51, 14, 83, 89, 22, 71, 49,\n       57, 19, 92, 45, 77, 83,  4, 90, 92, 63, 13, 27, 87, 91, 76, 76, 15,\n       22, 25, 35, 15, 35, 74, 27, 34, 87,  9,  7, 57, 63,  4, 68, 94,  2,\n       40, 39, 95, 62, 29, 85, 25, 39, 67, 56, 44, 91, 82, 30, 69, 55, 60,\n       40, 10, 92, 18, 31, 26, 89, 66, 12, 37, 60, 38, 98, 70, 41])`, type: `ndarray`\n\nsorter, expected value: `array([54, 21, 63, 11, 55, 88, 18,  4, 74, 45, 94, 70, 12,  1, 16,  9, 33,\n       49, 60, 25, 66,  3, 95, 36, 19, 61, 59, 91, 97, 30, 50, 64, 40, 71,\n       90, 14, 24, 26, 32, 83, 73, 15, 38, 53, 78, 80, 13, 82, 56,  7, 43,\n        6, 58, 23, 29, 69, 75, 51, 46, 85,  5, 77, 62, 35, 17, 81, 79, 34,\n        0, 84, 93, 10, 87, 67, 48, 96, 68, 57, 72, 86, 31, 22, 99,  8, 20,\n       92, 65, 89, 42, 28,  2, 47, 37, 27, 41, 98, 52, 44, 39, 76])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 14, 15, 18, 20,\n       23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41,\n       42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60,\n       61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81,\n       82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 2, 3, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 2, 3, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(82,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-25    1\n     2015-08-27    1\n     2015-08-29    1\n     2015-09-01    1\nb    2015-08-24    1\n                  ..\ny    2015-08-30    1\n     2015-09-01    2\nz    2015-08-28    2\n     2015-08-30    1\n     2015-08-31    1\nName: julie, Length: 82, dtype: int64`, type: `Series`\n\n## Expected case 123\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0     40.0\n1     92.0\n2     26.0\n3     81.0\n4      3.0\n      ... \n95    91.0\n96    39.0\n97    14.0\n98    60.0\n99    69.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  2,  2,  3,  3,\n        3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,\n        7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 11, 11, 11, 12,\n       13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18,\n       18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 22, 22,\n       22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 8.00000000e+00,  3.50000000e+01, ... ,  7.00000000e+01,  9.80000000e+01])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([18, 69, 52, 35, 86,  1, 11, 54, 21, 63,  4, 88, 55, 45, 74, 70, 12,\n       16, 94,  9, 33, 60, 25, 49, 66, 19,  3, 36, 95, 97, 59, 61, 91, 64,\n       30, 50, 14, 71, 90, 40, 26, 83, 32, 24, 73, 15, 38, 78, 80, 53, 13,\n       56, 82,  7, 43,  6, 58, 29, 51, 23, 75, 46, 85, 77,  5, 62, 17, 81,\n       79, 84, 34, 87,  0, 10, 67, 93, 48, 96, 57, 68, 22, 72, 31,  8, 92,\n       20, 99, 28, 47, 65, 42,  2, 37, 89, 27, 41, 98, 76, 39, 44])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6, 10, 13, 15, 19, 24, 29, 33, 36, 40, 44, 47, 50, 51, 53, 57, 61,\n       63, 66, 69, 76, 80, 83, 87, 94, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 4, 3, 2, 4, 5, 5, 4, 3, 4, 3, 3, 3, 1, 2, 4, 4, 1, 3, 3, 7, 4,\n       3, 4, 5, 3, 3])`, type: `ndarray`\n\nres, expected value: `array([4, 3, 2, 4, 5, 5, 4, 3, 4, 3, 3, 3, 1, 2, 4, 4, 1, 3, 3, 7, 4, 3,\n       4, 5, 3, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    4\nb    3\nc    2\nd    4\ne    5\nf    5\ng    4\nh    3\ni    4\nj    3\nk    3\nl    3\nm    1\nn    2\no    4\np    4\nq    1\nr    3\ns    3\nt    7\nu    4\nv    3\nw    4\nx    5\ny    3\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 124\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      59\n1      54\n2      29\n3      23\n4      79\n       ..\n995    55\n996    78\n997    43\n998    31\n999    21\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  0,  1,  6, 12, 18, 19, ... , 88, 88, 89, 91, 92, 95, 97, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([ 71, 453, 597, 404, 204, ... , 810, 382, 614, 858, 498, 808])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  38,  73, 123, 157, 202, 237, 264, 302, 346, 387, 430, 463,\n       498, 538, 578, 612, 650, 689, 721, 756, 812, 850, 886, 920, 960])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 1, 1, 0, ... ,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([32, 27, 37, 30, 40, 26, 25, 30, 37, 35, 39, 26, 28, 32, 36, 29, 30,\n       27, 23, 26, 43, 31, 29, 31, 33, 34])`, type: `ndarray`\n\nres, expected value: `array([32, 27, 37, 30, 40, 26, 25, 30, 37, 35, 39, 26, 28, 32, 36, 29, 30,\n       27, 23, 26, 43, 31, 29, 31, 33, 34])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    32\nb    27\nc    37\nd    30\ne    40\nf    26\ng    25\nh    30\ni    37\nj    35\nk    39\nl    26\nm    28\nn    32\no    36\np    29\nq    30\nr    27\ns    23\nt    26\nu    43\nv    31\nw    29\nx    31\ny    33\nz    34\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 125\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      59\n1      54\n2      29\n3      23\n4      79\n       ..\n995    55\n996    78\n997    43\n998    31\n999    21\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   1,   1,   1, ... , 248, 249, 249, 249, 249, 249])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `250`, type: `int`\n\nval, expected value: `array([ 0, 21, 18, 69, 72, 79,  6, ... , 83, 88, 92, 39, 50, 50, 51, 73])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([ 71,  95, 223, 730, 951, ... , 614, 418, 694, 740, 942, 410])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   2,   5,   6,  14, ... , 978, 982,\n       985, 989, 995])`, shape: `(250,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([2, 3, 1, 8, 3, 5, 6, 3, 3, ... ,\n       3, 5, 3, 4, 3, 4, 6, 4])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([2, 3, 1, 8, 3, 5, 6, 3, 3, ... ,\n       3, 5, 3, 4, 3, 4, 6, 4])`, shape: `(250,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=250)`, shape: `(250,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    1\n     2015-08-26    8\n     2015-08-27    3\n                  ..\nz    2015-08-28    4\n     2015-08-29    3\n     2015-08-30    4\n     2015-08-31    6\n     2015-09-01    4\nName: julie, Length: 250, dtype: int64`, type: `Series`\n\n## Expected case 126\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      59.0\n1      54.0\n2      29.0\n3      23.0\n4      79.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    31.0\n999    21.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.70000000e+01,  9.90000000e+01])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      5.900000e+01\n1      5.400000e+01\n2      2.900000e+01\n3      2.300000e+01\n4      7.900000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    3.100000e+01\n999    2.100000e+01\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 810, 382, 614, 858, 498, 808])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  95, 128, 173, 204, 244, 279, 303, 341, 384, 422, 462, 492,\n       525, 563, 601, 634, 671, 707, 737, 770, 823, 858, 890, 923, 962])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([40, 26, 25, 31, 21, 30, 23, 23, 30, 32, 26, 34, 20, 23, 24, 31, 26,\n       29, 26, 21, 24, 36, 27, 23, 29, 28, 32])`, type: `ndarray`\n\nres, expected value: `array([26, 25, 31, 21, 30, 23, 23, 30, 32, 26, 34, 20, 23, 24, 31, 26, 29,\n       26, 21, 24, 36, 27, 23, 29, 28, 32])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    26\nb    25\nc    31\nd    21\ne    30\nf    23\ng    23\nh    30\ni    32\nj    26\nk    34\nl    20\nm    23\nn    24\no    31\np    26\nq    29\nr    26\ns    21\nt    24\nu    36\nv    27\nw    23\nx    29\ny    28\nz    32\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 127\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       89\n1       92\n2       46\n3       51\n4       44\n        ..\n9995    12\n9996     2\n9997    22\n9998    62\n9999    79\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 184,  868, 1874, ..., 8350, 7141, 7309])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  366,  744, 1125, 1518, 1886, 2266, 2656, 3057, 3428, 3804,\n       4180, 4567, 4943, 5317, 5726, 6129, 6488, 6887, 7289, 7650, 8041,\n       8419, 8819, 9211, 9605])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 97,  98,  97,  97,  98,  97,  98,  99,  97, 100,  96,  97, 100,\n        99, 100,  99,  96,  94,  97,  96, 100,  97,  99,  99,  98,  99])`, type: `ndarray`\n\nres, expected value: `array([ 97,  98,  97,  97,  98,  97,  98,  99,  97, 100,  96,  97, 100,\n        99, 100,  99,  96,  94,  97,  96, 100,  97,  99,  99,  98,  99])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     97\nb     98\nc     97\nd     97\ne     98\nf     97\ng     98\nh     99\ni     97\nj    100\nk     96\nl     97\nm    100\nn     99\no    100\np     99\nq     96\nr     94\ns     97\nt     96\nu    100\nv     97\nw     99\nx     99\ny     98\nz     99\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 128\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       89\n1       92\n2       46\n3       51\n4       44\n        ..\n9995    12\n9996     2\n9997    22\n9998    62\n9999    79\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 0,  0,  1, ..., 97, 98, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 868, 1874, 1683, ..., 4696, 5120, 7141])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   46,   83,  116,  153, ... , 9812, 9843, 9879, 9919, 9956])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([39, 30, 29, 32, 33, 23, 31, ... , 33,\n       29, 29, 31, 33, 37])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([39, 30, 29, 32, 33, 23, 31, ... , 33,\n       29, 29, 31, 33, 37])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    39\n     2015-08-24    30\n     2015-08-25    29\n     2015-08-26    32\n     2015-08-27    33\n                   ..\nz    2015-08-28    29\n     2015-08-29    29\n     2015-08-30    31\n     2015-08-31    33\n     2015-09-01    37\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 129\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0       89.0\n1       92.0\n2       46.0\n3       51.0\n4       44.0\n        ... \n9995    12.0\n9996     2.0\n9997    22.0\n9998    62.0\n9999    79.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.70000000e+01,  9.70000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 4696, 7426, 7309])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  920, 1277, 1631, 2004, 2349, 2705, 3078, 3461, 3812, 4167,\n       4522, 4894, 5247, 5598, 5982, 6359, 6700, 7070, 7448, 7788, 8151,\n       8503, 8882, 9258, 9633])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  93,  95,  95,  98,  94,  93,  96, 100,  97,  98,  93,  95,\n       100, 100,  97,  94,  94,  91,  95,  96,  98,  94,  99,  99,  97,\n        98])`, type: `ndarray`\n\nres, expected value: `array([ 93,  95,  95,  98,  94,  93,  96, 100,  97,  98,  93,  95, 100,\n       100,  97,  94,  94,  91,  95,  96,  98,  94,  99,  99,  97,  98])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     93\nb     95\nc     95\nd     98\ne     94\nf     93\ng     96\nh    100\ni     97\nj     98\nk     93\nl     95\nm    100\nn    100\no     97\np     94\nq     94\nr     91\ns     95\nt     96\nu     98\nv     94\nw     99\nx     99\ny     97\nz     98\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 130\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        10\n1        60\n2        30\n3        91\n4        37\n         ..\n99995    66\n99996     7\n99997     2\n99998    92\n99999    87\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 4504,  6387,  7703, ..., 89633, 90860, 94543])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3892,  7713, 11504, 15438, 19323, 23047, 26907, 30757,\n       34638, 38486, 42341, 46181, 50032, 53833, 57673, 61548, 65319,\n       69182, 73050, 76920, 80782, 84627, 88446, 92348, 96197])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 131\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        10\n1        60\n2        30\n3        91\n4        37\n         ..\n99995    66\n99996     7\n99997     2\n99998    92\n99999    87\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([29570, 32272, 60582, ..., 70135, 78051, 86921])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   390,   810,  1184, ... , 98105, 98443, 98854, 99230, 99600])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 98,  99,  98,  99,  99, ... ,  97,  98,  93, 100,  98,  98])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([ 98,  99,  98,  99,  99, ... ,  97,  98,  93, 100,  98,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23     98\n     2015-08-24     99\n     2015-08-25     98\n     2015-08-26     99\n     2015-08-27     99\n                  ... \nz    2015-08-28     98\n     2015-08-29     93\n     2015-08-30    100\n     2015-08-31     98\n     2015-09-01     98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 132\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        10.0\n1        60.0\n2        30.0\n3        91.0\n4        37.0\n         ... \n99995    66.0\n99996     7.0\n99997     2.0\n99998    92.0\n99999    87.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 89633, 90860, 94543])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9575, 13153, 16713, 20405, 24074, 27605, 31223, 34859,\n       38490, 42121, 45736, 49346, 52968, 56558, 60170, 63816, 67351,\n       70998, 74632, 78289, 81943, 85546, 89127, 92776, 96413])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 133\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      68\n1     484\n2     154\n3     253\n4     534\n     ... \n95    165\n96    286\n97    996\n98    963\n99    363\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,\n        2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6,  6,  6,  6,\n        6,  6,  6,  6,  7,  8,  8,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11,\n       11, 11, 11, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 17, 17,\n       17, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 20, 21, 21,\n       21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `25`, type: `int`\n\nval, expected value: `array([ 17, 366, 472, 658, 699, ... , 413, 659, 925,  18, 237, 687])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([58, 84, 91, 10, 34, 56, 90, 38, 86, 99, 73, 88, 92, 28, 98, 55, 20,\n       79, 57, 89, 29, 47,  6, 72,  7, 67, 97, 60, 63, 30, 80, 64, 11, 74,\n       59, 52, 23, 44, 70, 87, 21,  4, 54, 95, 35,  1, 27,  0, 51,  2, 69,\n       49, 43, 61, 94, 93, 71, 77, 26, 66, 46, 12, 24, 96, 83, 85, 50, 15,\n       65, 41,  5,  9, 32, 25, 37, 18, 42, 39, 76, 16, 82, 75, 68, 31, 48,\n       14,  3, 22, 62, 36, 19, 17, 53, 13,  8, 33, 81, 45, 40, 78])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  7, 15, 19, 23, 27, 29, 38, 39, 41, 43, 47, 54, 55, 58, 60, 62,\n       66, 74, 77, 82, 83, 86, 92, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([7, 8, 4, 4, 4, 2, 9, 1, 2, 2, 4, 7, 1, 3, 2, 2, 4, 8, 3, 5, 1, 3,\n       6, 5, 3])`, type: `ndarray`\n\nres, expected value: `array([7, 8, 4, 4, 4, 2, 9, 1, 2, 2, 4, 7, 1, 3, 2, 2, 4, 8, 3, 5, 1, 3,\n       6, 5, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    7\nb    8\nc    4\ne    4\nf    4\ng    2\nh    9\ni    1\nj    2\nk    2\nl    4\nm    7\nn    1\no    3\np    2\nq    2\nr    4\ns    8\nt    3\nu    5\nv    1\nw    3\nx    6\ny    5\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 134\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      68\n1     484\n2     154\n3     253\n4     534\n     ... \n95    165\n96    286\n97    996\n98    963\n99    363\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  1,  1,  2,  3,  4,  5,  5,  6,  6,  7,  7,  8,  9, 10, 11,\n       11, 12, 13, 14, 14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25,\n       26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 38, 38,\n       39, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 74, 74, 75, 76, 77, 78, 79, 80, 81, 82])`, type: `ndarray`\n\n_, expected value: `83`, type: `int`\n\nval, expected value: `array([658,  17, 472, 699, 366, ... , 143,  43, 925, 237, 687,  18])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([10, 58, 91, 34, 84, 90, 56, 38, 28, 99, 88, 86, 92, 98, 73, 79, 55,\n       20, 57, 89, 47,  6, 29, 97, 67, 72,  7, 63, 60, 30, 23, 64, 11, 52,\n       80, 74, 59, 44, 70, 21, 87,  4, 54,  1, 27, 95, 35, 61,  0,  2, 49,\n       69, 43, 51, 94, 93, 71, 77, 66, 26, 12, 46, 96, 85, 24, 83, 25, 15,\n       32,  9, 41, 65,  5, 50, 42, 18, 37, 75, 39, 82, 16, 76, 68, 31, 48,\n       14, 36, 19, 17, 22,  3, 62, 33,  8, 13, 53, 81, 40, 78, 45])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([ 0,  1,  4,  5,  6,  7,  9, 11, 13, 14, 15, 16, 18, 19, 20, 22, 23,\n       24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43,\n       44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-29')],\n           names=['jim', 'joe'])`, shape: `(83,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-25    1\n     2015-08-26    1\n     2015-08-28    1\n                  ..\ny    2015-08-30    1\n     2015-09-01    1\nz    2015-08-25    1\n     2015-08-26    1\n     2015-08-29    1\nName: julie, Length: 83, dtype: int64`, type: `Series`\n\n## Expected case 135\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      68.0\n1     484.0\n2     154.0\n3     253.0\n4     534.0\n      ...  \n95    165.0\n96    286.0\n97    996.0\n98    963.0\n99    363.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,\n        6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8,  9,  9, 10, 10, 11, 11,\n       11, 11, 11, 11, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 17,\n       17, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19, 20, 21, 21,\n       21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `25`, type: `int`\n\nval, expected value: `array([ 2.25000000e+02,  3.32000000e+02, ... ,  2.37000000e+02,  6.87000000e+02])`, shape: `(100,)`, type: `ndarray`\n\nsorter, expected value: `array([86, 35, 69, 18,  1, 52, 84, 58, 91, 10, 34, 56, 90, 28, 38, 99, 73,\n       88, 92, 98, 55, 20, 79, 57, 47, 89, 29,  6,  7, 72, 67, 97, 60, 63,\n       64, 30, 80, 11, 74, 59, 23, 44, 70, 87, 21,  4, 54, 27, 95,  0, 51,\n        2, 49, 43, 61, 94, 93, 71, 77, 26, 66, 46, 12, 83, 85, 24, 96,  9,\n       65, 50, 15, 41,  5, 32, 25, 37, 42, 39, 76, 16, 82, 75, 68, 31, 48,\n       14,  3, 22, 62, 36, 19, 17,  8, 53, 13, 33, 81, 45, 40, 78])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 6, 13, 20, 24, 28, 32, 34, 42, 43, 45, 47, 49, 55, 56, 59, 61, 63,\n       67, 75, 77, 82, 83, 86, 92, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 7, 7, 4, 4, 4, 2, 8, 1, 2, 2, 2, 6, 1, 3, 1, 2, 3, 7, 2, 5, 1,\n       3, 6, 5, 3])`, type: `ndarray`\n\nres, expected value: `array([7, 7, 4, 4, 4, 2, 8, 1, 2, 2, 2, 6, 1, 3, 1, 2, 3, 7, 2, 5, 1, 3,\n       6, 5, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    7\nb    7\nc    4\ne    4\nf    4\ng    2\nh    8\ni    1\nj    2\nk    2\nl    2\nm    6\nn    1\no    3\np    1\nq    2\nr    3\ns    7\nt    2\nu    5\nv    1\nw    3\nx    6\ny    5\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 136\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      136\n1      368\n2      150\n3      706\n4      709\n      ... \n995    554\n996    949\n997     68\n998    890\n999    268\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([ 21,  36,  89, 117, 119, ... , 782, 784, 790, 915, 953, 971])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([247, 341, 771, 248, 527, ... , 521, 806, 447, 125, 960, 876])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,  32,  70, 103, 137, 182, 224, 268, 305, 341, 377, 413, 455,\n       505, 544, 588, 623, 663, 698, 732, 782, 805, 840, 877, 911, 952])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([32, 37, 32, 34, 45, 42, 43, 37, 36, 35, 35, 40, 49, 39, 44, 34, 40,\n       35, 34, 50, 23, 35, 37, 33, 41, 48])`, type: `ndarray`\n\nres, expected value: `array([32, 37, 32, 34, 45, 42, 43, 37, 36, 35, 35, 40, 49, 39, 44, 34, 40,\n       35, 34, 50, 23, 35, 37, 33, 41, 48])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    32\nb    37\nc    32\nd    34\ne    45\nf    42\ng    43\nh    37\ni    36\nj    35\nk    35\nl    40\nm    49\nn    39\no    44\np    34\nq    40\nr    35\ns    34\nt    50\nu    23\nv    35\nw    37\nx    33\ny    41\nz    48\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 137\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      136\n1      368\n2      150\n3      706\n4      709\n      ... \n995    554\n996    949\n997     68\n998    890\n999    268\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   1,   1, ... , 255, 255, 256, 256, 256, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `257`, type: `int`\n\nval, expected value: `array([117, 841, 945, 165, 174, ... , 659, 736, 209, 315, 487, 489])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([248, 215, 200, 348, 189, ... , 474, 652, 330, 270, 970, 601])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([  0,   3,   5,   9,  13, ... , 976, 978, 983, 985, 992, 996])`, shape: `(257,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 3,  2,  4,  4,  7,  5,  3, ... ,  2,  5,  2,  7,\n        4,  4])`, shape: `(257,)`, type: `ndarray`\n\nres, expected value: `array([ 3,  2,  4,  4,  7,  5,  3, ... ,  2,  5,  2,  7,\n        4,  4])`, shape: `(257,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-24') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-24    3\n     2015-08-25    2\n     2015-08-26    4\n     2015-08-27    4\n     2015-08-28    7\n                  ..\nz    2015-08-28    5\n     2015-08-29    2\n     2015-08-30    7\n     2015-08-31    4\n     2015-09-01    4\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n## Expected case 138\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0      136.0\n1      368.0\n2      150.0\n3      706.0\n4      709.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    890.0\n999    268.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.53000000e+02,  9.71000000e+02])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, expected value: `0      1.360000e+02\n1      3.680000e+02\n2      1.500000e+02\n3      7.060000e+02\n4      7.090000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    8.900000e+02\n999    2.680000e+02\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 515, 146, 447, 125, 960, 876])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 59,  88, 124, 156, 185, 227, 267, 308, 344, 377, 410, 442, 483,\n       530, 565, 608, 642, 680, 712, 746, 796, 817, 852, 886, 918, 955])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([51, 25, 29, 28, 28, 37, 34, 33, 33, 29, 23, 29, 35, 41, 31, 36, 29,\n       33, 30, 30, 43, 18, 29, 32, 25, 32, 40])`, type: `ndarray`\n\nres, expected value: `array([25, 29, 28, 28, 37, 34, 33, 33, 29, 23, 29, 35, 41, 31, 36, 29, 33,\n       30, 30, 43, 18, 29, 32, 25, 32, 40])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    25\nb    29\nc    28\nd    28\ne    37\nf    34\ng    33\nh    33\ni    29\nj    23\nk    29\nl    35\nm    41\nn    31\no    36\np    29\nq    33\nr    30\ns    30\nt    43\nu    18\nv    29\nw    32\nx    25\ny    32\nz    40\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 139\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        91\n1       665\n2        69\n3       856\n4       137\n       ... \n9995    954\n9996    146\n9997    844\n9998    174\n9999    795\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([  4,   6,   8, ..., 996, 996, 997])`, type: `ndarray`\n\nsorter, expected value: `array([7715, 3596, 5213, ..., 4500, 6860, 6062])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,  390,  764, 1135, 1499, 1910, 2342, 2719, 3101, 3472, 3842,\n       4209, 4576, 4933, 5313, 5704, 6148, 6536, 6922, 7323, 7700, 8099,\n       8466, 8866, 9229, 9626])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([320, 321, 303, 300, 333, 342, 311, 321, 325, 310, 305, 308, 295,\n       317, 321, 368, 325, 331, 333, 311, 338, 313, 326, 310, 321, 328])`, type: `ndarray`\n\nres, expected value: `array([320, 321, 303, 300, 333, 342, 311, 321, 325, 310, 305, 308, 295,\n       317, 321, 368, 325, 331, 333, 311, 338, 313, 326, 310, 321, 328])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    320\nb    321\nc    303\nd    300\ne    333\nf    342\ng    311\nh    321\ni    325\nj    310\nk    305\nl    308\nm    295\nn    317\no    321\np    368\nq    325\nr    331\ns    333\nt    311\nu    338\nv    313\nw    326\nx    310\ny    321\nz    328\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 140\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        91\n1       665\n2        69\n3       856\n4       137\n       ... \n9995    954\n9996    146\n9997    844\n9998    174\n9999    795\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([ 10,  14,  71, ..., 768, 848, 863])`, type: `ndarray`\n\nsorter, expected value: `array([7139,  350, 1895, ..., 1768, 1670, 1335])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([   0,   34,   64,   99,  152, ... , 9808, 9847, 9896, 9940, 9970])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([34, 30, 34, 51, 30, 39, 49, ... , 42,\n       38, 49, 43, 30, 30])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([34, 30, 34, 51, 30, 39, 49, ... , 42,\n       38, 49, 43, 30, 30])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    34\n     2015-08-24    30\n     2015-08-25    34\n     2015-08-26    51\n     2015-08-27    30\n                   ..\nz    2015-08-28    38\n     2015-08-29    49\n     2015-08-30    43\n     2015-08-31    30\n     2015-09-01    30\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 141\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        91.0\n1       665.0\n2        69.0\n3       856.0\n4       137.0\n        ...  \n9995    954.0\n9996    146.0\n9997    844.0\n9998    174.0\n9999    795.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.96000000e+02,  9.96000000e+02,  9.97000000e+02])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 4500, 6860, 6062])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 589,  958, 1315, 1656, 1993, 2384, 2791, 3149, 3511, 3854, 4202,\n       4545, 4894, 5224, 5582, 5942, 6369, 6741, 7114, 7493, 7849, 8220,\n       8564, 8948, 9282, 9654])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([393, 273, 272, 240, 242, 281, 289, 260, 262, 267, 257, 254, 256,\n       230, 264, 262, 318, 266, 275, 264, 264, 265, 259, 265, 249, 262,\n       265])`, type: `ndarray`\n\nres, expected value: `array([273, 272, 240, 242, 281, 289, 260, 262, 267, 257, 254, 256, 230,\n       264, 262, 318, 266, 275, 264, 264, 265, 259, 265, 249, 262, 265])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    273\nb    272\nc    240\nd    242\ne    281\nf    289\ng    260\nh    262\ni    267\nj    257\nk    254\nl    256\nm    230\nn    264\no    262\np    318\nq    266\nr    275\ns    264\nt    264\nu    265\nv    259\nw    265\nx    249\ny    262\nz    265\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 142\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        182\n1        797\n2        407\n3        474\n4        874\n        ... \n99995    385\n99996    363\n99997    341\n99998    721\n99999    581\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([  0,   0,   1, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([62165, 65834,  8686, ..., 37889, 49796, 75120])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,  3865,  7709, 11538, 15399, 19227, 22996, 26841, 30628,\n       34485, 38361, 42277, 46274, 50150, 54059, 57836, 61652, 65401,\n       69344, 73218, 77046, 80859, 84645, 88518, 92395, 96154])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([972, 983, 979, 975, 977, 976, 987, 975, 973, 981, 981, 987, 982,\n       984, 967, 973, 976, 975, 980, 971, 982, 982, 981, 981, 970, 983])`, type: `ndarray`\n\nres, expected value: `array([972, 983, 979, 975, 977, 976, 987, 975, 973, 981, 981, 987, 982,\n       984, 967, 973, 976, 975, 980, 971, 982, 982, 981, 981, 970, 983])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    972\nb    983\nc    979\nd    975\ne    977\nf    976\ng    987\nh    975\ni    973\nj    981\nk    981\nl    987\nm    982\nn    984\no    967\np    973\nq    976\nr    975\ns    980\nt    971\nu    982\nv    982\nw    981\nx    981\ny    970\nz    983\nName: julie, dtype: int64`, type: `Series`\n\n## Expected case 143\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        182\n1        797\n2        407\n3        474\n4        874\n        ... \n99995    385\n99996    363\n99997    341\n99998    721\n99999    581\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `260`, type: `int`\n\nval, expected value: `array([  1,   2,   3, ..., 992, 992, 994])`, type: `ndarray`\n\nsorter, expected value: `array([15949, 76276, 68601, ..., 39010, 41218, 53465])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nidx, expected value: `array([    0,   381,   784,  1173, ... , 98026, 98403, 98819, 99195, 99613])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([316, 333, 320, 314, 308, ... , 349, 313, 343, 299, 335, 315])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([316, 333, 320, 314, 308, ... , 349, 313, 343, 299, 335, 315])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    316\n     2015-08-24    333\n     2015-08-25    320\n     2015-08-26    314\n     2015-08-27    308\n                  ... \nz    2015-08-28    313\n     2015-08-29    343\n     2015-08-30    299\n     2015-08-31    335\n     2015-09-01    315\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n## Expected case 144\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.obj, value: `0        182.0\n1        797.0\n2        407.0\n3        474.0\n4        874.0\n         ...  \n99995    385.0\n99996    363.0\n99997    341.0\n99998    721.0\n99999    581.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `26`, type: `int`\n\nval, expected value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 37889, 49796, 75120])`, type: `ndarray`\n\nval.dtype, expected value: `dtype('float64')`, type: `dtype`\n\nidx, expected value: `array([ 5883,  9509, 13137, 16735, 20380, 23984, 27524, 31168, 34729,\n       38379, 42038, 45739, 49499, 53153, 56832, 60386, 64002, 67494,\n       71198, 74830, 78449, 82010, 85566, 89213, 92857, 96383])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([995, 943, 960, 954, 952, 954, 948, 957, 955, 955, 958, 961, 960,\n       962, 957, 938, 945, 940, 954, 961, 943, 956, 957, 956, 958, 944,\n       955])`, type: `ndarray`\n\nres, expected value: `array([943, 960, 954, 952, 954, 948, 957, 955, 955, 958, 961, 960, 962,\n       957, 938, 945, 940, 954, 961, 943, 956, 957, 956, 958, 944, 955])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    943\nb    960\nc    954\nd    952\ne    954\nf    948\ng    957\nh    955\ni    955\nj    958\nk    961\nl    960\nm    962\nn    957\no    938\np    945\nq    940\nr    954\ns    961\nt    943\nu    956\nv    957\nw    956\nx    958\ny    944\nz    955\nName: julie, dtype: int64`, type: `Series`\n\n",
    "8": "# A GitHub issue for this bug\n\nThe issue's title:\n```text\nBUG: groupby-nunique modifies null values\n```\n\nThe issue's detailed description:\n```text\nCode Sample, a copy-pastable example if possible\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({\"GROUP\": 0, \"VALUE\": [1.0, np.nan]})\ndf.groupby(\"GROUP\")[\"VALUE\"].nunique()\nprint(df)\nProblem description\nOriginal dataframe is modified:\n\n   GROUP         VALUE\n0      0  1.000000e+00\n1      0 -9.223372e+18\nIssue seems to have been introduced in version 1.0.0, 0.25.3 works as expected.\n\nExpected Output\nOriginal dataframe should not be modified.\n```\n\n",
    "9": "Your output should follow these steps:\n1. Analyze the buggy function and its relationship with the buggy class, related functions, test code, corresponding error message, the actual input/output variable information, the expected input/output variable information, the github issue.\n2. Identify a potential error location within the buggy function.\n3. Elucidate the bug's cause using:\n   (a) The buggy function, \n   (b) The buggy class docs, \n   (c) The related functions, \n   (d) The failing test, \n   (e) The corresponding error message, \n   (f) The actual input/output variable values, \n   (g) The expected input/output variable values, \n   (h) The GitHub Issue information\n\n4. Suggest approaches for fixing the bug.\n5. Present the corrected code for the buggy function such that it satisfied the following:\n   (a) the program passes the failing test, \n   (b) the function satisfies the expected input/output variable information provided, \n   (c) successfully resolves the issue posted in GitHub\n\n",
    "1.3.3": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nimport numpy as np\nfrom pandas.core.dtypes.missing import _isna_ndarraylike, isna, notna\nimport pandas.core.algorithms as algorithms\nfrom pandas.core.series import Series\n```\n\n",
    "source_code_body": "# This function from the same file, but not the same class, is called by the buggy function\ndef _selection_name(self):\n    # Please ignore the body of this function\n\n# The declaration of the class containing the buggy function\n@pin_whitelisted_properties(Series, base.series_apply_whitelist)\nclass SeriesGroupBy(GroupBy):\n\n\n\n    # This function from the same class is called by the buggy function\n    def _selection_name(self):\n        # Please ignore the body of this function\n\n\n\n    # this is the buggy function you need to fix\n    def nunique(self, dropna: bool = True) -> Series:\n        \"\"\"\n        Return number of unique elements in the group.\n    \n        Returns\n        -------\n        Series\n            Number of unique values within each group.\n        \"\"\"\n        ids, _, _ = self.grouper.group_info\n    \n        val = self.obj._internal_get_values()\n    \n        # GH 27951\n        # temporary fix while we wait for NumPy bug 12629 to be fixed\n        val[isna(val)] = np.datetime64(\"NaT\")\n    \n        try:\n            sorter = np.lexsort((val, ids))\n        except TypeError:  # catches object dtypes\n            msg = f\"val.dtype must be object, got {val.dtype}\"\n            assert val.dtype == object, msg\n            val, _ = algorithms.factorize(val, sort=False)\n            sorter = np.lexsort((val, ids))\n            _isna = lambda a: a == -1\n        else:\n            _isna = isna\n    \n        ids, val = ids[sorter], val[sorter]\n    \n        # group boundaries are where group ids change\n        # unique observations are where sorted values change\n        idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n        inc = np.r_[1, val[1:] != val[:-1]]\n    \n        # 1st item of each group is a new unique observation\n        mask = _isna(val)\n        if dropna:\n            inc[idx] = 1\n            inc[mask] = 0\n        else:\n            inc[mask & np.r_[False, mask[:-1]]] = 0\n            inc[idx] = 1\n    \n        out = np.add.reduceat(inc, idx).astype(\"int64\", copy=False)\n        if len(ids):\n            # NaN/NaT group exists if the head of ids is -1,\n            # so remove it from res and exclude its index from idx\n            if ids[0] == -1:\n                res = out[1:]\n                idx = idx[np.flatnonzero(idx)]\n            else:\n                res = out\n        else:\n            res = out[1:]\n        ri = self.grouper.result_index\n    \n        # we might have duplications among the bins\n        if len(res) != len(ri):\n            res, out = np.zeros(len(ri), dtype=out.dtype), res\n            res[ids[idx]] = out\n    \n        result = Series(res, index=ri, name=self._selection_name)\n        return self._reindex_output(result, fill_value=0)\n    \n"
}