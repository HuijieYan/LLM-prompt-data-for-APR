{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nimport numpy as np\nfrom pandas.core.dtypes.missing import _isna_ndarraylike, isna, notna\nimport pandas.core.algorithms as algorithms\nfrom pandas.core.series import Series\n```\n\n## The source code of the buggy function\n```python\n# The relative path of the buggy file: pandas/core/groupby/generic.py\n\n\n\n    # this is the buggy function you need to fix\n    def nunique(self, dropna: bool = True) -> Series:\n        \"\"\"\n        Return number of unique elements in the group.\n    \n        Returns\n        -------\n        Series\n            Number of unique values within each group.\n        \"\"\"\n        ids, _, _ = self.grouper.group_info\n    \n        val = self.obj._internal_get_values()\n    \n        # GH 27951\n        # temporary fix while we wait for NumPy bug 12629 to be fixed\n        val[isna(val)] = np.datetime64(\"NaT\")\n    \n        try:\n            sorter = np.lexsort((val, ids))\n        except TypeError:  # catches object dtypes\n            msg = f\"val.dtype must be object, got {val.dtype}\"\n            assert val.dtype == object, msg\n            val, _ = algorithms.factorize(val, sort=False)\n            sorter = np.lexsort((val, ids))\n            _isna = lambda a: a == -1\n        else:\n            _isna = isna\n    \n        ids, val = ids[sorter], val[sorter]\n    \n        # group boundaries are where group ids change\n        # unique observations are where sorted values change\n        idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n        inc = np.r_[1, val[1:] != val[:-1]]\n    \n        # 1st item of each group is a new unique observation\n        mask = _isna(val)\n        if dropna:\n            inc[idx] = 1\n            inc[mask] = 0\n        else:\n            inc[mask & np.r_[False, mask[:-1]]] = 0\n            inc[idx] = 1\n    \n        out = np.add.reduceat(inc, idx).astype(\"int64\", copy=False)\n        if len(ids):\n            # NaN/NaT group exists if the head of ids is -1,\n            # so remove it from res and exclude its index from idx\n            if ids[0] == -1:\n                res = out[1:]\n                idx = idx[np.flatnonzero(idx)]\n            else:\n                res = out\n        else:\n            res = out[1:]\n        ri = self.grouper.result_index\n    \n        # we might have duplications among the bins\n        if len(res) != len(ri):\n            res, out = np.zeros(len(ri), dtype=out.dtype), res\n            res[ids[idx]] = out\n    \n        result = Series(res, index=ri, name=self._selection_name)\n        return self._reindex_output(result, fill_value=0)\n    \n```",
    "2": "# The declaration of the class containing the buggy function\n@pin_whitelisted_properties(Series, base.series_apply_whitelist)\nclass SeriesGroupBy(GroupBy):\n\n\n\n",
    "3": "    # This function from the same class is called by the buggy function\n    def _selection_name(self):\n        # Please ignore the body of this function\n\n",
    "4": "## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: pandas/tests/groupby/test_function.py\n\n@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)\n```\n\n\n",
    "5": "### The error message from the failing test\n```text\nn = 100, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [1.0, 7.0, 9.0, 9.0, 7.0, 1.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 2.0, 3.0, 5.0, 1.0, 8.0, 8.0, 9.0, 6.0, 3.0, 6.0, 7.0, 1.0, 7.0, 5.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 5.0, 3.0, 2.0, 5.0, 5.0, 9.0, 3.0, 9.0, 7.0, 8.0, 8.0, 0.0, 3.0, 4.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 7.0, 2.0, 9.0, 7.0, 2.0, 7.0, 8.0, 3.0, 8.0, 6.0, 8.0, 4.0, 7.0, 2.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 8.0, 6.0, 4.0, 4.0, 1.0, 1.0, 8.0, 8.0, 2.0, 8.0, 8.0, 6.0, 8.0, 2.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 6.0, 2.0, 1.0, 3.0, 4.0, 2.0, 9.0, 8.0, 8.0, 6.0, 1.0, 5.0, 5.0]\nE   [right]: [1.0, 7.0, 9.0, 9.0, 7.0, 1.0, 0.0, nan, nan, nan, 2.0, 2.0, 3.0, 5.0, 1.0, 8.0, 8.0, 9.0, 6.0, 3.0, 6.0, 7.0, 1.0, 7.0, 5.0, 5.0, nan, nan, nan, 0.0, 5.0, 3.0, 2.0, 5.0, 5.0, 9.0, 3.0, 9.0, 7.0, 8.0, 8.0, 0.0, 3.0, 4.0, 1.0, nan, nan, nan, 8.0, 7.0, 2.0, 9.0, 7.0, 2.0, 7.0, 8.0, 3.0, 8.0, 6.0, 8.0, 4.0, 7.0, 2.0, 4.0, nan, nan, nan, 3.0, 8.0, 6.0, 4.0, 4.0, 1.0, 1.0, 8.0, 8.0, 2.0, 8.0, 8.0, 6.0, 8.0, 2.0, 5.0, nan, nan, nan, 3.0, 6.0, 2.0, 1.0, 3.0, 4.0, 2.0, 9.0, 8.0, 8.0, 6.0, 1.0, 5.0, 5.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [9.0, 4.0, 5.0, 5.0, 6.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 6.0, 7.0, 9.0, 4.0, 9.0, 3.0, 7.0, 6.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 3.0, 7.0, 7.0, 4.0, 2.0, 3.0, 8.0, 4.0, 9.0, 9.0, 1.0, 8.0, 6.0, 4.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 9.0, 1.0, 9.0, 6.0, 9.0, 4.0, 8.0, 3.0, 5.0, 2.0, 0.0, 0.0, 0.0, 5.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 9.0, 1.0, 3.0, 4.0, 7.0, 9.0, 6.0, 0.0, 8.0, 1.0, 1.0, 9.0, 4.0, 3.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 9.0, 8.0, 0.0, 5.0, 6.0, 9.0, 4.0, 6.0, 2.0, 0.0, 7.0, 4.0, 8.0, ...]\nE   [right]: [9.0, 4.0, 5.0, 5.0, 6.0, 0.0, 3.0, nan, nan, nan, 5.0, 6.0, 7.0, 9.0, 4.0, 9.0, 3.0, 7.0, 6.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 9.0, nan, nan, nan, 9.0, 3.0, 7.0, 7.0, 4.0, 2.0, 3.0, 8.0, 4.0, 9.0, 9.0, 1.0, 8.0, 6.0, 4.0, 3.0, nan, nan, nan, 9.0, 9.0, 1.0, 9.0, 6.0, 9.0, 4.0, 8.0, 3.0, 5.0, 2.0, 0.0, 0.0, 0.0, 5.0, 0.0, nan, nan, nan, 2.0, 9.0, 1.0, 3.0, 4.0, 7.0, 9.0, 6.0, 0.0, 8.0, 1.0, 1.0, 9.0, 4.0, 3.0, 2.0, nan, nan, nan, 0.0, 9.0, 8.0, 0.0, 5.0, 6.0, 9.0, 4.0, 6.0, 2.0, 0.0, 7.0, 4.0, 8.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [4.0, 8.0, 0.0, 1.0, 2.0, 8.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 4.0, 5.0, 4.0, 4.0, 5.0, 0.0, 8.0, 0.0, 9.0, 9.0, 2.0, 9.0, 7.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 0.0, 3.0, 6.0, 5.0, 8.0, 4.0, 6.0, 2.0, 3.0, 5.0, 2.0, 2.0, 4.0, 7.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 6.0, 3.0, 0.0, 5.0, 5.0, 0.0, 7.0, 1.0, 9.0, 8.0, 8.0, 3.0, 1.0, 7.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 3.0, 8.0, 7.0, 2.0, 5.0, 4.0, 9.0, 0.0, 3.0, 0.0, 2.0, 4.0, 6.0, 7.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 5.0, 8.0, 9.0, 3.0, 6.0, 4.0, 9.0, 3.0, 8.0, 6.0, 1.0, 1.0, 1.0, ...]\nE   [right]: [4.0, 8.0, 0.0, 1.0, 2.0, 8.0, 5.0, nan, nan, nan, 1.0, 4.0, 5.0, 4.0, 4.0, 5.0, 0.0, 8.0, 0.0, 9.0, 9.0, 2.0, 9.0, 7.0, 7.0, 0.0, nan, nan, nan, 0.0, 0.0, 3.0, 6.0, 5.0, 8.0, 4.0, 6.0, 2.0, 3.0, 5.0, 2.0, 2.0, 4.0, 7.0, 3.0, nan, nan, nan, 1.0, 6.0, 3.0, 0.0, 5.0, 5.0, 0.0, 7.0, 1.0, 9.0, 8.0, 8.0, 3.0, 1.0, 7.0, 2.0, nan, nan, nan, 9.0, 3.0, 8.0, 7.0, 2.0, 5.0, 4.0, 9.0, 0.0, 3.0, 0.0, 2.0, 4.0, 6.0, 7.0, 1.0, nan, nan, nan, 9.0, 5.0, 8.0, 9.0, 3.0, 6.0, 4.0, 9.0, 3.0, 8.0, 6.0, 1.0, 1.0, 1.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [8.0, 3.0, 8.0, 5.0, 6.0, 8.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 8.0, 0.0, 2.0, 9.0, 7.0, 5.0, 1.0, 3.0, 1.0, 6.0, 1.0, 1.0, 3.0, 9.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 8.0, 6.0, 8.0, 3.0, 9.0, 4.0, 9.0, 6.0, 9.0, 4.0, 1.0, 2.0, 1.0, 9.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 3.0, 6.0, 7.0, 5.0, 3.0, 7.0, 8.0, 8.0, 5.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 6.0, 1.0, 7.0, 6.0, 7.0, 1.0, 8.0, 4.0, 6.0, 0.0, 7.0, 1.0, 7.0, 9.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 6.0, 1.0, 2.0, 0.0, 9.0, 2.0, 0.0, 2.0, 8.0, 7.0, 7.0, 7.0, 9.0, ...]\nE   [right]: [8.0, 3.0, 8.0, 5.0, 6.0, 8.0, 3.0, nan, nan, nan, 1.0, 8.0, 0.0, 2.0, 9.0, 7.0, 5.0, 1.0, 3.0, 1.0, 6.0, 1.0, 1.0, 3.0, 9.0, 5.0, nan, nan, nan, 6.0, 8.0, 6.0, 8.0, 3.0, 9.0, 4.0, 9.0, 6.0, 9.0, 4.0, 1.0, 2.0, 1.0, 9.0, 5.0, nan, nan, nan, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 3.0, 6.0, 7.0, 5.0, 3.0, 7.0, 8.0, 8.0, 5.0, 6.0, nan, nan, nan, 9.0, 6.0, 1.0, 7.0, 6.0, 7.0, 1.0, 8.0, 4.0, 6.0, 0.0, 7.0, 1.0, 7.0, 9.0, 9.0, nan, nan, nan, 7.0, 6.0, 1.0, 2.0, 0.0, 9.0, 2.0, 0.0, 2.0, 8.0, 7.0, 7.0, 7.0, 9.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [5.0, 32.0, 87.0, 35.0, 74.0, 93.0, 23.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 13.0, 86.0, 16.0, 21.0, 79.0, 23.0, 38.0, 69.0, 46.0, 31.0, 25.0, 52.0, 68.0, 44.0, 84.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 27.0, 88.0, 27.0, 81.0, 20.0, 36.0, 24.0, 32.0, 37.0, 94.0, 45.0, 16.0, 31.0, 2.0, 84.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 98.0, 97.0, 50.0, 24.0, 15.0, 21.0, 35.0, 88.0, 73.0, 70.0, 40.0, 84.0, 81.0, 76.0, 75.0, 80.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 77.0, 65.0, 83.0, 92.0, 76.0, 53.0, 93.0, 54.0, 43.0, 45.0, 97.0, 66.0, 30.0, 42.0, 36.0, 86.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 58.0, 11.0, 54.0, 24.0, 1.0, 64.0, 15.0, 51.0, 21.0, 46.0, 20.0, 23.0, 90.0, 93.0]\nE   [right]: [5.0, 32.0, 87.0, 35.0, 74.0, 93.0, 23.0, nan, nan, nan, 25.0, 13.0, 86.0, 16.0, 21.0, 79.0, 23.0, 38.0, 69.0, 46.0, 31.0, 25.0, 52.0, 68.0, 44.0, 84.0, nan, nan, nan, 6.0, 27.0, 88.0, 27.0, 81.0, 20.0, 36.0, 24.0, 32.0, 37.0, 94.0, 45.0, 16.0, 31.0, 2.0, 84.0, nan, nan, nan, 98.0, 97.0, 50.0, 24.0, 15.0, 21.0, 35.0, 88.0, 73.0, 70.0, 40.0, 84.0, 81.0, 76.0, 75.0, 80.0, nan, nan, nan, 77.0, 65.0, 83.0, 92.0, 76.0, 53.0, 93.0, 54.0, 43.0, 45.0, 97.0, 66.0, 30.0, 42.0, 36.0, 86.0, nan, nan, nan, 58.0, 11.0, 54.0, 24.0, 1.0, 64.0, 15.0, 51.0, 21.0, 46.0, 20.0, 23.0, 90.0, 93.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [17.0, 96.0, 36.0, 91.0, 88.0, 30.0, 87.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 59.0, 47.0, 17.0, 82.0, 28.0, 98.0, 0.0, 53.0, 51.0, 2.0, 62.0, 57.0, 6.0, 87.0, 25.0, 54.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 51.0, 82.0, 16.0, 56.0, 30.0, 54.0, 89.0, 63.0, 11.0, 97.0, 33.0, 1.0, 68.0, 65.0, 23.0, 71.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 29.0, 70.0, 29.0, 22.0, 18.0, 79.0, 66.0, 71.0, 40.0, 53.0, 94.0, 26.0, 38.0, 19.0, 99.0, 88.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 91.0, 38.0, 70.0, 31.0, 92.0, 55.0, 76.0, 32.0, 77.0, 45.0, 63.0, 42.0, 18.0, 28.0, 2.0, 67.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 39.0, 55.0, 9.0, 32.0, 78.0, 1.0, 14.0, 21.0, 49.0, 7.0, 98.0, 39.0, 12.0, 42.0, ...]\nE   [right]: [17.0, 96.0, 36.0, 91.0, 88.0, 30.0, 87.0, nan, nan, nan, 59.0, 47.0, 17.0, 82.0, 28.0, 98.0, 0.0, 53.0, 51.0, 2.0, 62.0, 57.0, 6.0, 87.0, 25.0, 54.0, nan, nan, nan, 51.0, 82.0, 16.0, 56.0, 30.0, 54.0, 89.0, 63.0, 11.0, 97.0, 33.0, 1.0, 68.0, 65.0, 23.0, 71.0, nan, nan, nan, 29.0, 70.0, 29.0, 22.0, 18.0, 79.0, 66.0, 71.0, 40.0, 53.0, 94.0, 26.0, 38.0, 19.0, 99.0, 88.0, nan, nan, nan, 91.0, 38.0, 70.0, 31.0, 92.0, 55.0, 76.0, 32.0, 77.0, 45.0, 63.0, 42.0, 18.0, 28.0, 2.0, 67.0, nan, nan, nan, 39.0, 55.0, 9.0, 32.0, 78.0, 1.0, 14.0, 21.0, 49.0, 7.0, 98.0, 39.0, 12.0, 42.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [11.0, 71.0, 1.0, 96.0, 5.0, 53.0, 71.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 46.0, 90.0, 1.0, 8.0, 2.0, 80.0, 77.0, 97.0, 40.0, 47.0, 68.0, 31.0, 35.0, 34.0, 26.0, 47.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 64.0, 49.0, 2.0, 71.0, 16.0, 40.0, 61.0, 61.0, 93.0, 69.0, 66.0, 6.0, 76.0, 27.0, 79.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 57.0, 44.0, 15.0, 27.0, 27.0, 15.0, 2.0, 94.0, 55.0, 31.0, 82.0, 20.0, 50.0, 26.0, 44.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 57.0, 79.0, 85.0, 31.0, 52.0, 11.0, 51.0, 63.0, 88.0, 93.0, 18.0, 98.0, 20.0, 82.0, 57.0, 12.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 68.0, 87.0, 7.0, 66.0, 73.0, 34.0, 12.0, 83.0, 2.0, 78.0, 38.0, 24.0, 86.0, ...]\nE   [right]: [11.0, 71.0, 1.0, 96.0, 5.0, 53.0, 71.0, nan, nan, nan, 46.0, 90.0, 1.0, 8.0, 2.0, 80.0, 77.0, 97.0, 40.0, 47.0, 68.0, 31.0, 35.0, 34.0, 26.0, 47.0, nan, nan, nan, 64.0, 49.0, 2.0, 71.0, 16.0, 40.0, 61.0, 61.0, 93.0, 69.0, 66.0, 6.0, 76.0, 27.0, 79.0, 8.0, nan, nan, nan, 7.0, 57.0, 44.0, 15.0, 27.0, 27.0, 15.0, 2.0, 94.0, 55.0, 31.0, 82.0, 20.0, 50.0, 26.0, 44.0, nan, nan, nan, 57.0, 79.0, 85.0, 31.0, 52.0, 11.0, 51.0, 63.0, 88.0, 93.0, 18.0, 98.0, 20.0, 82.0, 57.0, 12.0, nan, nan, nan, 5.0, 68.0, 87.0, 7.0, 66.0, 73.0, 34.0, 12.0, 83.0, 2.0, 78.0, 38.0, 24.0, 86.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [8.0, 40.0, 41.0, 49.0, 17.0, 90.0, 91.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 52.0, 90.0, 34.0, 75.0, 17.0, 47.0, 79.0, 70.0, 1.0, 58.0, 44.0, 68.0, 10.0, 59.0, 8.0, 58.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 28.0, 64.0, 99.0, 36.0, 26.0, 34.0, 55.0, 65.0, 73.0, 94.0, 48.0, 85.0, 75.0, 78.0, 77.0, 48.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 41.0, 63.0, 97.0, 49.0, 82.0, 75.0, 31.0, 19.0, 39.0, 76.0, 92.0, 48.0, 24.0, 47.0, 42.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 85.0, 65.0, 97.0, 7.0, 93.0, 53.0, 32.0, 44.0, 40.0, 45.0, 47.0, 24.0, 97.0, 20.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 85.0, 34.0, 41.0, 54.0, 93.0, 0.0, 81.0, 71.0, 41.0, 39.0, 72.0, 41.0, 47.0, 75.0, ...]\nE   [right]: [8.0, 40.0, 41.0, 49.0, 17.0, 90.0, 91.0, nan, nan, nan, 52.0, 90.0, 34.0, 75.0, 17.0, 47.0, 79.0, 70.0, 1.0, 58.0, 44.0, 68.0, 10.0, 59.0, 8.0, 58.0, nan, nan, nan, 28.0, 64.0, 99.0, 36.0, 26.0, 34.0, 55.0, 65.0, 73.0, 94.0, 48.0, 85.0, 75.0, 78.0, 77.0, 48.0, nan, nan, nan, 44.0, 41.0, 63.0, 97.0, 49.0, 82.0, 75.0, 31.0, 19.0, 39.0, 76.0, 92.0, 48.0, 24.0, 47.0, 42.0, nan, nan, nan, 4.0, 85.0, 65.0, 97.0, 7.0, 93.0, 53.0, 32.0, 44.0, 40.0, 45.0, 47.0, 24.0, 97.0, 20.0, 5.0, nan, nan, nan, 85.0, 34.0, 41.0, 54.0, 93.0, 0.0, 81.0, 71.0, 41.0, 39.0, 72.0, 41.0, 47.0, 75.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [64.0, 780.0, 874.0, 975.0, 350.0, 539.0, 993.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 850.0, 528.0, 340.0, 85.0, 543.0, 789.0, 511.0, 545.0, 190.0, 523.0, 196.0, 356.0, 299.0, 499.0, 117.0, 577.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 159.0, 210.0, 720.0, 808.0, 88.0, 490.0, 762.0, 282.0, 828.0, 161.0, 702.0, 348.0, 605.0, 257.0, 244.0, 122.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 720.0, 950.0, 787.0, 400.0, 803.0, 46.0, 73.0, 782.0, 131.0, 930.0, 282.0, 774.0, 934.0, 732.0, 895.0, 834.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 65.0, 734.0, 6.0, 428.0, 898.0, 542.0, 588.0, 596.0, 100.0, 894.0, 402.0, 219.0, 201.0, 349.0, 186.0, 240.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 503.0, 996.0, 222.0, 456.0, 198.0, 478.0, 126.0, 896.0, 712.0, 739.0, 259.0, 578.0, 899.0, 573.0]\nE   [right]: [64.0, 780.0, 874.0, 975.0, 350.0, 539.0, 993.0, nan, nan, nan, 850.0, 528.0, 340.0, 85.0, 543.0, 789.0, 511.0, 545.0, 190.0, 523.0, 196.0, 356.0, 299.0, 499.0, 117.0, 577.0, nan, nan, nan, 159.0, 210.0, 720.0, 808.0, 88.0, 490.0, 762.0, 282.0, 828.0, 161.0, 702.0, 348.0, 605.0, 257.0, 244.0, 122.0, nan, nan, nan, 720.0, 950.0, 787.0, 400.0, 803.0, 46.0, 73.0, 782.0, 131.0, 930.0, 282.0, 774.0, 934.0, 732.0, 895.0, 834.0, nan, nan, nan, 65.0, 734.0, 6.0, 428.0, 898.0, 542.0, 588.0, 596.0, 100.0, 894.0, 402.0, 219.0, 201.0, 349.0, 186.0, 240.0, nan, nan, nan, 503.0, 996.0, 222.0, 456.0, 198.0, 478.0, 126.0, 896.0, 712.0, 739.0, 259.0, 578.0, 899.0, 573.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [835.0, 356.0, 105.0, 330.0, 433.0, 754.0, 711.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 965.0, 882.0, 929.0, 778.0, 42.0, 78.0, 14.0, 99.0, 186.0, 266.0, 717.0, 13.0, 241.0, 531.0, 396.0, 740.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 379.0, 670.0, 754.0, 722.0, 960.0, 451.0, 345.0, 903.0, 517.0, 362.0, 691.0, 395.0, 394.0, 141.0, 194.0, 928.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 961.0, 424.0, 616.0, 393.0, 254.0, 278.0, 97.0, 149.0, 845.0, 311.0, 789.0, 728.0, 172.0, 29.0, 669.0, 509.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 405.0, 428.0, 56.0, 749.0, 830.0, 176.0, 344.0, 525.0, 351.0, 442.0, 885.0, 901.0, 2.0, 955.0, 985.0, 247.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 243.0, 671.0, 98.0, 286.0, 727.0, 251.0, 843.0, 63.0, 967.0, 391.0, 491.0, 210.0, 658.0, 982.0, ...]\nE   [right]: [835.0, 356.0, 105.0, 330.0, 433.0, 754.0, 711.0, nan, nan, nan, 965.0, 882.0, 929.0, 778.0, 42.0, 78.0, 14.0, 99.0, 186.0, 266.0, 717.0, 13.0, 241.0, 531.0, 396.0, 740.0, nan, nan, nan, 379.0, 670.0, 754.0, 722.0, 960.0, 451.0, 345.0, 903.0, 517.0, 362.0, 691.0, 395.0, 394.0, 141.0, 194.0, 928.0, nan, nan, nan, 961.0, 424.0, 616.0, 393.0, 254.0, 278.0, 97.0, 149.0, 845.0, 311.0, 789.0, 728.0, 172.0, 29.0, 669.0, 509.0, nan, nan, nan, 405.0, 428.0, 56.0, 749.0, 830.0, 176.0, 344.0, 525.0, 351.0, 442.0, 885.0, 901.0, 2.0, 955.0, 985.0, 247.0, nan, nan, nan, 243.0, 671.0, 98.0, 286.0, 727.0, 251.0, 843.0, 63.0, 967.0, 391.0, 491.0, 210.0, 658.0, 982.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [214.0, 362.0, 155.0, 710.0, 624.0, 784.0, 698.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 14.0, 51.0, 61.0, 843.0, 243.0, 855.0, 798.0, 982.0, 397.0, 689.0, 309.0, 882.0, 668.0, 947.0, 462.0, 611.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 740.0, 773.0, 75.0, 655.0, 713.0, 496.0, 424.0, 844.0, 780.0, 410.0, 818.0, 796.0, 867.0, 89.0, 298.0, 375.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 687.0, 565.0, 747.0, 43.0, 750.0, 972.0, 730.0, 23.0, 103.0, 415.0, 746.0, 62.0, 373.0, 306.0, 573.0, 239.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 869.0, 575.0, 760.0, 620.0, 444.0, 269.0, 421.0, 463.0, 816.0, 29.0, 455.0, 882.0, 202.0, 168.0, 229.0, 469.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 706.0, 161.0, 495.0, 674.0, 775.0, 262.0, 634.0, 328.0, 537.0, 717.0, 264.0, 152.0, 870.0, 273.0, ...]\nE   [right]: [214.0, 362.0, 155.0, 710.0, 624.0, 784.0, 698.0, nan, nan, nan, 14.0, 51.0, 61.0, 843.0, 243.0, 855.0, 798.0, 982.0, 397.0, 689.0, 309.0, 882.0, 668.0, 947.0, 462.0, 611.0, nan, nan, nan, 740.0, 773.0, 75.0, 655.0, 713.0, 496.0, 424.0, 844.0, 780.0, 410.0, 818.0, 796.0, 867.0, 89.0, 298.0, 375.0, nan, nan, nan, 687.0, 565.0, 747.0, 43.0, 750.0, 972.0, 730.0, 23.0, 103.0, 415.0, 746.0, 62.0, 373.0, 306.0, 573.0, 239.0, nan, nan, nan, 869.0, 575.0, 760.0, 620.0, 444.0, 269.0, 421.0, 463.0, 816.0, 29.0, 455.0, 882.0, 202.0, 168.0, 229.0, 469.0, nan, nan, nan, 706.0, 161.0, 495.0, 674.0, 775.0, 262.0, 634.0, 328.0, 537.0, 717.0, 264.0, 152.0, 870.0, 273.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [768.0, 640.0, 415.0, 943.0, 961.0, 764.0, 716.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 416.0, 630.0, 224.0, 205.0, 706.0, 815.0, 252.0, 208.0, 778.0, 964.0, 197.0, 113.0, 89.0, 746.0, 902.0, 215.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 136.0, 430.0, 818.0, 63.0, 921.0, 890.0, 358.0, 379.0, 926.0, 278.0, 98.0, 646.0, 910.0, 369.0, 971.0, 164.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 205.0, 100.0, 15.0, 982.0, 387.0, 981.0, 135.0, 787.0, 916.0, 869.0, 896.0, 850.0, 19.0, 679.0, 339.0, 406.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 633.0, 398.0, 618.0, 420.0, 559.0, 61.0, 38.0, 0.0, 322.0, 194.0, 84.0, 23.0, 654.0, 831.0, 672.0, 941.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 454.0, 229.0, 538.0, 403.0, 214.0, 15.0, 60.0, 836.0, 971.0, 507.0, 661.0, 51.0, 706.0, 358.0, ...]\nE   [right]: [768.0, 640.0, 415.0, 943.0, 961.0, 764.0, 716.0, nan, nan, nan, 416.0, 630.0, 224.0, 205.0, 706.0, 815.0, 252.0, 208.0, 778.0, 964.0, 197.0, 113.0, 89.0, 746.0, 902.0, 215.0, nan, nan, nan, 136.0, 430.0, 818.0, 63.0, 921.0, 890.0, 358.0, 379.0, 926.0, 278.0, 98.0, 646.0, 910.0, 369.0, 971.0, 164.0, nan, nan, nan, 205.0, 100.0, 15.0, 982.0, 387.0, 981.0, 135.0, 787.0, 916.0, 869.0, 896.0, 850.0, 19.0, 679.0, 339.0, 406.0, nan, nan, nan, 633.0, 398.0, 618.0, 420.0, 559.0, 61.0, 38.0, 0.0, 322.0, 194.0, 84.0, 23.0, 654.0, 831.0, 672.0, 941.0, nan, nan, nan, 454.0, 229.0, 538.0, 403.0, 214.0, 15.0, 60.0, 836.0, 971.0, 507.0, 661.0, 51.0, 706.0, 358.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [0.0, 1.0, 4.0, 1.0, 6.0, 5.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 8.0, 7.0, 2.0, 2.0, 0.0, 1.0, 0.0, 3.0, 8.0, 1.0, 0.0, 0.0, 6.0, 0.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 8.0, 2.0, 7.0, 7.0, 4.0, 8.0, 2.0, 9.0, 9.0, 3.0, 0.0, 7.0, 1.0, 1.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 5.0, 6.0, 2.0, 3.0, 2.0, 2.0, 4.0, 7.0, 8.0, 9.0, 5.0, 6.0, 8.0, 8.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 5.0, 4.0, 5.0, 9.0, 6.0, 7.0, 6.0, 6.0, 5.0, 4.0, 5.0, 7.0, 3.0, 4.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 7.0, 6.0, 5.0, 5.0, 5.0, 7.0, 3.0, 2.0, 1.0, 0.0, 9.0, 8.0, 2.0]\nE   [right]: [0.0, 1.0, 4.0, 1.0, 6.0, 5.0, 9.0, nan, nan, nan, 5.0, 8.0, 7.0, 2.0, 2.0, 0.0, 1.0, 0.0, 3.0, 8.0, 1.0, 0.0, 0.0, 6.0, 0.0, 8.0, nan, nan, nan, 5.0, 8.0, 2.0, 7.0, 7.0, 4.0, 8.0, 2.0, 9.0, 9.0, 3.0, 0.0, 7.0, 1.0, 1.0, 3.0, nan, nan, nan, 4.0, 5.0, 6.0, 2.0, 3.0, 2.0, 2.0, 4.0, 7.0, 8.0, 9.0, 5.0, 6.0, 8.0, 8.0, 7.0, nan, nan, nan, 6.0, 5.0, 4.0, 5.0, 9.0, 6.0, 7.0, 6.0, 6.0, 5.0, 4.0, 5.0, 7.0, 3.0, 4.0, 4.0, nan, nan, nan, 1.0, 7.0, 6.0, 5.0, 5.0, 5.0, 7.0, 3.0, 2.0, 1.0, 0.0, 9.0, 8.0, 2.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [1.0, 1.0, 3.0, 2.0, 5.0, 1.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 9.0, 0.0, 7.0, 0.0, 5.0, 0.0, 2.0, 4.0, 6.0, 3.0, 6.0, 6.0, 5.0, 7.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 7.0, 8.0, 5.0, 3.0, 2.0, 5.0, 5.0, 5.0, 8.0, 7.0, 4.0, 4.0, 2.0, 6.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 1.0, 9.0, 8.0, 7.0, 8.0, 9.0, 2.0, 8.0, 1.0, 6.0, 8.0, 2.0, 4.0, 6.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 7.0, 9.0, 9.0, 6.0, 9.0, 2.0, 0.0, 4.0, 4.0, 8.0, 3.0, 8.0, 1.0, 6.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 7.0, 9.0, 3.0, 6.0, 1.0, 2.0, 8.0, 8.0, 3.0, 7.0, 2.0, 5.0, 3.0, ...]\nE   [right]: [1.0, 1.0, 3.0, 2.0, 5.0, 1.0, 8.0, nan, nan, nan, 4.0, 9.0, 0.0, 7.0, 0.0, 5.0, 0.0, 2.0, 4.0, 6.0, 3.0, 6.0, 6.0, 5.0, 7.0, 3.0, nan, nan, nan, 0.0, 7.0, 8.0, 5.0, 3.0, 2.0, 5.0, 5.0, 5.0, 8.0, 7.0, 4.0, 4.0, 2.0, 6.0, 8.0, nan, nan, nan, 4.0, 1.0, 9.0, 8.0, 7.0, 8.0, 9.0, 2.0, 8.0, 1.0, 6.0, 8.0, 2.0, 4.0, 6.0, 8.0, nan, nan, nan, 8.0, 7.0, 9.0, 9.0, 6.0, 9.0, 2.0, 0.0, 4.0, 4.0, 8.0, 3.0, 8.0, 1.0, 6.0, 4.0, nan, nan, nan, 4.0, 7.0, 9.0, 3.0, 6.0, 1.0, 2.0, 8.0, 8.0, 3.0, 7.0, 2.0, 5.0, 3.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [8.0, 3.0, 5.0, 0.0, 5.0, 1.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 0.0, 9.0, 4.0, 9.0, 5.0, 2.0, 1.0, 2.0, 5.0, 2.0, 7.0, 1.0, 6.0, 7.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 2.0, 0.0, 9.0, 8.0, 5.0, 0.0, 3.0, 4.0, 6.0, 0.0, 3.0, 3.0, 6.0, 4.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 5.0, 0.0, 4.0, 2.0, 4.0, 0.0, 5.0, 6.0, 8.0, 6.0, 4.0, 9.0, 1.0, 6.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 9.0, 7.0, 4.0, 8.0, 6.0, 2.0, 3.0, 4.0, 3.0, 3.0, 6.0, 9.0, 9.0, 2.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 7.0, 0.0, 7.0, 5.0, 7.0, 8.0, 7.0, 5.0, 7.0, 5.0, 6.0, 8.0, 7.0, ...]\nE   [right]: [8.0, 3.0, 5.0, 0.0, 5.0, 1.0, 8.0, nan, nan, nan, 0.0, 0.0, 9.0, 4.0, 9.0, 5.0, 2.0, 1.0, 2.0, 5.0, 2.0, 7.0, 1.0, 6.0, 7.0, 4.0, nan, nan, nan, 7.0, 2.0, 0.0, 9.0, 8.0, 5.0, 0.0, 3.0, 4.0, 6.0, 0.0, 3.0, 3.0, 6.0, 4.0, 9.0, nan, nan, nan, 6.0, 5.0, 0.0, 4.0, 2.0, 4.0, 0.0, 5.0, 6.0, 8.0, 6.0, 4.0, 9.0, 1.0, 6.0, 3.0, nan, nan, nan, 7.0, 9.0, 7.0, 4.0, 8.0, 6.0, 2.0, 3.0, 4.0, 3.0, 3.0, 6.0, 9.0, 9.0, 2.0, 5.0, nan, nan, nan, 2.0, 7.0, 0.0, 7.0, 5.0, 7.0, 8.0, 7.0, 5.0, 7.0, 5.0, 6.0, 8.0, 7.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [1.0, 1.0, 1.0, 2.0, 6.0, 8.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 3.0, 3.0, 1.0, 7.0, 9.0, 4.0, 9.0, 2.0, 5.0, 2.0, 1.0, 9.0, 2.0, 3.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 6.0, 1.0, 7.0, 8.0, 3.0, 2.0, 4.0, 9.0, 4.0, 9.0, 6.0, 7.0, 1.0, 4.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 0.0, 3.0, 1.0, 6.0, 6.0, 0.0, 6.0, 9.0, 6.0, 8.0, 7.0, 0.0, 1.0, 4.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 3.0, 2.0, 0.0, 3.0, 9.0, 6.0, 1.0, 5.0, 1.0, 6.0, 7.0, 0.0, 2.0, 4.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 2.0, 8.0, 4.0, 5.0, 2.0, 6.0, 8.0, 7.0, 8.0, 6.0, 5.0, 5.0, 7.0, ...]\nE   [right]: [1.0, 1.0, 1.0, 2.0, 6.0, 8.0, 1.0, nan, nan, nan, 0.0, 3.0, 3.0, 1.0, 7.0, 9.0, 4.0, 9.0, 2.0, 5.0, 2.0, 1.0, 9.0, 2.0, 3.0, 1.0, nan, nan, nan, 0.0, 6.0, 1.0, 7.0, 8.0, 3.0, 2.0, 4.0, 9.0, 4.0, 9.0, 6.0, 7.0, 1.0, 4.0, 6.0, nan, nan, nan, 9.0, 0.0, 3.0, 1.0, 6.0, 6.0, 0.0, 6.0, 9.0, 6.0, 8.0, 7.0, 0.0, 1.0, 4.0, 1.0, nan, nan, nan, 8.0, 3.0, 2.0, 0.0, 3.0, 9.0, 6.0, 1.0, 5.0, 1.0, 6.0, 7.0, 0.0, 2.0, 4.0, 2.0, nan, nan, nan, 9.0, 2.0, 8.0, 4.0, 5.0, 2.0, 6.0, 8.0, 7.0, 8.0, 6.0, 5.0, 5.0, 7.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [5.0, 85.0, 28.0, 48.0, 45.0, 61.0, 98.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 15.0, 82.0, 58.0, 75.0, 56.0, 78.0, 97.0, 10.0, 90.0, 34.0, 28.0, 63.0, 26.0, 66.0, 35.0, 73.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 59.0, 66.0, 67.0, 37.0, 83.0, 24.0, 83.0, 53.0, 65.0, 79.0, 69.0, 47.0, 14.0, 86.0, 51.0, 95.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 97.0, 33.0, 73.0, 34.0, 38.0, 85.0, 48.0, 27.0, 41.0, 45.0, 50.0, 54.0, 47.0, 6.0, 80.0, 79.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 31.0, 79.0, 29.0, 36.0, 20.0, 52.0, 6.0, 82.0, 41.0, 52.0, 81.0, 86.0, 34.0, 90.0, 90.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 18.0, 90.0, 39.0, 68.0, 13.0, 41.0, 68.0, 93.0, 86.0, 64.0, 73.0, 80.0, 28.0, 19.0]\nE   [right]: [5.0, 85.0, 28.0, 48.0, 45.0, 61.0, 98.0, nan, nan, nan, 15.0, 82.0, 58.0, 75.0, 56.0, 78.0, 97.0, 10.0, 90.0, 34.0, 28.0, 63.0, 26.0, 66.0, 35.0, 73.0, nan, nan, nan, 59.0, 66.0, 67.0, 37.0, 83.0, 24.0, 83.0, 53.0, 65.0, 79.0, 69.0, 47.0, 14.0, 86.0, 51.0, 95.0, nan, nan, nan, 97.0, 33.0, 73.0, 34.0, 38.0, 85.0, 48.0, 27.0, 41.0, 45.0, 50.0, 54.0, 47.0, 6.0, 80.0, 79.0, nan, nan, nan, 7.0, 31.0, 79.0, 29.0, 36.0, 20.0, 52.0, 6.0, 82.0, 41.0, 52.0, 81.0, 86.0, 34.0, 90.0, 90.0, nan, nan, nan, 18.0, 90.0, 39.0, 68.0, 13.0, 41.0, 68.0, 93.0, 86.0, 64.0, 73.0, 80.0, 28.0, 19.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [45.0, 27.0, 4.0, 96.0, 25.0, 17.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 76.0, 70.0, 91.0, 85.0, 32.0, 64.0, 95.0, 35.0, 13.0, 80.0, 33.0, 21.0, 16.0, 87.0, 96.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 82.0, 40.0, 51.0, 80.0, 44.0, 71.0, 14.0, 9.0, 76.0, 99.0, 20.0, 49.0, 80.0, 74.0, 75.0, 53.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 57.0, 47.0, 45.0, 77.0, 2.0, 93.0, 25.0, 62.0, 46.0, 20.0, 69.0, 93.0, 16.0, 28.0, 59.0, 85.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 17.0, 66.0, 75.0, 82.0, 76.0, 84.0, 72.0, 21.0, 26.0, 48.0, 80.0, 71.0, 2.0, 44.0, 82.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 45.0, 2.0, 28.0, 35.0, 31.0, 82.0, 78.0, 94.0, 33.0, 36.0, 25.0, 4.0, 86.0, 73.0, ...]\nE   [right]: [45.0, 27.0, 4.0, 96.0, 25.0, 17.0, 4.0, nan, nan, nan, 0.0, 76.0, 70.0, 91.0, 85.0, 32.0, 64.0, 95.0, 35.0, 13.0, 80.0, 33.0, 21.0, 16.0, 87.0, 96.0, nan, nan, nan, 82.0, 40.0, 51.0, 80.0, 44.0, 71.0, 14.0, 9.0, 76.0, 99.0, 20.0, 49.0, 80.0, 74.0, 75.0, 53.0, nan, nan, nan, 57.0, 47.0, 45.0, 77.0, 2.0, 93.0, 25.0, 62.0, 46.0, 20.0, 69.0, 93.0, 16.0, 28.0, 59.0, 85.0, nan, nan, nan, 17.0, 66.0, 75.0, 82.0, 76.0, 84.0, 72.0, 21.0, 26.0, 48.0, 80.0, 71.0, 2.0, 44.0, 82.0, 5.0, nan, nan, nan, 45.0, 2.0, 28.0, 35.0, 31.0, 82.0, 78.0, 94.0, 33.0, 36.0, 25.0, 4.0, 86.0, 73.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [72.0, 2.0, 12.0, 52.0, 12.0, 92.0, 27.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 68.0, 0.0, 43.0, 17.0, 89.0, 80.0, 24.0, 60.0, 50.0, 99.0, 8.0, 4.0, 73.0, 20.0, 96.0, 34.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 38.0, 89.0, 17.0, 88.0, 7.0, 26.0, 60.0, 14.0, 53.0, 32.0, 13.0, 99.0, 64.0, 70.0, 38.0, 84.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 27.0, 52.0, 17.0, 59.0, 3.0, 13.0, 91.0, 21.0, 2.0, 1.0, 86.0, 47.0, 53.0, 46.0, 42.0, 28.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 90.0, 10.0, 55.0, 76.0, 51.0, 3.0, 41.0, 44.0, 0.0, 40.0, 32.0, 21.0, 95.0, 42.0, 13.0, 18.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 64.0, 75.0, 27.0, 63.0, 82.0, 12.0, 78.0, 80.0, 40.0, 65.0, 77.0, 49.0, 74.0, ...]\nE   [right]: [72.0, 2.0, 12.0, 52.0, 12.0, 92.0, 27.0, nan, nan, nan, 68.0, 0.0, 43.0, 17.0, 89.0, 80.0, 24.0, 60.0, 50.0, 99.0, 8.0, 4.0, 73.0, 20.0, 96.0, 34.0, nan, nan, nan, 38.0, 89.0, 17.0, 88.0, 7.0, 26.0, 60.0, 14.0, 53.0, 32.0, 13.0, 99.0, 64.0, 70.0, 38.0, 84.0, nan, nan, nan, 27.0, 52.0, 17.0, 59.0, 3.0, 13.0, 91.0, 21.0, 2.0, 1.0, 86.0, 47.0, 53.0, 46.0, 42.0, 28.0, nan, nan, nan, 90.0, 10.0, 55.0, 76.0, 51.0, 3.0, 41.0, 44.0, 0.0, 40.0, 32.0, 21.0, 95.0, 42.0, 13.0, 18.0, nan, nan, nan, 4.0, 64.0, 75.0, 27.0, 63.0, 82.0, 12.0, 78.0, 80.0, 40.0, 65.0, 77.0, 49.0, 74.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [81.0, 56.0, 61.0, 20.0, 17.0, 60.0, 23.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 49.0, 95.0, 95.0, 0.0, 25.0, 86.0, 17.0, 76.0, 56.0, 76.0, 4.0, 65.0, 30.0, 0.0, 92.0, 44.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 85.0, 77.0, 84.0, 7.0, 51.0, 65.0, 18.0, 23.0, 30.0, 75.0, 28.0, 16.0, 83.0, 98.0, 38.0, 36.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 72.0, 40.0, 89.0, 24.0, 82.0, 46.0, 61.0, 59.0, 62.0, 52.0, 25.0, 15.0, 80.0, 50.0, 34.0, 61.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 29.0, 6.0, 30.0, 24.0, 75.0, 8.0, 52.0, 36.0, 31.0, 11.0, 64.0, 52.0, 78.0, 60.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 81.0, 36.0, 74.0, 59.0, 87.0, 97.0, 99.0, 14.0, 67.0, 51.0, 37.0, 61.0, 66.0, 69.0, ...]\nE   [right]: [81.0, 56.0, 61.0, 20.0, 17.0, 60.0, 23.0, nan, nan, nan, 49.0, 95.0, 95.0, 0.0, 25.0, 86.0, 17.0, 76.0, 56.0, 76.0, 4.0, 65.0, 30.0, 0.0, 92.0, 44.0, nan, nan, nan, 85.0, 77.0, 84.0, 7.0, 51.0, 65.0, 18.0, 23.0, 30.0, 75.0, 28.0, 16.0, 83.0, 98.0, 38.0, 36.0, nan, nan, nan, 72.0, 40.0, 89.0, 24.0, 82.0, 46.0, 61.0, 59.0, 62.0, 52.0, 25.0, 15.0, 80.0, 50.0, 34.0, 61.0, nan, nan, nan, 3.0, 29.0, 6.0, 30.0, 24.0, 75.0, 8.0, 52.0, 36.0, 31.0, 11.0, 64.0, 52.0, 78.0, 60.0, 1.0, nan, nan, nan, 81.0, 36.0, 74.0, 59.0, 87.0, 97.0, 99.0, 14.0, 67.0, 51.0, 37.0, 61.0, 66.0, 69.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [892.0, 515.0, 239.0, 445.0, 246.0, 206.0, 192.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 901.0, 709.0, 448.0, 210.0, 561.0, 8.0, 146.0, 411.0, 242.0, 650.0, 330.0, 766.0, 428.0, 880.0, 587.0, 782.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 348.0, 504.0, 493.0, 402.0, 528.0, 14.0, 998.0, 627.0, 883.0, 387.0, 548.0, 833.0, 984.0, 515.0, 457.0, 101.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 805.0, 599.0, 438.0, 510.0, 274.0, 242.0, 252.0, 471.0, 710.0, 248.0, 429.0, 386.0, 100.0, 530.0, 107.0, 972.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 31.0, 375.0, 948.0, 646.0, 655.0, 452.0, 354.0, 67.0, 124.0, 199.0, 345.0, 199.0, 223.0, 58.0, 843.0, 449.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 359.0, 385.0, 858.0, 146.0, 891.0, 286.0, 817.0, 480.0, 73.0, 209.0, 285.0, 327.0, 855.0, 410.0]\nE   [right]: [892.0, 515.0, 239.0, 445.0, 246.0, 206.0, 192.0, nan, nan, nan, 901.0, 709.0, 448.0, 210.0, 561.0, 8.0, 146.0, 411.0, 242.0, 650.0, 330.0, 766.0, 428.0, 880.0, 587.0, 782.0, nan, nan, nan, 348.0, 504.0, 493.0, 402.0, 528.0, 14.0, 998.0, 627.0, 883.0, 387.0, 548.0, 833.0, 984.0, 515.0, 457.0, 101.0, nan, nan, nan, 805.0, 599.0, 438.0, 510.0, 274.0, 242.0, 252.0, 471.0, 710.0, 248.0, 429.0, 386.0, 100.0, 530.0, 107.0, 972.0, nan, nan, nan, 31.0, 375.0, 948.0, 646.0, 655.0, 452.0, 354.0, 67.0, 124.0, 199.0, 345.0, 199.0, 223.0, 58.0, 843.0, 449.0, nan, nan, nan, 359.0, 385.0, 858.0, 146.0, 891.0, 286.0, 817.0, 480.0, 73.0, 209.0, 285.0, 327.0, 855.0, 410.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [117.0, 325.0, 918.0, 163.0, 157.0, 196.0, 974.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 455.0, 194.0, 851.0, 513.0, 673.0, 679.0, 416.0, 96.0, 396.0, 631.0, 317.0, 42.0, 133.0, 531.0, 575.0, 391.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 52.0, 928.0, 763.0, 470.0, 251.0, 754.0, 836.0, 35.0, 650.0, 751.0, 923.0, 671.0, 165.0, 429.0, 10.0, 561.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 575.0, 75.0, 640.0, 578.0, 891.0, 596.0, 531.0, 79.0, 528.0, 553.0, 310.0, 264.0, 679.0, 964.0, 479.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 850.0, 402.0, 967.0, 873.0, 972.0, 702.0, 39.0, 250.0, 934.0, 210.0, 256.0, 48.0, 590.0, 336.0, 196.0, 753.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 168.0, 302.0, 158.0, 334.0, 167.0, 262.0, 676.0, 279.0, 77.0, 588.0, 698.0, 207.0, 254.0, 559.0, ...]\nE   [right]: [117.0, 325.0, 918.0, 163.0, 157.0, 196.0, 974.0, nan, nan, nan, 455.0, 194.0, 851.0, 513.0, 673.0, 679.0, 416.0, 96.0, 396.0, 631.0, 317.0, 42.0, 133.0, 531.0, 575.0, 391.0, nan, nan, nan, 52.0, 928.0, 763.0, 470.0, 251.0, 754.0, 836.0, 35.0, 650.0, 751.0, 923.0, 671.0, 165.0, 429.0, 10.0, 561.0, nan, nan, nan, 3.0, 575.0, 75.0, 640.0, 578.0, 891.0, 596.0, 531.0, 79.0, 528.0, 553.0, 310.0, 264.0, 679.0, 964.0, 479.0, nan, nan, nan, 850.0, 402.0, 967.0, 873.0, 972.0, 702.0, 39.0, 250.0, 934.0, 210.0, 256.0, 48.0, 590.0, 336.0, 196.0, 753.0, nan, nan, nan, 168.0, 302.0, 158.0, 334.0, 167.0, 262.0, 676.0, 279.0, 77.0, 588.0, 698.0, 207.0, 254.0, 559.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [998.0, 841.0, 903.0, 575.0, 88.0, 919.0, 499.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 754.0, 451.0, 750.0, 524.0, 874.0, 908.0, 841.0, 16.0, 7.0, 125.0, 347.0, 407.0, 627.0, 261.0, 486.0, 639.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 640.0, 622.0, 57.0, 260.0, 178.0, 333.0, 349.0, 632.0, 597.0, 640.0, 54.0, 788.0, 70.0, 425.0, 738.0, 931.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 253.0, 1.0, 320.0, 313.0, 255.0, 805.0, 106.0, 712.0, 34.0, 410.0, 569.0, 294.0, 258.0, 922.0, 73.0, 734.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 908.0, 762.0, 938.0, 889.0, 862.0, 776.0, 995.0, 921.0, 312.0, 724.0, 981.0, 814.0, 212.0, 459.0, 600.0, 176.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 91.0, 414.0, 463.0, 691.0, 431.0, 516.0, 399.0, 714.0, 391.0, 329.0, 338.0, 725.0, 858.0, 448.0, ...]\nE   [right]: [998.0, 841.0, 903.0, 575.0, 88.0, 919.0, 499.0, nan, nan, nan, 754.0, 451.0, 750.0, 524.0, 874.0, 908.0, 841.0, 16.0, 7.0, 125.0, 347.0, 407.0, 627.0, 261.0, 486.0, 639.0, nan, nan, nan, 640.0, 622.0, 57.0, 260.0, 178.0, 333.0, 349.0, 632.0, 597.0, 640.0, 54.0, 788.0, 70.0, 425.0, 738.0, 931.0, nan, nan, nan, 253.0, 1.0, 320.0, 313.0, 255.0, 805.0, 106.0, 712.0, 34.0, 410.0, 569.0, 294.0, 258.0, 922.0, 73.0, 734.0, nan, nan, nan, 908.0, 762.0, 938.0, 889.0, 862.0, 776.0, 995.0, 921.0, 312.0, 724.0, 981.0, 814.0, 212.0, 459.0, 600.0, 176.0, nan, nan, nan, 91.0, 414.0, 463.0, 691.0, 431.0, 516.0, 399.0, 714.0, 391.0, 329.0, 338.0, 725.0, 858.0, 448.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [945.0, 716.0, 222.0, 499.0, 465.0, 901.0, 140.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 153.0, 256.0, 716.0, 543.0, 360.0, 387.0, 115.0, 104.0, 458.0, 310.0, 204.0, 487.0, 871.0, 324.0, 19.0, 533.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 187.0, 175.0, 157.0, 179.0, 999.0, 534.0, 687.0, 986.0, 656.0, 371.0, 573.0, 605.0, 638.0, 160.0, 126.0, 470.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 422.0, 223.0, 249.0, 150.0, 921.0, 585.0, 323.0, 61.0, 50.0, 548.0, 723.0, 202.0, 608.0, 284.0, 427.0, 64.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 265.0, 542.0, 492.0, 126.0, 383.0, 288.0, 215.0, 908.0, 481.0, 550.0, 290.0, 599.0, 270.0, 278.0, 361.0, 320.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 621.0, 155.0, 645.0, 17.0, 12.0, 119.0, 938.0, 44.0, 10.0, 129.0, 397.0, 572.0, 23.0, 48.0, ...]\nE   [right]: [945.0, 716.0, 222.0, 499.0, 465.0, 901.0, 140.0, nan, nan, nan, 153.0, 256.0, 716.0, 543.0, 360.0, 387.0, 115.0, 104.0, 458.0, 310.0, 204.0, 487.0, 871.0, 324.0, 19.0, 533.0, nan, nan, nan, 187.0, 175.0, 157.0, 179.0, 999.0, 534.0, 687.0, 986.0, 656.0, 371.0, 573.0, 605.0, 638.0, 160.0, 126.0, 470.0, nan, nan, nan, 422.0, 223.0, 249.0, 150.0, 921.0, 585.0, 323.0, 61.0, 50.0, 548.0, 723.0, 202.0, 608.0, 284.0, 427.0, 64.0, nan, nan, nan, 265.0, 542.0, 492.0, 126.0, 383.0, 288.0, 215.0, 908.0, 481.0, 550.0, 290.0, 599.0, 270.0, 278.0, 361.0, 320.0, nan, nan, nan, 621.0, 155.0, 645.0, 17.0, 12.0, 119.0, 938.0, 44.0, 10.0, 129.0, 397.0, 572.0, 23.0, 48.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [9.0, 5.0, 9.0, 6.0, 7.0, 9.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 5.0, 6.0, 7.0, 8.0, 8.0, 3.0, 6.0, 0.0, 3.0, 2.0, 3.0, 3.0, 2.0, 2.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 1.0, 8.0, 8.0, 6.0, 9.0, 5.0, 8.0, 6.0, 6.0, 4.0, 8.0, 0.0, 8.0, 3.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 6.0, 8.0, 0.0, 0.0, 6.0, 2.0, 1.0, 3.0, 7.0, 8.0, 7.0, 9.0, 3.0, 6.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 4.0, 1.0, 9.0, 2.0, 1.0, 8.0, 1.0, 4.0, 6.0, 8.0, 4.0, 1.0, 3.0, 2.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 5.0, 8.0, 7.0, 4.0, 4.0, 8.0, 0.0, 3.0, 3.0, 4.0, 4.0, 1.0, 1.0]\nE   [right]: [9.0, 5.0, 9.0, 6.0, 7.0, 9.0, 2.0, nan, nan, nan, 4.0, 5.0, 6.0, 7.0, 8.0, 8.0, 3.0, 6.0, 0.0, 3.0, 2.0, 3.0, 3.0, 2.0, 2.0, 4.0, nan, nan, nan, 8.0, 1.0, 8.0, 8.0, 6.0, 9.0, 5.0, 8.0, 6.0, 6.0, 4.0, 8.0, 0.0, 8.0, 3.0, 3.0, nan, nan, nan, 6.0, 6.0, 8.0, 0.0, 0.0, 6.0, 2.0, 1.0, 3.0, 7.0, 8.0, 7.0, 9.0, 3.0, 6.0, 6.0, nan, nan, nan, 7.0, 4.0, 1.0, 9.0, 2.0, 1.0, 8.0, 1.0, 4.0, 6.0, 8.0, 4.0, 1.0, 3.0, 2.0, 6.0, nan, nan, nan, 4.0, 5.0, 8.0, 7.0, 4.0, 4.0, 8.0, 0.0, 3.0, 3.0, 4.0, 4.0, 1.0, 1.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [3.0, 2.0, 4.0, 3.0, 0.0, 0.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 7.0, 7.0, 1.0, 3.0, 9.0, 1.0, 7.0, 5.0, 1.0, 5.0, 2.0, 3.0, 3.0, 2.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 8.0, 8.0, 7.0, 5.0, 2.0, 7.0, 3.0, 9.0, 4.0, 2.0, 0.0, 3.0, 4.0, 4.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 4.0, 4.0, 9.0, 4.0, 0.0, 7.0, 8.0, 9.0, 0.0, 5.0, 1.0, 2.0, 6.0, 7.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 0.0, 4.0, 6.0, 4.0, 3.0, 7.0, 4.0, 9.0, 0.0, 0.0, 2.0, 7.0, 6.0, 3.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 8.0, 1.0, 9.0, 2.0, 5.0, 5.0, 9.0, 5.0, 0.0, 8.0, 1.0, 0.0, 4.0, ...]\nE   [right]: [3.0, 2.0, 4.0, 3.0, 0.0, 0.0, 2.0, nan, nan, nan, 5.0, 7.0, 7.0, 1.0, 3.0, 9.0, 1.0, 7.0, 5.0, 1.0, 5.0, 2.0, 3.0, 3.0, 2.0, 1.0, nan, nan, nan, 8.0, 8.0, 8.0, 7.0, 5.0, 2.0, 7.0, 3.0, 9.0, 4.0, 2.0, 0.0, 3.0, 4.0, 4.0, 6.0, nan, nan, nan, 4.0, 4.0, 4.0, 9.0, 4.0, 0.0, 7.0, 8.0, 9.0, 0.0, 5.0, 1.0, 2.0, 6.0, 7.0, 8.0, nan, nan, nan, 2.0, 0.0, 4.0, 6.0, 4.0, 3.0, 7.0, 4.0, 9.0, 0.0, 0.0, 2.0, 7.0, 6.0, 3.0, 1.0, nan, nan, nan, 4.0, 8.0, 1.0, 9.0, 2.0, 5.0, 5.0, 9.0, 5.0, 0.0, 8.0, 1.0, 0.0, 4.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [7.0, 3.0, 4.0, 4.0, 1.0, 2.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 2.0, 2.0, 2.0, 9.0, 5.0, 9.0, 5.0, 0.0, 2.0, 7.0, 9.0, 7.0, 3.0, 2.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 3.0, 2.0, 8.0, 0.0, 1.0, 0.0, 0.0, 7.0, 3.0, 8.0, 8.0, 3.0, 9.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 7.0, 7.0, 9.0, 9.0, 4.0, 4.0, 5.0, 7.0, 6.0, 8.0, 1.0, 8.0, 2.0, 2.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 5.0, 1.0, 2.0, 8.0, 2.0, 7.0, 2.0, 9.0, 5.0, 2.0, 7.0, 9.0, 5.0, 7.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 7.0, 0.0, 7.0, 2.0, 7.0, 6.0, 5.0, 4.0, 0.0, 9.0, 9.0, 6.0, 0.0, ...]\nE   [right]: [7.0, 3.0, 4.0, 4.0, 1.0, 2.0, 0.0, nan, nan, nan, 2.0, 2.0, 2.0, 2.0, 9.0, 5.0, 9.0, 5.0, 0.0, 2.0, 7.0, 9.0, 7.0, 3.0, 2.0, 8.0, nan, nan, nan, 6.0, 3.0, 2.0, 8.0, 0.0, 1.0, 0.0, 0.0, 7.0, 3.0, 8.0, 8.0, 3.0, 9.0, 0.0, 3.0, nan, nan, nan, 5.0, 7.0, 7.0, 9.0, 9.0, 4.0, 4.0, 5.0, 7.0, 6.0, 8.0, 1.0, 8.0, 2.0, 2.0, 1.0, nan, nan, nan, 1.0, 5.0, 1.0, 2.0, 8.0, 2.0, 7.0, 2.0, 9.0, 5.0, 2.0, 7.0, 9.0, 5.0, 7.0, 6.0, nan, nan, nan, 2.0, 7.0, 0.0, 7.0, 2.0, 7.0, 6.0, 5.0, 4.0, 0.0, 9.0, 9.0, 6.0, 0.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [1.0, 5.0, 1.0, 5.0, 2.0, 0.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 4.0, 3.0, 3.0, 7.0, 8.0, 1.0, 4.0, 7.0, 4.0, 0.0, 8.0, 2.0, 8.0, 4.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 9.0, 4.0, 5.0, 3.0, 5.0, 0.0, 7.0, 6.0, 1.0, 1.0, 0.0, 8.0, 0.0, 3.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 9.0, 7.0, 2.0, 9.0, 2.0, 1.0, 4.0, 9.0, 3.0, 2.0, 4.0, 3.0, 3.0, 6.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 0.0, 2.0, 5.0, 8.0, 5.0, 5.0, 7.0, 3.0, 6.0, 7.0, 7.0, 0.0, 6.0, 1.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 7.0, 6.0, 6.0, 3.0, 7.0, 9.0, 4.0, 5.0, 6.0, 4.0, 6.0, 5.0, 3.0, ...]\nE   [right]: [1.0, 5.0, 1.0, 5.0, 2.0, 0.0, 8.0, nan, nan, nan, 0.0, 4.0, 3.0, 3.0, 7.0, 8.0, 1.0, 4.0, 7.0, 4.0, 0.0, 8.0, 2.0, 8.0, 4.0, 4.0, nan, nan, nan, 6.0, 9.0, 4.0, 5.0, 3.0, 5.0, 0.0, 7.0, 6.0, 1.0, 1.0, 0.0, 8.0, 0.0, 3.0, 6.0, nan, nan, nan, 3.0, 9.0, 7.0, 2.0, 9.0, 2.0, 1.0, 4.0, 9.0, 3.0, 2.0, 4.0, 3.0, 3.0, 6.0, 6.0, nan, nan, nan, 1.0, 0.0, 2.0, 5.0, 8.0, 5.0, 5.0, 7.0, 3.0, 6.0, 7.0, 7.0, 0.0, 6.0, 1.0, 2.0, nan, nan, nan, 1.0, 7.0, 6.0, 6.0, 3.0, 7.0, 9.0, 4.0, 5.0, 6.0, 4.0, 6.0, 5.0, 3.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [8.0, 46.0, 5.0, 53.0, 40.0, 54.0, 21.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 40.0, 17.0, 72.0, 14.0, 75.0, 25.0, 3.0, 99.0, 35.0, 92.0, 83.0, 83.0, 7.0, 50.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 90.0, 64.0, 46.0, 43.0, 14.0, 30.0, 9.0, 60.0, 43.0, 58.0, 45.0, 87.0, 83.0, 96.0, 91.0, 18.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 12.0, 97.0, 64.0, 55.0, 69.0, 78.0, 55.0, 70.0, 87.0, 93.0, 11.0, 11.0, 92.0, 1.0, 28.0, 31.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 77.0, 29.0, 76.0, 48.0, 42.0, 40.0, 48.0, 14.0, 46.0, 98.0, 63.0, 31.0, 49.0, 34.0, 91.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 8.0, 19.0, 8.0, 99.0, 70.0, 88.0, 92.0, 66.0, 12.0, 6.0, 65.0, 36.0, 93.0]\nE   [right]: [8.0, 46.0, 5.0, 53.0, 40.0, 54.0, 21.0, nan, nan, nan, 2.0, 40.0, 17.0, 72.0, 14.0, 75.0, 25.0, 3.0, 99.0, 35.0, 92.0, 83.0, 83.0, 7.0, 50.0, 0.0, nan, nan, nan, 90.0, 64.0, 46.0, 43.0, 14.0, 30.0, 9.0, 60.0, 43.0, 58.0, 45.0, 87.0, 83.0, 96.0, 91.0, 18.0, nan, nan, nan, 12.0, 97.0, 64.0, 55.0, 69.0, 78.0, 55.0, 70.0, 87.0, 93.0, 11.0, 11.0, 92.0, 1.0, 28.0, 31.0, nan, nan, nan, 77.0, 29.0, 76.0, 48.0, 42.0, 40.0, 48.0, 14.0, 46.0, 98.0, 63.0, 31.0, 49.0, 34.0, 91.0, 9.0, nan, nan, nan, 9.0, 8.0, 19.0, 8.0, 99.0, 70.0, 88.0, 92.0, 66.0, 12.0, 6.0, 65.0, 36.0, 93.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [28.0, 65.0, 31.0, 93.0, 22.0, 62.0, 16.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 98.0, 55.0, 62.0, 59.0, 9.0, 61.0, 56.0, 35.0, 18.0, 1.0, 39.0, 36.0, 0.0, 69.0, 76.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 96.0, 61.0, 86.0, 1.0, 74.0, 96.0, 85.0, 4.0, 78.0, 94.0, 74.0, 17.0, 72.0, 41.0, 64.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 45.0, 34.0, 92.0, 90.0, 89.0, 97.0, 3.0, 86.0, 57.0, 74.0, 99.0, 61.0, 37.0, 58.0, 15.0, 64.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 49.0, 92.0, 85.0, 39.0, 87.0, 0.0, 51.0, 44.0, 78.0, 67.0, 60.0, 35.0, 17.0, 66.0, 54.0, 28.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 43.0, 27.0, 29.0, 20.0, 95.0, 37.0, 0.0, 79.0, 97.0, 46.0, 46.0, 67.0, 98.0, 8.0, ...]\nE   [right]: [28.0, 65.0, 31.0, 93.0, 22.0, 62.0, 16.0, nan, nan, nan, 25.0, 98.0, 55.0, 62.0, 59.0, 9.0, 61.0, 56.0, 35.0, 18.0, 1.0, 39.0, 36.0, 0.0, 69.0, 76.0, nan, nan, nan, 96.0, 61.0, 86.0, 1.0, 74.0, 96.0, 85.0, 4.0, 78.0, 94.0, 74.0, 17.0, 72.0, 41.0, 64.0, 5.0, nan, nan, nan, 45.0, 34.0, 92.0, 90.0, 89.0, 97.0, 3.0, 86.0, 57.0, 74.0, 99.0, 61.0, 37.0, 58.0, 15.0, 64.0, nan, nan, nan, 49.0, 92.0, 85.0, 39.0, 87.0, 0.0, 51.0, 44.0, 78.0, 67.0, 60.0, 35.0, 17.0, 66.0, 54.0, 28.0, nan, nan, nan, 43.0, 27.0, 29.0, 20.0, 95.0, 37.0, 0.0, 79.0, 97.0, 46.0, 46.0, 67.0, 98.0, 8.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [48.0, 97.0, 54.0, 28.0, 29.0, 99.0, 63.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 94.0, 9.0, 77.0, 55.0, 93.0, 79.0, 3.0, 13.0, 7.0, 67.0, 57.0, 66.0, 73.0, 95.0, 3.0, 64.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 47.0, 32.0, 54.0, 66.0, 84.0, 98.0, 93.0, 40.0, 28.0, 36.0, 2.0, 53.0, 34.0, 43.0, 90.0, 99.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 21.0, 30.0, 98.0, 84.0, 95.0, 5.0, 31.0, 34.0, 38.0, 60.0, 46.0, 84.0, 14.0, 15.0, 94.0, 75.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 17.0, 0.0, 63.0, 95.0, 44.0, 88.0, 1.0, 86.0, 44.0, 79.0, 58.0, 68.0, 44.0, 23.0, 45.0, 54.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 13.0, 12.0, 37.0, 63.0, 22.0, 64.0, 32.0, 10.0, 18.0, 71.0, 6.0, 84.0, 33.0, 64.0, ...]\nE   [right]: [48.0, 97.0, 54.0, 28.0, 29.0, 99.0, 63.0, nan, nan, nan, 94.0, 9.0, 77.0, 55.0, 93.0, 79.0, 3.0, 13.0, 7.0, 67.0, 57.0, 66.0, 73.0, 95.0, 3.0, 64.0, nan, nan, nan, 47.0, 32.0, 54.0, 66.0, 84.0, 98.0, 93.0, 40.0, 28.0, 36.0, 2.0, 53.0, 34.0, 43.0, 90.0, 99.0, nan, nan, nan, 21.0, 30.0, 98.0, 84.0, 95.0, 5.0, 31.0, 34.0, 38.0, 60.0, 46.0, 84.0, 14.0, 15.0, 94.0, 75.0, nan, nan, nan, 17.0, 0.0, 63.0, 95.0, 44.0, 88.0, 1.0, 86.0, 44.0, 79.0, 58.0, 68.0, 44.0, 23.0, 45.0, 54.0, nan, nan, nan, 13.0, 12.0, 37.0, 63.0, 22.0, 64.0, 32.0, 10.0, 18.0, 71.0, 6.0, 84.0, 33.0, 64.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [28.0, 14.0, 49.0, 79.0, 96.0, 0.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 84.0, 67.0, 53.0, 10.0, 73.0, 18.0, 15.0, 98.0, 93.0, 5.0, 38.0, 19.0, 43.0, 75.0, 71.0, 92.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 70.0, 51.0, 79.0, 19.0, 94.0, 0.0, 34.0, 32.0, 51.0, 14.0, 30.0, 11.0, 85.0, 20.0, 24.0, 59.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 29.0, 68.0, 6.0, 42.0, 94.0, 56.0, 90.0, 68.0, 83.0, 87.0, 31.0, 47.0, 11.0, 88.0, 40.0, 74.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 42.0, 68.0, 59.0, 0.0, 39.0, 27.0, 87.0, 66.0, 73.0, 51.0, 42.0, 36.0, 48.0, 14.0, 15.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 19.0, 37.0, 19.0, 77.0, 53.0, 40.0, 76.0, 79.0, 67.0, 99.0, 66.0, 40.0, 96.0, ...]\nE   [right]: [28.0, 14.0, 49.0, 79.0, 96.0, 0.0, 25.0, nan, nan, nan, 84.0, 67.0, 53.0, 10.0, 73.0, 18.0, 15.0, 98.0, 93.0, 5.0, 38.0, 19.0, 43.0, 75.0, 71.0, 92.0, nan, nan, nan, 70.0, 51.0, 79.0, 19.0, 94.0, 0.0, 34.0, 32.0, 51.0, 14.0, 30.0, 11.0, 85.0, 20.0, 24.0, 59.0, nan, nan, nan, 29.0, 68.0, 6.0, 42.0, 94.0, 56.0, 90.0, 68.0, 83.0, 87.0, 31.0, 47.0, 11.0, 88.0, 40.0, 74.0, nan, nan, nan, 42.0, 68.0, 59.0, 0.0, 39.0, 27.0, 87.0, 66.0, 73.0, 51.0, 42.0, 36.0, 48.0, 14.0, 15.0, 1.0, nan, nan, nan, 9.0, 19.0, 37.0, 19.0, 77.0, 53.0, 40.0, 76.0, 79.0, 67.0, 99.0, 66.0, 40.0, 96.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [618.0, 616.0, 743.0, 907.0, 512.0, 787.0, 74.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 170.0, 709.0, 306.0, 545.0, 912.0, 658.0, 109.0, 770.0, 31.0, 157.0, 332.0, 220.0, 204.0, 347.0, 269.0, 419.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 200.0, 835.0, 882.0, 842.0, 400.0, 323.0, 634.0, 489.0, 981.0, 962.0, 770.0, 205.0, 286.0, 655.0, 371.0, 721.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 333.0, 183.0, 994.0, 576.0, 649.0, 633.0, 889.0, 772.0, 838.0, 390.0, 506.0, 342.0, 786.0, 130.0, 97.0, 752.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 364.0, 801.0, 348.0, 703.0, 486.0, 865.0, 23.0, 828.0, 925.0, 446.0, 80.0, 737.0, 377.0, 810.0, 822.0, 557.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 388.0, 483.0, 744.0, 289.0, 543.0, 803.0, 965.0, 210.0, 828.0, 976.0, 424.0, 32.0, 708.0, 300.0]\nE   [right]: [618.0, 616.0, 743.0, 907.0, 512.0, 787.0, 74.0, nan, nan, nan, 170.0, 709.0, 306.0, 545.0, 912.0, 658.0, 109.0, 770.0, 31.0, 157.0, 332.0, 220.0, 204.0, 347.0, 269.0, 419.0, nan, nan, nan, 200.0, 835.0, 882.0, 842.0, 400.0, 323.0, 634.0, 489.0, 981.0, 962.0, 770.0, 205.0, 286.0, 655.0, 371.0, 721.0, nan, nan, nan, 333.0, 183.0, 994.0, 576.0, 649.0, 633.0, 889.0, 772.0, 838.0, 390.0, 506.0, 342.0, 786.0, 130.0, 97.0, 752.0, nan, nan, nan, 364.0, 801.0, 348.0, 703.0, 486.0, 865.0, 23.0, 828.0, 925.0, 446.0, 80.0, 737.0, 377.0, 810.0, 822.0, 557.0, nan, nan, nan, 388.0, 483.0, 744.0, 289.0, 543.0, 803.0, 965.0, 210.0, 828.0, 976.0, 424.0, 32.0, 708.0, 300.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [585.0, 913.0, 175.0, 831.0, 604.0, 240.0, 549.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 388.0, 999.0, 553.0, 154.0, 822.0, 8.0, 248.0, 343.0, 551.0, 804.0, 242.0, 464.0, 682.0, 228.0, 588.0, 74.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 601.0, 281.0, 340.0, 543.0, 950.0, 713.0, 143.0, 352.0, 237.0, 842.0, 652.0, 854.0, 143.0, 97.0, 59.0, 622.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 822.0, 860.0, 512.0, 660.0, 982.0, 447.0, 44.0, 838.0, 244.0, 706.0, 794.0, 852.0, 645.0, 51.0, 334.0, 77.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 461.0, 838.0, 107.0, 516.0, 901.0, 487.0, 574.0, 447.0, 602.0, 169.0, 36.0, 840.0, 820.0, 783.0, 74.0, 295.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 454.0, 634.0, 892.0, 59.0, 633.0, 731.0, 945.0, 978.0, 702.0, 245.0, 644.0, 597.0, 28.0, 154.0, ...]\nE   [right]: [585.0, 913.0, 175.0, 831.0, 604.0, 240.0, 549.0, nan, nan, nan, 388.0, 999.0, 553.0, 154.0, 822.0, 8.0, 248.0, 343.0, 551.0, 804.0, 242.0, 464.0, 682.0, 228.0, 588.0, 74.0, nan, nan, nan, 601.0, 281.0, 340.0, 543.0, 950.0, 713.0, 143.0, 352.0, 237.0, 842.0, 652.0, 854.0, 143.0, 97.0, 59.0, 622.0, nan, nan, nan, 822.0, 860.0, 512.0, 660.0, 982.0, 447.0, 44.0, 838.0, 244.0, 706.0, 794.0, 852.0, 645.0, 51.0, 334.0, 77.0, nan, nan, nan, 461.0, 838.0, 107.0, 516.0, 901.0, 487.0, 574.0, 447.0, 602.0, 169.0, 36.0, 840.0, 820.0, 783.0, 74.0, 295.0, nan, nan, nan, 454.0, 634.0, 892.0, 59.0, 633.0, 731.0, 945.0, 978.0, 702.0, 245.0, 644.0, 597.0, 28.0, 154.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [163.0, 774.0, 766.0, 313.0, 306.0, 383.0, 41.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 400.0, 380.0, 304.0, 985.0, 119.0, 656.0, 271.0, 1.0, 411.0, 440.0, 777.0, 165.0, 968.0, 693.0, 948.0, 568.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 579.0, 784.0, 307.0, 926.0, 255.0, 7.0, 766.0, 223.0, 326.0, 591.0, 527.0, 420.0, 704.0, 221.0, 425.0, 574.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 303.0, 25.0, 591.0, 274.0, 55.0, 146.0, 6.0, 846.0, 659.0, 232.0, 67.0, 642.0, 634.0, 23.0, 846.0, 100.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 536.0, 683.0, 724.0, 322.0, 167.0, 203.0, 295.0, 824.0, 45.0, 555.0, 919.0, 742.0, 851.0, 486.0, 752.0, 273.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 45.0, 247.0, 772.0, 910.0, 794.0, 855.0, 129.0, 423.0, 300.0, 588.0, 260.0, 62.0, 576.0, 217.0, ...]\nE   [right]: [163.0, 774.0, 766.0, 313.0, 306.0, 383.0, 41.0, nan, nan, nan, 400.0, 380.0, 304.0, 985.0, 119.0, 656.0, 271.0, 1.0, 411.0, 440.0, 777.0, 165.0, 968.0, 693.0, 948.0, 568.0, nan, nan, nan, 579.0, 784.0, 307.0, 926.0, 255.0, 7.0, 766.0, 223.0, 326.0, 591.0, 527.0, 420.0, 704.0, 221.0, 425.0, 574.0, nan, nan, nan, 303.0, 25.0, 591.0, 274.0, 55.0, 146.0, 6.0, 846.0, 659.0, 232.0, 67.0, 642.0, 634.0, 23.0, 846.0, 100.0, nan, nan, nan, 536.0, 683.0, 724.0, 322.0, 167.0, 203.0, 295.0, 824.0, 45.0, 555.0, 919.0, 742.0, 851.0, 486.0, 752.0, 273.0, nan, nan, nan, 45.0, 247.0, 772.0, 910.0, 794.0, 855.0, 129.0, 423.0, 300.0, 588.0, 260.0, 62.0, 576.0, 217.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [292.0, 710.0, 635.0, 592.0, 841.0, 938.0, 928.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 348.0, 144.0, 564.0, 911.0, 446.0, 925.0, 747.0, 998.0, 541.0, 617.0, 258.0, 984.0, 706.0, 649.0, 917.0, 734.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 861.0, 794.0, 82.0, 886.0, 184.0, 505.0, 711.0, 643.0, 608.0, 721.0, 114.0, 843.0, 490.0, 191.0, 406.0, 516.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 850.0, 804.0, 890.0, 817.0, 414.0, 335.0, 46.0, 275.0, 839.0, 319.0, 908.0, 711.0, 695.0, 291.0, 834.0, 970.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 665.0, 939.0, 719.0, 276.0, 551.0, 145.0, 736.0, 451.0, 735.0, 415.0, 704.0, 17.0, 903.0, 941.0, 716.0, 112.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 366.0, 176.0, 375.0, 294.0, 140.0, 817.0, 118.0, 262.0, 218.0, 474.0, 394.0, 902.0, 208.0, 712.0, ...]\nE   [right]: [292.0, 710.0, 635.0, 592.0, 841.0, 938.0, 928.0, nan, nan, nan, 348.0, 144.0, 564.0, 911.0, 446.0, 925.0, 747.0, 998.0, 541.0, 617.0, 258.0, 984.0, 706.0, 649.0, 917.0, 734.0, nan, nan, nan, 861.0, 794.0, 82.0, 886.0, 184.0, 505.0, 711.0, 643.0, 608.0, 721.0, 114.0, 843.0, 490.0, 191.0, 406.0, 516.0, nan, nan, nan, 850.0, 804.0, 890.0, 817.0, 414.0, 335.0, 46.0, 275.0, 839.0, 319.0, 908.0, 711.0, 695.0, 291.0, 834.0, 970.0, nan, nan, nan, 665.0, 939.0, 719.0, 276.0, 551.0, 145.0, 736.0, 451.0, 735.0, 415.0, 704.0, 17.0, 903.0, 941.0, 716.0, 112.0, nan, nan, nan, 366.0, 176.0, 375.0, 294.0, 140.0, 817.0, 118.0, 262.0, 218.0, 474.0, 394.0, 902.0, 208.0, 712.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [1.0, 3.0, 8.0, 4.0, 4.0, 4.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 9.0, 5.0, 3.0, 5.0, 1.0, 1.0, 9.0, 2.0, 2.0, 1.0, 5.0, 8.0, 9.0, 9.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 8.0, 3.0, 5.0, 8.0, 8.0, 8.0, 0.0, 2.0, 2.0, 0.0, 4.0, 8.0, 9.0, 5.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 9.0, 3.0, 2.0, 1.0, 5.0, 5.0, 3.0, 0.0, 4.0, 6.0, 7.0, 8.0, 3.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 3.0, 2.0, 9.0, 6.0, 1.0, 8.0, 0.0, 9.0, 5.0, 2.0, 3.0, 4.0, 7.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 3.0, 9.0, 2.0, 2.0, 1.0, 2.0, 1.0, 0.0, 5.0, 1.0, 6.0, 5.0, 6.0]\nE   [right]: [1.0, 3.0, 8.0, 4.0, 4.0, 4.0, 2.0, nan, nan, nan, 1.0, 9.0, 5.0, 3.0, 5.0, 1.0, 1.0, 9.0, 2.0, 2.0, 1.0, 5.0, 8.0, 9.0, 9.0, 2.0, nan, nan, nan, 1.0, 8.0, 3.0, 5.0, 8.0, 8.0, 8.0, 0.0, 2.0, 2.0, 0.0, 4.0, 8.0, 9.0, 5.0, 9.0, nan, nan, nan, 8.0, 9.0, 3.0, 2.0, 1.0, 5.0, 5.0, 3.0, 0.0, 4.0, 6.0, 7.0, 8.0, 3.0, 0.0, 3.0, nan, nan, nan, 5.0, 3.0, 2.0, 9.0, 6.0, 1.0, 8.0, 0.0, 9.0, 5.0, 2.0, 3.0, 4.0, 7.0, 7.0, 0.0, nan, nan, nan, 4.0, 3.0, 9.0, 2.0, 2.0, 1.0, 2.0, 1.0, 0.0, 5.0, 1.0, 6.0, 5.0, 6.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [0.0, 7.0, 3.0, 8.0, 5.0, 8.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 3.0, 8.0, 5.0, 9.0, 1.0, 1.0, 8.0, 9.0, 4.0, 3.0, 1.0, 7.0, 2.0, 8.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 9.0, 4.0, 6.0, 0.0, 7.0, 7.0, 9.0, 9.0, 8.0, 9.0, 1.0, 4.0, 4.0, 5.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 9.0, 6.0, 3.0, 7.0, 0.0, 8.0, 1.0, 2.0, 3.0, 4.0, 4.0, 9.0, 4.0, 6.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 4.0, 6.0, 9.0, 0.0, 2.0, 3.0, 7.0, 2.0, 8.0, 2.0, 1.0, 3.0, 6.0, 9.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 9.0, 9.0, 6.0, 5.0, 8.0, 0.0, 2.0, 8.0, 7.0, 0.0, 4.0, 6.0, 5.0, ...]\nE   [right]: [0.0, 7.0, 3.0, 8.0, 5.0, 8.0, 4.0, nan, nan, nan, 4.0, 3.0, 8.0, 5.0, 9.0, 1.0, 1.0, 8.0, 9.0, 4.0, 3.0, 1.0, 7.0, 2.0, 8.0, 3.0, nan, nan, nan, 7.0, 9.0, 4.0, 6.0, 0.0, 7.0, 7.0, 9.0, 9.0, 8.0, 9.0, 1.0, 4.0, 4.0, 5.0, 9.0, nan, nan, nan, 1.0, 9.0, 6.0, 3.0, 7.0, 0.0, 8.0, 1.0, 2.0, 3.0, 4.0, 4.0, 9.0, 4.0, 6.0, 6.0, nan, nan, nan, 7.0, 4.0, 6.0, 9.0, 0.0, 2.0, 3.0, 7.0, 2.0, 8.0, 2.0, 1.0, 3.0, 6.0, 9.0, 1.0, nan, nan, nan, 5.0, 9.0, 9.0, 6.0, 5.0, 8.0, 0.0, 2.0, 8.0, 7.0, 0.0, 4.0, 6.0, 5.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [8.0, 8.0, 1.0, 3.0, 6.0, 9.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 1.0, 1.0, 0.0, 9.0, 1.0, 1.0, 2.0, 9.0, 5.0, 7.0, 0.0, 0.0, 6.0, 4.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 2.0, 9.0, 2.0, 3.0, 0.0, 3.0, 1.0, 9.0, 9.0, 1.0, 8.0, 8.0, 5.0, 2.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 8.0, 0.0, 1.0, 0.0, 7.0, 8.0, 0.0, 7.0, 3.0, 8.0, 5.0, 6.0, 9.0, 0.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 4.0, 6.0, 9.0, 5.0, 6.0, 4.0, 6.0, 2.0, 9.0, 9.0, 9.0, 9.0, 7.0, 7.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 8.0, 3.0, 9.0, 5.0, 1.0, 9.0, 9.0, 3.0, 5.0, 0.0, 9.0, 0.0, 5.0, ...]\nE   [right]: [8.0, 8.0, 1.0, 3.0, 6.0, 9.0, 7.0, nan, nan, nan, 5.0, 1.0, 1.0, 0.0, 9.0, 1.0, 1.0, 2.0, 9.0, 5.0, 7.0, 0.0, 0.0, 6.0, 4.0, 6.0, nan, nan, nan, 6.0, 2.0, 9.0, 2.0, 3.0, 0.0, 3.0, 1.0, 9.0, 9.0, 1.0, 8.0, 8.0, 5.0, 2.0, 2.0, nan, nan, nan, 8.0, 8.0, 0.0, 1.0, 0.0, 7.0, 8.0, 0.0, 7.0, 3.0, 8.0, 5.0, 6.0, 9.0, 0.0, 0.0, nan, nan, nan, 7.0, 4.0, 6.0, 9.0, 5.0, 6.0, 4.0, 6.0, 2.0, 9.0, 9.0, 9.0, 9.0, 7.0, 7.0, 3.0, nan, nan, nan, 2.0, 8.0, 3.0, 9.0, 5.0, 1.0, 9.0, 9.0, 3.0, 5.0, 0.0, 9.0, 0.0, 5.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [9.0, 9.0, 2.0, 2.0, 1.0, 2.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 4.0, 3.0, 8.0, 5.0, 1.0, 3.0, 0.0, 5.0, 3.0, 0.0, 2.0, 7.0, 8.0, 2.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 4.0, 6.0, 0.0, 8.0, 3.0, 4.0, 5.0, 8.0, 7.0, 4.0, 4.0, 1.0, 3.0, 8.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 1.0, 2.0, 2.0, 2.0, 0.0, 3.0, 3.0, 3.0, 6.0, 4.0, 8.0, 9.0, 8.0, 8.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 0.0, 5.0, 1.0, 1.0, 0.0, 8.0, 5.0, 3.0, 8.0, 0.0, 5.0, 9.0, 7.0, 2.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 6.0, 0.0, 3.0, 4.0, 6.0, 0.0, 8.0, 1.0, 9.0, 9.0, 3.0, 2.0, 4.0, ...]\nE   [right]: [9.0, 9.0, 2.0, 2.0, 1.0, 2.0, 9.0, nan, nan, nan, 1.0, 4.0, 3.0, 8.0, 5.0, 1.0, 3.0, 0.0, 5.0, 3.0, 0.0, 2.0, 7.0, 8.0, 2.0, 9.0, nan, nan, nan, 8.0, 4.0, 6.0, 0.0, 8.0, 3.0, 4.0, 5.0, 8.0, 7.0, 4.0, 4.0, 1.0, 3.0, 8.0, 3.0, nan, nan, nan, 4.0, 1.0, 2.0, 2.0, 2.0, 0.0, 3.0, 3.0, 3.0, 6.0, 4.0, 8.0, 9.0, 8.0, 8.0, 1.0, nan, nan, nan, 1.0, 0.0, 5.0, 1.0, 1.0, 0.0, 8.0, 5.0, 3.0, 8.0, 0.0, 5.0, 9.0, 7.0, 2.0, 5.0, nan, nan, nan, 0.0, 6.0, 0.0, 3.0, 4.0, 6.0, 0.0, 8.0, 1.0, 9.0, 9.0, 3.0, 2.0, 4.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [69.0, 89.0, 83.0, 36.0, 88.0, 22.0, 26.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 62.0, 84.0, 57.0, 70.0, 84.0, 54.0, 37.0, 16.0, 15.0, 90.0, 69.0, 63.0, 68.0, 61.0, 46.0, 99.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 73.0, 77.0, 26.0, 5.0, 68.0, 37.0, 69.0, 63.0, 53.0, 83.0, 14.0, 41.0, 98.0, 52.0, 9.0, 34.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 55.0, 7.0, 91.0, 90.0, 56.0, 63.0, 55.0, 74.0, 3.0, 28.0, 38.0, 19.0, 92.0, 5.0, 89.0, 99.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 65.0, 2.0, 73.0, 88.0, 0.0, 79.0, 26.0, 71.0, 99.0, 41.0, 93.0, 12.0, 10.0, 69.0, 14.0, 87.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 32.0, 81.0, 17.0, 48.0, 76.0, 88.0, 91.0, 21.0, 7.0, 56.0, 30.0, 53.0, 66.0, 7.0]\nE   [right]: [69.0, 89.0, 83.0, 36.0, 88.0, 22.0, 26.0, nan, nan, nan, 62.0, 84.0, 57.0, 70.0, 84.0, 54.0, 37.0, 16.0, 15.0, 90.0, 69.0, 63.0, 68.0, 61.0, 46.0, 99.0, nan, nan, nan, 73.0, 77.0, 26.0, 5.0, 68.0, 37.0, 69.0, 63.0, 53.0, 83.0, 14.0, 41.0, 98.0, 52.0, 9.0, 34.0, nan, nan, nan, 55.0, 7.0, 91.0, 90.0, 56.0, 63.0, 55.0, 74.0, 3.0, 28.0, 38.0, 19.0, 92.0, 5.0, 89.0, 99.0, nan, nan, nan, 65.0, 2.0, 73.0, 88.0, 0.0, 79.0, 26.0, 71.0, 99.0, 41.0, 93.0, 12.0, 10.0, 69.0, 14.0, 87.0, nan, nan, nan, 32.0, 81.0, 17.0, 48.0, 76.0, 88.0, 91.0, 21.0, 7.0, 56.0, 30.0, 53.0, 66.0, 7.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [65.0, 39.0, 65.0, 34.0, 62.0, 51.0, 82.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 69.0, 24.0, 87.0, 4.0, 15.0, 16.0, 54.0, 48.0, 57.0, 88.0, 11.0, 26.0, 95.0, 4.0, 82.0, 63.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 52.0, 0.0, 16.0, 74.0, 84.0, 90.0, 3.0, 19.0, 89.0, 38.0, 49.0, 14.0, 19.0, 60.0, 39.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 87.0, 44.0, 0.0, 41.0, 11.0, 77.0, 41.0, 34.0, 85.0, 42.0, 14.0, 51.0, 36.0, 20.0, 58.0, 62.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 56.0, 73.0, 85.0, 21.0, 1.0, 63.0, 5.0, 5.0, 25.0, 59.0, 63.0, 75.0, 99.0, 66.0, 22.0, 49.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 88.0, 16.0, 70.0, 6.0, 22.0, 76.0, 5.0, 97.0, 6.0, 29.0, 1.0, 95.0, 9.0, 23.0, ...]\nE   [right]: [65.0, 39.0, 65.0, 34.0, 62.0, 51.0, 82.0, nan, nan, nan, 69.0, 24.0, 87.0, 4.0, 15.0, 16.0, 54.0, 48.0, 57.0, 88.0, 11.0, 26.0, 95.0, 4.0, 82.0, 63.0, nan, nan, nan, 52.0, 0.0, 16.0, 74.0, 84.0, 90.0, 3.0, 19.0, 89.0, 38.0, 49.0, 14.0, 19.0, 60.0, 39.0, 25.0, nan, nan, nan, 87.0, 44.0, 0.0, 41.0, 11.0, 77.0, 41.0, 34.0, 85.0, 42.0, 14.0, 51.0, 36.0, 20.0, 58.0, 62.0, nan, nan, nan, 56.0, 73.0, 85.0, 21.0, 1.0, 63.0, 5.0, 5.0, 25.0, 59.0, 63.0, 75.0, 99.0, 66.0, 22.0, 49.0, nan, nan, nan, 88.0, 16.0, 70.0, 6.0, 22.0, 76.0, 5.0, 97.0, 6.0, 29.0, 1.0, 95.0, 9.0, 23.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [34.0, 5.0, 68.0, 48.0, 93.0, 93.0, 26.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 33.0, 58.0, 71.0, 83.0, 48.0, 32.0, 71.0, 12.0, 64.0, 47.0, 46.0, 71.0, 41.0, 16.0, 65.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 88.0, 72.0, 29.0, 88.0, 47.0, 25.0, 77.0, 95.0, 92.0, 54.0, 85.0, 65.0, 49.0, 10.0, 82.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 66.0, 45.0, 98.0, 20.0, 56.0, 41.0, 15.0, 29.0, 93.0, 34.0, 10.0, 20.0, 5.0, 17.0, 64.0, 55.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 81.0, 43.0, 61.0, 96.0, 93.0, 7.0, 39.0, 54.0, 14.0, 6.0, 53.0, 97.0, 95.0, 95.0, 90.0, 57.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 23.0, 50.0, 31.0, 87.0, 20.0, 33.0, 33.0, 47.0, 3.0, 70.0, 15.0, 16.0, 27.0, 57.0, ...]\nE   [right]: [34.0, 5.0, 68.0, 48.0, 93.0, 93.0, 26.0, nan, nan, nan, 33.0, 58.0, 71.0, 83.0, 48.0, 32.0, 71.0, 12.0, 64.0, 47.0, 46.0, 71.0, 41.0, 16.0, 65.0, 25.0, nan, nan, nan, 88.0, 72.0, 29.0, 88.0, 47.0, 25.0, 77.0, 95.0, 92.0, 54.0, 85.0, 65.0, 49.0, 10.0, 82.0, 25.0, nan, nan, nan, 66.0, 45.0, 98.0, 20.0, 56.0, 41.0, 15.0, 29.0, 93.0, 34.0, 10.0, 20.0, 5.0, 17.0, 64.0, 55.0, nan, nan, nan, 81.0, 43.0, 61.0, 96.0, 93.0, 7.0, 39.0, 54.0, 14.0, 6.0, 53.0, 97.0, 95.0, 95.0, 90.0, 57.0, nan, nan, nan, 23.0, 50.0, 31.0, 87.0, 20.0, 33.0, 33.0, 47.0, 3.0, 70.0, 15.0, 16.0, 27.0, 57.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [77.0, 43.0, 81.0, 49.0, 54.0, 15.0, 87.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 78.0, 23.0, 62.0, 40.0, 22.0, 20.0, 64.0, 7.0, 10.0, 40.0, 16.0, 0.0, 85.0, 99.0, 64.0, 74.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 36.0, 68.0, 43.0, 73.0, 94.0, 57.0, 50.0, 57.0, 13.0, 18.0, 64.0, 5.0, 38.0, 7.0, 92.0, 37.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 13.0, 34.0, 46.0, 17.0, 69.0, 61.0, 52.0, 36.0, 48.0, 49.0, 4.0, 13.0, 78.0, 54.0, 90.0, 84.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 80.0, 9.0, 68.0, 25.0, 82.0, 31.0, 38.0, 99.0, 99.0, 69.0, 66.0, 70.0, 67.0, 49.0, 13.0, 81.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 61.0, 63.0, 46.0, 64.0, 73.0, 22.0, 51.0, 53.0, 78.0, 43.0, 4.0, 74.0, 56.0, 61.0, ...]\nE   [right]: [77.0, 43.0, 81.0, 49.0, 54.0, 15.0, 87.0, nan, nan, nan, 78.0, 23.0, 62.0, 40.0, 22.0, 20.0, 64.0, 7.0, 10.0, 40.0, 16.0, 0.0, 85.0, 99.0, 64.0, 74.0, nan, nan, nan, 36.0, 68.0, 43.0, 73.0, 94.0, 57.0, 50.0, 57.0, 13.0, 18.0, 64.0, 5.0, 38.0, 7.0, 92.0, 37.0, nan, nan, nan, 13.0, 34.0, 46.0, 17.0, 69.0, 61.0, 52.0, 36.0, 48.0, 49.0, 4.0, 13.0, 78.0, 54.0, 90.0, 84.0, nan, nan, nan, 80.0, 9.0, 68.0, 25.0, 82.0, 31.0, 38.0, 99.0, 99.0, 69.0, 66.0, 70.0, 67.0, 49.0, 13.0, 81.0, nan, nan, nan, 61.0, 63.0, 46.0, 64.0, 73.0, 22.0, 51.0, 53.0, 78.0, 43.0, 4.0, 74.0, 56.0, 61.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [312.0, 9.0, 355.0, 917.0, 824.0, 456.0, 370.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 158.0, 714.0, 784.0, 386.0, 968.0, 67.0, 968.0, 559.0, 632.0, 495.0, 459.0, 248.0, 87.0, 120.0, 14.0, 820.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 205.0, 880.0, 217.0, 143.0, 753.0, 611.0, 305.0, 774.0, 230.0, 804.0, 687.0, 675.0, 883.0, 691.0, 556.0, 642.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 932.0, 351.0, 33.0, 665.0, 291.0, 364.0, 24.0, 143.0, 683.0, 430.0, 983.0, 691.0, 16.0, 919.0, 430.0, 511.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 85.0, 87.0, 755.0, 221.0, 103.0, 883.0, 696.0, 734.0, 425.0, 447.0, 841.0, 415.0, 218.0, 765.0, 217.0, 859.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 431.0, 575.0, 854.0, 505.0, 916.0, 167.0, 939.0, 261.0, 438.0, 268.0, 50.0, 629.0, 16.0, 733.0]\nE   [right]: [312.0, 9.0, 355.0, 917.0, 824.0, 456.0, 370.0, nan, nan, nan, 158.0, 714.0, 784.0, 386.0, 968.0, 67.0, 968.0, 559.0, 632.0, 495.0, 459.0, 248.0, 87.0, 120.0, 14.0, 820.0, nan, nan, nan, 205.0, 880.0, 217.0, 143.0, 753.0, 611.0, 305.0, 774.0, 230.0, 804.0, 687.0, 675.0, 883.0, 691.0, 556.0, 642.0, nan, nan, nan, 932.0, 351.0, 33.0, 665.0, 291.0, 364.0, 24.0, 143.0, 683.0, 430.0, 983.0, 691.0, 16.0, 919.0, 430.0, 511.0, nan, nan, nan, 85.0, 87.0, 755.0, 221.0, 103.0, 883.0, 696.0, 734.0, 425.0, 447.0, 841.0, 415.0, 218.0, 765.0, 217.0, 859.0, nan, nan, nan, 431.0, 575.0, 854.0, 505.0, 916.0, 167.0, 939.0, 261.0, 438.0, 268.0, 50.0, 629.0, 16.0, 733.0]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 1000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [266.0, 617.0, 107.0, 685.0, 12.0, 362.0, 253.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 114.0, 718.0, 472.0, 485.0, 259.0, 694.0, 43.0, 372.0, 656.0, 177.0, 944.0, 578.0, 748.0, 653.0, 772.0, 683.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 942.0, 19.0, 816.0, 683.0, 321.0, 232.0, 978.0, 753.0, 608.0, 733.0, 1.0, 204.0, 746.0, 261.0, 67.0, 278.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 364.0, 188.0, 871.0, 690.0, 942.0, 891.0, 874.0, 535.0, 782.0, 133.0, 318.0, 633.0, 754.0, 86.0, 608.0, 223.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 453.0, 222.0, 713.0, 381.0, 3.0, 673.0, 210.0, 228.0, 477.0, 52.0, 473.0, 747.0, 330.0, 6.0, 229.0, 734.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 903.0, 857.0, 69.0, 203.0, 343.0, 245.0, 848.0, 943.0, 92.0, 941.0, 815.0, 697.0, 229.0, 366.0, ...]\nE   [right]: [266.0, 617.0, 107.0, 685.0, 12.0, 362.0, 253.0, nan, nan, nan, 114.0, 718.0, 472.0, 485.0, 259.0, 694.0, 43.0, 372.0, 656.0, 177.0, 944.0, 578.0, 748.0, 653.0, 772.0, 683.0, nan, nan, nan, 942.0, 19.0, 816.0, 683.0, 321.0, 232.0, 978.0, 753.0, 608.0, 733.0, 1.0, 204.0, 746.0, 261.0, 67.0, 278.0, nan, nan, nan, 364.0, 188.0, 871.0, 690.0, 942.0, 891.0, 874.0, 535.0, 782.0, 133.0, 318.0, 633.0, 754.0, 86.0, 608.0, 223.0, nan, nan, nan, 453.0, 222.0, 713.0, 381.0, 3.0, 673.0, 210.0, 228.0, 477.0, 52.0, 473.0, 747.0, 330.0, 6.0, 229.0, 734.0, nan, nan, nan, 903.0, 857.0, 69.0, 203.0, 343.0, 245.0, 848.0, 943.0, 92.0, 941.0, 815.0, 697.0, 229.0, 366.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 10000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [320.0, 924.0, 425.0, 768.0, 189.0, 946.0, 351.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 709.0, 950.0, 440.0, 330.0, 36.0, 337.0, 26.0, 538.0, 490.0, 916.0, 31.0, 896.0, 764.0, 687.0, 437.0, 695.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 67.0, 719.0, 528.0, 652.0, 782.0, 256.0, 720.0, 785.0, 911.0, 715.0, 833.0, 802.0, 416.0, 429.0, 549.0, 464.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 894.0, 394.0, 273.0, 431.0, 323.0, 277.0, 332.0, 104.0, 634.0, 259.0, 216.0, 941.0, 89.0, 358.0, 690.0, 601.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 389.0, 19.0, 116.0, 798.0, 720.0, 672.0, 138.0, 316.0, 269.0, 492.0, 82.0, 145.0, 929.0, 102.0, 505.0, 260.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 253.0, 266.0, 786.0, 147.0, 602.0, 455.0, 969.0, 645.0, 602.0, 375.0, 154.0, 828.0, 760.0, 375.0, ...]\nE   [right]: [320.0, 924.0, 425.0, 768.0, 189.0, 946.0, 351.0, nan, nan, nan, 709.0, 950.0, 440.0, 330.0, 36.0, 337.0, 26.0, 538.0, 490.0, 916.0, 31.0, 896.0, 764.0, 687.0, 437.0, 695.0, nan, nan, nan, 67.0, 719.0, 528.0, 652.0, 782.0, 256.0, 720.0, 785.0, 911.0, 715.0, 833.0, 802.0, 416.0, 429.0, 549.0, 464.0, nan, nan, nan, 894.0, 394.0, 273.0, 431.0, 323.0, 277.0, 332.0, 104.0, 634.0, 259.0, 216.0, 941.0, 89.0, 358.0, 690.0, 601.0, nan, nan, nan, 389.0, 19.0, 116.0, 798.0, 720.0, 672.0, 138.0, 316.0, 269.0, 492.0, 82.0, 145.0, 929.0, 102.0, 505.0, 260.0, nan, nan, nan, 253.0, 266.0, 786.0, 147.0, 602.0, 455.0, 969.0, 645.0, 602.0, 375.0, 154.0, 828.0, 760.0, 375.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n### The error message from the failing test\n```text\nn = 100000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [654.0, 878.0, 324.0, 745.0, 503.0, 135.0, 252.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 762.0, 199.0, 192.0, 239.0, 842.0, 104.0, 150.0, 424.0, 746.0, 600.0, 832.0, 999.0, 266.0, 596.0, 650.0, 693.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 410.0, 253.0, 245.0, 239.0, 194.0, 187.0, 282.0, 98.0, 490.0, 745.0, 622.0, 422.0, 684.0, 468.0, 116.0, 167.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 326.0, 247.0, 227.0, 490.0, 553.0, 907.0, 62.0, 763.0, 567.0, 80.0, 311.0, 725.0, 793.0, 80.0, 39.0, 153.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 662.0, 973.0, 145.0, 982.0, 50.0, 499.0, 156.0, 24.0, 950.0, 328.0, 502.0, 587.0, 704.0, 916.0, 42.0, 448.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 606.0, 843.0, 179.0, 496.0, 471.0, 676.0, 731.0, 734.0, 389.0, 839.0, 332.0, 111.0, 180.0, 719.0, ...]\nE   [right]: [654.0, 878.0, 324.0, 745.0, 503.0, 135.0, 252.0, nan, nan, nan, 762.0, 199.0, 192.0, 239.0, 842.0, 104.0, 150.0, 424.0, 746.0, 600.0, 832.0, 999.0, 266.0, 596.0, 650.0, 693.0, nan, nan, nan, 410.0, 253.0, 245.0, 239.0, 194.0, 187.0, 282.0, 98.0, 490.0, 745.0, 622.0, 422.0, 684.0, 468.0, 116.0, 167.0, nan, nan, nan, 326.0, 247.0, 227.0, 490.0, 553.0, 907.0, 62.0, 763.0, 567.0, 80.0, 311.0, 725.0, 793.0, 80.0, 39.0, 153.0, nan, nan, nan, 662.0, 973.0, 145.0, 982.0, 50.0, 499.0, 156.0, 24.0, 950.0, 328.0, 502.0, 587.0, 704.0, 916.0, 42.0, 448.0, nan, nan, nan, 606.0, 843.0, 179.0, 496.0, 471.0, 676.0, 731.0, 734.0, 389.0, 839.0, 332.0, 111.0, 180.0, 719.0, ...]\n\npandas/_libs/testing.pyx:174: AssertionError\n\n```\n",
    "6": "## Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n### Case 1\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     4\n1     8\n2     1\n3     1\n4     5\n     ..\n95    8\n96    4\n97    0\n98    2\n99    7\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,\n        2,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,\n        6,  6,  6,  6,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10,\n       10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13,\n       13, 14, 14, 15, 15, 15, 15, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18,\n       18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 23])`, type: `ndarray`\n\n_, value: `24`, type: `int`\n\nval, value: `array([0, 0, 1, 3, 4, 4, 7, 8, 8, 8, 0, 7, 8, 8, 0, 1, 1, 4, 0, 1, 2, 3,\n       7, 0, 1, 4, 5, 6, 0, 2, 6, 9, 0, 2, 2, 5, 6, 9, 2, 7, 4, 6, 6, 6,\n       7, 9, 2, 3, 4, 8, 0, 2, 3, 7, 9, 9, 1, 2, 3, 3, 4, 7, 7, 0, 3, 5,\n       2, 2, 4, 0, 7, 1, 1, 8, 8, 5, 0, 2, 4, 5, 7, 7, 9, 0, 5, 9, 1, 5,\n       6, 7, 1, 2, 5, 8, 6, 6, 7, 8, 8, 3])`, type: `ndarray`\n\nsorter, value: `array([35, 58, 70, 60,  0, 43, 99, 38, 54, 94, 15, 50,  1, 95, 40,  2, 53,\n       96, 23,  3, 39, 10,  8, 92, 26, 93,  4, 25,  5, 69, 37, 33, 97, 41,\n       47, 82,  6, 63, 61,  7, 57,  9, 52, 85, 32, 20, 44, 14, 62, 11, 67,\n       12, 76, 90, 48, 79, 30, 59, 36, 83, 89, 13, 81, 16, 80, 75, 45, 77,\n       17, 51, 18, 19, 46, 68, 71, 21, 34, 98, 31, 42, 22, 88, 91, 87, 24,\n       74, 72, 29, 86, 27, 84, 28, 78, 64, 56, 66, 49, 65, 55, 73])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0, 10, 14, 18, 23, 28, 32, 38, 40, 46, 50, 56, 63, 66, 69, 71, 75,\n       76, 83, 86, 90, 94, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 3, 3, 5, 5, 4, 5, 2, 4, 4, 5, 5, 3, 2, 2, 2, 1, 6, 3, 4, 4, 3,\n       1, 1])`, type: `ndarray`\n\nres, value: `array([6, 3, 3, 5, 5, 4, 5, 2, 4, 4, 5, 5, 3, 2, 2, 2, 1, 6, 3, 4, 4, 3,\n       1, 1])`, type: `ndarray`\n\nri, value: `Index(['o', 'g', 'c', 'm', 'k', 'w', 'j', 'r', 'z', 'p', 'b', 'l', 'x', 'e',\n       'd', 'i', 'f', 't', 'q', 'h', 'y', 'n', 'u', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\no    6\ng    3\nc    3\nm    5\nk    5\nw    4\nj    5\nr    2\nz    4\np    4\nb    5\nl    5\nx    3\ne    2\nd    2\ni    2\nf    1\nt    6\nq    3\nh    4\ny    4\nn    3\nu    1\nv    1\nName: julie, dtype: int64`, type: `Series`\n\n### Case 2\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     4\n1     8\n2     1\n3     1\n4     5\n     ..\n95    8\n96    4\n97    0\n98    2\n99    7\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9, 10, 11, 12, 12,\n       13, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 26,\n       26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 34, 34, 35, 36, 37, 38,\n       39, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53,\n       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69,\n       70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84])`, type: `ndarray`\n\n_, value: `85`, type: `int`\n\nval, value: `array([3, 4, 8, 1, 1, 5, 0, 6, 7, 7, 6, 6, 9, 3, 8, 0, 2, 3, 7, 7, 3, 0,\n       0, 4, 7, 1, 5, 7, 9, 0, 5, 6, 1, 5, 7, 2, 1, 4, 5, 7, 9, 0, 0, 4,\n       8, 2, 3, 6, 8, 2, 0, 2, 2, 2, 1, 2, 9, 9, 7, 7, 0, 1, 8, 8, 6, 4,\n       6, 0, 2, 4, 8, 8, 6, 8, 2, 1, 8, 1, 6, 3, 9, 5, 3, 2, 5, 9, 3, 5,\n       1, 0, 7, 4, 7, 0, 4, 8, 4, 0, 2, 7])`, type: `ndarray`\n\nsorter, value: `array([60,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 52, 20, 10, 11, 67, 12,\n       83, 13, 81, 14, 15, 16, 17, 18, 19, 21, 22, 91, 23, 24, 25, 26, 29,\n       27, 28, 30, 31, 42, 32, 33, 34, 35, 43, 94, 59, 36, 37, 38, 39, 40,\n       41, 44, 45, 46, 47, 63, 48, 49, 50, 51, 53, 54, 55, 56, 57, 85, 58,\n       61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 86, 73, 74, 75, 76, 77, 78,\n       79, 80, 82, 84, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  2,  3,  4,  5,  6,  7,  8,  9, 10, 13, 14, 15, 17, 20, 21, 22,\n       23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42,\n       45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82,\n       83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('o', '2015-08-29') ... ('o', '2015-08-25')],\n           names=['jim', 'joe'])`, shape: `(85,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \no    2015-08-29    2\ng    2015-08-31    1\nc    2015-08-26    1\nm    2015-08-27    1\nk    2015-08-28    1\n                  ..\ng    2015-09-01    1\nc    2015-08-29    1\nj    2015-08-24    1\nt    2015-08-26    1\no    2015-08-25    1\nName: julie, Length: 85, dtype: int64`, type: `Series`\n\n### Case 3\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     4.0\n1     8.0\n2     1.0\n3     1.0\n4     5.0\n     ... \n95    8.0\n96    4.0\n97    0.0\n98    2.0\n99    7.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,\n        1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,\n        5,  5,  5,  5,  6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,\n        9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12,\n       13, 13, 13, 14, 14, 14, 14, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17,\n       17, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 22, 23])`, type: `ndarray`\n\n_, value: `24`, type: `int`\n\nval, value: `array([ 0.00000000e+00,  2.00000000e+00, ... ,  8.00000000e+00,  3.00000000e+00])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([35, 69, 52, 86, 18,  1, 58, 70, 60,  0, 43, 99, 38, 54, 94, 40,  2,\n       53, 96,  8, 23,  3, 39, 10, 26, 92, 93,  4, 25,  5, 37, 33, 47, 97,\n       41, 82,  6, 63,  7, 61,  9, 85, 57, 32, 20, 44, 14, 62, 11, 67, 12,\n       76, 90, 48, 79, 83, 30, 59, 36, 89, 13, 81, 15, 50, 95, 16, 80, 75,\n       45, 77, 17, 46, 19, 68, 71, 21, 34, 98, 31, 42, 22, 88, 91, 87, 24,\n       74, 27, 72, 29, 28, 64, 84, 78, 65, 66, 56, 49, 51, 55, 73])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 15, 19, 24, 29, 32, 38, 40, 45, 49, 55, 62, 65, 68, 71, 75, 76,\n       83, 86, 89, 93, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 6, 3, 5, 5, 3, 6, 2, 4, 4, 5, 6, 3, 3, 3, 3, 1, 6, 3, 3, 2, 3,\n       1, 1, 1])`, type: `ndarray`\n\nres, value: `array([6, 3, 5, 5, 3, 6, 2, 4, 4, 5, 6, 3, 3, 3, 3, 1, 6, 3, 3, 2, 3, 1,\n       1, 1])`, type: `ndarray`\n\nri, value: `Index(['o', 'c', 'm', 'k', 'w', 'j', 'r', 'z', 'p', 'b', 'l', 'g', 'x', 'e',\n       'i', 'f', 't', 'q', 'h', 'y', 'n', 'd', 'u', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\no    6\nc    3\nm    5\nk    5\nw    3\nj    6\nr    2\nz    4\np    4\nb    5\nl    6\ng    3\nx    3\ne    3\ni    3\nf    1\nt    6\nq    3\nh    3\ny    2\nn    3\nd    1\nu    1\nv    1\nName: julie, dtype: int64`, type: `Series`\n\n### Case 4\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      0\n1      5\n2      9\n3      0\n4      5\n      ..\n995    0\n996    7\n997    5\n998    5\n999    8\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, 1, 1, 1, 1, 1, 1, ... ,\n       7, 8, 8, 9, 9, 9, 9, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0, 682, 995, 161, 203, ... , 288, 494, 529, 718, 958, 971])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  39,  69, 118, 158, 181, 221, 261, 301, 340, 379, 426, 477,\n       521, 552, 584, 622, 663, 695, 741, 776, 816, 858, 892, 931, 970])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 1, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 0, 0, 0, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10,  9, 10, 10, 10,  8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10,  9,  9, 10,  9])`, type: `ndarray`\n\nres, value: `array([10,  9, 10, 10, 10,  8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10,  9,  9, 10,  9])`, type: `ndarray`\n\nri, value: `Index(['h', 'x', 'a', 'o', 'g', 's', 'j', 'u', 'l', 'y', 'e', 'b', 'w', 'f',\n       'r', 'm', 'n', 'p', 'v', 'd', 'c', 'i', 'q', 't', 'z', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nh    10\nx     9\na    10\no    10\ng    10\ns     8\nj    10\nu    10\nl    10\ny    10\ne    10\nb    10\nw    10\nf    10\nr    10\nm    10\nn    10\np    10\nv    10\nd    10\nc    10\ni    10\nq     9\nt     9\nz    10\nk     9\nName: julie, dtype: int64`, type: `Series`\n\n### Case 5\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      0\n1      5\n2      9\n3      0\n4      5\n      ..\n995    0\n996    7\n997    5\n998    5\n999    8\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 252, 253, 253, 253, 254, 255])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `256`, type: `int`\n\nval, value: `array([0, 4, 5, 9, 9, 9, 1, 2, 5, ... ,\n       4, 2, 4, 3, 5, 2, 7, 9, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([  0, 398, 220,  53, 396, ... , 879, 905, 942, 958, 913, 954])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   6,  10,  14,  20, ... , 991, 992, 993, 995, 998, 999])`, shape: `(256,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 0, 0, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([4, 4, 4, 5, 4, 2, 5, 6, 4, ... , 1, 1, 1, 1, 1, 1, 2, 3, 1, 1])`, shape: `(256,)`, type: `ndarray`\n\nres, value: `array([4, 4, 4, 5, 4, 2, 5, 6, 4, ... , 1, 1, 1, 1, 1, 1, 2, 3, 1, 1])`, shape: `(256,)`, type: `ndarray`\n\nri, value: `MultiIndex([('h', '2015-08-27') ... ('k', '2015-08-23')],\n           names=['jim', 'joe'], length=256)`, shape: `(256,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nh    2015-08-27    4\nx    2015-08-27    4\n     2015-08-30    4\na    2015-08-23    5\no    2015-08-23    4\n                  ..\nq    2015-09-01    1\nh    2015-08-24    2\nk    2015-08-31    3\ng    2015-08-26    1\nk    2015-08-23    1\nName: julie, Length: 256, dtype: int64`, type: `Series`\n\n### Case 6\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      0.0\n1      5.0\n2      9.0\n3      0.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    8.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.00000000e+00,  9.00000000e+00])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      0.000000e+00\n1      5.000000e+00\n2      9.000000e+00\n3      0.000000e+00\n4      5.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    5.000000e+00\n999    8.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 491,  79, 288, 529, 718, 971])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  96, 125, 167, 204, 226, 265, 303, 340, 379, 416, 466, 507,\n       551, 580, 611, 647, 687, 718, 757, 789, 827, 867, 898, 936, 972])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 1, 0, 1, 0, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11, 11, 10, 10, 11, 11,  9, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 10, 10, 11,  9])`, type: `ndarray`\n\nres, value: `array([11, 10, 10, 11, 11,  9, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 10, 10, 11,  9])`, type: `ndarray`\n\nri, value: `Index(['h', 'x', 'a', 'o', 'g', 's', 'j', 'u', 'l', 'y', 'b', 'w', 'e', 'f',\n       'r', 'm', 'n', 'p', 'v', 'd', 'c', 'i', 'q', 't', 'z', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nh    11\nx    10\na    10\no    11\ng    11\ns     9\nj    11\nu    11\nl    11\ny    10\nb    11\nw    11\ne    11\nf    11\nr    11\nm    11\nn    11\np    11\nv    11\nd    11\nc    11\ni    11\nq    10\nt    10\nz    11\nk     9\nName: julie, dtype: int64`, type: `Series`\n\n### Case 7\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       1\n1       1\n2       6\n3       7\n4       0\n       ..\n9995    5\n9996    1\n9997    6\n9998    7\n9999    6\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([1621, 1687, 1752, ..., 9508, 9730, 9849])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  385,  739, 1131, 1531, 1941, 2342, 2718, 3087, 3497, 3855,\n       4238, 4655, 5026, 5380, 5752, 6134, 6513, 6903, 7321, 7727, 8108,\n       8490, 8857, 9237, 9592])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['g', 'a', 'r', 'x', 'u', 'o', 'w', 'k', 'c', 'f', 'b', 'e', 'h', 'v',\n       'y', 'z', 'n', 't', 'j', 's', 'l', 'm', 'q', 'd', 'p', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ng    10\na    10\nr    10\nx    10\nu    10\no    10\nw    10\nk    10\nc    10\nf    10\nb    10\ne    10\nh    10\nv    10\ny    10\nz    10\nn    10\nt    10\nj    10\ns    10\nl    10\nm    10\nq    10\nd    10\np    10\ni    10\nName: julie, dtype: int64`, type: `Series`\n\n### Case 8\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       1\n1       1\n2       6\n3       7\n4       0\n       ..\n9995    5\n9996    1\n9997    6\n9998    7\n9999    6\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([3359, 3388, 9578, ..., 8131, 9096, 9140])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   33,   72,  118,  157, ... , 9827, 9869, 9901, 9932, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10,  9, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10,  9, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('g', '2015-08-26') ... ('d', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ng    2015-08-26    10\na    2015-08-24    10\nr    2015-08-24    10\nx    2015-08-31    10\nu    2015-08-27    10\n                   ..\nw    2015-08-27    10\nj    2015-08-30    10\nx    2015-08-30    10\na    2015-08-25     9\nd    2015-08-29    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 9\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       1.0\n1       1.0\n2       6.0\n3       7.0\n4       0.0\n       ... \n9995    5.0\n9996    1.0\n9997    6.0\n9998    7.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9114, 9251, 9730])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  949, 1324, 1708, 2094, 2469, 2827, 3161, 3546, 3889, 4225,\n       4587, 4972, 5320, 5651, 5995, 6361, 6720, 7086, 7482, 7864, 8220,\n       8580, 8925, 9280, 9618])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['g', 'r', 'x', 'u', 'o', 'w', 'k', 'c', 'f', 'a', 'b', 'e', 'h', 'v',\n       'y', 'z', 'n', 't', 'j', 's', 'l', 'm', 'q', 'd', 'p', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ng    11\nr    11\nx    11\nu    11\no    11\nw    11\nk    11\nc    11\nf    11\na    11\nb    11\ne    11\nh    11\nv    11\ny    11\nz    11\nn    11\nt    11\nj    11\ns    11\nl    11\nm    11\nq    11\nd    11\np    11\ni    11\nName: julie, dtype: int64`, type: `Series`\n\n### Case 10\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        9\n1        5\n2        5\n3        1\n4        0\n        ..\n99995    0\n99996    6\n99997    1\n99998    3\n99999    9\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([  159,   518,   937, ..., 98588, 98734, 98826])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3831,  7697, 11522, 15324, 19137, 23040, 26852, 30597,\n       34391, 38156, 42006, 45890, 49689, 53402, 57172, 61082, 64869,\n       68871, 72855, 76675, 80590, 84507, 88405, 92206, 96104])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['p', 's', 'm', 'r', 'l', 'c', 'x', 't', 'z', 'd', 'j', 'o', 'v', 'n',\n       'w', 'e', 'i', 'q', 'f', 'a', 'g', 'k', 'b', 'y', 'h', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    10\ns    10\nm    10\nr    10\nl    10\nc    10\nx    10\nt    10\nz    10\nd    10\nj    10\no    10\nv    10\nn    10\nw    10\ne    10\ni    10\nq    10\nf    10\na    10\ng    10\nk    10\nb    10\ny    10\nh    10\nu    10\nName: julie, dtype: int64`, type: `Series`\n\n### Case 11\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        9\n1        5\n2        5\n3        1\n4        0\n        ..\n99995    0\n99996    6\n99997    1\n99998    3\n99999    9\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([ 8333,  8974, 13864, ..., 95912, 96050, 97680])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   344,   776,  1174, ... , 98058, 98429, 98796, 99186, 99593])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-08-27') ... ('g', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-08-27    10\n     2015-08-26    10\ns    2015-08-28    10\nm    2015-08-29    10\nr    2015-08-28    10\n                   ..\nt    2015-08-25    10\nc    2015-08-27    10\n     2015-08-30    10\ns    2015-08-23    10\ng    2015-08-27    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 12\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        9.0\n1        5.0\n2        5.0\n3        1.0\n4        0.0\n        ... \n99995    0.0\n99996    6.0\n99997    1.0\n99998    3.0\n99999    9.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 98506, 98588, 98734])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9495, 13108, 16719, 20294, 23873, 27540, 31119, 34646,\n       38213, 41750, 45400, 49057, 52652, 56179, 59862, 63448, 67208,\n       70956, 74564, 78244, 81920, 85409, 89101, 92655, 96339])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['p', 's', 'm', 'r', 'l', 'c', 'x', 't', 'z', 'd', 'j', 'o', 'v', 'w',\n       'e', 'i', 'q', 'f', 'a', 'g', 'k', 'n', 'b', 'y', 'h', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    11\ns    11\nm    11\nr    11\nl    11\nc    11\nx    11\nt    11\nz    11\nd    11\nj    11\no    11\nv    11\nw    11\ne    11\ni    11\nq    11\nf    11\na    11\ng    11\nk    11\nn    11\nb    11\ny    11\nh    11\nu    11\nName: julie, dtype: int64`, type: `Series`\n\n### Case 13\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     95\n1     48\n2     30\n3     73\n4     80\n      ..\n95    80\n96    52\n97    68\n98    34\n99    95\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  3,\n        3,  3,  3,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  7,\n        7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11,\n       11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16,\n       16, 16, 16, 16, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 20, 20, 20,\n       21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 24, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([ 0, 14, 31, 35, 66, 69, 95, 11, 36, 48, 49, 30, 36, 39, 82, 89, 32,\n       47, 50, 73,  0, 12, 41, 68, 75, 80,  6, 18, 49, 72,  2, 18, 68, 25,\n       66, 68, 84, 96,  4, 34, 67,  4, 34, 44, 58,  2,  6, 75, 85, 99, 13,\n       14, 91, 97, 23, 26, 55, 95,  9, 46, 73, 52, 82, 26, 50, 79, 87, 13,\n       24, 69, 90, 98, 60, 71,  4,  8, 12, 18, 75, 87, 31, 70,  8, 45, 47,\n        4, 35, 58, 62, 62, 91, 22, 61, 73, 79, 80, 15, 22, 39, 51])`, type: `ndarray`\n\nsorter, value: `array([16, 90, 21, 15, 40, 60,  0, 80, 74,  1, 56,  2, 77, 18, 88, 64, 26,\n       13, 33,  3, 94, 67, 41, 97, 27,  4,  5, 46, 12, 82,  6, 42, 22,  8,\n        7, 38, 47, 79, 73, 98,  9, 53, 43, 10, 87, 11, 92, 37, 19, 59, 66,\n       14, 72, 20, 17, 89, 75, 99, 24, 30, 23, 96, 25, 29, 93, 28, 70, 71,\n       31, 35, 58, 57, 32, 62, 34, 76, 63, 83, 44, 85, 55, 36, 91, 39, 52,\n       48, 68, 54, 45, 84, 69, 61, 49, 50, 51, 95, 65, 81, 86, 78])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  7, 11, 16, 20, 26, 30, 33, 38, 41, 45, 50, 54, 58, 61, 63, 67,\n       72, 74, 80, 82, 85, 91, 96, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([7, 4, 5, 4, 6, 4, 3, 5, 3, 4, 5, 4, 4, 3, 2, 4, 5, 2, 6, 2, 3, 5,\n       5, 2, 2])`, type: `ndarray`\n\nres, value: `array([7, 4, 5, 4, 6, 4, 3, 5, 3, 4, 5, 4, 4, 3, 2, 4, 5, 2, 6, 2, 3, 5,\n       5, 2, 2])`, type: `ndarray`\n\nri, value: `Index(['n', 'a', 'u', 's', 't', 'c', 'e', 'r', 'b', 'q', 'o', 'j', 'z', 'h',\n       'k', 'v', 'w', 'y', 'p', 'f', 'm', 'd', 'l', 'x', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nn    7\na    4\nu    5\ns    4\nt    6\nc    4\ne    3\nr    5\nb    3\nq    4\no    5\nj    4\nz    4\nh    3\nk    2\nv    4\nw    5\ny    2\np    6\nf    2\nm    3\nd    5\nl    5\nx    2\ni    2\nName: julie, dtype: int64`, type: `Series`\n\n### Case 14\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     95\n1     48\n2     30\n3     73\n4     80\n      ..\n95    80\n96    52\n97    68\n98    34\n99    95\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  1,  2,  3,  4,  5,  5,  6,  7,  8,  9,  9, 10, 10,\n       10, 11, 12, 13, 13, 14, 14, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22,\n       22, 23, 24, 24, 24, 25, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33, 34,\n       35, 36, 37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 47, 48, 48,\n       49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 58, 59, 60, 61, 62, 62, 63,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, value: `79`, type: `int`\n\nval, value: `array([ 0, 14, 35, 95, 48, 30, 73, 80,  6, 18,  2, 66, 25,  4, 67,  4, 44,\n       58,  2, 49, 47, 50, 13, 14, 97, 23, 39, 75, 85, 31, 68, 73,  9, 52,\n       82, 32, 12, 68, 75, 26, 79, 46, 24, 60,  4,  8, 69, 70, 68, 45, 66,\n       41, 18, 34, 75, 58, 62, 84,  4, 61, 73, 79, 47, 31, 11, 49, 90, 98,\n       99, 69, 22, 71, 12, 89, 15, 35, 91, 50, 87, 13, 91, 36, 26, 55, 36,\n       51, 96, 22, 72, 18, 62, 87, 39, 82,  8,  6,  0, 80, 34, 95])`, type: `ndarray`\n\nsorter, value: `array([16, 90, 15,  0,  1,  2,  3,  4,  5, 46,  6,  7,  8, 73,  9, 53, 10,\n       87, 11, 12, 13, 33, 66, 14, 20, 17, 18, 37, 19, 21, 22, 23, 24, 96,\n       25, 26, 67, 97, 27, 29, 28, 30, 31, 32, 34, 76, 35, 36, 38, 39, 40,\n       41, 42, 43, 44, 54, 45, 47, 48, 49, 50, 51, 52, 55, 80, 56, 58, 57,\n       59, 60, 61, 62, 63, 64, 65, 68, 69, 93, 70, 71, 72, 74, 89, 75, 77,\n       78, 79, 81, 82, 83, 84, 85, 86, 88, 91, 92, 94, 95, 98, 99])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  4,  5,  6,  7,  8, 10, 11, 12, 13, 15, 18, 19, 20, 22, 25, 26,\n       27, 29, 30, 31, 32, 33, 35, 36, 39, 41, 42, 43, 44, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69,\n       70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([4, 1, 1, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1,\n       2, 1, 3, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([4, 1, 1, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1,\n       2, 1, 3, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('n', '2015-08-27') ... ('z', '2015-08-28')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nn    2015-08-27    4\na    2015-08-29    1\nu    2015-08-25    1\ns    2015-08-25    1\nt    2015-09-01    1\n                  ..\no    2015-09-01    1\nt    2015-08-25    1\nl    2015-08-26    1\nb    2015-08-27    1\nz    2015-08-28    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n### Case 15\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     95.0\n1     48.0\n2     30.0\n3     73.0\n4     80.0\n      ... \n95    80.0\n96    52.0\n97    68.0\n98    34.0\n99    95.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,\n        6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9,  9,\n       10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 14,\n       15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 20,\n       20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 23, 23, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([ 3.90000000e+01,  3.90000000e+01, ... ,  2.20000000e+01,  5.10000000e+01])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([18, 86, 52,  1, 35, 69, 16, 90, 21, 15, 40, 60,  0, 64,  2, 77, 88,\n       26, 13, 33,  3, 27, 94, 67, 41, 97,  4, 46,  5, 12, 82,  6, 42, 22,\n        7,  8, 47, 38, 79,  9, 73, 98, 53, 43, 10, 87, 11, 92, 37, 19, 59,\n       66, 14, 72, 20, 17, 89, 75, 99, 24, 30, 23, 96, 25, 28, 29, 93, 70,\n       71, 31, 58, 57, 32, 62, 83, 85, 34, 76, 63, 44, 55, 36, 91, 39, 45,\n       84, 48, 68, 54, 61, 49, 50, 51, 95, 80, 74, 56, 65, 81, 78])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 13, 17, 21, 27, 31, 34, 39, 42, 46, 51, 55, 59, 62, 64, 68, 72,\n       74, 80, 82, 84, 89, 94, 97, 99])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 7, 4, 4, 6, 4, 3, 3, 3, 4, 5, 4, 4, 3, 2, 4, 4, 2, 5, 2, 2, 4,\n       5, 3, 2, 1])`, type: `ndarray`\n\nres, value: `array([7, 4, 4, 6, 4, 3, 3, 3, 4, 5, 4, 4, 3, 2, 4, 4, 2, 5, 2, 2, 4, 5,\n       3, 2, 1])`, type: `ndarray`\n\nri, value: `Index(['n', 'u', 's', 't', 'c', 'e', 'r', 'b', 'q', 'o', 'j', 'z', 'h', 'k',\n       'v', 'w', 'y', 'p', 'f', 'm', 'd', 'l', 'a', 'x', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nn    7\nu    4\ns    4\nt    6\nc    4\ne    3\nr    3\nb    3\nq    4\no    5\nj    4\nz    4\nh    3\nk    2\nv    4\nw    4\ny    2\np    5\nf    2\nm    2\nd    4\nl    5\na    3\nx    2\ni    1\nName: julie, dtype: int64`, type: `Series`\n\n### Case 16\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      89\n1      97\n2      97\n3      44\n4      11\n       ..\n995    63\n996    84\n997     8\n998    53\n999     5\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 1,  3,  4,  8, 16, 25, 26, ... , 73, 76, 77, 79, 85, 85, 92, 95])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([ 58, 780, 185, 770, 112, ... , 347, 934, 258, 515, 929, 212])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  40,  86, 130, 163, 218, 259, 290, 328, 360, 401, 448, 488,\n       530, 566, 595, 651, 678, 711, 750, 795, 831, 859, 894, 937, 975])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([37, 34, 35, 27, 42, 34, 27, 30, 25, 31, 38, 30, 34, 28, 25, 44, 23,\n       25, 32, 39, 31, 23, 29, 36, 30, 24])`, type: `ndarray`\n\nres, value: `array([37, 34, 35, 27, 42, 34, 27, 30, 25, 31, 38, 30, 34, 28, 25, 44, 23,\n       25, 32, 39, 31, 23, 29, 36, 30, 24])`, type: `ndarray`\n\nri, value: `Index(['r', 'n', 't', 'q', 'a', 'l', 'o', 'i', 'w', 'v', 'm', 'd', 's', 'x',\n       'y', 'c', 'h', 'p', 'k', 'f', 'e', 'g', 'u', 'b', 'z', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nr    37\nn    34\nt    35\nq    27\na    42\nl    34\no    27\ni    30\nw    25\nv    31\nm    38\nd    30\ns    34\nx    28\ny    25\nc    44\nh    23\np    25\nk    32\nf    39\ne    31\ng    23\nu    29\nb    36\nz    30\nj    24\nName: julie, dtype: int64`, type: `Series`\n\n### Case 17\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      89\n1      97\n2      97\n3      44\n4      11\n       ..\n995    63\n996    84\n997     8\n998    53\n999     5\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   1,   1, ... , 251, 252, 253, 254, 254, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `255`, type: `int`\n\nval, value: `array([52, 65, 89, 25, 25, 34, 51, ... , 90, 42, 44, 91, 87, 15, 44, 89])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([171, 954,   0,  98, 281, ... , 883, 851, 887, 889, 892, 936])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   3,  10,  15,  19, ... , 987, 991, 993, 995, 996, 997])`, shape: `(255,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 0, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([3, 6, 5, 4, 6, 5, 5, 4, 4, ... , 1, 1, 1, 1, 4, 2, 2, 1, 1, 3])`, shape: `(255,)`, type: `ndarray`\n\nres, value: `array([3, 6, 5, 4, 6, 5, 5, 4, 4, ... , 1, 1, 1, 1, 4, 2, 2, 1, 1, 3])`, shape: `(255,)`, type: `ndarray`\n\nri, value: `MultiIndex([('r', '2015-08-31') ... ('m', '2015-08-31')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nr    2015-08-31    3\nn    2015-08-23    6\nt    2015-09-01    5\nq    2015-08-28    4\na    2015-08-27    6\n                  ..\nk    2015-08-25    2\ny    2015-08-25    2\nn    2015-08-25    1\nq    2015-09-01    1\nm    2015-08-31    3\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n### Case 18\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      89.0\n1      97.0\n2      97.0\n3      44.0\n4      11.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    53.0\n999     5.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.20000000e+01,  9.50000000e+01])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      8.900000e+01\n1      9.700000e+01\n2      9.700000e+01\n3      4.400000e+01\n4      1.100000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    5.300000e+01\n999    5.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 347, 934, 258, 515, 929, 212])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  94, 138, 168, 218, 255, 286, 323, 354, 394, 437, 474, 514,\n       548, 576, 627, 653, 694, 725, 763, 803, 839, 863, 897, 939, 976])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([40, 27, 31, 23, 30, 27, 26, 28, 20, 26, 34, 26, 33, 27, 20, 39, 20,\n       28, 19, 30, 32, 25, 14, 24, 32, 24, 23])`, type: `ndarray`\n\nres, value: `array([27, 31, 23, 30, 27, 26, 28, 20, 26, 34, 26, 33, 27, 20, 39, 20, 28,\n       19, 30, 32, 25, 14, 24, 32, 24, 23])`, type: `ndarray`\n\nri, value: `Index(['r', 't', 'q', 'a', 'l', 'o', 'i', 'w', 'v', 'm', 'd', 's', 'x', 'y',\n       'c', 'h', 'n', 'p', 'k', 'f', 'e', 'g', 'u', 'b', 'z', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nr    27\nt    31\nq    23\na    30\nl    27\no    26\ni    28\nw    20\nv    26\nm    34\nd    26\ns    33\nx    27\ny    20\nc    39\nh    20\nn    28\np    19\nk    30\nf    32\ne    25\ng    14\nu    24\nb    32\nz    24\nj    23\nName: julie, dtype: int64`, type: `Series`\n\n### Case 19\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       95\n1       77\n2       37\n3       31\n4       40\n        ..\n9995     1\n9996    24\n9997    72\n9998    25\n9999    10\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 757, 1331, 3492, ..., 4541, 7836, 8934])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  379,  770, 1148, 1575, 1956, 2364, 2739, 3123, 3527, 3935,\n       4288, 4639, 5013, 5374, 5794, 6183, 6558, 6922, 7300, 7704, 8085,\n       8460, 8840, 9212, 9616])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 99, 100,  99,  98,  97,  97,  99, 100,  97, 100,  97,  97,  96,\n        98,  99,  97,  95,  97,  95,  98,  97,  98, 100,  98,  98,  99])`, type: `ndarray`\n\nres, value: `array([ 99, 100,  99,  98,  97,  97,  99, 100,  97, 100,  97,  97,  96,\n        98,  99,  97,  95,  97,  95,  98,  97,  98, 100,  98,  98,  99])`, type: `ndarray`\n\nri, value: `Index(['m', 'e', 'v', 'f', 'j', 's', 'n', 'z', 'r', 'y', 'w', 'u', 'a', 'q',\n       'o', 'h', 'c', 't', 'k', 'l', 'i', 'p', 'g', 'x', 'd', 'b'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nm     99\ne    100\nv     99\nf     98\nj     97\ns     97\nn     99\nz    100\nr     97\ny    100\nw     97\nu     97\na     96\nq     98\no     99\nh     97\nc     95\nt     97\nk     95\nl     98\ni     97\np     98\ng    100\nx     98\nd     98\nb     99\nName: julie, dtype: int64`, type: `Series`\n\n### Case 20\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       95\n1       77\n2       37\n3       31\n4       40\n        ..\n9995     1\n9996    24\n9997    72\n9998    25\n9999    10\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 1,  2,  4, ..., 92, 98, 99])`, type: `ndarray`\n\nsorter, value: `array([8094, 8610, 7469, ..., 3727, 9585, 8352])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   36,   68,  116,  146, ... , 9824, 9869, 9912, 9937, 9975])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([29, 25, 41, 25, 33, 35, 26, ... , 31,\n       38, 35, 23, 33, 20])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([29, 25, 41, 25, 33, 35, 26, ... , 31,\n       38, 35, 23, 33, 20])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('m', '2015-08-28') ... ('w', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nm    2015-08-28    29\ne    2015-08-28    25\nv    2015-08-26    41\ne    2015-08-31    25\nf    2015-08-31    33\n                   ..\nx    2015-09-01    38\ns    2015-08-23    35\nv    2015-08-23    23\nb    2015-08-26    33\nw    2015-08-29    20\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 21\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       95.0\n1       77.0\n2       37.0\n3       31.0\n4       40.0\n        ... \n9995     1.0\n9996    24.0\n9997    72.0\n9998    25.0\n9999    10.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 5999, 8679, 9557])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  949, 1301, 1673, 2065, 2423, 2808, 3160, 3514, 3888, 4273,\n       4599, 4925, 5275, 5606, 6006, 6365, 6709, 7073, 7454, 7817, 8173,\n       8537, 8888, 9272, 9631])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  97,  98,  99,  97,  97,  94,  98,  96,  97,  99,  95,  93,\n        94,  93,  99,  93,  93,  93,  96,  97,  94,  96,  97,  98,  97,\n        94])`, type: `ndarray`\n\nres, value: `array([97, 98, 99, 97, 97, 94, 98, 96, 97, 99, 95, 93, 94, 93, 99, 93, 93,\n       93, 96, 97, 94, 96, 97, 98, 97, 94])`, type: `ndarray`\n\nri, value: `Index(['m', 'v', 'e', 'f', 'j', 's', 'n', 'z', 'r', 'y', 'w', 'u', 'a', 'q',\n       'o', 'c', 't', 'k', 'l', 'i', 'p', 'g', 'x', 'd', 'b', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nm    97\nv    98\ne    99\nf    97\nj    97\ns    94\nn    98\nz    96\nr    97\ny    99\nw    95\nu    93\na    94\nq    93\no    99\nc    93\nt    93\nk    93\nl    96\ni    97\np    94\ng    96\nx    97\nd    98\nb    97\nh    94\nName: julie, dtype: int64`, type: `Series`\n\n### Case 22\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        24\n1        84\n2        53\n3        61\n4        67\n         ..\n99995    97\n99996    34\n99997    39\n99998    91\n99999    77\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([   47,  4174, 10052, ..., 95594, 95854, 97232])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3773,  7553, 11284, 15095, 18888, 22815, 26681, 30525,\n       34326, 38110, 41969, 45864, 49650, 53657, 57472, 61409, 65304,\n       69117, 72970, 76914, 80746, 84664, 88560, 92350, 96114])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['f', 'b', 'v', 'i', 'p', 'e', 'j', 'w', 'r', 'c', 'g', 'z', 'u', 'y',\n       't', 'x', 'a', 'o', 'n', 'd', 's', 'm', 'h', 'q', 'l', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nf    100\nb    100\nv    100\ni    100\np    100\ne    100\nj    100\nw    100\nr    100\nc    100\ng    100\nz    100\nu    100\ny    100\nt    100\nx    100\na    100\no    100\nn    100\nd    100\ns    100\nm    100\nh    100\nq    100\nl    100\nk    100\nName: julie, dtype: int64`, type: `Series`\n\n### Case 23\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        24\n1        84\n2        53\n3        61\n4        67\n         ..\n99995    97\n99996    34\n99997    39\n99998    91\n99999    77\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 97, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([27804, 34547, 50069, ..., 99246, 86086, 94244])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   370,   741,  1124, ... , 98111, 98496, 98865, 99267, 99673])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 96,  99,  98,  97,  97, ... ,  97,  98,  96,  97,  98,  95])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([ 96,  99,  98,  97,  97, ... ,  97,  98,  96,  97,  98,  95])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('f', '2015-09-01') ... ('v', '2015-08-26')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nf    2015-09-01    96\nb    2015-08-24    99\n     2015-09-01    98\nv    2015-08-24    97\ni    2015-08-23    97\n                   ..\nm    2015-08-27    98\np    2015-08-27    96\n     2015-08-28    97\nc    2015-08-27    98\nv    2015-08-26    95\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 24\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        24.0\n1        84.0\n2        53.0\n3        61.0\n4        67.0\n         ... \n99995    97.0\n99996    34.0\n99997    39.0\n99998    91.0\n99999    77.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 95309, 95594, 95854])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9409, 12954, 16443, 20051, 23619, 27311, 30962, 34588,\n       38140, 41704, 45343, 49047, 52612, 56383, 59966, 63670, 67266,\n       70888, 74613, 78204, 81882, 85569, 89239, 92799, 96339])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, value: `Index(['f', 'b', 'v', 'i', 'p', 'e', 'j', 'w', 'r', 'c', 'g', 'z', 'u', 'y',\n       't', 'x', 'o', 'n', 'd', 's', 'a', 'm', 'h', 'q', 'l', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nf    101\nb    101\nv    101\ni    101\np    101\ne    101\nj    101\nw    101\nr    101\nc    101\ng    101\nz    101\nu    101\ny    101\nt    101\nx    101\no    101\nn    101\nd    101\ns    101\na    101\nm    101\nh    101\nq    101\nl    101\nk    101\nName: julie, dtype: int64`, type: `Series`\n\n### Case 25\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     195\n1     181\n2     590\n3     866\n4     716\n     ... \n95    835\n96    943\n97    106\n98    525\n99    246\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  4,\n        4,  4,  4,  4,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,\n        8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14,\n       14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 18, 18,\n       18, 18, 19, 19, 20, 21, 21, 21, 21, 21, 22, 22, 23, 23, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([141, 195, 492, 699, 753, ... , 904, 525, 885, 198, 340, 835])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([84,  0, 67, 76, 26, 18,  1, 24, 89, 79, 53,  2,  3, 19, 35,  4,  8,\n       88,  5, 51, 82,  6, 94, 77, 70, 58, 85,  7, 59, 11, 60,  9, 38, 90,\n       32, 46, 41, 10, 39, 14, 12, 16, 92, 15, 49, 83, 22, 13, 21, 37, 73,\n       74, 57, 69, 71, 33, 17, 64, 29, 20, 47, 78, 44, 23, 55, 30, 50, 61,\n       43, 25, 54, 81, 42, 97, 28, 63, 86, 27, 31, 96, 65, 34, 72, 45, 40,\n       52, 36, 48, 80, 56, 99, 75, 62, 68, 66, 98, 87, 93, 91, 95])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  5, 10, 14, 16, 21, 23, 28, 34, 40, 44, 55, 58, 61, 67, 73, 78,\n       81, 83, 87, 89, 90, 95, 97, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([ 5,  4,  4,  2,  5,  2,  5,  6,  6,  4, 11,  3,  3,  6,  6,  5,  3,\n        2,  4,  2,  1,  5,  2,  2,  1])`, type: `ndarray`\n\nres, value: `array([ 5,  4,  4,  2,  5,  2,  5,  6,  6,  4, 11,  3,  3,  6,  6,  5,  3,\n        2,  4,  2,  1,  5,  2,  2,  1])`, type: `ndarray`\n\nri, value: `Index(['t', 'g', 'w', 'x', 'k', 'z', 'b', 'm', 'n', 'o', 'p', 'f', 'e', 's',\n       'j', 'v', 'u', 'r', 'a', 'i', 'd', 'c', 'h', 'q', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nt     5\ng     4\nw     4\nx     2\nk     5\nz     2\nb     5\nm     6\nn     6\no     4\np    11\nf     3\ne     3\ns     6\nj     6\nv     5\nu     3\nr     2\na     4\ni     2\nd     1\nc     5\nh     2\nq     2\nl     1\nName: julie, dtype: int64`, type: `Series`\n\n### Case 26\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     195\n1     181\n2     590\n3     866\n4     716\n     ... \n95    835\n96    943\n97    106\n98    525\n99    246\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  2,  3,  4,  5,  6,  6,  7,  7,  7,  8,  9, 10, 10, 11,\n       12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 24, 25, 26,\n       26, 27, 28, 29, 30, 30, 31, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39,\n       40, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 54,\n       55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 68,\n       69, 70, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])`, type: `ndarray`\n\n_, value: `83`, type: `int`\n\nval, value: `array([195, 181, 590, 938, 866, ... , 527, 198, 835, 943, 106, 525])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([ 0,  1,  2, 19,  3,  4,  5,  6, 94, 77, 85,  7,  8,  9, 10, 39, 11,\n       12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 69, 23, 24, 25, 42, 26, 86,\n       27, 28, 29, 30, 31, 65, 32, 46, 33, 34, 35, 36, 37, 38, 45, 40, 41,\n       43, 81, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 83, 57, 58, 59,\n       60, 61, 62, 63, 64, 99, 66, 67, 68, 70, 74, 71, 72, 73, 75, 84, 76,\n       78, 89, 79, 80, 82, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  1,  2,  4,  5,  6,  7,  9, 12, 13, 14, 16, 17, 18, 19, 20, 21,\n       22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 36, 37, 38, 40, 42, 43,\n       44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\n       63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82,\n       83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('t', '2015-08-25') ... ('h', '2015-08-23')],\n           names=['jim', 'joe'])`, shape: `(83,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nt    2015-08-25    1\ng    2015-08-23    1\nw    2015-08-24    2\n     2015-08-25    1\nx    2015-08-25    1\n                  ..\nq    2015-09-01    1\nl    2015-08-31    1\nu    2015-09-01    1\nv    2015-08-28    1\nh    2015-08-23    1\nName: julie, Length: 83, dtype: int64`, type: `Series`\n\n### Case 27\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     195.0\n1     181.0\n2     590.0\n3     866.0\n4     716.0\n      ...  \n95    835.0\n96    943.0\n97    106.0\n98    525.0\n99    246.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  3,\n        3,  3,  3,  3,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,\n        7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,\n        9,  9,  9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13,\n       13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 18,\n       18, 18, 19, 19, 20, 21, 21, 21, 21, 21, 22, 22, 23, 23, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([ 1.06000000e+02,  1.81000000e+02, ... ,  3.40000000e+02,  8.35000000e+02])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([18,  1, 35, 86, 52, 69, 26, 84,  0, 67, 76, 53,  2,  3, 19,  4,  8,\n       88,  5, 51, 82,  6, 94,  7, 85, 77, 70, 58,  9, 59, 11, 60, 38, 90,\n       46, 32, 41, 10, 39, 14, 12, 16, 92, 15, 83, 49, 22, 13, 21, 37, 73,\n       74, 57, 71, 64, 33, 17, 47, 29, 20, 78, 44, 23, 55, 30, 50, 24, 89,\n       79, 61, 43, 25, 54, 81, 42, 27, 28, 97, 63, 65, 31, 96, 34, 72, 45,\n       40, 36, 48, 80, 56, 66, 99, 75, 62, 68, 98, 87, 93, 91, 95])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 11, 15, 16, 21, 23, 28, 34, 40, 44, 54, 57, 60, 66, 69, 75, 79,\n       82, 84, 87, 89, 90, 95, 97, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([ 6,  4,  4,  1,  5,  2,  4,  6,  6,  4, 10,  3,  3,  6,  2,  6,  3,\n        3,  2,  3,  2,  1,  5,  2,  2,  1])`, type: `ndarray`\n\nres, value: `array([ 4,  4,  1,  5,  2,  4,  6,  6,  4, 10,  3,  3,  6,  2,  6,  3,  3,\n        2,  3,  2,  1,  5,  2,  2,  1])`, type: `ndarray`\n\nri, value: `Index(['t', 'w', 'x', 'k', 'z', 'b', 'm', 'n', 'o', 'p', 'f', 'e', 's', 'g',\n       'j', 'v', 'u', 'r', 'a', 'i', 'd', 'c', 'h', 'q', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nt     4\nw     4\nx     1\nk     5\nz     2\nb     4\nm     6\nn     6\no     4\np    10\nf     3\ne     3\ns     6\ng     2\nj     6\nv     3\nu     3\nr     2\na     3\ni     2\nd     1\nc     5\nh     2\nq     2\nl     1\nName: julie, dtype: int64`, type: `Series`\n\n### Case 28\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      441\n1      685\n2      668\n3      721\n4      853\n      ... \n995    802\n996    622\n997    670\n998    290\n999    223\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  1,  18,  30,  44,  83, ... , 819, 836, 884, 898, 964, 995])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([202, 706, 662,  28, 352, ... , 227, 993, 107, 641, 904, 903])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  44,  83, 116, 151, 202, 245, 281, 320, 373, 409, 443, 486,\n       525, 576, 611, 657, 692, 722, 757, 792, 831, 875, 906, 935, 966])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([44, 39, 33, 34, 50, 43, 35, 38, 51, 35, 34, 43, 39, 50, 34, 44, 35,\n       30, 34, 34, 39, 42, 30, 29, 29, 33])`, type: `ndarray`\n\nres, value: `array([44, 39, 33, 34, 50, 43, 35, 38, 51, 35, 34, 43, 39, 50, 34, 44, 35,\n       30, 34, 34, 39, 42, 30, 29, 29, 33])`, type: `ndarray`\n\nri, value: `Index(['t', 'h', 'd', 'n', 's', 'o', 'x', 'z', 'p', 'r', 'v', 'j', 'k', 'w',\n       'u', 'a', 'b', 'q', 'i', 'm', 'y', 'f', 'e', 'c', 'g', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nt    44\nh    39\nd    33\nn    34\ns    50\no    43\nx    35\nz    38\np    51\nr    35\nv    34\nj    43\nk    39\nw    50\nu    34\na    44\nb    35\nq    30\ni    34\nm    34\ny    39\nf    42\ne    30\nc    29\ng    29\nl    33\nName: julie, dtype: int64`, type: `Series`\n\n### Case 29\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      441\n1      685\n2      668\n3      721\n4      853\n      ... \n995    802\n996    622\n997    670\n998    290\n999    223\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 251, 252, 253, 253, 254, 255])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `256`, type: `int`\n\nval, value: `array([168, 354, 441, 451, 591, ... , 865, 797, 155, 844, 182, 810])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([900, 205,   0, 349, 545, ... , 902, 914, 965, 975, 987, 990])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   7,  13,  17,  22, ... , 991, 994, 995, 996, 998, 999])`, shape: `(256,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([7, 6, 4, 5, 4, 3, 8, 3, 5, ... , 5, 3, 1, 1, 3, 1, 1, 2, 1, 1])`, shape: `(256,)`, type: `ndarray`\n\nres, value: `array([7, 6, 4, 5, 4, 3, 8, 3, 5, ... , 5, 3, 1, 1, 3, 1, 1, 2, 1, 1])`, shape: `(256,)`, type: `ndarray`\n\nri, value: `MultiIndex([('t', '2015-08-26') ... ('v', '2015-08-23')],\n           names=['jim', 'joe'], length=256)`, shape: `(256,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nt    2015-08-26    7\nh    2015-08-24    6\nd    2015-09-01    4\nn    2015-08-23    5\ns    2015-08-23    4\n                  ..\nk    2015-08-30    1\nm    2015-08-30    1\nv    2015-08-25    2\nm    2015-09-01    1\nv    2015-08-23    1\nName: julie, Length: 256, dtype: int64`, type: `Series`\n\n### Case 30\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      441.0\n1      685.0\n2      668.0\n3      721.0\n4      853.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    290.0\n999    223.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.64000000e+02,  9.95000000e+02])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      4.410000e+02\n1      6.850000e+02\n2      6.680000e+02\n3      7.210000e+02\n4      8.530000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    2.900000e+02\n999    2.230000e+02\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 227, 993, 107, 641, 904, 903])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  99, 129, 162, 211, 253, 287, 322, 371, 405, 439, 482, 519,\n       565, 599, 644, 676, 705, 739, 772, 807, 849, 875, 901, 938, 969])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([50, 34, 28, 28, 43, 38, 26, 32, 37, 26, 29, 34, 32, 41, 29, 38, 29,\n       29, 26, 28, 30, 38, 23, 20, 31, 28, 30])`, type: `ndarray`\n\nres, value: `array([34, 28, 28, 43, 38, 26, 32, 37, 26, 29, 34, 32, 41, 29, 38, 29, 29,\n       26, 28, 30, 38, 23, 20, 31, 28, 30])`, type: `ndarray`\n\nri, value: `Index(['t', 'd', 'n', 's', 'o', 'x', 'z', 'p', 'r', 'v', 'j', 'k', 'w', 'u',\n       'a', 'b', 'q', 'i', 'm', 'y', 'f', 'e', 'c', 'h', 'g', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nt    34\nd    28\nn    28\ns    43\no    38\nx    26\nz    32\np    37\nr    26\nv    29\nj    34\nk    32\nw    41\nu    29\na    38\nb    29\nq    29\ni    26\nm    28\ny    30\nf    38\ne    23\nc    20\nh    31\ng    28\nl    30\nName: julie, dtype: int64`, type: `Series`\n\n### Case 31\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       125\n1       566\n2        52\n3       926\n4       836\n       ... \n9995    707\n9996    652\n9997    304\n9998    165\n9999    469\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  0,   1,   5, ..., 994, 997, 998])`, type: `ndarray`\n\nsorter, value: `array([3807, 4646, 3239, ..., 6971, 2897, 3112])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  375,  745, 1098, 1491, 1852, 2264, 2725, 3098, 3461, 3847,\n       4245, 4672, 5039, 5418, 5798, 6191, 6569, 6943, 7331, 7714, 8104,\n       8490, 8871, 9232, 9626])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([307, 300, 300, 323, 302, 337, 373, 313, 300, 316, 320, 356, 308,\n       313, 312, 323, 313, 313, 321, 313, 325, 330, 299, 297, 324, 315])`, type: `ndarray`\n\nres, value: `array([307, 300, 300, 323, 302, 337, 373, 313, 300, 316, 320, 356, 308,\n       313, 312, 323, 313, 313, 321, 313, 325, 330, 299, 297, 324, 315])`, type: `ndarray`\n\nri, value: `Index(['v', 'j', 'c', 'g', 't', 'w', 'm', 'h', 'f', 's', 'k', 'u', 'b', 'n',\n       'i', 'd', 'y', 'a', 'o', 'q', 'p', 'z', 'e', 'r', 'l', 'x'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nv    307\nj    300\nc    300\ng    323\nt    302\nw    337\nm    373\nh    313\nf    300\ns    316\nk    320\nu    356\nb    308\nn    313\ni    312\nd    323\ny    313\na    313\no    321\nq    313\np    325\nz    330\ne    299\nr    297\nl    324\nx    315\nName: julie, dtype: int64`, type: `Series`\n\n### Case 32\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       125\n1       566\n2        52\n3       926\n4       836\n       ... \n9995    707\n9996    652\n9997    304\n9998    165\n9999    469\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 72,  79,  88, ..., 910, 936, 976])`, type: `ndarray`\n\nsorter, value: `array([8712,  326, 5486, ..., 7433, 7598, 4414])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   39,   77,  123,  158, ... , 9830, 9859, 9892, 9923, 9963])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([37, 36, 45, 35, 35, 40, 45, ... , 36,\n       28, 33, 28, 38, 37])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([37, 36, 45, 35, 35, 40, 45, ... , 36,\n       28, 33, 28, 38, 37])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('v', '2015-08-29') ... ('k', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nv    2015-08-29    37\nj    2015-08-23    36\nc    2015-08-26    45\ng    2015-08-25    35\nt    2015-08-28    35\n                   ..\ny    2015-08-27    28\n     2015-08-25    33\nl    2015-08-23    28\nx    2015-08-24    38\nk    2015-08-29    37\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 33\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       125.0\n1       566.0\n2        52.0\n3       926.0\n4       836.0\n        ...  \n9995    707.0\n9996    652.0\n9997    304.0\n9998    165.0\n9999    469.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.84000000e+02,  9.89000000e+02,  9.94000000e+02])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 3664, 1619, 2317])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  943, 1279, 1649, 1989, 2378, 2732, 3166, 3512, 3852, 4214,\n       4596, 5003, 5345, 5705, 6054, 6423, 6781, 7132, 7491, 7854, 8214,\n       8576, 8935, 9274, 9649])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([391, 255, 245, 265, 239, 288, 258, 322, 253, 245, 266, 272, 292,\n       250, 264, 250, 271, 257, 260, 276, 256, 270, 265, 250, 245, 269,\n       255])`, type: `ndarray`\n\nres, value: `array([255, 245, 265, 239, 288, 258, 322, 253, 245, 266, 272, 292, 250,\n       264, 250, 271, 257, 260, 276, 256, 270, 265, 250, 245, 269, 255])`, type: `ndarray`\n\nri, value: `Index(['v', 'c', 'g', 't', 'w', 'j', 'm', 'h', 'f', 's', 'k', 'u', 'b', 'n',\n       'i', 'd', 'y', 'a', 'o', 'q', 'p', 'z', 'e', 'r', 'l', 'x'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nv    255\nc    245\ng    265\nt    239\nw    288\nj    258\nm    322\nh    253\nf    245\ns    266\nk    272\nu    292\nb    250\nn    264\ni    250\nd    271\ny    257\na    260\no    276\nq    256\np    270\nz    265\ne    250\nr    245\nl    269\nx    255\nName: julie, dtype: int64`, type: `Series`\n\n### Case 34\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        832\n1        673\n2        302\n3         22\n4        604\n        ... \n99995    219\n99996    380\n99997    351\n99998    741\n99999    552\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  0,   0,   0, ..., 998, 998, 999])`, type: `ndarray`\n\nsorter, value: `array([ 4639, 38916, 69308, ..., 75268, 75829, 47991])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3811,  7654, 11535, 15315, 19167, 23147, 26968, 30756,\n       34639, 38573, 42350, 46222, 50063, 53875, 57718, 61664, 65526,\n       69423, 73238, 77106, 81051, 84918, 88683, 92549, 96244])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([982, 980, 986, 970, 986, 987, 973, 981, 985, 981, 979, 983, 984,\n       982, 978, 975, 970, 977, 968, 976, 977, 969, 980, 978, 982, 977])`, type: `ndarray`\n\nres, value: `array([982, 980, 986, 970, 986, 987, 973, 981, 985, 981, 979, 983, 984,\n       982, 978, 975, 970, 977, 968, 976, 977, 969, 980, 978, 982, 977])`, type: `ndarray`\n\nri, value: `Index(['j', 'n', 'w', 'x', 'f', 'g', 'h', 'o', 'e', 'a', 'q', 'k', 'd', 's',\n       'z', 'l', 'i', 't', 'c', 'p', 'b', 'u', 'm', 'v', 'r', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nj    982\nn    980\nw    986\nx    970\nf    986\ng    987\nh    973\no    981\ne    985\na    981\nq    979\nk    983\nd    984\ns    982\nz    978\nl    975\ni    970\nt    977\nc    968\np    976\nb    977\nu    969\nm    980\nv    978\nr    982\ny    977\nName: julie, dtype: int64`, type: `Series`\n\n### Case 35\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        832\n1        673\n2        302\n3         22\n4        604\n        ... \n99995    219\n99996    380\n99997    351\n99998    741\n99999    552\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([  3,  13,  15, ..., 991, 995, 998])`, type: `ndarray`\n\nsorter, value: `array([37213, 46929, 19596, ..., 99651, 93478, 68543])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   352,   706,  1075, ... , 98096, 98482, 98887, 99275, 99630])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([295, 293, 306, 311, 339, ... , 320, 326, 351, 324, 300, 311])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([295, 293, 306, 311, 339, ... , 320, 326, 351, 324, 300, 311])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('j', '2015-08-28') ... ('v', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nj    2015-08-28    295\nn    2015-08-29    293\nw    2015-08-26    306\nn    2015-08-31    311\nx    2015-08-31    339\n                  ... \nz    2015-08-23    326\nc    2015-08-28    351\nm    2015-08-25    324\nk    2015-08-27    300\nv    2015-08-28    311\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 36\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        832.0\n1        673.0\n2        302.0\n3         22.0\n4        604.0\n         ...  \n99995    219.0\n99996    380.0\n99997    351.0\n99998    741.0\n99999    552.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.98000000e+02,  9.98000000e+02,  9.99000000e+02])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 84706, 91823, 61256])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9463, 13115, 16715, 20279, 23902, 27665, 31265, 34857,\n       38508, 42180, 45694, 49325, 52940, 56557, 60185, 63879, 67506,\n       71189, 74787, 78439, 82155, 85814, 89338, 92963, 96505])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([996, 954, 966, 944, 934, 964, 969, 944, 957, 956, 950, 956, 956,\n       958, 963, 959, 952, 951, 952, 939, 948, 950, 944, 954, 947, 941,\n       957])`, type: `ndarray`\n\nres, value: `array([954, 966, 944, 934, 964, 969, 944, 957, 956, 950, 956, 956, 958,\n       963, 959, 952, 951, 952, 939, 948, 950, 944, 954, 947, 941, 957])`, type: `ndarray`\n\nri, value: `Index(['j', 'w', 'n', 'x', 'f', 'g', 'h', 'o', 'e', 'a', 'q', 'k', 'd', 's',\n       'z', 'l', 'i', 't', 'c', 'p', 'b', 'u', 'm', 'v', 'y', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nj    954\nw    966\nn    944\nx    934\nf    964\ng    969\nh    944\no    957\ne    956\na    950\nq    956\nk    956\nd    958\ns    963\nz    959\nl    952\ni    951\nt    952\nc    939\np    948\nb    950\nu    944\nm    954\nv    947\ny    941\nr    957\nName: julie, dtype: int64`, type: `Series`\n\n### Case 37\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     6\n1     8\n2     8\n3     8\n4     3\n     ..\n95    2\n96    3\n97    7\n98    9\n99    2\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  4,\n        4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10, 10,\n       10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,\n       14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 18, 18, 18, 18, 18, 18, 18,\n       19, 20, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([1, 3, 7, 7, 0, 2, 4, 4, 8, 8, 0, 2, 3, 3, 4, 4, 1, 4, 6, 8, 9, 2,\n       5, 5, 7, 8, 0, 1, 1, 2, 4, 4, 6, 7, 7, 9, 9, 1, 5, 5, 8, 8, 8, 0,\n       5, 8, 3, 4, 6, 3, 7, 9, 4, 1, 2, 2, 3, 4, 7, 8, 9, 2, 4, 7, 8, 2,\n       3, 4, 8, 1, 4, 9, 0, 2, 4, 7, 1, 2, 0, 1, 2, 3, 4, 7, 7, 7, 0, 3,\n       4, 8, 4, 9, 1, 3, 8, 2, 4, 7, 8, 9])`, type: `ndarray`\n\nsorter, value: `array([49, 44, 24, 56, 65, 95, 68, 79, 54, 61,  9, 83, 30, 62, 43, 53, 71,\n       46, 48, 25,  5, 17, 41, 80, 31, 22, 57, 13, 59,  8, 55, 75, 35, 36,\n       70, 52, 66, 39, 50, 94,  2, 32, 37, 81, 72,  3,  4, 58,  0, 88, 85,\n       69, 47, 21,  6,  7, 51, 64, 97, 45, 98, 20, 33, 84, 78, 99, 74, 63,\n       67, 40, 86, 90, 18, 91, 28, 76, 89, 87, 19, 82, 27, 96, 15, 23, 92,\n       60, 14, 16, 38,  1, 12, 29, 10, 73, 11, 26, 34, 93, 42, 77])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  4,  5, 10, 16, 21, 26, 37, 43, 46, 49, 52, 53, 61, 65, 69, 72,\n       76, 78, 85, 86, 90, 92, 95, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([3, 1, 3, 4, 5, 4, 7, 3, 3, 3, 3, 1, 7, 4, 4, 3, 4, 2, 6, 1, 4, 2,\n       3, 3, 2])`, type: `ndarray`\n\nres, value: `array([3, 1, 3, 4, 5, 4, 7, 3, 3, 3, 3, 1, 7, 4, 4, 3, 4, 2, 6, 1, 4, 2,\n       3, 3, 2])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    3\nb    1\nc    3\nd    4\ne    5\ng    4\nh    7\ni    3\nj    3\nk    3\nl    3\nm    1\nn    7\no    4\np    4\nq    3\nr    4\ns    2\nt    6\nu    1\nv    4\nw    2\nx    3\ny    3\nz    2\nName: julie, dtype: int64`, type: `Series`\n\n### Case 38\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     6\n1     8\n2     8\n3     8\n4     3\n     ..\n95    2\n96    3\n97    7\n98    9\n99    2\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  2,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 12, 12, 13,\n       14, 15, 16, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 26,\n       27, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n       42, 43, 44, 45, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n       58, 59, 60, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 70, 71,\n       72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86])`, type: `ndarray`\n\n_, value: `87`, type: `int`\n\nval, value: `array([7, 7, 1, 3, 0, 8, 8, 4, 2, 4, 2, 3, 4, 4, 0, 3, 6, 9, 4, 1, 8, 5,\n       2, 7, 8, 5, 4, 9, 2, 6, 1, 4, 0, 1, 7, 7, 9, 8, 8, 1, 8, 5, 5, 5,\n       8, 0, 3, 6, 4, 9, 7, 3, 4, 4, 1, 2, 8, 7, 9, 2, 3, 4, 8, 7, 2, 2,\n       3, 4, 8, 9, 1, 4, 4, 7, 0, 2, 1, 2, 2, 4, 7, 3, 1, 7, 0, 7, 3, 8,\n       4, 0, 4, 9, 8, 3, 1, 7, 2, 4, 9, 8])`, type: `ndarray`\n\nsorter, value: `array([56, 24, 49, 44, 65, 61, 54, 79, 95, 68, 83, 30, 43, 53,  9, 62, 48,\n        5, 46, 71, 25, 80, 17, 31, 22, 41, 75, 52,  8, 35, 13, 55, 57, 59,\n       36, 70, 66, 37,  2, 39, 32, 94, 50, 72,  3, 81,  4,  0, 58, 69, 85,\n       88, 47, 64, 21,  6, 45, 97, 98,  7, 51, 33, 78, 84, 20, 99, 74, 63,\n       67, 90, 40, 86, 28, 76, 18, 91, 89, 87, 27, 15, 92, 96, 82, 23, 19,\n       60, 16,  1, 38, 14, 12, 29, 11, 73, 10, 93, 26, 34, 77, 42])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  1,  2,  4,  5,  6,  7,  8,  9, 10, 12, 13, 14, 16, 17, 18, 19,\n       21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 34, 37, 38, 39, 40, 41, 42,\n       43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60,\n       61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78,\n       79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,\n       98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(87,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-25    1\n     2015-08-28    2\nb    2015-08-25    1\nc    2015-08-23    1\n                  ..\ny    2015-08-25    1\n     2015-08-26    1\n     2015-08-28    1\nz    2015-08-26    1\n     2015-08-27    1\nName: julie, Length: 87, dtype: int64`, type: `Series`\n\n### Case 39\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     6.0\n1     8.0\n2     8.0\n3     8.0\n4     3.0\n     ... \n95    2.0\n96    3.0\n97    7.0\n98    9.0\n99    2.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  2,  2,  2,  2,  2,  3,\n        3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  9,\n        9,  9, 10, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13,\n       14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 18, 18, 18, 18,\n       18, 19, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([ 0.00000000e+00,  4.00000000e+00, ... ,  8.00000000e+00,  9.00000000e+00])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([18, 86, 35,  1, 52, 69, 49, 44, 24, 56, 65, 95, 68, 79, 54, 61,  9,\n       83, 30, 62, 43, 53, 46, 71, 48, 25,  5, 17, 41, 80, 31, 22,  8, 66,\n       57, 13, 59, 55, 75, 36, 70, 39, 50, 94,  2, 32, 37, 81, 72,  3,  4,\n       58,  0, 85, 88, 47,  7, 45, 64, 21,  6, 51, 97, 98, 84, 20, 33, 78,\n       99, 74, 63, 67, 40, 90, 28, 91, 76, 89, 87, 27, 19, 82, 96, 15, 23,\n       92, 60, 14, 16, 38, 12, 29, 10, 73, 11, 26, 34, 93, 42, 77])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 10, 11, 16, 22, 27, 32, 41, 47, 50, 53, 55, 56, 64, 68, 72, 74,\n       77, 79, 86, 87, 90, 92, 95, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 3, 1, 3, 3, 5, 4, 5, 3, 3, 3, 2, 1, 6, 4, 4, 2, 3, 2, 6, 1, 3,\n       2, 3, 3, 2])`, type: `ndarray`\n\nres, value: `array([3, 1, 3, 3, 5, 4, 5, 3, 3, 3, 2, 1, 6, 4, 4, 2, 3, 2, 6, 1, 3, 2,\n       3, 3, 2])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    3\nb    1\nc    3\nd    3\ne    5\ng    4\nh    5\ni    3\nj    3\nk    3\nl    2\nm    1\nn    6\no    4\np    4\nq    2\nr    3\ns    2\nt    6\nu    1\nv    3\nw    2\nx    3\ny    3\nz    2\nName: julie, dtype: int64`, type: `Series`\n\n### Case 40\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      8\n1      7\n2      0\n3      5\n4      3\n      ..\n995    9\n996    7\n997    6\n998    8\n999    4\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, 0, 0, 0, 1, 1, 2, ... ,\n       5, 5, 6, 6, 6, 6, 8, 8, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([ 52, 126, 178, 179, 656, ... , 888, 898, 148, 714,  94, 929])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  43,  75, 118, 172, 208, 255, 302, 344, 378, 409, 447, 481,\n       522, 568, 606, 645, 681, 704, 741, 784, 811, 847, 892, 929, 970])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 1, 0, 1, ... ,\n       0, 0, 1, 0, 0, 0, 1, 0, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10,  9, 10, 10, 10,  9,  9, 10, 10, 10, 10,  9, 10,\n       10, 10, 10,  9, 10, 10,  9, 10,  9])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10,  9, 10, 10, 10,  9,  9, 10, 10, 10, 10,  9, 10,\n       10, 10, 10,  9, 10, 10,  9, 10,  9])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf     9\ng    10\nh    10\ni    10\nj     9\nk     9\nl    10\nm    10\nn    10\no    10\np     9\nq    10\nr    10\ns    10\nt    10\nu     9\nv    10\nw    10\nx     9\ny    10\nz     9\nName: julie, dtype: int64`, type: `Series`\n\n### Case 41\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      8\n1      7\n2      0\n3      5\n4      3\n      ..\n995    9\n996    7\n997    6\n998    8\n999    4\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   0, ... , 247, 248, 248, 249, 249, 249])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `250`, type: `int`\n\nval, value: `array([3, 4, 5, 5, 7, 8, 0, 4, 7, ... ,\n       1, 3, 0, 3, 4, 2, 4, 0, 1, 6])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([993, 559, 118, 949, 906, ... , 733, 871, 999, 849, 489, 428])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   6,  10,  15,  21, ... , 986, 989,\n       992, 995, 997])`, shape: `(250,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([5, 3, 4, 4, 3, 4, 1, 6, 2, ... ,\n       1, 3, 1, 3, 3, 3, 2, 3])`, shape: `(250,)`, type: `ndarray`\n\nres, value: `array([5, 3, 4, 4, 3, 4, 1, 6, 2, ... ,\n       1, 3, 1, 3, 3, 3, 2, 3])`, shape: `(250,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=250)`, shape: `(250,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    5\n     2015-08-24    3\n     2015-08-25    4\n     2015-08-26    4\n     2015-08-27    3\n                  ..\nz    2015-08-28    3\n     2015-08-29    3\n     2015-08-30    3\n     2015-08-31    2\n     2015-09-01    3\nName: julie, Length: 250, dtype: int64`, type: `Series`\n\n### Case 42\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      8.0\n1      7.0\n2      0.0\n3      5.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    8.0\n999    4.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.00000000e+00,  9.00000000e+00])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      8.000000e+00\n1      7.000000e+00\n2      0.000000e+00\n3      5.000000e+00\n4      3.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    8.000000e+00\n999    4.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 888, 898, 148, 714,  94, 929])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  99, 131, 174, 222, 255, 297, 339, 379, 412, 440, 477, 509,\n       546, 592, 627, 665, 698, 719, 754, 794, 820, 854, 895, 931, 971])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 0, 1, 0, 0, 0, 1, 0, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 10, 11, 11, 11,  9, 10, 11, 11, 11, 11, 10,\n       11, 11, 11, 11, 10, 11, 11, 10, 11,  9])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 10, 11, 11, 11,  9, 10, 11, 11, 11, 11, 10, 11,\n       11, 11, 11, 10, 11, 11, 10, 11,  9])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    10\ng    11\nh    11\ni    11\nj     9\nk    10\nl    11\nm    11\nn    11\no    11\np    10\nq    11\nr    11\ns    11\nt    11\nu    10\nv    11\nw    11\nx    10\ny    11\nz     9\nName: julie, dtype: int64`, type: `Series`\n\n### Case 43\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       7\n1       7\n2       3\n3       6\n4       9\n       ..\n9995    5\n9996    0\n9997    7\n9998    1\n9999    1\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([ 646,  761,  818, ..., 9825, 9840, 9872])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  390,  794, 1134, 1546, 1917, 2300, 2708, 3073, 3458, 3866,\n       4237, 4602, 4962, 5363, 5786, 6183, 6559, 6969, 7351, 7722, 8088,\n       8480, 8831, 9221, 9607])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Case 44\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       7\n1       7\n2       3\n3       6\n4       9\n       ..\n9995    5\n9996    0\n9997    7\n9998    1\n9999    1\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([3290, 6007, 6384, ..., 5206, 7693, 8600])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   35,   73,  109,  156, ... , 9813, 9855, 9888, 9920, 9966])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... ,  9,\n       10, 10, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... ,  9,\n       10, 10, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 45\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       7.0\n1       7.0\n2       3.0\n3       6.0\n4       9.0\n       ... \n9995    5.0\n9996    0.0\n9997    7.0\n9998    1.0\n9999    1.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9825, 9840, 9872])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  954, 1337, 1667, 2051, 2399, 2762, 3149, 3488, 3854, 4238,\n       4589, 4932, 5267, 5647, 6034, 6410, 6764, 7145, 7506, 7850, 8190,\n       8558, 8893, 9259, 9634])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n### Case 46\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        6\n1        6\n2        7\n3        5\n4        2\n        ..\n99995    8\n99996    2\n99997    3\n99998    0\n99999    0\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([  218,   313,  1209, ..., 99445, 99520, 99844])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3778,  7612, 11482, 15305, 19250, 23098, 26962, 30794,\n       34638, 38396, 42237, 46106, 49933, 53747, 57537, 61396, 65203,\n       69058, 72902, 76728, 80547, 84439, 88374, 92225, 96082])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Case 47\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        6\n1        6\n2        7\n3        5\n4        2\n        ..\n99995    8\n99996    2\n99997    3\n99998    0\n99999    0\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([ 4570,  4953,  9180, ..., 87683, 91262, 94690])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   372,   753,  1154, ... , 98043, 98401, 98813, 99190, 99585])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 48\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        6.0\n1        6.0\n2        7.0\n3        5.0\n4        2.0\n        ... \n99995    8.0\n99996    2.0\n99997    3.0\n99998    0.0\n99999    0.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 99445, 99520, 99844])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9460, 13067, 16701, 20323, 24052, 27660, 31301, 34915,\n       38581, 42139, 45714, 49356, 52944, 56507, 60093, 63717, 67283,\n       70888, 74499, 78102, 81697, 85360, 89067, 92687, 96310])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n### Case 49\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     60\n1     43\n2     52\n3     37\n4     93\n      ..\n95    14\n96    45\n97    92\n98    64\n99     2\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  4,  4,\n        4,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  7,\n        8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12,\n       12, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17,\n       17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19, 20, 20, 21, 21,\n       21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([45, 64, 65, 87, 87, 22, 94,  7, 60, 63, 64, 95, 12, 47, 56, 22, 32,\n       75,  0,  4, 46, 51, 57, 77, 93, 23, 40, 68, 79, 14, 63, 64, 72, 92,\n       48, 74, 16, 79, 93,  0, 19, 38, 45, 50, 63, 24, 30, 84, 94, 34, 64,\n       89, 30, 37, 30, 34, 61, 64, 85, 39, 93, 98, 43, 70, 70, 99, 14, 30,\n       49, 71, 73, 81, 87, 87, 67, 92,  3, 52, 63, 74, 93, 26, 92, 10, 38,\n       64, 11, 34, 42, 52,  2, 19, 24, 43,  2,  4, 36, 65,  1, 82])`, type: `ndarray`\n\nsorter, value: `array([96, 69, 46, 58, 80, 52, 76, 79,  0, 71,  7, 16, 36, 17, 92, 30, 57,\n       19, 63, 72, 40, 38, 28, 84,  4, 74, 83, 67, 59, 95, 31, 70, 75,  9,\n       33, 61, 86, 43, 34, 64, 37, 11, 39, 77, 45,  8, 42, 56, 53, 48, 98,\n       20, 47,  3, 87, 25, 65, 51, 73, 62,  5, 26, 81,  6, 44, 14, 12, 88,\n       82, 15, 18, 29, 41, 60, 89, 24, 78,  2, 55, 66, 10, 13, 97, 68, 91,\n       93, 21, 22, 23, 94, 54, 27, 35,  1, 99, 90, 50, 49, 32, 85])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  5,  7, 12, 15, 18, 25, 29, 34, 36, 39, 45, 49, 52, 54, 59, 62,\n       66, 74, 76, 81, 83, 86, 90, 94, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([4, 2, 5, 3, 3, 7, 4, 5, 2, 3, 6, 4, 3, 2, 5, 3, 3, 7, 2, 5, 2, 3,\n       4, 4, 4, 2])`, type: `ndarray`\n\nres, value: `array([4, 2, 5, 3, 3, 7, 4, 5, 2, 3, 6, 4, 3, 2, 5, 3, 3, 7, 2, 5, 2, 3,\n       4, 4, 4, 2])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    4\nb    2\nc    5\nd    3\ne    3\nf    7\ng    4\nh    5\ni    2\nj    3\nk    6\nl    4\nm    3\nn    2\no    5\np    3\nq    3\nr    7\ns    2\nt    5\nu    2\nv    3\nw    4\nx    4\ny    4\nz    2\nName: julie, dtype: int64`, type: `Series`\n\n### Case 50\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     60\n1     43\n2     52\n3     37\n4     93\n      ..\n95    14\n96    45\n97    92\n98    64\n99     2\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 12, 13, 14,\n       15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 26, 26,\n       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n       44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 54, 55, 56, 57, 58,\n       59, 59, 60, 61, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n       74, 75, 76, 77, 78, 79, 79, 80, 80, 81, 82, 83, 84, 85, 86])`, type: `ndarray`\n\n_, value: `87`, type: `int`\n\nval, value: `array([87, 64, 87, 65, 45, 94, 22, 64, 63, 60,  7, 95, 47, 56, 12, 32, 75,\n       22, 46,  0, 57,  4, 93, 51, 77, 23, 40, 68, 79, 63, 92, 14, 64, 72,\n       74, 48, 16, 79, 93,  0, 38, 63, 45, 19, 50, 24, 84, 30, 94, 89, 34,\n       64, 37, 30, 61, 85, 34, 30, 64, 98, 39, 93, 43, 70, 99, 70, 87, 87,\n       71, 81, 73, 14, 30, 49, 67, 92, 63,  3, 52, 93, 74, 92, 26, 38, 64,\n       10, 34, 11, 42, 52, 24, 43,  2, 19,  4,  2, 65, 36,  1, 82])`, type: `ndarray`\n\nsorter, value: `array([80, 69, 58, 46, 96, 76, 52,  7, 71,  0, 79, 16, 17, 92, 36, 57, 19,\n       30, 40, 63, 28, 72,  4, 38, 84, 74, 83, 67, 59, 31,  9, 95, 70, 75,\n       61, 33, 86, 43, 34, 64, 11, 45, 39, 37, 77,  8, 56, 42, 53, 20, 48,\n       98,  3, 47, 65, 73, 25, 87, 51, 26, 62,  5, 81,  6, 14, 44, 41, 60,\n       15, 29, 18, 12, 88, 82, 89, 24, 55, 78,  2, 10, 66, 97, 13, 91, 93,\n       68, 22, 21, 23, 94, 35,  1, 54, 27, 90, 99, 49, 50, 32, 85])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  1,  3,  4,  5,  6,  7,  8,  9, 10, 12, 13, 14, 15, 16, 17, 18,\n       19, 21, 22, 23, 25, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40,\n       41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n       59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78,\n       79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97,\n       98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 3,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 3,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(87,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    2\n     2015-08-30    1\n     2015-08-31    1\nb    2015-08-31    1\n                  ..\ny    2015-08-29    1\n     2015-08-30    1\n     2015-08-31    1\nz    2015-08-27    1\n     2015-08-31    1\nName: julie, Length: 87, dtype: int64`, type: `Series`\n\n### Case 51\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     60.0\n1     43.0\n2     52.0\n3     37.0\n4     93.0\n      ... \n95    14.0\n96    45.0\n97    92.0\n98    64.0\n99     2.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  2,  2,  2,  2,  2,  3,\n        3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,\n        7,  7,  7,  7,  8,  8,  9,  9, 10, 10, 10, 10, 10, 10, 11, 11, 11,\n       11, 12, 12, 12, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16,\n       16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19, 20, 20,\n       21, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 1.60000000e+01,  2.20000000e+01, ... , -9.22337204e+18,  1.00000000e+00])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([86, 52, 35,  1, 69, 18, 46, 96, 58, 80, 76,  7, 79,  0, 71, 16, 36,\n       17, 92, 30, 57, 19, 28, 84, 63, 72, 40, 38,  4, 83, 74, 67, 59,  9,\n       95, 31, 70, 75, 33, 61, 43, 34, 45, 64, 37, 11, 39, 77,  8, 42, 56,\n       53, 48, 98, 20, 47,  3, 65, 87, 25, 51, 73, 26, 62,  5, 81,  6, 44,\n       14, 12, 88, 82, 15, 29, 41, 60, 89, 24, 66, 78,  2, 55, 10, 13, 97,\n       68, 91, 93, 21, 22, 23, 94, 27, 54, 99, 90, 50, 49, 85, 32])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 10, 11, 16, 19, 22, 29, 33, 38, 40, 42, 48, 52, 55, 57, 62, 65,\n       69, 76, 78, 83, 85, 88, 92, 94, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 3, 1, 5, 3, 3, 6, 4, 5, 2, 2, 5, 4, 3, 2, 5, 3, 3, 6, 2, 5, 2,\n       3, 4, 2, 4, 2])`, type: `ndarray`\n\nres, value: `array([3, 1, 5, 3, 3, 6, 4, 5, 2, 2, 5, 4, 3, 2, 5, 3, 3, 6, 2, 5, 2, 3,\n       4, 2, 4, 2])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    3\nb    1\nc    5\nd    3\ne    3\nf    6\ng    4\nh    5\ni    2\nj    2\nk    5\nl    4\nm    3\nn    2\no    5\np    3\nq    3\nr    6\ns    2\nt    5\nu    2\nv    3\nw    4\nx    2\ny    4\nz    2\nName: julie, dtype: int64`, type: `Series`\n\n### Case 52\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      34\n1      32\n2       9\n3      96\n4      35\n       ..\n995     8\n996    75\n997    91\n998    37\n999    66\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 1,  8, 10, 18, 19, 26, 26, ... , 89, 90, 91, 93, 93, 94, 95, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([ 76, 804, 563,  80, 826, ... , 124, 126, 207, 906, 213, 667])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  32,  75, 121, 154, 198, 238, 272, 311, 353, 384, 419, 464,\n       498, 546, 588, 632, 656, 692, 722, 756, 803, 846, 880, 912, 956])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 0, 1, 0, ... ,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([28, 32, 37, 29, 34, 33, 30, 32, 32, 28, 32, 37, 28, 37, 33, 34, 23,\n       29, 28, 30, 39, 35, 31, 22, 35, 36])`, type: `ndarray`\n\nres, value: `array([28, 32, 37, 29, 34, 33, 30, 32, 32, 28, 32, 37, 28, 37, 33, 34, 23,\n       29, 28, 30, 39, 35, 31, 22, 35, 36])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    28\nb    32\nc    37\nd    29\ne    34\nf    33\ng    30\nh    32\ni    32\nj    28\nk    32\nl    37\nm    28\nn    37\no    33\np    34\nq    23\nr    29\ns    28\nt    30\nu    39\nv    35\nw    31\nx    22\ny    35\nz    36\nName: julie, dtype: int64`, type: `Series`\n\n### Case 53\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      34\n1      32\n2       9\n3      96\n4      35\n       ..\n995     8\n996    75\n997    91\n998    37\n999    66\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   1, ... , 255, 255, 256, 256, 256, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `257`, type: `int`\n\nval, value: `array([26, 34, 46, 83, 67, 86, 90, ... , 88, 89, 93, 95,  0, 16, 31, 78])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([731, 522, 643, 823,  90, ... , 207, 213, 887, 564, 851, 880])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   4,   8,  13,  15, ... , 978, 979, 982, 984, 988, 996])`, shape: `(257,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([4, 4, 5, 2, 2, 4, 1, 2, 4, ... , 7, 4, 6, 5, 1, 3, 2, 4, 8, 4])`, shape: `(257,)`, type: `ndarray`\n\nres, value: `array([4, 4, 5, 2, 2, 4, 1, 2, 4, ... , 7, 4, 6, 5, 1, 3, 2, 4, 8, 4])`, shape: `(257,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    4\n     2015-08-25    5\n     2015-08-26    2\n     2015-08-27    2\n                  ..\nz    2015-08-28    3\n     2015-08-29    2\n     2015-08-30    4\n     2015-08-31    8\n     2015-09-01    4\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n### Case 54\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      34.0\n1      32.0\n2       9.0\n3      96.0\n4      35.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    37.0\n999    66.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.50000000e+01,  9.90000000e+01])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      3.400000e+01\n1      3.200000e+01\n2      9.000000e+00\n3      9.600000e+01\n4      3.500000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    3.700000e+01\n999    6.600000e+01\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 124, 126, 207, 906, 213, 667])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  90, 132, 176, 208, 249, 287, 318, 355, 396, 427, 459, 500,\n       531, 576, 615, 656, 677, 712, 741, 773, 817, 857, 889, 919, 960])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 1, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([39, 25, 27, 35, 21, 31, 29, 25, 27, 29, 28, 28, 30, 26, 33, 31, 22,\n       15, 27, 24, 22, 27, 29, 25, 19, 31, 32])`, type: `ndarray`\n\nres, value: `array([25, 27, 35, 21, 31, 29, 25, 27, 29, 28, 28, 30, 26, 33, 31, 22, 15,\n       27, 24, 22, 27, 29, 25, 19, 31, 32])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    25\nb    27\nc    35\nd    21\ne    31\nf    29\ng    25\nh    27\ni    29\nj    28\nk    28\nl    30\nm    26\nn    33\no    31\np    22\nq    15\nr    27\ns    24\nt    22\nu    27\nv    29\nw    25\nx    19\ny    31\nz    32\nName: julie, dtype: int64`, type: `Series`\n\n### Case 55\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7\n1       12\n2       85\n3       14\n4        0\n        ..\n9995    75\n9996    89\n9997    69\n9998    17\n9999    78\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  41, 1774, 3861, ..., 6136, 6222, 9434])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  406,  780, 1160, 1515, 1865, 2248, 2612, 3019, 3422, 3826,\n       4207, 4575, 4960, 5335, 5717, 6096, 6500, 6873, 7272, 7660, 8050,\n       8459, 8837, 9223, 9631])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 97,  97,  99, 100,  99,  98, 100,  98,  98, 100,  98,  98,  97,\n        96,  99,  97,  98,  98, 100, 100,  98,  97,  97,  99,  98,  95])`, type: `ndarray`\n\nres, value: `array([ 97,  97,  99, 100,  99,  98, 100,  98,  98, 100,  98,  98,  97,\n        96,  99,  97,  98,  98, 100, 100,  98,  97,  97,  99,  98,  95])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na     97\nb     97\nc     99\nd    100\ne     99\nf     98\ng    100\nh     98\ni     98\nj    100\nk     98\nl     98\nm     97\nn     96\no     99\np     97\nq     98\nr     98\ns    100\nt    100\nu     98\nv     97\nw     97\nx     99\ny     98\nz     95\nName: julie, dtype: int64`, type: `Series`\n\n### Case 56\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7\n1       12\n2       85\n3       14\n4        0\n        ..\n9995    75\n9996    89\n9997    69\n9998    17\n9999    78\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 4,  4,  6, ..., 91, 94, 97])`, type: `ndarray`\n\nsorter, value: `array([1231, 7262, 8827, ...,  352, 5478, 2039])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   38,   78,  120,  149, ... , 9831, 9863, 9899, 9928, 9959])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([31, 29, 35, 25, 37, 34, 31, ... , 24,\n       28, 28, 26, 25, 32])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([31, 29, 35, 25, 37, 34, 31, ... , 24,\n       28, 28, 26, 25, 32])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    31\n     2015-08-24    29\n     2015-08-25    35\n     2015-08-26    25\n     2015-08-27    37\n                   ..\nz    2015-08-28    28\n     2015-08-29    28\n     2015-08-30    26\n     2015-08-31    25\n     2015-09-01    32\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 57\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7.0\n1       12.0\n2       85.0\n3       14.0\n4        0.0\n        ... \n9995    75.0\n9996    89.0\n9997    69.0\n9998    17.0\n9999    78.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ...,  525, 6136, 9434])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  973, 1320, 1678, 2006, 2342, 2701, 3048, 3429, 3806, 4186,\n       4546, 4895, 5260, 5614, 5975, 6338, 6710, 7068, 7438, 7805, 8176,\n       8557, 8914, 9280, 9651])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101,  94,  96,  98, 100,  97,  97,  95,  95,  94, 101,  98,  97,\n        94,  97,  98,  94,  95,  99, 101,  98,  99,  97,  94,  97,  96,\n        94])`, type: `ndarray`\n\nres, value: `array([ 94,  96,  98, 100,  97,  97,  95,  95,  94, 101,  98,  97,  94,\n        97,  98,  94,  95,  99, 101,  98,  99,  97,  94,  97,  96,  94])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na     94\nb     96\nc     98\nd    100\ne     97\nf     97\ng     95\nh     95\ni     94\nj    101\nk     98\nl     97\nm     94\nn     97\no     98\np     94\nq     95\nr     99\ns    101\nt     98\nu     99\nv     97\nw     94\nx     97\ny     96\nz     94\nName: julie, dtype: int64`, type: `Series`\n\n### Case 58\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        43\n1        34\n2        40\n3        53\n4        33\n         ..\n99995    49\n99996    18\n99997    39\n99998    60\n99999    97\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 1096,  5951,  6953, ..., 91704, 93182, 94346])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3912,  7752, 11550, 15356, 19294, 23111, 27001, 30837,\n       34689, 38485, 42273, 46175, 49929, 53895, 57695, 61599, 65412,\n       69229, 73018, 76713, 80659, 84526, 88385, 92341, 96175])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n### Case 59\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        43\n1        34\n2        40\n3        53\n4        33\n         ..\n99995    49\n99996    18\n99997    39\n99998    60\n99999    97\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 5951,  6953,  7823, ..., 17607, 81841, 93182])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   433,   799,  1168, ... , 98129, 98481, 98853, 99246, 99612])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 98,  99,  98,  98,  99, ... ,  99, 100,  96,  98,  95,  98])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([ 98,  99,  98,  98,  99, ... ,  99, 100,  96,  98,  95,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23     98\n     2015-08-24     99\n     2015-08-25     98\n     2015-08-26     98\n     2015-08-27     99\n                  ... \nz    2015-08-28    100\n     2015-08-29     96\n     2015-08-30     98\n     2015-08-31     95\n     2015-09-01     98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 60\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        43.0\n1        34.0\n2        40.0\n3        53.0\n4        33.0\n         ... \n99995    49.0\n99996    18.0\n99997    39.0\n99998    60.0\n99999    97.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 91704, 93182, 94346])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9548, 13140, 16709, 20292, 23980, 27585, 31241, 34859,\n       38479, 42046, 45637, 49321, 52840, 56589, 60169, 63842, 67438,\n       71024, 74566, 78052, 81771, 85403, 89065, 92780, 96386])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64`, type: `Series`\n\n### Case 61\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     686\n1     614\n2     619\n3     249\n4     457\n     ... \n95     96\n96    312\n97    803\n98    162\n99    546\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,\n        3,  4,  4,  4,  4,  4,  5,  5,  5,  6,  6,  7,  7,  7,  7,  8,  8,\n        8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 13,\n       13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 17, 17,\n       17, 17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21,\n       22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([112, 292, 388, 545, 112, ... , 165, 803, 918,  83, 298, 876])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([84, 39, 81,  7, 28, 67, 52, 56,  9, 96, 50, 91, 85, 64, 68, 57, 25,\n       27, 45, 62, 69, 70, 21, 95, 93, 32, 98, 46, 24, 55, 99, 60, 20, 31,\n       34, 59, 83, 48, 88, 47, 77, 23, 13,  4, 10, 49, 38,  5,  1,  2, 65,\n        3, 86, 16, 19,  0, 87, 26, 90, 35, 15, 33,  8, 22, 76, 71, 37, 18,\n       44, 54, 14, 75, 53, 94, 92, 74, 78, 66, 12, 29, 43, 42,  6, 82, 40,\n       73, 61, 79, 72, 63, 17, 80, 11, 36, 51, 97, 30, 89, 41, 58])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  4,  9, 14, 18, 23, 26, 28, 32, 36, 41, 45, 48, 50, 57, 60, 64,\n       66, 71, 74, 75, 82, 85, 88, 91, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([4, 5, 5, 4, 5, 3, 2, 4, 4, 5, 4, 3, 2, 7, 3, 4, 2, 5, 3, 1, 7, 3,\n       3, 3, 6, 3])`, type: `ndarray`\n\nres, value: `array([4, 5, 5, 4, 5, 3, 2, 4, 4, 5, 4, 3, 2, 7, 3, 4, 2, 5, 3, 1, 7, 3,\n       3, 3, 6, 3])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    4\nb    5\nc    5\nd    4\ne    5\nf    3\ng    2\nh    4\ni    4\nj    5\nk    4\nl    3\nm    2\nn    7\no    3\np    4\nq    2\nr    5\ns    3\nt    1\nu    7\nv    3\nw    3\nx    3\ny    6\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Case 62\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     686\n1     614\n2     619\n3     249\n4     457\n     ... \n95     96\n96    312\n97    803\n98    162\n99    546\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8,  9, 10, 11, 12, 13,\n       14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 26, 27, 28,\n       29, 29, 30, 31, 31, 32, 33, 34, 35, 36, 37, 38, 39, 39, 40, 41, 42,\n       43, 44, 44, 44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55, 56,\n       56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 64, 65, 65, 66, 67, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 79, 80, 81, 82])`, type: `ndarray`\n\n_, value: `83`, type: `int`\n\nval, value: `array([112, 388, 292, 545, 112, ... , 110, 119, 165,  83, 298, 876])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([84, 81, 39,  7, 28, 52,  9, 67, 56, 91, 50, 85, 96, 64, 57, 68, 25,\n       27, 62, 70, 69, 21, 45, 32, 93, 95, 46, 98, 55, 24, 99, 60, 59, 34,\n       20, 31, 47, 48, 88, 77, 83, 10, 13,  4, 23,  5, 49, 38,  1,  2, 86,\n       16, 19,  0, 87, 65,  3, 90, 26, 35, 15, 22,  8, 33, 71, 76, 54, 44,\n       14, 18, 37, 53, 94, 75, 92, 29, 66, 12, 42, 74, 78, 43, 82, 40,  6,\n       61, 79, 73, 72, 63, 17, 97, 30, 80, 11, 36, 51, 89, 41, 58])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  1,  2,  3,  4,  6,  7,  9, 10, 12, 13, 14, 15, 16, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 36, 37, 39, 40,\n       41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60,\n       62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 79, 81, 82,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 2,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 2,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-24') ... ('z', '2015-08-28')],\n           names=['jim', 'joe'])`, shape: `(83,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-28    1\nb    2015-08-25    2\n                  ..\ny    2015-08-31    1\n     2015-09-01    2\nz    2015-08-23    1\n     2015-08-25    1\n     2015-08-28    1\nName: julie, Length: 83, dtype: int64`, type: `Series`\n\n### Case 63\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     686.0\n1     614.0\n2     619.0\n3     249.0\n4     457.0\n      ...  \n95     96.0\n96    312.0\n97    803.0\n98    162.0\n99    546.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,\n        2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,  7,  7,\n        7,  7,  8,  8,  8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11,\n       11, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 17,\n       17, 17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21,\n       22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 2.24000000e+02,  5.61000000e+02, ... ,  2.98000000e+02,  8.76000000e+02])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([69, 86,  1, 18, 52, 35,  7, 84, 39, 81,  9, 28, 67, 56, 64, 85, 96,\n       50, 91, 27, 68, 57, 25, 45, 62, 70, 21, 95, 93, 32, 46, 98, 24, 55,\n       99, 60, 20, 31, 34, 59, 47, 83, 48, 88, 77, 23, 13,  4, 10, 49, 38,\n        5,  2, 65,  3, 16, 19,  0, 87, 26, 90,  8, 15, 33, 22, 76, 71, 37,\n       44, 54, 14, 75, 53, 94, 92, 66, 74, 78, 12, 29, 43, 42,  6, 82, 40,\n       73, 61, 79, 72, 63, 17, 80, 11, 36, 51, 97, 30, 89, 41, 58])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 10, 14, 19, 23, 27, 30, 32, 36, 40, 45, 49, 52, 53, 59, 61, 65,\n       67, 71, 74, 75, 82, 85, 88, 91, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 3, 3, 4, 4, 4, 3, 2, 4, 4, 4, 4, 3, 1, 6, 2, 4, 2, 4, 3, 1, 7,\n       3, 3, 3, 6, 3])`, type: `ndarray`\n\nres, value: `array([3, 3, 4, 4, 4, 3, 2, 4, 4, 4, 4, 3, 1, 6, 2, 4, 2, 4, 3, 1, 7, 3,\n       3, 3, 6, 3])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    3\nb    3\nc    4\nd    4\ne    4\nf    3\ng    2\nh    4\ni    4\nj    4\nk    4\nl    3\nm    1\nn    6\no    2\np    4\nq    2\nr    4\ns    3\nt    1\nu    7\nv    3\nw    3\nx    3\ny    6\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Case 64\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      942\n1      605\n2      251\n3      395\n4      189\n      ... \n995    820\n996    104\n997    324\n998    126\n999    425\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  3,  45,  53,  63,  71, ... , 882, 900, 933, 936, 962, 990])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([603, 635, 339, 355, 494, ... , 205, 774,   8, 982, 896, 872])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  43,  79, 117, 162, 212, 260, 292, 334, 373, 418, 450, 482,\n       511, 550, 591, 617, 653, 696, 737, 779, 812, 853, 882, 920, 953])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([43, 35, 38, 45, 49, 45, 32, 42, 38, 44, 32, 32, 29, 38, 41, 26, 36,\n       42, 41, 40, 33, 38, 29, 38, 31, 46])`, type: `ndarray`\n\nres, value: `array([43, 35, 38, 45, 49, 45, 32, 42, 38, 44, 32, 32, 29, 38, 41, 26, 36,\n       42, 41, 40, 33, 38, 29, 38, 31, 46])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    43\nb    35\nc    38\nd    45\ne    49\nf    45\ng    32\nh    42\ni    38\nj    44\nk    32\nl    32\nm    29\nn    38\no    41\np    26\nq    36\nr    42\ns    41\nt    40\nu    33\nv    38\nw    29\nx    38\ny    31\nz    46\nName: julie, dtype: int64`, type: `Series`\n\n### Case 65\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      942\n1      605\n2      251\n3      395\n4      189\n      ... \n995    820\n996    104\n997    324\n998    126\n999    425\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   1,   1,   1,   1, ... , 255, 255, 256, 256, 256, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `257`, type: `int`\n\nval, value: `array([582, 244, 592, 774, 786, ... , 716, 882, 429, 556, 765, 785])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([954, 181, 513, 854, 186, ... , 292, 205, 690, 665, 609, 133])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   1,   6,  11,  14, ... , 975, 976, 982, 987, 989, 996])`, shape: `(257,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 1,  5,  5,  3,  6,  7,  5, ... ,  1,  6,  5,  2,\n        7,  4])`, shape: `(257,)`, type: `ndarray`\n\nres, value: `array([ 1,  5,  5,  3,  6,  7,  5, ... ,  1,  6,  5,  2,\n        7,  4])`, shape: `(257,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    5\n     2015-08-25    5\n     2015-08-26    3\n     2015-08-27    6\n                  ..\nz    2015-08-28    6\n     2015-08-29    5\n     2015-08-30    2\n     2015-08-31    7\n     2015-09-01    4\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n### Case 66\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      942.0\n1      605.0\n2      251.0\n3      395.0\n4      189.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    126.0\n999    425.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.62000000e+02,  9.90000000e+02])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      9.420000e+02\n1      6.050000e+02\n2      2.510000e+02\n3      3.950000e+02\n4      1.890000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    1.260000e+02\n999    4.250000e+02\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 133, 163, 774, 982, 896, 872])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  99, 132, 167, 208, 255, 299, 331, 372, 408, 451, 482, 510,\n       539, 575, 614, 637, 672, 713, 753, 793, 824, 862, 889, 926, 957])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([49, 35, 27, 32, 37, 38, 40, 26, 35, 29, 38, 29, 24, 27, 31, 33, 19,\n       29, 37, 34, 29, 30, 31, 25, 31, 24, 36])`, type: `ndarray`\n\nres, value: `array([35, 27, 32, 37, 38, 40, 26, 35, 29, 38, 29, 24, 27, 31, 33, 19, 29,\n       37, 34, 29, 30, 31, 25, 31, 24, 36])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    35\nb    27\nc    32\nd    37\ne    38\nf    40\ng    26\nh    35\ni    29\nj    38\nk    29\nl    24\nm    27\nn    31\no    33\np    19\nq    29\nr    37\ns    34\nt    29\nu    30\nv    31\nw    25\nx    31\ny    24\nz    36\nName: julie, dtype: int64`, type: `Series`\n\n### Case 67\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       419\n1       973\n2       819\n3       293\n4       564\n       ... \n9995    729\n9996    779\n9997    303\n9998    400\n9999    342\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  0,   2,   3, ..., 992, 995, 997])`, type: `ndarray`\n\nsorter, value: `array([8914, 4651, 5082, ..., 8365, 4767, 1971])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  370,  749, 1158, 1558, 1955, 2328, 2680, 3031, 3416, 3787,\n       4170, 4552, 4922, 5306, 5729, 6132, 6510, 6904, 7305, 7677, 8037,\n       8449, 8799, 9233, 9610])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([301, 320, 327, 327, 328, 307, 289, 294, 323, 322, 318, 330, 300,\n       316, 349, 339, 318, 333, 331, 314, 314, 327, 311, 367, 314, 325])`, type: `ndarray`\n\nres, value: `array([301, 320, 327, 327, 328, 307, 289, 294, 323, 322, 318, 330, 300,\n       316, 349, 339, 318, 333, 331, 314, 314, 327, 311, 367, 314, 325])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    301\nb    320\nc    327\nd    327\ne    328\nf    307\ng    289\nh    294\ni    323\nj    322\nk    318\nl    330\nm    300\nn    316\no    349\np    339\nq    318\nr    333\ns    331\nt    314\nu    314\nv    327\nw    311\nx    367\ny    314\nz    325\nName: julie, dtype: int64`, type: `Series`\n\n### Case 68\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       419\n1       973\n2       819\n3       293\n4       564\n       ... \n9995    729\n9996    779\n9997    303\n9998    400\n9999    342\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([  2,  23,  27, ..., 981, 984, 991])`, type: `ndarray`\n\nsorter, value: `array([4651, 8551, 6121, ..., 5861,  349,  452])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   34,   75,  110,  147, ... , 9801, 9846, 9880, 9930, 9965])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([33, 40, 35, 37, 31, 38, 36, ... , 35,\n       42, 33, 48, 34, 32])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([33, 40, 35, 37, 31, 38, 36, ... , 35,\n       42, 33, 48, 34, 32])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    33\n     2015-08-24    40\n     2015-08-25    35\n     2015-08-26    37\n     2015-08-27    31\n                   ..\nz    2015-08-28    42\n     2015-08-29    33\n     2015-08-30    48\n     2015-08-31    34\n     2015-09-01    32\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 69\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       419.0\n1       973.0\n2       819.0\n3       293.0\n4       564.0\n        ...  \n9995    729.0\n9996    779.0\n9997    303.0\n9998    400.0\n9999    342.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.91000000e+02,  9.95000000e+02,  9.97000000e+02])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ...,  452, 4767, 1971])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  939, 1294, 1668, 2044, 2413, 2760, 3090, 3422, 3791, 4146,\n       4509, 4865, 5212, 5569, 5955, 6338, 6693, 7062, 7438, 7795, 8131,\n       8521, 8857, 9274, 9631])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([378, 253, 251, 260, 281, 270, 262, 238, 249, 273, 276, 268, 267,\n       252, 252, 288, 273, 250, 275, 272, 260, 261, 286, 258, 298, 260,\n       267])`, type: `ndarray`\n\nres, value: `array([253, 251, 260, 281, 270, 262, 238, 249, 273, 276, 268, 267, 252,\n       252, 288, 273, 250, 275, 272, 260, 261, 286, 258, 298, 260, 267])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    253\nb    251\nc    260\nd    281\ne    270\nf    262\ng    238\nh    249\ni    273\nj    276\nk    268\nl    267\nm    252\nn    252\no    288\np    273\nq    250\nr    275\ns    272\nt    260\nu    261\nv    286\nw    258\nx    298\ny    260\nz    267\nName: julie, dtype: int64`, type: `Series`\n\n### Case 70\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        719\n1        748\n2        774\n3        505\n4         81\n        ... \n99995    269\n99996    835\n99997    951\n99998    605\n99999    203\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([ 2922,  8217,  9537, ..., 38648, 39962, 70695])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3735,  7688, 11594, 15376, 19106, 22905, 26795, 30704,\n       34523, 38476, 42289, 46182, 50165, 54025, 57785, 61560, 65400,\n       69242, 73079, 76938, 80824, 84614, 88514, 92365, 96078])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([979, 985, 983, 983, 973, 984, 983, 972, 977, 983, 970, 975, 980,\n       977, 975, 978, 985, 981, 977, 983, 987, 972, 975, 976, 975, 986])`, type: `ndarray`\n\nres, value: `array([979, 985, 983, 983, 973, 984, 983, 972, 977, 983, 970, 975, 980,\n       977, 975, 978, 985, 981, 977, 983, 987, 972, 975, 976, 975, 986])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    979\nb    985\nc    983\nd    983\ne    973\nf    984\ng    983\nh    972\ni    977\nj    983\nk    970\nl    975\nm    980\nn    977\no    975\np    978\nq    985\nr    981\ns    977\nt    983\nu    987\nv    972\nw    975\nx    976\ny    975\nz    986\nName: julie, dtype: int64`, type: `Series`\n\n### Case 71\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        719\n1        748\n2        774\n3        505\n4         81\n        ... \n99995    269\n99996    835\n99997    951\n99998    605\n99999    203\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([  2,   3,   4, ..., 993, 994, 997])`, type: `ndarray`\n\nsorter, value: `array([57786, 92334, 81980, ..., 61828, 36663, 71552])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   366,   689,  1067, ... , 98031, 98461, 98847, 99230, 99593])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([303, 279, 315, 323, 340, ... , 339, 352, 317, 329, 308, 333])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([303, 279, 315, 323, 340, ... , 339, 352, 317, 329, 308, 333])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    303\n     2015-08-24    279\n     2015-08-25    315\n     2015-08-26    323\n     2015-08-27    340\n                  ... \nz    2015-08-28    352\n     2015-08-29    317\n     2015-08-30    329\n     2015-08-31    308\n     2015-09-01    333\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 72\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        719.0\n1        748.0\n2        774.0\n3        505.0\n4         81.0\n         ...  \n99995    269.0\n99996    835.0\n99997    951.0\n99998    605.0\n99999    203.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `False`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 38648, 39962, 70695])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9394, 13139, 16832, 20408, 23904, 27470, 31135, 34790,\n       38366, 42067, 45667, 49359, 53080, 56735, 60245, 63799, 67414,\n       71057, 74653, 78261, 81923, 85473, 89157, 92784, 96300])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([993, 951, 962, 960, 951, 941, 949, 960, 950, 944, 960, 941, 947,\n       950, 955, 955, 958, 963, 957, 952, 953, 959, 941, 955, 949, 952,\n       952])`, type: `ndarray`\n\nres, value: `array([951, 962, 960, 951, 941, 949, 960, 950, 944, 960, 941, 947, 950,\n       955, 955, 958, 963, 957, 952, 953, 959, 941, 955, 949, 952, 952])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    951\nb    962\nc    960\nd    951\ne    941\nf    949\ng    960\nh    950\ni    944\nj    960\nk    941\nl    947\nm    950\nn    955\no    955\np    958\nq    963\nr    957\ns    952\nt    953\nu    959\nv    941\nw    955\nx    949\ny    952\nz    952\nName: julie, dtype: int64`, type: `Series`\n\n### Case 73\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     3\n1     4\n2     9\n3     2\n4     1\n     ..\n95    5\n96    2\n97    4\n98    0\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,\n        2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  6,  6,\n        7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,\n       10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14,\n       14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19,\n       19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([0, 0, 0, 3, 3, 4, 8, 9, 1, 1, 2, 4, 4, 7, 4, 5, 5, 7, 8, 9, 0, 2,\n       4, 5, 8, 8, 9, 1, 6, 7, 2, 8, 0, 8, 0, 2, 4, 5, 8, 1, 2, 2, 4, 6,\n       9, 0, 1, 2, 6, 8, 8, 0, 1, 3, 8, 0, 1, 2, 6, 0, 6, 7, 8, 8, 3, 3,\n       7, 4, 8, 0, 4, 5, 7, 8, 4, 5, 6, 5, 6, 7, 3, 5, 8, 8, 2, 4, 7, 9,\n       0, 3, 8, 0, 1, 6, 9, 1, 2, 0, 3, 0])`, type: `ndarray`\n\nsorter, value: `array([22, 42, 98,  0, 15, 27,  6, 51, 23, 62, 71,  1, 97, 83, 93, 28, 85,\n       80, 11,  2, 24,  3, 89, 41, 36, 74, 35,  4, 55, 52, 92,  5, 37,  7,\n       49, 14, 56, 88,  8, 16, 17, 31, 59, 54,  9, 10, 33, 70, 66, 64, 67,\n       94, 12, 73, 84, 13, 44, 96, 19, 38, 32, 34, 18, 40, 25, 26, 20, 21,\n       45, 47, 46, 29, 87, 30, 79, 99, 39, 43, 91, 86, 60, 95, 48, 61, 82,\n       50, 65, 57, 53, 81, 63, 58, 77, 72, 76, 68, 78, 69, 90, 75])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  8, 14, 20, 27, 30, 32, 34, 39, 45, 51, 55, 59, 64, 67, 69, 74,\n       77, 80, 84, 88, 91, 95, 97, 99])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 4, 5, 6, 3, 2, 2, 5, 5, 5, 4, 4, 4, 2, 2, 5, 3, 3, 3, 4, 3, 4,\n       2, 2, 1])`, type: `ndarray`\n\nres, value: `array([5, 4, 5, 6, 3, 2, 2, 5, 5, 5, 4, 4, 4, 2, 2, 5, 3, 3, 3, 4, 3, 4,\n       2, 2, 1])`, type: `ndarray`\n\nri, value: `Index(['r', 'b', 'l', 'y', 'h', 'e', 'u', 'n', 'g', 'f', 'i', 'v', 'm', 'd',\n       'o', 'x', 'c', 'j', 'p', 'q', 's', 'k', 'z', 't', 'a'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nr    5\nb    4\nl    5\ny    6\nh    3\ne    2\nu    2\nn    5\ng    5\nf    5\ni    4\nv    4\nm    4\nd    2\no    2\nx    5\nc    3\nj    3\np    3\nq    4\ns    3\nk    4\nz    2\nt    2\na    1\nName: julie, dtype: int64`, type: `Series`\n\n### Case 74\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     3\n1     4\n2     9\n3     2\n4     1\n     ..\n95    5\n96    2\n97    4\n98    0\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  1,  2,  2,  3,  4,  5,  6,  6,  7,  8,  8,  9, 10, 11, 12,\n       12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 25,\n       26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 34, 35, 36, 37, 38, 39,\n       40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55,\n       55, 56, 57, 58, 59, 59, 60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69,\n       70, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83])`, type: `ndarray`\n\n_, value: `84`, type: `int`\n\nval, value: `array([3, 1, 4, 5, 9, 2, 1, 8, 4, 8, 8, 5, 8, 9, 0, 8, 1, 8, 0, 2, 4, 3,\n       1, 2, 8, 6, 7, 4, 0, 0, 0, 0, 3, 3, 5, 8, 2, 6, 8, 1, 7, 9, 5, 8,\n       8, 0, 0, 6, 5, 1, 8, 4, 0, 8, 0, 4, 9, 7, 0, 6, 6, 7, 9, 0, 4, 3,\n       8, 1, 4, 8, 8, 6, 2, 8, 1, 0, 2, 6, 0, 3, 0, 9, 1, 2, 4, 4, 7, 3,\n       2, 7, 5, 7, 7, 4, 3, 6, 2, 5, 2, 5])`, type: `ndarray`\n\nsorter, value: `array([ 0, 23,  1, 28,  2,  3,  4,  5, 27,  6,  7, 88,  8,  9, 10, 11, 12,\n       84, 13, 14, 56, 15, 16, 17, 18, 19, 20, 21, 22, 42, 98, 24, 25, 26,\n       29, 30, 31, 32, 40, 33, 34, 35, 41, 36, 74, 37, 38, 39, 43, 44, 45,\n       46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 65, 57, 58, 59, 60, 61, 62,\n       97, 63, 64, 66, 70, 67, 68, 69, 71, 72, 94, 73, 75, 76, 77, 78, 79,\n       93, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 95, 96, 99])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  1,  3,  5,  6,  7,  8, 10, 11, 13, 14, 15, 16, 18, 19, 21, 22,\n       23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42,\n       45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n       63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82,\n       83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('r', '2015-08-24') ... ('c', '2015-08-25')],\n           names=['jim', 'joe'])`, shape: `(84,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nr    2015-08-24    1\nb    2015-08-23    2\nl    2015-08-26    2\ny    2015-09-01    1\nh    2015-08-24    1\n                  ..\nj    2015-08-30    1\ne    2015-08-24    1\np    2015-08-26    1\nv    2015-08-31    1\nc    2015-08-25    1\nName: julie, Length: 84, dtype: int64`, type: `Series`\n\n### Case 75\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     3.0\n1     4.0\n2     9.0\n3     2.0\n4     1.0\n     ... \n95    5.0\n96    2.0\n97    4.0\n98    0.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,\n        1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,\n        9,  9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 13, 13, 14,\n       14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 18, 18, 18, 18,\n       19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([ 0.00000000e+00,  4.00000000e+00, ... ,  0.00000000e+00,  3.00000000e+00])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([69,  1, 52, 86, 18, 35, 27, 22, 42, 98,  0, 15,  6, 51, 28, 85, 93,\n       80, 11,  2, 24,  3, 89, 41, 36, 74,  4, 55, 92,  5,  7, 37,  8, 49,\n       14, 56, 88,  9, 16, 17, 31, 59, 54, 64, 66, 10, 33, 70, 67, 84, 94,\n       12, 73, 13, 44, 96, 19, 26, 25, 20, 45, 21, 83, 23, 62, 71, 97, 46,\n       47, 29, 87, 30, 38, 32, 34, 40, 79, 99, 39, 43, 91, 60, 95, 48, 61,\n       65, 82, 50, 57, 53, 81, 63, 58, 77, 72, 76, 68, 78, 75, 90])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 14, 20, 26, 28, 30, 32, 37, 43, 49, 53, 57, 60, 62, 67, 72, 76,\n       79, 81, 85, 89, 92, 96, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 4, 4, 3, 2, 4, 4, 4, 3, 2, 3, 4, 3,\n       4, 2, 1, 1])`, type: `ndarray`\n\nres, value: `array([5, 5, 5, 2, 2, 2, 5, 5, 5, 4, 4, 3, 2, 4, 4, 4, 3, 2, 3, 4, 3, 4,\n       2, 1, 1])`, type: `ndarray`\n\nri, value: `Index(['r', 'l', 'y', 'h', 'e', 'u', 'n', 'g', 'f', 'i', 'v', 'd', 'o', 'b',\n       'x', 'm', 'c', 'j', 'p', 'q', 's', 'k', 'z', 'a', 't'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nr    5\nl    5\ny    5\nh    2\ne    2\nu    2\nn    5\ng    5\nf    5\ni    4\nv    4\nd    3\no    2\nb    4\nx    4\nm    4\nc    3\nj    2\np    3\nq    4\ns    3\nk    4\nz    2\na    1\nt    1\nName: julie, dtype: int64`, type: `Series`\n\n### Case 76\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      7\n1      0\n2      6\n3      2\n4      4\n      ..\n995    0\n996    8\n997    5\n998    2\n999    8\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 1, 2, 2, 3, 3, 3, 3, 3, ... ,\n       5, 5, 6, 6, 6, 7, 8, 8, 8, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([242, 398,  38, 465, 204, ... , 509, 392,  72, 224, 490, 609])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  43,  76, 113, 158, 191, 233, 266, 314, 355, 393, 428, 459,\n       496, 540, 578, 612, 653, 705, 743, 791, 828, 859, 899, 939, 977])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 0, 0, 0, 0, ... ,\n       1, 0, 1, 0, 0, 1, 1, 0, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10,  9, 10,  9, 10, 10, 10,  9, 10, 10, 10, 10,  8, 10,\n       10, 10, 10,  9, 10, 10, 10, 10,  9])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10,  9, 10,  9, 10, 10, 10,  9, 10, 10, 10, 10,  8, 10,\n       10, 10, 10,  9, 10, 10, 10, 10,  9])`, type: `ndarray`\n\nri, value: `Index(['p', 'y', 'i', 'e', 'd', 'a', 'j', 'g', 'r', 'x', 'm', 's', 'v', 'w',\n       't', 'q', 'f', 'k', 'u', 'c', 'o', 'b', 'z', 'h', 'l', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    10\ny    10\ni    10\ne    10\nd     9\na    10\nj     9\ng    10\nr    10\nx    10\nm     9\ns    10\nv    10\nw    10\nt    10\nq     8\nf    10\nk    10\nu    10\nc    10\no     9\nb    10\nz    10\nh    10\nl    10\nn     9\nName: julie, dtype: int64`, type: `Series`\n\n### Case 77\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      7\n1      0\n2      6\n3      2\n4      4\n      ..\n995    0\n996    8\n997    5\n998    2\n999    8\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   1, ... , 251, 252, 253, 254, 255, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `257`, type: `int`\n\nval, value: `array([3, 6, 7, 7, 0, 1, 1, 4, 6, ... ,\n       4, 1, 6, 5, 6, 5, 0, 0, 0, 7])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([204, 367,   0, 717,   1, ... , 882, 886, 902, 956, 970, 984])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   4,   9,  15,  24, ... , 993, 995, 996, 997, 998, 999])`, shape: `(257,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 0, 1, 1, 0, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([3, 4, 4, 5, 2, 5, 2, 4, 6, ... , 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, shape: `(257,)`, type: `ndarray`\n\nres, value: `array([3, 4, 4, 5, 2, 5, 2, 4, 6, ... , 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, shape: `(257,)`, type: `ndarray`\n\nri, value: `MultiIndex([('p', '2015-09-01') ... ('y', '2015-08-27')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \np    2015-09-01    3\ny    2015-08-25    4\ni    2015-08-23    4\ne    2015-09-01    5\np    2015-08-30    2\n                  ..\no    2015-08-26    1\nx    2015-08-23    1\nj    2015-08-25    1\ne    2015-08-29    1\ny    2015-08-27    1\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n### Case 78\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      7.0\n1      0.0\n2      6.0\n3      2.0\n4      4.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    2.0\n999    8.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  8.00000000e+00,  9.00000000e+00])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      7.000000e+00\n1      0.000000e+00\n2      6.000000e+00\n3      2.000000e+00\n4      4.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    2.000000e+00\n999    8.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 279, 509,  72, 224, 490, 609])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59, 101, 136, 180, 211, 250, 282, 325, 363, 397, 430, 459, 492,\n       535, 572, 604, 644, 695, 725, 761, 796, 841, 869, 908, 946, 983])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 0, 0, 0, 1, 0, 1, 0, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 10, 11, 10, 11, 11, 11, 10, 10, 11, 10, 11,  9, 11,\n       11, 11, 11, 10, 11, 11, 11, 10, 11,  8])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 10, 11, 10, 11, 11, 11, 10, 10, 11, 10, 11,  9, 11, 11,\n       11, 11, 10, 11, 11, 11, 10, 11,  8])`, type: `ndarray`\n\nri, value: `Index(['p', 'i', 'e', 'd', 'a', 'j', 'g', 'r', 'x', 'm', 's', 'v', 'w', 't',\n       'q', 'f', 'k', 'y', 'u', 'o', 'c', 'b', 'z', 'h', 'l', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\np    11\ni    11\ne    11\nd    10\na    11\nj    10\ng    11\nr    11\nx    11\nm    10\ns    10\nv    11\nw    10\nt    11\nq     9\nf    11\nk    11\ny    11\nu    11\no    10\nc    11\nb    11\nz    11\nh    10\nl    11\nn     8\nName: julie, dtype: int64`, type: `Series`\n\n### Case 79\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       8\n1       3\n2       6\n3       7\n4       8\n       ..\n9995    8\n9996    4\n9997    0\n9998    7\n9999    7\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([ 151,  610, 1087, ..., 9521, 9801, 9855])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  408,  782, 1173, 1569, 1958, 2303, 2654, 3034, 3429, 3824,\n       4232, 4609, 5013, 5380, 5744, 6166, 6539, 6899, 7328, 7720, 8099,\n       8493, 8877, 9234, 9618])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['g', 'b', 'w', 'd', 'j', 'v', 'e', 'n', 's', 'y', 'c', 'm', 'p', 'o',\n       'z', 'r', 'k', 'q', 't', 'h', 'a', 'i', 'l', 'u', 'x', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ng    10\nb    10\nw    10\nd    10\nj    10\nv    10\ne    10\nn    10\ns    10\ny    10\nc    10\nm    10\np    10\no    10\nz    10\nr    10\nk    10\nq    10\nt    10\nh    10\na    10\ni    10\nl    10\nu    10\nx    10\nf    10\nName: julie, dtype: int64`, type: `Series`\n\n### Case 80\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       8\n1       3\n2       6\n3       7\n4       8\n       ..\n9995    8\n9996    4\n9997    0\n9998    7\n9999    7\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([0, 0, 1, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([4528, 7893,  623, ..., 4203, 7552, 8912])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   40,   84,  127,  165, ... , 9807, 9844, 9886, 9926, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10,  8, 10, 10, ... ,  9,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10,  8, 10, 10, ... ,  9,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('g', '2015-08-26') ... ('j', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ng    2015-08-26    10\nb    2015-08-26    10\nw    2015-08-23    10\nd    2015-08-25    10\nj    2015-08-24     8\n                   ..\nx    2015-08-30    10\nh    2015-08-30    10\nv    2015-08-29    10\ne    2015-08-27    10\nj    2015-08-23    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 81\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       8.0\n1       3.0\n2       6.0\n3       7.0\n4       8.0\n       ... \n9995    8.0\n9996    4.0\n9997    0.0\n9998    7.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9075, 9346, 9852])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  967, 1337, 1704, 2080, 2398, 2728, 3086, 3459, 3829, 4219,\n       4565, 4948, 5292, 5639, 6041, 6382, 6781, 7150, 7509, 7876, 8234,\n       8580, 8937, 9301, 9654])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['g', 'w', 'd', 'j', 'v', 'e', 'n', 's', 'y', 'c', 'm', 'p', 'o', 'z',\n       'r', 'q', 't', 'h', 'a', 'i', 'l', 'k', 'x', 'f', 'b', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ng    11\nw    11\nd    11\nj    11\nv    11\ne    11\nn    11\ns    11\ny    11\nc    11\nm    11\np    11\no    11\nz    11\nr    11\nq    11\nt    11\nh    11\na    11\ni    11\nl    11\nk    11\nx    11\nf    11\nb    11\nu    11\nName: julie, dtype: int64`, type: `Series`\n\n### Case 82\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        8\n1        8\n2        5\n3        4\n4        7\n        ..\n99995    9\n99996    7\n99997    5\n99998    4\n99999    0\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([  407,   638,  1222, ..., 98570, 99400, 99711])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3865,  7761, 11642, 15504, 19247, 23137, 27027, 30814,\n       34563, 38451, 42254, 46029, 49881, 53597, 57452, 61369, 65203,\n       69108, 73072, 76900, 80734, 84550, 88327, 92291, 96184])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['k', 'q', 'p', 'r', 'w', 'f', 'y', 'g', 'l', 's', 'b', 'h', 'i', 'z',\n       'n', 'c', 'u', 'd', 'x', 'a', 't', 'm', 'e', 'v', 'j', 'o'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    10\nq    10\np    10\nr    10\nw    10\nf    10\ny    10\ng    10\nl    10\ns    10\nb    10\nh    10\ni    10\nz    10\nn    10\nc    10\nu    10\nd    10\nx    10\na    10\nt    10\nm    10\ne    10\nv    10\nj    10\no    10\nName: julie, dtype: int64`, type: `Series`\n\n### Case 83\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        8\n1        8\n2        5\n3        4\n4        7\n        ..\n99995    9\n99996    7\n99997    5\n99998    4\n99999    0\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([ 1613,  4262,  7618, ..., 91677, 94169, 96950])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   391,   774,  1184, ... , 98097, 98461, 98858, 99223, 99603])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('k', '2015-09-01') ... ('j', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nk    2015-09-01    10\nq    2015-08-28    10\np    2015-08-23    10\nr    2015-08-27    10\nk    2015-08-29    10\n                   ..\nm    2015-08-28    10\nq    2015-09-01    10\no    2015-08-26    10\nj    2015-09-01    10\n     2015-08-27    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 84\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        8.0\n1        8.0\n2        5.0\n3        4.0\n4        7.0\n        ... \n99995    9.0\n99996    7.0\n99997    5.0\n99998    4.0\n99999    0.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 98386, 98570, 99711])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9510, 13178, 16839, 20336, 23992, 27649, 31197, 34717,\n       38385, 42057, 45643, 49299, 52804, 56352, 59977, 63666, 67255,\n       70929, 74637, 78249, 81843, 85424, 88982, 92738, 96402])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['k', 'p', 'r', 'w', 'f', 'y', 'g', 'l', 'q', 's', 'b', 'i', 'z', 'h',\n       'n', 'c', 'u', 'd', 'x', 'a', 't', 'm', 'e', 'v', 'j', 'o'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nk    11\np    11\nr    11\nw    11\nf    11\ny    11\ng    11\nl    11\nq    11\ns    11\nb    11\ni    11\nz    11\nh    11\nn    11\nc    11\nu    11\nd    11\nx    11\na    11\nt    11\nm    11\ne    11\nv    11\nj    11\no    11\nName: julie, dtype: int64`, type: `Series`\n\n### Case 85\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     11\n1     69\n2     17\n3     41\n4     34\n      ..\n95    26\n96    74\n97    75\n98    84\n99    86\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,\n        2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  6,  6,\n        6,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9, 10,\n       10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n       15, 15, 15, 15, 15, 15, 15, 16, 16, 17, 17, 18, 18, 18, 18, 18, 18,\n       19, 19, 19, 19, 20, 21, 21, 21, 21, 21, 22, 22, 23, 24, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([11, 21, 25, 55, 57, 68, 97, 43, 44, 48, 57, 69,  1,  1,  4, 17, 33,\n       39, 51, 67, 26, 41, 60, 81, 81, 82, 84, 24, 34, 36, 84, 36, 33, 46,\n       77, 47, 71, 12, 53, 55, 90, 95,  3, 34, 60, 64, 69, 82, 90, 93, 29,\n       53, 55, 59, 82, 95,  5, 24, 33, 20, 55, 41, 51, 54, 72, 97, 23, 24,\n       25, 27, 56, 63, 75, 82, 87,  6, 72, 69, 69, 24, 33, 41, 74, 75, 75,\n       12, 26, 75, 83, 26, 11, 66, 66, 87, 95,  7, 65, 59, 73, 86])`, type: `ndarray`\n\nsorter, value: `array([ 0, 30, 87, 16, 39, 50,  6, 49, 85, 43, 20,  1, 22, 26, 21,  2, 88,\n       41, 24, 48, 95,  3, 84, 33, 57, 46, 29, 35,  4, 36, 98,  5, 74, 94,\n        7,  8, 58, 76, 66, 18, 19,  9, 90, 54, 10, 82, 47, 44, 17, 63, 80,\n       59, 73, 11, 60, 12, 91, 79, 13, 14, 81, 93, 15, 69, 55, 78, 56, 65,\n       70, 28, 64, 23, 53, 32, 51, 34, 25, 27, 75, 61, 52, 31, 96, 86, 97,\n       42, 45, 83, 37, 38, 67, 71, 72, 89, 40, 62, 92, 68, 77, 99])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  7, 12, 20, 27, 31, 32, 35, 37, 42, 50, 54, 56, 59, 61, 66, 75,\n       77, 79, 85, 89, 90, 95, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([7, 5, 7, 6, 4, 1, 3, 2, 5, 8, 4, 2, 3, 2, 5, 9, 2, 1, 5, 4, 1, 4,\n       2, 1, 2])`, type: `ndarray`\n\nres, value: `array([7, 5, 7, 6, 4, 1, 3, 2, 5, 8, 4, 2, 3, 2, 5, 9, 2, 1, 5, 4, 1, 4,\n       2, 1, 2])`, type: `ndarray`\n\nri, value: `Index(['l', 'a', 'y', 'w', 'n', 'k', 'b', 'v', 'j', 'x', 'e', 'd', 'm', 'o',\n       'u', 'q', 'z', 'f', 'g', 'r', 'i', 's', 'p', 'h', 't'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nl    7\na    5\ny    7\nw    6\nn    4\nk    1\nb    3\nv    2\nj    5\nx    8\ne    4\nd    2\nm    3\no    2\nu    5\nq    9\nz    2\nf    1\ng    5\nr    4\ni    1\ns    4\np    2\nh    1\nt    2\nName: julie, dtype: int64`, type: `Series`\n\n### Case 86\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     11\n1     69\n2     17\n3     41\n4     34\n      ..\n95    26\n96    74\n97    75\n98    84\n99    86\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  1,  2,  2,  3,  3,  3,  4,  5,  6,  7,  8,  9, 10, 10, 11,\n       12, 13, 13, 14, 15, 15, 16, 16, 17, 18, 19, 20, 21, 21, 21, 22, 22,\n       23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,\n       37, 38, 39, 40, 40, 41, 42, 43, 44, 45, 45, 45, 46, 47, 48, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, value: `79`, type: `int`\n\nval, value: `array([11, 97, 69, 17, 33, 41, 81, 81, 34, 36, 77, 47, 95, 60, 53, 59, 95,\n       33, 20, 55, 51, 21, 55, 64, 90, 55, 90, 57,  4,  1, 39, 51, 63, 82,\n       72,  1, 69, 24, 27, 84, 41,  6, 24, 36, 75, 83, 26, 57, 66, 95, 12,\n       48, 82, 26, 26, 82, 69, 67, 43, 68, 23, 25, 87, 33, 75,  3, 34, 72,\n       71, 82, 24,  7, 93, 56, 53, 11, 66, 87, 59, 54, 55, 33, 69, 12, 73,\n       41, 97, 24, 29, 60, 44, 75, 25,  5, 65, 46, 74, 75, 84, 86])`, type: `ndarray`\n\nsorter, value: `array([ 0,  6,  1,  2, 88,  3, 33, 57,  4,  5,  7,  8,  9, 10, 59, 11, 12,\n       13, 14, 81, 15, 30, 16, 82, 17, 18, 19, 20, 21, 22, 41, 24, 23, 32,\n       25, 26, 27, 65, 28, 29, 31, 34, 35, 36, 83, 37, 38, 39, 72, 40, 42,\n       43, 44, 45, 95, 46, 47, 48, 49, 50, 56, 70, 51, 52, 53, 90, 54, 55,\n       58, 60, 61, 62, 63, 64, 66, 67, 71, 89, 68, 69, 73, 74, 75, 76, 77,\n       93, 78, 79, 80, 84, 85, 86, 87, 91, 92, 94, 96, 97, 98, 99])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  2,  3,  5,  8,  9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 23,\n       25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46,\n       47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 3,\n       2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 3,\n       2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('l', '2015-08-25') ... ('t', '2015-08-25')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nl    2015-08-25    2\na    2015-08-24    1\ny    2015-08-31    2\nw    2015-09-01    2\nn    2015-08-23    1\n                  ..\nb    2015-08-26    1\ng    2015-08-23    1\n     2015-08-26    1\nn    2015-09-01    1\nt    2015-08-25    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n### Case 87\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     11.0\n1     69.0\n2     17.0\n3     41.0\n4     34.0\n      ... \n95    26.0\n96    74.0\n97    75.0\n98    84.0\n99    86.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  4,  5,  5,\n        5,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,\n        9,  9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14,\n       15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 17, 17, 18, 18, 18, 18,\n       19, 19, 19, 19, 20, 21, 21, 21, 21, 21, 22, 22, 23, 24, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([ 2.40000000e+01,  3.30000000e+01, ... ,  7.30000000e+01,  8.60000000e+01])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([35, 52, 69, 18,  1, 86,  0, 30, 87, 16, 39, 50,  6, 26, 22, 21,  2,\n       88, 41, 24, 48, 46, 84, 95,  3, 33, 57, 29,  4, 36, 98,  5,  7, 74,\n       94,  8, 58,  9, 66, 76, 19, 47, 90, 54, 10, 82, 44, 17, 63, 80, 59,\n       73, 11, 60, 12, 91, 79, 13, 14, 81, 93, 15, 55, 78, 85, 49, 43, 20,\n       28, 64, 65, 56, 70, 23, 53, 32, 51, 34, 25, 27, 75, 61, 31, 96, 97,\n       45, 83, 42, 37, 38, 67, 71, 72, 89, 40, 62, 92, 68, 77, 99])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 13, 21, 28, 31, 32, 35, 37, 41, 49, 53, 55, 58, 60, 64, 68, 77,\n       79, 81, 85, 89, 90, 95, 97, 98])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 7, 8, 5, 3, 1, 3, 2, 3, 8, 4, 2, 3, 2, 4, 4, 7, 2, 2, 4, 3, 1,\n       4, 2, 1, 2])`, type: `ndarray`\n\nres, value: `array([7, 8, 5, 3, 1, 3, 2, 3, 8, 4, 2, 3, 2, 4, 4, 7, 2, 2, 4, 3, 1, 4,\n       2, 1, 2])`, type: `ndarray`\n\nri, value: `Index(['l', 'y', 'w', 'n', 'k', 'b', 'v', 'j', 'x', 'e', 'd', 'm', 'o', 'u',\n       'a', 'q', 'z', 'f', 'g', 'r', 'i', 's', 'p', 'h', 't'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nl    7\ny    8\nw    5\nn    3\nk    1\nb    3\nv    2\nj    3\nx    8\ne    4\nd    2\nm    3\no    2\nu    4\na    4\nq    7\nz    2\nf    2\ng    4\nr    3\ni    1\ns    4\np    2\nh    1\nt    2\nName: julie, dtype: int64`, type: `Series`\n\n### Case 88\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      97\n1      98\n2      52\n3      80\n4      88\n       ..\n995    93\n996    55\n997    79\n998     8\n999    44\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 1,  4,  5,  9, 10, 10, 10, ... , 80, 81, 82, 83, 90, 93, 95, 97])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([307, 194, 691, 500,  57, ... , 642, 452, 747, 628, 188,  98])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  38,  80, 124, 161, 201, 230, 269, 308, 341, 387, 423, 472,\n       518, 562, 605, 640, 671, 703, 747, 783, 821, 849, 882, 920, 960])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 0, 0, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([35, 31, 34, 33, 33, 23, 29, 36, 31, 37, 29, 34, 37, 35, 31, 31, 27,\n       27, 37, 28, 32, 26, 27, 30, 30, 33])`, type: `ndarray`\n\nres, value: `array([35, 31, 34, 33, 33, 23, 29, 36, 31, 37, 29, 34, 37, 35, 31, 31, 27,\n       27, 37, 28, 32, 26, 27, 30, 30, 33])`, type: `ndarray`\n\nri, value: `Index(['z', 'd', 'f', 'a', 'u', 'i', 'y', 'o', 'h', 'j', 'c', 'q', 'p', 'e',\n       'm', 't', 'v', 'n', 'r', 'g', 'l', 'b', 's', 'w', 'x', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nz    35\nd    31\nf    34\na    33\nu    33\ni    23\ny    29\no    36\nh    31\nj    37\nc    29\nq    34\np    37\ne    35\nm    31\nt    31\nv    27\nn    27\nr    37\ng    28\nl    32\nb    26\ns    27\nw    30\nx    30\nk    33\nName: julie, dtype: int64`, type: `Series`\n\n### Case 89\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      97\n1      98\n2      52\n3      80\n4      88\n       ..\n995    93\n996    55\n997    79\n998     8\n999    44\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   1,   1, ... , 246, 247, 247, 247, 248, 249])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `250`, type: `int`\n\nval, value: `array([61, 94, 97,  6, 29, 37, 43, ... , 48, 23, 90, 13, 16, 63, 77, 39])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([887, 321,   0, 863, 880, ... , 839, 981, 881, 826, 886, 938])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   3,   8,  13,  19, ... , 992, 993,\n       995, 998, 999])`, shape: `(250,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 3,  5,  5,  6,  5,  4,  4, ... ,  3,  4,  4,  1,  2,  3,  1,  1])`, shape: `(250,)`, type: `ndarray`\n\nres, value: `array([ 3,  5,  5,  6,  5,  4,  4, ... ,  3,  4,  4,  1,  2,  3,  1,  1])`, shape: `(250,)`, type: `ndarray`\n\nri, value: `MultiIndex([('z', '2015-08-27') ... ('x', '2015-08-31')],\n           names=['jim', 'joe'], length=250)`, shape: `(250,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nz    2015-08-27    3\nd    2015-09-01    5\nz    2015-08-29    5\nf    2015-08-28    6\na    2015-08-30    5\n                  ..\nz    2015-08-28    1\nt    2015-08-23    2\nr    2015-08-28    3\ny    2015-08-29    1\nx    2015-08-31    1\nName: julie, Length: 250, dtype: int64`, type: `Series`\n\n### Case 90\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      97.0\n1      98.0\n2      52.0\n3      80.0\n4      88.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     8.0\n999    44.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.30000000e+01,  9.70000000e+01])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      9.700000e+01\n1      9.800000e+01\n2      5.200000e+01\n3      8.000000e+01\n4      8.800000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    8.000000e+00\n999    4.400000e+01\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 152, 642, 452, 747, 628,  98])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  94, 136, 170, 210, 238, 274, 310, 342, 387, 420, 465, 507,\n       550, 589, 629, 661, 690, 721, 763, 798, 834, 860, 892, 926, 966])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([43, 27, 24, 24, 31, 21, 24, 30, 28, 35, 26, 30, 34, 33, 27, 27, 27,\n       24, 26, 32, 25, 28, 20, 20, 24, 27, 30])`, type: `ndarray`\n\nres, value: `array([27, 24, 24, 31, 21, 24, 30, 28, 35, 26, 30, 34, 33, 27, 27, 27, 24,\n       26, 32, 25, 28, 20, 20, 24, 27, 30])`, type: `ndarray`\n\nri, value: `Index(['z', 'f', 'a', 'u', 'i', 'y', 'o', 'h', 'j', 'c', 'q', 'p', 'e', 'm',\n       'd', 't', 'v', 'n', 'r', 'g', 'l', 'b', 's', 'w', 'x', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nz    27\nf    24\na    24\nu    31\ni    21\ny    24\no    30\nh    28\nj    35\nc    26\nq    30\np    34\ne    33\nm    27\nd    27\nt    27\nv    24\nn    26\nr    32\ng    25\nl    28\nb    20\ns    20\nw    24\nx    27\nk    30\nName: julie, dtype: int64`, type: `Series`\n\n### Case 91\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       28\n1       96\n2       53\n3       42\n4       48\n        ..\n9995    19\n9996    63\n9997    17\n9998    50\n9999    22\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 0,  1,  1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([6830,  136, 5885, ..., 6087, 7911, 8070])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  371,  761, 1129, 1493, 1876, 2237, 2607, 3000, 3361, 3739,\n       4136, 4537, 4952, 5353, 5730, 6121, 6510, 6915, 7284, 7698, 8099,\n       8506, 8914, 9255, 9643])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 97,  96,  98,  97,  97,  97,  98, 100, 100,  97,  98,  97,  97,\n        95, 100,  99,  98,  99,  98,  99,  97,  97,  99,  97,  97,  96])`, type: `ndarray`\n\nres, value: `array([ 97,  96,  98,  97,  97,  97,  98, 100, 100,  97,  98,  97,  97,\n        95, 100,  99,  98,  99,  98,  99,  97,  97,  99,  97,  97,  96])`, type: `ndarray`\n\nri, value: `Index(['t', 'q', 'd', 'b', 'g', 'a', 'x', 'm', 'u', 'j', 'e', 's', 'c', 'o',\n       'v', 'w', 'i', 'y', 'n', 'l', 'h', 'z', 'p', 'f', 'r', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nt     97\nq     96\nd     98\nb     97\ng     97\na     97\nx     98\nm    100\nu    100\nj     97\ne     98\ns     97\nc     97\no     95\nv    100\nw     99\ni     98\ny     99\nn     98\nl     99\nh     97\nz     97\np     99\nf     97\nr     97\nk     96\nName: julie, dtype: int64`, type: `Series`\n\n### Case 92\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       28\n1       96\n2       53\n3       42\n4       48\n        ..\n9995    19\n9996    63\n9997    17\n9998    50\n9999    22\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 1,  2,  6, ..., 97, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([5885, 2295, 1734, ..., 1935, 1912, 7277])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   36,   71,  109,  143, ... , 9841, 9869, 9905, 9933, 9965])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([34, 31, 29, 30, 37, 32, 28, ... , 29,\n       27, 32, 25, 29, 27])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([34, 31, 29, 30, 37, 32, 28, ... , 29,\n       27, 32, 25, 29, 27])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('t', '2015-08-25') ... ('n', '2015-08-31')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nt    2015-08-25    34\nq    2015-08-27    31\nd    2015-08-26    29\nb    2015-09-01    30\ng    2015-09-01    37\n                   ..\nf    2015-08-25    27\ns    2015-09-01    32\no    2015-08-23    25\np    2015-08-31    29\nn    2015-08-31    27\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 93\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       28.0\n1       96.0\n2       53.0\n3       42.0\n4       48.0\n        ... \n9995    19.0\n9996    63.0\n9997    17.0\n9998    50.0\n9999    22.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 1673, 2960, 8070])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  940, 1288, 1627, 1995, 2341, 2694, 3069, 3406, 3764, 4135,\n       4506, 4899, 5278, 5648, 5999, 6366, 6741, 7082, 7444, 7830, 8211,\n       8601, 8980, 9294, 9661])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 99,  96,  96,  94,  96,  93,  93,  94,  98,  97,  98,  97,  96,\n        95,  99,  99,  98, 100,  91,  93,  99,  94,  97,  99,  96,  97,\n        97])`, type: `ndarray`\n\nres, value: `array([ 96,  96,  94,  96,  93,  93,  94,  98,  97,  98,  97,  96,  95,\n        99,  99,  98, 100,  91,  93,  99,  94,  97,  99,  96,  97,  97])`, type: `ndarray`\n\nri, value: `Index(['t', 'd', 'b', 'g', 'a', 'x', 'm', 'u', 'j', 'e', 's', 'c', 'o', 'w',\n       'v', 'i', 'y', 'n', 'q', 'l', 'h', 'z', 'p', 'f', 'r', 'k'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nt     96\nd     96\nb     94\ng     96\na     93\nx     93\nm     94\nu     98\nj     97\ne     98\ns     97\nc     96\no     95\nw     99\nv     99\ni     98\ny    100\nn     91\nq     93\nl     99\nh     94\nz     97\np     99\nf     96\nr     97\nk     97\nName: julie, dtype: int64`, type: `Series`\n\n### Case 94\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        24\n1        30\n2        33\n3        23\n4        21\n         ..\n99995    99\n99996    45\n99997    20\n99998    76\n99999    84\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([  889,  2120,  3030, ..., 97875, 98720, 99792])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3822,  7662, 11532, 15382, 19192, 22962, 26735, 30602,\n       34538, 38408, 42268, 46019, 49867, 53803, 57684, 61434, 65386,\n       69100, 72977, 76733, 80599, 84426, 88321, 92149, 96039])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['x', 'z', 'v', 's', 'l', 'k', 'j', 'o', 'i', 't', 'd', 'w', 'u', 'h',\n       'c', 'n', 'g', 'b', 'm', 'r', 'e', 'p', 'y', 'a', 'q', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nx    100\nz    100\nv    100\ns    100\nl    100\nk    100\nj    100\no    100\ni    100\nt    100\nd    100\nw    100\nu    100\nh    100\nc    100\nn    100\ng    100\nb    100\nm    100\nr    100\ne    100\np    100\ny    100\na    100\nq    100\nf    100\nName: julie, dtype: int64`, type: `Series`\n\n### Case 95\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        24\n1        30\n2        33\n3        23\n4        21\n         ..\n99995    99\n99996    45\n99997    20\n99998    76\n99999    84\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 5051, 24040, 32158, ..., 12381, 69213, 72655])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   361,   761,  1152, ... , 98020, 98376, 98793, 99177, 99603])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 96,  98,  98,  98,  96, ... ,  95,  98,  99,  99, 100, 100])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([ 96,  98,  98,  98,  96, ... ,  95,  98,  99,  99, 100, 100])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('x', '2015-08-29') ... ('r', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nx    2015-08-29     96\nz    2015-08-23     98\nv    2015-09-01     98\ns    2015-08-23     98\n     2015-08-27     96\n                  ... \nm    2015-08-24     98\nq    2015-08-27     99\nk    2015-08-28     99\nc    2015-08-29    100\nr    2015-08-30    100\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 96\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        24.0\n1        30.0\n2        33.0\n3        23.0\n4        21.0\n         ... \n99995    99.0\n99996    45.0\n99997    20.0\n99998    76.0\n99999    84.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 78445, 94081, 96657])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9506, 13150, 16761, 20359, 23912, 27436, 31087, 34799,\n       38456, 42104, 45626, 49251, 52964, 56619, 60149, 63871, 67355,\n       70990, 74485, 78113, 81722, 85393, 88999, 92668, 96392])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, value: `Index(['x', 'v', 's', 'l', 'k', 'j', 'o', 'i', 't', 'd', 'w', 'u', 'h', 'c',\n       'n', 'g', 'b', 'm', 'r', 'e', 'p', 'y', 'a', 'q', 'f', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nx    101\nv    101\ns    101\nl    101\nk    101\nj    101\no    101\ni    101\nt    101\nd    101\nw    101\nu    101\nh    101\nc    101\nn    101\ng    101\nb    101\nm    101\nr    101\ne    101\np    101\ny    101\na    101\nq    101\nf    101\nz    101\nName: julie, dtype: int64`, type: `Series`\n\n### Case 97\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      33\n1     326\n2     413\n3     346\n4     614\n     ... \n95    587\n96    419\n97    952\n98    150\n99    610\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,\n        4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,\n        7,  7,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 10, 11, 11,\n       12, 12, 12, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 17,\n       17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20,\n       21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([ 33, 215, 310, 532, 326, ... , 952, 378, 587, 144, 247, 414])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([ 0,  9, 34, 28,  1, 79, 68, 24, 16,  2, 96, 67, 95, 44, 70,  3, 74,\n        4, 33, 59, 91,  5, 35, 64, 23, 52, 17, 40,  6, 32, 85,  8, 50,  7,\n       39, 36, 72, 10, 87, 37, 19, 41, 43, 55, 51, 65, 11, 12, 92, 13, 60,\n       77, 14, 61, 57, 86, 78, 18, 15, 20, 82, 62, 27, 73, 21, 22, 88, 42,\n       25, 53, 46, 45, 83, 26, 47, 90, 89, 49, 29, 75, 71, 69, 76, 58, 30,\n       31, 48, 56, 63, 98, 93, 66, 38, 99, 97, 54, 94, 81, 84, 80])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  4,  7, 15, 17, 21, 26, 31, 36, 40, 47, 49, 51, 57, 59, 62, 65,\n       67, 72, 75, 80, 85, 88, 95, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([4, 3, 8, 2, 4, 5, 5, 5, 4, 7, 2, 2, 6, 2, 3, 3, 2, 5, 3, 5, 5, 3,\n       7, 2, 3])`, type: `ndarray`\n\nres, value: `array([4, 3, 8, 2, 4, 5, 5, 5, 4, 7, 2, 2, 6, 2, 3, 3, 2, 5, 3, 5, 5, 3,\n       7, 2, 3])`, type: `ndarray`\n\nri, value: `Index(['f', 'j', 'k', 'q', 'l', 'i', 'n', 'g', 'h', 'd', 'v', 'p', 'r', 'a',\n       'm', 't', 's', 'c', 'z', 'b', 'y', 'w', 'e', 'o', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nf    4\nj    3\nk    8\nq    2\nl    4\ni    5\nn    5\ng    5\nh    4\nd    7\nv    2\np    2\nr    6\na    2\nm    3\nt    3\ns    2\nc    5\nz    3\nb    5\ny    5\nw    3\ne    7\no    2\nu    3\nName: julie, dtype: int64`, type: `Series`\n\n### Case 98\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      33\n1     326\n2     413\n3     346\n4     614\n     ... \n95    587\n96    419\n97    952\n98    150\n99    610\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  1,  2,  3,  4,  4,  5,  5,  6,  7,  8,  9, 10, 11, 11,\n       11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 24,\n       25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 35, 36, 37, 37,\n       37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])`, type: `ndarray`\n\n_, value: `83`, type: `int`\n\nval, value: `array([ 33, 310, 532, 326, 413, ... , 985, 256, 293, 587, 587, 150])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([ 0, 34, 28,  1,  2,  3,  4, 33,  5, 64,  6,  7,  8,  9, 10, 19, 41,\n       11, 12, 13, 14, 15, 24, 16, 17, 18, 20, 27, 21, 22, 23, 25, 83, 26,\n       89, 29, 30, 31, 32, 35, 36, 72, 37, 66, 38, 39, 40, 42, 43, 96, 67,\n       44, 45, 53, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 63, 99, 97, 65, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79,\n       80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  3,  4,  5,  6,  8, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22,\n       24, 25, 26, 27, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 43, 45,\n       46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([3, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1,\n       1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([3, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1,\n       1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('f', '2015-08-25') ... ('e', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(83,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nf    2015-08-25    3\nj    2015-08-28    1\nk    2015-09-01    1\nq    2015-08-23    1\nl    2015-08-27    2\n                  ..\nv    2015-08-31    1\ne    2015-08-31    1\no    2015-08-27    1\nk    2015-08-23    1\ne    2015-08-30    1\nName: julie, Length: 83, dtype: int64`, type: `Series`\n\n### Case 99\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      33.0\n1     326.0\n2     413.0\n3     346.0\n4     614.0\n      ...  \n95    587.0\n96    419.0\n97    952.0\n98    150.0\n99    610.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,\n        1,  2,  2,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,  9, 10,\n       10, 11, 11, 11, 11, 11, 12, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16,\n       16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20,\n       20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, value: `25`, type: `int`\n\nval, value: `array([ 2.11000000e+02,  3.26000000e+02, ... ,  1.44000000e+02,  4.14000000e+02])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([35,  1, 86, 69, 18, 52,  9, 28,  0, 34, 24, 16,  2, 96, 67, 95, 44,\n       70,  3, 74,  4, 33, 59, 91, 64,  5, 23, 85, 17, 40,  6, 32,  7,  8,\n       50, 39, 36, 72, 10, 87, 37, 65, 19, 41, 43, 55, 51, 11, 12, 92, 13,\n       60, 77, 14, 61, 57, 78, 15, 20, 82, 62, 27, 73, 21, 22, 88, 45, 46,\n       42, 25, 53, 26, 47, 83, 90, 89, 49, 29, 75, 71, 76, 58, 30, 31, 48,\n       56, 66, 63, 98, 93, 38, 99, 97, 54, 94, 79, 68, 84, 81, 80])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 10, 18, 20, 24, 27, 32, 37, 41, 48, 50, 52, 57, 58, 61, 64, 66,\n       71, 74, 79, 83, 86, 93, 95, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 3, 8, 2, 4, 3, 5, 4, 4, 7, 2, 2, 5, 1, 3, 3, 2, 4, 1, 5, 4, 3,\n       7, 2, 2, 3])`, type: `ndarray`\n\nres, value: `array([3, 8, 2, 4, 3, 5, 4, 4, 7, 2, 2, 5, 1, 3, 3, 2, 4, 1, 5, 4, 3, 7,\n       2, 2, 3])`, type: `ndarray`\n\nri, value: `Index(['f', 'k', 'q', 'l', 'i', 'n', 'g', 'h', 'd', 'v', 'p', 'r', 'a', 'm',\n       't', 's', 'c', 'z', 'b', 'y', 'w', 'e', 'o', 'j', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nf    3\nk    8\nq    2\nl    4\ni    3\nn    5\ng    4\nh    4\nd    7\nv    2\np    2\nr    5\na    1\nm    3\nt    3\ns    2\nc    4\nz    1\nb    5\ny    4\nw    3\ne    7\no    2\nj    2\nu    3\nName: julie, dtype: int64`, type: `Series`\n\n### Case 100\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      700\n1      661\n2      678\n3      110\n4      261\n      ... \n995     92\n996    264\n997    669\n998    555\n999      6\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 21,  45,  74, 113, 151, ... , 871, 898, 947, 953, 959, 963])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([353, 790, 926, 754, 898, ... , 554, 582, 279, 321, 585, 718])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  39,  86, 118, 148, 180, 222, 277, 313, 351, 384, 414, 446,\n       480, 525, 559, 599, 639, 679, 714, 755, 794, 828, 875, 915, 962])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([37, 47, 31, 30, 32, 40, 53, 36, 37, 33, 30, 31, 34, 45, 32, 39, 40,\n       40, 35, 41, 39, 33, 47, 40, 47, 38])`, type: `ndarray`\n\nres, value: `array([37, 47, 31, 30, 32, 40, 53, 36, 37, 33, 30, 31, 34, 45, 32, 39, 40,\n       40, 35, 41, 39, 33, 47, 40, 47, 38])`, type: `ndarray`\n\nri, value: `Index(['v', 'j', 'n', 't', 'r', 'i', 'h', 'u', 'z', 'y', 'c', 'k', 'e', 'f',\n       'w', 'x', 'g', 'l', 'o', 's', 'd', 'b', 'm', 'q', 'a', 'p'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nv    37\nj    47\nn    31\nt    30\nr    32\ni    40\nh    53\nu    36\nz    37\ny    33\nc    30\nk    31\ne    34\nf    45\nw    32\nx    39\ng    40\nl    40\no    35\ns    41\nd    39\nb    33\nm    47\nq    40\na    47\np    38\nName: julie, dtype: int64`, type: `Series`\n\n### Case 101\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      700\n1      661\n2      678\n3      110\n4      261\n      ... \n995     92\n996    264\n997    669\n998    555\n999      6\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   1, ... , 253, 253, 254, 255, 256, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `257`, type: `int`\n\nval, value: `array([ 74, 279, 700, 968,   3, ... , 210, 400, 581, 719, 492, 617])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([926,  69,   0, 953, 678, ... , 797, 944, 799, 887, 992, 897])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   4,   9,  10,  13, ... , 990, 993, 994, 996, 997, 998])`, shape: `(257,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 4,  5,  1,  3,  4,  5,  7, ... ,  3,  1,  2,  1,\n        1,  2])`, shape: `(257,)`, type: `ndarray`\n\nres, value: `array([ 4,  5,  1,  3,  4,  5,  7, ... ,  3,  1,  2,  1,\n        1,  2])`, shape: `(257,)`, type: `ndarray`\n\nri, value: `MultiIndex([('v', '2015-08-31') ... ('n', '2015-08-29')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nv    2015-08-31    4\nj    2015-08-28    5\nn    2015-08-30    1\nt    2015-08-27    3\nr    2015-09-01    4\n                  ..\no    2015-08-29    1\nf    2015-08-27    2\nj    2015-08-23    1\nt    2015-08-23    1\nn    2015-08-29    2\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n### Case 102\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      700.0\n1      661.0\n2      678.0\n3      110.0\n4      261.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    555.0\n999      6.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.59000000e+02,  9.63000000e+02])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      7.000000e+02\n1      6.610000e+02\n2      6.780000e+02\n3      1.100000e+02\n4      2.610000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    5.550000e+02\n999    6.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 554, 582, 279, 321, 585, 718])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  95, 126, 154, 184, 225, 277, 321, 354, 388, 419, 449, 478,\n       510, 554, 593, 623, 661, 696, 734, 770, 801, 845, 884, 919, 964])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([51, 31, 29, 22, 24, 33, 45, 35, 29, 29, 26, 25, 28, 27, 42, 33, 25,\n       31, 25, 36, 32, 26, 40, 32, 27, 42, 32])`, type: `ndarray`\n\nres, value: `array([31, 29, 22, 24, 33, 45, 35, 29, 29, 26, 25, 28, 27, 42, 33, 25, 31,\n       25, 36, 32, 26, 40, 32, 27, 42, 32])`, type: `ndarray`\n\nri, value: `Index(['v', 'n', 't', 'r', 'i', 'h', 'j', 'u', 'z', 'y', 'c', 'k', 'e', 'f',\n       'x', 'w', 'g', 'o', 's', 'd', 'b', 'm', 'q', 'l', 'a', 'p'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nv    31\nn    29\nt    22\nr    24\ni    33\nh    45\nj    35\nu    29\nz    29\ny    26\nc    25\nk    28\ne    27\nf    42\nx    33\nw    25\ng    31\no    25\ns    36\nd    32\nb    26\nm    40\nq    32\nl    27\na    42\np    32\nName: julie, dtype: int64`, type: `Series`\n\n### Case 103\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       904\n1         7\n2       316\n3       728\n4       759\n       ... \n9995    179\n9996    574\n9997    238\n9998    148\n9999    518\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  0,   1,   2, ..., 992, 993, 994])`, type: `ndarray`\n\nsorter, value: `array([1012,  473, 6666, ..., 1274, 1259, 2893])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  419,  776, 1153, 1578, 1953, 2304, 2682, 3085, 3471, 3822,\n       4208, 4556, 4958, 5352, 5731, 6107, 6482, 6840, 7215, 7605, 8015,\n       8411, 8806, 9182, 9586])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([344, 296, 315, 343, 316, 298, 316, 324, 331, 289, 324, 278, 324,\n       318, 313, 311, 313, 304, 318, 317, 335, 328, 317, 316, 333, 337])`, type: `ndarray`\n\nres, value: `array([344, 296, 315, 343, 316, 298, 316, 324, 331, 289, 324, 278, 324,\n       318, 313, 311, 313, 304, 318, 317, 335, 328, 317, 316, 333, 337])`, type: `ndarray`\n\nri, value: `Index(['s', 'c', 'z', 'q', 'k', 'u', 'f', 'v', 'd', 't', 'w', 'x', 'g', 'e',\n       'a', 'p', 'l', 'h', 'm', 'j', 'r', 'n', 'b', 'y', 'o', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ns    344\nc    296\nz    315\nq    343\nk    316\nu    298\nf    316\nv    324\nd    331\nt    289\nw    324\nx    278\ng    324\ne    318\na    313\np    311\nl    313\nh    304\nm    318\nj    317\nr    335\nn    328\nb    317\ny    316\no    333\ni    337\nName: julie, dtype: int64`, type: `Series`\n\n### Case 104\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       904\n1         7\n2       316\n3       728\n4       759\n       ... \n9995    179\n9996    574\n9997    238\n9998    148\n9999    518\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 40,  46,  77, ..., 929, 931, 975])`, type: `ndarray`\n\nsorter, value: `array([4654,  869, 4467, ..., 6889, 3565, 3788])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   37,   82,  121,  168, ... , 9806, 9844, 9897, 9927, 9965])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([37, 45, 38, 47, 43, 43, 40, ... , 36,\n       36, 52, 30, 36, 35])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([37, 45, 38, 47, 43, 43, 40, ... , 36,\n       36, 52, 30, 36, 35])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('s', '2015-08-31') ... ('g', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \ns    2015-08-31    37\nc    2015-08-30    45\nz    2015-08-28    38\nq    2015-08-28    47\nk    2015-08-25    43\n                   ..\n     2015-08-28    36\nr    2015-08-23    52\nh    2015-08-31    30\nc    2015-08-24    36\ng    2015-08-24    35\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 105\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       904.0\n1         7.0\n2       316.0\n3       728.0\n4       759.0\n        ...  \n9995    179.0\n9996    574.0\n9997    238.0\n9998    148.0\n9999    518.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+02,  9.92000000e+02,  9.94000000e+02])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 4913, 1274, 2893])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  984, 1331, 1735, 2087, 2418, 2781, 3154, 3517, 3847, 4212,\n       4539, 4919, 5281, 5631, 5985, 6331, 6673, 7017, 7372, 7736, 8122,\n       8497, 8868, 9231, 9610])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([402, 279, 253, 278, 260, 243, 255, 265, 271, 233, 272, 242, 277,\n       272, 261, 251, 241, 242, 264, 274, 259, 279, 280, 263, 259, 271,\n       289])`, type: `ndarray`\n\nres, value: `array([279, 253, 278, 260, 243, 255, 265, 271, 233, 272, 242, 277, 272,\n       261, 251, 241, 242, 264, 274, 259, 279, 280, 263, 259, 271, 289])`, type: `ndarray`\n\nri, value: `Index(['s', 'z', 'q', 'k', 'u', 'f', 'v', 'd', 't', 'w', 'x', 'g', 'e', 'a',\n       'p', 'c', 'l', 'h', 'm', 'j', 'r', 'n', 'b', 'y', 'o', 'i'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\ns    279\nz    253\nq    278\nk    260\nu    243\nf    255\nv    265\nd    271\nt    233\nw    272\nx    242\ng    277\ne    272\na    261\np    251\nc    241\nl    242\nh    264\nm    274\nj    259\nr    279\nn    280\nb    263\ny    259\no    271\ni    289\nName: julie, dtype: int64`, type: `Series`\n\n### Case 106\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        304\n1        772\n2        368\n3        366\n4        762\n        ... \n99995    599\n99996    243\n99997    181\n99998    829\n99999    320\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([63525, 64863, 96480, ..., 52330, 57619, 74462])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3913,  7685, 11597, 15400, 19178, 22964, 26778, 30745,\n       34539, 38435, 42291, 46213, 50039, 53905, 57710, 61631, 65506,\n       69414, 73246, 77105, 81040, 84813, 88634, 92430, 96240])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([982, 983, 976, 977, 979, 977, 974, 972, 973, 976, 978, 977, 982,\n       978, 983, 987, 981, 982, 982, 980, 980, 975, 978, 982, 980, 979])`, type: `ndarray`\n\nres, value: `array([982, 983, 976, 977, 979, 977, 974, 972, 973, 976, 978, 977, 982,\n       978, 983, 987, 981, 982, 982, 980, 980, 975, 978, 982, 980, 979])`, type: `ndarray`\n\nri, value: `Index(['v', 'd', 'h', 'c', 'i', 'q', 's', 'y', 'm', 'z', 'x', 'o', 'k', 'r',\n       'a', 'g', 'f', 't', 'e', 'n', 'b', 'p', 'l', 'j', 'w', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nv    982\nd    983\nh    976\nc    977\ni    979\nq    977\ns    974\ny    972\nm    973\nz    976\nx    978\no    977\nk    982\nr    978\na    983\ng    987\nf    981\nt    982\ne    982\nn    980\nb    980\np    975\nl    978\nj    982\nw    980\nu    979\nName: julie, dtype: int64`, type: `Series`\n\n### Case 107\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        304\n1        772\n2        368\n3        366\n4        762\n        ... \n99995    599\n99996    243\n99997    181\n99998    829\n99999    320\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([  1,   3,   3, ..., 996, 997, 999])`, type: `ndarray`\n\nsorter, value: `array([40666,  2159, 93722, ..., 96325, 83958, 79737])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   408,   786,  1161, ... , 98147, 98523, 98894, 99272, 99620])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([328, 317, 311, 333, 338, ... , 304, 327, 303, 315, 303, 325])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([328, 317, 311, 333, 338, ... , 304, 327, 303, 315, 303, 325])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('v', '2015-08-23') ... ('w', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \nv    2015-08-23    328\nd    2015-08-28    317\nh    2015-08-31    311\nc    2015-08-30    333\nv    2015-08-27    338\n                  ... \nx    2015-08-31    327\ne    2015-09-01    303\nr    2015-08-28    315\nl    2015-08-26    303\nw    2015-08-23    325\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 108\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        304.0\n1        772.0\n2        368.0\n3        366.0\n4        762.0\n         ...  \n99995    599.0\n99996    243.0\n99997    181.0\n99998    829.0\n99999    320.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 52330, 57619, 74462])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9556, 13247, 16811, 20397, 23961, 27545, 31294, 34852,\n       38524, 42127, 45731, 49374, 52939, 56619, 60274, 63983, 67570,\n       71193, 74882, 78590, 82146, 85733, 89280, 92856, 96448])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([997, 953, 951, 950, 966, 954, 955, 943, 950, 951, 943, 960, 944,\n       951, 964, 964, 959, 953, 959, 951, 962, 951, 961, 966, 956, 955,\n       946])`, type: `ndarray`\n\nres, value: `array([953, 951, 950, 966, 954, 955, 943, 950, 951, 943, 960, 944, 951,\n       964, 964, 959, 953, 959, 951, 962, 951, 961, 966, 956, 955, 946])`, type: `ndarray`\n\nri, value: `Index(['v', 'h', 'c', 'i', 'q', 's', 'y', 'm', 'z', 'x', 'k', 'r', 'a', 'g',\n       'f', 't', 'e', 'n', 'o', 'b', 'p', 'l', 'd', 'j', 'w', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\nv    953\nh    951\nc    950\ni    966\nq    954\ns    955\ny    943\nm    950\nz    951\nx    943\nk    960\nr    944\na    951\ng    964\nf    964\nt    959\ne    953\nn    959\no    951\nb    962\np    951\nl    961\nd    966\nj    956\nw    955\nu    946\nName: julie, dtype: int64`, type: `Series`\n\n### Case 109\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     5\n1     5\n2     9\n3     5\n4     1\n     ..\n95    9\n96    5\n97    9\n98    8\n99    6\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  4,\n        4,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  8,  8,  8,\n        8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12,\n       12, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16,\n       17, 17, 17, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21, 21, 21, 21, 21,\n       22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([1, 7, 9, 2, 3, 5, 8, 0, 3, 3, 5, 5, 9, 0, 1, 3, 6, 9, 4, 4, 9, 0,\n       1, 1, 3, 5, 7, 8, 9, 3, 5, 0, 5, 6, 6, 6, 7, 7, 1, 4, 4, 9, 1, 2,\n       3, 5, 5, 8, 9, 9, 1, 8, 7, 8, 5, 2, 4, 5, 5, 6, 7, 8, 3, 4, 7, 8,\n       8, 8, 3, 5, 9, 6, 8, 0, 0, 1, 1, 3, 1, 1, 2, 5, 5, 7, 7, 1, 3, 4,\n       7, 3, 4, 9, 0, 2, 5, 6, 9, 4, 8, 9])`, type: `ndarray`\n\nsorter, value: `array([ 4, 18, 93, 43, 21, 64, 22,  7, 46, 83, 29, 35, 66,  8, 16,  6, 40,\n        2, 34, 52, 13, 11, 17, 28, 76, 82, 50, 56, 73, 27, 33, 89,  5, 14,\n       74, 88, 58, 65, 49, 62, 77, 95, 60, 92, 20,  0, 44, 15, 86, 97, 70,\n       53, 37, 19,  3, 45, 47,  1, 96, 30, 78, 98, 87, 63, 54, 23, 38, 71,\n       85, 80, 69, 72,  9, 55, 75, 61, 91, 42, 48, 81, 25, 26, 67, 12, 32,\n       31, 90, 36, 10, 39, 68, 51, 41, 57, 79, 99, 84, 94, 24, 59])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  3,  7, 13, 16, 18, 21, 29, 31, 38, 42, 46, 50, 52, 54, 55, 62,\n       68, 71, 73, 76, 78, 85, 89, 92, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([3, 4, 4, 3, 2, 2, 7, 2, 4, 3, 4, 3, 2, 2, 1, 6, 4, 3, 2, 2, 2, 4,\n       4, 3, 5, 3])`, type: `ndarray`\n\nres, value: `array([3, 4, 4, 3, 2, 2, 7, 2, 4, 3, 4, 3, 2, 2, 1, 6, 4, 3, 2, 2, 2, 4,\n       4, 3, 5, 3])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    3\nb    4\nc    4\nd    3\ne    2\nf    2\ng    7\nh    2\ni    4\nj    3\nk    4\nl    3\nm    2\nn    2\no    1\np    6\nq    4\nr    3\ns    2\nt    2\nu    2\nv    4\nw    4\nx    3\ny    5\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Case 110\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     5\n1     5\n2     9\n3     5\n4     1\n     ..\n95    9\n96    5\n97    9\n98    8\n99    6\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 28, 29,\n       30, 31, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\n       46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 55, 56, 56, 57, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 73, 73, 74,\n       75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88])`, type: `ndarray`\n\n_, value: `89`, type: `int`\n\nval, value: `array([9, 7, 1, 2, 5, 3, 8, 3, 3, 9, 5, 5, 0, 0, 3, 1, 6, 9, 4, 4, 9, 1,\n       7, 1, 3, 5, 8, 0, 9, 3, 5, 5, 6, 6, 6, 0, 7, 7, 9, 1, 4, 4, 1, 5,\n       2, 3, 8, 5, 9, 9, 8, 1, 7, 8, 5, 5, 8, 4, 7, 6, 2, 5, 8, 8, 3, 8,\n       7, 4, 3, 5, 9, 8, 6, 1, 0, 0, 1, 3, 5, 7, 1, 2, 5, 7, 1, 1, 3, 7,\n       4, 4, 3, 9, 9, 2, 0, 5, 6, 4, 8, 9])`, type: `ndarray`\n\nsorter, value: `array([93, 18,  4, 43, 64, 21, 22, 46, 83, 66, 35, 29,  7,  8,  6, 16, 40,\n        2, 52, 34, 13, 28, 50, 17, 76, 82, 56, 11, 73, 27, 33,  5, 88, 74,\n       14, 89, 65, 58, 95, 49, 77, 62, 60,  0, 92, 20, 15, 44, 97, 86, 53,\n       70, 37, 19,  3,  1, 98, 47, 78, 30, 45, 96, 23, 71, 87, 38, 54, 63,\n       85, 80, 69,  9, 72, 61, 75, 55, 91, 42, 26, 32, 48, 25, 67, 12, 81,\n       31, 90, 10, 36, 68, 39, 51, 84, 57, 41, 79, 99, 94, 24, 59])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38,\n       39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\n       56, 57, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,\n       76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95,\n       96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(89,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-25    1\n     2015-08-29    1\n     2015-08-31    1\nb    2015-08-24    1\n     2015-08-29    1\n                  ..\ny    2015-08-31    1\n     2015-09-01    1\nz    2015-08-26    1\n     2015-08-28    1\n     2015-08-31    1\nName: julie, Length: 89, dtype: int64`, type: `Series`\n\n### Case 111\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     5.0\n1     5.0\n2     9.0\n3     5.0\n4     1.0\n     ... \n95    9.0\n96    5.0\n97    9.0\n98    8.0\n99    6.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,\n        3,  3,  3,  4,  4,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,\n        8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11,\n       11, 12, 12, 13, 13, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16,\n       16, 17, 17, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21, 21, 21, 21, 21,\n       22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 4.00000000e+00,  5.00000000e+00, ... ,  8.00000000e+00,  9.00000000e+00])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([52,  1, 35, 18, 69, 86,  4, 93, 64, 43, 21, 22,  7, 46, 66, 83, 29,\n        8, 16,  6, 40,  2, 34, 13, 28, 11, 17, 76, 82, 50, 56, 73, 27, 33,\n       65, 89,  5, 14, 74, 88, 58, 49, 62, 77, 95, 60, 92, 20,  0, 44, 15,\n       97, 70, 53, 37, 19,  3, 45, 47, 96, 30, 78, 98, 87, 63, 54, 23, 38,\n       71, 85, 80,  9, 72, 55, 75, 61, 91, 42, 26, 48, 81, 25, 67, 12, 32,\n       31, 90, 36, 10, 39, 68, 51, 84, 41, 57, 79, 99, 94, 24, 59])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6,  8, 12, 17, 20, 22, 24, 32, 34, 41, 45, 49, 52, 54, 56, 57, 63,\n       69, 71, 73, 76, 78, 85, 89, 92, 97])`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([4, 2, 4, 2, 3, 2, 2, 8, 2, 5, 3, 4, 3, 2, 2, 1, 5, 4, 2, 2, 2, 2,\n       5, 4, 3, 5, 3])`, type: `ndarray`\n\nres, value: `array([2, 4, 2, 3, 2, 2, 8, 2, 5, 3, 4, 3, 2, 2, 1, 5, 4, 2, 2, 2, 2, 5,\n       4, 3, 5, 3])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    2\nb    4\nc    2\nd    3\ne    2\nf    2\ng    8\nh    2\ni    5\nj    3\nk    4\nl    3\nm    2\nn    2\no    1\np    5\nq    4\nr    2\ns    2\nt    2\nu    2\nv    5\nw    4\nx    3\ny    5\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Case 112\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      1\n1      1\n2      7\n3      3\n4      7\n      ..\n995    3\n996    4\n997    7\n998    5\n999    1\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 2, 2, 2, 2, 3, 3, 3, ... ,\n       7, 7, 7, 8, 8, 8, 8, 8, 8, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([405, 442, 174, 238, 646, ... , 343, 345, 389, 529, 877, 543])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  31,  69, 104, 138, 171, 204, 238, 280, 325, 363, 406, 452,\n       487, 523, 569, 609, 649, 679, 721, 759, 808, 841, 883, 927, 963])`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 0, 0, 0, 1, 0, 0, ... ,\n       1, 0, 0, 1, 0, 0, 0, 0, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 9, 10,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10,\n       10, 10, 10, 10, 10, 10,  9,  9, 10])`, type: `ndarray`\n\nres, value: `array([ 9, 10,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10,\n       10, 10, 10, 10, 10, 10,  9,  9, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na     9\nb    10\nc     9\nd     9\ne     9\nf     9\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn     9\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx     9\ny     9\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Case 113\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      1\n1      1\n2      7\n3      3\n4      7\n      ..\n995    3\n996    4\n997    7\n998    5\n999    1\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   1,   1, ... , 255, 255, 255, 256, 256, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `257`, type: `int`\n\nval, value: `array([6, 6, 7, 6, 6, 6, 8, 9, 4, ... ,\n       0, 0, 8, 5, 3, 4, 6, 3, 3, 8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([ 49, 872, 785, 468, 519, ... , 861, 650, 563, 272, 282, 343])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   3,   8,  11,  15, ... , 982, 988, 990, 993, 994, 997])`, shape: `(257,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 1, 1, 0, 0, 1, 1, 1, ... ,\n       1, 0, 1, 1, 1, 1, 1, 1, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([2, 3, 3, 3, 3, 5, 3, 2, 3, ... , 6, 5, 2, 2, 5, 2, 2, 1, 3, 2])`, shape: `(257,)`, type: `ndarray`\n\nres, value: `array([2, 3, 3, 3, 3, 5, 3, 2, 3, ... , 6, 5, 2, 2, 5, 2, 2, 1, 3, 2])`, shape: `(257,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    3\n     2015-08-26    3\n     2015-08-27    3\n                  ..\nz    2015-08-28    2\n     2015-08-29    2\n     2015-08-30    1\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n### Case 114\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      1.0\n1      1.0\n2      7.0\n3      3.0\n4      7.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    1.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  8.00000000e+00,  9.00000000e+00])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      1.000000e+00\n1      1.000000e+00\n2      7.000000e+00\n3      3.000000e+00\n4      7.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    5.000000e+00\n999    1.000000e+00\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 126, 343, 345, 529, 877, 543])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  88, 124, 158, 189, 221, 253, 286, 323, 367, 404, 446, 488,\n       520, 551, 597, 635, 672, 699, 740, 777, 823, 851, 890, 931, 965])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 0, 1, 0, 0, 0, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([11, 10, 10, 10,  9, 10, 10, 11, 11, 11, 11, 11, 11,  9, 10, 11, 11,\n       10, 10, 11, 10, 11,  9, 11, 10,  9, 11])`, type: `ndarray`\n\nres, value: `array([10, 10, 10,  9, 10, 10, 11, 11, 11, 11, 11, 11,  9, 10, 11, 11, 10,\n       10, 11, 10, 11,  9, 11, 10,  9, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd     9\ne    10\nf    10\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm     9\nn    10\no    11\np    11\nq    10\nr    10\ns    11\nt    10\nu    11\nv     9\nw    11\nx    10\ny     9\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n### Case 115\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       5\n1       4\n2       1\n3       4\n4       9\n       ..\n9995    9\n9996    3\n9997    4\n9998    0\n9999    6\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([ 247,  332,  341, ..., 9326, 9599, 9676])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  384,  773, 1156, 1512, 1917, 2305, 2737, 3124, 3525, 3908,\n       4288, 4634, 5047, 5431, 5823, 6197, 6589, 6968, 7345, 7730, 8084,\n       8491, 8862, 9254, 9634])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Case 116\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       5\n1       4\n2       1\n3       4\n4       9\n       ..\n9995    9\n9996    3\n9997    4\n9998    0\n9999    6\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 8, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([5740, 7279, 9035, ..., 1390, 6605, 9326])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   50,   85,  130,  167, ... , 9805, 9838, 9866, 9912, 9961])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n        9, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n        9, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28     9\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 117\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       5.0\n1       4.0\n2       1.0\n3       4.0\n4       9.0\n       ... \n9995    9.0\n9996    3.0\n9997    4.0\n9998    0.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 9326, 9599, 9676])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  947, 1312, 1671, 2002, 2380, 2743, 3147, 3510, 3894, 4255,\n       4608, 4935, 5329, 5688, 6065, 6416, 6779, 7142, 7498, 7863, 8194,\n       8577, 8929, 9297, 9660])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n### Case 118\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7\n1        0\n2        8\n3        6\n4        2\n        ..\n99995    0\n99996    5\n99997    2\n99998    0\n99999    5\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([  187,   680,  1131, ..., 99566, 99751, 99830])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3846,  7759, 11602, 15536, 19419, 23317, 27205, 31114,\n       34923, 38655, 42462, 46231, 50194, 53977, 57738, 61585, 65438,\n       69303, 73089, 76850, 80664, 84516, 88370, 92264, 96233])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Case 119\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7\n1        0\n2        8\n3        6\n4        2\n        ..\n99995    0\n99996    5\n99997    2\n99998    0\n99999    5\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, value: `array([  680,  2455,  2520, ..., 90112, 91952, 98549])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   379,   761,  1126, ... , 98110, 98458, 98864, 99235, 99618])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 120\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        7.0\n1        0.0\n2        8.0\n3        6.0\n4        2.0\n        ... \n99995    0.0\n99996    5.0\n99997    2.0\n99998    0.0\n99999    5.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 99566, 99751, 99830])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9523, 13221, 16849, 20568, 24201, 27855, 31531, 35196,\n       38786, 42320, 45899, 49450, 53187, 56759, 60328, 63951, 67579,\n       71205, 74773, 78312, 81902, 85529, 89121, 92767, 96467])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n### Case 121\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     70\n1     82\n2     19\n3     80\n4     79\n      ..\n95    72\n96    39\n97    71\n98    65\n99    24\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  1,  2,  2,  3,  3,  3,  3,  3,  4,  4,  5,  5,  5,  6,\n        6,  6,  6,  6,  6,  6,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9, 10,\n       10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14,\n       14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17,\n       18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21,\n       21, 21, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([11, 33, 39, 19, 33, 75, 14, 25, 55, 72, 80, 33, 82, 12, 13, 22,  6,\n       18, 59, 61, 80, 96, 98,  1, 41, 15, 93, 19, 19, 19, 30, 80, 86, 33,\n       41, 80, 96, 33, 42, 87, 95, 26, 37, 82, 86, 19, 22, 24, 42, 80, 44,\n       73, 74, 78, 95, 11, 49, 65, 72,  3, 24, 44, 46, 97, 30, 40, 80, 80,\n        7, 20, 22, 58, 71, 94, 98,  8, 12, 17, 53, 79, 90, 29, 55, 77, 12,\n       18, 24, 49, 64, 96, 68, 79, 27, 46, 60, 70, 82, 13, 34, 93])`, type: `ndarray`\n\nsorter, value: `array([33, 41, 96, 55, 84, 78, 50, 70, 60, 32, 62,  7,  1, 34, 27, 26, 14,\n       64, 73, 61,  5, 90,  8, 69, 48, 15, 65,  2, 13, 66, 28,  3, 29, 58,\n       89, 54, 51, 74, 94, 42, 17, 88, 91, 52, 10, 25, 36, 71, 11, 19, 86,\n       37, 22, 59, 39, 45, 93, 98, 95, 46, 87,  9, 31, 76,  6, 79, 21, 83,\n       75, 30, 92, 20, 97, 16, 81, 23, 67, 68, 24,  4, 80, 82, 47, 44, 43,\n       56, 99, 18, 35, 12, 38, 53, 49, 57, 85,  0, 77, 40, 63, 72])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  3,  4,  6, 11, 13, 16, 23, 25, 27, 33, 37, 41, 45, 50, 55, 59,\n       64, 68, 75, 81, 84, 90, 92, 97, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([3, 1, 2, 5, 2, 3, 7, 2, 2, 4, 4, 4, 4, 5, 5, 4, 5, 3, 7, 6, 3, 6,\n       2, 5, 2, 1])`, type: `ndarray`\n\nres, value: `array([3, 1, 2, 5, 2, 3, 7, 2, 2, 4, 4, 4, 4, 5, 5, 4, 5, 3, 7, 6, 3, 6,\n       2, 5, 2, 1])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    3\nb    1\nc    2\nd    5\ne    2\nf    3\ng    7\nh    2\ni    2\nj    4\nk    4\nl    4\nm    4\nn    5\no    5\np    4\nq    5\nr    3\ns    7\nt    6\nu    3\nv    6\nw    2\nx    5\ny    2\nz    1\nName: julie, dtype: int64`, type: `Series`\n\n### Case 122\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     70\n1     82\n2     19\n3     80\n4     79\n      ..\n95    72\n96    39\n97    71\n98    65\n99    24\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 17, 18, 19, 19, 20, 21, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29,\n       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 40, 41, 42, 43, 44,\n       45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 54, 55, 56, 57, 58, 58,\n       59, 60, 61, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\n       75, 76, 76, 77, 78, 79, 80, 81, 82, 82, 83, 84, 85, 86, 87])`, type: `ndarray`\n\n_, value: `88`, type: `int`\n\nval, value: `array([39, 11, 33, 19, 33, 75, 14, 25, 55, 80, 72, 82, 33, 12, 22, 13,  6,\n       59, 80, 98, 18, 61, 96,  1, 41, 15, 93, 19, 19, 30, 80, 86, 19, 41,\n       80, 96, 33, 33, 95, 42, 87, 37, 26, 82, 86, 24, 42, 80, 22, 19, 74,\n       73, 44, 95, 78, 11, 72, 65, 49, 44, 97,  3, 24, 46, 30, 80, 40, 80,\n       71, 20, 22, 98, 94, 58,  7, 90, 17, 12, 53, 79,  8, 29, 55, 77, 64,\n       24, 18, 96, 12, 49, 79, 68, 27, 46, 70, 60, 82, 34, 13, 93])`, type: `ndarray`\n\nsorter, value: `array([96, 33, 41, 55, 84, 78, 50, 70, 60, 62, 32,  1,  7, 34, 26, 27, 14,\n       73,  5,  8, 64, 61, 90, 69, 48, 15, 65, 66,  2, 28,  3, 29, 13, 89,\n       54, 51, 58, 74, 17, 94, 42, 91, 88, 52, 10, 71, 11, 19, 36, 25, 22,\n       37, 86, 39, 59, 45, 95, 98, 93,  9, 76, 46, 87, 31,  6, 21, 79, 83,\n       97, 30, 92, 81, 16, 20, 75, 80, 68, 67, 24,  4, 23, 82, 47, 44, 35,\n       99, 56, 12, 43, 18, 53, 38, 49, 57,  0, 85, 77, 63, 40, 72])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 19, 20, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38,\n       39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57,\n       58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77,\n       78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96,\n       97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1,\n       1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1,\n       1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-24') ... ('z', '2015-08-25')],\n           names=['jim', 'joe'])`, shape: `(88,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-24    1\n     2015-08-30    1\n     2015-09-01    1\nb    2015-08-29    1\nc    2015-08-28    1\n                  ..\nx    2015-08-30    1\n     2015-09-01    1\ny    2015-08-25    1\n     2015-08-29    1\nz    2015-08-25    1\nName: julie, Length: 88, dtype: int64`, type: `Series`\n\n### Case 123\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     70.0\n1     82.0\n2     19.0\n3     80.0\n4     79.0\n      ... \n95    72.0\n96    39.0\n97    71.0\n98    65.0\n99    24.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  2,  3,  3,  3,  3,  3,\n        4,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8,  9,  9,  9,\n        9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n       13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17,\n       17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20,\n       20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 1.00000000e+00,  4.40000000e+01, ... ,  3.40000000e+01,  9.30000000e+01])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([69, 86, 18, 35,  1, 52, 33, 41, 96, 55, 84, 78, 50, 70, 60, 32, 62,\n        7, 26, 27, 34,  8, 64, 14, 73, 61,  5, 90, 48, 65, 15, 28, 66,  2,\n       13,  3, 29, 58, 89, 54, 51, 74, 94, 42, 17, 88, 91, 10, 25, 36, 71,\n       11, 19, 37, 22, 59, 39, 45, 93, 98, 95,  9, 46, 87, 31, 76, 83,  6,\n       79, 21, 75, 30, 92, 20, 97, 16, 81, 23, 67, 68, 24,  4, 80, 47, 82,\n       44, 43, 56, 99, 12, 38, 53, 85, 49, 57,  0, 77, 40, 63, 72])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6,  9, 10, 12, 17, 18, 21, 28, 29, 31, 37, 41, 45, 48, 53, 57, 61,\n       66, 70, 77, 83, 86, 90, 92, 97, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 3, 1, 2, 5, 1, 2, 6, 1, 2, 4, 4, 4, 3, 5, 4, 4, 4, 4, 7, 6, 3,\n       4, 2, 5, 2, 1])`, type: `ndarray`\n\nres, value: `array([3, 1, 2, 5, 1, 2, 6, 1, 2, 4, 4, 4, 3, 5, 4, 4, 4, 4, 7, 6, 3, 4,\n       2, 5, 2, 1])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    3\nb    1\nc    2\nd    5\ne    1\nf    2\ng    6\nh    1\ni    2\nj    4\nk    4\nl    4\nm    3\nn    5\no    4\np    4\nq    4\nr    4\ns    7\nt    6\nu    3\nv    4\nw    2\nx    5\ny    2\nz    1\nName: julie, dtype: int64`, type: `Series`\n\n### Case 124\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      40\n1      26\n2      60\n3      84\n4      21\n       ..\n995    23\n996    80\n997    59\n998    72\n999    14\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 4,  5,  7,  8,  9, 14, 14, ... , 88, 89, 92, 94, 94, 97, 98, 98])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([308, 203, 775, 200, 659, ... , 861,  16, 880,  71, 216, 400])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  32,  70, 110, 152, 186, 223, 255, 290, 325, 369, 408, 447,\n       483, 516, 552, 602, 633, 679, 712, 762, 806, 846, 898, 926, 962])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, ... ,\n       1, 1, 0, 1, 1, 1, 0, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([27, 33, 36, 35, 30, 30, 27, 29, 29, 32, 31, 33, 34, 27, 30, 37, 27,\n       38, 27, 44, 35, 33, 41, 24, 33, 31])`, type: `ndarray`\n\nres, value: `array([27, 33, 36, 35, 30, 30, 27, 29, 29, 32, 31, 33, 34, 27, 30, 37, 27,\n       38, 27, 44, 35, 33, 41, 24, 33, 31])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    27\nb    33\nc    36\nd    35\ne    30\nf    30\ng    27\nh    29\ni    29\nj    32\nk    31\nl    33\nm    34\nn    27\no    30\np    37\nq    27\nr    38\ns    27\nt    44\nu    35\nv    33\nw    41\nx    24\ny    33\nz    31\nName: julie, dtype: int64`, type: `Series`\n\n### Case 125\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      40\n1      26\n2      60\n3      84\n4      21\n       ..\n995    23\n996    80\n997    59\n998    72\n999    14\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   1,   1, ... , 252, 252, 253, 253, 253, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `254`, type: `int`\n\nval, value: `array([14, 80, 99,  9, 31, 41, 42, ... , 98, 23, 81, 94,  3, 21, 56, 89])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([833, 338, 852, 659, 632, ... , 908,  16, 715, 771, 421,  27])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   3,   7,   8,  11, ... , 972, 976, 984, 985, 993, 996])`, shape: `(254,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 3,  4,  1,  3,  3,  4,  4, ... ,  1,  3,  4,  7,  1,  8,  3,  4])`, shape: `(254,)`, type: `ndarray`\n\nres, value: `array([ 3,  4,  1,  3,  3,  4,  4, ... ,  1,  3,  4,  7,  1,  8,  3,  4])`, shape: `(254,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    4\n     2015-08-25    1\n     2015-08-26    3\n     2015-08-27    3\n                  ..\nz    2015-08-28    7\n     2015-08-29    1\n     2015-08-30    8\n     2015-08-31    3\n     2015-09-01    4\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n### Case 126\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      40.0\n1      26.0\n2      60.0\n3      84.0\n4      21.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    72.0\n999    14.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  9.70000000e+01,  9.80000000e+01])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      4.000000e+01\n1      2.600000e+01\n2      6.000000e+01\n3      8.400000e+01\n4      2.100000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    7.200000e+01\n999    1.400000e+01\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 689, 861,  16, 880,  71, 400])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  90, 125, 160, 200, 232, 268, 298, 330, 364, 405, 442, 478,\n       512, 544, 579, 625, 654, 697, 730, 780, 824, 863, 910, 934, 968])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 1, 0, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([36, 25, 27, 27, 28, 24, 28, 22, 21, 25, 25, 31, 26, 28, 24, 26, 33,\n       21, 31, 26, 39, 32, 28, 32, 20, 31, 25])`, type: `ndarray`\n\nres, value: `array([25, 27, 27, 28, 24, 28, 22, 21, 25, 25, 31, 26, 28, 24, 26, 33, 21,\n       31, 26, 39, 32, 28, 32, 20, 31, 25])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    25\nb    27\nc    27\nd    28\ne    24\nf    28\ng    22\nh    21\ni    25\nj    25\nk    31\nl    26\nm    28\nn    24\no    26\np    33\nq    21\nr    31\ns    26\nt    39\nu    32\nv    28\nw    32\nx    20\ny    31\nz    25\nName: julie, dtype: int64`, type: `Series`\n\n### Case 127\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       49\n1       21\n2       63\n3       80\n4       56\n        ..\n9995    32\n9996    68\n9997    16\n9998    77\n9999    52\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([2710, 4921, 9185, ..., 6845, 4979, 9650])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  345,  719, 1083, 1497, 1902, 2265, 2667, 3066, 3442, 3811,\n       4196, 4607, 5000, 5369, 5746, 6154, 6545, 6956, 7330, 7696, 8077,\n       8459, 8827, 9204, 9600])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 98,  99, 100,  99,  98,  98,  98,  98,  97,  98,  96,  99, 100,\n        98,  97,  99, 100,  95, 100,  98,  96,  97,  98,  97,  98,  99])`, type: `ndarray`\n\nres, value: `array([ 98,  99, 100,  99,  98,  98,  98,  98,  97,  98,  96,  99, 100,\n        98,  97,  99, 100,  95, 100,  98,  96,  97,  98,  97,  98,  99])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na     98\nb     99\nc    100\nd     99\ne     98\nf     98\ng     98\nh     98\ni     97\nj     98\nk     96\nl     99\nm    100\nn     98\no     97\np     99\nq    100\nr     95\ns    100\nt     98\nu     96\nv     97\nw     98\nx     97\ny     98\nz     99\nName: julie, dtype: int64`, type: `Series`\n\n### Case 128\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       49\n1       21\n2       63\n3       80\n4       56\n        ..\n9995    32\n9996    68\n9997    16\n9998    77\n9999    52\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 8,  9, 10, ..., 86, 95, 95])`, type: `ndarray`\n\nsorter, value: `array([ 244, 9037, 5097, ..., 4302, 3914, 9528])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   34,   61,  105,  134, ... , 9794, 9825, 9869, 9922, 9961])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([28, 25, 38, 27, 30, 25, 32, ... , 30,\n       25, 33, 38, 33, 34])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([28, 25, 38, 27, 30, 25, 32, ... , 30,\n       25, 33, 38, 33, 34])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    28\n     2015-08-24    25\n     2015-08-25    38\n     2015-08-26    27\n     2015-08-27    30\n                   ..\nz    2015-08-28    25\n     2015-08-29    33\n     2015-08-30    38\n     2015-08-31    33\n     2015-09-01    34\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 129\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       49.0\n1       21.0\n2       63.0\n3       80.0\n4       56.0\n        ... \n9995    32.0\n9996    68.0\n9997    16.0\n9998    77.0\n9999    52.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.80000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6845, 4979, 9650])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  916, 1271, 1609, 1997, 2375, 2715, 3090, 3463, 3821, 4164,\n       4531, 4915, 5283, 5628, 5985, 6372, 6740, 7121, 7470, 7816, 8182,\n       8544, 8894, 9251, 9629])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100,  97,  98,  98,  97,  97,  94,  98,  97,  96,  95,  97,  96,\n        99,  95,  95,  97,  99,  95,  95,  95,  94,  96,  95,  96,  98,\n        99])`, type: `ndarray`\n\nres, value: `array([97, 98, 98, 97, 97, 94, 98, 97, 96, 95, 97, 96, 99, 95, 95, 97, 99,\n       95, 95, 95, 94, 96, 95, 96, 98, 99])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    97\nb    98\nc    98\nd    97\ne    97\nf    94\ng    98\nh    97\ni    96\nj    95\nk    97\nl    96\nm    99\nn    95\no    95\np    97\nq    99\nr    95\ns    95\nt    95\nu    94\nv    96\nw    95\nx    96\ny    98\nz    99\nName: julie, dtype: int64`, type: `Series`\n\n### Case 130\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        28\n1        71\n2        56\n3        54\n4        82\n         ..\n99995    44\n99996    95\n99997    14\n99998    60\n99999    10\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([ 4800,  7148,  9982, ..., 91307, 92917, 96899])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3836,  7707, 11631, 15528, 19369, 23166, 26905, 30780,\n       34623, 38495, 42330, 46257, 50129, 53835, 57666, 61531, 65385,\n       69254, 73032, 76912, 80750, 84574, 88374, 92210, 96022])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n### Case 131\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        28\n1        71\n2        56\n3        54\n4        82\n         ..\n99995    44\n99996    95\n99997    14\n99998    60\n99999    10\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 0,  1,  1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, value: `array([44740, 47486, 68747, ..., 20662, 47196, 49684])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   399,   779,  1139, ... , 98038, 98409, 98802, 99208, 99606])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([ 99,  95,  98,  97,  99, ... ,  98,  98,  95,  99,  97, 100])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([ 99,  95,  98,  97,  99, ... ,  98,  98,  95,  99,  97, 100])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23     99\n     2015-08-24     95\n     2015-08-25     98\n     2015-08-26     97\n     2015-08-27     99\n                  ... \nz    2015-08-28     98\n     2015-08-29     95\n     2015-08-30     99\n     2015-08-31     97\n     2015-09-01    100\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 132\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        28.0\n1        71.0\n2        56.0\n3        54.0\n4        82.0\n         ... \n99995    44.0\n99996    95.0\n99997    14.0\n99998    60.0\n99999    10.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 90293, 91307, 96899])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9470, 13092, 16805, 20468, 24078, 27644, 31178, 34806,\n       38394, 42045, 45666, 49343, 53023, 56540, 60146, 63755, 67387,\n       71027, 74604, 78244, 81879, 85477, 89040, 92665, 96257])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64`, type: `Series`\n\n### Case 133\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     828\n1     857\n2     791\n3     688\n4     956\n     ... \n95    507\n96    788\n97    785\n98    204\n99     11\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  1,  1,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,\n        3,  3,  4,  4,  4,  5,  5,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,\n        8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 11, 11, 12, 13, 13,\n       13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 17, 18,\n       18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 22, 22,\n       22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([232, 271, 278, 822, 893, ... ,  28, 287, 292, 328, 507, 834])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([89, 69, 31, 59, 34, 84, 13, 15, 92,  5, 99,  7, 63, 41, 87, 82, 46,\n       72, 96, 27, 23, 75, 80, 58, 33, 74, 47, 81, 26, 43, 28, 66, 78, 83,\n       16,  8, 49,  4, 77, 35, 61, 70, 11, 37, 52, 36, 68, 97, 65, 79, 51,\n       17, 73, 44, 19, 25, 62, 57, 53, 30,  6, 94,  3, 40, 39, 29, 93, 56,\n       50, 55, 14, 67, 22,  9, 42,  0, 10, 64, 91, 45, 71,  2,  1, 38, 60,\n       98, 18, 85, 54, 86, 21, 88, 20, 90, 24, 32, 48, 76, 95, 12])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  5,  7, 10, 19, 22, 24, 27, 34, 38, 45, 46, 48, 49, 55, 60, 61,\n       64, 67, 71, 76, 79, 83, 90, 94, 96])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([5, 2, 3, 9, 3, 2, 3, 6, 4, 7, 1, 2, 1, 6, 5, 1, 3, 3, 4, 5, 3, 4,\n       7, 4, 2, 4])`, type: `ndarray`\n\nres, value: `array([5, 2, 3, 9, 3, 2, 3, 6, 4, 7, 1, 2, 1, 6, 5, 1, 3, 3, 4, 5, 3, 4,\n       7, 4, 2, 4])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    5\nb    2\nc    3\nd    9\ne    3\nf    2\ng    3\nh    6\ni    4\nj    7\nk    1\nl    2\nm    1\nn    6\no    5\np    1\nq    3\nr    3\ns    4\nt    5\nu    3\nv    4\nw    7\nx    4\ny    2\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n### Case 134\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     828\n1     857\n2     791\n3     688\n4     956\n     ... \n95    507\n96    788\n97    785\n98    204\n99     11\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  1,  2,  2,  3,  4,  5,  6,  7,  8,  8,  9, 10, 11, 11, 12,\n       13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 24, 25, 26,\n       27, 27, 28, 29, 30, 31, 31, 32, 33, 33, 34, 35, 36, 36, 37, 38, 39,\n       40, 41, 42, 43, 44, 44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54,\n       55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 65, 66, 67, 67,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80])`, type: `ndarray`\n\n_, value: `81`, type: `int`\n\nval, value: `array([232, 271, 822, 278, 893, ... ,  28, 287, 507, 328, 834, 292])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([89, 69, 59, 31, 34, 84, 13,  5, 92, 15, 63, 96, 99, 46,  7, 72, 41,\n       87, 82, 75, 23, 27, 80, 58, 33, 47, 74, 66, 81, 26, 43, 28, 83, 78,\n       16, 49,  8,  4, 37, 77, 35, 70, 11, 52, 61, 36, 68, 97, 65, 19, 73,\n       17, 44, 79, 51, 57, 30, 25, 53, 62,  6,  3, 94, 40, 93, 39, 29, 50,\n       56, 55, 14, 22,  0,  9, 42, 67, 91, 10, 64, 71, 45,  2,  1, 38, 60,\n       98, 86, 85, 18, 54, 20, 88, 21, 90, 24, 32, 95, 76, 12, 48])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([ 0,  2,  3,  5,  6,  7,  8,  9, 10, 12, 13, 14, 16, 17, 19, 20, 21,\n       22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42,\n       44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62,\n       64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83,\n       86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2,\n       1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1])`, type: `ndarray`\n\nres, value: `array([2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2,\n       1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1])`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(81,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    2\n     2015-08-25    1\n     2015-08-27    2\nb    2015-08-29    1\n     2015-08-31    1\n                  ..\ny    2015-08-25    2\nz    2015-08-27    1\n     2015-08-28    1\n     2015-08-30    1\n     2015-09-01    1\nName: julie, Length: 81, dtype: int64`, type: `Series`\n\n### Case 135\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0     828.0\n1     857.0\n2     791.0\n3     688.0\n4     956.0\n      ...  \n95    507.0\n96    788.0\n97    785.0\n98    204.0\n99     11.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  2,  2,  2,  3,  3,\n        3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  6,  6,  6,  7,  7,\n        7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9,  9, 10, 11, 11,\n       12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 16, 16, 16, 17,\n       17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21,\n       22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([ 2.71000000e+02,  2.88000000e+02, ... ,  5.07000000e+02,  8.34000000e+02])`, shape: `(100,)`, type: `ndarray`\n\nsorter, value: `array([69, 35, 18, 52,  1, 86, 89, 31, 59, 34, 84, 13, 15, 92,  5,  7, 46,\n       99, 63, 41, 87, 82, 72, 96, 27, 23, 75, 80, 58, 47, 33, 74, 26, 28,\n       66, 83, 81, 43, 78,  8, 16, 49,  4, 77, 61, 70, 11, 37, 36, 68, 97,\n       65, 79, 51, 17, 73, 44, 19, 25, 62, 57, 53, 30,  6, 94,  3, 40, 39,\n       29, 93, 56, 50, 55, 14,  9, 67, 22, 42,  0, 64, 10, 91, 45, 71,  2,\n       85, 38, 60, 98, 54, 21, 88, 20, 90, 24, 32, 48, 76, 95, 12])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 6, 10, 12, 15, 24, 27, 29, 32, 39, 43, 48, 49, 51, 52, 58, 63, 64,\n       67, 70, 74, 79, 82, 85, 90, 94, 96])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, value: `array([6, 4, 2, 3, 8, 3, 2, 3, 4, 4, 5, 1, 2, 1, 6, 5, 1, 3, 3, 4, 5, 3,\n       3, 5, 4, 2, 4])`, type: `ndarray`\n\nres, value: `array([4, 2, 3, 8, 3, 2, 3, 4, 4, 5, 1, 2, 1, 6, 5, 1, 3, 3, 4, 5, 3, 3,\n       5, 4, 2, 4])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    4\nb    2\nc    3\nd    8\ne    3\nf    2\ng    3\nh    4\ni    4\nj    5\nk    1\nl    2\nm    1\nn    6\no    5\np    1\nq    3\nr    3\ns    4\nt    5\nu    3\nv    3\nw    5\nx    4\ny    2\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n### Case 136\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      348\n1      796\n2      109\n3       65\n4      690\n      ... \n995    400\n996    816\n997    450\n998    997\n999    855\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  1,   4,  17,  29,  33, ... , 859, 883, 934, 949, 955, 962])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([233, 756, 194, 592, 367, ... , 146, 387,  15, 236, 123, 392])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,  37,  72, 109, 156, 196, 237, 275, 327, 361, 397, 433, 468,\n       508, 538, 574, 620, 657, 694, 728, 761, 799, 838, 881, 916, 959])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([37, 34, 37, 47, 39, 39, 36, 51, 34, 36, 36, 35, 40, 29, 35, 46, 36,\n       36, 34, 33, 38, 38, 43, 35, 42, 37])`, type: `ndarray`\n\nres, value: `array([37, 34, 37, 47, 39, 39, 36, 51, 34, 36, 36, 35, 40, 29, 35, 46, 36,\n       36, 34, 33, 38, 38, 43, 35, 42, 37])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    37\nb    34\nc    37\nd    47\ne    39\nf    39\ng    36\nh    51\ni    34\nj    36\nk    36\nl    35\nm    40\nn    29\no    35\np    46\nq    36\nr    36\ns    34\nt    33\nu    38\nv    38\nw    43\nx    35\ny    42\nz    37\nName: julie, dtype: int64`, type: `Series`\n\n### Case 137\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      348\n1      796\n2      109\n3       65\n4      690\n      ... \n995    400\n996    816\n997    450\n998    997\n999    855\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0,   0,   1, ... , 254, 254, 254, 254, 254, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `255`, type: `int`\n\nval, value: `array([  4,  17, 235, 757,  44, ... ,  31, 222, 255, 347, 690, 883])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, value: `array([756, 194, 811, 240, 784, ... , 131, 420, 261, 898,   4, 387])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([  0,   4,   7,   8,  11, ... , 973, 975, 977, 983, 989, 993])`, shape: `(255,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([ 4,  3,  1,  3,  2,  6,  1, ... ,  6,  3,  2,  2,  6,  6,  4,  7])`, shape: `(255,)`, type: `ndarray`\n\nres, value: `array([ 4,  3,  1,  3,  2,  6,  1, ... ,  6,  3,  2,  2,  6,  6,  4,  7])`, shape: `(255,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    4\n     2015-08-24    3\n     2015-08-25    1\n     2015-08-26    3\n     2015-08-27    2\n                  ..\nz    2015-08-27    2\n     2015-08-28    6\n     2015-08-29    6\n     2015-08-30    4\n     2015-09-01    7\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n### Case 138\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0      348.0\n1      796.0\n2      109.0\n3       65.0\n4      690.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    997.0\n999    855.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, ... ,  8.59000000e+02,  9.34000000e+02])`, shape: `(1000,)`, type: `ndarray`\n\nself.obj, value: `0      3.480000e+02\n1      7.960000e+02\n2      1.090000e+02\n3      6.500000e+01\n4      6.900000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    9.970000e+02\n999    8.550000e+02\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\nsorter, value: `array([103, 256, 273, 426, 579, ... , 837, 346, 563, 605, 146,  15])`, shape: `(1000,)`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 59,  92, 126, 161, 204, 243, 280, 318, 368, 400, 434, 465, 499,\n       536, 563, 595, 639, 669, 706, 738, 771, 809, 847, 888, 921, 963])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, value: `array([50, 31, 30, 32, 37, 33, 32, 30, 46, 28, 31, 24, 28, 35, 24, 23, 34,\n       24, 34, 31, 32, 30, 30, 38, 29, 34, 29])`, type: `ndarray`\n\nres, value: `array([31, 30, 32, 37, 33, 32, 30, 46, 28, 31, 24, 28, 35, 24, 23, 34, 24,\n       34, 31, 32, 30, 30, 38, 29, 34, 29])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    31\nb    30\nc    32\nd    37\ne    33\nf    32\ng    30\nh    46\ni    28\nj    31\nk    24\nl    28\nm    35\nn    24\no    23\np    34\nq    24\nr    34\ns    31\nt    32\nu    30\nv    30\nw    38\nx    29\ny    34\nz    29\nName: julie, dtype: int64`, type: `Series`\n\n### Case 139\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       913\n1       367\n2       507\n3       840\n4       829\n       ... \n9995    904\n9996    540\n9997    713\n9998    838\n9999     64\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  0,   3,   7, ..., 995, 995, 996])`, type: `ndarray`\n\nsorter, value: `array([6206,  528, 4742, ..., 6084, 8568, 7955])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,  380,  780, 1159, 1539, 1933, 2328, 2711, 3111, 3471, 3853,\n       4238, 4630, 5020, 5398, 5769, 6122, 6521, 6909, 7294, 7681, 8034,\n       8392, 8803, 9181, 9583])`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([322, 317, 323, 316, 322, 323, 328, 329, 308, 316, 323, 322, 325,\n       312, 302, 298, 323, 319, 322, 318, 291, 304, 346, 324, 333, 339])`, type: `ndarray`\n\nres, value: `array([322, 317, 323, 316, 322, 323, 328, 329, 308, 316, 323, 322, 325,\n       312, 302, 298, 323, 319, 322, 318, 291, 304, 346, 324, 333, 339])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    322\nb    317\nc    323\nd    316\ne    322\nf    323\ng    328\nh    329\ni    308\nj    316\nk    323\nl    322\nm    325\nn    312\no    302\np    298\nq    323\nr    319\ns    322\nt    318\nu    291\nv    304\nw    346\nx    324\ny    333\nz    339\nName: julie, dtype: int64`, type: `Series`\n\n### Case 140\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       913\n1       367\n2       507\n3       840\n4       829\n       ... \n9995    904\n9996    540\n9997    713\n9998    838\n9999     64\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([ 20,  27, 124, ..., 887, 932, 952])`, type: `ndarray`\n\nsorter, value: `array([4804, 3265, 3332, ..., 2383, 9781,  714])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([   0,   35,   65,  108,  145, ... , 9789, 9832, 9883, 9927, 9965])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([35, 29, 42, 37, 36, 36, 38, ... , 30,\n       40, 49, 43, 38, 35])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([35, 29, 42, 37, 36, 36, 38, ... , 30,\n       40, 49, 43, 38, 35])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    35\n     2015-08-24    29\n     2015-08-25    42\n     2015-08-26    37\n     2015-08-27    36\n                   ..\nz    2015-08-28    40\n     2015-08-29    49\n     2015-08-30    43\n     2015-08-31    38\n     2015-09-01    35\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 141\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0       913.0\n1       367.0\n2       507.0\n3       840.0\n4       829.0\n        ...  \n9995    904.0\n9996    540.0\n9997    713.0\n9998    838.0\n9999     64.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.95000000e+02,  9.95000000e+02,  9.96000000e+02])`, type: `ndarray`\n\nsorter, value: `array([ 103,  256,  273, ..., 6084, 8568, 7955])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 589,  948, 1325, 1682, 2040, 2413, 2781, 3143, 3519, 3858, 4215,\n       4581, 4946, 5308, 5665, 6008, 6337, 6720, 7085, 7446, 7816, 8150,\n       8482, 8869, 9231, 9604])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([402, 263, 269, 275, 263, 277, 264, 272, 274, 243, 256, 280, 260,\n       269, 256, 242, 256, 268, 267, 266, 267, 249, 240, 288, 275, 264,\n       286])`, type: `ndarray`\n\nres, value: `array([263, 269, 275, 263, 277, 264, 272, 274, 243, 256, 280, 260, 269,\n       256, 242, 256, 268, 267, 266, 267, 249, 240, 288, 275, 264, 286])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    263\nb    269\nc    275\nd    263\ne    277\nf    264\ng    272\nh    274\ni    243\nj    256\nk    280\nl    260\nm    269\nn    256\no    242\np    256\nq    268\nr    267\ns    266\nt    267\nu    249\nv    240\nw    288\nx    275\ny    264\nz    286\nName: julie, dtype: int64`, type: `Series`\n\n### Case 142\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        414\n1        118\n2         10\n3        193\n4        333\n        ... \n99995    166\n99996    715\n99997     36\n99998    749\n99999    693\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([48957, 50163, 76994, ..., 24995, 46561, 47618])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,  3775,  7594, 11432, 15282, 19164, 22976, 26901, 30801,\n       34585, 38446, 42202, 46060, 49949, 53770, 57641, 61510, 65260,\n       68999, 72852, 76648, 80491, 84360, 88228, 92196, 96163])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([982, 976, 973, 981, 983, 974, 988, 976, 977, 981, 986, 984, 982,\n       988, 979, 974, 976, 973, 979, 973, 984, 986, 979, 975, 986, 984])`, type: `ndarray`\n\nres, value: `array([982, 976, 973, 981, 983, 974, 988, 976, 977, 981, 986, 984, 982,\n       988, 979, 974, 976, 973, 979, 973, 984, 986, 979, 975, 986, 984])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    982\nb    976\nc    973\nd    981\ne    983\nf    974\ng    988\nh    976\ni    977\nj    981\nk    986\nl    984\nm    982\nn    988\no    979\np    974\nq    976\nr    973\ns    979\nt    973\nu    984\nv    986\nw    979\nx    975\ny    986\nz    984\nName: julie, dtype: int64`, type: `Series`\n\n### Case 143\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        414\n1        118\n2         10\n3        193\n4        333\n        ... \n99995    166\n99996    715\n99997     36\n99998    749\n99999    693\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, value: `260`, type: `int`\n\nval, value: `array([  0,   3,   7, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, value: `array([48957, 80479, 66856, ..., 66732, 24995, 46561])`, type: `ndarray`\n\nval.dtype, value: `dtype('int64')`, type: `dtype`\n\nidx, value: `array([    0,   390,   767,  1125, ... , 98091, 98484, 98876, 99216, 99620])`, shape: `(260,)`, type: `ndarray`\n\ninc, value: `array([1, 1, 1, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([321, 315, 309, 339, 339, ... , 328, 322, 334, 287, 342, 322])`, shape: `(260,)`, type: `ndarray`\n\nres, value: `array([321, 315, 309, 339, 339, ... , 328, 322, 334, 287, 342, 322])`, shape: `(260,)`, type: `ndarray`\n\nri, value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim  joe       \na    2015-08-23    321\n     2015-08-24    315\n     2015-08-25    309\n     2015-08-26    339\n     2015-08-27    339\n                  ... \nz    2015-08-28    322\n     2015-08-29    334\n     2015-08-30    287\n     2015-08-31    342\n     2015-09-01    322\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Case 144\n#### Runtime values and types of the input parameters of the buggy function\nself.obj, value: `0        414.0\n1        118.0\n2         10.0\n3        193.0\n4        333.0\n         ...  \n99995    166.0\n99996    715.0\n99997     36.0\n99998    749.0\n99999    693.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, value: `True`, type: `bool`\n\nself._selection_name, value: `'julie'`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nids, value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, value: `26`, type: `int`\n\nval, value: `array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.98000000e+02,  9.99000000e+02,  9.99000000e+02])`, type: `ndarray`\n\nsorter, value: `array([  103,   256,   273, ..., 92627, 24995, 46561])`, type: `ndarray`\n\nval.dtype, value: `dtype('float64')`, type: `dtype`\n\nidx, value: `array([ 5883,  9425, 13005, 16651, 20263, 23910, 27477, 31163, 34823,\n       38382, 42016, 45537, 49180, 52856, 56475, 60105, 63755, 67277,\n       70809, 74433, 77986, 81594, 85254, 88907, 92646, 96373])`, type: `ndarray`\n\ninc, value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, value: `array([993, 959, 948, 941, 949, 951, 952, 961, 947, 955, 955, 946, 961,\n       962, 968, 949, 952, 950, 955, 961, 948, 962, 959, 958, 950, 961,\n       960])`, type: `ndarray`\n\nres, value: `array([959, 948, 941, 949, 951, 952, 961, 947, 955, 955, 946, 961, 962,\n       968, 949, 952, 950, 955, 961, 948, 962, 959, 958, 950, 961, 960])`, type: `ndarray`\n\nri, value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, value: `dtype('int64')`, type: `dtype`\n\nresult, value: `jim\na    959\nb    948\nc    941\nd    949\ne    951\nf    952\ng    961\nh    947\ni    955\nj    955\nk    946\nl    961\nm    962\nn    968\no    949\np    952\nq    950\nr    955\ns    961\nt    948\nu    962\nv    959\nw    958\nx    950\ny    961\nz    960\nName: julie, dtype: int64`, type: `Series`\n\n",
    "7": "## Expected values and types of variables during the failing test execution\nEach case below includes input parameter values and types, and the expected values and types of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n### Expected case 1\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     2\n1     6\n2     7\n3     4\n4     3\n     ..\n95    3\n96    4\n97    5\n98    1\n99    6\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,\n        3,  3,  3,  3,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  8,\n        8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12,\n       12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 16, 16, 17, 17,\n       17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 21, 22, 22,\n       22, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([2, 6, 7, 4, 3, 8, 5, 0, 9, 1])`, type: `ndarray`\n\nval, expected value: `array([2, 6, 7, 4, 3, 4, 7, 8, 6, 8, 3, 5, 6, 7, 7, 5, 5, 0, 7, 2, 7, 4,\n       9, 2, 9, 3, 9, 9, 5, 9, 0, 5, 0, 7, 3, 4, 5, 0, 1, 2, 1, 4, 3, 2,\n       0, 2, 0, 2, 3, 6, 1, 4, 4, 3, 1, 3, 7, 7, 8, 4, 7, 8, 2, 8, 2, 2,\n       7, 9, 0, 7, 4, 3, 4, 6, 1, 5, 1, 5, 0, 3, 2, 0, 1, 0, 5, 5, 0, 5,\n       6, 8, 2, 6, 8, 6, 4, 3, 4, 5, 1, 6])`, type: `ndarray`\n\ncodes, expected value: `array([0, 4, 5, 7, 7, 8, 9, 0, 0, 1, 2, 5, 7, 7, 3, 6, 6, 0, 3, 4, 4, 3,\n       3, 2, 4, 6, 7, 7, 5, 6, 9, 0, 1, 3, 4, 1, 4, 6, 9, 1, 1, 2, 6, 6,\n       7, 8, 0, 2, 2, 2, 2, 3, 3, 5, 8, 3, 6, 8, 9, 6, 7, 7, 7, 3, 0, 2,\n       0, 3, 4, 5, 1, 5, 8, 9, 1, 1, 3, 6, 0, 8, 2, 2, 2, 4, 9, 9, 9, 0,\n       1, 2, 5, 0, 0, 7, 3, 4, 4, 4, 6, 6])`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 42,  9, 32, 46, 27, 38, 19, 90,  1,  2, 63, 44, 78,  3, 36, 97,\n       80, 52,  4, 48,  5, 94,  6, 79, 77, 83, 86,  7, 15, 50, 64,  8, 72,\n       10, 88, 34, 11, 82, 12, 73, 20, 31, 87, 68, 24, 65, 13, 18, 14, 60,\n       35, 41, 92, 67, 59, 16, 22, 98, 75, 17, 30, 37, 21, 23, 57, 45, 51,\n       25, 58, 93, 89, 26, 54, 91, 99, 70, 28, 39, 29, 33, 66, 69, 53, 40,\n       74, 76, 43, 49, 56, 61, 47, 62, 81, 96, 55, 71, 95, 84, 85])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  7, 14, 17, 21, 23, 28, 31, 33, 35, 39, 46, 49, 55, 59, 63, 64,\n       66, 70, 74, 78, 80, 83, 87, 91, 94])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1,\n       0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n       1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 5, 2, 3, 1, 4, 3, 2, 2, 4, 5, 2, 4, 4, 2, 1, 2, 4, 4, 3, 2, 1,\n       2, 4, 2, 3])`, type: `ndarray`\n\nres, expected value: `array([6, 5, 2, 3, 1, 4, 3, 2, 2, 4, 5, 2, 4, 4, 2, 1, 2, 4, 4, 3, 2, 1,\n       2, 4, 2, 3])`, type: `ndarray`\n\nri, expected value: `Index(['n', 'g', 'v', 'd', 'q', 'u', 'h', 'k', 'z', 'a', 'm', 't', 'r', 'b',\n       'e', 'w', 's', 'f', 'c', 'o', 'y', 'i', 'j', 'p', 'x', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nn    6\ng    5\nv    2\nd    3\nq    1\nu    4\nh    3\nk    2\nz    2\na    4\nm    5\nt    2\nr    4\nb    4\ne    2\nw    1\ns    2\nf    4\nc    4\no    3\ny    2\ni    1\nj    2\np    4\nx    2\nl    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 2\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     2\n1     6\n2     7\n3     4\n4     3\n     ..\n95    3\n96    4\n97    5\n98    1\n99    6\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  1,  2,  2,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 12, 13,\n       14, 15, 16, 17, 17, 18, 19, 19, 20, 20, 21, 22, 23, 24, 25, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 41, 42, 43,\n       44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72, 73, 73,\n       74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87])`, type: `ndarray`\n\n_, expected value: `array([2, 6, 7, 4, 3, 8, 5, 0, 9, 1])`, type: `ndarray`\n\nval, expected value: `array([2, 6, 7, 4, 3, 4, 7, 8, 6, 8, 3, 5, 6, 7, 7, 5, 5, 0, 7, 2, 7, 4,\n       9, 2, 9, 3, 9, 9, 5, 9, 0, 5, 0, 7, 3, 4, 5, 0, 1, 2, 1, 4, 3, 2,\n       0, 2, 0, 2, 3, 6, 1, 4, 4, 3, 1, 3, 7, 7, 8, 4, 7, 8, 2, 8, 2, 2,\n       7, 9, 0, 7, 4, 3, 4, 6, 1, 5, 1, 5, 0, 3, 2, 0, 1, 0, 5, 5, 0, 5,\n       6, 8, 2, 6, 8, 6, 4, 3, 4, 5, 1, 6])`, type: `ndarray`\n\ncodes, expected value: `array([0, 1, 5, 2, 7, 3, 4, 3, 2, 5, 1, 5, 8, 4, 6, 1, 2, 2, 6, 6, 6, 7,\n       2, 0, 0, 2, 6, 3, 8, 0, 8, 4, 8, 6, 8, 7, 6, 7, 2, 4, 3, 6, 7, 9,\n       0, 9, 3, 4, 7, 0, 7, 0, 0, 4, 1, 9, 3, 3, 4, 5, 9, 4, 2, 2, 5, 3,\n       2, 5, 0, 7, 0, 0, 2, 8, 7, 2, 1, 3, 4, 3, 1, 9, 9, 6, 7, 4, 0, 1,\n       9, 6, 6, 7, 1, 5, 1, 3, 4, 3, 6, 9])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  1, 63,  2, 78,  3,  4,  5,  6,  7,  8,  9, 27, 10, 11, 12, 13,\n       14, 15, 16, 75, 17, 18, 19, 90, 20, 87, 21, 22, 23, 24, 25, 26, 28,\n       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 43, 44,\n       45, 47, 48, 49, 50, 51, 52, 53, 89, 54, 55, 56, 57, 58, 59, 60, 61,\n       62, 81, 64, 65, 66, 67, 68, 69, 99, 70, 71, 72, 73, 74, 76, 77, 83,\n       79, 80, 88, 82, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  3,  5,  6,  7,  8,  9, 10, 11, 13, 14, 15, 16, 17, 18, 19,\n       20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n       40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n       58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76,\n       78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96,\n       97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('n', '2015-08-26') ... ('b', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(88,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nn    2015-08-26    1\ng    2015-08-25    2\n     2015-08-30    2\nv    2015-08-31    1\nd    2015-08-26    1\n                  ..\nq    2015-08-29    1\nl    2015-08-26    1\n     2015-08-24    1\nv    2015-08-29    1\nb    2015-09-01    1\nName: julie, Length: 88, dtype: int64`, type: `Series`\n\n### Expected case 3\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     2.0\n1     6.0\n2     7.0\n3     4.0\n4     3.0\n     ... \n95    3.0\n96    4.0\n97    5.0\n98    1.0\n99    6.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,\n        7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 11, 11,\n       12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 16, 16, 17,\n       17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 22, 22,\n       22, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([2., 6., 7., 4., 3., 5., 0., 9., 1., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 2.,  6.,  7.,  4.,  3., ... ,  4.,  3.,  4.,  5.,  1.,  6.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  2,  2,  3,  3,  6, -1, -1, -1,  0,  4,  6,  8,  0,  0,  2,  6,\n        6,  9,  3,  5,  5,  0,  4,  4,  3,  3, -1,  2,  4,  5, -1,  5,  8,\n       -1, -1,  3,  4,  1,  4,  5,  8,  1,  1,  2,  5,  5,  6,  7, -1,  2,\n        2,  2,  3,  7,  9,  3,  5,  7,  8,  5,  6,  6,  6,  3,  0,  2, -1,\n        3,  4,  9, -1,  1,  8,  9, -1,  1,  1,  3,  0,  7, -1,  2,  4,  8,\n        8,  8,  0,  1,  2,  9, -1,  0,  6, -1, -1,  3,  4,  4,  4])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 69, 35, 52, 86,  9, 27, 46,  0, 42, 32, 38, 19, 90,  2, 44,\n       78, 63,  3, 36, 97, 80,  4, 48,  5, 94, 83,  6, 79, 77,  7, 15, 50,\n        8, 64, 72, 10, 88, 34, 11, 82, 12, 73, 20, 31, 87, 68, 24, 65, 13,\n       14, 60, 41, 67, 92, 59, 16, 22, 98, 75, 17, 30, 37, 21, 23, 57, 45,\n       51, 25, 58, 26, 93, 54, 89, 28, 91, 99, 70, 39, 29, 66, 33, 53, 40,\n       74, 76, 43, 49, 56, 61, 47, 62, 81, 84, 85, 96, 55, 71, 95])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 13, 19, 22, 25, 27, 31, 34, 36, 38, 42, 49, 51, 56, 60, 64, 65,\n       67, 71, 75, 79, 81, 83, 87, 91, 94])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,\n       1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 5, 4, 2, 2, 1, 4, 3, 1, 2, 4, 5, 2, 4, 4, 2, 1, 2, 4, 4, 3, 2,\n       2, 2, 4, 3, 3])`, type: `ndarray`\n\nres, expected value: `array([5, 4, 2, 2, 1, 4, 3, 1, 2, 4, 5, 2, 4, 4, 2, 1, 2, 4, 4, 3, 2, 2,\n       2, 4, 3, 3])`, type: `ndarray`\n\nri, expected value: `Index(['n', 'g', 'v', 'd', 'q', 'u', 'h', 'k', 'z', 'a', 'm', 't', 'r', 'b',\n       'e', 'w', 's', 'f', 'c', 'o', 'y', 'i', 'j', 'p', 'x', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nn    5\ng    4\nv    2\nd    2\nq    1\nu    4\nh    3\nk    1\nz    2\na    4\nm    5\nt    2\nr    4\nb    4\ne    2\nw    1\ns    2\nf    4\nc    4\no    3\ny    2\ni    2\nj    2\np    4\nx    3\nl    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 4\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     2.0\n1     6.0\n2     7.0\n3     4.0\n4     3.0\n     ... \n95    3.0\n96    4.0\n97    5.0\n98    1.0\n99    6.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  6,\n        7,  7,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 16, 17, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51,\n       52, 53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80])`, type: `ndarray`\n\n_, expected value: `array([2., 6., 7., 4., 3., 5., 0., 9., 1., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 2.,  6.,  7.,  4.,  3., ... ,  4.,  3.,  4.,  5.,  1.,  6.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  2,  2,  3,  3,  3,  5,  6,  8,  0,  2,  6,  4,  3,  2, -1, -1,\n       -1, -1,  4,  5,  1,  2,  2,  5,  5,  5,  6,  0,  0,  2,  5,  3,  7,\n        0,  7,  4, -1, -1,  7,  6,  5,  6,  2,  4,  5,  6,  8,  0,  3, -1,\n        4,  0,  6, -1, -1,  4,  1,  8,  3,  4,  8,  9,  4,  2,  2,  9,  3,\n        2,  9,  0,  6,  9, -1, -1, -1,  7,  6,  1,  3,  4,  3,  1,  8,  8,\n        4,  0,  1,  8, -1, -1, -1,  1,  9,  1,  3,  4,  3,  5,  8])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 69,  3, 35, 52, 77, 86, 40,  0,  2, 78,  4,  5,  6,  7,  8,\n        9, 27, 10, 11, 12, 13, 14, 15, 16, 75, 17, 19, 90, 20, 87, 21, 22,\n       23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 46,\n       42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 89, 55, 56, 57, 58, 59,\n       60, 61, 62, 81, 63, 64, 65, 66, 67, 68, 99, 70, 71, 72, 73, 74, 76,\n       79, 80, 88, 82, 83, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28,\n       30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n       48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66,\n       67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85,\n       86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('n', '2015-08-26') ... ('b', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(81,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nn    2015-08-26    1\ng    2015-08-30    2\nd    2015-08-26    1\nq    2015-08-23    1\nu    2015-08-29    1\n                  ..\nq    2015-08-29    1\nl    2015-08-26    1\n     2015-08-24    1\nv    2015-08-29    1\nb    2015-09-01    1\nName: julie, Length: 81, dtype: int64`, type: `Series`\n\n### Expected case 5\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     2.0\n1     6.0\n2     7.0\n3     4.0\n4     3.0\n     ... \n95    3.0\n96    4.0\n97    5.0\n98    1.0\n99    6.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,\n        7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 11, 11,\n       12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 16, 16, 17,\n       17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 22, 22,\n       22, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([2., 6., 7., 4., 3., 5., 0., 9., 1., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 2.,  6.,  7.,  4.,  3., ... ,  4.,  3.,  4.,  5.,  1.,  6.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  2,  2,  3,  3,  6, -1, -1, -1,  0,  4,  6,  8,  0,  0,  2,  6,\n        6,  9,  3,  5,  5,  0,  4,  4,  3,  3, -1,  2,  4,  5, -1,  5,  8,\n       -1, -1,  3,  4,  1,  4,  5,  8,  1,  1,  2,  5,  5,  6,  7, -1,  2,\n        2,  2,  3,  7,  9,  3,  5,  7,  8,  5,  6,  6,  6,  3,  0,  2, -1,\n        3,  4,  9, -1,  1,  8,  9, -1,  1,  1,  3,  0,  7, -1,  2,  4,  8,\n        8,  8,  0,  1,  2,  9, -1,  0,  6, -1, -1,  3,  4,  4,  4])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 69, 35, 52, 86,  9, 27, 46,  0, 42, 32, 38, 19, 90,  2, 44,\n       78, 63,  3, 36, 97, 80,  4, 48,  5, 94, 83,  6, 79, 77,  7, 15, 50,\n        8, 64, 72, 10, 88, 34, 11, 82, 12, 73, 20, 31, 87, 68, 24, 65, 13,\n       14, 60, 41, 67, 92, 59, 16, 22, 98, 75, 17, 30, 37, 21, 23, 57, 45,\n       51, 25, 58, 26, 93, 54, 89, 28, 91, 99, 70, 39, 29, 66, 33, 53, 40,\n       74, 76, 43, 49, 56, 61, 47, 62, 81, 84, 85, 96, 55, 71, 95])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 13, 19, 22, 25, 27, 31, 34, 36, 38, 42, 49, 51, 56, 60, 64, 65,\n       67, 71, 75, 79, 81, 83, 87, 91, 94])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,\n       1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 5, 4, 2, 2, 1, 4, 3, 1, 2, 4, 5, 2, 4, 4, 2, 1, 2, 4, 4, 3, 2,\n       2, 2, 4, 3, 3])`, type: `ndarray`\n\nres, expected value: `array([5, 4, 2, 2, 1, 4, 3, 1, 2, 4, 5, 2, 4, 4, 2, 1, 2, 4, 4, 3, 2, 2,\n       2, 4, 3, 3])`, type: `ndarray`\n\nri, expected value: `Index(['n', 'g', 'v', 'd', 'q', 'u', 'h', 'k', 'z', 'a', 'm', 't', 'r', 'b',\n       'e', 'w', 's', 'f', 'c', 'o', 'y', 'i', 'j', 'p', 'x', 'l'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nn    5\ng    4\nv    2\nd    2\nq    1\nu    4\nh    3\nk    1\nz    2\na    4\nm    5\nt    2\nr    4\nb    4\ne    2\nw    1\ns    2\nf    4\nc    4\no    3\ny    2\ni    2\nj    2\np    4\nx    3\nl    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 6\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     2.0\n1     6.0\n2     7.0\n3     4.0\n4     3.0\n     ... \n95    3.0\n96    4.0\n97    5.0\n98    1.0\n99    6.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  6,\n        7,  7,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 16, 17, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51,\n       52, 53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80])`, type: `ndarray`\n\n_, expected value: `array([2., 6., 7., 4., 3., 5., 0., 9., 1., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 2.,  6.,  7.,  4.,  3., ... ,  4.,  3.,  4.,  5.,  1.,  6.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  2,  2,  3,  3,  3,  5,  6,  8,  0,  2,  6,  4,  3,  2, -1, -1,\n       -1, -1,  4,  5,  1,  2,  2,  5,  5,  5,  6,  0,  0,  2,  5,  3,  7,\n        0,  7,  4, -1, -1,  7,  6,  5,  6,  2,  4,  5,  6,  8,  0,  3, -1,\n        4,  0,  6, -1, -1,  4,  1,  8,  3,  4,  8,  9,  4,  2,  2,  9,  3,\n        2,  9,  0,  6,  9, -1, -1, -1,  7,  6,  1,  3,  4,  3,  1,  8,  8,\n        4,  0,  1,  8, -1, -1, -1,  1,  9,  1,  3,  4,  3,  5,  8])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 69,  3, 35, 52, 77, 86, 40,  0,  2, 78,  4,  5,  6,  7,  8,\n        9, 27, 10, 11, 12, 13, 14, 15, 16, 75, 17, 19, 90, 20, 87, 21, 22,\n       23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 46,\n       42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 89, 55, 56, 57, 58, 59,\n       60, 61, 62, 81, 63, 64, 65, 66, 67, 68, 99, 70, 71, 72, 73, 74, 76,\n       79, 80, 88, 82, 83, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28,\n       30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n       48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66,\n       67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85,\n       86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('n', '2015-08-26') ... ('b', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(81,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nn    2015-08-26    1\ng    2015-08-30    2\nd    2015-08-26    1\nq    2015-08-23    1\nu    2015-08-29    1\n                  ..\nq    2015-08-29    1\nl    2015-08-26    1\n     2015-08-24    1\nv    2015-08-29    1\nb    2015-09-01    1\nName: julie, Length: 81, dtype: int64`, type: `Series`\n\n### Expected case 7\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      9\n1      3\n2      2\n3      5\n4      4\n      ..\n995    1\n996    9\n997    8\n998    1\n999    0\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([9, 3, 2, 5, 4, 0, 6, 7, 8, 1])`, type: `ndarray`\n\nval, expected value: `array([9, 3, 2, 5, 4, 0, 3, 6, 5, ... ,\n       4, 3, 9, 7, 3, 1, 9, 8, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 1, 1, 1, 1, 1, 3, 3, ... ,\n       8, 8, 8, 8, 8, 8, 8, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0, 496,  39, 292, 391, ... , 357, 393, 908, 116, 824, 930])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  39,  85, 119, 163, 204, 243, 278, 327, 365, 404, 442, 481,\n       529, 562, 592, 626, 658, 697, 739, 762, 794, 838, 883, 925, 960])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 0, 0, 0, 0, 1, 0, ... ,\n       1, 0, 0, 0, 0, 0, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 9, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10,  9, 10,  9,\n        9, 10,  9, 10, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nres, expected value: `array([ 9, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10,  9, 10,  9,\n        9, 10,  9, 10, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nri, expected value: `Index(['l', 'a', 'c', 'z', 'y', 's', 'p', 'k', 'g', 'e', 'x', 'i', 'j', 'd',\n       'b', 'v', 'r', 'h', 't', 'q', 'w', 'm', 'u', 'n', 'o', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nl     9\na    10\nc    10\nz    10\ny    10\ns    10\np    10\nk    10\ng     9\ne    10\nx    10\ni    10\nj    10\nd    10\nb     9\nv    10\nr     9\nh     9\nt    10\nq     9\nw    10\nm    10\nu    10\nn    10\no     9\nf    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 8\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      9\n1      3\n2      2\n3      5\n4      4\n      ..\n995    1\n996    9\n997    8\n998    1\n999    0\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 246, 247, 248, 249, 250, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([9, 3, 2, 5, 4, 0, 6, 7, 8, 1])`, type: `ndarray`\n\nval, expected value: `array([9, 3, 2, 5, 4, 0, 3, 6, 5, ... ,\n       4, 3, 9, 7, 3, 1, 9, 8, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([0, 1, 6, 6, 9, 9, 0, 1, 1, ... ,\n       1, 3, 9, 5, 6, 0, 7, 6, 6, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0,  39, 411, 762, 576, ... , 895, 933, 939, 959, 974, 998])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   6,  11,  16,  21, ... ,\n       995, 996, 997, 998, 999])`, shape: `(252,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 0, 1, 0, 1, 1, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([4, 4, 4, 5, 3, 6, 4, 3, 6, ... ,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(252,)`, type: `ndarray`\n\nres, expected value: `array([4, 4, 4, 5, 3, 6, 4, 3, 6, ... ,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(252,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('l', '2015-08-31') ... ('n', '2015-08-27')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nl    2015-08-31    4\na    2015-08-28    4\nc    2015-08-23    4\nz    2015-08-29    5\ny    2015-08-23    3\n                  ..\nc    2015-08-31    1\nb    2015-08-30    1\nt    2015-08-31    1\nf    2015-08-24    1\nn    2015-08-27    1\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n### Expected case 9\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      9.0\n1      3.0\n2      2.0\n3      5.0\n4      4.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    1.0\n999    0.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([9., 3., 2., 5., 4., 0., 7., 8., 1., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 9.,  3.,  2.,  5.,  4., ... ,  3., nan, nan, nan,  1.,  0.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6,  6,  8,  8,  9,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 363, 911, 106, 507, 512, 815])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  95, 127, 170, 210, 247, 277, 324, 359, 393, 427, 470, 508,\n       555, 583, 613, 643, 682, 719, 742, 773, 815, 859, 897, 931, 970])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 0, 1, 0, 1, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11, 10, 11, 11, 11, 11, 10, 11, 10, 11, 11, 10, 11, 11,  9, 11, 10,\n       10, 10, 10, 11, 11, 11, 10, 10, 11, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 11, 11, 11, 11, 10, 11, 10, 11, 11, 10, 11, 11,  9, 11, 10, 10,\n       10, 10, 11, 11, 11, 10, 10, 11, 10])`, type: `ndarray`\n\nri, expected value: `Index(['l', 'c', 'z', 'y', 's', 'p', 'k', 'g', 'e', 'x', 'a', 'i', 'j', 'b',\n       'v', 'r', 'h', 't', 'q', 'w', 'm', 'u', 'n', 'o', 'f', 'd'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nl    10\nc    11\nz    11\ny    11\ns    11\np    10\nk    11\ng    10\ne    11\nx    11\na    10\ni    11\nj    11\nb     9\nv    11\nr    10\nh    10\nt    10\nq    10\nw    11\nm    11\nu    11\nn    10\no    10\nf    11\nd    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 10\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      9.0\n1      3.0\n2      2.0\n3      5.0\n4      4.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    1.0\n999    0.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 243, 244, 245, 246, 247, 248])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([9., 3., 2., 5., 4., 0., 7., 8., 1., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 9.,  3.,  2.,  5.,  4., ... ,  3., nan, nan, nan,  1.,  0.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7, -1,  9,  0, -1, -1,  9,  8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 895, 933, 939, 959, 974, 998])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  90,  94,  96, 104, ... , 995, 996, 997,\n       998, 999])`, shape: `(249,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... ,  True,  True, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11,  4,  3,  2,  6,  5,  2, ... ,  2,  1,  1,  1,  1,  1,  1,  1])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([4, 3, 2, 6, 5, 2, 5, 3, 3, ... , 2,\n       1, 1, 1, 1, 1, 1, 1])`, shape: `(249,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('l', '2015-08-31') ... ('n', '2015-08-27')],\n           names=['jim', 'joe'], length=249)`, shape: `(249,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nl    2015-08-31    4\nc    2015-08-23    3\ny    2015-08-23    2\ns    2015-08-27    6\ny    2015-08-28    5\n                  ..\nc    2015-08-31    1\nb    2015-08-30    1\nt    2015-08-31    1\nf    2015-08-24    1\nn    2015-08-27    1\nName: julie, Length: 249, dtype: int64`, type: `Series`\n\n### Expected case 11\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      9.0\n1      3.0\n2      2.0\n3      5.0\n4      4.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    1.0\n999    0.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([9., 3., 2., 5., 4., 0., 7., 8., 1., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 9.,  3.,  2.,  5.,  4., ... ,  3., nan, nan, nan,  1.,  0.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6,  6,  8,  8,  9,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 363, 911, 106, 507, 512, 815])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  95, 127, 170, 210, 247, 277, 324, 359, 393, 427, 470, 508,\n       555, 583, 613, 643, 682, 719, 742, 773, 815, 859, 897, 931, 970])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 0, 1, 0, 1, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11, 10, 11, 11, 11, 11, 10, 11, 10, 11, 11, 10, 11, 11,  9, 11, 10,\n       10, 10, 10, 11, 11, 11, 10, 10, 11, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 11, 11, 11, 11, 10, 11, 10, 11, 11, 10, 11, 11,  9, 11, 10, 10,\n       10, 10, 11, 11, 11, 10, 10, 11, 10])`, type: `ndarray`\n\nri, expected value: `Index(['l', 'c', 'z', 'y', 's', 'p', 'k', 'g', 'e', 'x', 'a', 'i', 'j', 'b',\n       'v', 'r', 'h', 't', 'q', 'w', 'm', 'u', 'n', 'o', 'f', 'd'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nl    10\nc    11\nz    11\ny    11\ns    11\np    10\nk    11\ng    10\ne    11\nx    11\na    10\ni    11\nj    11\nb     9\nv    11\nr    10\nh    10\nt    10\nq    10\nw    11\nm    11\nu    11\nn    10\no    10\nf    11\nd    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 12\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      9.0\n1      3.0\n2      2.0\n3      5.0\n4      4.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    1.0\n999    0.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 243, 244, 245, 246, 247, 248])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([9., 3., 2., 5., 4., 0., 7., 8., 1., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 9.,  3.,  2.,  5.,  4., ... ,  3., nan, nan, nan,  1.,  0.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7, -1,  9,  0, -1, -1,  9,  8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 895, 933, 939, 959, 974, 998])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  90,  94,  96, 104, ... , 995, 996, 997,\n       998, 999])`, shape: `(249,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... ,  True,  True, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11,  4,  3,  2,  6,  5,  2, ... ,  2,  1,  1,  1,  1,  1,  1,  1])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([4, 3, 2, 6, 5, 2, 5, 3, 3, ... , 2,\n       1, 1, 1, 1, 1, 1, 1])`, shape: `(249,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('l', '2015-08-31') ... ('n', '2015-08-27')],\n           names=['jim', 'joe'], length=249)`, shape: `(249,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nl    2015-08-31    4\nc    2015-08-23    3\ny    2015-08-23    2\ns    2015-08-27    6\ny    2015-08-28    5\n                  ..\nc    2015-08-31    1\nb    2015-08-30    1\nt    2015-08-31    1\nf    2015-08-24    1\nn    2015-08-27    1\nName: julie, Length: 249, dtype: int64`, type: `Series`\n\n### Expected case 13\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       4\n1       9\n2       1\n3       8\n4       9\n       ..\n9995    3\n9996    5\n9997    9\n9998    0\n9999    3\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([4, 9, 1, 8, 7, 6, 3, 5, 0, 2])`, type: `ndarray`\n\nval, expected value: `array([4, 9, 1, ..., 9, 0, 3])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([   0,  318,  449, ..., 9794, 9895, 9974])`, type: `ndarray`\n\nidx, expected value: `array([   0,  410,  795, 1176, 1574, 1950, 2349, 2738, 3105, 3499, 3890,\n       4276, 4659, 5063, 5446, 5811, 6158, 6513, 6903, 7313, 7711, 8111,\n       8487, 8860, 9238, 9630])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'o', 'p', 'i', 'k', 'q', 'n', 'e', 'v', 'm', 'j', 'c', 'h', 'r',\n       'u', 'g', 'b', 't', 'z', 'a', 's', 'y', 'f', 'l', 'd', 'w'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    10\no    10\np    10\ni    10\nk    10\nq    10\nn    10\ne    10\nv    10\nm    10\nj    10\nc    10\nh    10\nr    10\nu    10\ng    10\nb    10\nt    10\nz    10\na    10\ns    10\ny    10\nf    10\nl    10\nd    10\nw    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 14\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       4\n1       9\n2       1\n3       8\n4       9\n       ..\n9995    3\n9996    5\n9997    9\n9998    0\n9999    3\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([4, 9, 1, 8, 7, 6, 3, 5, 0, 2])`, type: `ndarray`\n\nval, expected value: `array([4, 9, 1, ..., 9, 0, 3])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([   0, 3837, 4560, ..., 2679, 5462, 8074])`, type: `ndarray`\n\nidx, expected value: `array([   0,   43,   82,  128,  177, ... , 9816, 9856, 9902, 9930, 9971])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10,  9, 10, ... , 10,\n       10, 10,  9, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10,  9, 10, ... , 10,\n       10, 10,  9, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-23') ... ('y', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-23    10\no    2015-08-28    10\np    2015-08-30    10\ni    2015-08-30    10\nk    2015-08-29    10\n                   ..\nr    2015-08-30    10\nx    2015-08-28    10\nl    2015-08-24     9\nd    2015-08-30    10\ny    2015-08-29    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 15\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       4.0\n1       9.0\n2       1.0\n3       8.0\n4       9.0\n       ... \n9995    3.0\n9996    5.0\n9997    9.0\n9998    0.0\n9999    3.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([4., 9., 1., 8., 7., 5., 3., 0., 6., 2.])`, type: `ndarray`\n\nval, expected value: `array([4., 9., 1., ..., 9., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9125, 9263, 9974])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  980, 1341, 1718, 2067, 2436, 2807, 3151, 3524, 3891, 4253,\n       4614, 4979, 5362, 5723, 6057, 6389, 6719, 7089, 7464, 7839, 8218,\n       8565, 8924, 9283, 9651])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'p', 'i', 'k', 'q', 'n', 'e', 'o', 'v', 'm', 'j', 'c', 'h', 'r',\n       'u', 'g', 'b', 't', 'z', 'a', 's', 'f', 'l', 'y', 'd', 'w'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    11\np    11\ni    11\nk    11\nq    11\nn    11\ne    11\no    11\nv    11\nm    11\nj    11\nc    11\nh    11\nr    11\nu    11\ng    11\nb    11\nt    11\nz    11\na    11\ns    11\nf    11\nl    11\ny    11\nd    11\nw    11\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 16\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       4.0\n1       9.0\n2       1.0\n3       8.0\n4       9.0\n       ... \n9995    3.0\n9996    5.0\n9997    9.0\n9998    0.0\n9999    3.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([4., 9., 1., 8., 7., 5., 3., 0., 6., 2.])`, type: `ndarray`\n\nval, expected value: `array([4., 9., 1., ..., 9., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  8,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 5572, 2679, 8074])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  886,  931,  961,  997, ... , 9832, 9857, 9894, 9933, 9973])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11,  9, 10, 10, 10, 10, 10, ... ,\n       11, 10, 11, 11, 11,  9])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 9, 10, 10, 10, 10, 10, 11, ... , 11,\n       10, 11, 11, 11,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-23') ... ('y', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-23     9\np    2015-08-30    10\nk    2015-08-29    10\nq    2015-09-01    10\nn    2015-08-30    10\n                   ..\nl    2015-08-24    10\nm    2015-09-01    11\nd    2015-08-30    11\nm    2015-08-30    11\ny    2015-08-29     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 17\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       4.0\n1       9.0\n2       1.0\n3       8.0\n4       9.0\n       ... \n9995    3.0\n9996    5.0\n9997    9.0\n9998    0.0\n9999    3.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([4., 9., 1., 8., 7., 5., 3., 0., 6., 2.])`, type: `ndarray`\n\nval, expected value: `array([4., 9., 1., ..., 9., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9125, 9263, 9974])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  980, 1341, 1718, 2067, 2436, 2807, 3151, 3524, 3891, 4253,\n       4614, 4979, 5362, 5723, 6057, 6389, 6719, 7089, 7464, 7839, 8218,\n       8565, 8924, 9283, 9651])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'p', 'i', 'k', 'q', 'n', 'e', 'o', 'v', 'm', 'j', 'c', 'h', 'r',\n       'u', 'g', 'b', 't', 'z', 'a', 's', 'f', 'l', 'y', 'd', 'w'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    11\np    11\ni    11\nk    11\nq    11\nn    11\ne    11\no    11\nv    11\nm    11\nj    11\nc    11\nh    11\nr    11\nu    11\ng    11\nb    11\nt    11\nz    11\na    11\ns    11\nf    11\nl    11\ny    11\nd    11\nw    11\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 18\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       4.0\n1       9.0\n2       1.0\n3       8.0\n4       9.0\n       ... \n9995    3.0\n9996    5.0\n9997    9.0\n9998    0.0\n9999    3.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([4., 9., 1., 8., 7., 5., 3., 0., 6., 2.])`, type: `ndarray`\n\nval, expected value: `array([4., 9., 1., ..., 9., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  8,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 5572, 2679, 8074])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  886,  931,  961,  997, ... , 9832, 9857, 9894, 9933, 9973])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11,  9, 10, 10, 10, 10, 10, ... ,\n       11, 10, 11, 11, 11,  9])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 9, 10, 10, 10, 10, 10, 11, ... , 11,\n       10, 11, 11, 11,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-23') ... ('y', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-23     9\np    2015-08-30    10\nk    2015-08-29    10\nq    2015-09-01    10\nn    2015-08-30    10\n                   ..\nl    2015-08-24    10\nm    2015-09-01    11\nd    2015-08-30    11\nm    2015-08-30    11\ny    2015-08-29     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 19\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        3\n1        5\n2        4\n3        3\n4        1\n        ..\n99995    1\n99996    2\n99997    0\n99998    9\n99999    5\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([3, 5, 4, 1, 0, 2, 8, 9, 7, 6])`, type: `ndarray`\n\nval, expected value: `array([3, 5, 4, ..., 0, 9, 5])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([    0,   100,   588, ..., 99458, 99592, 99608])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3740,  7675, 11503, 15309, 19139, 22879, 26752, 30528,\n       34487, 38415, 42288, 46034, 49883, 53751, 57568, 61235, 65081,\n       69002, 72871, 76706, 80645, 84457, 88291, 92129, 96095])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'w', 'x', 'f', 'u', 'e', 'i', 'c', 'n', 'v', 'q', 'd', 'g', 'r',\n       'k', 'y', 'a', 'p', 's', 'z', 'h', 'b', 't', 'o', 'l', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    10\nw    10\nx    10\nf    10\nu    10\ne    10\ni    10\nc    10\nn    10\nv    10\nq    10\nd    10\ng    10\nr    10\nk    10\ny    10\na    10\np    10\ns    10\nz    10\nh    10\nb    10\nt    10\no    10\nl    10\nj    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 20\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        3\n1        5\n2        4\n3        3\n4        1\n        ..\n99995    1\n99996    2\n99997    0\n99998    9\n99999    5\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([3, 5, 4, 1, 0, 2, 8, 9, 7, 6])`, type: `ndarray`\n\nval, expected value: `array([3, 5, 4, ..., 0, 9, 5])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([    0,   931,  2803, ..., 89253, 90056, 90648])`, type: `ndarray`\n\nidx, expected value: `array([    0,   395,   797,  1155, ... , 98048, 98437, 98807, 99224, 99610])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('m', '2015-08-31') ... ('r', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nm    2015-08-31    10\nw    2015-08-27    10\nx    2015-08-24    10\nf    2015-08-25    10\nu    2015-08-23    10\n                   ..\nv    2015-08-28    10\no    2015-08-26    10\nb    2015-08-26    10\n     2015-08-25    10\nr    2015-08-30    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 21\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        3.0\n1        5.0\n2        4.0\n3        3.0\n4        1.0\n        ... \n99995    1.0\n99996    2.0\n99997    0.0\n99998    9.0\n99999    5.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([3., 5., 4., 1., 0., 8., 9., 7., 2., 6.])`, type: `ndarray`\n\nval, expected value: `array([3., 5., 4., ..., 0., 9., 5.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99458, 99592, 99608])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9457, 13078, 16654, 20265, 23779, 27408, 30964, 34695,\n       38375, 41999, 45534, 49170, 52792, 56396, 59820, 63430, 67126,\n       70834, 74454, 78179, 81772, 85372, 89017, 92620, 96335])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'x', 'f', 'u', 'e', 'i', 'c', 'n', 'v', 'q', 'd', 'g', 'r', 'k',\n       'y', 'a', 'p', 'w', 's', 'h', 'b', 't', 'z', 'o', 'l', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    11\nx    11\nf    11\nu    11\ne    11\ni    11\nc    11\nn    11\nv    11\nq    11\nd    11\ng    11\nr    11\nk    11\ny    11\na    11\np    11\nw    11\ns    11\nh    11\nb    11\nt    11\nz    11\no    11\nl    11\nj    11\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 22\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        3.0\n1        5.0\n2        4.0\n3        3.0\n4        1.0\n        ... \n99995    1.0\n99996    2.0\n99997    0.0\n99998    9.0\n99999    5.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([3., 5., 4., 1., 0., 8., 9., 7., 2., 6.])`, type: `ndarray`\n\nval, expected value: `array([3., 5., 4., ..., 0., 9., 5.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 89253, 90056, 90648])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8793,  9121,  9500, ... , 98211, 98567, 98905, 99287, 99645])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, ... ,\n       11, 11, 11, 11, 11, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, ... , 11,\n       11, 11, 11, 11, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('m', '2015-08-31') ... ('r', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nm    2015-08-31    11\nx    2015-08-24    11\nu    2015-08-23    11\nx    2015-09-01    11\ne    2015-08-29    11\n                   ..\nv    2015-08-28    11\no    2015-08-26    11\nb    2015-08-26    11\n     2015-08-25    11\nr    2015-08-30    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 23\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        3.0\n1        5.0\n2        4.0\n3        3.0\n4        1.0\n        ... \n99995    1.0\n99996    2.0\n99997    0.0\n99998    9.0\n99999    5.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([3., 5., 4., 1., 0., 8., 9., 7., 2., 6.])`, type: `ndarray`\n\nval, expected value: `array([3., 5., 4., ..., 0., 9., 5.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99458, 99592, 99608])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9457, 13078, 16654, 20265, 23779, 27408, 30964, 34695,\n       38375, 41999, 45534, 49170, 52792, 56396, 59820, 63430, 67126,\n       70834, 74454, 78179, 81772, 85372, 89017, 92620, 96335])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'x', 'f', 'u', 'e', 'i', 'c', 'n', 'v', 'q', 'd', 'g', 'r', 'k',\n       'y', 'a', 'p', 'w', 's', 'h', 'b', 't', 'z', 'o', 'l', 'j'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    11\nx    11\nf    11\nu    11\ne    11\ni    11\nc    11\nn    11\nv    11\nq    11\nd    11\ng    11\nr    11\nk    11\ny    11\na    11\np    11\nw    11\ns    11\nh    11\nb    11\nt    11\nz    11\no    11\nl    11\nj    11\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 24\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        3.0\n1        5.0\n2        4.0\n3        3.0\n4        1.0\n        ... \n99995    1.0\n99996    2.0\n99997    0.0\n99998    9.0\n99999    5.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([3., 5., 4., 1., 0., 8., 9., 7., 2., 6.])`, type: `ndarray`\n\nval, expected value: `array([3., 5., 4., ..., 0., 9., 5.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 89253, 90056, 90648])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8793,  9121,  9500, ... , 98211, 98567, 98905, 99287, 99645])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, ... ,\n       11, 11, 11, 11, 11, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, ... , 11,\n       11, 11, 11, 11, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('m', '2015-08-31') ... ('r', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nm    2015-08-31    11\nx    2015-08-24    11\nu    2015-08-23    11\nx    2015-09-01    11\ne    2015-08-29    11\n                   ..\nv    2015-08-28    11\no    2015-08-26    11\nb    2015-08-26    11\n     2015-08-25    11\nr    2015-08-30    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 25\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     52\n1     15\n2     13\n3     66\n4     39\n      ..\n95    33\n96    71\n97    95\n98     2\n99     5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,\n        3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9, 10, 10, 10, 11, 11,\n       11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,\n       16, 16, 16, 16, 16, 16, 16, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19,\n       20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([52, 15, 13, 66, 39, 25, 32, 17, 42, 23,  5, 96,  0, 84, 31, 63, 37,\n       49, 65, 77, 80, 74,  6, 27, 41, 35, 99, 19, 76, 92, 82, 26, 89, 88,\n       60,  7, 72, 50, 29, 28, 21, 58, 46, 75, 11, 22, 83, 98, 69, 85, 93,\n       55, 81, 78, 67, 59, 20, 87, 53, 70, 62, 33, 71, 95,  2])`, type: `ndarray`\n\nval, expected value: `array([52, 15, 13, 66, 39, 25, 32, 17, 42, 23,  5, 96,  0, 66, 84, 31, 63,\n       13, 37, 49, 66, 65, 77, 80, 74,  6, 27, 27, 41, 35, 99, 19, 76, 96,\n       92, 82, 26, 23, 96, 89, 88, 66, 80, 60,  7, 72, 50, 29, 92, 96, 28,\n       84, 31, 19, 21, 63, 77, 58, 23, 46, 75, 11, 22, 31, 83, 98, 69, 85,\n        6, 93, 55, 81, 21, 50, 15, 78, 74,  7, 85, 66, 67, 59, 20, 87, 53,\n       82, 21, 49,  6, 70, 66, 62, 29, 33, 55, 33, 71, 95,  2,  5])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  4, 22, 29, 40, 61,  1,  2, 26, 40, 41, 52,  2, 14, 23,  3,  3,\n       22, 33, 43, 48,  1,  5, 21, 56,  6, 13, 21, 30, 51,  7, 23, 32, 46,\n       58,  8, 10, 14,  3,  9,  9, 16, 24, 25, 37, 10, 11, 37, 39, 12, 27,\n       34, 51,  3, 22, 42, 57,  9, 13, 50, 14, 20, 59, 61, 15, 15, 19, 35,\n        3, 17, 28, 35, 44, 62, 63, 18, 20, 27, 30, 11, 11, 38, 47, 55, 64,\n       31, 45, 36, 49, 54, 38, 60,  3, 29, 40, 11, 17, 19, 49, 53])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  4, 25, 34, 54, 93,  1, 17, 30, 72, 57, 71,  2, 52, 27,  3, 90,\n       88, 40, 60, 66, 74,  5, 76, 82,  6, 51, 24, 35, 70,  7, 26, 39, 64,\n       84,  8, 99, 63, 41,  9, 37, 18, 28, 29, 73, 10, 11, 46, 50, 12, 53,\n       43, 94, 13, 68, 59, 83, 58, 14, 69, 15, 23, 89, 95, 16, 55, 22, 44,\n       20, 19, 32, 77, 61, 96, 97, 21, 42, 31, 85, 33, 38, 92, 65, 81, 98,\n       36, 62, 45, 67, 80, 47, 91, 79, 48, 86, 49, 87, 56, 78, 75])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  6, 12, 15, 21, 25, 30, 35, 38, 45, 46, 49, 53, 57, 60, 64, 68,\n       75, 76, 79, 85, 87, 90, 92, 95, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 6, 3, 5, 4, 5, 5, 3, 6, 1, 3, 4, 4, 3, 4, 3, 7, 1, 3, 5, 2, 3,\n       2, 3, 1, 4])`, type: `ndarray`\n\nres, expected value: `array([6, 6, 3, 5, 4, 5, 5, 3, 6, 1, 3, 4, 4, 3, 4, 3, 7, 1, 3, 5, 2, 3,\n       2, 3, 1, 4])`, type: `ndarray`\n\nri, expected value: `Index(['k', 'z', 's', 'a', 'v', 'w', 'l', 'x', 'q', 'n', 'p', 'm', 'b', 'f',\n       'u', 'c', 'o', 'y', 'd', 'i', 't', 'h', 'g', 'j', 'e', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    6\nz    6\ns    3\na    5\nv    4\nw    5\nl    5\nx    3\nq    6\nn    1\np    3\nm    4\nb    4\nf    3\nu    4\nc    3\no    7\ny    1\nd    3\ni    5\nt    2\nh    3\ng    2\nj    3\ne    1\nr    4\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 26\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     52\n1     15\n2     13\n3     66\n4     39\n      ..\n95    33\n96    71\n97    95\n98     2\n99     5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  9,\n        9, 10, 11, 11, 11, 12, 13, 14, 15, 15, 16, 16, 17, 17, 18, 19, 20,\n       21, 22, 23, 23, 24, 25, 26, 27, 28, 28, 28, 29, 30, 31, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 78, 79])`, type: `ndarray`\n\n_, expected value: `array([52, 15, 13, 66, 39, 25, 32, 17, 42, 23,  5, 96,  0, 84, 31, 63, 37,\n       49, 65, 77, 80, 74,  6, 27, 41, 35, 99, 19, 76, 92, 82, 26, 89, 88,\n       60,  7, 72, 50, 29, 28, 21, 58, 46, 75, 11, 22, 83, 98, 69, 85, 93,\n       55, 81, 78, 67, 59, 20, 87, 53, 70, 62, 33, 71, 95,  2])`, type: `ndarray`\n\nval, expected value: `array([52, 15, 13, 66, 39, 25, 32, 17, 42, 23,  5, 96,  0, 66, 84, 31, 63,\n       13, 37, 49, 66, 65, 77, 80, 74,  6, 27, 27, 41, 35, 99, 19, 76, 96,\n       92, 82, 26, 23, 96, 89, 88, 66, 80, 60,  7, 72, 50, 29, 92, 96, 28,\n       84, 31, 19, 21, 63, 77, 58, 23, 46, 75, 11, 22, 31, 83, 98, 69, 85,\n        6, 93, 55, 81, 21, 50, 15, 78, 74,  7, 85, 66, 67, 59, 20, 87, 53,\n       82, 21, 49,  6, 70, 66, 62, 29, 33, 55, 33, 71, 95,  2,  5])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  1, 41,  2, 23,  3, 48,  4, 22,  5, 56,  6, 21,  7, 46,  8,  9,\n       25, 10, 11, 37, 39, 12,  3, 13, 14, 61, 15, 19,  2, 40, 16, 17,  3,\n       18, 20, 23, 58, 24, 26, 27, 28, 11, 38, 64, 29, 30, 31, 45,  9, 11,\n       32, 33,  3, 20, 34, 35, 36, 38, 29, 11, 13, 14, 27, 40, 15, 19,  9,\n       22, 42, 43, 44, 14, 47, 49, 50, 51, 52, 37,  1, 53, 21, 35, 49,  3,\n       40, 54, 55, 57, 30, 17, 22, 59,  3, 60, 61, 51, 62, 63, 10])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  1, 57,  2, 27,  3, 66,  4, 25,  5, 82,  6, 24,  7, 64,  8,  9,\n       29, 10, 11, 46, 50, 12, 13, 14, 15, 95, 16, 22, 17, 72, 18, 19, 20,\n       21, 23, 26, 84, 28, 30, 31, 32, 33, 92, 98, 34, 35, 36, 62, 37, 38,\n       39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58,\n       68, 59, 60, 61, 63, 65, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79,\n       86, 80, 81, 83, 85, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  3,  5,  7,  9, 11, 13, 15, 16, 18, 19, 22, 23, 24, 25, 27,\n       29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 45, 46, 47, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86,\n       87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('k', '2015-08-27') ... ('x', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(80,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nk    2015-08-27    1\nz    2015-08-26    2\ns    2015-08-26    2\na    2015-08-27    2\nk    2015-08-30    2\n                  ..\ng    2015-08-28    1\nk    2015-08-28    1\nm    2015-08-31    1\no    2015-08-25    2\nx    2015-08-31    1\nName: julie, Length: 80, dtype: int64`, type: `Series`\n\n### Expected case 27\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     52.0\n1     15.0\n2     13.0\n3     66.0\n4     39.0\n      ... \n95    33.0\n96    71.0\n97    95.0\n98     2.0\n99     5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,\n        2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,\n        6,  6,  7,  7,  7,  7,  7,  7,  8,  9,  9,  9, 10, 10, 10, 10, 11,\n       11, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,\n       15, 16, 16, 16, 16, 16, 16, 16, 17, 18, 18, 18, 19, 19, 19, 19, 19,\n       19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([52., 15., 13., 66., 39., 25., 32.,  5., 96.,  0., 84., 31., 63.,\n       37., 49., 65., 77., 80., 74.,  6., 35., 99., 19., 76., 92., 82.,\n       26., 23., 89., 88., 60.,  7., 28., 21., 58., 46., 75., 11., 22.,\n       85., 93., 55., 81., 50., 78., 67., 59., 20., 70., 62., 29., 33.,\n       71., 95.,  2.])`, type: `ndarray`\n\nval, expected value: `array([52., 15., 13., 66., 39., ... , 55., 33., 71., 95.,  2.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 11, 13, 25, 33, 40,  0,  4, 19, 24, 33, 51, -1,  2, -1,  3,  3,\n       19, 29, 36,  1,  5, 18, 47,  6, 10, 18, 41, -1, -1, -1, -1, 28, -1,\n        7, 11, -1, -1,  3, 20, 27, 43,  7, -1,  8, 32,  9, 22, 30, 41, -1,\n        3, 19, 35, 10, 27, 11, 17, 48, 51, 12, 12, 16, 31,  2, 21, 33, 34,\n       42,  3, 14, 23, 31, 37, 52, 53, 15, -1, 17, 22, -1,  8,  8, 46, 50,\n       54, 26, 38, -1, 39, 45, -1, 49,  3, 24,  8, 14, 16, 39, 44])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 52, 18, 35, 86, 69,  0,  4, 25, 34, 54, 93, 27,  2, 66,  3, 90,\n       88, 40, 60, 74,  5, 76, 82,  6, 51, 24, 70,  7, 26, 64, 84, 39,  8,\n       99, 63,  9, 28, 41, 29, 37, 73, 10, 46, 11, 50, 12, 53, 43, 94, 83,\n       13, 68, 59, 14, 58, 15, 23, 89, 95, 16, 55, 22, 44, 17, 30, 72, 57,\n       71, 20, 19, 32, 77, 61, 96, 97, 21, 85, 42, 31, 65, 33, 38, 81, 92,\n       98, 36, 62, 45, 67, 80, 47, 91, 79, 48, 49, 87, 56, 78, 75])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 12, 14, 20, 24, 28, 33, 36, 42, 43, 46, 50, 54, 56, 60, 64, 69,\n       76, 77, 80, 86, 88, 91, 93, 95, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 6, 2, 5, 4, 4, 2, 3, 5, 1, 3, 4, 4, 2, 4, 3, 5, 7, 1, 3, 5, 2,\n       3, 2, 2, 1, 4])`, type: `ndarray`\n\nres, expected value: `array([6, 2, 5, 4, 4, 2, 3, 5, 1, 3, 4, 4, 2, 4, 3, 5, 7, 1, 3, 5, 2, 3,\n       2, 2, 1, 4])`, type: `ndarray`\n\nri, expected value: `Index(['k', 's', 'a', 'v', 'w', 'l', 'x', 'q', 'n', 'p', 'm', 'b', 'f', 'u',\n       'c', 'z', 'o', 'y', 'd', 'i', 't', 'h', 'g', 'j', 'e', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    6\ns    2\na    5\nv    4\nw    4\nl    2\nx    3\nq    5\nn    1\np    3\nm    4\nb    4\nf    2\nu    4\nc    3\nz    5\no    7\ny    1\nd    3\ni    5\nt    2\nh    3\ng    2\nj    2\ne    1\nr    4\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 28\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     52.0\n1     15.0\n2     13.0\n3     66.0\n4     39.0\n      ... \n95    33.0\n96    71.0\n97    95.0\n98     2.0\n99     5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  2,  3,  3,  4,\n        4,  5,  5,  6,  7,  7,  8,  9,  9,  9, 10, 11, 12, 13, 13, 14, 14,\n       15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 25, 25, 26, 27,\n       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n       44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 72, 73])`, type: `ndarray`\n\n_, expected value: `array([52., 15., 13., 66., 39., 25., 32.,  5., 96.,  0., 84., 31., 63.,\n       37., 49., 65., 77., 80., 74.,  6., 35., 99., 19., 76., 92., 82.,\n       26., 23., 89., 88., 60.,  7., 28., 21., 58., 46., 75., 11., 22.,\n       85., 93., 55., 81., 50., 78., 67., 59., 20., 70., 62., 29., 33.,\n       71., 95.,  2.])`, type: `ndarray`\n\nval, expected value: `array([52., 15., 13., 66., 39., ... , 55., 33., 71., 95.,  2.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 11, 13, 25, 29, 31, 33, 40,  0, -1,  2,  4, 19,  5, 47,  6,\n       18, -1, -1, -1, -1, 20,  7, -1,  8, 32,  9,  3, 10, 11, 51, 12, 16,\n        2, 33, 14,  3, 15, 17, -1, -1, -1, 21, 22, 23,  8, 50, 54, 24, 26,\n       38, 27,  8, 28,  3, 17, 30, 31, -1, -1, 24,  8, 10, 22, 33, 12, 16,\n       34, 27, 19, 35, 36, 37, 11, -1, -1, 39, 41, 42, 43,  1, 44, 18, 39,\n        3, 45, 46, -1, -1, 14, 19, 48,  3, 49, 51, 41, 52, 53,  7])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 52, 18, 35, 40, 77, 86, 69,  0, 27,  2,  4, 25,  5, 82,  6,\n       24,  7, 64,  8,  9, 29, 10, 46, 11, 50, 12, 13, 14, 15, 95, 16, 22,\n       17, 72, 19, 20, 21, 23, 26, 84, 28, 30, 31, 32, 33, 92, 98, 34, 36,\n       62, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56,\n       57, 58, 68, 59, 60, 61, 63, 65, 66, 67, 70, 71, 73, 74, 75, 76, 78,\n       79, 80, 81, 83, 85, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 14, 16, 18, 20, 21, 23, 24, 27, 28, 29, 30, 32, 34, 36,\n       37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 55, 56, 57,\n       58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75,\n       76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\n       93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 1, 2, 2, 2, 2, 1, 1, 2, 1, 3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 2, 2, 2, 1, 1, 2, 1, 3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('k', '2015-08-27') ... ('x', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(74,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nk    2015-08-27    1\ns    2015-08-26    2\nk    2015-08-30    2\nv    2015-08-31    2\nw    2015-08-25    2\n                  ..\ng    2015-08-28    1\nk    2015-08-28    1\nm    2015-08-31    1\no    2015-08-25    2\nx    2015-08-31    1\nName: julie, Length: 74, dtype: int64`, type: `Series`\n\n### Expected case 29\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     52.0\n1     15.0\n2     13.0\n3     66.0\n4     39.0\n      ... \n95    33.0\n96    71.0\n97    95.0\n98     2.0\n99     5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,\n        2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,\n        6,  6,  7,  7,  7,  7,  7,  7,  8,  9,  9,  9, 10, 10, 10, 10, 11,\n       11, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,\n       15, 16, 16, 16, 16, 16, 16, 16, 17, 18, 18, 18, 19, 19, 19, 19, 19,\n       19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([52., 15., 13., 66., 39., 25., 32.,  5., 96.,  0., 84., 31., 63.,\n       37., 49., 65., 77., 80., 74.,  6., 35., 99., 19., 76., 92., 82.,\n       26., 23., 89., 88., 60.,  7., 28., 21., 58., 46., 75., 11., 22.,\n       85., 93., 55., 81., 50., 78., 67., 59., 20., 70., 62., 29., 33.,\n       71., 95.,  2.])`, type: `ndarray`\n\nval, expected value: `array([52., 15., 13., 66., 39., ... , 55., 33., 71., 95.,  2.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 11, 13, 25, 33, 40,  0,  4, 19, 24, 33, 51, -1,  2, -1,  3,  3,\n       19, 29, 36,  1,  5, 18, 47,  6, 10, 18, 41, -1, -1, -1, -1, 28, -1,\n        7, 11, -1, -1,  3, 20, 27, 43,  7, -1,  8, 32,  9, 22, 30, 41, -1,\n        3, 19, 35, 10, 27, 11, 17, 48, 51, 12, 12, 16, 31,  2, 21, 33, 34,\n       42,  3, 14, 23, 31, 37, 52, 53, 15, -1, 17, 22, -1,  8,  8, 46, 50,\n       54, 26, 38, -1, 39, 45, -1, 49,  3, 24,  8, 14, 16, 39, 44])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 52, 18, 35, 86, 69,  0,  4, 25, 34, 54, 93, 27,  2, 66,  3, 90,\n       88, 40, 60, 74,  5, 76, 82,  6, 51, 24, 70,  7, 26, 64, 84, 39,  8,\n       99, 63,  9, 28, 41, 29, 37, 73, 10, 46, 11, 50, 12, 53, 43, 94, 83,\n       13, 68, 59, 14, 58, 15, 23, 89, 95, 16, 55, 22, 44, 17, 30, 72, 57,\n       71, 20, 19, 32, 77, 61, 96, 97, 21, 85, 42, 31, 65, 33, 38, 81, 92,\n       98, 36, 62, 45, 67, 80, 47, 91, 79, 48, 49, 87, 56, 78, 75])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 12, 14, 20, 24, 28, 33, 36, 42, 43, 46, 50, 54, 56, 60, 64, 69,\n       76, 77, 80, 86, 88, 91, 93, 95, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 6, 2, 5, 4, 4, 2, 3, 5, 1, 3, 4, 4, 2, 4, 3, 5, 7, 1, 3, 5, 2,\n       3, 2, 2, 1, 4])`, type: `ndarray`\n\nres, expected value: `array([6, 2, 5, 4, 4, 2, 3, 5, 1, 3, 4, 4, 2, 4, 3, 5, 7, 1, 3, 5, 2, 3,\n       2, 2, 1, 4])`, type: `ndarray`\n\nri, expected value: `Index(['k', 's', 'a', 'v', 'w', 'l', 'x', 'q', 'n', 'p', 'm', 'b', 'f', 'u',\n       'c', 'z', 'o', 'y', 'd', 'i', 't', 'h', 'g', 'j', 'e', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    6\ns    2\na    5\nv    4\nw    4\nl    2\nx    3\nq    5\nn    1\np    3\nm    4\nb    4\nf    2\nu    4\nc    3\nz    5\no    7\ny    1\nd    3\ni    5\nt    2\nh    3\ng    2\nj    2\ne    1\nr    4\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 30\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     52.0\n1     15.0\n2     13.0\n3     66.0\n4     39.0\n      ... \n95    33.0\n96    71.0\n97    95.0\n98     2.0\n99     5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  2,  3,  3,  4,\n        4,  5,  5,  6,  7,  7,  8,  9,  9,  9, 10, 11, 12, 13, 13, 14, 14,\n       15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 25, 25, 26, 27,\n       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n       44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 72, 73])`, type: `ndarray`\n\n_, expected value: `array([52., 15., 13., 66., 39., 25., 32.,  5., 96.,  0., 84., 31., 63.,\n       37., 49., 65., 77., 80., 74.,  6., 35., 99., 19., 76., 92., 82.,\n       26., 23., 89., 88., 60.,  7., 28., 21., 58., 46., 75., 11., 22.,\n       85., 93., 55., 81., 50., 78., 67., 59., 20., 70., 62., 29., 33.,\n       71., 95.,  2.])`, type: `ndarray`\n\nval, expected value: `array([52., 15., 13., 66., 39., ... , 55., 33., 71., 95.,  2.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 11, 13, 25, 29, 31, 33, 40,  0, -1,  2,  4, 19,  5, 47,  6,\n       18, -1, -1, -1, -1, 20,  7, -1,  8, 32,  9,  3, 10, 11, 51, 12, 16,\n        2, 33, 14,  3, 15, 17, -1, -1, -1, 21, 22, 23,  8, 50, 54, 24, 26,\n       38, 27,  8, 28,  3, 17, 30, 31, -1, -1, 24,  8, 10, 22, 33, 12, 16,\n       34, 27, 19, 35, 36, 37, 11, -1, -1, 39, 41, 42, 43,  1, 44, 18, 39,\n        3, 45, 46, -1, -1, 14, 19, 48,  3, 49, 51, 41, 52, 53,  7])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 52, 18, 35, 40, 77, 86, 69,  0, 27,  2,  4, 25,  5, 82,  6,\n       24,  7, 64,  8,  9, 29, 10, 46, 11, 50, 12, 13, 14, 15, 95, 16, 22,\n       17, 72, 19, 20, 21, 23, 26, 84, 28, 30, 31, 32, 33, 92, 98, 34, 36,\n       62, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56,\n       57, 58, 68, 59, 60, 61, 63, 65, 66, 67, 70, 71, 73, 74, 75, 76, 78,\n       79, 80, 81, 83, 85, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 14, 16, 18, 20, 21, 23, 24, 27, 28, 29, 30, 32, 34, 36,\n       37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 55, 56, 57,\n       58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75,\n       76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\n       93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 1, 2, 2, 2, 2, 1, 1, 2, 1, 3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 2, 2, 2, 1, 1, 2, 1, 3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('k', '2015-08-27') ... ('x', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(74,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nk    2015-08-27    1\ns    2015-08-26    2\nk    2015-08-30    2\nv    2015-08-31    2\nw    2015-08-25    2\n                  ..\ng    2015-08-28    1\nk    2015-08-28    1\nm    2015-08-31    1\no    2015-08-25    2\nx    2015-08-31    1\nName: julie, Length: 74, dtype: int64`, type: `Series`\n\n### Expected case 31\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      15\n1      57\n2      81\n3       0\n4      20\n       ..\n995     0\n996    82\n997    74\n998    12\n999    56\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([15, 57, 81,  0, 20, 53, 58, 31, 63, 96, 59, 38, 60,  1, 93, 19, 72,\n       97, 17, 54, 24, 79, 75, 76, 49, 48, 47, 11, 42, 45, 40,  8, 80,  3,\n       14, 78, 33, 98, 22, 44, 86, 28, 27,  6, 37, 71, 73, 88, 35, 68, 52,\n       12, 23, 82,  9, 84, 43, 41, 95, 85, 74, 36, 83, 46, 77, 13, 89, 25,\n       21, 10, 55,  2, 65, 34, 50, 29, 69, 39, 70, 64, 66, 56, 26, 94, 99,\n       90,  5, 32, 18, 30, 67, 92, 91, 16, 61, 62,  4, 51, 87,  7])`, type: `ndarray`\n\nval, expected value: `array([15, 57, 81,  0, 20, 53, 58, ... , 75, 76,  3,  0, 82, 74, 12, 56])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  1,  4,  5,  7,  7, ... , 80, 82, 85, 88, 91, 92, 92, 93])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0, 379, 454,   4,   5, ... , 884, 295, 659, 595, 628, 451])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  38,  77, 119, 165, 196, 238, 286, 325, 366, 408, 450, 499,\n       541, 579, 617, 663, 698, 726, 765, 798, 831, 870, 900, 931, 956])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 0, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([28, 34, 33, 39, 27, 34, 42, 32, 32, 37, 35, 36, 35, 30, 29, 38, 33,\n       24, 32, 30, 25, 31, 26, 23, 20, 36])`, type: `ndarray`\n\nres, expected value: `array([28, 34, 33, 39, 27, 34, 42, 32, 32, 37, 35, 36, 35, 30, 29, 38, 33,\n       24, 32, 30, 25, 31, 26, 23, 20, 36])`, type: `ndarray`\n\nri, expected value: `Index(['o', 'p', 'z', 'i', 'c', 'v', 'w', 'u', 'r', 'n', 'a', 'd', 'm', 's',\n       'e', 'x', 'q', 'f', 'k', 't', 'b', 'y', 'g', 'l', 'j', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\no    28\np    34\nz    33\ni    39\nc    27\nv    34\nw    42\nu    32\nr    32\nn    37\na    35\nd    36\nm    35\ns    30\ne    29\nx    38\nq    33\nf    24\nk    32\nt    30\nb    25\ny    31\ng    26\nl    23\nj    20\nh    36\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 32\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      15\n1      57\n2      81\n3       0\n4      20\n       ..\n995     0\n996    82\n997    74\n998    12\n999    56\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 247, 247, 248, 248, 249, 250])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([15, 57, 81,  0, 20, 53, 58, 31, 63, 96, 59, 38, 60,  1, 93, 19, 72,\n       97, 17, 54, 24, 79, 75, 76, 49, 48, 47, 11, 42, 45, 40,  8, 80,  3,\n       14, 78, 33, 98, 22, 44, 86, 28, 27,  6, 37, 71, 73, 88, 35, 68, 52,\n       12, 23, 82,  9, 84, 43, 41, 95, 85, 74, 36, 83, 46, 77, 13, 89, 25,\n       21, 10, 55,  2, 65, 34, 50, 29, 69, 39, 70, 64, 66, 56, 26, 94, 99,\n       90,  5, 32, 18, 30, 67, 92, 91, 16, 61, 62,  4, 51, 87,  7])`, type: `ndarray`\n\nval, expected value: `array([15, 57, 81,  0, 20, 53, 58, ... , 75, 76,  3,  0, 82, 74, 12, 56])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ 0, 23, 30, 45, 75,  1,  1, ... , 24, 31, 46, 63,  8, 95,  5, 53])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0, 978, 489, 717, 340, ... , 821, 980, 865, 895, 929, 991])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   5,   9,  15,  19, ... , 992,\n       994, 996, 998, 999])`, shape: `(251,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 5,  3,  6,  4,  1,  4,  3, ... ,  2,  1,  3,  2,  2,  2,  1,  1])`, shape: `(251,)`, type: `ndarray`\n\nres, expected value: `array([ 5,  3,  6,  4,  1,  4,  3, ... ,  2,  1,  3,  2,  2,  2,  1,  1])`, shape: `(251,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('o', '2015-08-29') ... ('c', '2015-08-29')],\n           names=['jim', 'joe'], length=251)`, shape: `(251,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \no    2015-08-29    5\np    2015-08-24    3\nz    2015-08-25    6\ni    2015-08-27    4\no    2015-08-25    1\n                  ..\ng    2015-08-29    2\nk    2015-08-27    2\nq    2015-08-26    2\nl    2015-08-27    1\nc    2015-08-29    1\nName: julie, Length: 251, dtype: int64`, type: `Series`\n\n### Expected case 33\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      15.0\n1      57.0\n2      81.0\n3       0.0\n4      20.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    12.0\n999    56.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([15., 57., 81.,  0., 20., ... , 87., 98., 90.,  7., 51.,  2.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([15., 57., 81.,  0., 20., ... ,  3., nan, nan, nan, 12., 56.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 72, 73, 82, 86, 88, 88, 89, 96])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 295, 659, 595, 628, 451, 884])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  95, 136, 181, 211, 250, 294, 329, 368, 406, 445, 490, 531,\n       565, 602, 638, 681, 714, 739, 776, 808, 838, 876, 906, 935, 957])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 1, 1, 1, 1, 0, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([42, 25, 29, 34, 20, 29, 34, 28, 30, 25, 32, 32, 28, 24, 30, 27, 32,\n       27, 20, 26, 25, 21, 30, 22, 21, 17, 34])`, type: `ndarray`\n\nres, expected value: `array([25, 29, 34, 20, 29, 34, 28, 30, 25, 32, 32, 28, 24, 30, 27, 32, 27,\n       20, 26, 25, 21, 30, 22, 21, 17, 34])`, type: `ndarray`\n\nri, expected value: `Index(['o', 'z', 'i', 'c', 'v', 'w', 'p', 'u', 'r', 'n', 'd', 'm', 's', 'a',\n       'e', 'x', 'q', 'f', 'k', 't', 'b', 'y', 'g', 'l', 'j', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\no    25\nz    29\ni    34\nc    20\nv    29\nw    34\np    28\nu    30\nr    25\nn    32\nd    32\nm    28\ns    24\na    30\ne    27\nx    32\nq    27\nf    20\nk    26\nt    25\nb    21\ny    30\ng    22\nl    21\nj    17\nh    34\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 34\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      15.0\n1      57.0\n2      81.0\n3       0.0\n4      20.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    12.0\n999    56.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 246, 246, 247, 248, 249, 250])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([15., 57., 81.,  0., 20., ... , 87., 98., 90.,  7., 51.,  2.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([15., 57., 81.,  0., 20., ... ,  3., nan, nan, nan, 12., 56.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 92,  9,  2, 45,  5, 88, 17, 44])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 911, 982, 929, 943, 945, 991])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  89,  95,  96,  99, ... , 994,\n       996, 997, 998, 999])`, shape: `(251,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([49,  5,  6,  1,  3,  3,  7, ... ,  2,  2,  1,  2,  1,  1,  1,  1])`, shape: `(252,)`, type: `ndarray`\n\nres, expected value: `array([5, 6, 1, 3, 3, 7, 2, 4, 4, ... ,\n       1, 2, 2, 1, 2, 1, 1, 1, 1])`, shape: `(251,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('o', '2015-08-29') ... ('c', '2015-08-29')],\n           names=['jim', 'joe'], length=251)`, shape: `(251,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \no    2015-08-29    5\nz    2015-08-25    6\no    2015-08-25    1\n     2015-08-31    3\nc    2015-08-27    3\n                  ..\nd    2015-08-29    2\nl    2015-08-27    1\ne    2015-08-24    1\nc    2015-08-28    1\n     2015-08-29    1\nName: julie, Length: 251, dtype: int64`, type: `Series`\n\n### Expected case 35\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      15.0\n1      57.0\n2      81.0\n3       0.0\n4      20.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    12.0\n999    56.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([15., 57., 81.,  0., 20., ... , 87., 98., 90.,  7., 51.,  2.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([15., 57., 81.,  0., 20., ... ,  3., nan, nan, nan, 12., 56.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 72, 73, 82, 86, 88, 88, 89, 96])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 295, 659, 595, 628, 451, 884])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  95, 136, 181, 211, 250, 294, 329, 368, 406, 445, 490, 531,\n       565, 602, 638, 681, 714, 739, 776, 808, 838, 876, 906, 935, 957])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 1, 1, 1, 1, 0, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([42, 25, 29, 34, 20, 29, 34, 28, 30, 25, 32, 32, 28, 24, 30, 27, 32,\n       27, 20, 26, 25, 21, 30, 22, 21, 17, 34])`, type: `ndarray`\n\nres, expected value: `array([25, 29, 34, 20, 29, 34, 28, 30, 25, 32, 32, 28, 24, 30, 27, 32, 27,\n       20, 26, 25, 21, 30, 22, 21, 17, 34])`, type: `ndarray`\n\nri, expected value: `Index(['o', 'z', 'i', 'c', 'v', 'w', 'p', 'u', 'r', 'n', 'd', 'm', 's', 'a',\n       'e', 'x', 'q', 'f', 'k', 't', 'b', 'y', 'g', 'l', 'j', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\no    25\nz    29\ni    34\nc    20\nv    29\nw    34\np    28\nu    30\nr    25\nn    32\nd    32\nm    28\ns    24\na    30\ne    27\nx    32\nq    27\nf    20\nk    26\nt    25\nb    21\ny    30\ng    22\nl    21\nj    17\nh    34\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 36\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      15.0\n1      57.0\n2      81.0\n3       0.0\n4      20.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    12.0\n999    56.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 246, 246, 247, 248, 249, 250])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([15., 57., 81.,  0., 20., ... , 87., 98., 90.,  7., 51.,  2.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([15., 57., 81.,  0., 20., ... ,  3., nan, nan, nan, 12., 56.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 92,  9,  2, 45,  5, 88, 17, 44])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 911, 982, 929, 943, 945, 991])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  89,  95,  96,  99, ... , 994,\n       996, 997, 998, 999])`, shape: `(251,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([49,  5,  6,  1,  3,  3,  7, ... ,  2,  2,  1,  2,  1,  1,  1,  1])`, shape: `(252,)`, type: `ndarray`\n\nres, expected value: `array([5, 6, 1, 3, 3, 7, 2, 4, 4, ... ,\n       1, 2, 2, 1, 2, 1, 1, 1, 1])`, shape: `(251,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('o', '2015-08-29') ... ('c', '2015-08-29')],\n           names=['jim', 'joe'], length=251)`, shape: `(251,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \no    2015-08-29    5\nz    2015-08-25    6\no    2015-08-25    1\n     2015-08-31    3\nc    2015-08-27    3\n                  ..\nd    2015-08-29    2\nl    2015-08-27    1\ne    2015-08-24    1\nc    2015-08-28    1\n     2015-08-29    1\nName: julie, Length: 251, dtype: int64`, type: `Series`\n\n### Expected case 37\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       94\n1       92\n2       17\n3       29\n4       29\n        ..\n9995    82\n9996    51\n9997    59\n9998    98\n9999    23\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([94, 92, 17, 29, 43, 24, 53, 26, 82, 31, 50, 32, 38, 66, 73, 71, 98,\n       30,  2, 96, 72, 37, 19, 40, 95, 42, 54, 60, 62, 75, 35, 88, 39, 91,\n       23, 86, 14,  7, 27, 51, 70, 58, 21, 16, 90, 12, 57, 33, 11, 93, 28,\n        4, 85, 65, 13, 84, 48,  3, 46, 34, 52, 74, 64, 49, 15, 25, 89, 41,\n       76, 83, 20, 78, 79, 97,  1, 36, 45,  8,  5, 47, 87, 56,  6, 55, 69,\n       44, 67, 61, 81, 77, 99, 59, 80, 10, 68, 63, 22,  9, 18,  0])`, type: `ndarray`\n\nval, expected value: `array([94, 92, 17, ..., 59, 98, 23])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([   0, 1915, 5599, ..., 5899, 7084, 9746])`, type: `ndarray`\n\nidx, expected value: `array([   0,  370,  720, 1110, 1489, 1899, 2265, 2715, 3102, 3490, 3900,\n       4290, 4650, 5048, 5422, 5799, 6213, 6600, 6964, 7308, 7665, 8068,\n       8454, 8853, 9220, 9596])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 99,  94, 100,  99,  98,  98,  96, 100, 100,  97,  97,  98,  98,\n        97,  97,  99,  98,  97,  95,  98,  99,  99,  98,  99,  99, 100])`, type: `ndarray`\n\nres, expected value: `array([ 99,  94, 100,  99,  98,  98,  96, 100, 100,  97,  97,  98,  98,\n        97,  97,  99,  98,  97,  95,  98,  99,  99,  98,  99,  99, 100])`, type: `ndarray`\n\nri, expected value: `Index(['f', 'u', 'j', 'h', 'z', 'q', 'i', 'v', 's', 'a', 'w', 'o', 'c', 'b',\n       'y', 'r', 't', 'd', 'e', 'l', 'n', 'p', 'k', 'g', 'x', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nf     99\nu     94\nj    100\nh     99\nz     98\nq     98\ni     96\nv    100\ns    100\na     97\nw     97\no     98\nc     98\nb     97\ny     97\nr     99\nt     98\nd     97\ne     95\nl     98\nn     99\np     99\nk     98\ng     99\nx     99\nm    100\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 38\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       94\n1       92\n2       17\n3       29\n4       29\n        ..\n9995    82\n9996    51\n9997    59\n9998    98\n9999    23\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([94, 92, 17, 29, 43, 24, 53, 26, 82, 31, 50, 32, 38, 66, 73, 71, 98,\n       30,  2, 96, 72, 37, 19, 40, 95, 42, 54, 60, 62, 75, 35, 88, 39, 91,\n       23, 86, 14,  7, 27, 51, 70, 58, 21, 16, 90, 12, 57, 33, 11, 93, 28,\n        4, 85, 65, 13, 84, 48,  3, 46, 34, 52, 74, 64, 49, 15, 25, 89, 41,\n       76, 83, 20, 78, 79, 97,  1, 36, 45,  8,  5, 47, 87, 56,  6, 55, 69,\n       44, 67, 61, 81, 77, 99, 59, 80, 10, 68, 63, 22,  9, 18,  0])`, type: `ndarray`\n\nval, expected value: `array([94, 92, 17, ..., 59, 98, 23])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  3,  6, ..., 89, 95, 98])`, type: `ndarray`\n\nsorter, expected value: `array([   0, 1448,  639, ..., 7768, 9978, 2689])`, type: `ndarray`\n\nidx, expected value: `array([   0,   36,   79,  123,  168, ... , 9840, 9869, 9903, 9935, 9969])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([31, 38, 35, 37, 27, 31, 28, ... , 28,\n       25, 27, 30, 29, 26])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([31, 38, 35, 37, 27, 31, 28, ... , 28,\n       25, 27, 30, 29, 26])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('f', '2015-08-27') ... ('f', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nf    2015-08-27    31\nu    2015-08-28    38\nj    2015-08-30    35\nh    2015-08-23    37\nj    2015-08-31    27\n                   ..\nq    2015-08-31    25\nl    2015-08-25    27\no    2015-08-23    30\nt    2015-08-23    29\nf    2015-08-23    26\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 39\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       94.0\n1       92.0\n2       17.0\n3       29.0\n4       29.0\n        ... \n9995    82.0\n9996    51.0\n9997    59.0\n9998    98.0\n9999    23.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([94., 92., 17., 29., 43., ... , 86., 18.,  0., 68., 97., 22.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([94., 92., 17., ..., 59., 98., 23.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9541, 8746, 9909])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  929, 1291, 1656, 2048, 2390, 2801, 3166, 3531, 3924, 4289,\n       4628, 4999, 5346, 5700, 6064, 6416, 6740, 7125, 7465, 7848, 8211,\n       8587, 8931, 9289, 9670])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  97,  99,  97,  98,  94,  96, 101,  99,  97,  94,  98,  94,\n        94,  95,  97,  96,  96,  99,  92,  95,  99,  98,  94,  97,  98,\n        93])`, type: `ndarray`\n\nres, expected value: `array([ 97,  99,  97,  98,  94,  96, 101,  99,  97,  94,  98,  94,  94,\n        95,  97,  96,  96,  99,  92,  95,  99,  98,  94,  97,  98,  93])`, type: `ndarray`\n\nri, expected value: `Index(['f', 'j', 'h', 'z', 'q', 'i', 'v', 's', 'a', 'w', 'o', 'c', 'b', 'y',\n       't', 'd', 'e', 'r', 'l', 'n', 'p', 'k', 'g', 'x', 'm', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nf     97\nj     99\nh     97\nz     98\nq     94\ni     96\nv    101\ns     99\na     97\nw     94\no     98\nc     94\nb     94\ny     95\nt     97\nd     96\ne     96\nr     99\nl     92\nn     95\np     99\nk     98\ng     94\nx     97\nm     98\nu     93\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 40\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       94.0\n1       92.0\n2       17.0\n3       29.0\n4       29.0\n        ... \n9995    82.0\n9996    51.0\n9997    59.0\n9998    98.0\n9999    23.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([94., 92., 17., 29., 43., ... , 86., 18.,  0., 68., 97., 22.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([94., 92., 17., ..., 59., 98., 23.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 92, 94, 95])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9978, 1770, 2689])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  875,  914,  944,  980, ... , 9858, 9884, 9914, 9941, 9972])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  23,  24,  23,  29, ... ,  20,  22,  24,  22,\n        21])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([23, 24, 23, 29, 23, 32, 28, ... , 22,\n       20, 22, 24, 22, 21])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('f', '2015-08-27') ... ('f', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nf    2015-08-27    23\nj    2015-08-30    24\n     2015-08-31    23\nz    2015-08-26    29\nq    2015-08-28    23\n                   ..\n     2015-08-31    20\nl    2015-08-25    22\no    2015-08-23    24\nt    2015-08-23    22\nf    2015-08-23    21\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 41\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       94.0\n1       92.0\n2       17.0\n3       29.0\n4       29.0\n        ... \n9995    82.0\n9996    51.0\n9997    59.0\n9998    98.0\n9999    23.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([94., 92., 17., 29., 43., ... , 86., 18.,  0., 68., 97., 22.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([94., 92., 17., ..., 59., 98., 23.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9541, 8746, 9909])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  929, 1291, 1656, 2048, 2390, 2801, 3166, 3531, 3924, 4289,\n       4628, 4999, 5346, 5700, 6064, 6416, 6740, 7125, 7465, 7848, 8211,\n       8587, 8931, 9289, 9670])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  97,  99,  97,  98,  94,  96, 101,  99,  97,  94,  98,  94,\n        94,  95,  97,  96,  96,  99,  92,  95,  99,  98,  94,  97,  98,\n        93])`, type: `ndarray`\n\nres, expected value: `array([ 97,  99,  97,  98,  94,  96, 101,  99,  97,  94,  98,  94,  94,\n        95,  97,  96,  96,  99,  92,  95,  99,  98,  94,  97,  98,  93])`, type: `ndarray`\n\nri, expected value: `Index(['f', 'j', 'h', 'z', 'q', 'i', 'v', 's', 'a', 'w', 'o', 'c', 'b', 'y',\n       't', 'd', 'e', 'r', 'l', 'n', 'p', 'k', 'g', 'x', 'm', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nf     97\nj     99\nh     97\nz     98\nq     94\ni     96\nv    101\ns     99\na     97\nw     94\no     98\nc     94\nb     94\ny     95\nt     97\nd     96\ne     96\nr     99\nl     92\nn     95\np     99\nk     98\ng     94\nx     97\nm     98\nu     93\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 42\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       94.0\n1       92.0\n2       17.0\n3       29.0\n4       29.0\n        ... \n9995    82.0\n9996    51.0\n9997    59.0\n9998    98.0\n9999    23.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([94., 92., 17., 29., 43., ... , 86., 18.,  0., 68., 97., 22.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([94., 92., 17., ..., 59., 98., 23.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 92, 94, 95])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9978, 1770, 2689])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  875,  914,  944,  980, ... , 9858, 9884, 9914, 9941, 9972])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  23,  24,  23,  29, ... ,  20,  22,  24,  22,\n        21])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([23, 24, 23, 29, 23, 32, 28, ... , 22,\n       20, 22, 24, 22, 21])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('f', '2015-08-27') ... ('f', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nf    2015-08-27    23\nj    2015-08-30    24\n     2015-08-31    23\nz    2015-08-26    29\nq    2015-08-28    23\n                   ..\n     2015-08-31    20\nl    2015-08-25    22\no    2015-08-23    24\nt    2015-08-23    22\nf    2015-08-23    21\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 43\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        18\n1        64\n2        95\n3        32\n4        64\n         ..\n99995    18\n99996    39\n99997    61\n99998    84\n99999    72\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([18, 64, 95, 32,  4, 49, 99, 71,  6, 33, 53, 55, 50, 35, 37, 97, 79,\n       77, 56, 34, 40, 44, 45, 89, 48, 15, 87, 81, 86, 27, 28, 67,  8, 11,\n       39, 20,  5, 65, 42, 58, 93, 25, 90, 10, 74, 17, 36, 91, 98, 60, 13,\n        7, 21,  0,  2, 47, 75, 73, 41, 30, 94, 63,  1, 26, 16, 31, 96, 19,\n       51, 61, 72, 52, 62, 82, 43, 46, 69, 83, 14, 57,  9, 22, 23, 92,  3,\n       66, 59, 80, 84, 68, 76, 54, 29, 12, 38, 70, 78, 88, 85, 24])`, type: `ndarray`\n\nval, expected value: `array([18, 64, 95, ..., 61, 84, 72])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([    0,  2421,  4062, ..., 92584, 99156, 99929])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3882,  7733, 11634, 15523, 19277, 23100, 26883, 30680,\n       34462, 38300, 42223, 46043, 49918, 53731, 57618, 61362, 65242,\n       69017, 72977, 76680, 80535, 84433, 88291, 92192, 96078])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['y', 'u', 'x', 'o', 'l', 'j', 'z', 'a', 'p', 'd', 'f', 'q', 't', 'n',\n       's', 'h', 'g', 'k', 'i', 'c', 'v', 'r', 'b', 'w', 'm', 'e'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ny    100\nu    100\nx    100\no    100\nl    100\nj    100\nz    100\na    100\np    100\nd    100\nf    100\nq    100\nt    100\nn    100\ns    100\nh    100\ng    100\nk    100\ni    100\nc    100\nv    100\nr    100\nb    100\nw    100\nm    100\ne    100\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 44\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        18\n1        64\n2        95\n3        32\n4        64\n         ..\n99995    18\n99996    39\n99997    61\n99998    84\n99999    72\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([18, 64, 95, 32,  4, 49, 99, 71,  6, 33, 53, 55, 50, 35, 37, 97, 79,\n       77, 56, 34, 40, 44, 45, 89, 48, 15, 87, 81, 86, 27, 28, 67,  8, 11,\n       39, 20,  5, 65, 42, 58, 93, 25, 90, 10, 74, 17, 36, 91, 98, 60, 13,\n        7, 21,  0,  2, 47, 75, 73, 41, 30, 94, 63,  1, 26, 16, 31, 96, 19,\n       51, 61, 72, 52, 62, 82, 43, 46, 69, 83, 14, 57,  9, 22, 23, 92,  3,\n       66, 59, 80, 84, 68, 76, 54, 29, 12, 38, 70, 78, 88, 85, 24])`, type: `ndarray`\n\nval, expected value: `array([18, 64, 95, ..., 61, 84, 72])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([    0,  6974, 58280, ..., 71356, 76494, 79348])`, type: `ndarray`\n\nidx, expected value: `array([    0,   394,   806,  1217, ... , 98082, 98511, 98878, 99255, 99615])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 99,  99,  98,  97,  96, ... ,  98, 100,  97,  98,  99,  98])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([ 99,  99,  98,  97,  96, ... ,  98, 100,  97,  98,  99,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('y', '2015-08-23') ... ('e', '2015-08-25')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ny    2015-08-23     99\nu    2015-08-27     99\nx    2015-08-30     98\no    2015-08-23     97\n     2015-08-26     96\n                  ... \nr    2015-08-27    100\ny    2015-08-26     97\nz    2015-08-28     98\nn    2015-08-23     99\ne    2015-08-25     98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 45\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        18.0\n1        64.0\n2        95.0\n3        32.0\n4        64.0\n         ... \n99995    18.0\n99996    39.0\n99997    61.0\n99998    84.0\n99999    72.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([18., 64., 95., 32.,  4., ... , 78., 87., 84., 85., 24., 88.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([18., 64., 95., ..., 61., 84., 72.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 92790, 94050, 97481])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9530, 13217, 16901, 20527, 24048, 27665, 31233, 34812,\n       38365, 41971, 45663, 49277, 52870, 56515, 60043, 63700, 67257,\n       70961, 74443, 78085, 81753, 85360, 89021, 92682, 96339])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, expected value: `Index(['y', 'x', 'o', 'u', 'l', 'j', 'z', 'a', 'p', 'd', 'f', 'q', 'n', 's',\n       'h', 'g', 'k', 'i', 'c', 'v', 'r', 'b', 'w', 'm', 't', 'e'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ny    101\nx    101\no    101\nu    101\nl    101\nj    101\nz    101\na    101\np    101\nd    101\nf    101\nq    101\nn    101\ns    101\nh    101\ng    101\nk    101\ni    101\nc    101\nv    101\nr    101\nb    101\nw    101\nm    101\nt    101\ne    101\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 46\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        18.0\n1        64.0\n2        95.0\n3        32.0\n4        64.0\n         ... \n99995    18.0\n99996    39.0\n99997    61.0\n99998    84.0\n99999    72.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([18., 64., 95., 32.,  4., ... , 78., 87., 84., 85., 24., 88.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([18., 64., 95., ..., 61., 84., 72.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 62201, 71956, 94650])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8783,  9158,  9511, ... , 98280, 98612, 98976, 99326, 99670])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  99,  95,  96,  97, ... ,  95,  92,  98,  94,\n        98])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 99,  95,  96,  97,  92, ... ,  99,  95,  92,  98,  94,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('y', '2015-08-23') ... ('n', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ny    2015-08-23    99\nx    2015-08-30    95\no    2015-08-26    96\nu    2015-08-26    97\ny    2015-09-01    92\n                   ..\n     2015-08-26    95\nm    2015-08-30    92\nz    2015-08-28    98\ne    2015-08-25    94\nn    2015-08-23    98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 47\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        18.0\n1        64.0\n2        95.0\n3        32.0\n4        64.0\n         ... \n99995    18.0\n99996    39.0\n99997    61.0\n99998    84.0\n99999    72.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([18., 64., 95., 32.,  4., ... , 78., 87., 84., 85., 24., 88.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([18., 64., 95., ..., 61., 84., 72.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 92790, 94050, 97481])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9530, 13217, 16901, 20527, 24048, 27665, 31233, 34812,\n       38365, 41971, 45663, 49277, 52870, 56515, 60043, 63700, 67257,\n       70961, 74443, 78085, 81753, 85360, 89021, 92682, 96339])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, expected value: `Index(['y', 'x', 'o', 'u', 'l', 'j', 'z', 'a', 'p', 'd', 'f', 'q', 'n', 's',\n       'h', 'g', 'k', 'i', 'c', 'v', 'r', 'b', 'w', 'm', 't', 'e'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ny    101\nx    101\no    101\nu    101\nl    101\nj    101\nz    101\na    101\np    101\nd    101\nf    101\nq    101\nn    101\ns    101\nh    101\ng    101\nk    101\ni    101\nc    101\nv    101\nr    101\nb    101\nw    101\nm    101\nt    101\ne    101\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 48\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        18.0\n1        64.0\n2        95.0\n3        32.0\n4        64.0\n         ... \n99995    18.0\n99996    39.0\n99997    61.0\n99998    84.0\n99999    72.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([18., 64., 95., 32.,  4., ... , 78., 87., 84., 85., 24., 88.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([18., 64., 95., ..., 61., 84., 72.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 62201, 71956, 94650])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8783,  9158,  9511, ... , 98280, 98612, 98976, 99326, 99670])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  99,  95,  96,  97, ... ,  95,  92,  98,  94,\n        98])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 99,  95,  96,  97,  92, ... ,  99,  95,  92,  98,  94,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('y', '2015-08-23') ... ('n', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ny    2015-08-23    99\nx    2015-08-30    95\no    2015-08-26    96\nu    2015-08-26    97\ny    2015-09-01    92\n                   ..\n     2015-08-26    95\nm    2015-08-30    92\nz    2015-08-28    98\ne    2015-08-25    94\nn    2015-08-23    98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 49\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     522\n1     859\n2     691\n3     654\n4     344\n     ... \n95    365\n96     31\n97    496\n98    358\n99    609\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,\n        3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,\n       10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13,\n       14, 14, 14, 15, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18,\n       18, 18, 18, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `array([522, 859, 691, 654, 344, ... ,\n       139, 365,  31, 496, 358, 609])`, shape: `(97,)`, type: `ndarray`\n\nval, expected value: `array([522, 859, 691, 654, 344, ... , 139, 365,  31, 496, 358, 609])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 0, 11, 13, 31, 36, 77,  1, 10, 24, 61, 79,  2,  5, 16, 18, 71, 82,\n        3, 88, 96,  4, 19, 80, 95,  6, 27, 41, 44, 46, 64,  7, 12, 63, 72,\n       87,  8, 32, 33, 45, 72, 84,  9, 29, 39, 51, 75, 14, 21, 56, 58, 68,\n       15, 20, 50, 90, 94, 17, 25, 37, 83, 89, 22, 35, 38, 23, 57, 62, 85,\n        1, 26, 65, 28, 16, 69, 91, 30, 34, 40, 49, 59, 78, 42, 70, 74, 76,\n       86, 92, 93, 43, 47, 66, 48, 53, 54, 73, 52, 55, 60, 67, 81])`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 11, 13, 33, 38, 80,  1, 10, 24, 63, 82,  2,  5, 16, 18, 73, 85,\n        3, 91, 99,  4, 19, 83, 98,  6, 27, 43, 46, 48, 66,  7, 12, 65, 74,\n       90,  8, 34, 35, 47, 78, 87,  9, 30, 41, 53, 77, 14, 21, 58, 60, 70,\n       15, 20, 52, 93, 97, 17, 25, 39, 86, 92, 22, 37, 40, 23, 59, 64, 88,\n       29, 26, 67, 28, 31, 71, 94, 32, 36, 42, 51, 61, 81, 44, 72, 76, 79,\n       89, 95, 96, 45, 49, 68, 50, 55, 56, 75, 54, 57, 62, 69, 84])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  6, 11, 17, 20, 24, 30, 35, 41, 46, 51, 56, 61, 64, 68, 71, 72,\n       75, 81, 88, 89, 91, 95, 96, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 5, 6, 3, 4, 6, 5, 6, 5, 5, 5, 5, 3, 4, 3, 1, 3, 6, 7, 1, 2, 4,\n       1, 1, 3])`, type: `ndarray`\n\nres, expected value: `array([6, 5, 6, 3, 4, 6, 5, 6, 5, 5, 5, 5, 3, 4, 3, 1, 3, 6, 7, 1, 2, 4,\n       1, 1, 3])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'r', 'w', 'j', 's', 'y', 'f', 'g', 'k', 'i', 'h', 'q', 'b', 'p',\n       'l', 'v', 'm', 'a', 't', 'e', 'n', 'o', 'c', 'z', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    6\nr    5\nw    6\nj    3\ns    4\ny    6\nf    5\ng    6\nk    5\ni    5\nh    5\nq    5\nb    3\np    4\nl    3\nv    1\nm    3\na    6\nt    7\ne    1\nn    2\no    4\nc    1\nz    1\nu    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 50\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     522\n1     859\n2     691\n3     654\n4     344\n     ... \n95    365\n96     31\n97    496\n98    358\n99    609\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  1,  1,  2,  2,  3,  4,  5,  6,  6,  7,  8,  8,  9, 10, 10,\n       11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 19, 20, 21, 22, 22, 23, 24,\n       25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n       40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49, 50, 50, 51, 52, 53, 54,\n       55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n       71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85])`, type: `ndarray`\n\n_, expected value: `array([522, 859, 691, 654, 344, ... ,\n       139, 365,  31, 496, 358, 609])`, shape: `(97,)`, type: `ndarray`\n\nval, expected value: `array([522, 859, 691, 654, 344, ... , 139, 365,  31, 496, 358, 609])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 0, 11,  1, 24,  2, 18,  3,  4,  5,  6, 46,  7,  8, 84,  9, 10, 61,\n       12, 13, 14, 15, 16, 82, 17, 19, 20, 21, 68, 22, 23, 25, 37, 26, 27,\n       28,  1, 29, 51, 16, 30, 49, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41,\n       42, 43, 44, 45, 47, 48, 50, 52, 53, 54, 55, 56, 58, 57, 59, 60, 62,\n       63, 64, 65, 66, 67, 69, 91, 70, 71, 72, 73, 74, 75, 72, 76, 77, 78,\n       79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96])`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 11,  1, 24,  2, 18,  3,  4,  5,  6, 48,  7,  8, 87,  9, 10, 63,\n       12, 13, 14, 15, 16, 85, 17, 19, 20, 21, 70, 22, 23, 25, 39, 26, 27,\n       28, 29, 30, 53, 31, 32, 51, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43,\n       44, 45, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 60, 59, 61, 62, 64,\n       65, 66, 67, 68, 69, 71, 94, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\n       82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  2,  4,  6,  7,  8,  9, 11, 12, 14, 15, 17, 18, 19, 20, 21, 23,\n       24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44,\n       45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81,\n       82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n       99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-28') ... ('j', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(86,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-28    2\nr    2015-08-29    2\nw    2015-08-28    2\nj    2015-08-26    1\ns    2015-08-30    1\n                  ..\nt    2015-08-25    1\n     2015-08-23    1\nh    2015-08-23    1\ns    2015-08-27    1\nj    2015-08-30    1\nName: julie, Length: 86, dtype: int64`, type: `Series`\n\n### Expected case 51\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     522.0\n1     859.0\n2     691.0\n3     654.0\n4     344.0\n      ...  \n95    365.0\n96     31.0\n97    496.0\n98    358.0\n99    609.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,\n        2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,\n        5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,\n        9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n       13, 14, 14, 14, 15, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18,\n       18, 18, 18, 18, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24])`, type: `ndarray`\n\n_, expected value: `array([522., 859., 691., 654., 344., ... ,\n       365.,  31., 496., 358., 609.])`, shape: `(82,)`, type: `ndarray`\n\nval, expected value: `array([522., 859., 691., 654., 344., ... ,  31., 496., 358.,\n       609.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 15, 27, 41, 55, 68,  0,  8, 10, 25, 30, 65, -1,  2,  5, 13, 59,\n        3, 73, 81, -1,  4, 16, 80, -1, -1, -1,  6, 35, 37, -1, -1,  9, 60,\n       72, -1, -1, 26, 60, 69, -1, 23, 33, 42, 63,  7, 21, 52, 67, 11, 18,\n       47, 49, 56, 12, 17, 75, 79, 14, 22, 31, 74, 19, 29, 32, -1, 20, 48,\n       70, -1,  1, 53, -1, 13, 57, 76, 24, 28, 34, 40, 50, 66, 36, 58, 62,\n       64, 71, 77, 78, -1, 38, 54, 39, 44, 45, 61, 43, 46, -1, 51])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 69, 86,  0, 11, 13, 33, 38, 80, 85,  2,  5, 16, 73,\n        3, 91, 99, 83,  4, 19, 98, 27, 46, 66,  6, 43, 48,  7, 65, 12, 74,\n       90,  8, 47, 34, 78, 87,  9, 30, 41, 53, 77, 10, 24, 63, 82, 14, 21,\n       58, 60, 70, 15, 20, 93, 97, 17, 25, 39, 92, 22, 37, 40, 64, 23, 59,\n       88, 26, 29, 67, 28, 31, 71, 94, 32, 36, 42, 51, 61, 81, 44, 72, 76,\n       79, 89, 95, 96, 45, 49, 68, 50, 55, 56, 75, 54, 57, 84, 62])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 12, 17, 20, 24, 30, 35, 40, 45, 49, 54, 58, 62, 65, 69, 72, 73,\n       76, 82, 89, 90, 92, 96, 97, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False,  True,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 6, 5, 3, 4, 4, 4, 4, 5, 4, 5, 4, 4, 3, 4, 3, 1, 3, 6, 7, 1, 2,\n       4, 1, 1, 2])`, type: `ndarray`\n\nres, expected value: `array([6, 5, 3, 4, 4, 4, 4, 5, 4, 5, 4, 4, 3, 4, 3, 1, 3, 6, 7, 1, 2, 4,\n       1, 1, 2])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'w', 'j', 's', 'y', 'f', 'g', 'k', 'r', 'i', 'h', 'q', 'b', 'p',\n       'l', 'v', 'm', 'a', 't', 'e', 'n', 'o', 'c', 'z', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    6\nw    5\nj    3\ns    4\ny    4\nf    4\ng    4\nk    5\nr    4\ni    5\nh    4\nq    4\nb    3\np    4\nl    3\nv    1\nm    3\na    6\nt    7\ne    1\nn    2\no    4\nc    1\nz    1\nu    2\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 52\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     522.0\n1     859.0\n2     691.0\n3     654.0\n4     344.0\n      ...  \n95    365.0\n96     31.0\n97    496.0\n98    358.0\n99    609.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  3,  4,  4,  5,\n        6,  6,  7,  8,  8,  9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 17, 18,\n       19, 20, 21, 21, 22, 23, 24, 25, 26, 26, 27, 28, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 44, 45, 46, 46, 47,\n       48, 49, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, expected value: `array([522., 859., 691., 654., 344., ... ,\n       365.,  31., 496., 358., 609.])`, shape: `(82,)`, type: `ndarray`\n\nval, expected value: `array([522., 859., 691., 654., 344., ... ,  31., 496., 358.,\n       609.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 15, 27, 32, 41, 55, 63, 68,  0,  8,  2,  4,  5,  6, 37, -1,\n       -1, 69, -1,  7, 52,  9, 10, 11, 12, -1, 13, 14, 16, 17, 18, 56, 19,\n       20, 21, 22, 31, -1, -1, -1,  1, 23, 42, 13, 24, 40, 25, 26, 28, 29,\n       30, 33, 34, 35, 36, -1, -1, -1, 38, 39, 43, 44, 45, 46, 47, 49, 48,\n       50, 51, -1, -1, -1, 53, 54, 57, 76, 58, 59, 60, 61, 62, 60, 64, 65,\n       66, 67, -1, -1, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0, 11,  2,  4,  5,  6, 48,  7,\n        8, 87,  9, 10, 63, 12, 13, 14, 15, 85, 16, 17, 19, 20, 21, 70, 22,\n       23, 24, 25, 39, 26, 27, 28, 29, 30, 53, 31, 32, 51, 33, 34, 36, 37,\n       38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 58, 60, 59,\n       61, 62, 64, 65, 66, 67, 68, 71, 94, 72, 73, 74, 75, 76, 78, 79, 80,\n       81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30,\n       31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70,\n       71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-28') ... ('j', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-28    2\nw    2015-08-28    1\ns    2015-08-30    1\nw    2015-08-26    1\ny    2015-08-30    2\n                  ..\nt    2015-08-25    1\n     2015-08-23    1\nh    2015-08-23    1\ns    2015-08-27    1\nj    2015-08-30    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n### Expected case 53\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     522.0\n1     859.0\n2     691.0\n3     654.0\n4     344.0\n      ...  \n95    365.0\n96     31.0\n97    496.0\n98    358.0\n99    609.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,\n        2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,\n        5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,\n        9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n       13, 14, 14, 14, 15, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18,\n       18, 18, 18, 18, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24])`, type: `ndarray`\n\n_, expected value: `array([522., 859., 691., 654., 344., ... ,\n       365.,  31., 496., 358., 609.])`, shape: `(82,)`, type: `ndarray`\n\nval, expected value: `array([522., 859., 691., 654., 344., ... ,  31., 496., 358.,\n       609.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 15, 27, 41, 55, 68,  0,  8, 10, 25, 30, 65, -1,  2,  5, 13, 59,\n        3, 73, 81, -1,  4, 16, 80, -1, -1, -1,  6, 35, 37, -1, -1,  9, 60,\n       72, -1, -1, 26, 60, 69, -1, 23, 33, 42, 63,  7, 21, 52, 67, 11, 18,\n       47, 49, 56, 12, 17, 75, 79, 14, 22, 31, 74, 19, 29, 32, -1, 20, 48,\n       70, -1,  1, 53, -1, 13, 57, 76, 24, 28, 34, 40, 50, 66, 36, 58, 62,\n       64, 71, 77, 78, -1, 38, 54, 39, 44, 45, 61, 43, 46, -1, 51])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 69, 86,  0, 11, 13, 33, 38, 80, 85,  2,  5, 16, 73,\n        3, 91, 99, 83,  4, 19, 98, 27, 46, 66,  6, 43, 48,  7, 65, 12, 74,\n       90,  8, 47, 34, 78, 87,  9, 30, 41, 53, 77, 10, 24, 63, 82, 14, 21,\n       58, 60, 70, 15, 20, 93, 97, 17, 25, 39, 92, 22, 37, 40, 64, 23, 59,\n       88, 26, 29, 67, 28, 31, 71, 94, 32, 36, 42, 51, 61, 81, 44, 72, 76,\n       79, 89, 95, 96, 45, 49, 68, 50, 55, 56, 75, 54, 57, 84, 62])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 12, 17, 20, 24, 30, 35, 40, 45, 49, 54, 58, 62, 65, 69, 72, 73,\n       76, 82, 89, 90, 92, 96, 97, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False,  True,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 6, 5, 3, 4, 4, 4, 4, 5, 4, 5, 4, 4, 3, 4, 3, 1, 3, 6, 7, 1, 2,\n       4, 1, 1, 2])`, type: `ndarray`\n\nres, expected value: `array([6, 5, 3, 4, 4, 4, 4, 5, 4, 5, 4, 4, 3, 4, 3, 1, 3, 6, 7, 1, 2, 4,\n       1, 1, 2])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'w', 'j', 's', 'y', 'f', 'g', 'k', 'r', 'i', 'h', 'q', 'b', 'p',\n       'l', 'v', 'm', 'a', 't', 'e', 'n', 'o', 'c', 'z', 'u'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    6\nw    5\nj    3\ns    4\ny    4\nf    4\ng    4\nk    5\nr    4\ni    5\nh    4\nq    4\nb    3\np    4\nl    3\nv    1\nm    3\na    6\nt    7\ne    1\nn    2\no    4\nc    1\nz    1\nu    2\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 54\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     522.0\n1     859.0\n2     691.0\n3     654.0\n4     344.0\n      ...  \n95    365.0\n96     31.0\n97    496.0\n98    358.0\n99    609.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  3,  4,  4,  5,\n        6,  6,  7,  8,  8,  9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 17, 18,\n       19, 20, 21, 21, 22, 23, 24, 25, 26, 26, 27, 28, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 44, 45, 46, 46, 47,\n       48, 49, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, expected value: `array([522., 859., 691., 654., 344., ... ,\n       365.,  31., 496., 358., 609.])`, shape: `(82,)`, type: `ndarray`\n\nval, expected value: `array([522., 859., 691., 654., 344., ... ,  31., 496., 358.,\n       609.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 15, 27, 32, 41, 55, 63, 68,  0,  8,  2,  4,  5,  6, 37, -1,\n       -1, 69, -1,  7, 52,  9, 10, 11, 12, -1, 13, 14, 16, 17, 18, 56, 19,\n       20, 21, 22, 31, -1, -1, -1,  1, 23, 42, 13, 24, 40, 25, 26, 28, 29,\n       30, 33, 34, 35, 36, -1, -1, -1, 38, 39, 43, 44, 45, 46, 47, 49, 48,\n       50, 51, -1, -1, -1, 53, 54, 57, 76, 58, 59, 60, 61, 62, 60, 64, 65,\n       66, 67, -1, -1, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0, 11,  2,  4,  5,  6, 48,  7,\n        8, 87,  9, 10, 63, 12, 13, 14, 15, 85, 16, 17, 19, 20, 21, 70, 22,\n       23, 24, 25, 39, 26, 27, 28, 29, 30, 53, 31, 32, 51, 33, 34, 36, 37,\n       38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 58, 60, 59,\n       61, 62, 64, 65, 66, 67, 68, 71, 94, 72, 73, 74, 75, 76, 78, 79, 80,\n       81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30,\n       31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70,\n       71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-28') ... ('j', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-28    2\nw    2015-08-28    1\ns    2015-08-30    1\nw    2015-08-26    1\ny    2015-08-30    2\n                  ..\nt    2015-08-25    1\n     2015-08-23    1\nh    2015-08-23    1\ns    2015-08-27    1\nj    2015-08-30    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n### Expected case 55\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      775\n1      378\n2      128\n3      133\n4      681\n      ... \n995    370\n996    333\n997    513\n998    899\n999    346\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([775, 378, 128, 133, 681, ... , 169, 915, 632, 370, 899, 346])`, shape: `(661,)`, type: `ndarray`\n\nval, expected value: `array([775, 378, 128, 133, 681, ... , 632, 370, 333, 513, 899, 346])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([  0,  14,  25,  33,  57, ... , 491, 511, 581, 610, 630, 646])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0, 506,  26,  35,  59, ... , 837, 713, 852, 906, 935, 976])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  48,  83, 119, 163, 197, 242, 283, 325, 364, 399, 437, 478,\n       511, 547, 596, 642, 681, 719, 759, 793, 825, 863, 907, 932, 967])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([48, 35, 35, 42, 33, 44, 41, 42, 39, 34, 38, 41, 32, 36, 48, 45, 39,\n       37, 40, 34, 30, 37, 42, 25, 34, 31])`, type: `ndarray`\n\nres, expected value: `array([48, 35, 35, 42, 33, 44, 41, 42, 39, 34, 38, 41, 32, 36, 48, 45, 39,\n       37, 40, 34, 30, 37, 42, 25, 34, 31])`, type: `ndarray`\n\nri, expected value: `Index(['w', 'e', 't', 'm', 'q', 'k', 'v', 'p', 'g', 'r', 'a', 'i', 'd', 'h',\n       'n', 'x', 'f', 'l', 'o', 'u', 'c', 's', 'b', 'j', 'z', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nw    48\ne    35\nt    35\nm    42\nq    33\nk    44\nv    41\np    42\ng    39\nr    34\na    38\ni    41\nd    32\nh    36\nn    48\nx    45\nf    39\nl    37\no    40\nu    34\nc    30\ns    37\nb    42\nj    25\nz    34\ny    31\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 56\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      775\n1      378\n2      128\n3      133\n4      681\n      ... \n995    370\n996    333\n997    513\n998    899\n999    346\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 249, 250, 251, 252, 253, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([775, 378, 128, 133, 681, ... , 169, 915, 632, 370, 899, 346])`, shape: `(661,)`, type: `ndarray`\n\nval, expected value: `array([775, 378, 128, 133, 681, ... , 632, 370, 333, 513, 899, 346])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([  0,  14,  74, 215, 233, ... , 556,  75, 118, 220, 647, 654])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0, 506,  77, 247, 267, ... , 841, 845, 965, 971, 978, 985])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   6,  12,  15,  19, ... , 994, 995, 996, 997, 998, 999])`, shape: `(255,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 6,  6,  3,  4,  5,  7,  6, ... ,  1,  1,  1,  1,  1,  1,  1,  1])`, shape: `(255,)`, type: `ndarray`\n\nres, expected value: `array([ 6,  6,  3,  4,  5,  7,  6, ... ,  1,  1,  1,  1,  1,  1,  1,  1])`, shape: `(255,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('w', '2015-08-23') ... ('e', '2015-08-27')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nw    2015-08-23    6\ne    2015-08-29    6\nt    2015-08-23    3\nm    2015-09-01    4\nq    2015-08-28    5\n                  ..\nd    2015-08-31    1\nl    2015-08-24    1\nr    2015-08-29    1\nn    2015-08-29    1\ne    2015-08-27    1\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n### Expected case 57\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      775.0\n1      378.0\n2      128.0\n3      133.0\n4      681.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    899.0\n999    346.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([775., 378., 128., 133., 681., ... , 915.,\n       632., 899., 346.])`, shape: `(597,)`, type: `ndarray`\n\nval, expected value: `array([775., 378., 128., 133., 681., ... ,  nan,  nan,  nan, 899., 346.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 385, 434, 452, 519, 548, 568])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 911, 837, 713, 852, 906, 935])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59, 104, 140, 181, 212, 252, 291, 325, 361, 399, 433, 470, 507,\n       539, 573, 618, 662, 699, 736, 774, 806, 838, 872, 913, 936, 967])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([49, 42, 29, 32, 25, 33, 34, 27, 31, 31, 32, 34, 33, 27, 27, 41, 37,\n       37, 29, 33, 30, 27, 30, 32, 19, 28, 24])`, type: `ndarray`\n\nres, expected value: `array([42, 29, 32, 25, 33, 34, 27, 31, 31, 32, 34, 33, 27, 27, 41, 37, 37,\n       29, 33, 30, 27, 30, 32, 19, 28, 24])`, type: `ndarray`\n\nri, expected value: `Index(['w', 't', 'm', 'q', 'k', 'v', 'e', 'p', 'g', 'r', 'a', 'i', 'd', 'h',\n       'n', 'x', 'f', 'l', 'o', 'u', 'c', 's', 'b', 'j', 'z', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nw    42\nt    29\nm    32\nq    25\nk    33\nv    34\ne    27\np    31\ng    31\nr    32\na    34\ni    33\nd    27\nh    27\nn    41\nx    37\nf    37\nl    29\no    33\nu    30\nc    27\ns    30\nb    32\nj    19\nz    28\ny    24\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 58\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      775.0\n1      378.0\n2      128.0\n3      133.0\n4      681.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    899.0\n999    346.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 247, 248, 249, 250, 251, 252])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([775., 378., 128., 133., 681., ... , 915.,\n       632., 899., 346.])`, shape: `(597,)`, type: `ndarray`\n\nval, expected value: `array([775., 378., 128., 133., 681., ... ,  nan,  nan,  nan, 899., 346.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 122, 496,  -1, 191,  -1, 590])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 836, 841, 845, 971, 978, 985])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  89,  92,  96, 102, ... ,\n       994, 995, 996, 997, 998, 999])`, shape: `(253,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... ,  True, False,  True,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([70,  5,  3,  4,  6,  5,  3, ... ,  1,  1,  1,  1,  1,  1,  1,  1])`, shape: `(254,)`, type: `ndarray`\n\nres, expected value: `array([ 5,  3,  4,  6,  5,  3,  3, ... ,  1,  1,  1,  1,  1,  1,  1,  1])`, shape: `(253,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('w', '2015-08-23') ... ('e', '2015-08-27')],\n           names=['jim', 'joe'], length=253)`, shape: `(253,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nw    2015-08-23    5\nt    2015-08-23    3\nq    2015-08-28    4\nk    2015-08-25    6\nv    2015-08-28    5\n                  ..\ne    2015-08-30    1\nd    2015-08-31    1\nr    2015-08-29    1\nn    2015-08-29    1\ne    2015-08-27    1\nName: julie, Length: 253, dtype: int64`, type: `Series`\n\n### Expected case 59\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      775.0\n1      378.0\n2      128.0\n3      133.0\n4      681.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    899.0\n999    346.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([775., 378., 128., 133., 681., ... , 915.,\n       632., 899., 346.])`, shape: `(597,)`, type: `ndarray`\n\nval, expected value: `array([775., 378., 128., 133., 681., ... ,  nan,  nan,  nan, 899., 346.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 385, 434, 452, 519, 548, 568])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 911, 837, 713, 852, 906, 935])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59, 104, 140, 181, 212, 252, 291, 325, 361, 399, 433, 470, 507,\n       539, 573, 618, 662, 699, 736, 774, 806, 838, 872, 913, 936, 967])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([49, 42, 29, 32, 25, 33, 34, 27, 31, 31, 32, 34, 33, 27, 27, 41, 37,\n       37, 29, 33, 30, 27, 30, 32, 19, 28, 24])`, type: `ndarray`\n\nres, expected value: `array([42, 29, 32, 25, 33, 34, 27, 31, 31, 32, 34, 33, 27, 27, 41, 37, 37,\n       29, 33, 30, 27, 30, 32, 19, 28, 24])`, type: `ndarray`\n\nri, expected value: `Index(['w', 't', 'm', 'q', 'k', 'v', 'e', 'p', 'g', 'r', 'a', 'i', 'd', 'h',\n       'n', 'x', 'f', 'l', 'o', 'u', 'c', 's', 'b', 'j', 'z', 'y'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nw    42\nt    29\nm    32\nq    25\nk    33\nv    34\ne    27\np    31\ng    31\nr    32\na    34\ni    33\nd    27\nh    27\nn    41\nx    37\nf    37\nl    29\no    33\nu    30\nc    27\ns    30\nb    32\nj    19\nz    28\ny    24\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 60\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      775.0\n1      378.0\n2      128.0\n3      133.0\n4      681.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    899.0\n999    346.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 247, 248, 249, 250, 251, 252])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([775., 378., 128., 133., 681., ... , 915.,\n       632., 899., 346.])`, shape: `(597,)`, type: `ndarray`\n\nval, expected value: `array([775., 378., 128., 133., 681., ... ,  nan,  nan,  nan, 899., 346.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 122, 496,  -1, 191,  -1, 590])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 836, 841, 845, 971, 978, 985])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  89,  92,  96, 102, ... ,\n       994, 995, 996, 997, 998, 999])`, shape: `(253,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... ,  True, False,  True,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([70,  5,  3,  4,  6,  5,  3, ... ,  1,  1,  1,  1,  1,  1,  1,  1])`, shape: `(254,)`, type: `ndarray`\n\nres, expected value: `array([ 5,  3,  4,  6,  5,  3,  3, ... ,  1,  1,  1,  1,  1,  1,  1,  1])`, shape: `(253,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('w', '2015-08-23') ... ('e', '2015-08-27')],\n           names=['jim', 'joe'], length=253)`, shape: `(253,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nw    2015-08-23    5\nt    2015-08-23    3\nq    2015-08-28    4\nk    2015-08-25    6\nv    2015-08-28    5\n                  ..\ne    2015-08-30    1\nd    2015-08-31    1\nr    2015-08-29    1\nn    2015-08-29    1\ne    2015-08-27    1\nName: julie, Length: 253, dtype: int64`, type: `Series`\n\n### Expected case 61\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       484\n1       780\n2       301\n3       656\n4       279\n       ... \n9995     40\n9996    870\n9997    355\n9998    925\n9999     63\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([484, 780, 301, 656, 279, ... , 602, 443,  84, 137, 978, 196])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([484, 780, 301, ..., 355, 925,  63])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   0,   7, ..., 983, 991, 999])`, type: `ndarray`\n\nsorter, expected value: `array([   0, 6649, 9418, ..., 4100, 8326, 7946])`, type: `ndarray`\n\nidx, expected value: `array([   0,  401,  798, 1166, 1528, 1888, 2277, 2666, 3038, 3445, 3816,\n       4242, 4632, 5026, 5385, 5768, 6145, 6553, 6936, 7301, 7714, 8095,\n       8490, 8879, 9212, 9620])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([329, 315, 311, 294, 311, 322, 324, 306, 338, 303, 356, 325, 319,\n       308, 323, 317, 330, 326, 317, 332, 317, 315, 320, 288, 334, 326])`, type: `ndarray`\n\nres, expected value: `array([329, 315, 311, 294, 311, 322, 324, 306, 338, 303, 356, 325, 319,\n       308, 323, 317, 330, 326, 317, 332, 317, 315, 320, 288, 334, 326])`, type: `ndarray`\n\nri, expected value: `Index(['g', 'j', 's', 'i', 'c', 'p', 'b', 'e', 'x', 'r', 't', 'l', 'm', 'w',\n       'd', 'o', 'k', 'h', 'u', 'f', 'y', 'q', 'n', 'z', 'a', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ng    329\nj    315\ns    311\ni    294\nc    311\np    322\nb    324\ne    306\nx    338\nr    303\nt    356\nl    325\nm    319\nw    308\nd    323\no    317\nk    330\nh    326\nu    317\nf    332\ny    317\nq    315\nn    320\nz    288\na    334\nv    326\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 62\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       484\n1       780\n2       301\n3       656\n4       279\n       ... \n9995     40\n9996    870\n9997    355\n9998    925\n9999     63\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([484, 780, 301, 656, 279, ... , 602, 443,  84, 137, 978, 196])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([484, 780, 301, ..., 355, 925,  63])`, type: `ndarray`\n\ncodes, expected value: `array([  0,  40,  57, ..., 949, 959, 991])`, type: `ndarray`\n\nsorter, expected value: `array([   0, 1287, 7957, ..., 8824, 6285, 8326])`, type: `ndarray`\n\nidx, expected value: `array([   0,   43,   86,  129,  170, ... , 9813, 9852, 9887, 9917, 9960])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([42, 42, 42, 41, 40, 40, 42, ... , 42,\n       39, 34, 28, 41, 40])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([42, 42, 42, 41, 40, 40, 42, ... , 42,\n       39, 34, 28, 41, 40])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('g', '2015-08-28') ... ('v', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ng    2015-08-28    42\nj    2015-08-26    42\ns    2015-08-25    42\ni    2015-09-01    41\nc    2015-08-27    40\n                   ..\ng    2015-08-26    39\nz    2015-08-31    34\nw    2015-09-01    28\nm    2015-08-28    41\nv    2015-08-28    40\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 63\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       484.0\n1       780.0\n2       301.0\n3       656.0\n4       279.0\n        ...  \n9995     40.0\n9996    870.0\n9997    355.0\n9998    925.0\n9999     63.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([484., 780., 301., 656., 279., ... , 870., 196., 115., 505.,  50.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([484., 780., 301., ..., 355., 925.,  63.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 972, 979, 983])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 4772, 9458, 4543])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  967, 1304, 1643, 1988, 2350, 2722, 3075, 3447, 3799, 4208,\n       4578, 4948, 5288, 5647, 6026, 6402, 6759, 7101, 7467, 7814, 8189,\n       8560, 8871, 9261, 9612])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([394, 270, 244, 242, 267, 271, 283, 254, 279, 245, 302, 278, 267,\n       255, 261, 267, 251, 272, 260, 271, 253, 258, 271, 234, 286, 259,\n       271])`, type: `ndarray`\n\nres, expected value: `array([270, 244, 242, 267, 271, 283, 254, 279, 245, 302, 278, 267, 255,\n       261, 267, 251, 272, 260, 271, 253, 258, 271, 234, 286, 259, 271])`, type: `ndarray`\n\nri, expected value: `Index(['g', 's', 'i', 'c', 'p', 'b', 'e', 'x', 'r', 't', 'l', 'm', 'w', 'o',\n       'k', 'j', 'h', 'u', 'd', 'y', 'q', 'n', 'z', 'a', 'v', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ng    270\ns    244\ni    242\nc    267\np    271\nb    283\ne    254\nx    279\nr    245\nt    302\nl    278\nm    267\nw    255\no    261\nk    267\nj    251\nh    272\nu    260\nd    271\ny    253\nq    258\nn    271\nz    234\na    286\nv    259\nf    271\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 64\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       484.0\n1       780.0\n2       301.0\n3       656.0\n4       279.0\n        ...  \n9995     40.0\n9996    870.0\n9997    355.0\n9998    925.0\n9999     63.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([484., 780., 301., 656., 279., ... , 870., 196., 115., 505.,  50.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([484., 780., 301., ..., 355., 925.,  63.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 972, 979, 983])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 6285, 6662, 8326])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  882,  921,  960,  999, ... , 9829, 9870, 9895, 9934, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([496,  37,  35,  31,  34, ... ,  34,  20,  32,  24,\n        29])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([37, 35, 31, 34, 36, 27, 39, ... , 29,\n       34, 20, 32, 24, 29])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('g', '2015-08-28') ... ('v', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ng    2015-08-28    37\ns    2015-08-25    35\nc    2015-08-27    31\np    2015-08-26    34\nb    2015-08-24    36\n                   ..\ny    2015-09-01    34\nw    2015-09-01    20\nm    2015-08-28    32\nz    2015-08-31    24\nv    2015-08-28    29\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 65\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       484.0\n1       780.0\n2       301.0\n3       656.0\n4       279.0\n        ...  \n9995     40.0\n9996    870.0\n9997    355.0\n9998    925.0\n9999     63.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([484., 780., 301., 656., 279., ... , 870., 196., 115., 505.,  50.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([484., 780., 301., ..., 355., 925.,  63.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 972, 979, 983])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 4772, 9458, 4543])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  967, 1304, 1643, 1988, 2350, 2722, 3075, 3447, 3799, 4208,\n       4578, 4948, 5288, 5647, 6026, 6402, 6759, 7101, 7467, 7814, 8189,\n       8560, 8871, 9261, 9612])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([394, 270, 244, 242, 267, 271, 283, 254, 279, 245, 302, 278, 267,\n       255, 261, 267, 251, 272, 260, 271, 253, 258, 271, 234, 286, 259,\n       271])`, type: `ndarray`\n\nres, expected value: `array([270, 244, 242, 267, 271, 283, 254, 279, 245, 302, 278, 267, 255,\n       261, 267, 251, 272, 260, 271, 253, 258, 271, 234, 286, 259, 271])`, type: `ndarray`\n\nri, expected value: `Index(['g', 's', 'i', 'c', 'p', 'b', 'e', 'x', 'r', 't', 'l', 'm', 'w', 'o',\n       'k', 'j', 'h', 'u', 'd', 'y', 'q', 'n', 'z', 'a', 'v', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ng    270\ns    244\ni    242\nc    267\np    271\nb    283\ne    254\nx    279\nr    245\nt    302\nl    278\nm    267\nw    255\no    261\nk    267\nj    251\nh    272\nu    260\nd    271\ny    253\nq    258\nn    271\nz    234\na    286\nv    259\nf    271\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 66\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       484.0\n1       780.0\n2       301.0\n3       656.0\n4       279.0\n        ...  \n9995     40.0\n9996    870.0\n9997    355.0\n9998    925.0\n9999     63.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([484., 780., 301., 656., 279., ... , 870., 196., 115., 505.,  50.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([484., 780., 301., ..., 355., 925.,  63.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 972, 979, 983])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 6285, 6662, 8326])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  882,  921,  960,  999, ... , 9829, 9870, 9895, 9934, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([496,  37,  35,  31,  34, ... ,  34,  20,  32,  24,\n        29])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([37, 35, 31, 34, 36, 27, 39, ... , 29,\n       34, 20, 32, 24, 29])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('g', '2015-08-28') ... ('v', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ng    2015-08-28    37\ns    2015-08-25    35\nc    2015-08-27    31\np    2015-08-26    34\nb    2015-08-24    36\n                   ..\ny    2015-09-01    34\nw    2015-09-01    20\nm    2015-08-28    32\nz    2015-08-31    24\nv    2015-08-28    29\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 67\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        441\n1        233\n2        140\n3        227\n4        631\n        ... \n99995    678\n99996    623\n99997    964\n99998    908\n99999    283\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([441, 233, 140, 227, 631, ... , 715, 339, 531,  67, 778, 341])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([441, 233, 140, ..., 964, 908, 283])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   1,   1, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([    0, 46210, 95050, ..., 55935, 63708, 97657])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3970,  7976, 11884, 15643, 19467, 23295, 27116, 30945,\n       34752, 38509, 42229, 46119, 50032, 53831, 57647, 61526, 65427,\n       69379, 73191, 77088, 80851, 84709, 88543, 92413, 96195])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([979, 976, 980, 978, 977, 971, 978, 977, 975, 977, 978, 977, 979,\n       978, 984, 977, 982, 983, 976, 979, 969, 982, 971, 979, 984, 971])`, type: `ndarray`\n\nres, expected value: `array([979, 976, 980, 978, 977, 971, 978, 977, 975, 977, 978, 977, 979,\n       978, 984, 977, 982, 983, 976, 979, 969, 982, 971, 979, 984, 971])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'o', 'q', 'b', 'f', 'n', 'e', 'c', 'y', 'k', 'a', 'w', 'j', 'i',\n       't', 'r', 'l', 'v', 'g', 'z', 'u', 'h', 'p', 's', 'd', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    979\no    976\nq    980\nb    978\nf    977\nn    971\ne    978\nc    977\ny    975\nk    977\na    978\nw    977\nj    979\ni    978\nt    984\nr    977\nl    982\nv    983\ng    976\nz    979\nu    969\nh    982\np    971\ns    979\nd    984\nm    971\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 68\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        441\n1        233\n2        140\n3        227\n4        631\n        ... \n99995    678\n99996    623\n99997    964\n99998    908\n99999    283\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([441, 233, 140, 227, 631, ... , 715, 339, 531,  67, 778, 341])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([441, 233, 140, ..., 964, 908, 283])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   7,  11, ..., 996, 997, 997])`, type: `ndarray`\n\nsorter, expected value: `array([    0,   247, 51570, ..., 98419, 17711, 65564])`, type: `ndarray`\n\nidx, expected value: `array([    0,   377,   805,  1179, ... , 98098, 98491, 98884, 99271, 99617])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([303, 344, 313, 327, 316, ... , 296, 309, 324, 316, 289, 328])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([303, 344, 313, 327, 316, ... , 296, 309, 324, 316, 289, 328])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-28') ... ('h', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-28    303\no    2015-08-27    344\nq    2015-09-01    313\nb    2015-08-29    327\nf    2015-08-29    316\n                  ... \nz    2015-08-29    309\np    2015-08-27    324\nz    2015-08-31    316\np    2015-08-28    289\nh    2015-08-27    328\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 69\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        441.0\n1        233.0\n2        140.0\n3        227.0\n4        631.0\n         ...  \n99995    678.0\n99996    623.0\n99997    964.0\n99998    908.0\n99999    283.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([441., 233., 140., 227., 631., ... , 437., 465., 341., 778., 943.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([441., 233., 140., ..., 964., 908., 283.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 91049, 83098, 89922])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9610, 13289, 16830, 20441, 24057, 27658, 31250, 34838,\n       38381, 41891, 45569, 49244, 52822, 56588, 60180, 63817, 67483,\n       71215, 74821, 78467, 82019, 85646, 89247, 92871, 96446])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([998, 950, 947, 956, 945, 952, 957, 950, 946, 932, 947, 949, 962,\n       952, 951, 960, 956, 952, 958, 950, 958, 952, 957, 945, 956, 958,\n       945])`, type: `ndarray`\n\nres, expected value: `array([950, 947, 956, 945, 952, 957, 950, 946, 932, 947, 949, 962, 952,\n       951, 960, 956, 952, 958, 950, 958, 952, 957, 945, 956, 958, 945])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'q', 'b', 'f', 'n', 'e', 'c', 'y', 'k', 'a', 'w', 'j', 'i', 'o',\n       't', 'r', 'l', 'v', 'g', 'z', 'u', 'h', 'p', 's', 'd', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    950\nq    947\nb    956\nf    945\nn    952\ne    957\nc    950\ny    946\nk    932\na    947\nw    949\nj    962\ni    952\no    951\nt    960\nr    956\nl    952\nv    958\ng    950\nz    958\nu    952\nh    957\np    945\ns    956\nd    958\nm    945\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 70\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        441.0\n1        233.0\n2        140.0\n3        227.0\n4        631.0\n         ...  \n99995    678.0\n99996    623.0\n99997    964.0\n99998    908.0\n99999    283.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([441., 233., 140., 227., 631., ... , 437., 465., 341., 778., 943.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([441., 233., 140., ..., 964., 908., 283.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 996, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ...,  7220, 10905, 49651])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8773,  9115,  9471, ... , 98252, 98572, 98944, 99304, 99654])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([999, 248, 258, 263, 271, ... , 242, 271, 257, 265,\n       258])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([248, 258, 263, 271, 253, ... , 249, 242, 271, 257, 265, 258])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-28') ... ('h', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-28    248\nq    2015-09-01    258\nf    2015-08-29    263\n     2015-08-30    271\nn    2015-08-24    253\n                  ... \np    2015-08-28    242\ng    2015-08-27    271\nx    2015-08-26    257\ny    2015-08-29    265\nh    2015-08-27    258\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 71\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        441.0\n1        233.0\n2        140.0\n3        227.0\n4        631.0\n         ...  \n99995    678.0\n99996    623.0\n99997    964.0\n99998    908.0\n99999    283.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([441., 233., 140., 227., 631., ... , 437., 465., 341., 778., 943.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([441., 233., 140., ..., 964., 908., 283.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 91049, 83098, 89922])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9610, 13289, 16830, 20441, 24057, 27658, 31250, 34838,\n       38381, 41891, 45569, 49244, 52822, 56588, 60180, 63817, 67483,\n       71215, 74821, 78467, 82019, 85646, 89247, 92871, 96446])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([998, 950, 947, 956, 945, 952, 957, 950, 946, 932, 947, 949, 962,\n       952, 951, 960, 956, 952, 958, 950, 958, 952, 957, 945, 956, 958,\n       945])`, type: `ndarray`\n\nres, expected value: `array([950, 947, 956, 945, 952, 957, 950, 946, 932, 947, 949, 962, 952,\n       951, 960, 956, 952, 958, 950, 958, 952, 957, 945, 956, 958, 945])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'q', 'b', 'f', 'n', 'e', 'c', 'y', 'k', 'a', 'w', 'j', 'i', 'o',\n       't', 'r', 'l', 'v', 'g', 'z', 'u', 'h', 'p', 's', 'd', 'm'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    950\nq    947\nb    956\nf    945\nn    952\ne    957\nc    950\ny    946\nk    932\na    947\nw    949\nj    962\ni    952\no    951\nt    960\nr    956\nl    952\nv    958\ng    950\nz    958\nu    952\nh    957\np    945\ns    956\nd    958\nm    945\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 72\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        441.0\n1        233.0\n2        140.0\n3        227.0\n4        631.0\n         ...  \n99995    678.0\n99996    623.0\n99997    964.0\n99998    908.0\n99999    283.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([441., 233., 140., 227., 631., ... , 437., 465., 341., 778., 943.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([441., 233., 140., ..., 964., 908., 283.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 996, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ...,  7220, 10905, 49651])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8773,  9115,  9471, ... , 98252, 98572, 98944, 99304, 99654])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([999, 248, 258, 263, 271, ... , 242, 271, 257, 265,\n       258])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([248, 258, 263, 271, 253, ... , 249, 242, 271, 257, 265, 258])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-28') ... ('h', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-28    248\nq    2015-09-01    258\nf    2015-08-29    263\n     2015-08-30    271\nn    2015-08-24    253\n                  ... \np    2015-08-28    242\ng    2015-08-27    271\nx    2015-08-26    257\ny    2015-08-29    265\nh    2015-08-27    258\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 73\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     3\n1     4\n2     7\n3     7\n4     2\n     ..\n95    3\n96    6\n97    5\n98    3\n99    9\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,\n        3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6,  6,  7,  7,  7,\n        7,  7,  8,  8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 11, 12, 12, 12,\n       13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16,\n       16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20,\n       20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `array([3, 4, 7, 2, 9, 1, 6, 8, 5, 0])`, type: `ndarray`\n\nval, expected value: `array([3, 4, 7, 7, 2, 9, 1, 6, 8, 4, 4, 3, 7, 4, 5, 0, 9, 2, 8, 4, 5, 7,\n       1, 7, 1, 6, 2, 3, 3, 6, 7, 4, 7, 8, 2, 2, 0, 8, 0, 7, 0, 2, 1, 5,\n       2, 9, 9, 3, 2, 8, 7, 4, 5, 0, 8, 4, 7, 6, 4, 5, 5, 6, 7, 7, 2, 8,\n       6, 8, 0, 5, 5, 2, 8, 5, 9, 7, 9, 9, 0, 3, 6, 8, 8, 8, 5, 6, 4, 6,\n       7, 9, 9, 6, 0, 2, 2, 3, 6, 5, 3, 9])`, type: `ndarray`\n\ncodes, expected value: `array([1, 3, 4, 6, 8, 0, 2, 2, 6, 8, 9, 1, 2, 7, 0, 1, 2, 6, 6, 7, 8, 8,\n       0, 3, 3, 9, 3, 9, 2, 4, 6, 3, 4, 4, 7, 9, 1, 4, 4, 1, 3, 6, 7, 2,\n       7, 2, 4, 8, 0, 2, 8, 2, 2, 7, 1, 5, 6, 0, 1, 1, 2, 3, 7, 8, 9, 0,\n       1, 5, 6, 7, 0, 2, 2, 9, 2, 3, 4, 5, 6, 8, 3, 6, 8, 8, 3, 4, 6, 0,\n       7, 7, 7, 1, 3, 7, 9, 9, 3, 4, 5, 8])`, type: `ndarray`\n\nsorter, expected value: `array([10,  4, 77, 61, 69, 95, 32, 39, 57, 73, 40, 58, 12, 81,  0, 19, 50,\n       25, 96,  8, 14, 43, 27, 26, 34, 53, 17, 92, 75, 74, 85, 64, 45, 89,\n       18, 68,  1, 16, 76, 51, 71,  7, 67, 21, 37, 56, 46, 84, 79, 63, 20,\n       23, 88, 82, 55, 24, 87, 98,  9, 13,  2, 94, 54, 97, 38, 11, 86, 22,\n       80, 33, 47, 30, 62, 36,  3, 48,  5, 42, 29, 60, 35, 91, 59, 70, 93,\n       99, 66, 28, 83, 49, 65, 31, 41, 72, 15, 78, 44, 90,  6, 52])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  5, 11, 14, 22, 26, 28, 31, 36, 39, 43, 45, 48, 51, 54, 57, 65,\n       70, 74, 80, 84, 87, 89, 91, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([5, 5, 3, 6, 3, 2, 3, 4, 2, 4, 2, 3, 3, 2, 3, 7, 5, 3, 6, 3, 3, 2,\n       1, 4, 4])`, type: `ndarray`\n\nres, expected value: `array([5, 5, 3, 6, 3, 2, 3, 4, 2, 4, 2, 3, 3, 2, 3, 7, 5, 3, 6, 3, 3, 2,\n       1, 4, 4])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    5\nb    5\nc    3\nd    6\ne    3\nf    2\ng    3\nh    4\ni    2\nj    4\nk    2\nl    3\nm    3\nn    2\no    3\np    7\nq    5\ns    3\nt    6\nu    3\nv    3\nw    2\nx    1\ny    4\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 74\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     3\n1     4\n2     7\n3     7\n4     2\n     ..\n95    3\n96    6\n97    5\n98    3\n99    9\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  2,  3,  4,  5,  6,  7,  7,  7,  8,  9, 10, 11, 12, 13,\n       13, 14, 15, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n       45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 58,\n       59, 60, 61, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 69, 70, 71, 72,\n       72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83, 84, 84])`, type: `ndarray`\n\n_, expected value: `array([3, 4, 7, 2, 9, 1, 6, 8, 5, 0])`, type: `ndarray`\n\nval, expected value: `array([3, 4, 7, 7, 2, 9, 1, 6, 8, 4, 4, 3, 7, 4, 5, 0, 9, 2, 8, 4, 5, 7,\n       1, 7, 1, 6, 2, 3, 3, 6, 7, 4, 7, 8, 2, 2, 0, 8, 0, 7, 0, 2, 1, 5,\n       2, 9, 9, 3, 2, 8, 7, 4, 5, 0, 8, 4, 7, 6, 4, 5, 5, 6, 7, 7, 2, 8,\n       6, 8, 0, 5, 5, 2, 8, 5, 9, 7, 9, 9, 0, 3, 6, 8, 8, 8, 5, 6, 4, 6,\n       7, 9, 9, 6, 0, 2, 2, 3, 6, 5, 3, 9])`, type: `ndarray`\n\ncodes, expected value: `array([6, 8, 1, 3, 4, 2, 0, 8, 2, 6, 9, 1, 7, 2, 6, 8, 1, 8, 7, 2, 6, 0,\n       0, 3, 9, 3, 3, 9, 6, 2, 4, 3, 7, 4, 4, 9, 1, 4, 4, 6, 3, 1, 7, 7,\n       2, 2, 8, 4, 8, 0, 2, 2, 2, 7, 5, 6, 1, 0, 7, 3, 8, 2, 1, 9, 1, 5,\n       0, 7, 1, 6, 0, 2, 9, 2, 8, 4, 6, 2, 3, 5, 6, 8, 8, 3, 3, 4, 6, 7,\n       0, 7, 7, 9, 9, 7, 1, 3, 3, 4, 5, 8])`, type: `ndarray`\n\nsorter, expected value: `array([61, 69, 10,  4, 77, 32, 95, 73, 39, 57, 40, 58, 81, 12, 96, 14, 19,\n       43,  8, 50, 25,  0, 27, 34, 53, 26, 17, 92, 85, 75, 74, 64, 18, 89,\n       45, 68,  1, 16, 76,  7, 71, 51, 67, 37, 21, 56, 84, 46, 20, 79, 63,\n       88, 23, 82, 24, 87, 55, 98, 54, 94, 97,  2,  9, 38, 13, 22, 11, 33,\n       86, 80, 47, 62, 36, 30, 60,  5, 29,  3, 48, 42, 91, 59, 70, 35, 93,\n       99, 66, 83, 28, 49, 65, 15, 78, 72, 31, 41, 44, 90,  6, 52])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  2,  4,  5,  6,  7,  8, 11, 12, 13, 14, 15, 16, 18, 19, 21,\n       22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n       40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57,\n       58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77,\n       79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(85,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    1\n     2015-08-26    1\n     2015-08-28    2\n     2015-08-31    1\nb    2015-08-23    1\n                  ..\ny    2015-08-31    1\n     2015-09-01    1\nz    2015-08-30    1\n     2015-08-31    1\n     2015-09-01    2\nName: julie, Length: 85, dtype: int64`, type: `Series`\n\n### Expected case 75\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     3.0\n1     4.0\n2     7.0\n3     7.0\n4     2.0\n     ... \n95    3.0\n96    6.0\n97    5.0\n98    3.0\n99    9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,\n        2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  6,\n        6,  6,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 11,\n       12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15,\n       16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19,\n       20, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `array([3., 4., 7., 2., 9., 1., 5., 0., 8., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 3.,  4.,  7.,  7.,  2., ... ,  2.,  3.,  6.,  5.,  3.,  9.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  3,  6,  6,  8,  1,  3,  4,  9,  0,  2,  2,  6,  7,  9,  1,\n        2,  8, -1,  0,  1,  2,  6,  6,  9,  9, -1, -1,  3,  7,  3,  7, -1,\n        2,  4, -1, -1,  4,  7,  4,  4, -1,  1,  3,  8,  2,  8, -1, -1,  2,\n        0,  2,  6,  2,  2,  8,  1,  5,  9, -1,  0,  1,  2,  3,  6,  7,  8,\n        0,  5,  8,  9, -1,  2,  2,  7,  2,  3,  4,  5,  6,  9,  6,  6,  9,\n       -1,  3,  4, -1, -1, -1,  8,  1,  3,  7,  7,  8,  3,  4,  5])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 86, 35, 52, 69, 18, 10,  4, 77, 61, 95, 32, 39, 73, 40, 57, 58,\n       12, 81,  8,  0, 19, 50, 14, 43, 25, 96, 26, 27, 34, 53, 17, 92, 85,\n       75, 74, 45, 64, 89, 68, 16, 76,  7, 51, 71, 67, 21, 37, 46, 84, 56,\n       79, 63, 20, 23, 88, 82, 55, 24, 87,  9, 98, 13,  2, 94, 97, 38, 54,\n       11, 22, 33, 80, 47, 30, 62, 36,  3, 48,  5, 42, 60, 29, 59, 70, 91,\n       66, 93, 99, 28, 83, 65, 49, 31, 41, 15, 78, 72, 44, 90,  6])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 10, 16, 19, 27, 31, 33, 36, 40, 42, 46, 48, 51, 54, 57, 60, 68,\n       72, 76, 82, 85, 88, 90, 92, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 4, 5, 3, 6, 3, 2, 3, 3, 1, 4, 2, 2, 3, 2, 3, 8, 4, 3, 6, 2, 3,\n       1, 2, 4, 3])`, type: `ndarray`\n\nres, expected value: `array([4, 5, 3, 6, 3, 2, 3, 3, 1, 4, 2, 2, 3, 2, 3, 8, 4, 3, 6, 2, 3, 1,\n       2, 4, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    4\nb    5\nc    3\nd    6\ne    3\nf    2\ng    3\nh    3\ni    1\nj    4\nk    2\nl    2\nm    3\nn    2\no    3\np    8\nq    4\ns    3\nt    6\nu    2\nv    3\nw    1\nx    2\ny    4\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 76\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     3.0\n1     4.0\n2     7.0\n3     7.0\n4     2.0\n     ... \n95    3.0\n96    6.0\n97    5.0\n98    3.0\n99    9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  5,\n        6,  7,  8,  9, 10, 11, 11, 12, 13, 13, 14, 15, 15, 16, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n       37, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 51,\n       52, 53, 54, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 65,\n       66, 66, 67, 68, 69, 70, 71, 72, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, expected value: `array([3., 4., 7., 2., 9., 1., 5., 0., 8., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 3.,  4.,  7.,  7.,  2., ... ,  2.,  3.,  6.,  5.,  3.,  9.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  2,  3,  4,  6,  6,  7,  8,  9,  1,  3,  2,  0,  6,  2,  9,\n        1,  8,  2,  9,  6,  1,  6, -1,  2,  9,  0, -1,  3,  7, -1,  3,  7,\n       -1,  2,  4, -1,  4, -1,  7,  4,  4, -1,  3,  1,  8,  8,  2,  2, -1,\n       -1,  6,  0,  2,  2,  2,  8,  5,  9,  1,  0,  8,  3,  6,  2, -1,  7,\n        1,  5,  0,  8,  9, -1,  2,  7,  2,  6,  4,  9,  3,  5,  6,  9,  6,\n        3,  4, -1, -1, -1,  8, -1,  7,  7,  8,  1,  3,  3,  4,  5])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 86,  3, 35, 77, 52, 69, 40, 18, 61, 10,  4, 32, 95, 73, 39, 57,\n       58, 81, 12, 96, 14, 19, 43,  8, 50, 25,  0, 27, 34, 53, 26, 17, 92,\n       85, 75, 74, 64, 89, 45, 68, 16, 76,  7, 71, 51, 67, 37, 21, 56, 84,\n       46, 20, 79, 63, 88, 23, 82, 24, 87, 55, 98, 54, 94, 97,  2,  9, 38,\n       13, 22, 11, 33, 80, 47, 62, 36, 30, 60,  5, 29, 48, 42, 59, 91, 70,\n       93, 99, 66, 83, 28, 49, 65, 15, 78, 72, 31, 41, 44, 90,  6])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 30,\n       31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n       48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87,\n       88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([7, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    1\n     2015-08-28    2\nb    2015-08-23    1\n     2015-08-27    1\n     2015-08-28    1\n                  ..\ny    2015-08-31    1\n     2015-09-01    1\nz    2015-08-30    1\n     2015-08-31    1\n     2015-09-01    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n### Expected case 77\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     3.0\n1     4.0\n2     7.0\n3     7.0\n4     2.0\n     ... \n95    3.0\n96    6.0\n97    5.0\n98    3.0\n99    9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,\n        2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  6,\n        6,  6,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 11,\n       12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15,\n       16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19,\n       20, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `array([3., 4., 7., 2., 9., 1., 5., 0., 8., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 3.,  4.,  7.,  7.,  2., ... ,  2.,  3.,  6.,  5.,  3.,  9.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  3,  6,  6,  8,  1,  3,  4,  9,  0,  2,  2,  6,  7,  9,  1,\n        2,  8, -1,  0,  1,  2,  6,  6,  9,  9, -1, -1,  3,  7,  3,  7, -1,\n        2,  4, -1, -1,  4,  7,  4,  4, -1,  1,  3,  8,  2,  8, -1, -1,  2,\n        0,  2,  6,  2,  2,  8,  1,  5,  9, -1,  0,  1,  2,  3,  6,  7,  8,\n        0,  5,  8,  9, -1,  2,  2,  7,  2,  3,  4,  5,  6,  9,  6,  6,  9,\n       -1,  3,  4, -1, -1, -1,  8,  1,  3,  7,  7,  8,  3,  4,  5])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 86, 35, 52, 69, 18, 10,  4, 77, 61, 95, 32, 39, 73, 40, 57, 58,\n       12, 81,  8,  0, 19, 50, 14, 43, 25, 96, 26, 27, 34, 53, 17, 92, 85,\n       75, 74, 45, 64, 89, 68, 16, 76,  7, 51, 71, 67, 21, 37, 46, 84, 56,\n       79, 63, 20, 23, 88, 82, 55, 24, 87,  9, 98, 13,  2, 94, 97, 38, 54,\n       11, 22, 33, 80, 47, 30, 62, 36,  3, 48,  5, 42, 60, 29, 59, 70, 91,\n       66, 93, 99, 28, 83, 65, 49, 31, 41, 15, 78, 72, 44, 90,  6])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 10, 16, 19, 27, 31, 33, 36, 40, 42, 46, 48, 51, 54, 57, 60, 68,\n       72, 76, 82, 85, 88, 90, 92, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 4, 5, 3, 6, 3, 2, 3, 3, 1, 4, 2, 2, 3, 2, 3, 8, 4, 3, 6, 2, 3,\n       1, 2, 4, 3])`, type: `ndarray`\n\nres, expected value: `array([4, 5, 3, 6, 3, 2, 3, 3, 1, 4, 2, 2, 3, 2, 3, 8, 4, 3, 6, 2, 3, 1,\n       2, 4, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    4\nb    5\nc    3\nd    6\ne    3\nf    2\ng    3\nh    3\ni    1\nj    4\nk    2\nl    2\nm    3\nn    2\no    3\np    8\nq    4\ns    3\nt    6\nu    2\nv    3\nw    1\nx    2\ny    4\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 78\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     3.0\n1     4.0\n2     7.0\n3     7.0\n4     2.0\n     ... \n95    3.0\n96    6.0\n97    5.0\n98    3.0\n99    9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  5,\n        6,  7,  8,  9, 10, 11, 11, 12, 13, 13, 14, 15, 15, 16, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n       37, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 51,\n       52, 53, 54, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 65,\n       66, 66, 67, 68, 69, 70, 71, 72, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, expected value: `array([3., 4., 7., 2., 9., 1., 5., 0., 8., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 3.,  4.,  7.,  7.,  2., ... ,  2.,  3.,  6.,  5.,  3.,  9.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  2,  3,  4,  6,  6,  7,  8,  9,  1,  3,  2,  0,  6,  2,  9,\n        1,  8,  2,  9,  6,  1,  6, -1,  2,  9,  0, -1,  3,  7, -1,  3,  7,\n       -1,  2,  4, -1,  4, -1,  7,  4,  4, -1,  3,  1,  8,  8,  2,  2, -1,\n       -1,  6,  0,  2,  2,  2,  8,  5,  9,  1,  0,  8,  3,  6,  2, -1,  7,\n        1,  5,  0,  8,  9, -1,  2,  7,  2,  6,  4,  9,  3,  5,  6,  9,  6,\n        3,  4, -1, -1, -1,  8, -1,  7,  7,  8,  1,  3,  3,  4,  5])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 86,  3, 35, 77, 52, 69, 40, 18, 61, 10,  4, 32, 95, 73, 39, 57,\n       58, 81, 12, 96, 14, 19, 43,  8, 50, 25,  0, 27, 34, 53, 26, 17, 92,\n       85, 75, 74, 64, 89, 45, 68, 16, 76,  7, 71, 51, 67, 37, 21, 56, 84,\n       46, 20, 79, 63, 88, 23, 82, 24, 87, 55, 98, 54, 94, 97,  2,  9, 38,\n       13, 22, 11, 33, 80, 47, 62, 36, 30, 60,  5, 29, 48, 42, 59, 91, 70,\n       93, 99, 66, 83, 28, 49, 65, 15, 78, 72, 31, 41, 44, 90,  6])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 30,\n       31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n       48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87,\n       88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([7, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    1\n     2015-08-28    2\nb    2015-08-23    1\n     2015-08-27    1\n     2015-08-28    1\n                  ..\ny    2015-08-31    1\n     2015-09-01    1\nz    2015-08-30    1\n     2015-08-31    1\n     2015-09-01    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n### Expected case 79\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      6\n1      6\n2      8\n3      0\n4      3\n      ..\n995    5\n996    0\n997    0\n998    4\n999    2\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([6, 8, 0, 3, 5, 2, 1, 9, 7, 4])`, type: `ndarray`\n\nval, expected value: `array([6, 6, 8, 0, 3, 6, 3, 5, 2, ... ,\n       8, 6, 4, 3, 4, 5, 0, 0, 4, 2])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 1, 1, 1, 1, 2, 2, 2, ... ,\n       7, 7, 7, 7, 8, 8, 8, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([132, 902,  61, 180, 316, ... ,  80,  82, 205,  76, 470, 998])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  35,  77, 119, 159, 194, 234, 269, 301, 344, 371, 414, 460,\n       494, 527, 574, 608, 650, 692, 733, 772, 812, 849, 884, 918, 962])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 0, 0, 0, 1, 0, 0, ... ,\n       0, 0, 0, 0, 1, 0, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10, 10,  9, 10, 10, 10, 10,  9, 10,  9,  9, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10,  9, 10, 10,  9])`, type: `ndarray`\n\nres, expected value: `array([10, 10,  9, 10, 10, 10, 10,  9, 10,  9,  9, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10,  9, 10, 10,  9])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc     9\nd    10\ne    10\nf    10\ng    10\nh     9\ni    10\nj     9\nk     9\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw     9\nx    10\ny    10\nz     9\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 80\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      6\n1      6\n2      8\n3      0\n4      3\n      ..\n995    5\n996    0\n997    0\n998    4\n999    2\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 256, 256, 256, 256, 256, 256])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([6, 8, 0, 3, 5, 2, 1, 9, 7, 4])`, type: `ndarray`\n\nval, expected value: `array([6, 6, 8, 0, 3, 6, 3, 5, 2, ... ,\n       8, 6, 4, 3, 4, 5, 0, 0, 4, 2])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([2, 3, 3, 3, 5, 1, 1, 2, 2, ... ,\n       2, 2, 6, 8, 0, 4, 4, 5, 7, 8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([155, 187, 812, 898, 726, ... , 554, 588, 963, 945, 119,  82])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   5,  10,  13,  16, ... , 979, 982, 983, 985, 989, 994])`, shape: `(257,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 0, 1, 1, 0, 1, 0, ... ,\n       1, 0, 1, 1, 1, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([3, 3, 3, 3, 4, 2, 2, 4, 2, ... , 3, 4, 2, 5, 3, 1, 2, 3, 4, 5])`, shape: `(257,)`, type: `ndarray`\n\nres, expected value: `array([3, 3, 3, 3, 4, 2, 2, 4, 2, ... , 3, 4, 2, 5, 3, 1, 2, 3, 4, 5])`, shape: `(257,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=257)`, shape: `(257,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    3\n     2015-08-25    3\n     2015-08-26    3\n     2015-08-27    4\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    4\n     2015-09-01    5\nName: julie, Length: 257, dtype: int64`, type: `Series`\n\n### Expected case 81\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      6.0\n1      6.0\n2      8.0\n3      0.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([6., 8., 0., 3., 9., 2., 1., 7., 5., 4.])`, type: `ndarray`\n\nval, expected value: `array([ 6.,  6.,  8.,  0.,  3., ... ,  4., nan, nan, nan,  4.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6,  7,  7,  8,  8,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... ,  82, 588, 963,  76, 470, 998])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  91, 128, 168, 207, 241, 276, 311, 342, 384, 408, 449, 492,\n       525, 554, 600, 631, 672, 712, 749, 787, 826, 859, 890, 924, 964])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 1, 0, 1, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11,  9, 11, 10, 11, 11,  9, 11, 10,  9, 10, 10, 11, 11, 11, 11, 11,\n       11, 11, 10, 11, 11, 10, 10, 10, 11, 10])`, type: `ndarray`\n\nres, expected value: `array([ 9, 11, 10, 11, 11,  9, 11, 10,  9, 10, 10, 11, 11, 11, 11, 11, 11,\n       11, 10, 11, 11, 10, 10, 10, 11, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     9\nb    11\nc    10\nd    11\ne    11\nf     9\ng    11\nh    10\ni     9\nj    10\nk    10\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    10\nt    11\nu    11\nv    10\nw    10\nx    10\ny    11\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 82\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      6.0\n1      6.0\n2      8.0\n3      0.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 255, 255, 255, 255, 255, 255])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([6., 8., 0., 3., 9., 2., 1., 7., 5., 4.])`, type: `ndarray`\n\nval, expected value: `array([ 6.,  6.,  8.,  0.,  3., ... ,  4., nan, nan, nan,  4.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6,  7,  0,  4,  5,  7,  8,  8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 554, 119, 945,  82, 588, 963])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  89,  93,  96,  99, ... , 980, 983, 984, 986, 989, 994])`, shape: `(256,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11,  3,  3,  3,  2,  3,  2, ... ,  3,  1,  1,  3,\n        5,  5])`, shape: `(257,)`, type: `ndarray`\n\nres, expected value: `array([3, 3, 3, 2, 3, 2, 2, 4, 2, ... , 2, 4, 2, 5, 3, 1, 1, 3, 5, 5])`, shape: `(256,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=256)`, shape: `(256,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    3\n     2015-08-25    3\n     2015-08-26    2\n     2015-08-27    3\n                  ..\nz    2015-08-28    1\n     2015-08-29    1\n     2015-08-30    3\n     2015-08-31    5\n     2015-09-01    5\nName: julie, Length: 256, dtype: int64`, type: `Series`\n\n### Expected case 83\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      6.0\n1      6.0\n2      8.0\n3      0.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([6., 8., 0., 3., 9., 2., 1., 7., 5., 4.])`, type: `ndarray`\n\nval, expected value: `array([ 6.,  6.,  8.,  0.,  3., ... ,  4., nan, nan, nan,  4.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6,  7,  7,  8,  8,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... ,  82, 588, 963,  76, 470, 998])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  91, 128, 168, 207, 241, 276, 311, 342, 384, 408, 449, 492,\n       525, 554, 600, 631, 672, 712, 749, 787, 826, 859, 890, 924, 964])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 1, 0, 1, 0, 1, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11,  9, 11, 10, 11, 11,  9, 11, 10,  9, 10, 10, 11, 11, 11, 11, 11,\n       11, 11, 10, 11, 11, 10, 10, 10, 11, 10])`, type: `ndarray`\n\nres, expected value: `array([ 9, 11, 10, 11, 11,  9, 11, 10,  9, 10, 10, 11, 11, 11, 11, 11, 11,\n       11, 10, 11, 11, 10, 10, 10, 11, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     9\nb    11\nc    10\nd    11\ne    11\nf     9\ng    11\nh    10\ni     9\nj    10\nk    10\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    10\nt    11\nu    11\nv    10\nw    10\nx    10\ny    11\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 84\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      6.0\n1      6.0\n2      8.0\n3      0.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 255, 255, 255, 255, 255, 255])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([6., 8., 0., 3., 9., 2., 1., 7., 5., 4.])`, type: `ndarray`\n\nval, expected value: `array([ 6.,  6.,  8.,  0.,  3., ... ,  4., nan, nan, nan,  4.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  6,  7,  0,  4,  5,  7,  8,  8])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 554, 119, 945,  82, 588, 963])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  89,  93,  96,  99, ... , 980, 983, 984, 986, 989, 994])`, shape: `(256,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([11,  3,  3,  3,  2,  3,  2, ... ,  3,  1,  1,  3,\n        5,  5])`, shape: `(257,)`, type: `ndarray`\n\nres, expected value: `array([3, 3, 3, 2, 3, 2, 2, 4, 2, ... , 2, 4, 2, 5, 3, 1, 1, 3, 5, 5])`, shape: `(256,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=256)`, shape: `(256,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    3\n     2015-08-25    3\n     2015-08-26    2\n     2015-08-27    3\n                  ..\nz    2015-08-28    1\n     2015-08-29    1\n     2015-08-30    3\n     2015-08-31    5\n     2015-09-01    5\nName: julie, Length: 256, dtype: int64`, type: `Series`\n\n### Expected case 85\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       6\n1       9\n2       5\n3       1\n4       0\n       ..\n9995    5\n9996    1\n9997    8\n9998    5\n9999    7\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([6, 9, 5, 1, 0, 3, 2, 8, 4, 7])`, type: `ndarray`\n\nval, expected value: `array([6, 9, 5, ..., 8, 5, 7])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([  35,  249,  863, ..., 9216, 9545, 9700])`, type: `ndarray`\n\nidx, expected value: `array([   0,  405,  821, 1236, 1677, 2074, 2439, 2818, 3197, 3566, 3952,\n       4327, 4705, 5035, 5402, 5790, 6178, 6559, 6959, 7335, 7717, 8099,\n       8503, 8870, 9260, 9662])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 86\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       6\n1       9\n2       5\n3       1\n4       0\n       ..\n9995    5\n9996    1\n9997    8\n9998    5\n9999    7\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([6, 9, 5, 1, 0, 3, 2, 8, 4, 7])`, type: `ndarray`\n\nval, expected value: `array([6, 9, 5, ..., 8, 5, 7])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([  35, 3219, 3785, ..., 5701, 7813, 9545])`, type: `ndarray`\n\nidx, expected value: `array([   0,   39,   70,  103,  140, ... , 9826, 9853, 9885, 9918, 9956])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n        8, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n        8, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28     8\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 87\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       6.0\n1       9.0\n2       5.0\n3       1.0\n4       0.0\n       ... \n9995    5.0\n9996    1.0\n9997    8.0\n9998    5.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([6., 9., 5., 1., 0., 3., 2., 4., 7., 8.])`, type: `ndarray`\n\nval, expected value: `array([6., 9., 5., ..., 8., 5., 7.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 8536, 8780, 9422])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  969, 1364, 1751, 2165, 2534, 2881, 3238, 3591, 3942, 4303,\n       4657, 5012, 5328, 5669, 6031, 6397, 6750, 7129, 7479, 7841, 8200,\n       8580, 8926, 9300, 9682])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 88\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       6.0\n1       9.0\n2       5.0\n3       1.0\n4       0.0\n       ... \n9995    5.0\n9996    1.0\n9997    8.0\n9998    5.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([6., 9., 5., 1., 0., 3., 2., 4., 7., 8.])`, type: `ndarray`\n\nval, expected value: `array([6., 9., 5., ..., 8., 5., 7.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 1818, 4695, 5471])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  878,  906,  936,  971, ... , 9842, 9868, 9899, 9930, 9963])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 10, 11, 11, 11, 10, 11, ... ,\n       10,  9, 11, 11, 11, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10, 11, 11, 11, 10, 11, 11, ... , 10,\n        9, 11, 11, 11, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    10\n                   ..\nz    2015-08-28     9\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 89\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       6.0\n1       9.0\n2       5.0\n3       1.0\n4       0.0\n       ... \n9995    5.0\n9996    1.0\n9997    8.0\n9998    5.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([6., 9., 5., 1., 0., 3., 2., 4., 7., 8.])`, type: `ndarray`\n\nval, expected value: `array([6., 9., 5., ..., 8., 5., 7.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 8536, 8780, 9422])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  969, 1364, 1751, 2165, 2534, 2881, 3238, 3591, 3942, 4303,\n       4657, 5012, 5328, 5669, 6031, 6397, 6750, 7129, 7479, 7841, 8200,\n       8580, 8926, 9300, 9682])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 90\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       6.0\n1       9.0\n2       5.0\n3       1.0\n4       0.0\n       ... \n9995    5.0\n9996    1.0\n9997    8.0\n9998    5.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([6., 9., 5., 1., 0., 3., 2., 4., 7., 8.])`, type: `ndarray`\n\nval, expected value: `array([6., 9., 5., ..., 8., 5., 7.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 1818, 4695, 5471])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  878,  906,  936,  971, ... , 9842, 9868, 9899, 9930, 9963])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 10, 11, 11, 11, 10, 11, ... ,\n       10,  9, 11, 11, 11, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10, 11, 11, 11, 10, 11, 11, ... , 10,\n        9, 11, 11, 11, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    10\n                   ..\nz    2015-08-28     9\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 91\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        4\n1        6\n2        0\n3        8\n4        7\n        ..\n99995    3\n99996    8\n99997    0\n99998    3\n99999    3\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([4, 6, 0, 8, 7, 5, 1, 9, 3, 2])`, type: `ndarray`\n\nval, expected value: `array([4, 6, 0, ..., 0, 3, 3])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([  687,   772,  1311, ..., 98812, 99198, 99637])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3840,  7722, 11513, 15402, 19268, 23099, 26910, 30883,\n       34654, 38430, 42194, 46018, 49905, 53795, 57630, 61461, 65261,\n       69105, 73021, 76863, 80681, 84513, 88306, 92187, 96101])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 92\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        4\n1        6\n2        0\n3        8\n4        7\n        ..\n99995    3\n99996    8\n99997    0\n99998    3\n99999    3\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([4, 6, 0, 8, 7, 5, 1, 9, 3, 2])`, type: `ndarray`\n\nval, expected value: `array([4, 6, 0, ..., 0, 3, 3])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([ 3894, 11110, 14630, ..., 91845, 92615, 96873])`, type: `ndarray`\n\nidx, expected value: `array([    0,   401,   808,  1177, ... , 97991, 98381, 98774, 99158, 99571])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 93\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        4.0\n1        6.0\n2        0.0\n3        8.0\n4        7.0\n        ... \n99995    3.0\n99996    8.0\n99997    0.0\n99998    3.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([4., 6., 0., 8., 7., 5., 9., 3., 2., 1.])`, type: `ndarray`\n\nval, expected value: `array([4., 6., 0., ..., 0., 3., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99259, 99958, 99965])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9500, 13137, 16685, 20357, 23978, 27605, 31206, 34938,\n       38483, 42029, 45584, 49170, 52834, 56524, 60129, 63751, 67323,\n       70937, 74626, 78241, 81855, 85441, 88974, 92654, 96339])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 94\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        4.0\n1        6.0\n2        0.0\n3        8.0\n4        7.0\n        ... \n99995    3.0\n99996    8.0\n99997    0.0\n99998    3.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([4., 6., 0., 8., 7., 5., 9., 3., 2., 1.])`, type: `ndarray`\n\nval, expected value: `array([4., 6., 0., ..., 0., 3., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 93517, 95797, 99965])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8792,  9166,  9504, ... , 98168, 98521, 98872, 99224, 99602])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, ... ,\n       11, 11, 11, 11, 11, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, ... , 11,\n       11, 11, 11, 11, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 95\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        4.0\n1        6.0\n2        0.0\n3        8.0\n4        7.0\n        ... \n99995    3.0\n99996    8.0\n99997    0.0\n99998    3.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([4., 6., 0., 8., 7., 5., 9., 3., 2., 1.])`, type: `ndarray`\n\nval, expected value: `array([4., 6., 0., ..., 0., 3., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99259, 99958, 99965])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9500, 13137, 16685, 20357, 23978, 27605, 31206, 34938,\n       38483, 42029, 45584, 49170, 52834, 56524, 60129, 63751, 67323,\n       70937, 74626, 78241, 81855, 85441, 88974, 92654, 96339])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 96\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        4.0\n1        6.0\n2        0.0\n3        8.0\n4        7.0\n        ... \n99995    3.0\n99996    8.0\n99997    0.0\n99998    3.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([4., 6., 0., 8., 7., 5., 9., 3., 2., 1.])`, type: `ndarray`\n\nval, expected value: `array([4., 6., 0., ..., 0., 3., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 93517, 95797, 99965])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8792,  9166,  9504, ... , 98168, 98521, 98872, 99224, 99602])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([11, 11, 11, 11, 11, 11, 11, ... ,\n       11, 11, 11, 11, 11, 11])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([11, 11, 11, 11, 11, 11, 11, ... , 11,\n       11, 11, 11, 11, 11])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 97\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     60\n1     15\n2     97\n3     34\n4     84\n      ..\n95    62\n96    10\n97     4\n98    97\n99    32\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,\n        5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  9,\n        9,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13,\n       13, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17,\n       18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20,\n       20, 21, 21, 21, 21, 22, 23, 23, 23, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([60, 15, 97, 34, 84, 87,  5,  8, 26, 93, 47, 50, 20, 45, 28, 65, 89,\n       83, 88, 21, 85, 61, 80, 31, 71, 76, 75, 86, 44, 66, 95, 37, 35, 25,\n       73, 63, 46, 54, 70, 99, 48, 98, 13, 53, 72, 10, 18, 23, 27, 62, 22,\n       49, 38, 32, 43, 24, 82,  6,  4])`, type: `ndarray`\n\nval, expected value: `array([60, 15, 97, 34, 84, 87,  5, 97,  8, 26, 93, 47, 50, 20, 45, 28, 65,\n       89, 83, 88, 83, 21, 85, 15, 15, 61, 80, 31, 15, 97, 71, 76, 75, 28,\n       86, 85, 26, 44, 66, 95, 37, 65, 34, 35, 25, 76, 73, 63, 85, 21, 46,\n       54, 70, 99, 48, 98, 15, 13, 53, 54, 46, 95, 72, 80,  5, 61, 10, 18,\n       23, 27, 62, 22, 31, 48, 85, 10, 49, 38, 50, 49, 32, 23, 43, 24,  8,\n        5, 53, 85, 63, 82, 93,  6, 20, 82, 15, 62, 10,  4, 97, 32])`, type: `ndarray`\n\ncodes, expected value: `array([16, 30, 40,  6, 11, 20, 37, 47,  0,  2,  2, 27,  6,  7,  9, 21,  1,\n       11, 44, 56,  1,  1, 12, 19, 35,  1,  2, 30, 43, 45, 24, 43, 48, 22,\n       33, 35, 45, 55,  1,  7, 18, 20, 53, 21, 22, 31, 58, 51, 56, 57,  2,\n       20, 38, 49, 41, 53, 14, 25, 10, 28, 49, 52,  1,  4, 17, 17, 26, 50,\n        3, 15, 29, 36, 39,  5,  8, 19, 23, 32, 34, 45, 54, 13, 20, 23, 36,\n       51,  8,  9, 37, 47, 12, 14, 15, 40,  3, 42,  6, 20, 25, 46])`, type: `ndarray`\n\nsorter, expected value: `array([17, 39, 54, 64, 78, 22, 51, 81,  0,  7, 98, 34,  6,  8, 90, 65, 56,\n       12, 62, 93, 28, 94, 13, 21, 47,  1,  2, 61, 86, 66, 30, 58, 69, 63,\n       44, 88, 75, 83, 23, 84, 19, 87, 80, 25, 26, 40, 97, 79, 89, 91, 29,\n       35, 52, 70, 55, 99, 33, 31, 11, 37, 95, 77, 24,  4, 18, 20, 32, 71,\n       42, 41, 38, 60, 53,  5, 36, 49, 72, 43, 46, 96, 82, 14, 74, 27, 50,\n       76,  9, 10, 59, 68, 92, 15, 16, 73,  3, 57, 85, 48, 45, 67])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  3,  4,  8, 12, 16, 20, 25, 30, 33, 38, 43, 47, 50, 54, 56, 58,\n       62, 68, 73, 81, 86, 90, 91, 94, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 1, 4, 3, 4, 4, 4, 5, 3, 5, 5, 4, 3, 4, 2, 2, 4, 5, 5, 8, 5, 4,\n       1, 3, 2, 4])`, type: `ndarray`\n\nres, expected value: `array([3, 1, 4, 3, 4, 4, 4, 5, 3, 5, 5, 4, 3, 4, 2, 2, 4, 5, 5, 8, 5, 4,\n       1, 3, 2, 4])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    1\nc    4\nd    3\ne    4\nf    4\ng    4\nh    5\ni    3\nj    5\nk    5\nl    4\nm    3\nn    4\no    2\np    2\nq    4\nr    5\ns    5\nt    8\nu    5\nv    4\nw    1\nx    3\ny    2\nz    4\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 98\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     60\n1     15\n2     97\n3     34\n4     84\n      ..\n95    62\n96    10\n97     4\n98    97\n99    32\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n       15, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 26, 27, 28,\n       29, 30, 30, 30, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 39, 39, 40,\n       41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 53, 54, 54,\n       55, 56, 57, 58, 58, 59, 60, 60, 60, 61, 62, 63, 64, 65, 66, 66, 67,\n       67, 68, 69, 70, 71, 72, 73, 73, 74, 75, 76, 77, 78, 78, 79])`, type: `ndarray`\n\n_, expected value: `array([60, 15, 97, 34, 84, 87,  5,  8, 26, 93, 47, 50, 20, 45, 28, 65, 89,\n       83, 88, 21, 85, 61, 80, 31, 71, 76, 75, 86, 44, 66, 95, 37, 35, 25,\n       73, 63, 46, 54, 70, 99, 48, 98, 13, 53, 72, 10, 18, 23, 27, 62, 22,\n       49, 38, 32, 43, 24, 82,  6,  4])`, type: `ndarray`\n\nval, expected value: `array([60, 15, 97, 34, 84, 87,  5, 97,  8, 26, 93, 47, 50, 20, 45, 28, 65,\n       89, 83, 88, 83, 21, 85, 15, 15, 61, 80, 31, 15, 97, 71, 76, 75, 28,\n       86, 85, 26, 44, 66, 95, 37, 65, 34, 35, 25, 76, 73, 63, 85, 21, 46,\n       54, 70, 99, 48, 98, 15, 13, 53, 54, 46, 95, 72, 80,  5, 61, 10, 18,\n       23, 27, 62, 22, 31, 48, 85, 10, 49, 38, 50, 49, 32, 23, 43, 24,  8,\n        5, 53, 85, 63, 82, 93,  6, 20, 82, 15, 62, 10,  4, 97, 32])`, type: `ndarray`\n\ncodes, expected value: `array([16, 30, 40,  6, 20, 37, 47, 11,  0,  2,  2, 27, 21,  7,  9,  6, 44,\n        1, 56, 11,  1, 19,  1, 12, 35, 43,  2,  1, 30, 45, 48, 24, 43, 33,\n       45, 22, 35, 55,  1, 53,  7, 20, 18, 58, 22, 21, 31, 51, 56, 57, 20,\n       38, 49,  2, 41, 53, 14, 25, 28, 49, 10, 52, 26, 17,  1, 50,  4, 17,\n       15,  3, 36, 29, 39,  8, 32, 34, 45, 19, 54, 23,  5, 20, 13, 51, 23,\n       36, 47,  8,  9, 37, 12, 15, 40, 14, 42,  3,  6, 25, 46, 20])`, type: `ndarray`\n\nsorter, expected value: `array([17, 39, 54, 64, 22, 51, 81, 78,  0,  7, 98, 34, 65,  8, 90,  6, 62,\n       56, 93, 12, 94, 21, 28, 13, 47, 86,  2,  1, 61, 66, 69, 30, 58, 44,\n       75, 63, 88, 83, 23, 80, 84, 87, 19, 97, 26, 25, 40, 79, 89, 91, 35,\n       52, 70, 29, 55, 99, 33, 31, 37, 95, 11, 77, 32, 18, 24, 71,  4, 20,\n       41, 42, 60, 38, 53, 36, 43, 46, 96, 49, 82, 72,  5, 74, 14, 76, 27,\n       50, 68,  9, 10, 59, 92, 16, 73, 15, 57,  3, 85, 45, 67, 48])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 19,\n       20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40,\n       41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n       62, 63, 64, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 82, 84,\n       86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-28') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(80,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-28    3\nb    2015-08-28    1\nc    2015-08-23    1\n     2015-08-26    1\n     2015-08-28    1\n                  ..\ny    2015-08-27    1\n     2015-08-28    1\nz    2015-08-26    1\n     2015-08-27    2\n     2015-08-30    1\nName: julie, Length: 80, dtype: int64`, type: `Series`\n\n### Expected case 99\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     60.0\n1     15.0\n2     97.0\n3     34.0\n4     84.0\n      ... \n95    62.0\n96    10.0\n97     4.0\n98    97.0\n99    32.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  2,  2,  2,  3,  3,  3,\n        3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,\n        8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12,\n       12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17,\n       18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20,\n       20, 21, 21, 21, 21, 22, 23, 23, 23, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([60., 15., 97., 34., 84., 87.,  5., 93., 47., 50., 20., 45., 28.,\n       65., 89., 83., 88., 21., 85., 61., 71., 76., 75., 86., 26., 44.,\n       66., 95., 37., 35., 25., 46., 54., 70., 99., 48., 98., 13., 53.,\n       72., 80., 18., 23., 27., 62., 22., 31., 10., 49., 38., 32., 43.,\n       63., 82.,  6.,  4.])`, type: `ndarray`\n\nval, expected value: `array([60., 15., 97., 34., 84., ... , 15., 62., 10.,  4., 97., 32.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 15, 18, 33, 38, 43, 14, 27, 35, -1,  9, 18, 32, 42, -1,  0,  2,\n       23, -1, -1,  6,  7,  1,  9, 39, 53, -1, -1,  1, 10, 17, -1,  2, 27,\n       20, 38, -1, 30, 40, 47, 52, -1,  1, 16, 18, 50, -1, 19, 28, 55, 48,\n       53, 54,  2, 44, 36, 50, 12, 21,  8, 25, 44, 49,  1,  4, 15, 22, 45,\n        3, 13, 26, 31, 34, -1,  5, 17, 24, 29, 46, 47, 51, -1, 11, 18, 31,\n       48, -1,  7, 32, 42, 10, 12, 13, 35,  3, 37, -1, -1, 18, 41])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 86, 69, 17, 39, 54, 64, 78, 22, 51, 81,  7,  0, 98,\n       34,  8, 65,  6, 90, 56, 12, 62, 93, 28, 47, 94, 13, 21, 66,  2, 61,\n       30, 58, 83, 44, 63, 75, 88, 84, 23, 19, 87, 80, 26, 25, 40, 97, 79,\n       89, 91, 29, 70, 55, 99, 33, 31, 11, 37, 95, 77, 24,  4, 20, 32, 71,\n       42, 41, 38, 60, 53, 46,  5, 49, 36, 43, 72, 96, 82, 27, 14, 74, 50,\n       76,  9, 10, 59, 68, 92, 15, 16, 73,  3, 57, 45, 85, 48, 67])`, type: `ndarray`\n\nidx, expected value: `array([ 6,  9, 10, 14, 18, 22, 26, 31, 34, 36, 41, 46, 50, 53, 55, 57, 59,\n       63, 68, 73, 81, 86, 90, 91, 94, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... ,  True,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 3, 1, 4, 4, 3, 4, 4, 3, 2, 5, 5, 4, 3, 2, 2, 2, 4, 5, 5, 8, 5,\n       4, 1, 3, 2, 3])`, type: `ndarray`\n\nres, expected value: `array([3, 1, 4, 4, 3, 4, 4, 3, 2, 5, 5, 4, 3, 2, 2, 2, 4, 5, 5, 8, 5, 4,\n       1, 3, 2, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    1\nc    4\nd    4\ne    3\nf    4\ng    4\nh    3\ni    2\nj    5\nk    5\nl    4\nm    3\nn    2\no    2\np    2\nq    4\nr    5\ns    5\nt    8\nu    5\nv    4\nw    1\nx    3\ny    2\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 100\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     60.0\n1     15.0\n2     97.0\n3     34.0\n4     84.0\n      ... \n95    62.0\n96    10.0\n97     4.0\n98    97.0\n99    32.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  3,  4,  5,\n        6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 28, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49,\n       49, 50, 51, 52, 53, 53, 54, 55, 55, 55, 56, 57, 58, 59, 60, 61, 61,\n       62, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71, 72, 72, 73])`, type: `ndarray`\n\n_, expected value: `array([60., 15., 97., 34., 84., 87.,  5., 93., 47., 50., 20., 45., 28.,\n       65., 89., 83., 88., 21., 85., 61., 71., 76., 75., 86., 26., 44.,\n       66., 95., 37., 35., 25., 46., 54., 70., 99., 48., 98., 13., 53.,\n       72., 80., 18., 23., 27., 62., 22., 31., 10., 49., 38., 32., 43.,\n       63., 82.,  6.,  4.])`, type: `ndarray`\n\nval, expected value: `array([60., 15., 97., 34., 84., ... , 15., 62., 10.,  4., 97., 32.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 15, 18, 28, 33, 38, 43, 49, 14, 27, 35, -1, 18, 32, 42,  9,\n        0, -1,  2, 23, -1, -1,  7,  6, 39,  1, 53,  9,  1, 17, -1, 10, -1,\n        2, 27, -1, 20, 38, 30, 47, -1, 40, 52,  1, 50, -1, 18, 16, 55, -1,\n       19, 48, 53, 54, 44,  2, 36, 50, 12, 21, 25, 44,  8, 22,  1, 45,  4,\n       15, 13,  3, 31, 26, 34, 24, -1, 29, 47, 17, 51, 46,  5, 18, 11, 48,\n       -1, 31, 42, -1,  7, 32, 10, 13, 35, 12, 37, -1, -1, 41, 18])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 86, 69, 77, 17, 39, 54, 64, 22, 51, 81, 78,\n        0,  7, 98, 34, 65,  8, 90,  6, 62, 56, 93, 12, 94, 21, 28, 13, 47,\n        2, 61, 66, 30, 58, 44, 75, 83, 63, 88, 23, 80, 84, 87, 19, 97, 26,\n       25, 79, 89, 91, 70, 29, 55, 99, 33, 31, 37, 95, 11, 32, 24, 71,  4,\n       20, 41, 42, 60, 38, 53, 36, 46, 43, 96, 49, 82, 72,  5, 74, 14, 76,\n       27, 50, 68,  9, 10, 59, 92, 16, 73, 15, 57, 85, 45, 67, 48])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28,\n       29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48,\n       49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69,\n       70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91,\n       92, 94, 95, 96, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... ,  True,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-28') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(74,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-28    3\nb    2015-08-28    1\nc    2015-08-23    1\n     2015-08-26    1\n     2015-08-28    1\n                  ..\nx    2015-09-01    1\ny    2015-08-27    1\nz    2015-08-26    1\n     2015-08-27    2\n     2015-08-30    1\nName: julie, Length: 74, dtype: int64`, type: `Series`\n\n### Expected case 101\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     60.0\n1     15.0\n2     97.0\n3     34.0\n4     84.0\n      ... \n95    62.0\n96    10.0\n97     4.0\n98    97.0\n99    32.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  2,  2,  2,  3,  3,  3,\n        3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,\n        8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12,\n       12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17,\n       18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20,\n       20, 21, 21, 21, 21, 22, 23, 23, 23, 24, 24, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([60., 15., 97., 34., 84., 87.,  5., 93., 47., 50., 20., 45., 28.,\n       65., 89., 83., 88., 21., 85., 61., 71., 76., 75., 86., 26., 44.,\n       66., 95., 37., 35., 25., 46., 54., 70., 99., 48., 98., 13., 53.,\n       72., 80., 18., 23., 27., 62., 22., 31., 10., 49., 38., 32., 43.,\n       63., 82.,  6.,  4.])`, type: `ndarray`\n\nval, expected value: `array([60., 15., 97., 34., 84., ... , 15., 62., 10.,  4., 97., 32.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 15, 18, 33, 38, 43, 14, 27, 35, -1,  9, 18, 32, 42, -1,  0,  2,\n       23, -1, -1,  6,  7,  1,  9, 39, 53, -1, -1,  1, 10, 17, -1,  2, 27,\n       20, 38, -1, 30, 40, 47, 52, -1,  1, 16, 18, 50, -1, 19, 28, 55, 48,\n       53, 54,  2, 44, 36, 50, 12, 21,  8, 25, 44, 49,  1,  4, 15, 22, 45,\n        3, 13, 26, 31, 34, -1,  5, 17, 24, 29, 46, 47, 51, -1, 11, 18, 31,\n       48, -1,  7, 32, 42, 10, 12, 13, 35,  3, 37, -1, -1, 18, 41])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 86, 69, 17, 39, 54, 64, 78, 22, 51, 81,  7,  0, 98,\n       34,  8, 65,  6, 90, 56, 12, 62, 93, 28, 47, 94, 13, 21, 66,  2, 61,\n       30, 58, 83, 44, 63, 75, 88, 84, 23, 19, 87, 80, 26, 25, 40, 97, 79,\n       89, 91, 29, 70, 55, 99, 33, 31, 11, 37, 95, 77, 24,  4, 20, 32, 71,\n       42, 41, 38, 60, 53, 46,  5, 49, 36, 43, 72, 96, 82, 27, 14, 74, 50,\n       76,  9, 10, 59, 68, 92, 15, 16, 73,  3, 57, 45, 85, 48, 67])`, type: `ndarray`\n\nidx, expected value: `array([ 6,  9, 10, 14, 18, 22, 26, 31, 34, 36, 41, 46, 50, 53, 55, 57, 59,\n       63, 68, 73, 81, 86, 90, 91, 94, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... ,  True,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 3, 1, 4, 4, 3, 4, 4, 3, 2, 5, 5, 4, 3, 2, 2, 2, 4, 5, 5, 8, 5,\n       4, 1, 3, 2, 3])`, type: `ndarray`\n\nres, expected value: `array([3, 1, 4, 4, 3, 4, 4, 3, 2, 5, 5, 4, 3, 2, 2, 2, 4, 5, 5, 8, 5, 4,\n       1, 3, 2, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    1\nc    4\nd    4\ne    3\nf    4\ng    4\nh    3\ni    2\nj    5\nk    5\nl    4\nm    3\nn    2\no    2\np    2\nq    4\nr    5\ns    5\nt    8\nu    5\nv    4\nw    1\nx    3\ny    2\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 102\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     60.0\n1     15.0\n2     97.0\n3     34.0\n4     84.0\n      ... \n95    62.0\n96    10.0\n97     4.0\n98    97.0\n99    32.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  3,  4,  5,\n        6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 28, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49,\n       49, 50, 51, 52, 53, 53, 54, 55, 55, 55, 56, 57, 58, 59, 60, 61, 61,\n       62, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71, 72, 72, 73])`, type: `ndarray`\n\n_, expected value: `array([60., 15., 97., 34., 84., 87.,  5., 93., 47., 50., 20., 45., 28.,\n       65., 89., 83., 88., 21., 85., 61., 71., 76., 75., 86., 26., 44.,\n       66., 95., 37., 35., 25., 46., 54., 70., 99., 48., 98., 13., 53.,\n       72., 80., 18., 23., 27., 62., 22., 31., 10., 49., 38., 32., 43.,\n       63., 82.,  6.,  4.])`, type: `ndarray`\n\nval, expected value: `array([60., 15., 97., 34., 84., ... , 15., 62., 10.,  4., 97., 32.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 15, 18, 28, 33, 38, 43, 49, 14, 27, 35, -1, 18, 32, 42,  9,\n        0, -1,  2, 23, -1, -1,  7,  6, 39,  1, 53,  9,  1, 17, -1, 10, -1,\n        2, 27, -1, 20, 38, 30, 47, -1, 40, 52,  1, 50, -1, 18, 16, 55, -1,\n       19, 48, 53, 54, 44,  2, 36, 50, 12, 21, 25, 44,  8, 22,  1, 45,  4,\n       15, 13,  3, 31, 26, 34, 24, -1, 29, 47, 17, 51, 46,  5, 18, 11, 48,\n       -1, 31, 42, -1,  7, 32, 10, 13, 35, 12, 37, -1, -1, 41, 18])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 86, 69, 77, 17, 39, 54, 64, 22, 51, 81, 78,\n        0,  7, 98, 34, 65,  8, 90,  6, 62, 56, 93, 12, 94, 21, 28, 13, 47,\n        2, 61, 66, 30, 58, 44, 75, 83, 63, 88, 23, 80, 84, 87, 19, 97, 26,\n       25, 79, 89, 91, 70, 29, 55, 99, 33, 31, 37, 95, 11, 32, 24, 71,  4,\n       20, 41, 42, 60, 38, 53, 36, 46, 43, 96, 49, 82, 72,  5, 74, 14, 76,\n       27, 50, 68,  9, 10, 59, 92, 16, 73, 15, 57, 85, 45, 67, 48])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28,\n       29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48,\n       49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69,\n       70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91,\n       92, 94, 95, 96, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... ,  True,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-28') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(74,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-28    3\nb    2015-08-28    1\nc    2015-08-23    1\n     2015-08-26    1\n     2015-08-28    1\n                  ..\nx    2015-09-01    1\ny    2015-08-27    1\nz    2015-08-26    1\n     2015-08-27    2\n     2015-08-30    1\nName: julie, Length: 74, dtype: int64`, type: `Series`\n\n### Expected case 103\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      60\n1      99\n2      97\n3      57\n4      82\n       ..\n995    83\n996    15\n997    25\n998     1\n999    48\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([60, 99, 97, 57, 82, 77, 55, 12, 69, 27, 98, 22, 38, 85,  4, 19, 76,\n       59, 51, 37,  5, 43, 17, 21, 90, 84,  0, 91, 94, 24,  8, 83, 73, 44,\n       46, 79, 47, 66, 78, 52, 71, 32, 39, 68, 41,  6, 70, 42, 93,  7,  3,\n       16, 56, 80, 36, 26, 15, 87, 64, 88, 67,  1, 33, 31, 23, 58, 92, 81,\n       65, 40, 48, 63, 34, 30, 86, 72, 25,  2, 74, 20, 14, 62, 13, 45, 95,\n       54, 53, 89, 11, 10, 61, 50, 49,  9, 28, 96, 29, 18, 35, 75])`, type: `ndarray`\n\nval, expected value: `array([60, 99, 97, 57, 82, 77, 55, ... , 16, 70, 11, 83, 15, 25,  1, 48])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  5,  5,  6,  7, 10, 11, ... , 83, 86, 90, 90, 91, 92, 98, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([226, 618, 911, 586, 420, ... , 421, 603, 680, 895, 298, 413])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  39,  78, 118, 157, 194, 233, 270, 314, 350, 386, 430, 466,\n       496, 534, 572, 607, 650, 688, 733, 777, 816, 849, 878, 916, 958])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([31, 33, 32, 30, 30, 31, 31, 38, 31, 32, 34, 30, 27, 33, 33, 31, 37,\n       34, 39, 32, 33, 29, 26, 34, 34, 34])`, type: `ndarray`\n\nres, expected value: `array([31, 33, 32, 30, 30, 31, 31, 38, 31, 32, 34, 30, 27, 33, 33, 31, 37,\n       34, 39, 32, 33, 29, 26, 34, 34, 34])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    31\nb    33\nc    32\nd    30\ne    30\nf    31\ng    31\nh    38\ni    31\nj    32\nk    34\nl    30\nm    27\nn    33\no    33\np    31\nq    37\nr    34\ns    39\nt    32\nu    33\nv    29\nw    26\nx    34\ny    34\nz    34\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 104\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      60\n1      99\n2      97\n3      57\n4      82\n       ..\n995    83\n996    15\n997    25\n998     1\n999    48\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   1,   1, ... , 254, 254, 255, 255, 255, 255])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([60, 99, 97, 57, 82, 77, 55, 12, 69, 27, 98, 22, 38, 85,  4, 19, 76,\n       59, 51, 37,  5, 43, 17, 21, 90, 84,  0, 91, 94, 24,  8, 83, 73, 44,\n       46, 79, 47, 66, 78, 52, 71, 32, 39, 68, 41,  6, 70, 42, 93,  7,  3,\n       16, 56, 80, 36, 26, 15, 87, 64, 88, 67,  1, 33, 31, 23, 58, 92, 81,\n       65, 40, 48, 63, 34, 30, 86, 72, 25,  2, 74, 20, 14, 62, 13, 45, 95,\n       54, 53, 89, 11, 10, 61, 50, 49,  9, 28, 96, 29, 18, 35, 75])`, type: `ndarray`\n\nval, expected value: `array([60, 99, 97, 57, 82, 77, 55, ... , 16, 70, 11, 83, 15, 25,  1, 48])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([37, 48, 62,  6, 63,  1,  7, ... ,  8, 33, 39, 48,  0,  2, 15, 46])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([285, 762, 683, 586, 693, ... ,  70, 886, 900, 720,  27,  66])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   3,   5,   6,  10, ... , 972, 979, 982, 988, 992, 996])`, shape: `(256,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([3, 2, 1, 4, 2, 5, 5, 8, 3, ... , 3, 1, 4, 6, 6, 3, 5, 4, 4, 4])`, shape: `(256,)`, type: `ndarray`\n\nres, expected value: `array([3, 2, 1, 4, 2, 5, 5, 8, 3, ... , 3, 1, 4, 6, 6, 3, 5, 4, 4, 4])`, shape: `(256,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=256)`, shape: `(256,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    1\n     2015-08-26    4\n     2015-08-27    2\n                  ..\nz    2015-08-28    3\n     2015-08-29    5\n     2015-08-30    4\n     2015-08-31    4\n     2015-09-01    4\nName: julie, Length: 256, dtype: int64`, type: `Series`\n\n### Expected case 105\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      60.0\n1      99.0\n2      97.0\n3      57.0\n4      82.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     1.0\n999    48.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([60., 99., 97., 57., 82., ... , 92., 18., 75., 62., 21.,  9.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([60., 99., 97., 57., 82., ... , 11., nan, nan, nan,  1., 48.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 79, 84, 84, 85, 87, 88, 92, 96])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 603, 680, 895, 510, 298, 413])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  96, 135, 170, 209, 246, 283, 319, 361, 394, 429, 469, 505,\n       532, 566, 601, 633, 673, 709, 750, 793, 831, 861, 887, 923, 962])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([44, 29, 25, 27, 29, 29, 28, 29, 33, 25, 26, 30, 24, 22, 29, 29, 26,\n       29, 26, 32, 31, 28, 25, 22, 31, 32, 25])`, type: `ndarray`\n\nres, expected value: `array([29, 25, 27, 29, 29, 28, 29, 33, 25, 26, 30, 24, 22, 29, 29, 26, 29,\n       26, 32, 31, 28, 25, 22, 31, 32, 25])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    29\nb    25\nc    27\nd    29\ne    29\nf    28\ng    29\nh    33\ni    25\nj    26\nk    30\nl    24\nm    22\nn    29\no    29\np    26\nq    29\nr    26\ns    32\nt    31\nu    28\nv    25\nw    22\nx    31\ny    32\nz    25\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 106\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      60.0\n1      99.0\n2      97.0\n3      57.0\n4      82.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     1.0\n999    48.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 253, 253, 254, 254, 254, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([60., 99., 97., 57., 82., ... , 92., 18., 75., 62., 21.,  9.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([60., 99., 97., 57., 82., ... , 11., nan, nan, nan,  1., 48.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 33, 41, 55, 72, -1, -1, -1,  2])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 816, 839,  27,  66, 900, 720])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  87,  89,  90,  94, ... , 975, 981, 984, 989, 992, 996])`, shape: `(255,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 1, 1, 1, 1, 1, 0, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... ,  True,  True,  True,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([55,  3,  2,  1,  4,  2,  4, ... ,  5,  3,  4,  2,  4,\n        2])`, shape: `(256,)`, type: `ndarray`\n\nres, expected value: `array([3, 2, 1, 4, 2, 4, 5, 6, 2, ... , 3, 1, 3, 6, 5, 3, 4, 2, 4, 2])`, shape: `(255,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    1\n     2015-08-26    4\n     2015-08-27    2\n                  ..\nz    2015-08-28    3\n     2015-08-29    4\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    2\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n### Expected case 107\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      60.0\n1      99.0\n2      97.0\n3      57.0\n4      82.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     1.0\n999    48.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([60., 99., 97., 57., 82., ... , 92., 18., 75., 62., 21.,  9.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([60., 99., 97., 57., 82., ... , 11., nan, nan, nan,  1., 48.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 79, 84, 84, 85, 87, 88, 92, 96])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 603, 680, 895, 510, 298, 413])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  96, 135, 170, 209, 246, 283, 319, 361, 394, 429, 469, 505,\n       532, 566, 601, 633, 673, 709, 750, 793, 831, 861, 887, 923, 962])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([44, 29, 25, 27, 29, 29, 28, 29, 33, 25, 26, 30, 24, 22, 29, 29, 26,\n       29, 26, 32, 31, 28, 25, 22, 31, 32, 25])`, type: `ndarray`\n\nres, expected value: `array([29, 25, 27, 29, 29, 28, 29, 33, 25, 26, 30, 24, 22, 29, 29, 26, 29,\n       26, 32, 31, 28, 25, 22, 31, 32, 25])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    29\nb    25\nc    27\nd    29\ne    29\nf    28\ng    29\nh    33\ni    25\nj    26\nk    30\nl    24\nm    22\nn    29\no    29\np    26\nq    29\nr    26\ns    32\nt    31\nu    28\nv    25\nw    22\nx    31\ny    32\nz    25\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 108\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      60.0\n1      99.0\n2      97.0\n3      57.0\n4      82.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     1.0\n999    48.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 253, 253, 254, 254, 254, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([60., 99., 97., 57., 82., ... , 92., 18., 75., 62., 21.,  9.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([60., 99., 97., 57., 82., ... , 11., nan, nan, nan,  1., 48.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 33, 41, 55, 72, -1, -1, -1,  2])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 816, 839,  27,  66, 900, 720])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  87,  89,  90,  94, ... , 975, 981, 984, 989, 992, 996])`, shape: `(255,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 1, 1, 1, 1, 1, 1, 0, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... ,  True,  True,  True,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([55,  3,  2,  1,  4,  2,  4, ... ,  5,  3,  4,  2,  4,\n        2])`, shape: `(256,)`, type: `ndarray`\n\nres, expected value: `array([3, 2, 1, 4, 2, 4, 5, 6, 2, ... , 3, 1, 3, 6, 5, 3, 4, 2, 4, 2])`, shape: `(255,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    1\n     2015-08-26    4\n     2015-08-27    2\n                  ..\nz    2015-08-28    3\n     2015-08-29    4\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    2\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n### Expected case 109\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       17\n1       29\n2        7\n3       68\n4       52\n        ..\n9995    38\n9996     3\n9997    41\n9998    54\n9999    64\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([17, 29,  7, 68, 52, 61, 92, 37, 64, 63, 30, 76, 16, 20, 62,  5, 42,\n       35,  6,  1, 81, 55, 14, 21, 74, 83, 32, 45, 39, 25,  4, 19, 72, 56,\n       87, 66, 10, 38, 85, 34, 48, 51, 98, 99, 88, 46, 59, 86, 70, 77, 84,\n       26, 18, 49, 73, 40, 31, 80, 67, 43, 97, 11,  8, 90, 94, 33, 96, 54,\n       53,  9, 65, 44, 41, 91, 13, 24, 23, 22,  0, 12, 58, 57, 60, 75, 82,\n       15, 79, 47, 50, 89, 69, 36, 71,  3, 93, 95,  2, 27, 78, 28])`, type: `ndarray`\n\nval, expected value: `array([17, 29,  7, ..., 41, 54, 64])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([2585, 7389, 8266, ..., 9559, 4922, 5877])`, type: `ndarray`\n\nidx, expected value: `array([   0,  376,  742, 1102, 1479, 1853, 2257, 2624, 3001, 3373, 3760,\n       4199, 4586, 4971, 5349, 5726, 6124, 6523, 6922, 7274, 7660, 8056,\n       8460, 8858, 9247, 9636])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  99,  99,  97,  97, 100,  96,  97, 100,  99,  99,  98,  98,\n        99,  98,  97,  97,  99,  97,  97,  98,  99,  99,  99,  98,  97])`, type: `ndarray`\n\nres, expected value: `array([100,  99,  99,  97,  97, 100,  96,  97, 100,  99,  99,  98,  98,\n        99,  98,  97,  97,  99,  97,  97,  98,  99,  99,  99,  98,  97])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    100\nb     99\nc     99\nd     97\ne     97\nf    100\ng     96\nh     97\ni    100\nj     99\nk     99\nl     98\nm     98\nn     99\no     98\np     97\nq     97\nr     99\ns     97\nt     97\nu     98\nv     99\nw     99\nx     99\ny     98\nz     97\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 110\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       17\n1       29\n2        7\n3       68\n4       52\n        ..\n9995    38\n9996     3\n9997    41\n9998    54\n9999    64\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([17, 29,  7, 68, 52, 61, 92, 37, 64, 63, 30, 76, 16, 20, 62,  5, 42,\n       35,  6,  1, 81, 55, 14, 21, 74, 83, 32, 45, 39, 25,  4, 19, 72, 56,\n       87, 66, 10, 38, 85, 34, 48, 51, 98, 99, 88, 46, 59, 86, 70, 77, 84,\n       26, 18, 49, 73, 40, 31, 80, 67, 43, 97, 11,  8, 90, 94, 33, 96, 54,\n       53,  9, 65, 44, 41, 91, 13, 24, 23, 22,  0, 12, 58, 57, 60, 75, 82,\n       15, 79, 47, 50, 89, 69, 36, 71,  3, 93, 95,  2, 27, 78, 28])`, type: `ndarray`\n\nval, expected value: `array([17, 29,  7, ..., 41, 54, 64])`, type: `ndarray`\n\ncodes, expected value: `array([ 8,  8, 12, ..., 93, 95, 97])`, type: `ndarray`\n\nsorter, expected value: `array([1399, 5956, 8673, ..., 1818, 1510,  827])`, type: `ndarray`\n\nidx, expected value: `array([   0,   35,   73,  109,  144, ... , 9832, 9860, 9888, 9931, 9970])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([27, 33, 30, 34, 35, 36, 26, ... , 25,\n       25, 27, 35, 31, 26])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([27, 33, 30, 34, 35, 36, 26, ... , 25,\n       25, 27, 35, 31, 26])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    27\n     2015-08-24    33\n     2015-08-25    30\n     2015-08-26    34\n     2015-08-27    35\n                   ..\nz    2015-08-28    25\n     2015-08-29    27\n     2015-08-30    35\n     2015-08-31    31\n     2015-09-01    26\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 111\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       17.0\n1       29.0\n2        7.0\n3       68.0\n4       52.0\n        ... \n9995    38.0\n9996     3.0\n9997    41.0\n9998    54.0\n9999    64.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([17., 29.,  7., 68., 52., ... ,  2., 27., 66., 49., 78., 28.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([17., 29.,  7., ..., 41., 54., 64.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9559, 4922, 5877])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  945, 1289, 1628, 1986, 2333, 2714, 3062, 3407, 3761, 4123,\n       4540, 4903, 5258, 5611, 5967, 6341, 6719, 7091, 7422, 7792, 8162,\n       8540, 8922, 9289, 9662])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  98,  95,  98,  96,  95,  98,  95,  94,  99,  98,  99,  95,\n        97,  98,  93,  96,  95,  98,  93,  93,  97,  96,  99,  99,  97,\n        96])`, type: `ndarray`\n\nres, expected value: `array([98, 95, 98, 96, 95, 98, 95, 94, 99, 98, 99, 95, 97, 98, 93, 96, 95,\n       98, 93, 93, 97, 96, 99, 99, 97, 96])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    98\nb    95\nc    98\nd    96\ne    95\nf    98\ng    95\nh    94\ni    99\nj    98\nk    99\nl    95\nm    97\nn    98\no    93\np    96\nq    95\nr    98\ns    93\nt    93\nu    97\nv    96\nw    99\nx    99\ny    97\nz    96\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 112\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       17.0\n1       29.0\n2        7.0\n3       68.0\n4       52.0\n        ... \n9995    38.0\n9996     3.0\n9997    41.0\n9998    54.0\n9999    64.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([17., 29.,  7., 68., 52., ... ,  2., 27., 66., 49., 78., 28.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([17., 29.,  7., ..., 41., 54., 64.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 86, 87, 95])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 6207, 8298,  827])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  878,  914,  948,  982, ... , 9850, 9874, 9900, 9940, 9975])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  21,  27,  26,  32, ... ,  19,  22,  29,  25,\n        18])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([21, 27, 26, 32, 28, 30, 22, ... , 22,\n       19, 22, 29, 25, 18])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    21\n     2015-08-24    27\n     2015-08-25    26\n     2015-08-26    32\n     2015-08-27    28\n                   ..\nz    2015-08-28    19\n     2015-08-29    22\n     2015-08-30    29\n     2015-08-31    25\n     2015-09-01    18\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 113\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       17.0\n1       29.0\n2        7.0\n3       68.0\n4       52.0\n        ... \n9995    38.0\n9996     3.0\n9997    41.0\n9998    54.0\n9999    64.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([17., 29.,  7., 68., 52., ... ,  2., 27., 66., 49., 78., 28.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([17., 29.,  7., ..., 41., 54., 64.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 98, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9559, 4922, 5877])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  945, 1289, 1628, 1986, 2333, 2714, 3062, 3407, 3761, 4123,\n       4540, 4903, 5258, 5611, 5967, 6341, 6719, 7091, 7422, 7792, 8162,\n       8540, 8922, 9289, 9662])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  98,  95,  98,  96,  95,  98,  95,  94,  99,  98,  99,  95,\n        97,  98,  93,  96,  95,  98,  93,  93,  97,  96,  99,  99,  97,\n        96])`, type: `ndarray`\n\nres, expected value: `array([98, 95, 98, 96, 95, 98, 95, 94, 99, 98, 99, 95, 97, 98, 93, 96, 95,\n       98, 93, 93, 97, 96, 99, 99, 97, 96])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    98\nb    95\nc    98\nd    96\ne    95\nf    98\ng    95\nh    94\ni    99\nj    98\nk    99\nl    95\nm    97\nn    98\no    93\np    96\nq    95\nr    98\ns    93\nt    93\nu    97\nv    96\nw    99\nx    99\ny    97\nz    96\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 114\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       17.0\n1       29.0\n2        7.0\n3       68.0\n4       52.0\n        ... \n9995    38.0\n9996     3.0\n9997    41.0\n9998    54.0\n9999    64.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([17., 29.,  7., 68., 52., ... ,  2., 27., 66., 49., 78., 28.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([17., 29.,  7., ..., 41., 54., 64.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 86, 87, 95])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 6207, 8298,  827])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  878,  914,  948,  982, ... , 9850, 9874, 9900, 9940, 9975])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  21,  27,  26,  32, ... ,  19,  22,  29,  25,\n        18])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([21, 27, 26, 32, 28, 30, 22, ... , 22,\n       19, 22, 29, 25, 18])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    21\n     2015-08-24    27\n     2015-08-25    26\n     2015-08-26    32\n     2015-08-27    28\n                   ..\nz    2015-08-28    19\n     2015-08-29    22\n     2015-08-30    29\n     2015-08-31    25\n     2015-09-01    18\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 115\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         5\n1        30\n2        99\n3        84\n4         0\n         ..\n99995    37\n99996    30\n99997    96\n99998    44\n99999    24\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([ 5, 30, 99, 84,  0, 62, 40, 61, 91, 67, 69, 28, 45, 68, 22, 65,  1,\n       13, 80, 96, 25, 17, 60, 41, 20, 29, 81, 77, 57, 95, 24, 31, 64, 97,\n       88, 76, 72, 71, 37, 75, 86, 42, 70, 34, 74, 18, 21, 59, 58, 46, 39,\n       32, 79, 38,  7, 56, 92, 66, 43, 82, 55, 36, 49, 51, 35, 87, 14, 83,\n       73,  9, 27, 44, 26, 11, 23,  4, 85, 12, 19, 50, 90, 54, 63,  8,  3,\n       15, 47, 89, 48, 10, 52, 33,  2, 94, 78, 93, 98, 53,  6, 16])`, type: `ndarray`\n\nval, expected value: `array([ 5, 30, 99, ..., 96, 44, 24])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  478,   675,  1407, ..., 92457, 93270, 99662])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3810,  7526, 11289, 15167, 19005, 22951, 26807, 30649,\n       34476, 38224, 42086, 45988, 49813, 53675, 57506, 61412, 65311,\n       69155, 72952, 76841, 80638, 84592, 88410, 92331, 96166])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 116\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         5\n1        30\n2        99\n3        84\n4         0\n         ..\n99995    37\n99996    30\n99997    96\n99998    44\n99999    24\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([ 5, 30, 99, 84,  0, 62, 40, 61, 91, 67, 69, 28, 45, 68, 22, 65,  1,\n       13, 80, 96, 25, 17, 60, 41, 20, 29, 81, 77, 57, 95, 24, 31, 64, 97,\n       88, 76, 72, 71, 37, 75, 86, 42, 70, 34, 74, 18, 21, 59, 58, 46, 39,\n       32, 79, 38,  7, 56, 92, 66, 43, 82, 55, 36, 49, 51, 35, 87, 14, 83,\n       73,  9, 27, 44, 26, 11, 23,  4, 85, 12, 19, 50, 90, 54, 63,  8,  3,\n       15, 47, 89, 48, 10, 52, 33,  2, 94, 78, 93, 98, 53,  6, 16])`, type: `ndarray`\n\nval, expected value: `array([ 5, 30, 99, ..., 96, 44, 24])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  478, 46114, 55024, ..., 25956, 55613, 93270])`, type: `ndarray`\n\nidx, expected value: `array([    0,   411,   777,  1183, ... , 98084, 98460, 98843, 99258, 99645])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 98,  98,  97,  99,  98, ... ,  97,  99,  96,  99,  99, 100])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([ 98,  98,  97,  99,  98, ... ,  97,  99,  96,  99,  99, 100])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23     98\n     2015-08-24     98\n     2015-08-25     97\n     2015-08-26     99\n     2015-08-27     98\n                  ... \nz    2015-08-28     99\n     2015-08-29     96\n     2015-08-30     99\n     2015-08-31     99\n     2015-09-01    100\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 117\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         5.0\n1        30.0\n2        99.0\n3        84.0\n4         0.0\n         ... \n99995    37.0\n99996    30.0\n99997    96.0\n99998    44.0\n99999    24.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([ 5., 30., 99., 84.,  0., ... ,  2., 91., 90., 77., 16., 35.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([ 5., 30., 99., ..., 96., 44., 24.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 85293, 94022, 98576])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9483, 12986, 16512, 20171, 23814, 27544, 31181, 34795,\n       38399, 41924, 45565, 49208, 52813, 56438, 60063, 63730, 67381,\n       70959, 74547, 78186, 81742, 85455, 89067, 92775, 96380])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 118\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         5.0\n1        30.0\n2        99.0\n3        84.0\n4         0.0\n         ... \n99995    37.0\n99996    30.0\n99997    96.0\n99998    44.0\n99999    24.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([ 5., 30., 99., 84.,  0., ... ,  2., 91., 90., 77., 16., 35.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([ 5., 30., 99., ..., 96., 44., 24.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 61356, 74748, 98576])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8805,  9146,  9526, ... , 98268, 98618, 98959, 99327, 99682])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  97,  97,  94,  96, ... ,  95,  94,  95,  99,\n        96])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 97,  97,  94,  96,  98, ... ,  91,  95,  94,  95,  99,  96])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    97\n     2015-08-24    97\n     2015-08-25    94\n     2015-08-26    96\n     2015-08-27    98\n                   ..\nz    2015-08-28    95\n     2015-08-29    94\n     2015-08-30    95\n     2015-08-31    99\n     2015-09-01    96\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 119\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         5.0\n1        30.0\n2        99.0\n3        84.0\n4         0.0\n         ... \n99995    37.0\n99996    30.0\n99997    96.0\n99998    44.0\n99999    24.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([ 5., 30., 99., 84.,  0., ... ,  2., 91., 90., 77., 16., 35.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([ 5., 30., 99., ..., 96., 44., 24.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 85293, 94022, 98576])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9483, 12986, 16512, 20171, 23814, 27544, 31181, 34795,\n       38399, 41924, 45565, 49208, 52813, 56438, 60063, 63730, 67381,\n       70959, 74547, 78186, 81742, 85455, 89067, 92775, 96380])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])`, type: `ndarray`\n\nres, expected value: `array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 120\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         5.0\n1        30.0\n2        99.0\n3        84.0\n4         0.0\n         ... \n99995    37.0\n99996    30.0\n99997    96.0\n99998    44.0\n99999    24.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([ 5., 30., 99., 84.,  0., ... ,  2., 91., 90., 77., 16., 35.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([ 5., 30., 99., ..., 96., 44., 24.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 61356, 74748, 98576])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8805,  9146,  9526, ... , 98268, 98618, 98959, 99327, 99682])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([101,  97,  97,  94,  96, ... ,  95,  94,  95,  99,\n        96])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 97,  97,  94,  96,  98, ... ,  91,  95,  94,  95,  99,  96])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    97\n     2015-08-24    97\n     2015-08-25    94\n     2015-08-26    96\n     2015-08-27    98\n                   ..\nz    2015-08-28    95\n     2015-08-29    94\n     2015-08-30    95\n     2015-08-31    99\n     2015-09-01    96\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 121\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     219\n1     916\n2     443\n3     181\n4     286\n     ... \n95    191\n96    715\n97    808\n98    369\n99    396\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  5,  5,\n        5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,  9,  9,  9,\n        9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 14, 14, 14, 15,\n       15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 18, 19, 19,\n       19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 22, 22,\n       22, 23, 23, 23, 23, 23, 23, 23, 24, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([219, 916, 443, 181, 286, ... , 191, 715, 808,\n       369, 396])`, shape: `(93,)`, type: `ndarray`\n\nval, expected value: `array([219, 916, 443, 181, 286, ... , 805, 191, 715, 808, 369, 396])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([46, 15,  3,  6, 25, 30, 69, 83,  1, 11, 26, 65, 81, 59, 71, 13, 14,\n       28, 40, 42, 70,  2, 54, 62, 90, 56, 63, 88,  4, 17, 64, 10, 20, 23,\n       68, 16, 39, 79,  0, 21, 38, 40, 60, 66, 82, 87,  8,  7, 27, 53, 35,\n       43, 47, 49, 85, 19, 22, 41, 51, 76, 80, 91, 92, 44, 48, 67, 12, 18,\n       31, 32, 57, 65, 78, 84,  4, 15, 29, 34, 45, 73, 75, 33, 52, 17, 58,\n       89, 17, 24, 32, 36, 37, 55, 77,  5,  9, 50, 61, 72, 74, 86])`, type: `ndarray`\n\nsorter, expected value: `array([48, 15,  3,  6, 26, 32, 71, 89,  1, 11, 28, 67, 87, 61, 73, 13, 14,\n       30, 42, 44, 72,  2, 56, 64, 97, 58, 65, 95,  4, 82, 66, 10, 20, 24,\n       70, 16, 41, 85,  0, 21, 40, 84, 62, 68, 88, 94,  8,  7, 29, 55, 37,\n       45, 49, 51, 92, 19, 23, 43, 53, 80, 86, 98, 99, 46, 50, 69, 12, 18,\n       33, 90, 59, 76, 83, 91, 78, 27, 31, 36, 47, 75, 79, 35, 54, 22, 60,\n       96, 17, 25, 34, 38, 39, 57, 81,  5,  9, 52, 63, 74, 77, 93])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  2,  8, 13, 15, 21, 25, 28, 31, 35, 38, 42, 46, 47, 50, 55,\n       63, 65, 66, 74, 81, 83, 86, 93, 94])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 6, 5, 2, 6, 4, 3, 3, 4, 3, 4, 4, 1, 3, 5, 8, 2, 1, 8, 7, 2,\n       3, 7, 1, 6])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 6, 5, 2, 6, 4, 3, 3, 4, 3, 4, 4, 1, 3, 5, 8, 2, 1, 8, 7, 2,\n       3, 7, 1, 6])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    1\nb    1\nc    6\nd    5\ne    2\nf    6\ng    4\nh    3\ni    3\nj    4\nk    3\nl    4\nm    4\nn    1\no    3\np    5\nq    8\nr    2\ns    1\nt    8\nu    7\nv    2\nw    3\nx    7\ny    1\nz    6\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 122\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     219\n1     916\n2     443\n3     181\n4     286\n     ... \n95    191\n96    715\n97    808\n98    369\n99    396\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  2,  3,  4,  4,  5,  6,  7,  7,  8,  9, 10, 11, 12, 12,\n       12, 13, 14, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 23, 23, 23,\n       24, 25, 26, 27, 28, 28, 29, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\n       39, 40, 40, 40, 41, 41, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,\n       51, 52, 53, 53, 54, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 63, 64,\n       65, 66, 67, 68, 69, 70, 70, 71, 72, 73, 74, 75, 76, 76, 77])`, type: `ndarray`\n\n_, expected value: `array([219, 916, 443, 181, 286, ... , 191, 715, 808,\n       369, 396])`, shape: `(93,)`, type: `ndarray`\n\nval, expected value: `array([219, 916, 443, 181, 286, ... , 805, 191, 715, 808, 369, 396])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([46, 15,  3, 83, 30,  6, 25, 69,  1, 26, 65, 81, 11, 71, 59, 13, 14,\n       42, 40, 28, 70, 54,  2, 90, 62, 88, 56, 63, 17,  4, 64, 10, 20, 23,\n       68, 16, 39, 79,  0, 38, 21, 40, 66, 60, 87, 82,  8, 53, 27,  7, 43,\n       35, 47, 49, 85, 76, 80, 91, 41, 19, 22, 92, 51, 48, 44, 67, 31, 84,\n       18, 65, 12, 57, 32, 78, 73,  4, 29, 45, 75, 15, 34, 52, 33, 58, 89,\n       17, 37, 24, 17, 32, 36, 55, 77,  5, 61,  9, 50, 74, 86, 72])`, type: `ndarray`\n\nsorter, expected value: `array([48, 15,  3, 89, 32,  6, 26, 71,  1, 28, 67, 87, 11, 73, 61, 13, 14,\n       44, 42, 30, 72, 56,  2, 97, 64, 95, 58, 65, 82,  4, 66, 10, 20, 24,\n       70, 16, 41, 85,  0, 40, 21, 84, 68, 62, 94, 88,  8, 55, 29,  7, 45,\n       37, 49, 51, 92, 80, 86, 98, 43, 19, 23, 99, 53, 50, 46, 69, 33, 91,\n       18, 76, 12, 59, 90, 83, 75, 78, 31, 47, 79, 27, 36, 54, 35, 60, 96,\n       22, 39, 25, 17, 34, 38, 57, 81,  5, 63,  9, 52, 77, 93, 74])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  2,  4,  5,  7,  8,  9, 11, 12, 13, 14, 15, 18, 19, 21, 22,\n       24, 25, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45,\n       46, 47, 48, 49, 50, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87,\n       88, 89, 90, 92, 93, 94, 95, 96, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 1,\n       1, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 1,\n       1, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-30') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(78,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-30    1\nb    2015-09-01    1\nc    2015-08-27    2\n     2015-08-30    1\n     2015-08-31    2\n                  ..\nz    2015-08-23    1\n     2015-08-24    1\n     2015-08-26    1\n     2015-08-29    2\n     2015-08-31    1\nName: julie, Length: 78, dtype: int64`, type: `Series`\n\n### Expected case 123\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     219.0\n1     916.0\n2     443.0\n3     181.0\n4     286.0\n      ...  \n95    191.0\n96    715.0\n97    808.0\n98    369.0\n99    396.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,\n        3,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  8,\n        8,  8,  9,  9,  9,  9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12,\n       13, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17,\n       17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 21,\n       21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 24, 24, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `array([219., 916., 443., 181., 286., ... , 715.,\n       808., 369., 396.])`, shape: `(80,)`, type: `ndarray`\n\nval, expected value: `array([219., 916., 443., 181., 286., ... , 715., 808., 369.,\n       396.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 15, 28, 42, 56, 67, 38, 12, -1,  3,  6, 25, 58, 70, -1,  8, 54,\n       68, 51, 60, 10, 11, 23, 35, 37, 59, -1,  2, 46, 77, -1, 48, 75, -1,\n        4, 14,  7, 17, 20, 57, -1, 13, 34, -1,  0, 18, 33, 52, 55, 69, 74,\n       -1, -1, 22, 45, -1, 30, 39, 41, 72, 16, 19, 36, 43, 65, 78, 79, -1,\n       40, -1,  9, 26, 27, 49, 54, 71, -1, -1,  4, 24, 29, 62, 64, 44, 14,\n       50, 76, 14, 21, 27, 31, 32, 47, 66,  5, -1, 53, 61, 63, 73])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 69, 86, 48, 15, 26,  3,  6, 32, 71, 89, 28, 11, 67,\n       87, 61, 73, 13, 14, 30, 42, 44, 72, 64,  2, 56, 97, 65, 58, 95, 66,\n        4, 82, 10, 20, 24, 70, 85, 16, 41, 84,  0, 21, 40, 62, 68, 88, 94,\n        8,  7, 29, 55, 45, 37, 49, 51, 92, 19, 23, 43, 53, 80, 98, 99, 46,\n       50, 83, 12, 33, 90, 59, 76, 91, 27, 47, 78, 31, 36, 75, 79, 54, 22,\n       60, 96, 17, 25, 34, 38, 39, 57, 81,  5,  9, 63, 74, 77, 93])`, type: `ndarray`\n\nidx, expected value: `array([ 6,  7,  8, 14, 18, 20, 26, 30, 33, 36, 40, 43, 47, 51, 52, 55, 60,\n       67, 69, 76, 83, 84, 87, 94, 95])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 1, 1, 6, 4, 2, 6, 4, 3, 3, 4, 3, 4, 4, 1, 3, 5, 7, 2, 7, 6, 1,\n       3, 7, 1, 5])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 6, 4, 2, 6, 4, 3, 3, 4, 3, 4, 4, 1, 3, 5, 7, 2, 7, 6, 1, 3,\n       7, 1, 5])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    1\nb    1\nc    6\nd    4\ne    2\nf    6\ng    4\nh    3\ni    3\nj    4\nk    3\nl    4\nm    4\nn    1\no    3\np    5\nq    7\nr    2\nt    7\nu    6\nv    1\nw    3\nx    7\ny    1\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 124\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     219.0\n1     916.0\n2     443.0\n3     181.0\n4     286.0\n      ...  \n95    191.0\n96    715.0\n97    808.0\n98    369.0\n99    396.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  4,  5,  6,\n        6,  7,  8,  9, 10, 11, 11, 11, 12, 13, 13, 14, 15, 15, 16, 17, 18,\n       18, 19, 20, 21, 22, 22, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31,\n       32, 33, 34, 35, 36, 37, 38, 39, 39, 39, 40, 40, 41, 42, 43, 44, 45,\n       46, 47, 48, 48, 49, 50, 50, 51, 52, 53, 54, 54, 55, 56, 57, 57, 58,\n       59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 72])`, type: `ndarray`\n\n_, expected value: `array([219., 916., 443., 181., 286., ... , 715.,\n       808., 369., 396.])`, shape: `(80,)`, type: `ndarray`\n\nval, expected value: `array([219., 916., 443., 181., 286., ... , 715., 808., 369.,\n       396.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 15, 28, 33, 42, 56, 63, 67, 38, 12, 70, 25, -1,  6, 58, -1,\n       54, 68,  8, 60, 51, 10, 11, 37, 35, 23, 59, 46,  2, 77, -1, 75, -1,\n       48, 14,  4, -1,  7, 17, 20, 57, 13, 34, -1,  0, -1, 18, 55, 52, 74,\n       69, -1, 45, 22, -1, -1, 30, 39, 41, 72, 65, 78, 36, 16, 19, 79, 43,\n       40, -1, 26, 71, 54,  9, 49, 27, -1, 62,  4, 24, -1, 64, -1, 29, 44,\n       50, 76, 14, 32, 21, 14, 27, 31, 47, 66,  5, 53, -1, 73, 61])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 48, 15, 89, 32, 26,  6, 71, 28,\n       67, 87, 11, 73, 61, 13, 14, 44, 42, 30, 72, 56,  2, 97, 64, 95, 65,\n       58, 82,  4, 66, 10, 20, 24, 70, 16, 41, 85,  0, 84, 21, 68, 62, 94,\n       88,  8, 55, 29,  7, 45, 37, 49, 51, 92, 80, 98, 43, 19, 23, 99, 53,\n       50, 46, 33, 91, 76, 12, 59, 90, 83, 75, 78, 31, 47, 79, 27, 36, 54,\n       60, 96, 22, 39, 25, 17, 34, 38, 57, 81,  5, 63,  9, 93, 74])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 25, 26, 28, 29, 31,\n       32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73,\n       75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94,\n       95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 1,\n       1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-30') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(73,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-30    1\nb    2015-09-01    1\nc    2015-08-27    1\n     2015-08-30    1\n     2015-08-31    2\n                  ..\ny    2015-08-24    1\nz    2015-08-23    1\n     2015-08-24    1\n     2015-08-29    1\n     2015-08-31    1\nName: julie, Length: 73, dtype: int64`, type: `Series`\n\n### Expected case 125\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     219.0\n1     916.0\n2     443.0\n3     181.0\n4     286.0\n      ...  \n95    191.0\n96    715.0\n97    808.0\n98    369.0\n99    396.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,\n        3,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  8,\n        8,  8,  9,  9,  9,  9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12,\n       13, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17,\n       17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 21,\n       21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 24, 24, 24, 24, 24])`, type: `ndarray`\n\n_, expected value: `array([219., 916., 443., 181., 286., ... , 715.,\n       808., 369., 396.])`, shape: `(80,)`, type: `ndarray`\n\nval, expected value: `array([219., 916., 443., 181., 286., ... , 715., 808., 369.,\n       396.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 15, 28, 42, 56, 67, 38, 12, -1,  3,  6, 25, 58, 70, -1,  8, 54,\n       68, 51, 60, 10, 11, 23, 35, 37, 59, -1,  2, 46, 77, -1, 48, 75, -1,\n        4, 14,  7, 17, 20, 57, -1, 13, 34, -1,  0, 18, 33, 52, 55, 69, 74,\n       -1, -1, 22, 45, -1, 30, 39, 41, 72, 16, 19, 36, 43, 65, 78, 79, -1,\n       40, -1,  9, 26, 27, 49, 54, 71, -1, -1,  4, 24, 29, 62, 64, 44, 14,\n       50, 76, 14, 21, 27, 31, 32, 47, 66,  5, -1, 53, 61, 63, 73])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 69, 86, 48, 15, 26,  3,  6, 32, 71, 89, 28, 11, 67,\n       87, 61, 73, 13, 14, 30, 42, 44, 72, 64,  2, 56, 97, 65, 58, 95, 66,\n        4, 82, 10, 20, 24, 70, 85, 16, 41, 84,  0, 21, 40, 62, 68, 88, 94,\n        8,  7, 29, 55, 45, 37, 49, 51, 92, 19, 23, 43, 53, 80, 98, 99, 46,\n       50, 83, 12, 33, 90, 59, 76, 91, 27, 47, 78, 31, 36, 75, 79, 54, 22,\n       60, 96, 17, 25, 34, 38, 39, 57, 81,  5,  9, 63, 74, 77, 93])`, type: `ndarray`\n\nidx, expected value: `array([ 6,  7,  8, 14, 18, 20, 26, 30, 33, 36, 40, 43, 47, 51, 52, 55, 60,\n       67, 69, 76, 83, 84, 87, 94, 95])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 1, 1, 6, 4, 2, 6, 4, 3, 3, 4, 3, 4, 4, 1, 3, 5, 7, 2, 7, 6, 1,\n       3, 7, 1, 5])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 6, 4, 2, 6, 4, 3, 3, 4, 3, 4, 4, 1, 3, 5, 7, 2, 7, 6, 1, 3,\n       7, 1, 5])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    1\nb    1\nc    6\nd    4\ne    2\nf    6\ng    4\nh    3\ni    3\nj    4\nk    3\nl    4\nm    4\nn    1\no    3\np    5\nq    7\nr    2\nt    7\nu    6\nv    1\nw    3\nx    7\ny    1\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 126\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     219.0\n1     916.0\n2     443.0\n3     181.0\n4     286.0\n      ...  \n95    191.0\n96    715.0\n97    808.0\n98    369.0\n99    396.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  4,  5,  6,\n        6,  7,  8,  9, 10, 11, 11, 11, 12, 13, 13, 14, 15, 15, 16, 17, 18,\n       18, 19, 20, 21, 22, 22, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31,\n       32, 33, 34, 35, 36, 37, 38, 39, 39, 39, 40, 40, 41, 42, 43, 44, 45,\n       46, 47, 48, 48, 49, 50, 50, 51, 52, 53, 54, 54, 55, 56, 57, 57, 58,\n       59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 72])`, type: `ndarray`\n\n_, expected value: `array([219., 916., 443., 181., 286., ... , 715.,\n       808., 369., 396.])`, shape: `(80,)`, type: `ndarray`\n\nval, expected value: `array([219., 916., 443., 181., 286., ... , 715., 808., 369.,\n       396.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 15, 28, 33, 42, 56, 63, 67, 38, 12, 70, 25, -1,  6, 58, -1,\n       54, 68,  8, 60, 51, 10, 11, 37, 35, 23, 59, 46,  2, 77, -1, 75, -1,\n       48, 14,  4, -1,  7, 17, 20, 57, 13, 34, -1,  0, -1, 18, 55, 52, 74,\n       69, -1, 45, 22, -1, -1, 30, 39, 41, 72, 65, 78, 36, 16, 19, 79, 43,\n       40, -1, 26, 71, 54,  9, 49, 27, -1, 62,  4, 24, -1, 64, -1, 29, 44,\n       50, 76, 14, 32, 21, 14, 27, 31, 47, 66,  5, 53, -1, 73, 61])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 48, 15, 89, 32, 26,  6, 71, 28,\n       67, 87, 11, 73, 61, 13, 14, 44, 42, 30, 72, 56,  2, 97, 64, 95, 65,\n       58, 82,  4, 66, 10, 20, 24, 70, 16, 41, 85,  0, 84, 21, 68, 62, 94,\n       88,  8, 55, 29,  7, 45, 37, 49, 51, 92, 80, 98, 43, 19, 23, 99, 53,\n       50, 46, 33, 91, 76, 12, 59, 90, 83, 75, 78, 31, 47, 79, 27, 36, 54,\n       60, 96, 22, 39, 25, 17, 34, 38, 57, 81,  5, 63,  9, 93, 74])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 25, 26, 28, 29, 31,\n       32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73,\n       75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94,\n       95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 1,\n       1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-30') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(73,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-30    1\nb    2015-09-01    1\nc    2015-08-27    1\n     2015-08-30    1\n     2015-08-31    2\n                  ..\ny    2015-08-24    1\nz    2015-08-23    1\n     2015-08-24    1\n     2015-08-29    1\n     2015-08-31    1\nName: julie, Length: 73, dtype: int64`, type: `Series`\n\n### Expected case 127\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      622\n1      925\n2      664\n3      126\n4      276\n      ... \n995    585\n996    929\n997      4\n998    980\n999    805\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([622, 925, 664, 126, 276, ... , 616, 627, 131, 372, 193, 805])`, shape: `(650,)`, type: `ndarray`\n\nval, expected value: `array([622, 925, 664, 126, 276, ... , 193, 585, 929,   4, 980, 805])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([  2,  10,  13,  17,  33, ... , 482, 483, 487, 514, 579, 647])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  2,  10, 257, 300, 277, ... , 647, 649, 657, 910, 845, 991])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  48,  90, 130, 165, 208, 258, 293, 322, 349, 383, 416, 447,\n       488, 529, 564, 615, 656, 697, 736, 772, 814, 854, 880, 912, 961])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([47, 41, 40, 35, 43, 48, 34, 28, 27, 33, 33, 31, 40, 39, 35, 51, 41,\n       40, 39, 35, 41, 39, 26, 30, 49, 38])`, type: `ndarray`\n\nres, expected value: `array([47, 41, 40, 35, 43, 48, 34, 28, 27, 33, 33, 31, 40, 39, 35, 51, 41,\n       40, 39, 35, 41, 39, 26, 30, 49, 38])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    47\nb    41\nc    40\nd    35\ne    43\nf    48\ng    34\nh    28\ni    27\nj    33\nk    33\nl    31\nm    40\nn    39\no    35\np    51\nq    41\nr    40\ns    39\nt    35\nu    41\nv    39\nw    26\nx    30\ny    49\nz    38\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 128\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      622\n1      925\n2      664\n3      126\n4      276\n      ... \n995    585\n996    929\n997      4\n998    980\n999    805\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   1,   1, ... , 251, 252, 252, 252, 252, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([622, 925, 664, 126, 276, ... , 616, 627, 131, 372, 193, 805])`, shape: `(650,)`, type: `ndarray`\n\nval, expected value: `array([622, 925, 664, 126, 276, ... , 193, 585, 929,   4, 980, 805])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ 95, 179, 294,  58, 192, ... , 579,  72, 145, 188, 407, 139])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([100, 201, 831,  68, 215, ... , 845, 320, 256, 480, 530, 155])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   3,   9,  13,  15, ... , 974, 978, 983, 988, 995, 999])`, shape: `(254,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 3,  6,  4,  2,  4,  9,  1, ... ,  5,  5,  4,  5,  5,  7,  4,  1])`, shape: `(254,)`, type: `ndarray`\n\nres, expected value: `array([ 3,  6,  4,  2,  4,  9,  1, ... ,  5,  5,  4,  5,  5,  7,  4,  1])`, shape: `(254,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    6\n     2015-08-25    4\n     2015-08-26    2\n     2015-08-27    4\n                  ..\nz    2015-08-27    5\n     2015-08-28    5\n     2015-08-29    7\n     2015-08-30    4\n     2015-08-31    1\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n### Expected case 129\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      622.0\n1      925.0\n2      664.0\n3      126.0\n4      276.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    980.0\n999    805.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([622., 925., 664., 126., 276., ... , 254., 372.,\n       193., 805.])`, shape: `(585,)`, type: `ndarray`\n\nval, expected value: `array([622., 925., 664., 126., 276., ... ,  nan,  nan,  nan, 980., 805.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 345, 413, 418, 421, 545, 582])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 530, 643, 649, 657, 910, 991])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59, 106, 146, 183, 215, 255, 302, 335, 363, 388, 422, 453, 481,\n       518, 558, 590, 639, 678, 715, 753, 787, 827, 867, 892, 924, 969])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([50, 45, 34, 32, 26, 36, 38, 28, 27, 24, 30, 23, 20, 34, 36, 26, 40,\n       37, 29, 32, 28, 37, 35, 24, 25, 38, 24])`, type: `ndarray`\n\nres, expected value: `array([45, 34, 32, 26, 36, 38, 28, 27, 24, 30, 23, 20, 34, 36, 26, 40, 37,\n       29, 32, 28, 37, 35, 24, 25, 38, 24])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    45\nb    34\nc    32\nd    26\ne    36\nf    38\ng    28\nh    27\ni    24\nj    30\nk    23\nl    20\nm    34\nn    36\no    26\np    40\nq    37\nr    29\ns    32\nt    28\nu    37\nv    35\nw    24\nx    25\ny    38\nz    24\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 130\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      622.0\n1      925.0\n2      664.0\n3      126.0\n4      276.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    980.0\n999    805.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 249, 249, 250, 250, 250, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([622., 925., 664., 126., 276., ... , 254., 372.,\n       193., 805.])`, shape: `(585,)`, type: `ndarray`\n\nval, expected value: `array([622., 925., 664., 126., 276., ... ,  nan,  nan,  nan, 980., 805.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 180, 413,  61, 161, 345, 118])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 451, 643, 320, 480, 530, 155])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  87,  92,  96,  98, ... ,\n       982, 986, 991, 996, 999])`, shape: `(252,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([72,  3,  5,  4,  2,  4,  9, ... ,  4,  4,  3,  4,  5,  5,  3,  1])`, shape: `(253,)`, type: `ndarray`\n\nres, expected value: `array([ 3,  5,  4,  2,  4,  9,  1, ... ,  4,  4,  3,  4,  5,  5,  3,  1])`, shape: `(252,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    5\n     2015-08-25    4\n     2015-08-26    2\n     2015-08-27    4\n                  ..\nz    2015-08-27    4\n     2015-08-28    5\n     2015-08-29    5\n     2015-08-30    3\n     2015-08-31    1\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n### Expected case 131\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      622.0\n1      925.0\n2      664.0\n3      126.0\n4      276.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    980.0\n999    805.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([622., 925., 664., 126., 276., ... , 254., 372.,\n       193., 805.])`, shape: `(585,)`, type: `ndarray`\n\nval, expected value: `array([622., 925., 664., 126., 276., ... ,  nan,  nan,  nan, 980., 805.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 345, 413, 418, 421, 545, 582])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 530, 643, 649, 657, 910, 991])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59, 106, 146, 183, 215, 255, 302, 335, 363, 388, 422, 453, 481,\n       518, 558, 590, 639, 678, 715, 753, 787, 827, 867, 892, 924, 969])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([50, 45, 34, 32, 26, 36, 38, 28, 27, 24, 30, 23, 20, 34, 36, 26, 40,\n       37, 29, 32, 28, 37, 35, 24, 25, 38, 24])`, type: `ndarray`\n\nres, expected value: `array([45, 34, 32, 26, 36, 38, 28, 27, 24, 30, 23, 20, 34, 36, 26, 40, 37,\n       29, 32, 28, 37, 35, 24, 25, 38, 24])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    45\nb    34\nc    32\nd    26\ne    36\nf    38\ng    28\nh    27\ni    24\nj    30\nk    23\nl    20\nm    34\nn    36\no    26\np    40\nq    37\nr    29\ns    32\nt    28\nu    37\nv    35\nw    24\nx    25\ny    38\nz    24\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 132\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      622.0\n1      925.0\n2      664.0\n3      126.0\n4      276.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    980.0\n999    805.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 249, 249, 250, 250, 250, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([622., 925., 664., 126., 276., ... , 254., 372.,\n       193., 805.])`, shape: `(585,)`, type: `ndarray`\n\nval, expected value: `array([622., 925., 664., 126., 276., ... ,  nan,  nan,  nan, 980., 805.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 180, 413,  61, 161, 345, 118])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 451, 643, 320, 480, 530, 155])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  87,  92,  96,  98, ... ,\n       982, 986, 991, 996, 999])`, shape: `(252,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([72,  3,  5,  4,  2,  4,  9, ... ,  4,  4,  3,  4,  5,  5,  3,  1])`, shape: `(253,)`, type: `ndarray`\n\nres, expected value: `array([ 3,  5,  4,  2,  4,  9,  1, ... ,  4,  4,  3,  4,  5,  5,  3,  1])`, shape: `(252,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    5\n     2015-08-25    4\n     2015-08-26    2\n     2015-08-27    4\n                  ..\nz    2015-08-27    4\n     2015-08-28    5\n     2015-08-29    5\n     2015-08-30    3\n     2015-08-31    1\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n### Expected case 133\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       624\n1       400\n2        91\n3       477\n4       397\n       ... \n9995    211\n9996     15\n9997    774\n9998    751\n9999    949\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([624, 400,  91, 477, 397, ... , 444, 873, 612, 512, 402, 779])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([624, 400,  91, ..., 774, 751, 949])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   1,   3, ..., 990, 993, 997])`, type: `ndarray`\n\nsorter, expected value: `array([ 274,    1, 6242, ..., 5650, 8119, 6519])`, type: `ndarray`\n\nidx, expected value: `array([   0,  380,  758, 1153, 1539, 1928, 2317, 2698, 3078, 3487, 3885,\n       4265, 4633, 5021, 5405, 5833, 6197, 6580, 6965, 7373, 7768, 8137,\n       8534, 8897, 9277, 9646])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([308, 305, 322, 324, 323, 339, 314, 322, 329, 320, 319, 312, 317,\n       321, 339, 306, 315, 323, 328, 323, 307, 323, 303, 323, 309, 300])`, type: `ndarray`\n\nres, expected value: `array([308, 305, 322, 324, 323, 339, 314, 322, 329, 320, 319, 312, 317,\n       321, 339, 306, 315, 323, 328, 323, 307, 323, 303, 323, 309, 300])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    308\nb    305\nc    322\nd    324\ne    323\nf    339\ng    314\nh    322\ni    329\nj    320\nk    319\nl    312\nm    317\nn    321\no    339\np    306\nq    315\nr    323\ns    328\nt    323\nu    307\nv    323\nw    303\nx    323\ny    309\nz    300\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 134\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       624\n1       400\n2        91\n3       477\n4       397\n       ... \n9995    211\n9996     15\n9997    774\n9998    751\n9999    949\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([624, 400,  91, 477, 397, ... , 444, 873, 612, 512, 402, 779])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([624, 400,  91, ..., 774, 751, 949])`, type: `ndarray`\n\ncodes, expected value: `array([ 13,  23,  25, ..., 929, 939, 986])`, type: `ndarray`\n\nsorter, expected value: `array([7482, 3415, 1695, ..., 6057, 4125, 3738])`, type: `ndarray`\n\nidx, expected value: `array([   0,   40,   88,  122,  172, ... , 9810, 9850, 9886, 9921, 9962])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([40, 47, 33, 48, 32, 31, 38, ... , 34,\n       40, 35, 35, 40, 37])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([40, 47, 33, 48, 32, 31, 38, ... , 34,\n       40, 35, 35, 40, 37])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    40\n     2015-08-24    47\n     2015-08-25    33\n     2015-08-26    48\n     2015-08-27    32\n                   ..\nz    2015-08-28    40\n     2015-08-29    35\n     2015-08-30    35\n     2015-08-31    40\n     2015-09-01    37\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 135\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       624.0\n1       400.0\n2        91.0\n3       477.0\n4       397.0\n        ...  \n9995    211.0\n9996     15.0\n9997    774.0\n9998    751.0\n9999    949.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([624., 400.,  91., 477., 397., ... , 512., 268., 955., 402., 324.])`, shape: `(999,)`, type: `ndarray`\n\nval, expected value: `array([624., 400.,  91., ..., 774., 751., 949.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 979, 985, 994])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9421, 8119, 6519])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  949, 1304, 1675, 2037, 2394, 2766, 3121, 3470, 3856, 4234,\n       4593, 4936, 5299, 5661, 6065, 6409, 6778, 7140, 7523, 7898, 8247,\n       8622, 8952, 9315, 9660])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([395, 263, 249, 275, 263, 252, 290, 256, 266, 275, 263, 263, 255,\n       259, 260, 281, 258, 261, 270, 271, 268, 245, 266, 246, 270, 258,\n       254])`, type: `ndarray`\n\nres, expected value: `array([263, 249, 275, 263, 252, 290, 256, 266, 275, 263, 263, 255, 259,\n       260, 281, 258, 261, 270, 271, 268, 245, 266, 246, 270, 258, 254])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    263\nb    249\nc    275\nd    263\ne    252\nf    290\ng    256\nh    266\ni    275\nj    263\nk    263\nl    255\nm    259\nn    260\no    281\np    258\nq    261\nr    270\ns    271\nt    268\nu    245\nv    266\nw    246\nx    270\ny    258\nz    254\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 136\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       624.0\n1       400.0\n2        91.0\n3       477.0\n4       397.0\n        ...  \n9995    211.0\n9996     15.0\n9997    774.0\n9998    751.0\n9999    949.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([624., 400.,  91., 477., 397., ... , 512., 268., 955., 402., 324.])`, shape: `(999,)`, type: `ndarray`\n\nval, expected value: `array([624., 400.,  91., ..., 774., 751., 949.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 966, 977, 978])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 3738, 6057, 4125])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  883,  925,  955, 1000, ... , 9818, 9856, 9891, 9925, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([514,  36,  37,  29,  37, ... ,  34,  31,  26,  32,\n        30])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([36, 37, 29, 37, 21, 25, 33, ... , 28,\n       34, 31, 26, 32, 30])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    36\n     2015-08-24    37\n     2015-08-25    29\n     2015-08-26    37\n     2015-08-27    21\n                   ..\nz    2015-08-28    34\n     2015-08-29    31\n     2015-08-30    26\n     2015-08-31    32\n     2015-09-01    30\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 137\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       624.0\n1       400.0\n2        91.0\n3       477.0\n4       397.0\n        ...  \n9995    211.0\n9996     15.0\n9997    774.0\n9998    751.0\n9999    949.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([624., 400.,  91., 477., 397., ... , 512., 268., 955., 402., 324.])`, shape: `(999,)`, type: `ndarray`\n\nval, expected value: `array([624., 400.,  91., ..., 774., 751., 949.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 979, 985, 994])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9421, 8119, 6519])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  949, 1304, 1675, 2037, 2394, 2766, 3121, 3470, 3856, 4234,\n       4593, 4936, 5299, 5661, 6065, 6409, 6778, 7140, 7523, 7898, 8247,\n       8622, 8952, 9315, 9660])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([395, 263, 249, 275, 263, 252, 290, 256, 266, 275, 263, 263, 255,\n       259, 260, 281, 258, 261, 270, 271, 268, 245, 266, 246, 270, 258,\n       254])`, type: `ndarray`\n\nres, expected value: `array([263, 249, 275, 263, 252, 290, 256, 266, 275, 263, 263, 255, 259,\n       260, 281, 258, 261, 270, 271, 268, 245, 266, 246, 270, 258, 254])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    263\nb    249\nc    275\nd    263\ne    252\nf    290\ng    256\nh    266\ni    275\nj    263\nk    263\nl    255\nm    259\nn    260\no    281\np    258\nq    261\nr    270\ns    271\nt    268\nu    245\nv    266\nw    246\nx    270\ny    258\nz    254\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 138\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       624.0\n1       400.0\n2        91.0\n3       477.0\n4       397.0\n        ...  \n9995    211.0\n9996     15.0\n9997    774.0\n9998    751.0\n9999    949.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([624., 400.,  91., 477., 397., ... , 512., 268., 955., 402., 324.])`, shape: `(999,)`, type: `ndarray`\n\nval, expected value: `array([624., 400.,  91., ..., 774., 751., 949.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 966, 977, 978])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 3738, 6057, 4125])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  883,  925,  955, 1000, ... , 9818, 9856, 9891, 9925, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([514,  36,  37,  29,  37, ... ,  34,  31,  26,  32,\n        30])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([36, 37, 29, 37, 21, 25, 33, ... , 28,\n       34, 31, 26, 32, 30])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    36\n     2015-08-24    37\n     2015-08-25    29\n     2015-08-26    37\n     2015-08-27    21\n                   ..\nz    2015-08-28    34\n     2015-08-29    31\n     2015-08-30    26\n     2015-08-31    32\n     2015-09-01    30\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 139\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        300\n1        453\n2        731\n3        272\n4        612\n        ... \n99995    411\n99996    518\n99997    519\n99998    231\n99999    759\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([300, 453, 731, 272, 612, ... ,  98, 410,  47,  58,  68, 165])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([300, 453, 731, ..., 519, 231, 759])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([15788, 17988, 27991, ..., 31785, 58397, 99634])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3818,  7625, 11525, 15517, 19416, 23278, 27142, 30920,\n       34716, 38692, 42469, 46310, 50189, 54025, 57843, 61618, 65398,\n       69156, 73050, 76984, 80861, 84690, 88457, 92269, 96090])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([975, 978, 987, 986, 981, 975, 979, 984, 979, 981, 987, 974, 981,\n       988, 977, 980, 979, 977, 974, 985, 974, 977, 979, 974, 980, 976])`, type: `ndarray`\n\nres, expected value: `array([975, 978, 987, 986, 981, 975, 979, 984, 979, 981, 987, 974, 981,\n       988, 977, 980, 979, 977, 974, 985, 974, 977, 979, 974, 980, 976])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    975\nb    978\nc    987\nd    986\ne    981\nf    975\ng    979\nh    984\ni    979\nj    981\nk    987\nl    974\nm    981\nn    988\no    977\np    980\nq    979\nr    977\ns    974\nt    985\nu    974\nv    977\nw    979\nx    974\ny    980\nz    976\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 140\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        300\n1        453\n2        731\n3        272\n4        612\n        ... \n99995    411\n99996    518\n99997    519\n99998    231\n99999    759\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([300, 453, 731, 272, 612, ... ,  98, 410,  47,  58,  68, 165])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([300, 453, 731, ..., 519, 231, 759])`, type: `ndarray`\n\ncodes, expected value: `array([  6,   6,  11, ..., 986, 993, 998])`, type: `ndarray`\n\nsorter, expected value: `array([ 1919, 18646,  5173, ..., 16037, 76250, 93975])`, type: `ndarray`\n\nidx, expected value: `array([    0,   382,   788,  1180, ... , 98070, 98486, 98856, 99227, 99617])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([322, 328, 317, 299, 295, ... , 332, 334, 302, 307, 322, 312])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([322, 328, 317, 299, 295, ... , 332, 334, 302, 307, 322, 312])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    322\n     2015-08-24    328\n     2015-08-25    317\n     2015-08-26    299\n     2015-08-27    295\n                  ... \nz    2015-08-28    334\n     2015-08-29    302\n     2015-08-30    307\n     2015-08-31    322\n     2015-09-01    312\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 141\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        300.0\n1        453.0\n2        731.0\n3        272.0\n4        612.0\n         ...  \n99995    411.0\n99996    518.0\n99997    519.0\n99998    231.0\n99999    759.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([300., 453., 731., 272., 612., ... , 430., 428., 616.,  68., 165.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([300., 453., 731., ..., 519., 231., 759.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 31785, 58397, 99634])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9458, 13015, 16689, 20426, 24089, 27719, 31361, 34906,\n       38484, 42248, 45789, 49413, 53036, 56669, 60262, 63824, 67385,\n       70927, 74609, 78326, 81978, 85581, 89137, 92733, 96314])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([995, 951, 953, 961, 961, 951, 950, 952, 963, 955, 952, 956, 945,\n       958, 958, 957, 950, 944, 953, 952, 960, 957, 964, 946, 945, 947,\n       954])`, type: `ndarray`\n\nres, expected value: `array([951, 953, 961, 961, 951, 950, 952, 963, 955, 952, 956, 945, 958,\n       958, 957, 950, 944, 953, 952, 960, 957, 964, 946, 945, 947, 954])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    951\nb    953\nc    961\nd    961\ne    951\nf    950\ng    952\nh    963\ni    955\nj    952\nk    956\nl    945\nm    958\nn    958\no    957\np    950\nq    944\nr    953\ns    952\nt    960\nu    957\nv    964\nw    946\nx    945\ny    947\nz    954\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 142\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        300.0\n1        453.0\n2        731.0\n3        272.0\n4        612.0\n         ...  \n99995    411.0\n99996    518.0\n99997    519.0\n99998    231.0\n99999    759.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([300., 453., 731., 272., 612., ... , 430., 428., 616.,  68., 165.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([300., 453., 731., ..., 519., 231., 759.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 996, 997, 998])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 51659, 76250, 93975])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8788,  9147,  9498, ... , 98217, 98597, 98940, 99286, 99649])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([1001,  265,  249,  262,  248, ... ,  271,  235,  254,  270,  262])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([265, 249, 262, 248, 234, ... , 273, 271, 235, 254, 270, 262])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    265\n     2015-08-24    249\n     2015-08-25    262\n     2015-08-26    248\n     2015-08-27    234\n                  ... \nz    2015-08-28    271\n     2015-08-29    235\n     2015-08-30    254\n     2015-08-31    270\n     2015-09-01    262\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 143\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        300.0\n1        453.0\n2        731.0\n3        272.0\n4        612.0\n         ...  \n99995    411.0\n99996    518.0\n99997    519.0\n99998    231.0\n99999    759.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([300., 453., 731., 272., 612., ... , 430., 428., 616.,  68., 165.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([300., 453., 731., ..., 519., 231., 759.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 31785, 58397, 99634])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9458, 13015, 16689, 20426, 24089, 27719, 31361, 34906,\n       38484, 42248, 45789, 49413, 53036, 56669, 60262, 63824, 67385,\n       70927, 74609, 78326, 81978, 85581, 89137, 92733, 96314])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([995, 951, 953, 961, 961, 951, 950, 952, 963, 955, 952, 956, 945,\n       958, 958, 957, 950, 944, 953, 952, 960, 957, 964, 946, 945, 947,\n       954])`, type: `ndarray`\n\nres, expected value: `array([951, 953, 961, 961, 951, 950, 952, 963, 955, 952, 956, 945, 958,\n       958, 957, 950, 944, 953, 952, 960, 957, 964, 946, 945, 947, 954])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    951\nb    953\nc    961\nd    961\ne    951\nf    950\ng    952\nh    963\ni    955\nj    952\nk    956\nl    945\nm    958\nn    958\no    957\np    950\nq    944\nr    953\ns    952\nt    960\nu    957\nv    964\nw    946\nx    945\ny    947\nz    954\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 144\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        300.0\n1        453.0\n2        731.0\n3        272.0\n4        612.0\n         ...  \n99995    411.0\n99996    518.0\n99997    519.0\n99998    231.0\n99999    759.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `False`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([300., 453., 731., 272., 612., ... , 430., 428., 616.,  68., 165.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([300., 453., 731., ..., 519., 231., 759.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 996, 997, 998])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 51659, 76250, 93975])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8788,  9147,  9498, ... , 98217, 98597, 98940, 99286, 99649])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([1001,  265,  249,  262,  248, ... ,  271,  235,  254,  270,  262])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([265, 249, 262, 248, 234, ... , 273, 271, 235, 254, 270, 262])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    265\n     2015-08-24    249\n     2015-08-25    262\n     2015-08-26    248\n     2015-08-27    234\n                  ... \nz    2015-08-28    271\n     2015-08-29    235\n     2015-08-30    254\n     2015-08-31    270\n     2015-09-01    262\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 145\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     5\n1     6\n2     3\n3     0\n4     6\n     ..\n95    8\n96    8\n97    4\n98    8\n99    4\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,\n        2,  3,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  6,  6,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9, 10, 10, 10, 10,\n       10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14,\n       15, 15, 15, 15, 16, 16, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19,\n       19, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 23])`, type: `ndarray`\n\n_, expected value: `array([5, 6, 3, 0, 9, 2, 1, 7, 4, 8])`, type: `ndarray`\n\nval, expected value: `array([5, 6, 3, 0, 6, 6, 9, 2, 1, 0, 7, 7, 7, 2, 9, 2, 1, 1, 6, 7, 4, 0,\n       7, 5, 1, 1, 6, 2, 7, 5, 5, 6, 4, 6, 9, 6, 7, 7, 1, 4, 2, 0, 6, 7,\n       3, 2, 4, 6, 2, 7, 2, 3, 0, 9, 0, 0, 6, 3, 4, 6, 4, 0, 2, 2, 2, 8,\n       4, 5, 9, 1, 6, 3, 8, 8, 4, 9, 1, 1, 9, 2, 4, 1, 0, 8, 7, 1, 0, 1,\n       8, 6, 7, 5, 2, 5, 9, 8, 8, 4, 8, 4])`, type: `ndarray`\n\ncodes, expected value: `array([0, 1, 6, 7, 1, 4, 5, 5, 5, 6, 8, 8, 0, 2, 3, 4, 6, 7, 0, 1, 3, 3,\n       7, 8, 0, 1, 4, 3, 5, 5, 1, 1, 2, 3, 3, 5, 5, 1, 4, 5, 7, 9, 6, 7,\n       5, 7, 9, 5, 6, 6, 8, 8, 8, 9, 1, 1, 8, 9, 2, 6, 7, 9, 1, 2, 3, 6,\n       7, 7, 0, 1, 4, 8, 6, 7, 1, 7, 0, 3, 6, 6, 8, 0, 2, 3, 4, 8, 3, 5,\n       6, 8, 9, 1, 5, 7, 1, 9, 4, 4, 5, 9])`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 33, 81, 37,  1,  6, 27, 62, 64,  8, 20, 74, 30,  2, 41, 34, 16,\n       12, 67,  5,  3, 52, 36, 80, 93,  4, 53, 55,  7, 48, 26, 35, 44,  9,\n       82, 13, 63, 59, 14, 45, 10, 98, 38, 11, 15, 90, 95, 50, 17, 85, 39,\n       66, 97, 88, 18, 89, 46, 96, 51, 77, 19, 73, 56, 71, 21, 24, 22, 49,\n       23, 70, 75, 58, 25, 84, 31, 28, 29, 54, 69, 76, 60, 91, 57, 86, 78,\n       32, 61, 40, 87, 99, 83, 42, 79, 43, 47, 72, 68, 94, 92, 65])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  4, 12, 18, 24, 27, 30, 37, 42, 44, 47, 54, 58, 62, 65, 68, 72,\n       74, 76, 81, 86, 91, 94, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 5, 6, 5, 3, 2, 4, 5, 2, 3, 4, 3, 4, 3, 2, 4, 2, 2, 4, 5, 5, 3,\n       2, 3])`, type: `ndarray`\n\nres, expected value: `array([4, 5, 6, 5, 3, 2, 4, 5, 2, 3, 4, 3, 4, 3, 2, 4, 2, 2, 4, 5, 5, 3,\n       2, 3])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'u', 'p', 'i', 'x', 'f', 't', 'l', 'r', 'j', 'w', 's', 'q', 'g',\n       'n', 'c', 'v', 'm', 'o', 'e', 'd', 'y', 'z', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    4\nu    5\np    6\ni    5\nx    3\nf    2\nt    4\nl    5\nr    2\nj    3\nw    4\ns    3\nq    4\ng    3\nn    2\nc    4\nv    2\nm    2\no    4\ne    5\nd    5\ny    3\nz    2\nh    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 146\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     5\n1     6\n2     3\n3     0\n4     6\n     ..\n95    8\n96    8\n97    4\n98    8\n99    4\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  2,  3,  4,  5,  5,  6,  7,  8,  8,  8,  8,  9,  9, 10,\n       11, 12, 12, 12, 13, 13, 14, 14, 15, 15, 16, 17, 18, 19, 19, 20, 21,\n       22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33, 33, 34, 35, 36,\n       37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 50, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 73, 74, 74, 75, 76, 77, 78, 79, 80, 81])`, type: `ndarray`\n\n_, expected value: `array([5, 6, 3, 0, 9, 2, 1, 7, 4, 8])`, type: `ndarray`\n\nval, expected value: `array([5, 6, 3, 0, 6, 6, 9, 2, 1, 0, 7, 7, 7, 2, 9, 2, 1, 1, 6, 7, 4, 0,\n       7, 5, 1, 1, 6, 2, 7, 5, 5, 6, 4, 6, 9, 6, 7, 7, 1, 4, 2, 0, 6, 7,\n       3, 2, 4, 6, 2, 7, 2, 3, 0, 9, 0, 0, 6, 3, 4, 6, 4, 0, 2, 2, 2, 8,\n       4, 5, 9, 1, 6, 3, 8, 8, 4, 9, 1, 1, 9, 2, 4, 1, 0, 8, 7, 1, 0, 1,\n       8, 6, 7, 5, 2, 5, 9, 8, 8, 4, 8, 4])`, type: `ndarray`\n\ncodes, expected value: `array([0, 1, 2, 3, 3, 1, 0, 1, 4, 5, 5, 5, 6, 8, 2, 3, 7, 7, 0, 6, 7, 5,\n       5, 4, 5, 5, 9, 6, 1, 7, 5, 8, 3, 7, 0, 6, 6, 1, 7, 0, 1, 8, 1, 6,\n       4, 1, 3, 7, 7, 6, 8, 5, 1, 7, 8, 1, 5, 7, 5, 2, 4, 3, 3, 1, 2, 2,\n       4, 8, 1, 8, 3, 9, 8, 4, 6, 1, 9, 9, 4, 6, 6, 5, 8, 3, 9, 7, 6, 3,\n       6, 8, 9, 1, 9, 7, 0, 5, 0, 4, 9, 8])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  1,  2, 41,  3,  4, 67,  5,  6,  7, 27, 62,  8, 74, 44,  9, 10,\n       11, 30, 16, 12, 13, 63, 14, 45, 15, 95, 17, 18, 19, 64, 20, 21, 22,\n       23, 24, 25, 26, 28, 29, 31, 32, 33, 81, 34, 35, 52, 36, 37, 38, 39,\n       40, 42, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 71, 57, 78, 58,\n       59, 60, 61, 65, 66, 68, 69, 70, 72, 73, 75, 76, 77, 79, 80, 82, 83,\n       84, 85, 86, 87, 97, 88, 89, 96, 90, 91, 92, 93, 94, 98, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  2,  4,  5,  6,  8,  9, 10, 14, 16, 17, 18, 21, 23, 25, 27,\n       28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46,\n       48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 2, 1, 1, 2, 1, 1, 3, 2, 1, 1, 3, 1, 2, 2, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 2, 1, 1, 2, 1, 1, 3, 2, 1, 1, 3, 1, 2, 2, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('b', '2015-08-25') ... ('d', '2015-08-29')],\n           names=['jim', 'joe'])`, shape: `(82,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nb    2015-08-25    1\nu    2015-08-31    1\np    2015-08-24    2\ni    2015-08-30    1\nx    2015-08-31    1\n                  ..\nh    2015-08-29    1\nx    2015-08-25    1\nh    2015-08-25    1\nl    2015-08-29    1\nd    2015-08-29    1\nName: julie, Length: 82, dtype: int64`, type: `Series`\n\n### Expected case 147\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     5.0\n1     6.0\n2     3.0\n3     0.0\n4     6.0\n     ... \n95    8.0\n96    8.0\n97    4.0\n98    8.0\n99    4.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,\n        2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,\n        6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9, 10,\n       10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14,\n       14, 14, 14, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,\n       19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 23])`, type: `ndarray`\n\n_, expected value: `array([5., 6., 3., 0., 9., 7., 2., 1., 4., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 5.,  6.,  3.,  0.,  6., ... ,  9.,  8.,  8.,  4.,  8.,  4.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  1,  3,  3,  7,  0,  1,  5,  7,  0,  2,  3,  4,  5,  7,  0,\n        1,  3,  5,  8,  0,  1,  4, -1, -1, -1,  4,  6,  8,  8, -1,  3,  6,\n       -1, -1,  2,  3,  6,  6, -1,  1,  4,  5,  9,  5,  7,  5,  6,  9, -1,\n       -1,  6,  7,  8,  8,  9,  2,  5,  7,  9,  1,  2,  3,  5,  5,  7,  0,\n        1,  4,  8, -1,  7, -1,  1,  0,  3,  7,  8,  0,  2,  4,  8, -1,  3,\n        6,  7,  8,  1,  5,  6, -1,  1,  9, -1,  9, -1,  4,  4,  6])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 86, 69,  0, 33, 37, 81, 30,  2, 41, 34, 12, 16, 67,\n        5,  3, 36, 80, 93,  4, 53,  8, 27, 64,  6, 62, 20, 74,  7, 55, 48,\n        9, 26, 44, 82, 13, 63, 45, 59, 14, 10, 98, 11, 38, 90, 15, 95, 66,\n       85, 50, 17, 39, 97, 88, 51, 19, 77, 73, 56, 71, 21, 22, 49, 24, 23,\n       70, 75, 58, 84, 25, 28, 31, 29, 54, 76, 60, 91, 57, 78, 32, 83, 61,\n       40, 87, 99, 42, 43, 79, 46, 89, 96, 47, 72, 65, 68, 94, 92])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 10, 16, 21, 24, 31, 34, 40, 45, 47, 50, 57, 61, 64, 67, 71, 73,\n       75, 79, 83, 88, 91, 94, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... ,  True, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 4, 6, 5, 3, 3, 2, 3, 4, 2, 3, 4, 4, 3, 2, 4, 1, 1, 4, 4, 4, 3,\n       2, 1, 2])`, type: `ndarray`\n\nres, expected value: `array([4, 6, 5, 3, 3, 2, 3, 4, 2, 3, 4, 4, 3, 2, 4, 1, 1, 4, 4, 4, 3, 2,\n       1, 2])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'p', 'i', 'x', 'u', 'f', 't', 'l', 'r', 'j', 'w', 'q', 'g', 'n',\n       'c', 'v', 'm', 'o', 'e', 'd', 'y', 's', 'z', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    4\np    6\ni    5\nx    3\nu    3\nf    2\nt    3\nl    4\nr    2\nj    3\nw    4\nq    4\ng    3\nn    2\nc    4\nv    1\nm    1\no    4\ne    4\nd    4\ny    3\ns    2\nz    1\nh    2\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 148\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     5.0\n1     6.0\n2     3.0\n3     0.0\n4     6.0\n     ... \n95    8.0\n96    8.0\n97    4.0\n98    8.0\n99    4.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  3,  4,  5,\n        6,  6,  6,  6,  7,  7,  8,  9, 10, 10, 10, 11, 11, 12, 12, 13, 13,\n       14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28,\n       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 44,\n       45, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 63, 64, 65, 65, 66, 66, 67, 68, 69, 70, 71, 72, 73])`, type: `ndarray`\n\n_, expected value: `array([5., 6., 3., 0., 9., 7., 2., 1., 4., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 5.,  6.,  3.,  0.,  6., ... ,  9.,  8.,  8.,  4.,  8.,  4.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  1,  3,  3,  3,  6,  7,  7,  0,  2,  3,  1,  0,  1,  4, -1,\n       -1, -1,  6,  8, -1,  2,  5,  5,  0,  5,  7,  6,  6, -1,  4,  6,  9,\n        7,  5, -1,  8,  3,  5,  0,  7,  7, -1, -1,  0,  1,  8,  1,  7,  4,\n        5,  5,  7,  8,  1,  5, -1, -1,  6,  5,  6,  2,  4,  3,  3,  1,  2,\n        2,  4,  8,  1,  8,  3, -1, -1,  4,  1,  9,  9,  4,  7,  6,  8,  3,\n       -1, -1, -1,  7,  8,  9,  1,  9,  5,  0,  6,  0,  4,  9,  8])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35,  3, 52, 86, 40, 69, 77,  0,  2, 41,  4, 67,  5,  6,  7,\n        8, 27, 62, 74,  9, 44, 10, 11, 30, 12, 16, 13, 63, 45, 14, 15, 95,\n       17, 19, 64, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 81, 34,\n       36, 37, 38, 39, 42, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 71,\n       57, 78, 58, 59, 60, 61, 65, 66, 68, 70, 72, 73, 75, 76, 79, 80, 82,\n       83, 84, 85, 87, 97, 88, 89, 96, 90, 91, 92, 93, 94, 98, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 15, 16, 17, 21, 23, 24, 25, 28, 30, 32, 34, 35, 36,\n       38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55,\n       56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74,\n       75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93,\n       94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 1, 2, 1, 2, 1, 0, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       2, 2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 1, 2, 1, 0, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2,\n       2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('b', '2015-08-25') ... ('d', '2015-08-29')],\n           names=['jim', 'joe'])`, shape: `(74,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nb    2015-08-25    1\np    2015-08-24    2\nx    2015-08-31    1\ni    2015-08-26    2\nu    2015-08-23    1\n                  ..\nh    2015-08-29    1\nx    2015-08-25    1\nh    2015-08-25    1\nl    2015-08-29    1\nd    2015-08-29    1\nName: julie, Length: 74, dtype: int64`, type: `Series`\n\n### Expected case 149\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     5.0\n1     6.0\n2     3.0\n3     0.0\n4     6.0\n     ... \n95    8.0\n96    8.0\n97    4.0\n98    8.0\n99    4.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,\n        2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,\n        6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9, 10,\n       10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14,\n       14, 14, 14, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,\n       19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 23])`, type: `ndarray`\n\n_, expected value: `array([5., 6., 3., 0., 9., 7., 2., 1., 4., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 5.,  6.,  3.,  0.,  6., ... ,  9.,  8.,  8.,  4.,  8.,  4.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  1,  3,  3,  7,  0,  1,  5,  7,  0,  2,  3,  4,  5,  7,  0,\n        1,  3,  5,  8,  0,  1,  4, -1, -1, -1,  4,  6,  8,  8, -1,  3,  6,\n       -1, -1,  2,  3,  6,  6, -1,  1,  4,  5,  9,  5,  7,  5,  6,  9, -1,\n       -1,  6,  7,  8,  8,  9,  2,  5,  7,  9,  1,  2,  3,  5,  5,  7,  0,\n        1,  4,  8, -1,  7, -1,  1,  0,  3,  7,  8,  0,  2,  4,  8, -1,  3,\n        6,  7,  8,  1,  5,  6, -1,  1,  9, -1,  9, -1,  4,  4,  6])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 86, 69,  0, 33, 37, 81, 30,  2, 41, 34, 12, 16, 67,\n        5,  3, 36, 80, 93,  4, 53,  8, 27, 64,  6, 62, 20, 74,  7, 55, 48,\n        9, 26, 44, 82, 13, 63, 45, 59, 14, 10, 98, 11, 38, 90, 15, 95, 66,\n       85, 50, 17, 39, 97, 88, 51, 19, 77, 73, 56, 71, 21, 22, 49, 24, 23,\n       70, 75, 58, 84, 25, 28, 31, 29, 54, 76, 60, 91, 57, 78, 32, 83, 61,\n       40, 87, 99, 42, 43, 79, 46, 89, 96, 47, 72, 65, 68, 94, 92])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 10, 16, 21, 24, 31, 34, 40, 45, 47, 50, 57, 61, 64, 67, 71, 73,\n       75, 79, 83, 88, 91, 94, 96])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... ,  True, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 4, 6, 5, 3, 3, 2, 3, 4, 2, 3, 4, 4, 3, 2, 4, 1, 1, 4, 4, 4, 3,\n       2, 1, 2])`, type: `ndarray`\n\nres, expected value: `array([4, 6, 5, 3, 3, 2, 3, 4, 2, 3, 4, 4, 3, 2, 4, 1, 1, 4, 4, 4, 3, 2,\n       1, 2])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'p', 'i', 'x', 'u', 'f', 't', 'l', 'r', 'j', 'w', 'q', 'g', 'n',\n       'c', 'v', 'm', 'o', 'e', 'd', 'y', 's', 'z', 'h'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    4\np    6\ni    5\nx    3\nu    3\nf    2\nt    3\nl    4\nr    2\nj    3\nw    4\nq    4\ng    3\nn    2\nc    4\nv    1\nm    1\no    4\ne    4\nd    4\ny    3\ns    2\nz    1\nh    2\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 150\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     5.0\n1     6.0\n2     3.0\n3     0.0\n4     6.0\n     ... \n95    8.0\n96    8.0\n97    4.0\n98    8.0\n99    4.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  3,  4,  5,\n        6,  6,  6,  6,  7,  7,  8,  9, 10, 10, 10, 11, 11, 12, 12, 13, 13,\n       14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28,\n       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 44,\n       45, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 63, 64, 65, 65, 66, 66, 67, 68, 69, 70, 71, 72, 73])`, type: `ndarray`\n\n_, expected value: `array([5., 6., 3., 0., 9., 7., 2., 1., 4., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 5.,  6.,  3.,  0.,  6., ... ,  9.,  8.,  8.,  4.,  8.,  4.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  1,  3,  3,  3,  6,  7,  7,  0,  2,  3,  1,  0,  1,  4, -1,\n       -1, -1,  6,  8, -1,  2,  5,  5,  0,  5,  7,  6,  6, -1,  4,  6,  9,\n        7,  5, -1,  8,  3,  5,  0,  7,  7, -1, -1,  0,  1,  8,  1,  7,  4,\n        5,  5,  7,  8,  1,  5, -1, -1,  6,  5,  6,  2,  4,  3,  3,  1,  2,\n        2,  4,  8,  1,  8,  3, -1, -1,  4,  1,  9,  9,  4,  7,  6,  8,  3,\n       -1, -1, -1,  7,  8,  9,  1,  9,  5,  0,  6,  0,  4,  9,  8])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35,  3, 52, 86, 40, 69, 77,  0,  2, 41,  4, 67,  5,  6,  7,\n        8, 27, 62, 74,  9, 44, 10, 11, 30, 12, 16, 13, 63, 45, 14, 15, 95,\n       17, 19, 64, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 81, 34,\n       36, 37, 38, 39, 42, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 71,\n       57, 78, 58, 59, 60, 61, 65, 66, 68, 70, 72, 73, 75, 76, 79, 80, 82,\n       83, 84, 85, 87, 97, 88, 89, 96, 90, 91, 92, 93, 94, 98, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 15, 16, 17, 21, 23, 24, 25, 28, 30, 32, 34, 35, 36,\n       38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55,\n       56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74,\n       75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93,\n       94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([4, 1, 2, 1, 2, 1, 0, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       2, 2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 1, 2, 1, 0, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2,\n       2, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('b', '2015-08-25') ... ('d', '2015-08-29')],\n           names=['jim', 'joe'])`, shape: `(74,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nb    2015-08-25    1\np    2015-08-24    2\nx    2015-08-31    1\ni    2015-08-26    2\nu    2015-08-23    1\n                  ..\nh    2015-08-29    1\nx    2015-08-25    1\nh    2015-08-25    1\nl    2015-08-29    1\nd    2015-08-29    1\nName: julie, Length: 74, dtype: int64`, type: `Series`\n\n### Expected case 151\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      5\n1      2\n2      3\n3      4\n4      5\n      ..\n995    4\n996    1\n997    7\n998    5\n999    2\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([5, 2, 3, 4, 0, 6, 9, 7, 1, 8])`, type: `ndarray`\n\nval, expected value: `array([5, 2, 3, 4, 5, 0, 0, 6, 0, ... ,\n       5, 3, 7, 4, 9, 4, 1, 7, 5, 2])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, 0, 0, 0, 1, 1, 1, ... ,\n       8, 8, 8, 8, 8, 9, 9, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0, 139, 414, 535, 691, ... , 984, 110, 222, 308, 625, 922])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  43,  73, 113, 135, 170, 206, 247, 285, 320, 354, 390, 429,\n       469, 507, 538, 581, 625, 660, 705, 748, 795, 820, 862, 905, 952])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, 0, 0, 0, 1, 0, 0, ... ,\n       0, 0, 0, 0, 0, 1, 0, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10,  8,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10,\n       10, 10,  9, 10,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10,  8,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10,\n       10, 10,  9, 10,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['h', 'p', 'a', 'f', 'o', 'z', 'u', 'l', 'x', 'k', 'c', 'm', 'r', 'w',\n       'q', 's', 'i', 'y', 'n', 'd', 'b', 'v', 'j', 'e', 't', 'g'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nh    10\np    10\na    10\nf     8\no     9\nz    10\nu    10\nl    10\nx    10\nk    10\nc    10\nm     9\nr    10\nw    10\nq    10\ns    10\ni    10\ny    10\nn    10\nd     9\nb    10\nv     9\nj    10\ne    10\nt    10\ng    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 152\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      5\n1      2\n2      3\n3      4\n4      5\n      ..\n995    4\n996    1\n997    7\n998    5\n999    2\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   1,   1,   1, ... , 247, 248, 249, 249, 250, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([5, 2, 3, 4, 0, 6, 9, 7, 1, 8])`, type: `ndarray`\n\nval, expected value: `array([5, 2, 3, 4, 5, 0, 0, 6, 0, ... ,\n       5, 3, 7, 4, 9, 4, 1, 7, 5, 2])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, 1, 2, 8, 2, 1, 3, ... ,\n       0, 6, 9, 3, 8, 5, 1, 6, 2, 3])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0, 691, 790,   1, 186, ... , 821, 836, 859, 853, 903, 959])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   2,   6,   7,   9, ... ,\n       994, 995, 996, 998, 999])`, shape: `(252,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([1, 4, 1, 2, 1, 4, 1, 4, 4, ... ,\n       1, 1, 1, 2, 1, 1, 1, 2, 1, 1])`, shape: `(252,)`, type: `ndarray`\n\nres, expected value: `array([1, 4, 1, 2, 1, 4, 1, 4, 4, ... ,\n       1, 1, 1, 2, 1, 1, 1, 2, 1, 1])`, shape: `(252,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('h', '2015-08-26') ... ('q', '2015-08-31')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nh    2015-08-26    1\np    2015-08-27    4\na    2015-09-01    1\np    2015-08-24    2\nf    2015-08-25    1\n                  ..\n     2015-08-23    1\nv    2015-08-29    1\nx    2015-08-30    2\nu    2015-08-30    1\nq    2015-08-31    1\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n### Expected case 153\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      5.0\n1      2.0\n2      3.0\n3      4.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([5., 2., 3., 4., 0., 7., 9., 1., 8., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 5.,  2.,  3.,  4.,  5., ... ,  9., nan, nan, nan,  5.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  8,  8,  8,  8,  9,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 910, 973, 118, 131, 835, 968])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  99, 135, 163, 184, 217, 252, 290, 328, 360, 390, 424, 459,\n       497, 532, 562, 604, 647, 677, 718, 764, 789, 830, 869, 915, 960])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10,  7,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10,\n       10,  9,  9, 10,  8, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10,  7,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10, 10,\n        9,  9, 10,  8, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nri, expected value: `Index(['h', 'a', 'p', 'f', 'o', 'z', 'u', 'l', 'x', 'k', 'c', 'm', 'r', 'w',\n       'q', 's', 'i', 'y', 'd', 'b', 'v', 'j', 'e', 't', 'g', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nh    10\na    10\np    10\nf     7\no     9\nz    10\nu    10\nl    10\nx    10\nk    10\nc    10\nm     9\nr    10\nw    10\nq     9\ns    10\ni    10\ny     9\nd     9\nb    10\nv     8\nj    10\ne    10\nt    10\ng     9\nn    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 154\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      5.0\n1      2.0\n2      3.0\n3      4.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 243, 244, 244, 245, 246, 247])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([5., 2., 3., 4., 0., 7., 9., 1., 8., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 5.,  2.,  3.,  4.,  5., ... ,  9., nan, nan, nan,  5.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  3,  7,  9,  1,  6,  6,  2, -1])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 836, 859, 853, 875, 903, 959])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  86,  87,  88,  93, ... , 994, 995, 997, 998,\n       999])`, shape: `(248,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n        True])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10,  1,  1,  1,  3,  1,  3, ... ,  2,  1,  1,  1,  2,  1,  1,  0])`, shape: `(249,)`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 3, 1, 3, 3, 5, 3, ... , 2, 1,\n       1, 1, 2, 1, 1, 0])`, shape: `(248,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('h', '2015-08-26') ... ('q', '2015-08-31')],\n           names=['jim', 'joe'], length=248)`, shape: `(248,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nh    2015-08-26    1\na    2015-09-01    1\nf    2015-08-25    1\no    2015-08-23    3\nh    2015-08-25    1\n                  ..\nv    2015-08-29    1\nx    2015-08-30    2\nr    2015-08-30    1\nu    2015-08-30    1\nq    2015-08-31    0\nName: julie, Length: 248, dtype: int64`, type: `Series`\n\n### Expected case 155\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      5.0\n1      2.0\n2      3.0\n3      4.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([5., 2., 3., 4., 0., 7., 9., 1., 8., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 5.,  2.,  3.,  4.,  5., ... ,  9., nan, nan, nan,  5.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  8,  8,  8,  8,  9,  9,  9,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 910, 973, 118, 131, 835, 968])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  99, 135, 163, 184, 217, 252, 290, 328, 360, 390, 424, 459,\n       497, 532, 562, 604, 647, 677, 718, 764, 789, 830, 869, 915, 960])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10,  7,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10,\n       10,  9,  9, 10,  8, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10,  7,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10,  9, 10, 10,\n        9,  9, 10,  8, 10, 10, 10,  9, 10])`, type: `ndarray`\n\nri, expected value: `Index(['h', 'a', 'p', 'f', 'o', 'z', 'u', 'l', 'x', 'k', 'c', 'm', 'r', 'w',\n       'q', 's', 'i', 'y', 'd', 'b', 'v', 'j', 'e', 't', 'g', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nh    10\na    10\np    10\nf     7\no     9\nz    10\nu    10\nl    10\nx    10\nk    10\nc    10\nm     9\nr    10\nw    10\nq     9\ns    10\ni    10\ny     9\nd     9\nb    10\nv     8\nj    10\ne    10\nt    10\ng     9\nn    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 156\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      5.0\n1      2.0\n2      3.0\n3      4.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 243, 244, 244, 245, 246, 247])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([5., 2., 3., 4., 0., 7., 9., 1., 8., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 5.,  2.,  3.,  4.,  5., ... ,  9., nan, nan, nan,  5.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  3,  7,  9,  1,  6,  6,  2, -1])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 836, 859, 853, 875, 903, 959])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  86,  87,  88,  93, ... , 994, 995, 997, 998,\n       999])`, shape: `(248,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n        True])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10,  1,  1,  1,  3,  1,  3, ... ,  2,  1,  1,  1,  2,  1,  1,  0])`, shape: `(249,)`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 3, 1, 3, 3, 5, 3, ... , 2, 1,\n       1, 1, 2, 1, 1, 0])`, shape: `(248,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('h', '2015-08-26') ... ('q', '2015-08-31')],\n           names=['jim', 'joe'], length=248)`, shape: `(248,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nh    2015-08-26    1\na    2015-09-01    1\nf    2015-08-25    1\no    2015-08-23    3\nh    2015-08-25    1\n                  ..\nv    2015-08-29    1\nx    2015-08-30    2\nr    2015-08-30    1\nu    2015-08-30    1\nq    2015-08-31    0\nName: julie, Length: 248, dtype: int64`, type: `Series`\n\n### Expected case 157\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9\n1       6\n2       2\n3       8\n4       4\n       ..\n9995    0\n9996    8\n9997    0\n9998    4\n9999    5\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([9, 6, 2, 8, 4, 0, 3, 7, 5, 1])`, type: `ndarray`\n\nval, expected value: `array([9, 6, 2, ..., 0, 4, 5])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([   0,  371,  444, ..., 8875, 9420, 9731])`, type: `ndarray`\n\nidx, expected value: `array([   0,  399,  794, 1213, 1595, 1982, 2385, 2770, 3139, 3525, 3903,\n       4305, 4680, 5081, 5462, 5850, 6221, 6625, 6993, 7363, 7741, 8122,\n       8496, 8872, 9225, 9618])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'n', 'z', 'j', 'v', 'b', 's', 'g', 'd', 'q', 'a', 'l', 'r', 'o',\n       'c', 'p', 'e', 'w', 'h', 'x', 't', 'u', 'i', 'y', 'k', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    10\nn    10\nz    10\nj    10\nv    10\nb    10\ns    10\ng    10\nd    10\nq    10\na    10\nl    10\nr    10\no    10\nc    10\np    10\ne    10\nw    10\nh    10\nx    10\nt    10\nu    10\ni    10\ny    10\nk    10\nf    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 158\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9\n1       6\n2       2\n3       8\n4       4\n       ..\n9995    0\n9996    8\n9997    0\n9998    4\n9999    5\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([9, 6, 2, 8, 4, 0, 3, 7, 5, 1])`, type: `ndarray`\n\nval, expected value: `array([9, 6, 2, ..., 0, 4, 5])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([   0, 3156, 3362, ..., 4168, 5496, 7524])`, type: `ndarray`\n\nidx, expected value: `array([   0,   35,   75,  104,  136, ... , 9827, 9861, 9900, 9940, 9967])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10,  9, 10,  9, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10,  9, 10,  9, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('m', '2015-08-27') ... ('g', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nm    2015-08-27    10\nn    2015-08-25    10\nz    2015-08-29     9\nj    2015-09-01    10\nv    2015-08-28     9\n                   ..\nj    2015-08-28    10\nu    2015-08-28    10\ny    2015-09-01    10\no    2015-08-30    10\ng    2015-08-29    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 159\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9.0\n1       6.0\n2       2.0\n3       8.0\n4       4.0\n       ... \n9995    0.0\n9996    8.0\n9997    0.0\n9998    4.0\n9999    5.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([9., 6., 2., 8., 4., 0., 3., 7., 5., 1.])`, type: `ndarray`\n\nval, expected value: `array([9., 6., 2., ..., 0., 4., 5.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 8721, 9420, 9731])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  965, 1359, 1714, 2072, 2454, 2821, 3163, 3525, 3894, 4256,\n       4639, 4997, 5375, 5736, 6102, 6451, 6833, 7184, 7533, 7887, 8229,\n       8577, 8936, 9279, 9639])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'z', 'j', 'v', 'b', 's', 'g', 'd', 'n', 'q', 'a', 'l', 'r', 'o',\n       'c', 'p', 'e', 'w', 'h', 'x', 'u', 'i', 't', 'y', 'k', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    10\nz    10\nj    10\nv    10\nb    10\ns    10\ng    10\nd    10\nn    10\nq    10\na    10\nl    10\nr    10\no    10\nc    10\np    10\ne    10\nw    10\nh    10\nx    10\nu    10\ni    10\nt    10\ny    10\nk    10\nf    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 160\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9.0\n1       6.0\n2       2.0\n3       8.0\n4       4.0\n       ... \n9995    0.0\n9996    8.0\n9997    0.0\n9998    4.0\n9999    5.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([9., 6., 2., 8., 4., 0., 3., 7., 5., 1.])`, type: `ndarray`\n\nval, expected value: `array([9., 6., 2., ..., 0., 4., 5.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 1482, 5496, 7524])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  877,  903,  935,  968, ... , 9839, 9870, 9905, 9944, 9968])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10,  8,  9, 10,  9,  8, ... ,\n        9,  9,  9, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10,  8,  9, 10,  9,  8, 10, ... ,  9,\n        9,  9, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('m', '2015-08-27') ... ('g', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nm    2015-08-27    10\nz    2015-08-29     8\nv    2015-08-28     9\nb    2015-08-24    10\n     2015-08-27     9\n                   ..\nu    2015-08-28     9\na    2015-08-30     9\ny    2015-09-01    10\no    2015-08-30    10\ng    2015-08-29    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 161\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9.0\n1       6.0\n2       2.0\n3       8.0\n4       4.0\n       ... \n9995    0.0\n9996    8.0\n9997    0.0\n9998    4.0\n9999    5.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([9., 6., 2., 8., 4., 0., 3., 7., 5., 1.])`, type: `ndarray`\n\nval, expected value: `array([9., 6., 2., ..., 0., 4., 5.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 8721, 9420, 9731])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  965, 1359, 1714, 2072, 2454, 2821, 3163, 3525, 3894, 4256,\n       4639, 4997, 5375, 5736, 6102, 6451, 6833, 7184, 7533, 7887, 8229,\n       8577, 8936, 9279, 9639])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['m', 'z', 'j', 'v', 'b', 's', 'g', 'd', 'n', 'q', 'a', 'l', 'r', 'o',\n       'c', 'p', 'e', 'w', 'h', 'x', 'u', 'i', 't', 'y', 'k', 'f'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nm    10\nz    10\nj    10\nv    10\nb    10\ns    10\ng    10\nd    10\nn    10\nq    10\na    10\nl    10\nr    10\no    10\nc    10\np    10\ne    10\nw    10\nh    10\nx    10\nu    10\ni    10\nt    10\ny    10\nk    10\nf    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 162\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9.0\n1       6.0\n2       2.0\n3       8.0\n4       4.0\n       ... \n9995    0.0\n9996    8.0\n9997    0.0\n9998    4.0\n9999    5.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([9., 6., 2., 8., 4., 0., 3., 7., 5., 1.])`, type: `ndarray`\n\nval, expected value: `array([9., 6., 2., ..., 0., 4., 5.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 1482, 5496, 7524])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  877,  903,  935,  968, ... , 9839, 9870, 9905, 9944, 9968])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10,  8,  9, 10,  9,  8, ... ,\n        9,  9,  9, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10,  8,  9, 10,  9,  8, 10, ... ,  9,\n        9,  9, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('m', '2015-08-27') ... ('g', '2015-08-29')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nm    2015-08-27    10\nz    2015-08-29     8\nv    2015-08-28     9\nb    2015-08-24    10\n     2015-08-27     9\n                   ..\nu    2015-08-28     9\na    2015-08-30     9\ny    2015-09-01    10\no    2015-08-30    10\ng    2015-08-29    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 163\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        7\n1        2\n2        5\n3        7\n4        5\n        ..\n99995    1\n99996    2\n99997    3\n99998    0\n99999    3\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([7, 2, 5, 4, 0, 1, 6, 3, 8, 9])`, type: `ndarray`\n\nval, expected value: `array([7, 2, 5, ..., 3, 0, 3])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([    0,   604,   740, ..., 98507, 98750, 99804])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3846,  7762, 11563, 15449, 19305, 23224, 27152, 31006,\n       34895, 38801, 42653, 46408, 50406, 54082, 58007, 61782, 65644,\n       69441, 73366, 77231, 81044, 84968, 88828, 92478, 96177])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['x', 't', 'q', 'a', 'p', 'k', 'o', 'c', 'i', 'g', 's', 'y', 'v', 'u',\n       'd', 'f', 'b', 'm', 'w', 'h', 'j', 'l', 'z', 'n', 'r', 'e'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    10\nt    10\nq    10\na    10\np    10\nk    10\no    10\nc    10\ni    10\ng    10\ns    10\ny    10\nv    10\nu    10\nd    10\nf    10\nb    10\nm    10\nw    10\nh    10\nj    10\nl    10\nz    10\nn    10\nr    10\ne    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 164\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        7\n1        2\n2        5\n3        7\n4        5\n        ..\n99995    1\n99996    2\n99997    3\n99998    0\n99999    3\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([7, 2, 5, 4, 0, 1, 6, 3, 8, 9])`, type: `ndarray`\n\nval, expected value: `array([7, 2, 5, ..., 3, 0, 3])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([    0,   798,  3252, ..., 92156, 97024, 99804])`, type: `ndarray`\n\nidx, expected value: `array([    0,   385,   764,  1134, ... , 98138, 98505, 98868, 99259, 99614])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-24') ... ('e', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-24    10\nt    2015-08-30    10\nq    2015-08-28    10\na    2015-08-29    10\np    2015-09-01    10\n                   ..\nz    2015-08-28    10\nr    2015-08-24    10\nm    2015-08-24    10\nh    2015-08-29    10\ne    2015-08-24    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 165\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        7.0\n1        2.0\n2        5.0\n3        7.0\n4        5.0\n        ... \n99995    1.0\n99996    2.0\n99997    3.0\n99998    0.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([7., 2., 5., 4., 0., 6., 3., 8., 1., 9.])`, type: `ndarray`\n\nval, expected value: `array([7., 2., 5., ..., 3., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 97722, 98507, 99804])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9527, 13120, 16800, 20429, 24101, 27805, 31434, 35093,\n       38753, 42412, 46085, 49612, 53379, 56845, 60539, 64081, 67729,\n       71285, 74973, 78595, 82196, 85883, 89508, 92949, 96412])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'q', 'a', 'p', 'k', 'o', 'c', 'i', 'g', 's', 't', 'y', 'v', 'u',\n       'd', 'f', 'b', 'm', 'w', 'h', 'j', 'l', 'z', 'n', 'r', 'e'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    10\nq    10\na    10\np    10\nk    10\no    10\nc    10\ni    10\ng    10\ns    10\nt    10\ny    10\nv    10\nu    10\nd    10\nf    10\nb    10\nm    10\nw    10\nh    10\nj    10\nl    10\nz    10\nn    10\nr    10\ne    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 166\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        7.0\n1        2.0\n2        5.0\n3        7.0\n4        5.0\n        ... \n99995    1.0\n99996    2.0\n99997    3.0\n99998    0.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([7., 2., 5., 4., 0., 6., 3., 8., 1., 9.])`, type: `ndarray`\n\nval, expected value: `array([7., 2., 5., ..., 3., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 76514, 77411, 77953])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8785,  9130,  9489, ... , 98356, 98679, 99003, 99332, 99679])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n       10, 10, 10, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-24') ... ('j', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-24    10\nq    2015-08-28    10\np    2015-09-01    10\nk    2015-09-01    10\no    2015-08-29    10\n                   ..\nh    2015-08-29    10\nu    2015-08-29    10\ng    2015-08-30    10\ne    2015-08-24    10\nj    2015-08-24    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 167\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        7.0\n1        2.0\n2        5.0\n3        7.0\n4        5.0\n        ... \n99995    1.0\n99996    2.0\n99997    3.0\n99998    0.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([7., 2., 5., 4., 0., 6., 3., 8., 1., 9.])`, type: `ndarray`\n\nval, expected value: `array([7., 2., 5., ..., 3., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 97722, 98507, 99804])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9527, 13120, 16800, 20429, 24101, 27805, 31434, 35093,\n       38753, 42412, 46085, 49612, 53379, 56845, 60539, 64081, 67729,\n       71285, 74973, 78595, 82196, 85883, 89508, 92949, 96412])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['x', 'q', 'a', 'p', 'k', 'o', 'c', 'i', 'g', 's', 't', 'y', 'v', 'u',\n       'd', 'f', 'b', 'm', 'w', 'h', 'j', 'l', 'z', 'n', 'r', 'e'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nx    10\nq    10\na    10\np    10\nk    10\no    10\nc    10\ni    10\ng    10\ns    10\nt    10\ny    10\nv    10\nu    10\nd    10\nf    10\nb    10\nm    10\nw    10\nh    10\nj    10\nl    10\nz    10\nn    10\nr    10\ne    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 168\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        7.0\n1        2.0\n2        5.0\n3        7.0\n4        5.0\n        ... \n99995    1.0\n99996    2.0\n99997    3.0\n99998    0.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([7., 2., 5., 4., 0., 6., 3., 8., 1., 9.])`, type: `ndarray`\n\nval, expected value: `array([7., 2., 5., ..., 3., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 76514, 77411, 77953])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8785,  9130,  9489, ... , 98356, 98679, 99003, 99332, 99679])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n       10, 10, 10, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('x', '2015-08-24') ... ('j', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nx    2015-08-24    10\nq    2015-08-28    10\np    2015-09-01    10\nk    2015-09-01    10\no    2015-08-29    10\n                   ..\nh    2015-08-29    10\nu    2015-08-29    10\ng    2015-08-30    10\ne    2015-08-24    10\nj    2015-08-24    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 169\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     47\n1     98\n2     17\n3     79\n4     89\n      ..\n95    72\n96    26\n97    94\n98    99\n99    36\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,\n        3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  9,  9, 10,\n       10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15,\n       15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19,\n       19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([47, 98, 17, 79, 89, 48, 62, 90, 11, 72, 40, 95, 82, 50, 46, 24,  4,\n        6, 54, 86, 58,  9, 91, 28, 20, 21, 32, 18, 52, 96, 26, 41, 53, 60,\n       10, 80,  0, 93, 84, 59, 30, 33, 94, 69, 14, 51, 77, 34, 42, 85, 73,\n       87, 66,  5, 75, 88, 23, 83, 97, 35, 56, 64, 99, 36])`, type: `ndarray`\n\nval, expected value: `array([47, 98, 17, 79, 89, 48, 62, 90, 11, 98, 72, 40, 95, 82, 50, 17, 11,\n       46, 24,  4,  6, 95, 54, 86, 58,  9, 91, 28, 20, 21, 90, 32, 18, 52,\n       48, 98, 46, 96, 26, 41, 90, 53, 17, 60, 10, 80,  0,  0, 93, 84, 59,\n       21, 30, 33, 94, 69, 14, 51, 40, 77, 34,  0, 34, 51,  0, 42, 85, 73,\n       87, 91,  9, 93, 48, 66,  5, 75, 88, 23, 83, 97, 32, 20,  5,  9, 86,\n       95, 40, 73, 35, 42, 21,  4, 56, 97, 64, 72, 26, 94, 99, 36])`, type: `ndarray`\n\ncodes, expected value: `array([ 0, 24, 28, 29, 34,  1,  1, 10, 21, 43, 57,  2,  7, 26, 30, 37, 46,\n        3, 14,  4, 18, 61, 62,  5, 10, 36, 40, 44, 48, 54,  2,  6, 16, 30,\n       50,  5,  7, 13, 22, 26, 38, 53,  8, 21, 49,  1, 10, 11, 14, 25,  9,\n       16, 31, 36, 53, 11, 23, 35, 36, 12, 25,  2, 20, 36,  8,  9, 25, 15,\n       32, 42, 17, 27, 56, 59, 19, 19, 45, 45, 63,  5, 21, 22, 37, 60,  7,\n       58, 24, 33, 47, 48, 39, 41, 55, 42, 47, 51, 58, 52, 11, 50])`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 28, 33, 37, 44,  1, 35, 11, 25, 55, 78,  2, 40, 80, 38, 48, 59,\n        3, 36,  4, 22, 94, 98,  5, 86, 64, 52, 56, 65, 75, 42,  6, 19, 96,\n       67, 72,  7, 14, 69, 31, 49, 82,  8, 70, 66,  9, 58, 21, 17, 51, 10,\n       91, 39, 46, 74, 12, 27, 45, 47, 13, 90, 15, 24, 61, 16, 95, 29, 18,\n       41, 97, 20, 32, 77, 88, 23, 84, 57, 63, 99, 34, 83, 26, 71, 92, 30,\n       93, 81, 43, 60, 89, 50, 53, 76, 54, 62, 68, 79, 73, 85, 87])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  5, 11, 17, 19, 23, 30, 35, 42, 45, 50, 55, 59, 61, 64, 67, 70,\n       74, 79, 84, 86, 90, 93, 95, 97, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([5, 5, 6, 2, 4, 7, 5, 7, 3, 5, 5, 4, 2, 3, 3, 3, 4, 3, 5, 2, 4, 3,\n       2, 2, 1, 2])`, type: `ndarray`\n\nres, expected value: `array([5, 5, 6, 2, 4, 7, 5, 7, 3, 5, 5, 4, 2, 3, 3, 3, 4, 3, 5, 2, 4, 3,\n       2, 2, 1, 2])`, type: `ndarray`\n\nri, expected value: `Index(['r', 'b', 'i', 'h', 'g', 'k', 'e', 'y', 'f', 'd', 's', 'l', 'j', 't',\n       'm', 'n', 'a', 'o', 'z', 'w', 'v', 'p', 'q', 'u', 'c', 'x'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nr    5\nb    5\ni    6\nh    2\ng    4\nk    7\ne    5\ny    7\nf    3\nd    5\ns    5\nl    4\nj    2\nt    3\nm    3\nn    3\na    4\no    3\nz    5\nw    2\nv    4\np    3\nq    2\nu    2\nc    1\nx    2\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 170\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     47\n1     98\n2     17\n3     79\n4     89\n      ..\n95    72\n96    26\n97    94\n98    99\n99    36\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  1,  1,  2,  2,  2,  3,  4,  5,  6,  6,  7,  7,  8,  9,  9,\n       10, 10, 11, 12, 13, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22,\n       23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 36,\n       37, 38, 39, 40, 41, 42, 42, 43, 43, 44, 45, 46, 46, 47, 48, 49, 50,\n       51, 52, 52, 53, 53, 54, 55, 56, 57, 58, 59, 60, 61, 61, 62, 63, 64,\n       65, 66, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])`, type: `ndarray`\n\n_, expected value: `array([47, 98, 17, 79, 89, 48, 62, 90, 11, 72, 40, 95, 82, 50, 46, 24,  4,\n        6, 54, 86, 58,  9, 91, 28, 20, 21, 32, 18, 52, 96, 26, 41, 53, 60,\n       10, 80,  0, 93, 84, 59, 30, 33, 94, 69, 14, 51, 77, 34, 42, 85, 73,\n       87, 66,  5, 75, 88, 23, 83, 97, 35, 56, 64, 99, 36])`, type: `ndarray`\n\nval, expected value: `array([47, 98, 17, 79, 89, 48, 62, 90, 11, 98, 72, 40, 95, 82, 50, 17, 11,\n       46, 24,  4,  6, 95, 54, 86, 58,  9, 91, 28, 20, 21, 90, 32, 18, 52,\n       48, 98, 46, 96, 26, 41, 90, 53, 17, 60, 10, 80,  0,  0, 93, 84, 59,\n       21, 30, 33, 94, 69, 14, 51, 40, 77, 34,  0, 34, 51,  0, 42, 85, 73,\n       87, 91,  9, 93, 48, 66,  5, 75, 88, 23, 83, 97, 32, 20,  5,  9, 86,\n       95, 40, 73, 35, 42, 21,  4, 56, 97, 64, 72, 26, 94, 99, 36])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  1, 10, 43,  2, 30, 46,  3,  4,  5,  2,  6,  7, 26,  8,  1, 25,\n        9, 31, 11, 12, 13, 53,  2, 36,  8, 14, 15, 16, 17, 11, 18, 19, 45,\n       20, 21, 21, 22, 23, 24, 25,  7, 27, 28,  5,  1, 14, 29, 34,  7, 37,\n       32, 33, 35, 36, 36,  5, 38, 39, 41, 40, 42, 44, 48, 45, 10, 47, 47,\n       36, 21, 49, 30, 50, 51, 22, 37, 52, 53, 54, 55, 56, 59, 57, 58, 26,\n       24, 19, 63, 11, 10, 50, 48, 25, 16, 60, 58, 61,  9, 42, 62])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  1, 11, 55,  2, 38, 59,  3,  4,  5, 42,  6,  7, 31,  8,  9, 51,\n       10, 39, 12, 13, 14, 82, 15, 61, 16, 17, 18, 19, 20, 21, 22, 23, 63,\n       24, 25, 83, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 44, 40, 48,\n       41, 43, 45, 46, 47, 72, 49, 50, 53, 52, 54, 56, 65, 57, 58, 60, 62,\n       64, 70, 66, 96, 67, 68, 69, 71, 73, 74, 75, 76, 77, 88, 78, 79, 80,\n       81, 84, 99, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  4,  7,  8,  9, 10, 12, 14, 15, 17, 19, 20, 21, 23, 25, 26,\n       27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45,\n       46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 64, 65, 66, 67,\n       68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 3, 3, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 3, 3, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('r', '2015-08-28') ... ('g', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(79,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nr    2015-08-28    1\nb    2015-08-31    3\ni    2015-08-28    3\nh    2015-08-28    1\ng    2015-08-28    1\n                  ..\nw    2015-08-28    1\ng    2015-08-29    1\nm    2015-08-31    1\nn    2015-08-27    1\ng    2015-08-27    1\nName: julie, Length: 79, dtype: int64`, type: `Series`\n\n### Expected case 171\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     47.0\n1     98.0\n2     17.0\n3     79.0\n4     89.0\n      ... \n95    72.0\n96    26.0\n97    94.0\n98    99.0\n99    36.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,\n        2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,\n        6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,\n        9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14,\n       15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 19,\n       19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([47., 98., 17., 79., 89., 48., 62., 72., 40., 95., 82., 50., 11.,\n       46., 24.,  4.,  6., 54., 86., 58.,  9., 21., 90., 32., 18., 52.,\n       96., 26., 41., 53., 60., 10., 93., 84., 59., 30., 33., 94., 69.,\n       14., 51., 77., 34.,  0., 73., 87., 91., 66.,  5., 75., 88., 23.,\n       83., 97., 20., 35., 42., 56., 64., 99., 36.])`, type: `ndarray`\n\nval, expected value: `array([47., 98., 17., 79., 89., ... , 64., 72., 26., 94., 99., 36.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  8, 14, 35, 46, -1,  0, 25, 26, 31,  2, 22, 23, 27, 32, 41,\n        3, 13,  4, 17, 58, 59, -1, -1,  5, 39, 49,  2,  6, 15, 27, 44, -1,\n        5, 11, 23, 33, 48, -1, -1, 20, -1,  8,  9, 13, 21, -1,  7, 15, 28,\n       48,  8, 20, 38, 52, -1, -1, -1,  9, 10, 21,  2, 19, 43,  7, 12, 21,\n       16, 24, 51, 55, -1, 18, 40, 40, 60, -1, -1,  5, 32, 57, 22, 53, 29,\n       37, 30, 42, 54, 56, 34, 36, 50, 37, 42, 45, 53, 47, -1, 44])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 35, 86, 18, 52, 69, 28,  0, 33, 37, 44,  2, 40, 80, 38, 48, 59,\n        3, 36,  4, 22, 94, 98, 64, 65,  5, 56, 75, 42,  6, 19, 96, 67,  7,\n       72, 14, 31, 49, 82,  8, 66, 70,  9, 58, 21, 17, 51, 46, 10, 91, 39,\n       74, 11, 25, 55, 78, 27, 45, 47, 12, 13, 90, 15, 24, 61, 95, 16, 29,\n       20, 32, 77, 88, 84, 23, 57, 63, 99, 26, 83, 34, 71, 92, 30, 93, 41,\n       97, 43, 60, 81, 89, 50, 53, 76, 54, 62, 68, 79, 73, 85, 87])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 11, 17, 19, 23, 28, 33, 39, 42, 47, 52, 56, 60, 62, 65, 68, 72,\n       77, 82, 84, 86, 90, 93, 95, 97, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False,  True,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([5, 4, 6, 2, 4, 3, 5, 5, 1, 4, 4, 4, 1, 2, 3, 3, 4, 3, 3, 2, 2, 4,\n       3, 2, 2, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([4, 6, 2, 4, 3, 5, 5, 1, 4, 4, 4, 1, 2, 3, 3, 4, 3, 3, 2, 2, 4, 3,\n       2, 2, 1, 1])`, type: `ndarray`\n\nri, expected value: `Index(['r', 'i', 'h', 'g', 'k', 'e', 'y', 'f', 'd', 's', 'b', 'l', 'j', 't',\n       'm', 'a', 'o', 'z', 'w', 'n', 'v', 'p', 'q', 'u', 'c', 'x'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nr    4\ni    6\nh    2\ng    4\nk    3\ne    5\ny    5\nf    1\nd    4\ns    4\nb    4\nl    1\nj    2\nt    3\nm    3\na    4\no    3\nz    3\nw    2\nn    2\nv    4\np    3\nq    2\nu    2\nc    1\nx    1\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 172\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     47.0\n1     98.0\n2     17.0\n3     79.0\n4     89.0\n      ... \n95    72.0\n96    26.0\n97    94.0\n98    99.0\n99    36.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  1,  2,  3,  4,  4,\n        5,  5,  6,  7,  7,  8,  8,  9,  9, 10, 11, 12, 12, 13, 13, 14, 15,\n       16, 17, 18, 19, 20, 20, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30,\n       31, 32, 32, 33, 34, 35, 36, 37, 38, 39, 39, 40, 40, 41, 42, 42, 43,\n       44, 45, 46, 47, 48, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n       59, 60, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72])`, type: `ndarray`\n\n_, expected value: `array([47., 98., 17., 79., 89., 48., 62., 72., 40., 95., 82., 50., 11.,\n       46., 24.,  4.,  6., 54., 86., 58.,  9., 21., 90., 32., 18., 52.,\n       96., 26., 41., 53., 60., 10., 93., 84., 59., 30., 33., 94., 69.,\n       14., 51., 77., 34.,  0., 73., 87., 91., 66.,  5., 75., 88., 23.,\n       83., 97., 20., 35., 42., 56., 64., 99., 36.])`, type: `ndarray`\n\nval, expected value: `array([47., 98., 17., 79., 89., ... , 64., 72., 26., 94., 99., 36.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  3,  8, 14, 22, 35, 46, 51,  0,  2, 27, 41,  4,  5,  2,  6,\n       -1, 23, -1, -1, 21,  7, 28,  8, 38,  9, 10, 11, 48,  2, 43, 12, 13,\n       15, 16,  9, 17, 18, 40, 19, 20, -1, -1, -1, -1, 21, 22, 24, 25,  5,\n       13, 26, 31, 29, 30, -1, -1, -1, 32,  5, 33, 34, 36, 37, -1, 39, 40,\n        8, 42, 42, -1, -1, 20, 27, 44, 45, 32, 47, 48, 49, 50, 52, 53, 23,\n       54, -1, 60, -1, 44, 55, 56, 21, 15, 57, 53, 58,  7, 37, 59])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 35,  3, 86, 18, 40, 52, 69, 77,  0,  2, 38, 59,  4,  5, 42,  6,\n        7, 31,  8,  9, 51, 10, 39, 11, 55, 12, 13, 14, 82, 15, 61, 16, 17,\n       19, 20, 21, 22, 23, 63, 24, 25, 26, 83, 27, 28, 29, 30, 32, 33, 34,\n       36, 37, 44, 41, 43, 45, 46, 47, 48, 72, 49, 50, 53, 54, 65, 56, 57,\n       58, 60, 62, 64, 66, 70, 96, 67, 68, 71, 73, 74, 75, 76, 78, 79, 80,\n       81, 84, 99, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 13, 14, 15, 17, 19, 20, 22, 24, 26, 27, 28, 30, 32, 33, 34,\n       35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54,\n       55, 56, 57, 58, 59, 60, 62, 64, 65, 67, 68, 69, 70, 71, 72, 74, 76,\n       77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94,\n       95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([8, 1, 3, 1, 1, 2, 1, 0, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 1, 1,\n       1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 3, 1, 1, 2, 1, 0, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('r', '2015-08-28') ... ('g', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(73,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nr    2015-08-28    1\ni    2015-08-28    3\ng    2015-08-28    1\nk    2015-08-30    1\ne    2015-08-28    2\n                  ..\nw    2015-08-28    1\ng    2015-08-29    1\nm    2015-08-31    1\nn    2015-08-27    1\ng    2015-08-27    1\nName: julie, Length: 73, dtype: int64`, type: `Series`\n\n### Expected case 173\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     47.0\n1     98.0\n2     17.0\n3     79.0\n4     89.0\n      ... \n95    72.0\n96    26.0\n97    94.0\n98    99.0\n99    36.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,\n        2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,\n        6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,\n        9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14,\n       15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 19,\n       19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([47., 98., 17., 79., 89., 48., 62., 72., 40., 95., 82., 50., 11.,\n       46., 24.,  4.,  6., 54., 86., 58.,  9., 21., 90., 32., 18., 52.,\n       96., 26., 41., 53., 60., 10., 93., 84., 59., 30., 33., 94., 69.,\n       14., 51., 77., 34.,  0., 73., 87., 91., 66.,  5., 75., 88., 23.,\n       83., 97., 20., 35., 42., 56., 64., 99., 36.])`, type: `ndarray`\n\nval, expected value: `array([47., 98., 17., 79., 89., ... , 64., 72., 26., 94., 99., 36.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  8, 14, 35, 46, -1,  0, 25, 26, 31,  2, 22, 23, 27, 32, 41,\n        3, 13,  4, 17, 58, 59, -1, -1,  5, 39, 49,  2,  6, 15, 27, 44, -1,\n        5, 11, 23, 33, 48, -1, -1, 20, -1,  8,  9, 13, 21, -1,  7, 15, 28,\n       48,  8, 20, 38, 52, -1, -1, -1,  9, 10, 21,  2, 19, 43,  7, 12, 21,\n       16, 24, 51, 55, -1, 18, 40, 40, 60, -1, -1,  5, 32, 57, 22, 53, 29,\n       37, 30, 42, 54, 56, 34, 36, 50, 37, 42, 45, 53, 47, -1, 44])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 35, 86, 18, 52, 69, 28,  0, 33, 37, 44,  2, 40, 80, 38, 48, 59,\n        3, 36,  4, 22, 94, 98, 64, 65,  5, 56, 75, 42,  6, 19, 96, 67,  7,\n       72, 14, 31, 49, 82,  8, 66, 70,  9, 58, 21, 17, 51, 46, 10, 91, 39,\n       74, 11, 25, 55, 78, 27, 45, 47, 12, 13, 90, 15, 24, 61, 95, 16, 29,\n       20, 32, 77, 88, 84, 23, 57, 63, 99, 26, 83, 34, 71, 92, 30, 93, 41,\n       97, 43, 60, 81, 89, 50, 53, 76, 54, 62, 68, 79, 73, 85, 87])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 11, 17, 19, 23, 28, 33, 39, 42, 47, 52, 56, 60, 62, 65, 68, 72,\n       77, 82, 84, 86, 90, 93, 95, 97, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False,  True,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([5, 4, 6, 2, 4, 3, 5, 5, 1, 4, 4, 4, 1, 2, 3, 3, 4, 3, 3, 2, 2, 4,\n       3, 2, 2, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([4, 6, 2, 4, 3, 5, 5, 1, 4, 4, 4, 1, 2, 3, 3, 4, 3, 3, 2, 2, 4, 3,\n       2, 2, 1, 1])`, type: `ndarray`\n\nri, expected value: `Index(['r', 'i', 'h', 'g', 'k', 'e', 'y', 'f', 'd', 's', 'b', 'l', 'j', 't',\n       'm', 'a', 'o', 'z', 'w', 'n', 'v', 'p', 'q', 'u', 'c', 'x'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nr    4\ni    6\nh    2\ng    4\nk    3\ne    5\ny    5\nf    1\nd    4\ns    4\nb    4\nl    1\nj    2\nt    3\nm    3\na    4\no    3\nz    3\nw    2\nn    2\nv    4\np    3\nq    2\nu    2\nc    1\nx    1\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 174\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     47.0\n1     98.0\n2     17.0\n3     79.0\n4     89.0\n      ... \n95    72.0\n96    26.0\n97    94.0\n98    99.0\n99    36.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  1,  2,  3,  4,  4,\n        5,  5,  6,  7,  7,  8,  8,  9,  9, 10, 11, 12, 12, 13, 13, 14, 15,\n       16, 17, 18, 19, 20, 20, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30,\n       31, 32, 32, 33, 34, 35, 36, 37, 38, 39, 39, 40, 40, 41, 42, 42, 43,\n       44, 45, 46, 47, 48, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n       59, 60, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72])`, type: `ndarray`\n\n_, expected value: `array([47., 98., 17., 79., 89., 48., 62., 72., 40., 95., 82., 50., 11.,\n       46., 24.,  4.,  6., 54., 86., 58.,  9., 21., 90., 32., 18., 52.,\n       96., 26., 41., 53., 60., 10., 93., 84., 59., 30., 33., 94., 69.,\n       14., 51., 77., 34.,  0., 73., 87., 91., 66.,  5., 75., 88., 23.,\n       83., 97., 20., 35., 42., 56., 64., 99., 36.])`, type: `ndarray`\n\nval, expected value: `array([47., 98., 17., 79., 89., ... , 64., 72., 26., 94., 99., 36.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  1,  3,  8, 14, 22, 35, 46, 51,  0,  2, 27, 41,  4,  5,  2,  6,\n       -1, 23, -1, -1, 21,  7, 28,  8, 38,  9, 10, 11, 48,  2, 43, 12, 13,\n       15, 16,  9, 17, 18, 40, 19, 20, -1, -1, -1, -1, 21, 22, 24, 25,  5,\n       13, 26, 31, 29, 30, -1, -1, -1, 32,  5, 33, 34, 36, 37, -1, 39, 40,\n        8, 42, 42, -1, -1, 20, 27, 44, 45, 32, 47, 48, 49, 50, 52, 53, 23,\n       54, -1, 60, -1, 44, 55, 56, 21, 15, 57, 53, 58,  7, 37, 59])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 35,  3, 86, 18, 40, 52, 69, 77,  0,  2, 38, 59,  4,  5, 42,  6,\n        7, 31,  8,  9, 51, 10, 39, 11, 55, 12, 13, 14, 82, 15, 61, 16, 17,\n       19, 20, 21, 22, 23, 63, 24, 25, 26, 83, 27, 28, 29, 30, 32, 33, 34,\n       36, 37, 44, 41, 43, 45, 46, 47, 48, 72, 49, 50, 53, 54, 65, 56, 57,\n       58, 60, 62, 64, 66, 70, 96, 67, 68, 71, 73, 74, 75, 76, 78, 79, 80,\n       81, 84, 99, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 13, 14, 15, 17, 19, 20, 22, 24, 26, 27, 28, 30, 32, 33, 34,\n       35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54,\n       55, 56, 57, 58, 59, 60, 62, 64, 65, 67, 68, 69, 70, 71, 72, 74, 76,\n       77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94,\n       95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([8, 1, 3, 1, 1, 2, 1, 0, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 1, 1,\n       1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 3, 1, 1, 2, 1, 0, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('r', '2015-08-28') ... ('g', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(73,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nr    2015-08-28    1\ni    2015-08-28    3\ng    2015-08-28    1\nk    2015-08-30    1\ne    2015-08-28    2\n                  ..\nw    2015-08-28    1\ng    2015-08-29    1\nm    2015-08-31    1\nn    2015-08-27    1\ng    2015-08-27    1\nName: julie, Length: 73, dtype: int64`, type: `Series`\n\n### Expected case 175\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       7\n1      62\n2      49\n3      99\n4      43\n       ..\n995    40\n996     1\n997    84\n998    82\n999     4\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([ 7, 62, 49, 99, 43, 85, 45, 57, 17, 42, 37, 36,  2, 59, 32, 28, 92,\n       21, 78, 68,  1, 89, 64, 66, 94, 79,  8, 35, 46, 67, 97, 34, 48, 12,\n       31, 93, 70, 16, 20, 55, 10,  9, 75, 29, 84, 50,  4, 44, 58, 95, 76,\n       41, 73, 56, 83, 54, 47, 71, 52, 91, 69, 11, 40, 19, 39, 33, 60, 27,\n       30,  5, 23, 61, 24, 77,  0, 74, 51, 22, 72, 80, 25, 53, 86,  3,  6,\n       90, 96, 18, 81, 26, 82, 15, 88, 38, 13, 65, 63, 14, 87, 98])`, type: `ndarray`\n\nval, expected value: `array([ 7, 62, 49, 99, 43, 85, 45, ... , 27, 25, 92, 40,  1, 84, 82,  4])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  1,  1,  3,  7, 10, 14, ... , 78, 79, 80, 80, 81, 93, 94, 98])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0,  81, 121, 192,  20, ... , 553, 874, 771, 712, 425, 752])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  40,  86, 116, 172, 216, 249, 281, 320, 345, 383, 421, 457,\n       498, 544, 583, 617, 650, 686, 728, 764, 807, 849, 893, 946, 969])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 1, 1, 1, 1, 0, 1, ... ,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([37, 38, 26, 43, 38, 29, 28, 33, 24, 30, 31, 32, 32, 40, 34, 31, 26,\n       30, 36, 32, 31, 37, 34, 40, 21, 29])`, type: `ndarray`\n\nres, expected value: `array([37, 38, 26, 43, 38, 29, 28, 33, 24, 30, 31, 32, 32, 40, 34, 31, 26,\n       30, 36, 32, 31, 37, 34, 40, 21, 29])`, type: `ndarray`\n\nri, expected value: `Index(['u', 'c', 'z', 'b', 'v', 'q', 'w', 's', 'f', 'e', 'i', 'r', 'p', 'n',\n       'a', 'x', 'k', 'm', 'j', 'd', 'g', 'l', 'y', 'o', 'h', 't'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nu    37\nc    38\nz    26\nb    43\nv    38\nq    29\nw    28\ns    33\nf    24\ne    30\ni    31\nr    32\np    32\nn    40\na    34\nx    31\nk    26\nm    30\nj    36\nd    32\ng    31\nl    37\ny    34\no    40\nh    21\nt    29\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 176\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       7\n1      62\n2      49\n3      99\n4      43\n       ..\n995    40\n996     1\n997    84\n998    82\n999     4\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   1, ... , 247, 247, 248, 249, 249, 249])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([ 7, 62, 49, 99, 43, 85, 45, 57, 17, 42, 37, 36,  2, 59, 32, 28, 92,\n       21, 78, 68,  1, 89, 64, 66, 94, 79,  8, 35, 46, 67, 97, 34, 48, 12,\n       31, 93, 70, 16, 20, 55, 10,  9, 75, 29, 84, 50,  4, 44, 58, 95, 76,\n       41, 73, 56, 83, 54, 47, 71, 52, 91, 69, 11, 40, 19, 39, 33, 60, 27,\n       30,  5, 23, 61, 24, 77,  0, 74, 51, 22, 72, 80, 25, 53, 86,  3,  6,\n       90, 96, 18, 81, 26, 82, 15, 88, 38, 13, 65, 63, 14, 87, 98])`, type: `ndarray`\n\nval, expected value: `array([ 7, 62, 49, 99, 43, 85, 45, ... , 27, 25, 92, 40,  1, 84, 82,  4])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  7, 14, 33,  0,  1,  4, ... , 76, 54, 52, 54,  2,  2, 20, 88])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0,  20, 513, 979, 118, ... , 990, 901, 964, 967, 996, 970])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   4,   9,  12,  16, ... , 992, 993,\n       994, 996, 997])`, shape: `(250,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 4,  5,  3,  4,  5,  4,  3, ... ,  1,  1,  1,  1,  1,  2,  1,  3])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([ 4,  5,  3,  4,  5,  4,  3, ... ,  1,  1,  1,  1,  1,  2,  1,  3])`, shape: `(250,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('u', '2015-08-31') ... ('y', '2015-08-31')],\n           names=['jim', 'joe'], length=250)`, shape: `(250,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nu    2015-08-31    4\nc    2015-08-31    5\nz    2015-08-31    3\nb    2015-08-23    4\nv    2015-08-24    5\n                  ..\nm    2015-08-30    1\nw    2015-08-29    1\nf    2015-08-24    2\n     2015-08-23    1\ny    2015-08-31    3\nName: julie, Length: 250, dtype: int64`, type: `Series`\n\n### Expected case 177\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       7.0\n1      62.0\n2      49.0\n3      99.0\n4      43.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    82.0\n999     4.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([ 7., 62., 49., 99., 43., ... , 14., 87., 58., 98., 38., 18.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([ 7., 62., 49., 99., 43., ... , 92., nan, nan, nan, 82.,  4.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 70, 71, 72, 72, 73, 79, 83, 95])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 553, 874, 771, 856, 706, 752])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  97, 126, 180, 221, 252, 282, 317, 342, 380, 416, 451, 491,\n       533, 568, 599, 629, 664, 703, 744, 780, 819, 857, 898, 949, 971])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([41, 33, 23, 35, 32, 25, 22, 26, 22, 26, 27, 26, 27, 34, 28, 24, 20,\n       24, 30, 30, 22, 29, 28, 29, 35, 18, 23])`, type: `ndarray`\n\nres, expected value: `array([33, 23, 35, 32, 25, 22, 26, 22, 26, 27, 26, 27, 34, 28, 24, 20, 24,\n       30, 30, 22, 29, 28, 29, 35, 18, 23])`, type: `ndarray`\n\nri, expected value: `Index(['u', 'z', 'b', 'v', 'q', 'w', 's', 'f', 'e', 'i', 'r', 'p', 'n', 'a',\n       'x', 'k', 'm', 'j', 'c', 'd', 'g', 'l', 'y', 'o', 'h', 't'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nu    33\nz    23\nb    35\nv    32\nq    25\nw    22\ns    26\nf    22\ne    26\ni    27\nr    26\np    27\nn    34\na    28\nx    24\nk    20\nm    24\nj    30\nc    30\nd    22\ng    29\nl    28\ny    29\no    35\nh    18\nt    23\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 178\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       7.0\n1      62.0\n2      49.0\n3      99.0\n4      43.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    82.0\n999     4.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 245, 246, 246, 247, 248, 248])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([ 7., 62., 49., 99., 43., ... , 14., 87., 58., 98., 38., 18.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([ 7., 62., 49., 99., 43., ... , 92., nan, nan, nan, 82.,  4.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 22, 42, 69, -1, 45,  2, -1,  2])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 794, 901, 990, 964, 996, 967])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  88,  90,  95,  99, ... , 993, 994, 995,\n       997, 998])`, shape: `(249,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 0, 1, 1, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False,  True,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([53,  4,  2,  5,  4,  1,  1, ... ,  7,  1,  1,  1,  1,  1,  1,  1])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([4, 2, 5, 4, 1, 1, 4, 3, 4, ... , 7,\n       1, 1, 1, 1, 1, 1, 1])`, shape: `(249,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('u', '2015-08-31') ... ('y', '2015-08-31')],\n           names=['jim', 'joe'], length=249)`, shape: `(249,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nu    2015-08-31    4\nz    2015-08-31    2\nv    2015-08-24    5\nz    2015-08-26    4\nq    2015-08-29    1\n                  ..\nc    2015-08-23    1\nm    2015-08-30    1\nf    2015-08-24    1\n     2015-08-23    1\ny    2015-08-31    1\nName: julie, Length: 249, dtype: int64`, type: `Series`\n\n### Expected case 179\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       7.0\n1      62.0\n2      49.0\n3      99.0\n4      43.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    82.0\n999     4.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([ 7., 62., 49., 99., 43., ... , 14., 87., 58., 98., 38., 18.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([ 7., 62., 49., 99., 43., ... , 92., nan, nan, nan, 82.,  4.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 70, 71, 72, 72, 73, 79, 83, 95])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 553, 874, 771, 856, 706, 752])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  97, 126, 180, 221, 252, 282, 317, 342, 380, 416, 451, 491,\n       533, 568, 599, 629, 664, 703, 744, 780, 819, 857, 898, 949, 971])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([41, 33, 23, 35, 32, 25, 22, 26, 22, 26, 27, 26, 27, 34, 28, 24, 20,\n       24, 30, 30, 22, 29, 28, 29, 35, 18, 23])`, type: `ndarray`\n\nres, expected value: `array([33, 23, 35, 32, 25, 22, 26, 22, 26, 27, 26, 27, 34, 28, 24, 20, 24,\n       30, 30, 22, 29, 28, 29, 35, 18, 23])`, type: `ndarray`\n\nri, expected value: `Index(['u', 'z', 'b', 'v', 'q', 'w', 's', 'f', 'e', 'i', 'r', 'p', 'n', 'a',\n       'x', 'k', 'm', 'j', 'c', 'd', 'g', 'l', 'y', 'o', 'h', 't'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nu    33\nz    23\nb    35\nv    32\nq    25\nw    22\ns    26\nf    22\ne    26\ni    27\nr    26\np    27\nn    34\na    28\nx    24\nk    20\nm    24\nj    30\nc    30\nd    22\ng    29\nl    28\ny    29\no    35\nh    18\nt    23\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 180\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       7.0\n1      62.0\n2      49.0\n3      99.0\n4      43.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    82.0\n999     4.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 245, 246, 246, 247, 248, 248])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([ 7., 62., 49., 99., 43., ... , 14., 87., 58., 98., 38., 18.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([ 7., 62., 49., 99., 43., ... , 92., nan, nan, nan, 82.,  4.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 22, 42, 69, -1, 45,  2, -1,  2])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 794, 901, 990, 964, 996, 967])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  88,  90,  95,  99, ... , 993, 994, 995,\n       997, 998])`, shape: `(249,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 0, 1, 1, 0, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False,  True,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([53,  4,  2,  5,  4,  1,  1, ... ,  7,  1,  1,  1,  1,  1,  1,  1])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([4, 2, 5, 4, 1, 1, 4, 3, 4, ... , 7,\n       1, 1, 1, 1, 1, 1, 1])`, shape: `(249,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('u', '2015-08-31') ... ('y', '2015-08-31')],\n           names=['jim', 'joe'], length=249)`, shape: `(249,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nu    2015-08-31    4\nz    2015-08-31    2\nv    2015-08-24    5\nz    2015-08-26    4\nq    2015-08-29    1\n                  ..\nc    2015-08-23    1\nm    2015-08-30    1\nf    2015-08-24    1\n     2015-08-23    1\ny    2015-08-31    1\nName: julie, Length: 249, dtype: int64`, type: `Series`\n\n### Expected case 181\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       70\n1       70\n2       54\n3       90\n4       78\n        ..\n9995    67\n9996    12\n9997    70\n9998    85\n9999     9\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([70, 54, 90, 78, 40,  1, 15, 19, 14, 73, 91, 52, 39, 31, 10, 48,  8,\n       96,  6, 80, 17, 92, 57, 71, 29, 85,  0, 43, 63, 74, 50, 46, 64, 13,\n       45, 38, 94, 75, 55, 26, 16, 34,  9, 36, 84, 18, 61, 93, 58, 66, 97,\n       44, 47, 83, 62, 89, 81, 25, 67, 42,  2,  3, 30, 49, 60,  4, 86, 20,\n       51, 87, 98, 41, 68, 28, 76, 35,  5, 33, 99,  7, 21, 22, 77, 79, 12,\n       95, 24, 65, 88, 59, 56, 69, 11, 82, 72, 53, 23, 37, 27, 32])`, type: `ndarray`\n\nval, expected value: `array([70, 70, 54, ..., 70, 85,  9])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([   0,  968, 2030, ..., 7968, 9004, 9746])`, type: `ndarray`\n\nidx, expected value: `array([   0,  407,  815, 1228, 1604, 1946, 2277, 2619, 3021, 3395, 3788,\n       4168, 4543, 4922, 5288, 5656, 6085, 6505, 6872, 7261, 7634, 8035,\n       8429, 8790, 9173, 9623])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 99,  98,  99,  97,  98,  97,  94,  98,  98,  97,  97,  95,  98,\n        97,  99,  99,  99,  97, 100,  97,  98,  99,  98, 100, 100,  97])`, type: `ndarray`\n\nres, expected value: `array([ 99,  98,  99,  97,  98,  97,  94,  98,  98,  97,  97,  95,  98,\n        97,  99,  99,  99,  97, 100,  97,  98,  99,  98, 100, 100,  97])`, type: `ndarray`\n\nri, expected value: `Index(['o', 'x', 'z', 'k', 'q', 'r', 'u', 'j', 'd', 's', 'n', 'h', 'f', 'c',\n       'y', 'b', 'm', 'a', 'l', 't', 'i', 'v', 'p', 'e', 'g', 'w'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\no     99\nx     98\nz     99\nk     97\nq     98\nr     97\nu     94\nj     98\nd     98\ns     97\nn     97\nh     95\nf     98\nc     97\ny     99\nb     99\nm     99\na     97\nl    100\nt     97\ni     98\nv     99\np     98\ne    100\ng    100\nw     97\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 182\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       70\n1       70\n2       54\n3       90\n4       78\n        ..\n9995    67\n9996    12\n9997    70\n9998    85\n9999     9\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([70, 54, 90, 78, 40,  1, 15, 19, 14, 73, 91, 52, 39, 31, 10, 48,  8,\n       96,  6, 80, 17, 92, 57, 71, 29, 85,  0, 43, 63, 74, 50, 46, 64, 13,\n       45, 38, 94, 75, 55, 26, 16, 34,  9, 36, 84, 18, 61, 93, 58, 66, 97,\n       44, 47, 83, 62, 89, 81, 25, 67, 42,  2,  3, 30, 49, 60,  4, 86, 20,\n       51, 87, 98, 41, 68, 28, 76, 35,  5, 33, 99,  7, 21, 22, 77, 79, 12,\n       95, 24, 65, 88, 59, 56, 69, 11, 82, 72, 53, 23, 37, 27, 32])`, type: `ndarray`\n\nval, expected value: `array([70, 70, 54, ..., 70, 85,  9])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  1, ..., 82, 87, 99])`, type: `ndarray`\n\nsorter, expected value: `array([   0, 9423, 6469, ..., 2414, 9957, 1490])`, type: `ndarray`\n\nidx, expected value: `array([   0,   48,   90,  129,  168, ... , 9855, 9887, 9912, 9953, 9980])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([36, 31, 32, 35, 38, 19, 26, ... , 30,\n       26, 24, 34, 25, 18])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([36, 31, 32, 35, 38, 19, 26, ... , 30,\n       26, 24, 34, 25, 18])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('o', '2015-09-01') ... ('r', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \no    2015-09-01    36\nx    2015-08-26    31\nz    2015-08-26    32\nk    2015-08-30    35\nx    2015-08-27    38\n                   ..\nc    2015-08-30    26\ni    2015-08-25    24\nw    2015-08-24    34\nd    2015-09-01    25\nr    2015-08-30    18\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 183\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       70.0\n1       70.0\n2       54.0\n3       90.0\n4       78.0\n        ... \n9995    67.0\n9996    12.0\n9997    70.0\n9998    85.0\n9999     9.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([70., 54., 90., 78., 40., ... , 53., 23., 66., 37., 27., 32.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([70., 70., 54., ..., 70., 85.,  9.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7925, 9004, 9746])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  969, 1356, 1708, 2086, 2411, 2729, 3050, 3431, 3779, 4150,\n       4503, 4848, 5203, 5547, 5891, 6296, 6648, 7007, 7360, 7735, 8100,\n       8513, 8852, 9220, 9644])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  97,  97,  94,  96,  93,  92,  93,  97,  94,  95,  96,  92,\n        95,  95,  94,  99,  96,  99,  95,  95,  97,  95,  97,  96,  98,\n        95])`, type: `ndarray`\n\nres, expected value: `array([97, 97, 94, 96, 93, 92, 93, 97, 94, 95, 96, 92, 95, 95, 94, 99, 96,\n       99, 95, 95, 97, 95, 97, 96, 98, 95])`, type: `ndarray`\n\nri, expected value: `Index(['o', 'z', 'k', 'x', 'q', 'r', 'u', 'j', 'd', 's', 'n', 'h', 'f', 'c',\n       'y', 'm', 'a', 'l', 't', 'i', 'v', 'b', 'p', 'e', 'g', 'w'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\no    97\nz    97\nk    94\nx    96\nq    93\nr    92\nu    93\nj    97\nd    94\ns    95\nn    96\nh    92\nf    95\nc    95\ny    94\nm    99\na    96\nl    99\nt    95\ni    95\nv    97\nb    95\np    97\ne    96\ng    98\nw    95\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 184\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       70.0\n1       70.0\n2       54.0\n3       90.0\n4       78.0\n        ... \n9995    67.0\n9996    12.0\n9997    70.0\n9998    85.0\n9999     9.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([70., 54., 90., 78., 40., ... , 53., 23., 66., 37., 27., 32.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([70., 70., 54., ..., 70., 85.,  9.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 82, 97, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 2427, 7712, 7349])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  891,  927,  968,  988, ... , 9869, 9894, 9930, 9958, 9977])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  30,  25,  32,  16, ... ,  21,  24,  24,  12,\n        16])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([30, 25, 32, 16, 25, 25, 30, ... , 24,\n       21, 24, 24, 12, 16])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('o', '2015-09-01') ... ('d', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \no    2015-09-01    30\nz    2015-08-26    25\nx    2015-08-27    32\nq    2015-08-26    16\nr    2015-08-28    25\n                   ..\ni    2015-08-25    21\nw    2015-08-24    24\nl    2015-08-27    24\nr    2015-08-30    12\nd    2015-09-01    16\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 185\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       70.0\n1       70.0\n2       54.0\n3       90.0\n4       78.0\n        ... \n9995    67.0\n9996    12.0\n9997    70.0\n9998    85.0\n9999     9.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([70., 54., 90., 78., 40., ... , 53., 23., 66., 37., 27., 32.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([70., 70., 54., ..., 70., 85.,  9.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7925, 9004, 9746])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  969, 1356, 1708, 2086, 2411, 2729, 3050, 3431, 3779, 4150,\n       4503, 4848, 5203, 5547, 5891, 6296, 6648, 7007, 7360, 7735, 8100,\n       8513, 8852, 9220, 9644])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  97,  97,  94,  96,  93,  92,  93,  97,  94,  95,  96,  92,\n        95,  95,  94,  99,  96,  99,  95,  95,  97,  95,  97,  96,  98,\n        95])`, type: `ndarray`\n\nres, expected value: `array([97, 97, 94, 96, 93, 92, 93, 97, 94, 95, 96, 92, 95, 95, 94, 99, 96,\n       99, 95, 95, 97, 95, 97, 96, 98, 95])`, type: `ndarray`\n\nri, expected value: `Index(['o', 'z', 'k', 'x', 'q', 'r', 'u', 'j', 'd', 's', 'n', 'h', 'f', 'c',\n       'y', 'm', 'a', 'l', 't', 'i', 'v', 'b', 'p', 'e', 'g', 'w'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\no    97\nz    97\nk    94\nx    96\nq    93\nr    92\nu    93\nj    97\nd    94\ns    95\nn    96\nh    92\nf    95\nc    95\ny    94\nm    99\na    96\nl    99\nt    95\ni    95\nv    97\nb    95\np    97\ne    96\ng    98\nw    95\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 186\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       70.0\n1       70.0\n2       54.0\n3       90.0\n4       78.0\n        ... \n9995    67.0\n9996    12.0\n9997    70.0\n9998    85.0\n9999     9.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([70., 54., 90., 78., 40., ... , 53., 23., 66., 37., 27., 32.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([70., 70., 54., ..., 70., 85.,  9.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 82, 97, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 2427, 7712, 7349])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  891,  927,  968,  988, ... , 9869, 9894, 9930, 9958, 9977])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  30,  25,  32,  16, ... ,  21,  24,  24,  12,\n        16])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([30, 25, 32, 16, 25, 25, 30, ... , 24,\n       21, 24, 24, 12, 16])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('o', '2015-09-01') ... ('d', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \no    2015-09-01    30\nz    2015-08-26    25\nx    2015-08-27    32\nq    2015-08-26    16\nr    2015-08-28    25\n                   ..\ni    2015-08-25    21\nw    2015-08-24    24\nl    2015-08-27    24\nr    2015-08-30    12\nd    2015-09-01    16\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 187\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        88\n1        35\n2        34\n3        55\n4        97\n         ..\n99995     6\n99996    69\n99997     6\n99998    45\n99999    45\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([88, 35, 34, 55, 97, 62, 96, 37, 17,  8, 14,  0, 58, 21, 44, 67, 76,\n       36, 50, 42, 61,  7, 85,  1, 47, 40, 91, 28, 60,  5, 65, 31,  4, 59,\n       30, 51, 66, 24, 75, 27, 25,  2, 39, 48, 29, 70, 86, 10, 69, 93, 74,\n        3, 12, 46, 11, 57, 79, 22, 77, 63, 56, 45, 18, 94,  9, 87, 38, 90,\n        6, 78, 72, 53, 20, 41, 84, 26, 64, 92, 71, 43, 95, 98, 32, 54, 13,\n       16, 99, 83, 73, 52, 19, 89, 33, 81, 82, 68, 15, 80, 49, 23])`, type: `ndarray`\n\nval, expected value: `array([88, 35, 34, ...,  6, 45, 45])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([    0,  3783,  9340, ..., 95822, 96775, 98292])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3859,  7653, 11552, 15421, 19336, 23112, 26910, 30753,\n       34629, 38414, 42232, 46089, 49959, 53856, 57597, 61378, 65139,\n       69012, 72888, 76685, 80514, 84439, 88303, 92141, 96093])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['h', 'k', 'e', 'g', 'c', 'w', 'q', 'j', 'l', 'i', 'y', 'u', 'v', 's',\n       'o', 'b', 'f', 'n', 'p', 'a', 'm', 'x', 'd', 't', 'z', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nh    100\nk    100\ne    100\ng    100\nc    100\nw    100\nq    100\nj    100\nl    100\ni    100\ny    100\nu    100\nv    100\ns    100\no    100\nb    100\nf    100\nn    100\np    100\na    100\nm    100\nx    100\nd    100\nt    100\nz    100\nr    100\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 188\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        88\n1        35\n2        34\n3        55\n4        97\n         ..\n99995     6\n99996    69\n99997     6\n99998    45\n99999    45\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([88, 35, 34, 55, 97, 62, 96, 37, 17,  8, 14,  0, 58, 21, 44, 67, 76,\n       36, 50, 42, 61,  7, 85,  1, 47, 40, 91, 28, 60,  5, 65, 31,  4, 59,\n       30, 51, 66, 24, 75, 27, 25,  2, 39, 48, 29, 70, 86, 10, 69, 93, 74,\n        3, 12, 46, 11, 57, 79, 22, 77, 63, 56, 45, 18, 94,  9, 87, 38, 90,\n        6, 78, 72, 53, 20, 41, 84, 26, 64, 92, 71, 43, 95, 98, 32, 54, 13,\n       16, 99, 83, 73, 52, 19, 89, 33, 81, 82, 68, 15, 80, 49, 23])`, type: `ndarray`\n\nval, expected value: `array([88, 35, 34, ...,  6, 45, 45])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([    0, 34981, 51168, ..., 73616, 74326, 94255])`, type: `ndarray`\n\nidx, expected value: `array([    0,   396,   778,  1168, ... , 98100, 98474, 98875, 99252, 99650])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 99,  95,  98,  98,  96, ... ,  99,  98,  99,  99,  99,  98])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([ 99,  95,  98,  98,  96, ... ,  99,  98,  99,  99,  99,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('h', '2015-09-01') ... ('y', '2015-08-23')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nh    2015-09-01    99\nk    2015-08-28    95\ne    2015-08-26    98\ng    2015-08-26    98\nh    2015-08-28    96\n                   ..\na    2015-08-29    98\n     2015-08-26    99\ni    2015-08-24    99\nq    2015-09-01    99\ny    2015-08-23    98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 189\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        88.0\n1        35.0\n2        34.0\n3        55.0\n4        97.0\n         ... \n99995     6.0\n99996    69.0\n99997     6.0\n99998    45.0\n99999    45.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([88., 35., 34., 55., 97., ... , 15., 83., 56., 80., 49., 23.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([88., 35., 34., ...,  6., 45., 45.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 94032, 95822, 98292])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9535, 13194, 16844, 20519, 24055, 27639, 31257, 34905,\n       38485, 42071, 45695, 49259, 52898, 56580, 60094, 63637, 67169,\n       70786, 74431, 78014, 81626, 85329, 88982, 92610, 96334])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['h', 'e', 'g', 'c', 'w', 'q', 'j', 'l', 'i', 'y', 'u', 'k', 'v', 's',\n       'o', 'b', 'f', 'n', 'p', 'a', 'm', 'x', 'd', 't', 'z', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nh    100\ne    100\ng    100\nc    100\nw    100\nq    100\nj    100\nl    100\ni    100\ny    100\nu    100\nk    100\nv    100\ns    100\no    100\nb    100\nf    100\nn    100\np    100\na    100\nm    100\nx    100\nd    100\nt    100\nz    100\nr    100\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 190\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        88.0\n1        35.0\n2        34.0\n3        55.0\n4        97.0\n         ... \n99995     6.0\n99996    69.0\n99997     6.0\n99998    45.0\n99999    45.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([88., 35., 34., 55., 97., ... , 15., 83., 56., 80., 49., 23.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([88., 35., 34., ...,  6., 45., 45.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 46944, 84041, 96118])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8791,  9153,  9509, ... , 98284, 98633, 98987, 99311, 99648])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  98,  96,  95,  97, ... ,  99,  95,  97,  97,\n        92])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 98,  96,  95,  97,  94, ... ,  96,  99,  95,  97,  97,  92])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('h', '2015-09-01') ... ('a', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nh    2015-09-01    98\ne    2015-08-26    96\nh    2015-08-28    95\nc    2015-08-25    97\nw    2015-08-24    94\n                   ..\ni    2015-08-24    99\nq    2015-09-01    95\ny    2015-08-23    97\nf    2015-08-30    97\na    2015-08-28    92\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 191\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        88.0\n1        35.0\n2        34.0\n3        55.0\n4        97.0\n         ... \n99995     6.0\n99996    69.0\n99997     6.0\n99998    45.0\n99999    45.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([88., 35., 34., 55., 97., ... , 15., 83., 56., 80., 49., 23.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([88., 35., 34., ...,  6., 45., 45.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 94032, 95822, 98292])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9535, 13194, 16844, 20519, 24055, 27639, 31257, 34905,\n       38485, 42071, 45695, 49259, 52898, 56580, 60094, 63637, 67169,\n       70786, 74431, 78014, 81626, 85329, 88982, 92610, 96334])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['h', 'e', 'g', 'c', 'w', 'q', 'j', 'l', 'i', 'y', 'u', 'k', 'v', 's',\n       'o', 'b', 'f', 'n', 'p', 'a', 'm', 'x', 'd', 't', 'z', 'r'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nh    100\ne    100\ng    100\nc    100\nw    100\nq    100\nj    100\nl    100\ni    100\ny    100\nu    100\nk    100\nv    100\ns    100\no    100\nb    100\nf    100\nn    100\np    100\na    100\nm    100\nx    100\nd    100\nt    100\nz    100\nr    100\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 192\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        88.0\n1        35.0\n2        34.0\n3        55.0\n4        97.0\n         ... \n99995     6.0\n99996    69.0\n99997     6.0\n99998    45.0\n99999    45.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([88., 35., 34., 55., 97., ... , 15., 83., 56., 80., 49., 23.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([88., 35., 34., ...,  6., 45., 45.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 46944, 84041, 96118])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8791,  9153,  9509, ... , 98284, 98633, 98987, 99311, 99648])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  98,  96,  95,  97, ... ,  99,  95,  97,  97,\n        92])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 98,  96,  95,  97,  94, ... ,  96,  99,  95,  97,  97,  92])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('h', '2015-09-01') ... ('a', '2015-08-28')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nh    2015-09-01    98\ne    2015-08-26    96\nh    2015-08-28    95\nc    2015-08-25    97\nw    2015-08-24    94\n                   ..\ni    2015-08-24    99\nq    2015-09-01    95\ny    2015-08-23    97\nf    2015-08-30    97\na    2015-08-28    92\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 193\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     995\n1     265\n2     951\n3     398\n4      72\n     ... \n95    381\n96    964\n97     18\n98    977\n99    932\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  1,  1,  1,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,\n        4,  5,  5,  6,  6,  7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,\n        9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12,\n       13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16,\n       16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 20,\n       20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 23, 23, 24, 24, 25])`, type: `ndarray`\n\n_, expected value: `array([995, 265, 951, 398,  72, ... , 145, 381, 964,  18, 977, 932])`, shape: `(99,)`, type: `ndarray`\n\nval, expected value: `array([995, 265, 951, 398,  72, ... , 145, 381, 964,  18, 977, 932])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 0, 40,  1,  2, 31,  3, 43, 61,  4, 26, 74, 75,  5, 11, 17, 42, 55,\n       63,  6, 25,  7, 41,  8, 50, 76,  9, 13, 19, 20, 93, 10, 18, 59, 64,\n       96, 12, 23, 39, 49, 58, 82, 85, 91, 97, 14, 24, 53, 73, 15, 52, 72,\n       16, 32, 36, 46, 47, 48, 79, 17, 54, 66, 86, 21, 44, 98, 22, 27, 30,\n       87, 28, 35, 38, 51, 70, 80, 92, 29, 62, 71, 84, 88, 33, 34, 94, 37,\n       45, 65, 95, 56, 69, 57, 67, 68, 78, 89, 60, 81, 77, 83, 90])`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 41,  1,  2, 31,  3, 44, 62,  4, 26, 75, 76,  5, 11, 36, 43, 56,\n       64,  6, 25,  7, 42,  8, 51, 77,  9, 13, 19, 20, 94, 10, 18, 60, 65,\n       97, 12, 23, 40, 50, 59, 83, 86, 92, 98, 14, 24, 54, 74, 15, 53, 73,\n       16, 32, 37, 47, 48, 49, 80, 17, 55, 67, 87, 21, 45, 99, 22, 27, 30,\n       88, 28, 35, 39, 52, 71, 81, 93, 29, 63, 72, 85, 89, 33, 34, 95, 38,\n       46, 66, 96, 57, 70, 58, 68, 69, 79, 90, 61, 82, 78, 84, 91])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  2,  5,  8, 12, 18, 20, 22, 25, 30, 35, 44, 48, 51, 58, 62, 65,\n       69, 76, 81, 84, 88, 90, 95, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([2, 3, 3, 4, 6, 2, 2, 3, 5, 5, 9, 4, 3, 7, 4, 3, 4, 7, 5, 3, 4, 2,\n       5, 2, 2, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 3, 3, 4, 6, 2, 2, 3, 5, 5, 9, 4, 3, 7, 4, 3, 4, 7, 5, 3, 4, 2,\n       5, 2, 2, 1])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'l', 'j', 's', 'o', 'c', 'r', 'k', 'h', 'n', 'p', 'x', 'm', 'z',\n       'd', 'u', 'e', 'q', 't', 'f', 'i', 'y', 'w', 'g', 'a', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    2\nl    3\nj    3\ns    4\no    6\nc    2\nr    2\nk    3\nh    5\nn    5\np    9\nx    4\nm    3\nz    7\nd    4\nu    3\ne    4\nq    7\nt    5\nf    3\ni    4\ny    2\nw    5\ng    2\na    2\nv    1\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 194\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     995\n1     265\n2     951\n3     398\n4      72\n     ... \n95    381\n96    964\n97     18\n98    977\n99    932\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  3,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 12, 12, 13,\n       14, 15, 16, 16, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 26, 27,\n       27, 27, 28, 29, 30, 31, 32, 33, 33, 34, 35, 35, 36, 36, 37, 38, 38,\n       39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49, 50, 50, 51, 51,\n       52, 53, 53, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80])`, type: `ndarray`\n\n_, expected value: `array([995, 265, 951, 398,  72, ... , 145, 381, 964,  18, 977, 932])`, shape: `(99,)`, type: `ndarray`\n\nval, expected value: `array([995, 265, 951, 398,  72, ... , 145, 381, 964,  18, 977, 932])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  1,  2,  3, 61,  4,  5,  6,  7,  8,  9, 93, 10, 11, 12, 82, 13,\n       14, 15, 16, 48, 79, 17, 18, 19, 20, 21, 22, 23, 85, 24, 25, 26, 27,\n       30, 87, 28, 29, 31, 32, 33, 34, 94, 35, 17, 42, 36, 47, 37, 38, 51,\n       39, 58, 40, 41, 43, 44, 45, 46, 49, 50, 52, 72, 53, 54, 86, 55, 63,\n       56, 57, 78, 89, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74,\n       75, 76, 77, 80, 81, 83, 84, 88, 90, 91, 92, 95, 96, 97, 98])`, type: `ndarray`\n\nsorter, expected value: `array([ 0,  1,  2,  3, 62,  4,  5,  6,  7,  8,  9, 94, 10, 11, 12, 83, 13,\n       14, 15, 16, 49, 80, 17, 18, 19, 20, 21, 22, 23, 86, 24, 25, 26, 27,\n       30, 88, 28, 29, 31, 32, 33, 34, 95, 35, 36, 43, 37, 48, 38, 39, 52,\n       40, 59, 41, 42, 44, 45, 46, 47, 50, 51, 53, 73, 54, 55, 87, 56, 64,\n       57, 58, 79, 90, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75,\n       76, 77, 78, 81, 82, 84, 85, 89, 91, 92, 93, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 12, 13, 14, 16, 17, 18, 19,\n       22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41,\n       43, 44, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64,\n       66, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86,\n       87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('b', '2015-08-25') ... ('u', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(81,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nb    2015-08-25    1\nl    2015-08-29    1\n     2015-08-23    1\nj    2015-08-24    2\ns    2015-08-31    1\n                  ..\nq    2015-08-30    1\ni    2015-08-31    1\nn    2015-08-23    1\np    2015-08-28    1\nu    2015-08-27    1\nName: julie, Length: 81, dtype: int64`, type: `Series`\n\n### Expected case 195\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     995.0\n1     265.0\n2     951.0\n3     398.0\n4      72.0\n      ...  \n95    381.0\n96    964.0\n97     18.0\n98    977.0\n99    932.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  2,  2,  2,  3,  3,  3,  3,\n        4,  4,  4,  4,  4,  4,  5,  5,  6,  6,  7,  7,  7,  8,  8,  8,  8,\n        8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11,\n       12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15,\n       16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19,\n       20, 20, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 25])`, type: `ndarray`\n\n_, expected value: `array([995., 265., 951., 398.,  72., ... , 381., 964.,  18., 977., 932.])`, shape: `(84,)`, type: `ndarray`\n\nval, expected value: `array([995., 265., 951., 398.,  72., ... , 964.,  18., 977.,\n       932.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 15, 29, 42, 56, 70,  0, 34,  2, 25,  3, 37, 52, -1,  4, 62, 63,\n       -1,  5,  8, 14, 36, 46,  6, 22, -1, 35, -1, 41, 64, -1, 10, 16, 17,\n       78, -1,  7, 50, 81, -1,  9, 20, 33, 40, 49, 76, 82, 11, 21, 44, 61,\n       12, 43, 60, -1, 13, 26, 30, 38, 39, 67, 14, 45, 54, 71, -1, 18, 83,\n       -1, 19, 24, 72, -1, 32, 58, 68, 77, -1, 23, 53, 59, 73, 27, 28, 79,\n       -1, -1, 31, 80, 47, 57, 48, 55, 66, 74, 51, 69, -1, 65, 75])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 69, 86,  0, 41,  2, 31,  3, 44, 62, 26,  4, 75, 76,\n       64,  5, 11, 36, 43, 56,  6, 25,  7, 42,  8, 51, 77,  9, 13, 19, 20,\n       94, 65, 10, 60, 97, 83, 12, 23, 40, 50, 59, 92, 98, 14, 24, 54, 74,\n       15, 53, 73, 47, 16, 32, 37, 48, 49, 80, 17, 55, 67, 87, 45, 21, 99,\n       27, 22, 30, 88, 28, 39, 71, 81, 93, 85, 29, 63, 72, 89, 33, 34, 95,\n       46, 66, 38, 96, 57, 70, 58, 68, 79, 90, 61, 82, 84, 78, 91])`, type: `ndarray`\n\nidx, expected value: `array([ 6,  8, 10, 13, 17, 23, 25, 27, 30, 35, 39, 47, 51, 54, 61, 65, 68,\n       72, 77, 82, 85, 89, 91, 95, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 2, 2, 3, 3, 5, 2, 1, 2, 4, 3, 7, 4, 3, 6, 4, 2, 3, 4, 4, 3, 2,\n       2, 4, 2, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 2, 3, 3, 5, 2, 1, 2, 4, 3, 7, 4, 3, 6, 4, 2, 3, 4, 4, 3, 2, 2,\n       4, 2, 1, 1])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'l', 'j', 's', 'o', 'c', 'r', 'k', 'h', 'n', 'p', 'x', 'm', 'z',\n       'd', 'u', 'e', 'q', 't', 'f', 'i', 'y', 'w', 'g', 'a', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    2\nl    2\nj    3\ns    3\no    5\nc    2\nr    1\nk    2\nh    4\nn    3\np    7\nx    4\nm    3\nz    6\nd    4\nu    2\ne    3\nq    4\nt    4\nf    3\ni    2\ny    2\nw    4\ng    2\na    1\nv    1\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 196\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     995.0\n1     265.0\n2     951.0\n3     398.0\n4      72.0\n      ...  \n95    381.0\n96    964.0\n97     18.0\n98    977.0\n99    932.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        7,  8,  9, 10, 10, 11, 12, 13, 14, 14, 14, 15, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 24, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31, 32, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 43, 44, 45, 45, 46, 46,\n       47, 48, 48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n       62, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75])`, type: `ndarray`\n\n_, expected value: `array([995., 265., 951., 398.,  72., ... , 381., 964.,  18., 977., 932.])`, shape: `(84,)`, type: `ndarray`\n\nval, expected value: `array([995., 265., 951., 398.,  72., ... , 964.,  18., 977.,\n       932.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 15, 29, 33, 42, 56, 64, 70,  0,  2,  4,  5,  6, -1, -1, -1,\n       78,  7,  8, -1,  9, 10, 11, 12, 13, 39, 67, 14, 16, 17, 18, 19, 20,\n       21, 22, -1, -1, 24, 72, -1, 23, 25, 26, 27, 28, 79, 14, 36, 30, 38,\n       31, 32, 34, 35, 37, -1, -1, -1, 40, 41, 43, 60, 44, 45, 71, -1, 46,\n       47, 48, 66, 74, 49, 50, 51, 52, 53, -1, -1, 54, 55, 57, 58, 59, 61,\n       62, 63, 65, 68, 69, -1, -1, 73, 75, 76, 77, 80, 81, 82, 83])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0,  2,  4,  5,  6,  7,  8,  9,\n       94, 10, 11, 83, 12, 13, 14, 15, 16, 49, 80, 17, 19, 20, 21, 22, 23,\n       24, 25, 26, 27, 30, 88, 28, 29, 31, 32, 33, 34, 95, 36, 43, 37, 48,\n       38, 39, 41, 42, 44, 45, 46, 47, 50, 51, 53, 73, 54, 55, 87, 64, 56,\n       57, 58, 79, 90, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 74,\n       75, 76, 78, 81, 82, 84, 85, 89, 91, 92, 93, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 28, 29,\n       30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 49, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 68, 69, 72, 73,\n       74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91,\n       92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 2, 0, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n       2, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 2, 0, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2,\n       1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('b', '2015-08-25') ... ('u', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(76,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nb    2015-08-25    1\nl    2015-08-23    1\ns    2015-08-31    1\no    2015-08-31    1\nc    2015-08-26    1\n                  ..\nq    2015-08-30    1\ni    2015-08-31    1\nn    2015-08-23    1\np    2015-08-28    1\nu    2015-08-27    1\nName: julie, Length: 76, dtype: int64`, type: `Series`\n\n### Expected case 197\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     995.0\n1     265.0\n2     951.0\n3     398.0\n4      72.0\n      ...  \n95    381.0\n96    964.0\n97     18.0\n98    977.0\n99    932.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  2,  2,  2,  3,  3,  3,  3,\n        4,  4,  4,  4,  4,  4,  5,  5,  6,  6,  7,  7,  7,  8,  8,  8,  8,\n        8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11,\n       12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15,\n       16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19,\n       20, 20, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 25])`, type: `ndarray`\n\n_, expected value: `array([995., 265., 951., 398.,  72., ... , 381., 964.,  18., 977., 932.])`, shape: `(84,)`, type: `ndarray`\n\nval, expected value: `array([995., 265., 951., 398.,  72., ... , 964.,  18., 977.,\n       932.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1, 15, 29, 42, 56, 70,  0, 34,  2, 25,  3, 37, 52, -1,  4, 62, 63,\n       -1,  5,  8, 14, 36, 46,  6, 22, -1, 35, -1, 41, 64, -1, 10, 16, 17,\n       78, -1,  7, 50, 81, -1,  9, 20, 33, 40, 49, 76, 82, 11, 21, 44, 61,\n       12, 43, 60, -1, 13, 26, 30, 38, 39, 67, 14, 45, 54, 71, -1, 18, 83,\n       -1, 19, 24, 72, -1, 32, 58, 68, 77, -1, 23, 53, 59, 73, 27, 28, 79,\n       -1, -1, 31, 80, 47, 57, 48, 55, 66, 74, 51, 69, -1, 65, 75])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 69, 86,  0, 41,  2, 31,  3, 44, 62, 26,  4, 75, 76,\n       64,  5, 11, 36, 43, 56,  6, 25,  7, 42,  8, 51, 77,  9, 13, 19, 20,\n       94, 65, 10, 60, 97, 83, 12, 23, 40, 50, 59, 92, 98, 14, 24, 54, 74,\n       15, 53, 73, 47, 16, 32, 37, 48, 49, 80, 17, 55, 67, 87, 45, 21, 99,\n       27, 22, 30, 88, 28, 39, 71, 81, 93, 85, 29, 63, 72, 89, 33, 34, 95,\n       46, 66, 38, 96, 57, 70, 58, 68, 79, 90, 61, 82, 84, 78, 91])`, type: `ndarray`\n\nidx, expected value: `array([ 6,  8, 10, 13, 17, 23, 25, 27, 30, 35, 39, 47, 51, 54, 61, 65, 68,\n       72, 77, 82, 85, 89, 91, 95, 97, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 2, 2, 3, 3, 5, 2, 1, 2, 4, 3, 7, 4, 3, 6, 4, 2, 3, 4, 4, 3, 2,\n       2, 4, 2, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([2, 2, 3, 3, 5, 2, 1, 2, 4, 3, 7, 4, 3, 6, 4, 2, 3, 4, 4, 3, 2, 2,\n       4, 2, 1, 1])`, type: `ndarray`\n\nri, expected value: `Index(['b', 'l', 'j', 's', 'o', 'c', 'r', 'k', 'h', 'n', 'p', 'x', 'm', 'z',\n       'd', 'u', 'e', 'q', 't', 'f', 'i', 'y', 'w', 'g', 'a', 'v'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nb    2\nl    2\nj    3\ns    3\no    5\nc    2\nr    1\nk    2\nh    4\nn    3\np    7\nx    4\nm    3\nz    6\nd    4\nu    2\ne    3\nq    4\nt    4\nf    3\ni    2\ny    2\nw    4\ng    2\na    1\nv    1\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 198\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     995.0\n1     265.0\n2     951.0\n3     398.0\n4      72.0\n      ...  \n95    381.0\n96    964.0\n97     18.0\n98    977.0\n99    932.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        7,  8,  9, 10, 10, 11, 12, 13, 14, 14, 14, 15, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 24, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31, 32, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 43, 44, 45, 45, 46, 46,\n       47, 48, 48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n       62, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75])`, type: `ndarray`\n\n_, expected value: `array([995., 265., 951., 398.,  72., ... , 381., 964.,  18., 977., 932.])`, shape: `(84,)`, type: `ndarray`\n\nval, expected value: `array([995., 265., 951., 398.,  72., ... , 964.,  18., 977.,\n       932.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3, 15, 29, 33, 42, 56, 64, 70,  0,  2,  4,  5,  6, -1, -1, -1,\n       78,  7,  8, -1,  9, 10, 11, 12, 13, 39, 67, 14, 16, 17, 18, 19, 20,\n       21, 22, -1, -1, 24, 72, -1, 23, 25, 26, 27, 28, 79, 14, 36, 30, 38,\n       31, 32, 34, 35, 37, -1, -1, -1, 40, 41, 43, 60, 44, 45, 71, -1, 46,\n       47, 48, 66, 74, 49, 50, 51, 52, 53, -1, -1, 54, 55, 57, 58, 59, 61,\n       62, 63, 65, 68, 69, -1, -1, 73, 75, 76, 77, 80, 81, 82, 83])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0,  2,  4,  5,  6,  7,  8,  9,\n       94, 10, 11, 83, 12, 13, 14, 15, 16, 49, 80, 17, 19, 20, 21, 22, 23,\n       24, 25, 26, 27, 30, 88, 28, 29, 31, 32, 33, 34, 95, 36, 43, 37, 48,\n       38, 39, 41, 42, 44, 45, 46, 47, 50, 51, 53, 73, 54, 55, 87, 64, 56,\n       57, 58, 79, 90, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 74,\n       75, 76, 78, 81, 82, 84, 85, 89, 91, 92, 93, 96, 97, 98, 99])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 28, 29,\n       30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 49, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 68, 69, 72, 73,\n       74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91,\n       92, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 2, 0, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n       2, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 2, 0, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2,\n       1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('b', '2015-08-25') ... ('u', '2015-08-27')],\n           names=['jim', 'joe'])`, shape: `(76,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nb    2015-08-25    1\nl    2015-08-23    1\ns    2015-08-31    1\no    2015-08-31    1\nc    2015-08-26    1\n                  ..\nq    2015-08-30    1\ni    2015-08-31    1\nn    2015-08-23    1\np    2015-08-28    1\nu    2015-08-27    1\nName: julie, Length: 76, dtype: int64`, type: `Series`\n\n### Expected case 199\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      887\n1      239\n2      603\n3      400\n4      776\n      ... \n995    846\n996    555\n997    402\n998    160\n999    372\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([887, 239, 603, 400, 776, ... , 229, 121, 269, 440, 846, 402])`, shape: `(633,)`, type: `ndarray`\n\nval, expected value: `array([887, 239, 603, 400, 776, ... , 440, 846, 555, 402, 160, 372])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([  0,  20,  28,  30,  61, ... , 472, 479, 503, 521, 538, 583])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0,  20, 234,  30,  62, ... , 980, 665, 717, 749, 788, 875])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  51,  88, 131, 165, 205, 246, 295, 334, 371, 395, 433, 493,\n       529, 571, 608, 649, 681, 718, 756, 787, 825, 868, 902, 931, 965])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([49, 37, 43, 34, 40, 41, 46, 39, 35, 24, 37, 55, 36, 40, 37, 41, 30,\n       37, 38, 29, 38, 43, 33, 28, 34, 35])`, type: `ndarray`\n\nres, expected value: `array([49, 37, 43, 34, 40, 41, 46, 39, 35, 24, 37, 55, 36, 40, 37, 41, 30,\n       37, 38, 29, 38, 43, 33, 28, 34, 35])`, type: `ndarray`\n\nri, expected value: `Index(['i', 'n', 'l', 'q', 'p', 'h', 'c', 'm', 'v', 'k', 'w', 'd', 'e', 'b',\n       'o', 'a', 'z', 'y', 'x', 't', 'f', 's', 'r', 'u', 'j', 'g'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ni    49\nn    37\nl    43\nq    34\np    40\nh    41\nc    46\nm    39\nv    35\nk    24\nw    37\nd    55\ne    36\nb    40\no    37\na    41\nz    30\ny    37\nx    38\nt    29\nf    38\ns    43\nr    33\nu    28\nj    34\ng    35\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 200\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      887\n1      239\n2      603\n3      400\n4      776\n      ... \n995    846\n996    555\n997    402\n998    160\n999    372\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   1, ... , 252, 253, 253, 254, 255, 255])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([887, 239, 603, 400, 776, ... , 229, 121, 269, 440, 846, 402])`, shape: `(633,)`, type: `ndarray`\n\nval, expected value: `array([887, 239, 603, 400, 776, ... , 440, 846, 555, 402, 160, 372])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([  0,  64, 143, 440,   1, ... , 583, 115, 461, 227, 138, 228])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([  0,  65, 157, 598,   1, ... , 875, 896, 912, 898, 964, 916])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   4,  11,  17,  20, ... , 988, 991, 992, 995, 997, 998])`, shape: `(256,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 4,  7,  6,  3,  3,  7,  5, ... ,  3,  1,  3,  2,  1,\n        2])`, shape: `(256,)`, type: `ndarray`\n\nres, expected value: `array([ 4,  7,  6,  3,  3,  7,  5, ... ,  3,  1,  3,  2,  1,\n        2])`, shape: `(256,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('i', '2015-08-29') ... ('w', '2015-08-24')],\n           names=['jim', 'joe'], length=256)`, shape: `(256,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ni    2015-08-29    4\nn    2015-08-31    7\nl    2015-08-30    6\nq    2015-08-26    3\np    2015-08-24    3\n                  ..\nu    2015-08-29    1\ng    2015-08-26    3\nz    2015-08-30    2\ne    2015-08-23    1\nw    2015-08-24    2\nName: julie, Length: 256, dtype: int64`, type: `Series`\n\n### Expected case 201\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      887.0\n1      239.0\n2      603.0\n3      400.0\n4      776.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    160.0\n999    372.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([887., 239., 603., 400., 776., ... , 229., 389., 121., 269., 440.])`, shape: `(569,)`, type: `ndarray`\n\nval, expected value: `array([887., 239., 603., 400., 776., ... ,  nan,  nan,  nan, 160., 372.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 353, 397, 466, 481, 494, 497])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 531, 611, 822, 854, 816, 819])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59, 107, 147, 180, 215, 252, 299, 336, 371, 395, 427, 484, 519,\n       557, 598, 628, 665, 699, 730, 764, 802, 844, 873, 901, 933, 965])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([50, 35, 33, 27, 30, 32, 38, 33, 30, 22, 25, 47, 29, 30, 36, 22, 30,\n       26, 28, 31, 34, 32, 23, 25, 25, 25, 27])`, type: `ndarray`\n\nres, expected value: `array([35, 33, 27, 30, 32, 38, 33, 30, 22, 25, 47, 29, 30, 36, 22, 30, 26,\n       28, 31, 34, 32, 23, 25, 25, 25, 27])`, type: `ndarray`\n\nri, expected value: `Index(['i', 'l', 'q', 'p', 'h', 'c', 'm', 'v', 'k', 'w', 'd', 'e', 'b', 'a',\n       'z', 'y', 'x', 't', 'o', 'f', 's', 'r', 'u', 'j', 'g', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ni    35\nl    33\nq    27\np    30\nh    32\nc    38\nm    33\nv    30\nk    22\nw    25\nd    47\ne    29\nb    30\na    36\nz    22\ny    30\nx    26\nt    28\no    31\nf    34\ns    32\nr    23\nu    25\nj    25\ng    25\nn    27\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 202\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      887.0\n1      239.0\n2      603.0\n3      400.0\n4      776.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    160.0\n999    372.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 252, 252, 253, 254, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([887., 239., 603., 400., 776., ... , 229., 389., 121., 269., 440.])`, shape: `(569,)`, type: `ndarray`\n\nval, expected value: `array([887., 239., 603., 400., 776., ... ,  nan,  nan,  nan, 160., 372.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 520,  98, 535, 436, 121, 536])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 875, 896, 912, 898, 964, 916])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  88,  94,  97, 103, ... , 988, 991, 992, 995, 997, 998])`, shape: `(255,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([72,  2,  4,  2,  6,  4,  4, ... ,  2,  1,  3,  2,  1,\n        2])`, shape: `(256,)`, type: `ndarray`\n\nres, expected value: `array([2, 4, 2, 6, 4, 4, 4, 4, 1, ... , 1, 1, 1, 2, 2, 1, 3, 2, 1, 2])`, shape: `(255,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('i', '2015-08-29') ... ('w', '2015-08-24')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ni    2015-08-29    2\nl    2015-08-30    4\np    2015-08-24    2\nl    2015-08-23    6\nh    2015-09-01    4\n                  ..\nu    2015-08-29    1\ng    2015-08-26    3\nz    2015-08-30    2\ne    2015-08-23    1\nw    2015-08-24    2\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n### Expected case 203\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      887.0\n1      239.0\n2      603.0\n3      400.0\n4      776.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    160.0\n999    372.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([887., 239., 603., 400., 776., ... , 229., 389., 121., 269., 440.])`, shape: `(569,)`, type: `ndarray`\n\nval, expected value: `array([887., 239., 603., 400., 776., ... ,  nan,  nan,  nan, 160., 372.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 353, 397, 466, 481, 494, 497])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 531, 611, 822, 854, 816, 819])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59, 107, 147, 180, 215, 252, 299, 336, 371, 395, 427, 484, 519,\n       557, 598, 628, 665, 699, 730, 764, 802, 844, 873, 901, 933, 965])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([50, 35, 33, 27, 30, 32, 38, 33, 30, 22, 25, 47, 29, 30, 36, 22, 30,\n       26, 28, 31, 34, 32, 23, 25, 25, 25, 27])`, type: `ndarray`\n\nres, expected value: `array([35, 33, 27, 30, 32, 38, 33, 30, 22, 25, 47, 29, 30, 36, 22, 30, 26,\n       28, 31, 34, 32, 23, 25, 25, 25, 27])`, type: `ndarray`\n\nri, expected value: `Index(['i', 'l', 'q', 'p', 'h', 'c', 'm', 'v', 'k', 'w', 'd', 'e', 'b', 'a',\n       'z', 'y', 'x', 't', 'o', 'f', 's', 'r', 'u', 'j', 'g', 'n'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\ni    35\nl    33\nq    27\np    30\nh    32\nc    38\nm    33\nv    30\nk    22\nw    25\nd    47\ne    29\nb    30\na    36\nz    22\ny    30\nx    26\nt    28\no    31\nf    34\ns    32\nr    23\nu    25\nj    25\ng    25\nn    27\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 204\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      887.0\n1      239.0\n2      603.0\n3      400.0\n4      776.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    160.0\n999    372.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 252, 252, 253, 254, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([887., 239., 603., 400., 776., ... , 229., 389., 121., 269., 440.])`, shape: `(569,)`, type: `ndarray`\n\nval, expected value: `array([887., 239., 603., 400., 776., ... ,  nan,  nan,  nan, 160., 372.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 520,  98, 535, 436, 121, 536])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 875, 896, 912, 898, 964, 916])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  88,  94,  97, 103, ... , 988, 991, 992, 995, 997, 998])`, shape: `(255,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([72,  2,  4,  2,  6,  4,  4, ... ,  2,  1,  3,  2,  1,\n        2])`, shape: `(256,)`, type: `ndarray`\n\nres, expected value: `array([2, 4, 2, 6, 4, 4, 4, 4, 1, ... , 1, 1, 1, 2, 2, 1, 3, 2, 1, 2])`, shape: `(255,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('i', '2015-08-29') ... ('w', '2015-08-24')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \ni    2015-08-29    2\nl    2015-08-30    4\np    2015-08-24    2\nl    2015-08-23    6\nh    2015-09-01    4\n                  ..\nu    2015-08-29    1\ng    2015-08-26    3\nz    2015-08-30    2\ne    2015-08-23    1\nw    2015-08-24    2\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n### Expected case 205\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         7\n1       982\n2       908\n3       185\n4       689\n       ... \n9995    165\n9996    321\n9997    330\n9998    734\n9999    480\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([  7, 982, 908, 185, 689, ... , 177, 533, 546,  43, 217, 561])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([  7, 982, 908, ..., 330, 734, 480])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   0,   5, ..., 993, 997, 997])`, type: `ndarray`\n\nsorter, expected value: `array([   0,  282, 8906, ..., 8398, 7739, 8675])`, type: `ndarray`\n\nidx, expected value: `array([   0,  381,  747, 1142, 1555, 1953, 2311, 2696, 3090, 3456, 3862,\n       4254, 4629, 5009, 5400, 5787, 6180, 6539, 6929, 7290, 7686, 8041,\n       8452, 8837, 9223, 9611])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([320, 304, 323, 343, 326, 298, 320, 315, 307, 339, 327, 315, 313,\n       323, 320, 316, 301, 318, 309, 334, 296, 338, 328, 318, 304, 313])`, type: `ndarray`\n\nres, expected value: `array([320, 304, 323, 343, 326, 298, 320, 315, 307, 339, 327, 315, 313,\n       323, 320, 316, 301, 318, 309, 334, 296, 338, 328, 318, 304, 313])`, type: `ndarray`\n\nri, expected value: `Index(['l', 'f', 'p', 'r', 's', 'e', 'g', 't', 'n', 'a', 'x', 'm', 'i', 'c',\n       'h', 'b', 'v', 'z', 'k', 'd', 'w', 'j', 'u', 'o', 'y', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nl    320\nf    304\np    323\nr    343\ns    326\ne    298\ng    320\nt    315\nn    307\na    339\nx    327\nm    315\ni    313\nc    323\nh    320\nb    316\nv    301\nz    318\nk    309\nd    334\nw    296\nj    338\nu    328\no    318\ny    304\nq    313\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 206\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         7\n1       982\n2       908\n3       185\n4       689\n       ... \n9995    165\n9996    321\n9997    330\n9998    734\n9999    480\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([  7, 982, 908, 185, 689, ... , 177, 533, 546,  43, 217, 561])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([  7, 982, 908, ..., 330, 734, 480])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   0, 100, ..., 813, 965, 990])`, type: `ndarray`\n\nsorter, expected value: `array([   0,  282, 7744, ..., 5241, 3277, 8786])`, type: `ndarray`\n\nidx, expected value: `array([   0,   40,   83,  123,  167, ... , 9829, 9878, 9917, 9944, 9971])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([39, 41, 40, 43, 37, 38, 39, ... , 26,\n       48, 38, 27, 27, 29])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([39, 41, 40, 43, 37, 38, 39, ... , 26,\n       48, 38, 27, 27, 29])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('l', '2015-08-31') ... ('y', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nl    2015-08-31    39\nf    2015-08-25    41\np    2015-08-23    40\nr    2015-08-26    43\ns    2015-08-29    37\n                   ..\nz    2015-08-23    48\nc    2015-08-29    38\nk    2015-08-23    27\nw    2015-08-25    27\ny    2015-08-27    29\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 207\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         7.0\n1       982.0\n2       908.0\n3       185.0\n4       689.0\n        ...  \n9995    165.0\n9996    321.0\n9997    330.0\n9998    734.0\n9999    480.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([  7., 982., 908., 185., 689., ... , 217., 990., 274., 561.,  24.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([  7., 982., 908., ..., 330., 734., 480.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 994, 994, 996])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7739, 8675, 9757])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  950, 1325, 1714, 2089, 2420, 2779, 3153, 3493, 3871, 4241,\n       4590, 4959, 5330, 5703, 6036, 6383, 6753, 7098, 7471, 7802, 8188,\n       8551, 8914, 9271, 9640])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([391, 267, 270, 276, 270, 245, 260, 263, 247, 271, 270, 257, 266,\n       269, 270, 250, 253, 268, 254, 277, 240, 278, 252, 273, 263, 261,\n       245])`, type: `ndarray`\n\nres, expected value: `array([267, 270, 276, 270, 245, 260, 263, 247, 271, 270, 257, 266, 269,\n       270, 250, 253, 268, 254, 277, 240, 278, 252, 273, 263, 261, 245])`, type: `ndarray`\n\nri, expected value: `Index(['l', 'p', 'r', 's', 'e', 'g', 't', 'n', 'a', 'x', 'm', 'c', 'h', 'b',\n       'v', 'f', 'z', 'k', 'd', 'w', 'j', 'i', 'u', 'o', 'y', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nl    267\np    270\nr    276\ns    270\ne    245\ng    260\nt    263\nn    247\na    271\nx    270\nm    257\nc    266\nh    269\nb    270\nv    250\nf    253\nz    268\nk    254\nd    277\nw    240\nj    278\ni    252\nu    273\no    263\ny    261\nq    245\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 208\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         7.0\n1       982.0\n2       908.0\n3       185.0\n4       689.0\n        ...  \n9995    165.0\n9996    321.0\n9997    330.0\n9998    734.0\n9999    480.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([  7., 982., 908., 185., 689., ... , 217., 990., 274., 561.,  24.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([  7., 982., 908., ..., 330., 734., 480.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 696, 749, 923])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 8607, 5241, 6972])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  882,  916,  952,  987, ... , 9860, 9896, 9924, 9950, 9976])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([519,  30,  32,  33,  25, ... ,  31,  21,  21,  21,\n        19])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([30, 32, 33, 25, 29, 26, 29, ... , 38,\n       31, 21, 21, 21, 19])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('l', '2015-08-31') ... ('y', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nl    2015-08-31    30\np    2015-08-23    32\ns    2015-08-29    33\nr    2015-08-28    25\ne    2015-08-26    29\n                   ..\nc    2015-08-29    31\nf    2015-09-01    21\nk    2015-08-23    21\nw    2015-08-25    21\ny    2015-08-27    19\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 209\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         7.0\n1       982.0\n2       908.0\n3       185.0\n4       689.0\n        ...  \n9995    165.0\n9996    321.0\n9997    330.0\n9998    734.0\n9999    480.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([  7., 982., 908., 185., 689., ... , 217., 990., 274., 561.,  24.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([  7., 982., 908., ..., 330., 734., 480.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 994, 994, 996])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7739, 8675, 9757])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  950, 1325, 1714, 2089, 2420, 2779, 3153, 3493, 3871, 4241,\n       4590, 4959, 5330, 5703, 6036, 6383, 6753, 7098, 7471, 7802, 8188,\n       8551, 8914, 9271, 9640])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([391, 267, 270, 276, 270, 245, 260, 263, 247, 271, 270, 257, 266,\n       269, 270, 250, 253, 268, 254, 277, 240, 278, 252, 273, 263, 261,\n       245])`, type: `ndarray`\n\nres, expected value: `array([267, 270, 276, 270, 245, 260, 263, 247, 271, 270, 257, 266, 269,\n       270, 250, 253, 268, 254, 277, 240, 278, 252, 273, 263, 261, 245])`, type: `ndarray`\n\nri, expected value: `Index(['l', 'p', 'r', 's', 'e', 'g', 't', 'n', 'a', 'x', 'm', 'c', 'h', 'b',\n       'v', 'f', 'z', 'k', 'd', 'w', 'j', 'i', 'u', 'o', 'y', 'q'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nl    267\np    270\nr    276\ns    270\ne    245\ng    260\nt    263\nn    247\na    271\nx    270\nm    257\nc    266\nh    269\nb    270\nv    250\nf    253\nz    268\nk    254\nd    277\nw    240\nj    278\ni    252\nu    273\no    263\ny    261\nq    245\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 210\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0         7.0\n1       982.0\n2       908.0\n3       185.0\n4       689.0\n        ...  \n9995    165.0\n9996    321.0\n9997    330.0\n9998    734.0\n9999    480.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([  7., 982., 908., 185., 689., ... , 217., 990., 274., 561.,  24.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([  7., 982., 908., ..., 330., 734., 480.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 696, 749, 923])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 8607, 5241, 6972])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  882,  916,  952,  987, ... , 9860, 9896, 9924, 9950, 9976])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([519,  30,  32,  33,  25, ... ,  31,  21,  21,  21,\n        19])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([30, 32, 33, 25, 29, 26, 29, ... , 38,\n       31, 21, 21, 21, 19])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('l', '2015-08-31') ... ('y', '2015-08-27')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nl    2015-08-31    30\np    2015-08-23    32\ns    2015-08-29    33\nr    2015-08-28    25\ne    2015-08-26    29\n                   ..\nc    2015-08-29    31\nf    2015-09-01    21\nk    2015-08-23    21\nw    2015-08-25    21\ny    2015-08-27    19\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 211\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        699\n1        928\n2        366\n3        917\n4         34\n        ... \n99995    803\n99996    217\n99997    969\n99998    417\n99999    979\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([699, 928, 366, 917,  34, ... , 223, 691, 869, 164,  58, 528])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([699, 928, 366, ..., 969, 417, 979])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([    0, 50939, 62081, ..., 51024, 67174, 90333])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3904,  7727, 11625, 15527, 19345, 23127, 27025, 30878,\n       34649, 38508, 42364, 46111, 49956, 53785, 57586, 61559, 65483,\n       69450, 73381, 77205, 80953, 84725, 88699, 92439, 96218])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([973, 985, 978, 984, 976, 973, 980, 974, 977, 979, 970, 973, 970,\n       972, 976, 980, 982, 982, 982, 984, 978, 977, 988, 972, 970, 974])`, type: `ndarray`\n\nres, expected value: `array([973, 985, 978, 984, 976, 973, 980, 974, 977, 979, 970, 973, 970,\n       972, 976, 980, 982, 982, 982, 984, 978, 977, 988, 972, 970, 974])`, type: `ndarray`\n\nri, expected value: `Index(['k', 'r', 'u', 'z', 'g', 'p', 'l', 'i', 'w', 'c', 'j', 'm', 'v', 'o',\n       'h', 'y', 'e', 'q', 's', 'x', 'n', 'f', 'd', 't', 'b', 'a'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    973\nr    985\nu    978\nz    984\ng    976\np    973\nl    980\ni    974\nw    977\nc    979\nj    970\nm    973\nv    970\no    972\nh    976\ny    980\ne    982\nq    982\ns    982\nx    984\nn    978\nf    977\nd    988\nt    972\nb    970\na    974\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 212\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        699\n1        928\n2        366\n3        917\n4         34\n        ... \n99995    803\n99996    217\n99997    969\n99998    417\n99999    979\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([699, 928, 366, 917,  34, ... , 223, 691, 869, 164,  58, 528])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([699, 928, 366, ..., 969, 417, 979])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   2,   3, ..., 989, 997, 997])`, type: `ndarray`\n\nsorter, expected value: `array([    0, 17096,   441, ..., 90177, 85328, 92928])`, type: `ndarray`\n\nidx, expected value: `array([    0,   393,   789,  1174, ... , 98056, 98435, 98850, 99232, 99636])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([318, 324, 317, 308, 307, ... , 320, 314, 331, 323, 326, 322])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([318, 324, 317, 308, 307, ... , 320, 314, 331, 323, 326, 322])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('k', '2015-08-25') ... ('f', '2015-08-30')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nk    2015-08-25    318\nr    2015-08-27    324\nu    2015-09-01    317\nz    2015-08-24    308\ng    2015-08-31    307\n                  ... \nr    2015-08-23    314\nz    2015-08-27    331\np    2015-08-27    323\nk    2015-08-24    326\nf    2015-08-30    322\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 213\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        699.0\n1        928.0\n2        366.0\n3        917.0\n4         34.0\n         ...  \n99995    803.0\n99996    217.0\n99997    969.0\n99998    417.0\n99999    979.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([699., 928., 366., 917.,  34., ... , 371., 157., 528.,  58.,  43.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([699., 928., 366., ..., 969., 417., 979.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 24032, 30311, 41781])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9582, 13264, 16941, 20540, 24106, 27769, 31398, 34946,\n       38555, 42183, 45716, 49350, 52957, 56549, 60283, 63962, 67694,\n       71383, 74991, 78513, 82052, 85634, 89379, 92911, 96459])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([992, 951, 956, 961, 954, 944, 958, 950, 955, 950, 948, 944, 951,\n       948, 951, 959, 950, 957, 956, 960, 947, 949, 954, 965, 940, 943,\n       944])`, type: `ndarray`\n\nres, expected value: `array([951, 956, 961, 954, 944, 958, 950, 955, 950, 948, 944, 951, 948,\n       951, 959, 950, 957, 956, 960, 947, 949, 954, 965, 940, 943, 944])`, type: `ndarray`\n\nri, expected value: `Index(['k', 'u', 'z', 'g', 'p', 'l', 'i', 'w', 'c', 'j', 'm', 'v', 'o', 'h',\n       'y', 'e', 'q', 's', 'x', 'n', 'f', 'r', 'd', 't', 'b', 'a'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    951\nu    956\nz    961\ng    954\np    944\nl    958\ni    950\nw    955\nc    950\nj    948\nm    944\nv    951\no    948\nh    951\ny    959\ne    950\nq    957\ns    956\nx    960\nn    947\nf    949\nr    954\nd    965\nt    940\nb    943\na    944\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 214\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        699.0\n1        928.0\n2        366.0\n3        917.0\n4         34.0\n         ...  \n99995    803.0\n99996    217.0\n99997    969.0\n99998    417.0\n99999    979.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([699., 928., 366., 917.,  34., ... , 371., 157., 528.,  58.,  43.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([699., 928., 366., ..., 969., 417., 979.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 987, 993, 997])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ...,  5449, 42488, 35642])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8795,  9150,  9485, ... , 98245, 98583, 98955, 99284, 99629])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([999, 261, 263, 237, 257, ... , 242, 273, 246, 266,\n       269])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([261, 263, 237, 257, 273, ... , 267, 242, 273, 246, 266, 269])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('k', '2015-08-25') ... ('u', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nk    2015-08-25    261\nu    2015-09-01    263\ng    2015-08-31    237\np    2015-08-26    257\nl    2015-08-30    273\n                  ... \nn    2015-08-31    242\nk    2015-08-24    273\nf    2015-08-30    246\np    2015-08-27    266\nu    2015-08-24    269\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 215\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        699.0\n1        928.0\n2        366.0\n3        917.0\n4         34.0\n         ...  \n99995    803.0\n99996    217.0\n99997    969.0\n99998    417.0\n99999    979.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([699., 928., 366., 917.,  34., ... , 371., 157., 528.,  58.,  43.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([699., 928., 366., ..., 969., 417., 979.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 24032, 30311, 41781])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9582, 13264, 16941, 20540, 24106, 27769, 31398, 34946,\n       38555, 42183, 45716, 49350, 52957, 56549, 60283, 63962, 67694,\n       71383, 74991, 78513, 82052, 85634, 89379, 92911, 96459])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([992, 951, 956, 961, 954, 944, 958, 950, 955, 950, 948, 944, 951,\n       948, 951, 959, 950, 957, 956, 960, 947, 949, 954, 965, 940, 943,\n       944])`, type: `ndarray`\n\nres, expected value: `array([951, 956, 961, 954, 944, 958, 950, 955, 950, 948, 944, 951, 948,\n       951, 959, 950, 957, 956, 960, 947, 949, 954, 965, 940, 943, 944])`, type: `ndarray`\n\nri, expected value: `Index(['k', 'u', 'z', 'g', 'p', 'l', 'i', 'w', 'c', 'j', 'm', 'v', 'o', 'h',\n       'y', 'e', 'q', 's', 'x', 'n', 'f', 'r', 'd', 't', 'b', 'a'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\nk    951\nu    956\nz    961\ng    954\np    944\nl    958\ni    950\nw    955\nc    950\nj    948\nm    944\nv    951\no    948\nh    951\ny    959\ne    950\nq    957\ns    956\nx    960\nn    947\nf    949\nr    954\nd    965\nt    940\nb    943\na    944\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 216\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        699.0\n1        928.0\n2        366.0\n3        917.0\n4         34.0\n         ...  \n99995    803.0\n99996    217.0\n99997    969.0\n99998    417.0\n99999    979.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([699., 928., 366., 917.,  34., ... , 371., 157., 528.,  58.,  43.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([699., 928., 366., ..., 969., 417., 979.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 987, 993, 997])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ...,  5449, 42488, 35642])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8795,  9150,  9485, ... , 98245, 98583, 98955, 99284, 99629])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([999, 261, 263, 237, 257, ... , 242, 273, 246, 266,\n       269])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([261, 263, 237, 257, 273, ... , 267, 242, 273, 246, 266, 269])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('k', '2015-08-25') ... ('u', '2015-08-24')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \nk    2015-08-25    261\nu    2015-09-01    263\ng    2015-08-31    237\np    2015-08-26    257\nl    2015-08-30    273\n                  ... \nn    2015-08-31    242\nk    2015-08-24    273\nf    2015-08-30    246\np    2015-08-27    266\nu    2015-08-24    269\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 217\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     7\n1     0\n2     0\n3     5\n4     2\n     ..\n95    6\n96    3\n97    7\n98    2\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,\n        4,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  8,  8,  9,  9,  9,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13,\n       13, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17,\n       18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21,\n       21, 22, 22, 22, 22, 22, 22, 22, 23, 24, 24, 24, 24, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([7, 0, 5, 2, 1, 3, 6, 9, 4, 8])`, type: `ndarray`\n\nval, expected value: `array([7, 0, 0, 5, 2, 1, 3, 6, 9, 4, 1, 1, 3, 6, 2, 3, 7, 4, 4, 4, 7, 3,\n       6, 9, 6, 4, 6, 8, 8, 1, 5, 9, 7, 2, 2, 1, 2, 5, 0, 2, 2, 4, 6, 6,\n       0, 1, 8, 5, 0, 7, 7, 2, 4, 2, 4, 1, 7, 9, 3, 2, 8, 6, 6, 8, 4, 8,\n       5, 6, 3, 1, 4, 8, 0, 5, 8, 9, 7, 6, 7, 3, 8, 6, 5, 4, 5, 8, 4, 1,\n       1, 3, 4, 5, 2, 1, 0, 6, 3, 7, 2, 5])`, type: `ndarray`\n\ncodes, expected value: `array([0, 1, 2, 0, 6, 7, 9, 6, 8, 0, 2, 5, 9, 0, 6, 8, 8, 9, 3, 5, 5, 7,\n       8, 1, 3, 6, 1, 4, 4, 3, 4, 0, 3, 8, 0, 2, 3, 3, 4, 4, 4, 6, 9, 8,\n       8, 0, 4, 8, 9, 9, 3, 4, 2, 5, 3, 6, 9, 2, 2, 5, 6, 6, 1, 2, 3, 3,\n       5, 9, 2, 3, 5, 6, 8, 8, 8, 9, 0, 0, 1, 6, 0, 4, 8, 9, 2, 3, 1, 4,\n       5, 6, 6, 7, 8, 7, 2, 4, 5, 6, 1, 7])`, type: `ndarray`\n\nsorter, expected value: `array([97, 38, 73, 50, 61, 57, 71, 24,  9, 32, 99, 96, 28, 20, 42, 52, 90,\n       63, 34, 68, 79,  8, 19,  2, 59, 77, 94, 10, 11,  4, 69, 78, 14, 64,\n       16,  3, 51, 53, 29, 55, 88, 22, 60, 54, 83,  0, 45, 41, 27, 65, 39,\n       87, 47, 12, 40,  7, 85, 84, 91, 21, 67, 81, 72, 82, 33, 36,  6, 80,\n       37, 92, 58, 13, 18, 25, 86, 46, 56, 76, 44, 95, 49, 35, 17, 74, 66,\n       98,  1, 93, 89, 43, 62, 75, 70, 23, 30,  5, 15, 26, 48, 31])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  3,  7,  9, 13, 18, 23, 26, 29, 31, 34, 43, 45, 50, 52, 54, 57,\n       62, 68, 76, 80, 84, 86, 93, 94, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 4, 2, 4, 4, 4, 3, 2, 2, 3, 6, 1, 4, 2, 2, 3, 3, 5, 6, 3, 4, 2,\n       6, 1, 4, 2])`, type: `ndarray`\n\nres, expected value: `array([3, 4, 2, 4, 4, 4, 3, 2, 2, 3, 6, 1, 4, 2, 2, 3, 3, 5, 6, 3, 4, 2,\n       6, 1, 4, 2])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    4\nc    2\nd    4\ne    4\nf    4\ng    3\nh    2\ni    2\nj    3\nk    6\nl    1\nm    4\nn    2\no    2\np    3\nq    3\nr    5\ns    6\nt    3\nu    4\nv    2\nw    6\nx    1\ny    4\nz    2\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 218\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     7\n1     0\n2     0\n3     5\n4     2\n     ..\n95    6\n96    3\n97    7\n98    2\n99    5\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 12, 12, 13,\n       14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n       30, 31, 32, 32, 33, 33, 33, 34, 35, 36, 37, 38, 39, 39, 40, 40, 41,\n       42, 43, 44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55, 55, 56,\n       57, 57, 58, 58, 59, 59, 60, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 71, 72, 73, 73, 73, 74, 75, 76, 77, 78, 79, 80])`, type: `ndarray`\n\n_, expected value: `array([7, 0, 5, 2, 1, 3, 6, 9, 4, 8])`, type: `ndarray`\n\nval, expected value: `array([7, 0, 0, 5, 2, 1, 3, 6, 9, 4, 1, 1, 3, 6, 2, 3, 7, 4, 4, 4, 7, 3,\n       6, 9, 6, 4, 6, 8, 8, 1, 5, 9, 7, 2, 2, 1, 2, 5, 0, 2, 2, 4, 6, 6,\n       0, 1, 8, 5, 0, 7, 7, 2, 4, 2, 4, 1, 7, 9, 3, 2, 8, 6, 6, 8, 4, 8,\n       5, 6, 3, 1, 4, 8, 0, 5, 8, 9, 7, 6, 7, 3, 8, 6, 5, 4, 5, 8, 4, 1,\n       1, 3, 4, 5, 2, 1, 0, 6, 3, 7, 2, 5])`, type: `ndarray`\n\ncodes, expected value: `array([1, 2, 0, 0, 6, 7, 9, 8, 6, 0, 5, 2, 9, 0, 8, 9, 8, 6, 3, 5, 7, 8,\n       5, 6, 1, 3, 1, 4, 4, 3, 4, 3, 0, 8, 0, 4, 3, 4, 3, 6, 9, 4, 2, 8,\n       8, 8, 0, 9, 4, 9, 3, 4, 2, 5, 6, 3, 9, 6, 5, 2, 6, 2, 1, 3, 5, 2,\n       9, 3, 3, 8, 6, 8, 5, 9, 2, 8, 0, 0, 1, 6, 0, 4, 8, 9, 3, 2, 6, 5,\n       8, 4, 1, 6, 7, 7, 4, 2, 6, 5, 7, 1])`, type: `ndarray`\n\nsorter, expected value: `array([38, 73, 97, 50, 61, 57, 71,  9, 24, 32, 96, 99, 28, 20, 90, 63, 52,\n       42, 34, 79,  8, 19, 68, 77,  2, 59, 94, 10, 11,  4, 69, 14, 78, 64,\n       16, 55, 51, 29, 53, 22, 60, 88,  3, 83, 54, 41,  0, 65, 45, 27, 39,\n       87, 47, 12,  7, 40, 85, 81, 21, 91, 67, 84, 72, 36,  6, 82, 80, 33,\n       92, 25, 13, 86, 58, 46, 37, 18, 56, 76, 44, 95, 49, 35, 17, 74, 98,\n       66, 62, 89, 70, 93,  1, 43, 75, 23,  5, 30, 26, 15, 31, 48])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 12, 13, 16, 17, 18, 19,\n       20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38,\n       41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       61, 62, 63, 64, 65, 67, 68, 70, 72, 74, 76, 77, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-28') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(81,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-28    1\n     2015-08-30    1\n     2015-09-01    1\nb    2015-08-23    1\n     2015-08-28    1\n                  ..\ny    2015-08-24    1\n     2015-08-28    1\n     2015-08-29    1\nz    2015-08-27    1\n     2015-08-31    1\nName: julie, Length: 81, dtype: int64`, type: `Series`\n\n### Expected case 219\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     7.0\n1     0.0\n2     0.0\n3     5.0\n4     2.0\n     ... \n95    6.0\n96    3.0\n97    7.0\n98    2.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  2,  2,  3,  3,\n        3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,\n        8,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12,\n       12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17,\n       17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20,\n       21, 21, 22, 22, 22, 22, 22, 22, 23, 24, 24, 24, 24, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([7., 0., 5., 2., 1., 3., 6., 4., 9., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 7.,  0.,  0.,  5.,  2., ... ,  0.,  6.,  3.,  7.,  2.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  4,  4,  7,  7,  7,  0,  1,  2,  0,  6,  8,  9, -1,  6, -1,  0,\n        2,  5,  0,  6,  7,  9, -1,  3,  5,  5,  7,  1,  3,  6,  1,  4,  4,\n        3, -1,  0,  3,  0,  2,  3,  3,  4,  4,  4,  6,  9, -1,  7, -1, -1,\n       -1,  0,  7,  3,  4, -1,  5, -1, -1,  3, -1,  2,  5,  6,  6,  1,  2,\n        3,  3,  5,  9, -1,  2,  3,  5,  6,  7,  0,  0,  1,  6,  0,  7,  9,\n       -1,  3,  4,  5,  6,  6,  7,  8,  8, -1,  2,  4,  5,  1,  8])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 35, 69, 18, 52, 86, 97, 38, 73, 50, 61, 57, 71,  9, 24, 28, 32,\n       99, 96, 20, 42, 90, 63,  8, 34, 68, 79, 19,  2, 59, 77, 94, 10, 11,\n        4, 64, 78, 14, 16,  3, 51, 53, 29, 55, 88, 22, 60, 83, 54, 27, 45,\n       65,  0, 41, 39, 87, 47, 12,  7, 85, 40, 84, 91, 21, 67, 81, 72, 82,\n       33, 36,  6, 80, 46, 37, 92, 58, 13, 25, 56, 76, 44, 95, 49, 17, 74,\n       66, 98, 93, 89, 43, 62, 70, 75, 23, 26, 30,  5, 15, 48, 31])`, type: `ndarray`\n\nidx, expected value: `array([ 6,  9, 13, 15, 19, 23, 28, 31, 34, 35, 38, 47, 49, 54, 56, 58, 61,\n       66, 72, 78, 82, 85, 87, 93, 94, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0,\n       0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0,\n       1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 3, 4, 1, 3, 4, 3, 3, 2, 1, 2, 6, 1, 2, 2, 1, 1, 3, 5, 5, 3, 3,\n       1, 5, 1, 3, 2])`, type: `ndarray`\n\nres, expected value: `array([3, 4, 1, 3, 4, 3, 3, 2, 1, 2, 6, 1, 2, 2, 1, 1, 3, 5, 5, 3, 3, 1,\n       5, 1, 3, 2])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    4\nc    1\nd    3\ne    4\nf    3\ng    3\nh    2\ni    1\nj    2\nk    6\nl    1\nm    2\nn    2\no    1\np    1\nq    3\nr    5\ns    5\nt    3\nu    3\nv    1\nw    5\nx    1\ny    3\nz    2\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 220\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     7.0\n1     0.0\n2     0.0\n3     5.0\n4     2.0\n     ... \n95    6.0\n96    3.0\n97    7.0\n98    2.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  5,  6,\n        7,  8,  9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34,\n       35, 35, 36, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 45, 46, 47, 48,\n       49, 50, 50, 51, 52, 52, 53, 54, 54, 55, 56, 57, 57, 58, 59, 60, 61,\n       62, 63, 64, 65, 65, 66, 67, 67, 68, 69, 70, 71, 72, 73, 74])`, type: `ndarray`\n\n_, expected value: `array([7., 0., 5., 2., 1., 3., 6., 4., 9., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 7.,  0.,  0.,  5.,  2., ... ,  0.,  6.,  3.,  7.,  2.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  2,  3,  4,  4,  6,  7,  7,  7,  1,  2,  0,  0,  6,  8,  9, -1,\n        6,  0,  5,  2, -1,  0,  7,  9,  6,  3,  5, -1,  7,  5,  1,  3,  1,\n        4,  4,  3,  3,  0, -1,  0,  4,  3,  4,  3,  6,  9,  4, -1,  7,  7,\n       -1,  0, -1, -1,  3,  4, -1,  5, -1, -1,  6,  5,  2,  6, -1,  1,  3,\n        5,  2,  9,  3,  3,  7,  6, -1,  5,  2,  0,  0,  1,  6,  0,  7,  9,\n        3, -1,  6,  5,  7,  4,  6,  8,  8,  4,  2, -1,  5,  8,  1])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 40, 35, 69, 77, 18, 52, 86, 38, 73, 97, 50, 61, 57, 71,  9,\n       24, 32, 96, 99, 28, 20, 90, 63, 42, 34, 79,  8, 19, 68,  2, 59, 94,\n       10, 11,  4, 14, 78, 64, 16, 55, 51, 29, 53, 22, 60, 88, 83, 54, 41,\n       65,  0, 27, 45, 39, 87, 47, 12,  7, 85, 81, 21, 91, 67, 84, 72, 36,\n        6, 82, 80, 33, 92, 25, 13, 46, 58, 37, 56, 76, 44, 95, 49, 17, 74,\n       98, 66, 62, 89, 70, 93, 43, 75, 23,  5, 30, 26, 15, 31, 48])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28,\n       30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49,\n       50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69,\n       71, 72, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91,\n       93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... ,  True, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 2, 3, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0,\n       1, 1, 2, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1,\n       2, 1, 2, 1, 1, 1, 0, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 2, 3, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 2, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 2,\n       1, 2, 1, 1, 1, 0, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-28') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(75,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-28    1\n     2015-08-30    1\n     2015-09-01    1\nb    2015-08-23    1\n     2015-08-28    1\n                  ..\ny    2015-08-24    1\n     2015-08-28    0\n     2015-08-29    1\nz    2015-08-27    1\n     2015-08-31    1\nName: julie, Length: 75, dtype: int64`, type: `Series`\n\n### Expected case 221\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     7.0\n1     0.0\n2     0.0\n3     5.0\n4     2.0\n     ... \n95    6.0\n96    3.0\n97    7.0\n98    2.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  2,  2,  3,  3,\n        3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,\n        8,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12,\n       12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17,\n       17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20,\n       21, 21, 22, 22, 22, 22, 22, 22, 23, 24, 24, 24, 24, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([7., 0., 5., 2., 1., 3., 6., 4., 9., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 7.,  0.,  0.,  5.,  2., ... ,  0.,  6.,  3.,  7.,  2.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  4,  4,  7,  7,  7,  0,  1,  2,  0,  6,  8,  9, -1,  6, -1,  0,\n        2,  5,  0,  6,  7,  9, -1,  3,  5,  5,  7,  1,  3,  6,  1,  4,  4,\n        3, -1,  0,  3,  0,  2,  3,  3,  4,  4,  4,  6,  9, -1,  7, -1, -1,\n       -1,  0,  7,  3,  4, -1,  5, -1, -1,  3, -1,  2,  5,  6,  6,  1,  2,\n        3,  3,  5,  9, -1,  2,  3,  5,  6,  7,  0,  0,  1,  6,  0,  7,  9,\n       -1,  3,  4,  5,  6,  6,  7,  8,  8, -1,  2,  4,  5,  1,  8])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 35, 69, 18, 52, 86, 97, 38, 73, 50, 61, 57, 71,  9, 24, 28, 32,\n       99, 96, 20, 42, 90, 63,  8, 34, 68, 79, 19,  2, 59, 77, 94, 10, 11,\n        4, 64, 78, 14, 16,  3, 51, 53, 29, 55, 88, 22, 60, 83, 54, 27, 45,\n       65,  0, 41, 39, 87, 47, 12,  7, 85, 40, 84, 91, 21, 67, 81, 72, 82,\n       33, 36,  6, 80, 46, 37, 92, 58, 13, 25, 56, 76, 44, 95, 49, 17, 74,\n       66, 98, 93, 89, 43, 62, 70, 75, 23, 26, 30,  5, 15, 48, 31])`, type: `ndarray`\n\nidx, expected value: `array([ 6,  9, 13, 15, 19, 23, 28, 31, 34, 35, 38, 47, 49, 54, 56, 58, 61,\n       66, 72, 78, 82, 85, 87, 93, 94, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0,\n       0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0,\n       1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([3, 3, 4, 1, 3, 4, 3, 3, 2, 1, 2, 6, 1, 2, 2, 1, 1, 3, 5, 5, 3, 3,\n       1, 5, 1, 3, 2])`, type: `ndarray`\n\nres, expected value: `array([3, 4, 1, 3, 4, 3, 3, 2, 1, 2, 6, 1, 2, 2, 1, 1, 3, 5, 5, 3, 3, 1,\n       5, 1, 3, 2])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    4\nc    1\nd    3\ne    4\nf    3\ng    3\nh    2\ni    1\nj    2\nk    6\nl    1\nm    2\nn    2\no    1\np    1\nq    3\nr    5\ns    5\nt    3\nu    3\nv    1\nw    5\nx    1\ny    3\nz    2\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 222\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     7.0\n1     0.0\n2     0.0\n3     5.0\n4     2.0\n     ... \n95    6.0\n96    3.0\n97    7.0\n98    2.0\n99    5.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  5,  6,\n        7,  8,  9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34,\n       35, 35, 36, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 45, 46, 47, 48,\n       49, 50, 50, 51, 52, 52, 53, 54, 54, 55, 56, 57, 57, 58, 59, 60, 61,\n       62, 63, 64, 65, 65, 66, 67, 67, 68, 69, 70, 71, 72, 73, 74])`, type: `ndarray`\n\n_, expected value: `array([7., 0., 5., 2., 1., 3., 6., 4., 9., 8.])`, type: `ndarray`\n\nval, expected value: `array([ 7.,  0.,  0.,  5.,  2., ... ,  0.,  6.,  3.,  7.,  2.,  5.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  2,  3,  4,  4,  6,  7,  7,  7,  1,  2,  0,  0,  6,  8,  9, -1,\n        6,  0,  5,  2, -1,  0,  7,  9,  6,  3,  5, -1,  7,  5,  1,  3,  1,\n        4,  4,  3,  3,  0, -1,  0,  4,  3,  4,  3,  6,  9,  4, -1,  7,  7,\n       -1,  0, -1, -1,  3,  4, -1,  5, -1, -1,  6,  5,  2,  6, -1,  1,  3,\n        5,  2,  9,  3,  3,  7,  6, -1,  5,  2,  0,  0,  1,  6,  0,  7,  9,\n        3, -1,  6,  5,  7,  4,  6,  8,  8,  4,  2, -1,  5,  8,  1])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 40, 35, 69, 77, 18, 52, 86, 38, 73, 97, 50, 61, 57, 71,  9,\n       24, 32, 96, 99, 28, 20, 90, 63, 42, 34, 79,  8, 19, 68,  2, 59, 94,\n       10, 11,  4, 14, 78, 64, 16, 55, 51, 29, 53, 22, 60, 88, 83, 54, 41,\n       65,  0, 27, 45, 39, 87, 47, 12,  7, 85, 81, 21, 91, 67, 84, 72, 36,\n        6, 82, 80, 33, 92, 25, 13, 46, 58, 37, 56, 76, 44, 95, 49, 17, 74,\n       98, 66, 62, 89, 70, 93, 43, 75, 23,  5, 30, 26, 15, 31, 48])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28,\n       30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49,\n       50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69,\n       71, 72, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91,\n       93, 94, 95, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... ,  True, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 2, 3, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0,\n       1, 1, 2, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1,\n       2, 1, 2, 1, 1, 1, 0, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 2, 3, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 2, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 2,\n       1, 2, 1, 1, 1, 0, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-28') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'])`, shape: `(75,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-28    1\n     2015-08-30    1\n     2015-09-01    1\nb    2015-08-23    1\n     2015-08-28    1\n                  ..\ny    2015-08-24    1\n     2015-08-28    0\n     2015-08-29    1\nz    2015-08-27    1\n     2015-08-31    1\nName: julie, Length: 75, dtype: int64`, type: `Series`\n\n### Expected case 223\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      2\n1      8\n2      3\n3      9\n4      1\n      ..\n995    1\n996    3\n997    0\n998    7\n999    2\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([2, 8, 3, 9, 1, 5, 0, 7, 6, 4])`, type: `ndarray`\n\nval, expected value: `array([2, 8, 3, 9, 1, 3, 8, 5, 3, ... ,\n       0, 7, 5, 7, 5, 1, 3, 0, 7, 2])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 1, 2, 2, 2, 2, 2, 2, ... ,\n       7, 8, 8, 9, 9, 9, 9, 9, 9, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([ 68, 859, 491,   5,  36, ... , 259, 373, 668, 687, 719, 838])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  40,  77, 115, 152, 189, 225, 263, 297, 324, 357, 401, 438,\n       479, 526, 560, 595, 638, 689, 722, 753, 800, 838, 878, 918, 960])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 0, 0, 0, 0, 0, ... ,\n       0, 1, 0, 1, 0, 0, 0, 0, 0, 0])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10, 10,  9, 10,\n       10, 10,  9, 10,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10, 10,  9, 10,\n       10, 10,  9, 10,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni     9\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np     9\nq    10\nr    10\ns    10\nt     9\nu    10\nv     9\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 224\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      2\n1      8\n2      3\n3      9\n4      1\n      ..\n995    1\n996    3\n997    0\n998    7\n999    2\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   1,   1,   1,   2, ... , 251, 251, 251, 251, 252, 252])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([2, 8, 3, 9, 1, 5, 0, 7, 6, 4])`, type: `ndarray`\n\nval, expected value: `array([2, 8, 3, 9, 1, 3, 8, 5, 3, ... ,\n       0, 7, 5, 7, 5, 1, 3, 0, 7, 2])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([8, 4, 5, 6, 1, 3, 3, 5, 6, ... ,\n       9, 1, 1, 4, 4, 5, 7, 8, 4, 9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([357, 893, 440,  37, 491, ... , 995, 572, 261, 113, 860, 719])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   1,   4,  11,  17, ... ,\n       970, 974, 979, 986, 991, 998])`, shape: `(253,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, ... ,\n       1, 1, 0, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([1, 3, 5, 5, 3, 1, 4, 3, 3, ... , 1, 2, 3, 3, 3, 5, 7, 5, 5, 2])`, shape: `(253,)`, type: `ndarray`\n\nres, expected value: `array([1, 3, 5, 5, 3, 1, 4, 3, 3, ... , 1, 2, 3, 3, 3, 5, 7, 5, 5, 2])`, shape: `(253,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=253)`, shape: `(253,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    5\n     2015-08-27    3\n                  ..\nz    2015-08-28    5\n     2015-08-29    7\n     2015-08-30    5\n     2015-08-31    5\n     2015-09-01    2\nName: julie, Length: 253, dtype: int64`, type: `Series`\n\n### Expected case 225\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      2.0\n1      8.0\n2      3.0\n3      9.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([2., 8., 3., 9., 1., 0., 7., 4., 5., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 2.,  8.,  3.,  9.,  1., ... ,  5., nan, nan, nan,  7.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7,  7,  7,  7,  7,  7,  8,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 668, 687, 719, 838, 572, 113])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  99, 133, 170, 205, 241, 275, 313, 344, 369, 401, 441, 476,\n       515, 560, 590, 619, 659, 707, 738, 766, 812, 849, 887, 923, 962])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 0, 0, 0, 0, 0, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10,  9, 10, 10,  9,  8, 10, 10, 10, 10, 10, 10,  9,\n       10, 10, 10,  9, 10,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10,  9, 10, 10,  9,  8, 10, 10, 10, 10, 10, 10,  9, 10,\n       10, 10,  9, 10,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne     9\nf    10\ng    10\nh     9\ni     8\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np     9\nq    10\nr    10\ns    10\nt     9\nu    10\nv     9\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 226\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      2.0\n1      8.0\n2      3.0\n3      9.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 247, 247, 247, 247, 248, 248])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([2., 8., 3., 9., 1., 0., 7., 4., 5., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 2.,  8.,  3.,  9.,  1., ... ,  5., nan, nan, nan,  7.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7, -1, -1,  6,  8,  9,  4,  7])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 995, 261, 572, 113, 860, 719])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  85,  88,  95, 101, ... , 978, 982, 988,\n       993, 998])`, shape: `(249,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10,  1,  3,  5,  5,  3,  0, ... ,  2,  1,  3,  4,  6,  4,  3,  2])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([1, 3, 5, 5, 3, 0, 3, 3, 3, ... , 2,\n       1, 3, 4, 6, 4, 3, 2])`, shape: `(249,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=249)`, shape: `(249,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    5\n     2015-08-27    3\n                  ..\nz    2015-08-28    4\n     2015-08-29    6\n     2015-08-30    4\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 249, dtype: int64`, type: `Series`\n\n### Expected case 227\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      2.0\n1      8.0\n2      3.0\n3      9.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([2., 8., 3., 9., 1., 0., 7., 4., 5., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 2.,  8.,  3.,  9.,  1., ... ,  5., nan, nan, nan,  7.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7,  7,  7,  7,  7,  7,  8,  9])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 668, 687, 719, 838, 572, 113])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  99, 133, 170, 205, 241, 275, 313, 344, 369, 401, 441, 476,\n       515, 560, 590, 619, 659, 707, 738, 766, 812, 849, 887, 923, 962])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 0, 1, 0, 0, 0, 0, 0, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10,  9, 10, 10,  9,  8, 10, 10, 10, 10, 10, 10,  9,\n       10, 10, 10,  9, 10,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10,  9, 10, 10,  9,  8, 10, 10, 10, 10, 10, 10,  9, 10,\n       10, 10,  9, 10,  9, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne     9\nf    10\ng    10\nh     9\ni     8\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np     9\nq    10\nr    10\ns    10\nt     9\nu    10\nv     9\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 228\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      2.0\n1      8.0\n2      3.0\n3      9.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    2.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 247, 247, 247, 247, 248, 248])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([2., 8., 3., 9., 1., 0., 7., 4., 5., 6.])`, type: `ndarray`\n\nval, expected value: `array([ 2.,  8.,  3.,  9.,  1., ... ,  5., nan, nan, nan,  7.,  2.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... ,  7, -1, -1,  6,  8,  9,  4,  7])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 995, 261, 572, 113, 860, 719])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  85,  88,  95, 101, ... , 978, 982, 988,\n       993, 998])`, shape: `(249,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([10,  1,  3,  5,  5,  3,  0, ... ,  2,  1,  3,  4,  6,  4,  3,  2])`, shape: `(250,)`, type: `ndarray`\n\nres, expected value: `array([1, 3, 5, 5, 3, 0, 3, 3, 3, ... , 2,\n       1, 3, 4, 6, 4, 3, 2])`, shape: `(249,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=249)`, shape: `(249,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    5\n     2015-08-27    3\n                  ..\nz    2015-08-28    4\n     2015-08-29    6\n     2015-08-30    4\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 249, dtype: int64`, type: `Series`\n\n### Expected case 229\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9\n1       3\n2       9\n3       8\n4       6\n       ..\n9995    2\n9996    3\n9997    2\n9998    0\n9999    3\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([9, 3, 8, 6, 1, 5, 4, 0, 2, 7])`, type: `ndarray`\n\nval, expected value: `array([9, 3, 9, ..., 2, 0, 3])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([ 728,  783, 1053, ..., 8796, 9245, 9276])`, type: `ndarray`\n\nidx, expected value: `array([   0,  372,  775, 1151, 1539, 1919, 2274, 2667, 3045, 3420, 3810,\n       4208, 4591, 4964, 5339, 5704, 6107, 6494, 6898, 7271, 7637, 8021,\n       8430, 8834, 9204, 9620])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 230\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9\n1       3\n2       9\n3       8\n4       6\n       ..\n9995    2\n9996    3\n9997    2\n9998    0\n9999    3\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([9, 3, 8, 6, 1, 5, 4, 0, 2, 7])`, type: `ndarray`\n\nval, expected value: `array([9, 3, 9, ..., 2, 0, 3])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([7375, 8576, 9280, ..., 7941, 7973, 8796])`, type: `ndarray`\n\nidx, expected value: `array([   0,   34,   79,  115,  155, ... , 9808, 9842, 9884, 9928, 9964])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10,  9,  9, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10,  9,  9, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27     9\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 231\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9.0\n1       3.0\n2       9.0\n3       8.0\n4       6.0\n       ... \n9995    2.0\n9996    3.0\n9997    2.0\n9998    0.0\n9999    3.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([9., 3., 8., 6., 1., 0., 2., 5., 4., 7.])`, type: `ndarray`\n\nval, expected value: `array([9., 3., 9., ..., 2., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 8796, 9245, 9276])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  939, 1316, 1672, 2044, 2400, 2736, 3113, 3473, 3823, 4190,\n       4558, 4920, 5268, 5623, 5966, 6344, 6708, 7089, 7431, 7775, 8143,\n       8527, 8903, 9251, 9641])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 232\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9.0\n1       3.0\n2       9.0\n3       8.0\n4       6.0\n       ... \n9995    2.0\n9996    3.0\n9997    2.0\n9998    0.0\n9999    3.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([9., 3., 8., 6., 1., 0., 2., 5., 4., 7.])`, type: `ndarray`\n\nval, expected value: `array([9., 3., 9., ..., 2., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7941, 7973, 8796])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  874,  914,  948,  986, ... , 9824, 9856, 9896, 9937, 9970])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10,  9,  9, ... ,\n       10, 10,  9, 10, 10,  9])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10,  9,  9,  9, ... , 10,\n       10,  9, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27     9\n                   ..\nz    2015-08-28    10\n     2015-08-29     9\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 233\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9.0\n1       3.0\n2       9.0\n3       8.0\n4       6.0\n       ... \n9995    2.0\n9996    3.0\n9997    2.0\n9998    0.0\n9999    3.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([9., 3., 8., 6., 1., 0., 2., 5., 4., 7.])`, type: `ndarray`\n\nval, expected value: `array([9., 3., 9., ..., 2., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 8796, 9245, 9276])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  939, 1316, 1672, 2044, 2400, 2736, 3113, 3473, 3823, 4190,\n       4558, 4920, 5268, 5623, 5966, 6344, 6708, 7089, 7431, 7775, 8143,\n       8527, 8903, 9251, 9641])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 234\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       9.0\n1       3.0\n2       9.0\n3       8.0\n4       6.0\n       ... \n9995    2.0\n9996    3.0\n9997    2.0\n9998    0.0\n9999    3.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([9., 3., 8., 6., 1., 0., 2., 5., 4., 7.])`, type: `ndarray`\n\nval, expected value: `array([9., 3., 9., ..., 2., 0., 3.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7941, 7973, 8796])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  874,  914,  948,  986, ... , 9824, 9856, 9896, 9937, 9970])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10,  9,  9, ... ,\n       10, 10,  9, 10, 10,  9])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10,  9,  9,  9, ... , 10,\n       10,  9, 10, 10,  9])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27     9\n                   ..\nz    2015-08-28    10\n     2015-08-29     9\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01     9\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 235\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        2\n1        4\n2        2\n3        8\n4        6\n        ..\n99995    2\n99996    0\n99997    8\n99998    5\n99999    7\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([2, 4, 8, 6, 9, 3, 7, 5, 0, 1])`, type: `ndarray`\n\nval, expected value: `array([2, 4, 2, ..., 8, 5, 7])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([   72,   526,  1337, ..., 98888, 99054, 99628])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3988,  7884, 11734, 15581, 19565, 23436, 27326, 31217,\n       35085, 38911, 42789, 46544, 50295, 54117, 57908, 61695, 65558,\n       69250, 73124, 76969, 80867, 84670, 88480, 92212, 96133])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 236\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        2\n1        4\n2        2\n3        8\n4        6\n        ..\n99995    2\n99996    0\n99997    8\n99998    5\n99999    7\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([2, 4, 8, 6, 9, 3, 7, 5, 0, 1])`, type: `ndarray`\n\nval, expected value: `array([2, 4, 2, ..., 8, 5, 7])`, type: `ndarray`\n\ncodes, expected value: `array([0, 0, 0, ..., 9, 9, 9])`, type: `ndarray`\n\nsorter, expected value: `array([ 1337,  2344,  6857, ..., 95866, 96797, 98134])`, type: `ndarray`\n\nidx, expected value: `array([    0,   401,   777,  1186, ... , 98106, 98453, 98842, 99240, 99607])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 237\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        2.0\n1        4.0\n2        2.0\n3        8.0\n4        6.0\n        ... \n99995    2.0\n99996    0.0\n99997    8.0\n99998    5.0\n99999    7.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([2., 4., 8., 6., 9., 5., 7., 0., 1., 3.])`, type: `ndarray`\n\nval, expected value: `array([2., 4., 2., ..., 8., 5., 7.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99267, 99582, 99938])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9644, 13325, 16950, 20575, 24327, 27967, 31643, 35296,\n       38944, 42544, 46188, 49738, 53271, 56862, 60409, 63964, 67603,\n       71058, 74697, 78318, 82013, 85586, 89155, 92671, 96354])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 238\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        2.0\n1        4.0\n2        2.0\n3        8.0\n4        6.0\n        ... \n99995    2.0\n99996    0.0\n99997    8.0\n99998    5.0\n99999    7.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([2., 4., 8., 6., 9., 5., 7., 0., 1., 3.])`, type: `ndarray`\n\nval, expected value: `array([2., 4., 2., ..., 8., 5., 7.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 97964, 99582, 99938])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8800,  9152,  9524, ... , 98277, 98596, 98946, 99308, 99642])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n       10, 10, 10, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 239\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        2.0\n1        4.0\n2        2.0\n3        8.0\n4        6.0\n        ... \n99995    2.0\n99996    0.0\n99997    8.0\n99998    5.0\n99999    7.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([2., 4., 8., 6., 9., 5., 7., 0., 1., 3.])`, type: `ndarray`\n\nval, expected value: `array([2., 4., 2., ..., 8., 5., 7.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 99267, 99582, 99938])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9644, 13325, 16950, 20575, 24327, 27967, 31643, 35296,\n       38944, 42544, 46188, 49738, 53271, 56862, 60409, 63964, 67603,\n       71058, 74697, 78318, 82013, 85586, 89155, 92671, 96354])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 240\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        2.0\n1        4.0\n2        2.0\n3        8.0\n4        6.0\n        ... \n99995    2.0\n99996    0.0\n99997    8.0\n99998    5.0\n99999    7.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([2., 4., 8., 6., 9., 5., 7., 0., 1., 3.])`, type: `ndarray`\n\nval, expected value: `array([2., 4., 2., ..., 8., 5., 7.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ...,  9,  9,  9])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 97964, 99582, 99938])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8800,  9152,  9524, ... , 98277, 98596, 98946, 99308, 99642])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... ,\n       10, 10, 10, 10, 10, 10])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([10, 10, 10, 10, 10, 10, 10, ... , 10,\n       10, 10, 10, 10, 10])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 241\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     51\n1     69\n2     32\n3     98\n4     65\n      ..\n95    17\n96    82\n97    64\n98    23\n99     9\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,\n        4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,\n        7,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10,\n       10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 15, 16, 16, 16, 16, 16,\n       17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20, 21,\n       21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([51, 69, 32, 98, 65, 90, 27, 37,  4, 36, 43, 71, 70, 64, 77, 15, 54,\n       48, 52, 82, 56, 17, 49, 16, 78, 67,  2, 88, 85, 92, 55, 42, 73, 80,\n       63,  5, 86, 24, 18, 33, 61, 99, 93, 44, 28, 76, 40, 41, 62, 94, 10,\n       39,  9, 83, 29, 21, 26, 23, 74, 53, 34, 11, 46, 87, 50])`, type: `ndarray`\n\nval, expected value: `array([51, 69, 32, 98, 65, 90, 27, 37,  4, 36, 43, 71, 27, 70, 64, 77, 15,\n       54, 48, 43, 52, 82, 71, 56, 17, 49, 16, 78, 67, 54, 37,  2, 88, 85,\n       98, 92, 55, 42, 71,  2, 73, 73, 80, 63, 85,  5, 16, 51, 86, 42, 24,\n       92, 70, 18, 33, 61, 99, 93, 44, 67, 28, 76, 40, 76, 41, 76, 88, 62,\n       94, 10, 39, 37, 32,  9, 73, 49, 65, 27, 83, 29, 10, 21, 26, 23, 74,\n       53, 37, 34,  5, 11, 46, 98, 33, 87, 50, 17, 82, 64, 23,  9])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  3, 50, 59, 62, 13, 16, 20, 57, 13, 17, 54,  4, 19, 53,  2,  5,\n        6, 11, 27,  2,  3, 18, 33, 35, 51, 58, 63,  8, 10, 21, 32, 11, 26,\n       42,  6, 11, 28, 12, 12, 26, 29, 32, 41, 52, 61,  1, 27, 39, 40, 60,\n       64,  7, 45, 50,  7, 45, 56, 19, 23, 37, 43, 30,  0,  4, 24, 32, 52,\n        7, 15, 16, 34, 35,  9, 31, 39, 10, 25, 46, 21, 22, 29, 31, 47, 14,\n       23, 49,  7, 44, 25, 28, 38, 57,  6, 36, 48, 55,  3, 22, 45])`, type: `ndarray`\n\nsorter, expected value: `array([ 0, 91, 69, 85, 90, 97, 29, 23, 83, 14, 18, 79, 76, 96, 78, 72,  5,\n       12, 38, 66,  2, 34, 20, 42, 88, 70, 84, 93,  8, 19, 24, 41, 22, 31,\n       57, 77, 11, 33, 13, 52, 39, 51, 40, 56, 99, 89,  1, 32, 92, 55, 87,\n       94, 30, 63, 80, 86, 65, 82, 21, 26, 50, 58, 36, 47,  4, 27, 74, 73,\n        7, 16, 17, 43, 45,  9, 49, 54, 10, 28, 62, 95, 75, 35, 37, 64, 15,\n       46, 68, 71, 60, 59, 44, 53, 98,  6, 48, 67, 81,  3, 25, 61])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  5,  9, 12, 15, 20, 28, 32, 35, 38, 46, 52, 55, 58, 61, 62, 63,\n       68, 73, 76, 79, 84, 87, 89, 93, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([5, 4, 3, 3, 5, 8, 4, 3, 3, 7, 6, 3, 3, 3, 1, 1, 5, 5, 3, 3, 5, 3,\n       2, 4, 4, 3])`, type: `ndarray`\n\nres, expected value: `array([5, 4, 3, 3, 5, 8, 4, 3, 3, 7, 6, 3, 3, 3, 1, 1, 5, 5, 3, 3, 5, 3,\n       2, 4, 4, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    5\nb    4\nc    3\nd    3\ne    5\nf    8\ng    4\nh    3\ni    3\nj    7\nk    6\nl    3\nm    3\nn    3\no    1\np    1\nq    5\nr    5\ns    3\nt    3\nu    5\nv    3\nw    2\nx    4\ny    4\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 242\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     51\n1     69\n2     32\n3     98\n4     65\n      ..\n95    17\n96    82\n97    64\n98    23\n99     9\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n       15, 15, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 24, 25, 26,\n       27, 28, 29, 30, 31, 32, 33, 33, 34, 34, 34, 35, 36, 37, 37, 38, 39,\n       40, 41, 42, 43, 44, 45, 45, 46, 47, 48, 49, 50, 51, 51, 52, 52, 53,\n       54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\n       70, 71, 72, 72, 73, 74, 75, 76, 77, 78, 79, 79, 80, 81, 81])`, type: `ndarray`\n\n_, expected value: `array([51, 69, 32, 98, 65, 90, 27, 37,  4, 36, 43, 71, 70, 64, 77, 15, 54,\n       48, 52, 82, 56, 17, 49, 16, 78, 67,  2, 88, 85, 92, 55, 42, 73, 80,\n       63,  5, 86, 24, 18, 33, 61, 99, 93, 44, 28, 76, 40, 41, 62, 94, 10,\n       39,  9, 83, 29, 21, 26, 23, 74, 53, 34, 11, 46, 87, 50])`, type: `ndarray`\n\nval, expected value: `array([51, 69, 32, 98, 65, 90, 27, 37,  4, 36, 43, 71, 27, 70, 64, 77, 15,\n       54, 48, 43, 52, 82, 71, 56, 17, 49, 16, 78, 67, 54, 37,  2, 88, 85,\n       98, 92, 55, 42, 71,  2, 73, 73, 80, 63, 85,  5, 16, 51, 86, 42, 24,\n       92, 70, 18, 33, 61, 99, 93, 44, 67, 28, 76, 40, 76, 41, 76, 88, 62,\n       94, 10, 39, 37, 32,  9, 73, 49, 65, 27, 83, 29, 10, 21, 26, 23, 74,\n       53, 37, 34,  5, 11, 46, 98, 33, 87, 50, 17, 82, 64, 23,  9])`, type: `ndarray`\n\ncodes, expected value: `array([59, 50,  3, 62,  0, 16, 13, 20, 57, 13, 17, 54,  4, 19, 53, 11,  5,\n        2,  6, 27,  2, 35,  3, 58, 33, 51, 18, 63, 21, 10,  8, 32, 42, 26,\n       11, 28, 11,  6, 12, 32, 41, 52, 12, 29, 61, 26, 40, 27, 39, 64,  1,\n       60, 50, 45,  7, 45,  7, 56, 37, 23, 19, 43, 30, 24, 52,  0,  4, 32,\n        7, 16, 35, 34, 15,  9, 39, 31, 25, 10, 46, 22, 47, 21, 29, 31, 14,\n       49, 23,  7, 44, 57, 38, 28, 25, 48, 36,  6, 55,  3, 22, 45])`, type: `ndarray`\n\nsorter, expected value: `array([85, 69, 91, 90,  0, 29, 97, 23, 83, 14, 18, 79, 76, 96, 78, 38,  5,\n       72, 12, 66,  2, 88, 34, 84, 42, 70, 20, 93, 24, 19,  8, 41, 57, 31,\n       22, 33, 11, 77, 13, 40, 56, 99, 52, 51, 89, 39, 55, 32, 92, 94,  1,\n       87, 80, 63, 30, 65, 86, 82, 50, 26, 21, 58, 36, 27, 73, 47,  4, 74,\n        7, 17, 45, 43, 16,  9, 54, 49, 28, 10, 62, 75, 64, 95, 35, 37, 15,\n       68, 46, 71, 60, 98, 53, 44, 59, 67, 48,  6, 81,  3, 25, 61])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  2,  4,  5,  6,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 20,\n       22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n       42, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62,\n       63, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n       83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2])`, type: `ndarray`\n\nres, expected value: `array([1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(82,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    1\n     2015-08-25    1\n     2015-08-26    2\n     2015-08-27    1\nb    2015-08-27    1\n                  ..\ny    2015-08-23    1\n     2015-08-26    1\n     2015-09-01    2\nz    2015-08-24    1\n     2015-08-30    2\nName: julie, Length: 82, dtype: int64`, type: `Series`\n\n### Expected case 243\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     51.0\n1     69.0\n2     32.0\n3     98.0\n4     65.0\n      ... \n95    17.0\n96    82.0\n97    64.0\n98    23.0\n99     9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  3,\n        3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  7,  7,  7,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 10,\n       10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 15, 16, 16, 16, 16,\n       16, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21,\n       21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([51., 69., 32., 98., 65., 90., 27., 43., 71., 70., 64., 77., 15.,\n       54., 48., 52., 82., 56., 17., 49., 37.,  2., 88., 85., 92., 55.,\n       42., 73., 80., 63., 86., 24., 18., 33., 61., 99., 93., 44., 67.,\n       28., 76., 40., 62., 94., 10., 39.,  9., 83., 29., 21., 26., 34.,\n        5., 11., 46., 87., 50., 23.])`, type: `ndarray`\n\nval, expected value: `array([51., 69., 32., 98., 65., ... , 50., 17., 82., 64., 23.,  9.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  9, 14, 20, 24, 44, -1,  0,  3, 54, -1, 10, 13, 17, 10, 48,  4,\n       16, 47, -1,  2,  5,  6,  8, -1,  2,  3, 15, 28, 45, 52, 55, -1,  7,\n       18, 27,  8, 21, 36,  6,  8, 23,  9, 21, 24, 27, 35, 46, 53, 22, 33,\n       34, 51, 56, 20, 40, 44, -1, 50, -1, 16, 31, 37, 25, -1, -1,  4, 27,\n       46, -1, -1, 12, 13, 29, -1, 26, 33, -1,  7, 41, -1, 18, 19, 26, -1,\n       11, 43, 20, 39, 23, 32, 38, 57,  6, 30, 42, 49,  3, 19, 40])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 52, 18, 86, 35, 69, 85,  0, 91, 90, 83, 97, 29, 23, 14, 79, 76,\n       96, 78, 66, 72,  5, 12, 38, 84,  2, 34, 20, 42, 70, 88, 93,  8, 19,\n       24, 41, 22, 31, 57, 77, 11, 33, 13, 39, 51, 40, 56, 99, 89, 32, 92,\n       55, 87, 94, 30, 63, 80, 65, 82, 26, 21, 50, 58, 36, 27, 47,  4, 74,\n       73,  7, 45, 16, 17, 43,  9, 49, 54, 28, 10, 62, 64, 95, 75, 37, 46,\n       15, 68, 71, 60, 44, 53, 59, 98,  6, 48, 67, 81,  3, 25, 61])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 10, 14, 16, 19, 24, 32, 36, 39, 42, 49, 54, 57, 59, 62, 63, 64,\n       69, 74, 77, 80, 84, 87, 89, 93, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 3, 3, 2, 3, 4, 7, 3, 3, 3, 7, 5, 3, 1, 2, 1, 1, 3, 3, 2, 2, 3,\n       2, 2, 4, 4, 3])`, type: `ndarray`\n\nres, expected value: `array([3, 3, 2, 3, 4, 7, 3, 3, 3, 7, 5, 3, 1, 2, 1, 1, 3, 3, 2, 2, 3, 2,\n       2, 4, 4, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    3\nc    2\nd    3\ne    4\nf    7\ng    3\nh    3\ni    3\nj    7\nk    5\nl    3\nm    1\nn    2\no    1\np    1\nq    3\nr    3\ns    2\nt    2\nu    3\nv    2\nw    2\nx    4\ny    4\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 244\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     51.0\n1     69.0\n2     32.0\n3     98.0\n4     65.0\n      ... \n95    17.0\n96    82.0\n97    64.0\n98    23.0\n99     9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  4,  5,\n        6,  7,  8,  9, 10, 11, 12, 13, 13, 13, 14, 14, 15, 16, 17, 18, 19,\n       19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 30, 31, 32,\n       33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47,\n       47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\n       63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 72, 73, 73, 74, 74])`, type: `ndarray`\n\n_, expected value: `array([51., 69., 32., 98., 65., 90., 27., 43., 71., 70., 64., 77., 15.,\n       54., 48., 52., 82., 56., 17., 49., 37.,  2., 88., 85., 92., 55.,\n       42., 73., 80., 63., 86., 24., 18., 33., 61., 99., 93., 44., 67.,\n       28., 76., 40., 62., 94., 10., 39.,  9., 83., 29., 21., 26., 34.,\n        5., 11., 46., 87., 50., 23.])`, type: `ndarray`\n\nval, expected value: `array([51., 69., 32., 98., 65., ... , 50., 17., 82., 64., 23.,  9.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3,  6,  9, 14, 20, 24, 27, 44, -1,  3, 54,  0, 13, 10, 17, -1,\n       10, 48,  4, 16, 47,  8,  5, -1,  2,  6,  2, 52,  3, -1, 28, 45, 15,\n       55, 18,  7, -1, 27, 36, 21,  8, 23,  8,  9, 35, 46, 24, 53, 21, 34,\n       22, 33, 56, 51, 44, 40, 20, -1, 50, 31, -1, 16, 37, 25, -1, 46, -1,\n        4, 27, -1, 13, -1, 29, 12, -1, 33, 26, -1,  7, 41, 19, -1, 18, 26,\n       11, 43, -1, 20, 39, 57, 32, 23, 38, 42, 30,  6, 49, 19, 40])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 77, 52, 18, 86, 35, 40, 69, 85, 91, 90,  0, 29, 97, 23, 83,\n       14, 79, 76, 96, 78, 38,  5, 66, 72, 12,  2, 88, 34, 84, 42, 70, 20,\n       93, 24, 19,  8, 41, 57, 31, 22, 33, 11, 13, 56, 99, 51, 89, 39, 55,\n       32, 92, 94, 87, 80, 63, 30, 65, 82, 50, 26, 21, 58, 36, 27, 73, 47,\n        4, 74,  7, 17, 45, 43, 16,  9, 54, 49, 28, 10, 62, 75, 64, 95, 37,\n       15, 68, 46, 71, 60, 98, 53, 44, 59, 67, 48,  6, 81, 25, 61])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30,\n       31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 72,\n       73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90,\n       91, 92, 93, 94, 95, 96, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,\n       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 0, 2, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       0, 2, 1, 1, 1, 1, 1, 1, 2, 2])`, type: `ndarray`\n\nres, expected value: `array([0, 2, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       2, 1, 1, 1, 1, 1, 1, 2, 2])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(75,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    0\n     2015-08-26    2\n     2015-08-27    1\nb    2015-08-27    1\n     2015-08-28    2\n                  ..\nx    2015-08-29    1\ny    2015-08-23    1\n     2015-08-26    1\n     2015-09-01    2\nz    2015-08-30    2\nName: julie, Length: 75, dtype: int64`, type: `Series`\n\n### Expected case 245\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     51.0\n1     69.0\n2     32.0\n3     98.0\n4     65.0\n      ... \n95    17.0\n96    82.0\n97    64.0\n98    23.0\n99     9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  3,\n        3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  7,  7,  7,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10, 10,\n       10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 15, 16, 16, 16, 16,\n       16, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21,\n       21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([51., 69., 32., 98., 65., 90., 27., 43., 71., 70., 64., 77., 15.,\n       54., 48., 52., 82., 56., 17., 49., 37.,  2., 88., 85., 92., 55.,\n       42., 73., 80., 63., 86., 24., 18., 33., 61., 99., 93., 44., 67.,\n       28., 76., 40., 62., 94., 10., 39.,  9., 83., 29., 21., 26., 34.,\n        5., 11., 46., 87., 50., 23.])`, type: `ndarray`\n\nval, expected value: `array([51., 69., 32., 98., 65., ... , 50., 17., 82., 64., 23.,  9.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  9, 14, 20, 24, 44, -1,  0,  3, 54, -1, 10, 13, 17, 10, 48,  4,\n       16, 47, -1,  2,  5,  6,  8, -1,  2,  3, 15, 28, 45, 52, 55, -1,  7,\n       18, 27,  8, 21, 36,  6,  8, 23,  9, 21, 24, 27, 35, 46, 53, 22, 33,\n       34, 51, 56, 20, 40, 44, -1, 50, -1, 16, 31, 37, 25, -1, -1,  4, 27,\n       46, -1, -1, 12, 13, 29, -1, 26, 33, -1,  7, 41, -1, 18, 19, 26, -1,\n       11, 43, 20, 39, 23, 32, 38, 57,  6, 30, 42, 49,  3, 19, 40])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 52, 18, 86, 35, 69, 85,  0, 91, 90, 83, 97, 29, 23, 14, 79, 76,\n       96, 78, 66, 72,  5, 12, 38, 84,  2, 34, 20, 42, 70, 88, 93,  8, 19,\n       24, 41, 22, 31, 57, 77, 11, 33, 13, 39, 51, 40, 56, 99, 89, 32, 92,\n       55, 87, 94, 30, 63, 80, 65, 82, 26, 21, 50, 58, 36, 27, 47,  4, 74,\n       73,  7, 45, 16, 17, 43,  9, 49, 54, 28, 10, 62, 64, 95, 75, 37, 46,\n       15, 68, 71, 60, 44, 53, 59, 98,  6, 48, 67, 81,  3, 25, 61])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 10, 14, 16, 19, 24, 32, 36, 39, 42, 49, 54, 57, 59, 62, 63, 64,\n       69, 74, 77, 80, 84, 87, 89, 93, 97])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 3, 3, 2, 3, 4, 7, 3, 3, 3, 7, 5, 3, 1, 2, 1, 1, 3, 3, 2, 2, 3,\n       2, 2, 4, 4, 3])`, type: `ndarray`\n\nres, expected value: `array([3, 3, 2, 3, 4, 7, 3, 3, 3, 7, 5, 3, 1, 2, 1, 1, 3, 3, 2, 2, 3, 2,\n       2, 4, 4, 3])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    3\nb    3\nc    2\nd    3\ne    4\nf    7\ng    3\nh    3\ni    3\nj    7\nk    5\nl    3\nm    1\nn    2\no    1\np    1\nq    3\nr    3\ns    2\nt    2\nu    3\nv    2\nw    2\nx    4\ny    4\nz    3\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 246\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     51.0\n1     69.0\n2     32.0\n3     98.0\n4     65.0\n      ... \n95    17.0\n96    82.0\n97    64.0\n98    23.0\n99     9.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  4,  5,\n        6,  7,  8,  9, 10, 11, 12, 13, 13, 13, 14, 14, 15, 16, 17, 18, 19,\n       19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 30, 31, 32,\n       33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47,\n       47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\n       63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 72, 73, 73, 74, 74])`, type: `ndarray`\n\n_, expected value: `array([51., 69., 32., 98., 65., 90., 27., 43., 71., 70., 64., 77., 15.,\n       54., 48., 52., 82., 56., 17., 49., 37.,  2., 88., 85., 92., 55.,\n       42., 73., 80., 63., 86., 24., 18., 33., 61., 99., 93., 44., 67.,\n       28., 76., 40., 62., 94., 10., 39.,  9., 83., 29., 21., 26., 34.,\n        5., 11., 46., 87., 50., 23.])`, type: `ndarray`\n\nval, expected value: `array([51., 69., 32., 98., 65., ... , 50., 17., 82., 64., 23.,  9.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3,  6,  9, 14, 20, 24, 27, 44, -1,  3, 54,  0, 13, 10, 17, -1,\n       10, 48,  4, 16, 47,  8,  5, -1,  2,  6,  2, 52,  3, -1, 28, 45, 15,\n       55, 18,  7, -1, 27, 36, 21,  8, 23,  8,  9, 35, 46, 24, 53, 21, 34,\n       22, 33, 56, 51, 44, 40, 20, -1, 50, 31, -1, 16, 37, 25, -1, 46, -1,\n        4, 27, -1, 13, -1, 29, 12, -1, 33, 26, -1,  7, 41, 19, -1, 18, 26,\n       11, 43, -1, 20, 39, 57, 32, 23, 38, 42, 30,  6, 49, 19, 40])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 77, 52, 18, 86, 35, 40, 69, 85, 91, 90,  0, 29, 97, 23, 83,\n       14, 79, 76, 96, 78, 38,  5, 66, 72, 12,  2, 88, 34, 84, 42, 70, 20,\n       93, 24, 19,  8, 41, 57, 31, 22, 33, 11, 13, 56, 99, 51, 89, 39, 55,\n       32, 92, 94, 87, 80, 63, 30, 65, 82, 50, 26, 21, 58, 36, 27, 73, 47,\n        4, 74,  7, 17, 45, 43, 16,  9, 54, 49, 28, 10, 62, 75, 64, 95, 37,\n       15, 68, 46, 71, 60, 98, 53, 44, 59, 67, 48,  6, 81, 25, 61])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30,\n       31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 72,\n       73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90,\n       91, 92, 93, 94, 95, 96, 98])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,\n       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 0, 2, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       0, 2, 1, 1, 1, 1, 1, 1, 2, 2])`, type: `ndarray`\n\nres, expected value: `array([0, 2, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       2, 1, 1, 1, 1, 1, 1, 2, 2])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-30')],\n           names=['jim', 'joe'])`, shape: `(75,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    0\n     2015-08-26    2\n     2015-08-27    1\nb    2015-08-27    1\n     2015-08-28    2\n                  ..\nx    2015-08-29    1\ny    2015-08-23    1\n     2015-08-26    1\n     2015-09-01    2\nz    2015-08-30    2\nName: julie, Length: 75, dtype: int64`, type: `Series`\n\n### Expected case 247\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      41\n1      61\n2      35\n3      70\n4      31\n       ..\n995    37\n996    27\n997    22\n998     0\n999    86\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([41, 61, 35, 70, 31, 11, 43, 22, 20, 12, 58, 66, 57,  5, 47, 56,  0,\n        1, 51, 37, 96, 82, 71, 99,  8, 39, 62, 29, 15, 95, 64, 23, 54, 60,\n       93, 59, 52, 88, 87,  2, 89, 49, 74, 46, 28, 18, 97, 78, 81, 45, 77,\n        3, 63, 72, 48, 75, 83, 68, 33, 34, 38, 69, 76, 67, 24, 86, 85, 30,\n       65, 50, 36, 40, 44, 42, 14, 92,  4, 17,  6, 98, 80, 13,  7, 26, 53,\n       27, 90, 10, 32, 19, 73, 84, 91, 94, 16, 79, 25, 21, 55,  9])`, type: `ndarray`\n\nval, expected value: `array([41, 61, 35, 70, 31, 11, 31, ... , 34, 97, 86, 37, 27, 22,  0, 86])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ 3, 12, 16, 18, 23, 23, 32, ... , 74, 75, 79, 87, 87, 94, 97, 99])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([ 17,  40, 998, 795, 106, ... , 456, 448, 781, 613, 908, 574])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  31,  81, 117, 144, 186, 221, 260, 299, 330, 361, 400, 426,\n       481, 519, 557, 599, 630, 663, 707, 749, 783, 840, 886, 921, 968])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 0, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([26, 43, 32, 25, 38, 29, 31, 33, 25, 27, 34, 20, 40, 34, 31, 34, 27,\n       28, 39, 30, 28, 44, 42, 30, 38, 27])`, type: `ndarray`\n\nres, expected value: `array([26, 43, 32, 25, 38, 29, 31, 33, 25, 27, 34, 20, 40, 34, 31, 34, 27,\n       28, 39, 30, 28, 44, 42, 30, 38, 27])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    26\nb    43\nc    32\nd    25\ne    38\nf    29\ng    31\nh    33\ni    25\nj    27\nk    34\nl    20\nm    40\nn    34\no    31\np    34\nq    27\nr    28\ns    39\nt    30\nu    28\nv    44\nw    42\nx    30\ny    38\nz    27\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 248\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      41\n1      61\n2      35\n3      70\n4      31\n       ..\n995    37\n996    27\n997    22\n998     0\n999    86\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 252, 253, 253, 253, 253, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([41, 61, 35, 70, 31, 11, 43, 22, 20, 12, 58, 66, 57,  5, 47, 56,  0,\n        1, 51, 37, 96, 82, 71, 99,  8, 39, 62, 29, 15, 95, 64, 23, 54, 60,\n       93, 59, 52, 88, 87,  2, 89, 49, 74, 46, 28, 18, 97, 78, 81, 45, 77,\n        3, 63, 72, 48, 75, 83, 68, 33, 34, 38, 69, 76, 67, 24, 86, 85, 30,\n       65, 50, 36, 40, 44, 42, 14, 92,  4, 17,  6, 98, 80, 13,  7, 26, 53,\n       27, 90, 10, 32, 19, 73, 84, 91, 94, 16, 79, 25, 21, 55,  9])`, type: `ndarray`\n\nval, expected value: `array([41, 61, 35, 70, 31, 11, 31, ... , 34, 97, 86, 37, 27, 22,  0, 86])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([32, 35, 53, 67, 71, 40, 82, ... , 46, 79, 94,  9, 15, 46, 54, 87])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([151, 135, 631, 464, 189, ... , 613,  10, 540, 957, 982, 448])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   5,   9,  11,  12, ... , 980, 983, 985, 990, 995, 999])`, shape: `(255,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 0, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([ 5,  3,  2,  1,  4,  5,  5, ... ,  5,  1,  3,  2,  5,  5,  4,  1])`, shape: `(255,)`, type: `ndarray`\n\nres, expected value: `array([ 5,  3,  2,  1,  4,  5,  5, ... ,  5,  1,  3,  2,  5,  5,  4,  1])`, shape: `(255,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    5\n     2015-08-24    3\n     2015-08-25    2\n     2015-08-27    1\n     2015-08-28    4\n                  ..\nz    2015-08-28    2\n     2015-08-29    5\n     2015-08-30    5\n     2015-08-31    4\n     2015-09-01    1\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n### Expected case 249\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      41.0\n1      61.0\n2      35.0\n3      70.0\n4      31.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     0.0\n999    86.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([41., 61., 35., 70., 31., ... , 21., 50., 55.,  9., 73., 78.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([41., 61., 35., 70., 31., ... , 86., nan, nan, nan,  0., 86.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 70, 76, 76, 85, 85, 93, 94, 97])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 975, 448, 781, 456, 908, 574])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  89, 136, 167, 193, 234, 267, 305, 338, 365, 395, 432, 457,\n       509, 545, 581, 618, 647, 677, 718, 759, 790, 846, 891, 923, 969])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([38, 23, 35, 26, 20, 30, 24, 29, 23, 19, 25, 29, 16, 35, 26, 23, 24,\n       23, 24, 29, 27, 25, 36, 35, 26, 34, 24])`, type: `ndarray`\n\nres, expected value: `array([23, 35, 26, 20, 30, 24, 29, 23, 19, 25, 29, 16, 35, 26, 23, 24, 23,\n       24, 29, 27, 25, 36, 35, 26, 34, 24])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    23\nb    35\nc    26\nd    20\ne    30\nf    24\ng    29\nh    23\ni    19\nj    25\nk    29\nl    16\nm    35\nn    26\no    23\np    24\nq    23\nr    24\ns    29\nt    27\nu    25\nv    36\nw    35\nx    26\ny    34\nz    24\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 250\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      41.0\n1      61.0\n2      35.0\n3      70.0\n4      31.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     0.0\n999    86.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 252, 252, 252, 252, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([41., 61., 35., 70., 31., ... , 21., 50., 55.,  9., 73., 78.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([41., 61., 35., 70., 31., ... , 86., nan, nan, nan,  0., 86.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 67, 76, 93, -1, -1,  6, 48, 85])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 456, 540, 957,  10, 982, 448])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  88,  92,  94,  95, ... , 981, 984, 986, 991, 995, 999])`, shape: `(254,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 0, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... ,  True, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([52,  3,  2,  2,  1,  3,  4, ... ,  5,  1,  2,  2,  5,  4,  2,  1])`, shape: `(255,)`, type: `ndarray`\n\nres, expected value: `array([ 3,  2,  2,  1,  3,  4,  4, ... ,  5,  1,  2,  2,  5,  4,  2,  1])`, shape: `(254,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    2\n     2015-08-27    1\n     2015-08-28    3\n                  ..\nz    2015-08-28    2\n     2015-08-29    5\n     2015-08-30    4\n     2015-08-31    2\n     2015-09-01    1\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n### Expected case 251\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      41.0\n1      61.0\n2      35.0\n3      70.0\n4      31.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     0.0\n999    86.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([41., 61., 35., 70., 31., ... , 21., 50., 55.,  9., 73., 78.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([41., 61., 35., 70., 31., ... , 86., nan, nan, nan,  0., 86.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 70, 76, 76, 85, 85, 93, 94, 97])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 975, 448, 781, 456, 908, 574])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59,  89, 136, 167, 193, 234, 267, 305, 338, 365, 395, 432, 457,\n       509, 545, 581, 618, 647, 677, 718, 759, 790, 846, 891, 923, 969])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([38, 23, 35, 26, 20, 30, 24, 29, 23, 19, 25, 29, 16, 35, 26, 23, 24,\n       23, 24, 29, 27, 25, 36, 35, 26, 34, 24])`, type: `ndarray`\n\nres, expected value: `array([23, 35, 26, 20, 30, 24, 29, 23, 19, 25, 29, 16, 35, 26, 23, 24, 23,\n       24, 29, 27, 25, 36, 35, 26, 34, 24])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    23\nb    35\nc    26\nd    20\ne    30\nf    24\ng    29\nh    23\ni    19\nj    25\nk    29\nl    16\nm    35\nn    26\no    23\np    24\nq    23\nr    24\ns    29\nt    27\nu    25\nv    36\nw    35\nx    26\ny    34\nz    24\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 252\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      41.0\n1      61.0\n2      35.0\n3      70.0\n4      31.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     0.0\n999    86.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 251, 252, 252, 252, 252, 253])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([41., 61., 35., 70., 31., ... , 21., 50., 55.,  9., 73., 78.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([41., 61., 35., 70., 31., ... , 86., nan, nan, nan,  0., 86.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 67, 76, 93, -1, -1,  6, 48, 85])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 456, 540, 957,  10, 982, 448])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  88,  92,  94,  95, ... , 981, 984, 986, 991, 995, 999])`, shape: `(254,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 0, 0, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... ,  True, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([52,  3,  2,  2,  1,  3,  4, ... ,  5,  1,  2,  2,  5,  4,  2,  1])`, shape: `(255,)`, type: `ndarray`\n\nres, expected value: `array([ 3,  2,  2,  1,  3,  4,  4, ... ,  5,  1,  2,  2,  5,  4,  2,  1])`, shape: `(254,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=254)`, shape: `(254,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    2\n     2015-08-27    1\n     2015-08-28    3\n                  ..\nz    2015-08-28    2\n     2015-08-29    5\n     2015-08-30    4\n     2015-08-31    2\n     2015-09-01    1\nName: julie, Length: 254, dtype: int64`, type: `Series`\n\n### Expected case 253\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       49\n1       76\n2       34\n3       35\n4       10\n        ..\n9995    56\n9996    92\n9997    70\n9998    44\n9999    99\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([49, 76, 34, 35, 10, 40, 92, 13,  1, 96, 98,  7, 58, 29, 56, 22,  3,\n       42, 21,  5, 75,  4, 59, 53, 54,  8,  6, 84, 17, 77, 52, 88, 94, 20,\n       80, 89, 83, 24, 31, 87, 37, 64, 32, 14, 51, 91, 85, 15, 74, 45, 28,\n       19, 86, 90, 39,  2, 82, 26,  9, 30, 18, 50, 71, 62, 97,  0, 66, 57,\n       41, 63, 68, 81, 48, 60, 78, 27, 61, 79, 25, 47, 72, 36, 93, 23, 38,\n       12, 65, 95, 99, 44, 69, 46, 16, 33, 67, 73, 70, 55, 11, 43])`, type: `ndarray`\n\nval, expected value: `array([49, 76, 34, ..., 70, 44, 99])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([1360, 6689, 7518, ...,  766, 5065, 7591])`, type: `ndarray`\n\nidx, expected value: `array([   0,  361,  751, 1181, 1548, 1937, 2314, 2671, 3034, 3428, 3812,\n       4188, 4610, 5006, 5391, 5772, 6166, 6569, 6965, 7325, 7699, 8089,\n       8480, 8892, 9278, 9625])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 96,  99, 100,  99,  99,  97, 100,  97,  98, 100, 100,  98,  99,\n        99, 100,  98, 100, 100,  96,  96,  98,  98,  98,  99,  99,  99])`, type: `ndarray`\n\nres, expected value: `array([ 96,  99, 100,  99,  99,  97, 100,  97,  98, 100, 100,  98,  99,\n        99, 100,  98, 100, 100,  96,  96,  98,  98,  98,  99,  99,  99])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     96\nb     99\nc    100\nd     99\ne     99\nf     97\ng    100\nh     97\ni     98\nj    100\nk    100\nl     98\nm     99\nn     99\no    100\np     98\nq    100\nr    100\ns     96\nt     96\nu     98\nv     98\nw     98\nx     99\ny     99\nz     99\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 254\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       49\n1       76\n2       34\n3       35\n4       10\n        ..\n9995    56\n9996    92\n9997    70\n9998    44\n9999    99\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([49, 76, 34, 35, 10, 40, 92, 13,  1, 96, 98,  7, 58, 29, 56, 22,  3,\n       42, 21,  5, 75,  4, 59, 53, 54,  8,  6, 84, 17, 77, 52, 88, 94, 20,\n       80, 89, 83, 24, 31, 87, 37, 64, 32, 14, 51, 91, 85, 15, 74, 45, 28,\n       19, 86, 90, 39,  2, 82, 26,  9, 30, 18, 50, 71, 62, 97,  0, 66, 57,\n       41, 63, 68, 81, 48, 60, 78, 27, 61, 79, 25, 47, 72, 36, 93, 23, 38,\n       12, 65, 95, 99, 44, 69, 46, 16, 33, 67, 73, 70, 55, 11, 43])`, type: `ndarray`\n\nval, expected value: `array([49, 76, 34, ..., 70, 44, 99])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  5,  7, ..., 91, 91, 98])`, type: `ndarray`\n\nsorter, expected value: `array([1360, 6927, 1324, ..., 1110, 3718, 1833])`, type: `ndarray`\n\nidx, expected value: `array([   0,   36,   80,  119,  151, ... , 9786, 9825, 9862, 9910, 9947])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([31, 35, 33, 26, 41, 28, 27, ... , 36,\n       34, 31, 42, 31, 37])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([31, 35, 33, 26, 41, 28, 27, ... , 36,\n       34, 31, 42, 31, 37])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    31\n     2015-08-24    35\n     2015-08-25    33\n     2015-08-26    26\n     2015-08-27    41\n                   ..\nz    2015-08-28    34\n     2015-08-29    31\n     2015-08-30    42\n     2015-08-31    31\n     2015-09-01    37\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 255\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       49.0\n1       76.0\n2       34.0\n3       35.0\n4       10.0\n        ... \n9995    56.0\n9996    92.0\n9997    70.0\n9998    44.0\n9999    99.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([49., 76., 34., 35., 10., ... , 65., 44., 70., 55., 11., 43.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([49., 76., 34., ..., 70., 44., 99.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ...,  645, 5065, 7591])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  935, 1304, 1709, 2063, 2419, 2775, 3113, 3451, 3823, 4178,\n       4537, 4941, 5309, 5670, 6029, 6399, 6783, 7152, 7491, 7831, 8200,\n       8566, 8946, 9315, 9645])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([99, 92, 96, 99, 96, 98, 93, 99, 93, 97, 98, 93, 94, 95, 94, 99, 93,\n       97, 97, 93, 96, 96, 94, 96, 98, 96, 98])`, type: `ndarray`\n\nres, expected value: `array([92, 96, 99, 96, 98, 93, 99, 93, 97, 98, 93, 94, 95, 94, 99, 93, 97,\n       97, 93, 96, 96, 94, 96, 98, 96, 98])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    92\nb    96\nc    99\nd    96\ne    98\nf    93\ng    99\nh    93\ni    97\nj    98\nk    93\nl    94\nm    95\nn    94\no    99\np    93\nq    97\nr    97\ns    93\nt    96\nu    96\nv    94\nw    96\nx    98\ny    96\nz    98\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 256\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       49.0\n1       76.0\n2       34.0\n3       35.0\n4       10.0\n        ... \n9995    56.0\n9996    92.0\n9997    70.0\n9998    44.0\n9999    99.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([49., 76., 34., 35., 10., ... , 65., 44., 70., 55., 11., 43.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([49., 76., 34., ..., 70., 44., 99.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 86, 88, 94])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 3385, 3718, 9022])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  877,  918,  952,  982, ... , 9805, 9838, 9869, 9915, 9949])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  24,  28,  25,  22, ... ,  27,  21,  36,  24,\n        32])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([24, 28, 25, 22, 32, 24, 22, ... , 30,\n       27, 21, 36, 24, 32])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    24\n     2015-08-24    28\n     2015-08-25    25\n     2015-08-26    22\n     2015-08-27    32\n                   ..\nz    2015-08-28    27\n     2015-08-29    21\n     2015-08-30    36\n     2015-08-31    24\n     2015-09-01    32\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 257\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       49.0\n1       76.0\n2       34.0\n3       35.0\n4       10.0\n        ... \n9995    56.0\n9996    92.0\n9997    70.0\n9998    44.0\n9999    99.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([49., 76., 34., 35., 10., ... , 65., 44., 70., 55., 11., 43.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([49., 76., 34., ..., 70., 44., 99.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ...,  645, 5065, 7591])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  935, 1304, 1709, 2063, 2419, 2775, 3113, 3451, 3823, 4178,\n       4537, 4941, 5309, 5670, 6029, 6399, 6783, 7152, 7491, 7831, 8200,\n       8566, 8946, 9315, 9645])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([99, 92, 96, 99, 96, 98, 93, 99, 93, 97, 98, 93, 94, 95, 94, 99, 93,\n       97, 97, 93, 96, 96, 94, 96, 98, 96, 98])`, type: `ndarray`\n\nres, expected value: `array([92, 96, 99, 96, 98, 93, 99, 93, 97, 98, 93, 94, 95, 94, 99, 93, 97,\n       97, 93, 96, 96, 94, 96, 98, 96, 98])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    92\nb    96\nc    99\nd    96\ne    98\nf    93\ng    99\nh    93\ni    97\nj    98\nk    93\nl    94\nm    95\nn    94\no    99\np    93\nq    97\nr    97\ns    93\nt    96\nu    96\nv    94\nw    96\nx    98\ny    96\nz    98\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 258\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       49.0\n1       76.0\n2       34.0\n3       35.0\n4       10.0\n        ... \n9995    56.0\n9996    92.0\n9997    70.0\n9998    44.0\n9999    99.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([49., 76., 34., 35., 10., ... , 65., 44., 70., 55., 11., 43.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([49., 76., 34., ..., 70., 44., 99.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 86, 88, 94])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 3385, 3718, 9022])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  877,  918,  952,  982, ... , 9805, 9838, 9869, 9915, 9949])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  24,  28,  25,  22, ... ,  27,  21,  36,  24,\n        32])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([24, 28, 25, 22, 32, 24, 22, ... , 30,\n       27, 21, 36, 24, 32])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    24\n     2015-08-24    28\n     2015-08-25    25\n     2015-08-26    22\n     2015-08-27    32\n                   ..\nz    2015-08-28    27\n     2015-08-29    21\n     2015-08-30    36\n     2015-08-31    24\n     2015-09-01    32\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 259\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        35\n1        78\n2         5\n3        74\n4        48\n         ..\n99995    87\n99996     3\n99997    64\n99998    56\n99999    13\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([35, 78,  5, 74, 48, 40,  8, 72, 53, 54, 61, 55, 18, 21, 43, 16, 11,\n       69, 62, 28,  9, 13, 81, 96, 39, 17, 89, 90, 63, 27, 37, 38, 30, 76,\n        3, 33, 31, 67, 58, 10, 14, 45, 32, 71, 22, 95, 94, 52, 97, 82, 64,\n        2, 36, 15, 20, 25, 57, 23, 60, 59, 19, 56, 34,  7, 84, 93, 41, 92,\n       79, 66, 49, 47,  1, 77, 29, 86, 70, 51, 46, 73, 87, 24, 65, 85, 50,\n        4, 12, 80, 26, 68, 83, 44,  0,  6, 88, 75, 42, 98, 91, 99])`, type: `ndarray`\n\nval, expected value: `array([35, 78,  5, ..., 64, 56, 13])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  0, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  216,   226,  2773, ..., 81786, 92442, 94625])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3815,  7666, 11523, 15438, 19249, 23036, 26932, 30780,\n       34652, 38439, 42241, 46057, 49927, 53769, 57696, 61503, 65387,\n       69306, 73160, 76990, 80784, 84660, 88580, 92329, 96114])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 260\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        35\n1        78\n2         5\n3        74\n4        48\n         ..\n99995    87\n99996     3\n99997    64\n99998    56\n99999    13\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([35, 78,  5, 74, 48, 40,  8, 72, 53, 54, 61, 55, 18, 21, 43, 16, 11,\n       69, 62, 28,  9, 13, 81, 96, 39, 17, 89, 90, 63, 27, 37, 38, 30, 76,\n        3, 33, 31, 67, 58, 10, 14, 45, 32, 71, 22, 95, 94, 52, 97, 82, 64,\n        2, 36, 15, 20, 25, 57, 23, 60, 59, 19, 56, 34,  7, 84, 93, 41, 92,\n       79, 66, 49, 47,  1, 77, 29, 86, 70, 51, 46, 73, 87, 24, 65, 85, 50,\n        4, 12, 80, 26, 68, 83, 44,  0,  6, 88, 75, 42, 98, 91, 99])`, type: `ndarray`\n\nval, expected value: `array([35, 78,  5, ..., 64, 56, 13])`, type: `ndarray`\n\ncodes, expected value: `array([ 0,  0,  1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([ 8123, 37001, 22733, ..., 38709, 62112, 81786])`, type: `ndarray`\n\nidx, expected value: `array([    0,   371,   761,  1152, ... , 98043, 98424, 98820, 99224, 99600])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([ 96,  97,  99,  99,  98, ... ,  98,  98,  97,  98,  96,  98])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([ 96,  97,  99,  99,  98, ... ,  98,  98,  97,  98,  96,  98])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    96\n     2015-08-24    97\n     2015-08-25    99\n     2015-08-26    99\n     2015-08-27    98\n                   ..\nz    2015-08-28    98\n     2015-08-29    97\n     2015-08-30    98\n     2015-08-31    96\n     2015-09-01    98\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 261\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        35.0\n1        78.0\n2         5.0\n3        74.0\n4        48.0\n         ... \n99995    87.0\n99996     3.0\n99997    64.0\n99998    56.0\n99999    13.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([35., 78.,  5., 74., 48., ... , 75., 98., 99., 91., 52., 96.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([35., 78.,  5., ..., 64., 56., 13.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 90400, 91609, 93286])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9476, 13080, 16721, 20403, 23995, 27549, 31213, 34859,\n       38496, 42067, 45634, 49224, 52863, 56480, 60182, 63759, 67417,\n       71096, 74750, 78377, 81932, 85571, 89221, 92759, 96319])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 262\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        35.0\n1        78.0\n2         5.0\n3        74.0\n4        48.0\n         ... \n99995    87.0\n99996     3.0\n99997    64.0\n99998    56.0\n99999    13.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([35., 78.,  5., 74., 48., ... , 75., 98., 99., 91., 52., 96.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([35., 78.,  5., ..., 64., 56., 13.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 42237, 46471, 90400])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8763,  9120,  9487, ... , 98212, 98562, 98918, 99288, 99624])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  94,  93,  96,  94, ... ,  96,  95,  98,  94,\n        96])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 94,  93,  96,  94,  94, ... ,  97,  96,  95,  98,  94,  96])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    94\n     2015-08-24    93\n     2015-08-25    96\n     2015-08-26    94\n     2015-08-27    94\n                   ..\nz    2015-08-28    96\n     2015-08-29    95\n     2015-08-30    98\n     2015-08-31    94\n     2015-09-01    96\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 263\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        35.0\n1        78.0\n2         5.0\n3        74.0\n4        48.0\n         ... \n99995    87.0\n99996     3.0\n99997    64.0\n99998    56.0\n99999    13.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([35., 78.,  5., 74., 48., ... , 75., 98., 99., 91., 52., 96.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([35., 78.,  5., ..., 64., 56., 13.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 90400, 91609, 93286])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9476, 13080, 16721, 20403, 23995, 27549, 31213, 34859,\n       38496, 42067, 45634, 49224, 52863, 56480, 60182, 63759, 67417,\n       71096, 74750, 78377, 81932, 85571, 89221, 92759, 96319])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])`, type: `ndarray`\n\nres, expected value: `array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 264\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        35.0\n1        78.0\n2         5.0\n3        74.0\n4        48.0\n         ... \n99995    87.0\n99996     3.0\n99997    64.0\n99998    56.0\n99999    13.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([35., 78.,  5., 74., 48., ... , 75., 98., 99., 91., 52., 96.])`, shape: `(100,)`, type: `ndarray`\n\nval, expected value: `array([35., 78.,  5., ..., 64., 56., 13.])`, type: `ndarray`\n\ncodes, expected value: `array([-1, -1, -1, ..., 99, 99, 99])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 42237, 46471, 90400])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8763,  9120,  9487, ... , 98212, 98562, 98918, 99288, 99624])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([100,  94,  93,  96,  94, ... ,  96,  95,  98,  94,\n        96])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([ 94,  93,  96,  94,  94, ... ,  97,  96,  95,  98,  94,  96])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    94\n     2015-08-24    93\n     2015-08-25    96\n     2015-08-26    94\n     2015-08-27    94\n                   ..\nz    2015-08-28    96\n     2015-08-29    95\n     2015-08-30    98\n     2015-08-31    94\n     2015-09-01    96\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 265\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     536\n1     512\n2      11\n3     108\n4     711\n     ... \n95    735\n96    778\n97    278\n98    360\n99    928\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  4,  4,  4,\n        4,  4,  4,  5,  5,  5,  6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  8,\n        8,  9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13,\n       13, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17,\n       18, 18, 18, 18, 18, 19, 19, 20, 20, 21, 22, 22, 22, 22, 23, 23, 23,\n       23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([536, 512,  11, 108, 711, ... ,\n       967, 391, 778, 278, 360, 928])`, shape: `(97,)`, type: `ndarray`\n\nval, expected value: `array([536, 512,  11, 108, 711, ... , 391, 735, 778, 278, 360, 928])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 6, 24, 66, 89,  7, 15, 34, 48, 56, 18, 28, 59, 81, 55,  1, 52, 72,\n       83, 84, 93, 11, 53, 58,  5, 91, 25, 41, 57, 60, 87, 42, 45, 64, 70,\n       75, 76, 22, 29, 62,  8, 44, 77, 94, 14, 17, 26, 90,  9, 19, 27, 32,\n       36, 39, 43, 50, 63, 74, 80, 37, 68, 20, 46, 73, 12, 31, 69, 85, 96,\n        4, 16, 21, 79, 88,  7, 35, 40, 54, 71,  3, 22, 30, 65,  0,  2, 23,\n       61, 67, 86, 47, 49, 51, 78, 95, 10, 10, 13, 33, 38, 82, 92])`, type: `ndarray`\n\nsorter, expected value: `array([ 6, 25, 67, 91, 95, 15, 35, 49, 57, 19, 29, 60, 83, 56,  1, 53, 73,\n       85, 86, 96, 11, 54, 59,  5, 93, 26, 42, 58, 61, 89, 43, 46, 65, 71,\n       76, 77, 23, 30, 63,  8, 45, 78, 97, 14, 17, 27, 92,  9, 20, 28, 33,\n       37, 40, 44, 51, 64, 75, 81, 38, 69, 21, 47, 74, 12, 32, 70, 87, 99,\n        4, 16, 22, 80, 90,  7, 36, 41, 55, 72,  3, 82, 31, 66,  0,  2, 24,\n       62, 68, 88, 48, 50, 52, 79, 98, 10, 18, 13, 34, 39, 84, 94])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  4,  9, 13, 14, 20, 23, 25, 30, 35, 36, 39, 43, 47, 58, 60, 63,\n       66, 68, 73, 75, 77, 78, 82, 88, 93])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([ 4,  5,  4,  1,  6,  3,  2,  5,  5,  1,  3,  4,  4, 11,  2,  3,  3,\n        2,  5,  2,  2,  1,  4,  6,  5,  6])`, type: `ndarray`\n\nres, expected value: `array([ 4,  5,  4,  1,  6,  3,  2,  5,  5,  1,  3,  4,  4, 11,  2,  3,  3,\n        2,  5,  2,  2,  1,  4,  6,  5,  6])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na     4\nb     5\nc     4\nd     1\ne     6\nf     3\ng     2\nh     5\ni     5\nj     1\nk     3\nl     4\nm     4\nn    11\no     2\np     3\nq     3\nr     2\ns     5\nt     2\nu     2\nv     1\nw     4\nx     6\ny     5\nz     6\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 266\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     536\n1     512\n2      11\n3     108\n4     711\n     ... \n95    735\n96    778\n97    278\n98    360\n99    928\nName: julie, Length: 100, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  1,  1,  2,  3,  4,  5,  6,  6,  7,  8,  8,  9, 10, 11, 12, 13,\n       13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 28,\n       29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 37, 38, 39, 40, 41, 41, 42,\n       42, 42, 43, 44, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52, 53, 54, 55,\n       56, 57, 58, 58, 59, 60, 61, 62, 63, 64, 65, 65, 66, 67, 68, 69, 69,\n       70, 71, 72, 73, 74, 75, 75, 75, 76, 77, 77, 78, 79, 80, 81])`, type: `ndarray`\n\n_, expected value: `array([536, 512,  11, 108, 711, ... ,\n       967, 391, 778, 278, 360, 928])`, shape: `(97,)`, type: `ndarray`\n\nval, expected value: `array([536, 512,  11, 108, 711, ... , 391, 735, 778, 278, 360, 928])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 6, 24, 89, 66, 56, 15,  7, 34, 48, 59, 18, 81, 28, 55, 72,  1, 83,\n       84, 52, 93, 58, 11, 53, 91,  5, 41, 25, 87, 60, 57, 75, 42, 45, 70,\n       64, 76, 22, 62, 29,  8, 44, 77, 94, 14, 26, 90, 17, 36, 19, 43, 39,\n       74, 80, 32,  9, 50, 27, 63, 37, 68, 20, 73, 46, 31, 12, 69, 96, 85,\n       79, 88, 16, 21,  4,  7, 35, 54, 40, 71, 30, 65, 22,  3,  2, 61, 86,\n       23,  0, 67, 51, 95, 47, 49, 78, 10, 33, 92, 38, 82, 10, 13])`, type: `ndarray`\n\nsorter, expected value: `array([ 6, 25, 91, 67, 57, 15, 95, 35, 49, 60, 19, 83, 29, 56, 73,  1, 85,\n       86, 53, 96, 59, 11, 54, 93,  5, 42, 26, 89, 61, 58, 76, 43, 46, 71,\n       65, 77, 23, 63, 30,  8, 45, 78, 97, 14, 27, 92, 17, 37, 20, 44, 40,\n       75, 81, 33,  9, 51, 28, 64, 38, 69, 21, 74, 47, 32, 12, 70, 99, 87,\n       80, 90, 16, 22,  4,  7, 36, 55, 41, 72, 31, 66, 82,  3,  2, 62, 88,\n       24,  0, 68, 52, 98, 48, 50, 79, 18, 34, 94, 39, 84, 10, 13])`, type: `ndarray`\n\nidx, expected value: `array([ 0,  1,  3,  4,  5,  6,  7,  9, 10, 12, 13, 14, 15, 16, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38,\n       39, 40, 42, 43, 45, 46, 47, 48, 50, 53, 54, 56, 57, 58, 60, 61, 62,\n       63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81,\n       82, 83, 85, 86, 87, 88, 89, 90, 93, 94, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 3, 1,\n       2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 3, 1,\n       2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(82,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-25    1\n     2015-08-27    2\n     2015-08-28    1\nb    2015-08-25    1\n     2015-08-26    1\n                  ..\nz    2015-08-25    2\n     2015-08-26    1\n     2015-08-28    1\n     2015-08-31    1\n     2015-09-01    1\nName: julie, Length: 82, dtype: int64`, type: `Series`\n\n### Expected case 267\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     536.0\n1     512.0\n2      11.0\n3     108.0\n4     711.0\n      ...  \n95    735.0\n96    778.0\n97    278.0\n98    360.0\n99    928.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,\n        2,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,  7,  7,  7,  7,  7,  8,\n        8,  8,  8,  8,  9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13,\n       13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 15, 15, 15, 16, 16, 16,\n       17, 17, 18, 18, 18, 18, 18, 19, 19, 20, 20, 21, 22, 22, 22, 22, 23,\n       23, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([536., 512.,  11., 108., 711., ... , 735., 778., 278., 360., 928.])`, shape: `(83,)`, type: `ndarray`\n\nval, expected value: `array([536., 512.,  11., 108., 711., ... , 778., 278., 360.,\n       928.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  7, 28, 42, 56, 69,  6, 21, 54, 74, 12, 39, 47, 78, -1, 15, 22,\n       50, 46, -1, 43, 60, 79,  8, 44, 49,  5, 76, -1, 35, 48, 51, 72, -1,\n       -1, 36, 58, 63, 64, 19, 23, 53, -1, -1, 65, 80, -1, 11, 14, 75, -1,\n       -1, -1, 16, 26, 30, 33, 37, 41, 62, 68, 31, -1, 17, 61,  9, 25, 57,\n       70, 82,  4, 13, 18, 67, 73, -1, 29, 34, 45, 59, -1,  3, 19, 24,  0,\n        2, 20, 52, 55, 71, 38, 40, 66, 81, -1,  7, 10, 27, 32, 77])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 69, 86,  6, 25, 67, 91, 15, 49, 57, 95, 83, 19, 29,\n       60, 56, 85, 53, 73, 96, 11, 54, 59,  5, 93, 26, 42, 58, 61, 89, 46,\n       65, 43, 71, 76, 77, 23, 30, 63,  8, 45, 78, 97, 27, 14, 17, 92,  9,\n       28, 64, 20, 33, 37, 40, 44, 51, 75, 81, 38, 47, 21, 74, 12, 32, 70,\n       87, 99,  4, 16, 22, 80, 90,  7, 36, 41, 55, 72, 66,  3, 82, 31,  0,\n        2, 24, 62, 68, 88, 48, 50, 79, 98, 84, 10, 13, 34, 39, 94])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 10, 14, 18, 19, 23, 26, 28, 33, 38, 39, 42, 46, 50, 61, 62, 65,\n       68, 70, 75, 77, 79, 80, 84, 90, 94])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 4, 4, 3, 1, 3, 3, 2, 4, 3, 1, 3, 2, 3, 8, 1, 2, 3, 2, 5, 1, 2,\n       1, 3, 6, 4, 5])`, type: `ndarray`\n\nres, expected value: `array([4, 4, 3, 1, 3, 3, 2, 4, 3, 1, 3, 2, 3, 8, 1, 2, 3, 2, 5, 1, 2, 1,\n       3, 6, 4, 5])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    4\nb    4\nc    3\nd    1\ne    3\nf    3\ng    2\nh    4\ni    3\nj    1\nk    3\nl    2\nm    3\nn    8\no    1\np    2\nq    3\nr    2\ns    5\nt    1\nu    2\nv    1\nw    3\nx    6\ny    4\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 268\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     536.0\n1     512.0\n2      11.0\n3     108.0\n4     711.0\n      ...  \n95    735.0\n96    778.0\n97    278.0\n98    360.0\n99    928.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  6,\n        7,  8,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33, 33, 34, 35, 35, 36,\n       37, 38, 39, 39, 40, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65,\n       66, 66, 67, 68, 69, 70, 71, 71, 71, 72, 72, 73, 74, 75, 76])`, type: `ndarray`\n\n_, expected value: `array([536., 512.,  11., 108., 711., ... , 735., 778., 278., 360., 928.])`, shape: `(83,)`, type: `ndarray`\n\nval, expected value: `array([536., 512.,  11., 108., 711., ... , 778., 278., 360.,\n       928.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3,  7, 28, 33, 42, 56, 64, 69,  6, 21, 74, 54, 47, 12, 78, 39,\n       50, -1, 15, 22, 46, 60, -1, 43, 79, 49,  8, 44, 76,  5, 35, -1, 72,\n       51, 48, 63, 36, -1, 58, -1, 19, 53, 23, -1, -1, 65, 80, -1, 11, 75,\n       14, 30, 16, 37, 62, 68, 26, -1, 41, -1, -1, 31, 17, 61, -1, 25,  9,\n       57, 82, 70, 67, 73, 13, 18,  4, -1, 29, 45, 34, 59, -1, 24, 19,  2,\n       52, 71, 20,  0, 55, 81, 38, 40, 66, 27, 77, 32, -1,  7, 10])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  6, 25, 91, 67, 57, 15, 95, 49,\n       60, 83, 19, 29, 56, 73, 85, 53, 96, 59, 11, 54, 93,  5, 42, 26, 89,\n       61, 58, 76, 43, 46, 71, 65, 23, 63, 30,  8, 45, 78, 97, 27, 14, 92,\n       17, 37, 20, 44, 75, 81, 33,  9, 51, 28, 64, 38, 21, 74, 47, 32, 12,\n       70, 99, 87, 80, 90, 16, 22,  4,  7, 36, 55, 41, 72, 66, 31, 82,  2,\n       62, 88, 24,  0, 68, 98, 48, 50, 79, 34, 94, 39, 84, 10, 13])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45,\n       47, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87,\n       88, 89, 90, 91, 94, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n       0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1,\n       0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 3, 2, 1, 0, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 0,\n       0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 3, 2, 1, 0, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(77,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-25    1\n     2015-08-27    2\n     2015-08-28    1\nb    2015-08-25    1\n     2015-08-26    1\n                  ..\nz    2015-08-25    2\n     2015-08-26    1\n     2015-08-28    0\n     2015-08-31    1\n     2015-09-01    1\nName: julie, Length: 77, dtype: int64`, type: `Series`\n\n### Expected case 269\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     536.0\n1     512.0\n2      11.0\n3     108.0\n4     711.0\n      ...  \n95    735.0\n96    778.0\n97    278.0\n98    360.0\n99    928.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,\n        2,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,  7,  7,  7,  7,  7,  8,\n        8,  8,  8,  8,  9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13,\n       13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 15, 15, 15, 16, 16, 16,\n       17, 17, 18, 18, 18, 18, 18, 19, 19, 20, 20, 21, 22, 22, 22, 22, 23,\n       23, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([536., 512.,  11., 108., 711., ... , 735., 778., 278., 360., 928.])`, shape: `(83,)`, type: `ndarray`\n\nval, expected value: `array([536., 512.,  11., 108., 711., ... , 778., 278., 360.,\n       928.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  7, 28, 42, 56, 69,  6, 21, 54, 74, 12, 39, 47, 78, -1, 15, 22,\n       50, 46, -1, 43, 60, 79,  8, 44, 49,  5, 76, -1, 35, 48, 51, 72, -1,\n       -1, 36, 58, 63, 64, 19, 23, 53, -1, -1, 65, 80, -1, 11, 14, 75, -1,\n       -1, -1, 16, 26, 30, 33, 37, 41, 62, 68, 31, -1, 17, 61,  9, 25, 57,\n       70, 82,  4, 13, 18, 67, 73, -1, 29, 34, 45, 59, -1,  3, 19, 24,  0,\n        2, 20, 52, 55, 71, 38, 40, 66, 81, -1,  7, 10, 27, 32, 77])`, type: `ndarray`\n\nsorter, expected value: `array([ 1, 18, 35, 52, 69, 86,  6, 25, 67, 91, 15, 49, 57, 95, 83, 19, 29,\n       60, 56, 85, 53, 73, 96, 11, 54, 59,  5, 93, 26, 42, 58, 61, 89, 46,\n       65, 43, 71, 76, 77, 23, 30, 63,  8, 45, 78, 97, 27, 14, 17, 92,  9,\n       28, 64, 20, 33, 37, 40, 44, 51, 75, 81, 38, 47, 21, 74, 12, 32, 70,\n       87, 99,  4, 16, 22, 80, 90,  7, 36, 41, 55, 72, 66,  3, 82, 31,  0,\n        2, 24, 62, 68, 88, 48, 50, 79, 98, 84, 10, 13, 34, 39, 94])`, type: `ndarray`\n\nidx, expected value: `array([ 6, 10, 14, 18, 19, 23, 26, 28, 33, 38, 39, 42, 46, 50, 61, 62, 65,\n       68, 70, 75, 77, 79, 80, 84, 90, 94])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([6, 4, 4, 3, 1, 3, 3, 2, 4, 3, 1, 3, 2, 3, 8, 1, 2, 3, 2, 5, 1, 2,\n       1, 3, 6, 4, 5])`, type: `ndarray`\n\nres, expected value: `array([4, 4, 3, 1, 3, 3, 2, 4, 3, 1, 3, 2, 3, 8, 1, 2, 3, 2, 5, 1, 2, 1,\n       3, 6, 4, 5])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    4\nb    4\nc    3\nd    1\ne    3\nf    3\ng    2\nh    4\ni    3\nj    1\nk    3\nl    2\nm    3\nn    8\no    1\np    2\nq    3\nr    2\ns    5\nt    1\nu    2\nv    1\nw    3\nx    6\ny    4\nz    5\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 270\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0     536.0\n1     512.0\n2      11.0\n3     108.0\n4     711.0\n      ...  \n95    735.0\n96    778.0\n97    278.0\n98    360.0\n99    928.0\nName: julie, Length: 100, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  6,\n        7,  8,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33, 33, 34, 35, 35, 36,\n       37, 38, 39, 39, 40, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65,\n       66, 66, 67, 68, 69, 70, 71, 71, 71, 72, 72, 73, 74, 75, 76])`, type: `ndarray`\n\n_, expected value: `array([536., 512.,  11., 108., 711., ... , 735., 778., 278., 360., 928.])`, shape: `(83,)`, type: `ndarray`\n\nval, expected value: `array([536., 512.,  11., 108., 711., ... , 778., 278., 360.,\n       928.])`, shape: `(100,)`, type: `ndarray`\n\ncodes, expected value: `array([ 1,  3,  7, 28, 33, 42, 56, 64, 69,  6, 21, 74, 54, 47, 12, 78, 39,\n       50, -1, 15, 22, 46, 60, -1, 43, 79, 49,  8, 44, 76,  5, 35, -1, 72,\n       51, 48, 63, 36, -1, 58, -1, 19, 53, 23, -1, -1, 65, 80, -1, 11, 75,\n       14, 30, 16, 37, 62, 68, 26, -1, 41, -1, -1, 31, 17, 61, -1, 25,  9,\n       57, 82, 70, 67, 73, 13, 18,  4, -1, 29, 45, 34, 59, -1, 24, 19,  2,\n       52, 71, 20,  0, 55, 81, 38, 40, 66, 27, 77, 32, -1,  7, 10])`, type: `ndarray`\n\nsorter, expected value: `array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  6, 25, 91, 67, 57, 15, 95, 49,\n       60, 83, 19, 29, 56, 73, 85, 53, 96, 59, 11, 54, 93,  5, 42, 26, 89,\n       61, 58, 76, 43, 46, 71, 65, 23, 63, 30,  8, 45, 78, 97, 27, 14, 92,\n       17, 37, 20, 44, 75, 81, 33,  9, 51, 28, 64, 38, 21, 74, 47, 32, 12,\n       70, 99, 87, 80, 90, 16, 22,  4,  7, 36, 55, 41, 72, 66, 31, 82,  2,\n       62, 88, 24,  0, 68, 98, 48, 50, 79, 34, 94, 39, 84, 10, 13])`, type: `ndarray`\n\nidx, expected value: `array([ 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45,\n       47, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87,\n       88, 89, 90, 91, 94, 96, 97, 98, 99])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n       0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False,  True, False,\n       False])`, shape: `(100,)`, type: `ndarray`\n\nout, expected value: `array([9, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1,\n       0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 3, 2, 1, 0, 1, 1])`, type: `ndarray`\n\nres, expected value: `array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 0,\n       0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 3, 2, 1, 0, 1, 1])`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-25') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'])`, shape: `(77,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-25    1\n     2015-08-27    2\n     2015-08-28    1\nb    2015-08-25    1\n     2015-08-26    1\n                  ..\nz    2015-08-25    2\n     2015-08-26    1\n     2015-08-28    0\n     2015-08-31    1\n     2015-09-01    1\nName: julie, Length: 77, dtype: int64`, type: `Series`\n\n### Expected case 271\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      327\n1      268\n2      663\n3      322\n4      367\n      ... \n995    664\n996    763\n997    259\n998    670\n999    877\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0,  0,  0,  0,  0, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([327, 268, 663, 322, 367, ... , 407, 288, 971, 865, 513, 259])`, shape: `(635,)`, type: `ndarray`\n\nval, expected value: `array([327, 268, 663, 322, 367, ... , 513, 664, 763, 259, 670, 877])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([  6,   6,  11,  22,  23, ... , 357, 372, 410, 441, 590, 610])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([145, 544,  44, 668, 155, ... , 426, 454, 887, 567, 891, 941])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,  52,  87, 138, 176, 210, 251, 289, 318, 356, 392, 443, 487,\n       528, 570, 599, 638, 671, 707, 741, 786, 829, 864, 895, 935, 976])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([51, 34, 50, 37, 33, 41, 37, 29, 38, 36, 51, 43, 40, 42, 29, 39, 33,\n       34, 34, 43, 42, 34, 30, 39, 40, 23])`, type: `ndarray`\n\nres, expected value: `array([51, 34, 50, 37, 33, 41, 37, 29, 38, 36, 51, 43, 40, 42, 29, 39, 33,\n       34, 34, 43, 42, 34, 30, 39, 40, 23])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    51\nb    34\nc    50\nd    37\ne    33\nf    41\ng    37\nh    29\ni    38\nj    36\nk    51\nl    43\nm    40\nn    42\no    29\np    39\nq    33\nr    34\ns    34\nt    43\nu    42\nv    34\nw    30\nx    39\ny    40\nz    23\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 272\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      327\n1      268\n2      663\n3      322\n4      367\n      ... \n995    664\n996    763\n997    259\n998    670\n999    877\nName: julie, Length: 1000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0,   0,   0, ... , 252, 253, 253, 253, 254, 254])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([327, 268, 663, 322, 367, ... , 407, 288, 971, 865, 513, 259])`, shape: `(635,)`, type: `ndarray`\n\nval, expected value: `array([327, 268, 663, 322, 367, ... , 513, 664, 763, 259, 670, 877])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([  6,  11, 175, 319, 324, ... , 351,  35,  68, 590, 110, 357])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([145,  44, 714, 369, 391, ... , 420,  36,  70, 891, 704, 426])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([  0,   9,  15,  22,  29, ... , 983, 987, 989, 992, 995, 998])`, shape: `(255,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, 1, 1, 1, 1, 1, 1, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, False, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([9, 6, 7, 7, 6, 7, 2, 5, 1, ... , 7, 2, 3, 2, 4, 2, 3, 3, 3, 2])`, shape: `(255,)`, type: `ndarray`\n\nres, expected value: `array([9, 6, 7, 7, 6, 7, 2, 5, 1, ... , 7, 2, 3, 2, 4, 2, 3, 3, 3, 2])`, shape: `(255,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'], length=255)`, shape: `(255,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    9\n     2015-08-24    6\n     2015-08-25    7\n     2015-08-26    7\n     2015-08-27    6\n                  ..\nz    2015-08-27    2\n     2015-08-28    3\n     2015-08-29    3\n     2015-08-30    3\n     2015-08-31    2\nName: julie, Length: 255, dtype: int64`, type: `Series`\n\n### Expected case 273\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      327.0\n1      268.0\n2      663.0\n3      322.0\n4      367.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    670.0\n999    877.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([327., 268., 663., 322., 367., ... , 227., 288., 971., 865., 513.])`, shape: `(572,)`, type: `ndarray`\n\nval, expected value: `array([327., 268., 663., 322., 367., ... ,  nan,  nan,  nan, 670., 877.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 324, 388, 392, 527, 529, 548])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 454, 567, 572, 887, 891, 941])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59, 108, 142, 192, 229, 260, 297, 332, 359, 396, 428, 475, 515,\n       554, 593, 618, 656, 689, 722, 753, 797, 838, 871, 900, 938, 978])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([50, 40, 28, 39, 30, 25, 31, 28, 22, 32, 25, 45, 35, 31, 31, 19, 31,\n       28, 28, 26, 38, 32, 27, 23, 32, 35, 19])`, type: `ndarray`\n\nres, expected value: `array([40, 28, 39, 30, 25, 31, 28, 22, 32, 25, 45, 35, 31, 31, 19, 31, 28,\n       28, 26, 38, 32, 27, 23, 32, 35, 19])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    40\nb    28\nc    39\nd    30\ne    25\nf    31\ng    28\nh    22\ni    32\nj    25\nk    45\nl    35\nm    31\nn    31\no    19\np    31\nq    28\nr    28\ns    26\nt    38\nu    32\nv    27\nw    23\nx    32\ny    35\nz    19\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 274\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      327.0\n1      268.0\n2      663.0\n3      322.0\n4      367.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    670.0\n999    877.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 249, 249, 249, 250, 250, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([327., 268., 663., 322., 367., ... , 227., 288., 971., 865., 513.])`, shape: `(572,)`, type: `ndarray`\n\nval, expected value: `array([327., 268., 663., 322., 367., ... ,  nan,  nan,  nan, 670., 877.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... ,  -1, 216, 304,  29,  56,  95])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 198, 286, 420,  36,  70, 704])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  93,  98, 104, 111, ... ,\n       989, 991, 994, 997, 999])`, shape: `(252,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([72,  7,  4,  5,  6,  5,  4, ... ,  3,  1,  3,  2,  3,  2,  2,  1])`, shape: `(253,)`, type: `ndarray`\n\nres, expected value: `array([7, 4, 5, 6, 5, 4, 2, 4, 1, ... ,\n       6, 2, 3, 1, 3, 2, 3, 2, 2, 1])`, shape: `(252,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    7\n     2015-08-24    4\n     2015-08-25    5\n     2015-08-26    6\n     2015-08-27    5\n                  ..\nz    2015-08-27    2\n     2015-08-28    3\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    1\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n### Expected case 275\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      327.0\n1      268.0\n2      663.0\n3      322.0\n4      367.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    670.0\n999    877.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, -1, -1, -1, -1, ... , 25, 25, 25, 25, 25, 25, 25, 25])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([327., 268., 663., 322., 367., ... , 227., 288., 971., 865., 513.])`, shape: `(572,)`, type: `ndarray`\n\nval, expected value: `array([327., 268., 663., 322., 367., ... ,  nan,  nan,  nan, 670., 877.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 324, 388, 392, 527, 529, 548])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 579, ... , 454, 567, 572, 887, 891, 941])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 59, 108, 142, 192, 229, 260, 297, 332, 359, 396, 428, 475, 515,\n       554, 593, 618, 656, 689, 722, 753, 797, 838, 871, 900, 938, 978])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([50, 40, 28, 39, 30, 25, 31, 28, 22, 32, 25, 45, 35, 31, 31, 19, 31,\n       28, 28, 26, 38, 32, 27, 23, 32, 35, 19])`, type: `ndarray`\n\nres, expected value: `array([40, 28, 39, 30, 25, 31, 28, 22, 32, 25, 45, 35, 31, 31, 19, 31, 28,\n       28, 26, 38, 32, 27, 23, 32, 35, 19])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    40\nb    28\nc    39\nd    30\ne    25\nf    31\ng    28\nh    22\ni    32\nj    25\nk    45\nl    35\nm    31\nn    31\no    19\np    31\nq    28\nr    28\ns    26\nt    38\nu    32\nv    27\nw    23\nx    32\ny    35\nz    19\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 276\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0      327.0\n1      268.0\n2      663.0\n3      322.0\n4      367.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    670.0\n999    877.0\nName: julie, Length: 1000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... , 249, 249, 249, 250, 250, 251])`, shape: `(1000,)`, type: `ndarray`\n\n_, expected value: `array([327., 268., 663., 322., 367., ... , 227., 288., 971., 865., 513.])`, shape: `(572,)`, type: `ndarray`\n\nval, expected value: `array([327., 268., 663., 322., 367., ... ,  nan,  nan,  nan, 670., 877.])`, shape: `(1000,)`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1,  -1,  -1, ... ,  -1, 216, 304,  29,  56,  95])`, shape: `(1000,)`, type: `ndarray`\n\nsorter, expected value: `array([103, 256, 273, 426, 484, ... , 198, 286, 420,  36,  70, 704])`, shape: `(1000,)`, type: `ndarray`\n\nidx, expected value: `array([ 84,  93,  98, 104, 111, ... ,\n       989, 991, 994, 997, 999])`, shape: `(252,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, 0, 0, 0, 0, 0, 0, ... ,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1])`, shape: `(1000,)`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True,  True, ... , False, False, False,\n       False])`, shape: `(1000,)`, type: `ndarray`\n\nout, expected value: `array([72,  7,  4,  5,  6,  5,  4, ... ,  3,  1,  3,  2,  3,  2,  2,  1])`, shape: `(253,)`, type: `ndarray`\n\nres, expected value: `array([7, 4, 5, 6, 5, 4, 2, 4, 1, ... ,\n       6, 2, 3, 1, 3, 2, 3, 2, 2, 1])`, shape: `(252,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-08-31')],\n           names=['jim', 'joe'], length=252)`, shape: `(252,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    7\n     2015-08-24    4\n     2015-08-25    5\n     2015-08-26    6\n     2015-08-27    5\n                  ..\nz    2015-08-27    2\n     2015-08-28    3\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    1\nName: julie, Length: 252, dtype: int64`, type: `Series`\n\n### Expected case 277\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       828\n1       169\n2       922\n3       324\n4       323\n       ... \n9995    344\n9996    705\n9997    659\n9998    810\n9999    604\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([828, 169, 922, 324, 323, ... , 851,  39, 289,  36, 290, 703])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([828, 169, 922, ..., 659, 810, 604])`, type: `ndarray`\n\ncodes, expected value: `array([  1,   5,   6, ..., 992, 997, 999])`, type: `ndarray`\n\nsorter, expected value: `array([8701, 5370, 2237, ..., 6617, 5965, 9948])`, type: `ndarray`\n\nidx, expected value: `array([   0,  373,  778, 1152, 1519, 1908, 2291, 2693, 3111, 3468, 3831,\n       4224, 4616, 4994, 5392, 5774, 6175, 6564, 6951, 7297, 7683, 8080,\n       8447, 8848, 9238, 9605])`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([312, 334, 303, 305, 309, 317, 326, 349, 299, 293, 337, 325, 313,\n       325, 317, 331, 321, 329, 287, 315, 331, 316, 318, 329, 302, 324])`, type: `ndarray`\n\nres, expected value: `array([312, 334, 303, 305, 309, 317, 326, 349, 299, 293, 337, 325, 313,\n       325, 317, 331, 321, 329, 287, 315, 331, 316, 318, 329, 302, 324])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    312\nb    334\nc    303\nd    305\ne    309\nf    317\ng    326\nh    349\ni    299\nj    293\nk    337\nl    325\nm    313\nn    325\no    317\np    331\nq    321\nr    329\ns    287\nt    315\nu    331\nv    316\nw    318\nx    329\ny    302\nz    324\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 278\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       828\n1       169\n2       922\n3       324\n4       323\n       ... \n9995    344\n9996    705\n9997    659\n9998    810\n9999    604\nName: julie, Length: 10000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([828, 169, 922, 324, 323, ... , 851,  39, 289,  36, 290, 703])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([828, 169, 922, ..., 659, 810, 604])`, type: `ndarray`\n\ncodes, expected value: `array([ 32,  66,  86, ..., 870, 950, 987])`, type: `ndarray`\n\nsorter, expected value: `array([9791, 4158, 1625, ..., 9372, 7089, 4678])`, type: `ndarray`\n\nidx, expected value: `array([   0,   42,   81,  111,  148, ... , 9794, 9828, 9874, 9911, 9962])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([42, 39, 30, 37, 32, 37, 45, ... , 43,\n       33, 46, 36, 51, 38])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([42, 39, 30, 37, 32, 37, 45, ... , 43,\n       33, 46, 36, 51, 38])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    42\n     2015-08-24    39\n     2015-08-25    30\n     2015-08-26    37\n     2015-08-27    32\n                   ..\nz    2015-08-28    33\n     2015-08-29    46\n     2015-08-30    36\n     2015-08-31    51\n     2015-09-01    38\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 279\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       828.0\n1       169.0\n2       922.0\n3       324.0\n4       323.0\n        ...  \n9995    344.0\n9996    705.0\n9997    659.0\n9998    810.0\n9999    604.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([828., 169., 922., 324., 323., ... , 822., 120., 703., 939., 663.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([828., 169., 922., ..., 659., 810., 604.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 990, 993, 997])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7662, 6617, 9948])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  939, 1323, 1672, 2013, 2379, 2742, 3115, 3509, 3840, 4181,\n       4562, 4931, 5279, 5649, 6014, 6394, 6757, 7127, 7458, 7826, 8201,\n       8537, 8915, 9284, 9630])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([388, 263, 274, 247, 249, 250, 250, 272, 282, 245, 241, 282, 260,\n       262, 262, 264, 277, 268, 265, 234, 275, 267, 261, 273, 267, 243,\n       260])`, type: `ndarray`\n\nres, expected value: `array([263, 274, 247, 249, 250, 250, 272, 282, 245, 241, 282, 260, 262,\n       262, 264, 277, 268, 265, 234, 275, 267, 261, 273, 267, 243, 260])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    263\nb    274\nc    247\nd    249\ne    250\nf    250\ng    272\nh    282\ni    245\nj    241\nk    282\nl    260\nm    262\nn    262\no    264\np    277\nq    268\nr    265\ns    234\nt    275\nu    267\nv    261\nw    273\nx    267\ny    243\nz    260\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 280\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       828.0\n1       169.0\n2       922.0\n3       324.0\n4       323.0\n        ...  \n9995    344.0\n9996    705.0\n9997    659.0\n9998    810.0\n9999    604.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([828., 169., 922., 324., 323., ... , 822., 120., 703., 939., 663.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([828., 169., 922., ..., 659., 810., 604.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 828, 925, 976])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9372, 7089, 4678])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  885,  919,  947,  980, ... , 9815, 9846, 9888, 9923, 9970])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([507,  35,  26,  24,  27, ... ,  27,  35,  27,  37,\n        24])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([35, 26, 24, 27, 25, 29, 36, ... , 34,\n       27, 35, 27, 37, 24])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    35\n     2015-08-24    26\n     2015-08-25    24\n     2015-08-26    27\n     2015-08-27    25\n                   ..\nz    2015-08-28    27\n     2015-08-29    35\n     2015-08-30    27\n     2015-08-31    37\n     2015-09-01    24\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 281\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       828.0\n1       169.0\n2       922.0\n3       324.0\n4       323.0\n        ...  \n9995    344.0\n9996    705.0\n9997    659.0\n9998    810.0\n9999    604.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([828., 169., 922., 324., 323., ... , 822., 120., 703., 939., 663.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([828., 169., 922., ..., 659., 810., 604.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 990, 993, 997])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 7662, 6617, 9948])`, type: `ndarray`\n\nidx, expected value: `array([ 589,  939, 1323, 1672, 2013, 2379, 2742, 3115, 3509, 3840, 4181,\n       4562, 4931, 5279, 5649, 6014, 6394, 6757, 7127, 7458, 7826, 8201,\n       8537, 8915, 9284, 9630])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([388, 263, 274, 247, 249, 250, 250, 272, 282, 245, 241, 282, 260,\n       262, 262, 264, 277, 268, 265, 234, 275, 267, 261, 273, 267, 243,\n       260])`, type: `ndarray`\n\nres, expected value: `array([263, 274, 247, 249, 250, 250, 272, 282, 245, 241, 282, 260, 262,\n       262, 264, 277, 268, 265, 234, 275, 267, 261, 273, 267, 243, 260])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    263\nb    274\nc    247\nd    249\ne    250\nf    250\ng    272\nh    282\ni    245\nj    241\nk    282\nl    260\nm    262\nn    262\no    264\np    277\nq    268\nr    265\ns    234\nt    275\nu    267\nv    261\nw    273\nx    267\ny    243\nz    260\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 282\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0       828.0\n1       169.0\n2       922.0\n3       324.0\n4       323.0\n        ...  \n9995    344.0\n9996    705.0\n9997    659.0\n9998    810.0\n9999    604.0\nName: julie, Length: 10000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([828., 169., 922., 324., 323., ... , 822., 120., 703., 939., 663.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([828., 169., 922., ..., 659., 810., 604.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 828, 925, 976])`, type: `ndarray`\n\nsorter, expected value: `array([ 103,  256,  273, ..., 9372, 7089, 4678])`, type: `ndarray`\n\nidx, expected value: `array([ 844,  885,  919,  947,  980, ... , 9815, 9846, 9888, 9923, 9970])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 1, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([507,  35,  26,  24,  27, ... ,  27,  35,  27,  37,\n        24])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([35, 26, 24, 27, 25, 29, 36, ... , 34,\n       27, 35, 27, 37, 24])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    35\n     2015-08-24    26\n     2015-08-25    24\n     2015-08-26    27\n     2015-08-27    25\n                   ..\nz    2015-08-28    27\n     2015-08-29    35\n     2015-08-30    27\n     2015-08-31    37\n     2015-09-01    24\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 283\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        900\n1        759\n2          5\n3        998\n4        168\n        ... \n99995    134\n99996     87\n99997    367\n99998     80\n99999    533\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ 0,  0,  0, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([900, 759,   5, 998, 168, ... , 698, 850, 996, 560, 953, 537])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([900, 759,   5, ..., 367,  80, 533])`, type: `ndarray`\n\ncodes, expected value: `array([  0,   0,   0, ..., 999, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([ 6232, 19456, 58920, ..., 70618, 76901, 87767])`, type: `ndarray`\n\nidx, expected value: `array([    0,  3863,  7726, 11516, 15319, 19127, 23020, 26840, 30625,\n       34385, 38260, 42072, 45870, 49721, 53592, 57458, 61285, 65194,\n       68960, 72729, 76625, 80669, 84531, 88343, 92207, 96186])`, type: `ndarray`\n\ninc, expected value: `array([1, 0, 0, ..., 0, 0, 0])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([981, 987, 979, 979, 981, 982, 978, 974, 975, 980, 978, 971, 977,\n       977, 972, 981, 981, 983, 975, 978, 986, 982, 981, 981, 983, 981])`, type: `ndarray`\n\nres, expected value: `array([981, 987, 979, 979, 981, 982, 978, 974, 975, 980, 978, 971, 977,\n       977, 972, 981, 981, 983, 975, 978, 986, 982, 981, 981, 983, 981])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    981\nb    987\nc    979\nd    979\ne    981\nf    982\ng    978\nh    974\ni    975\nj    980\nk    978\nl    971\nm    977\nn    977\no    972\np    981\nq    981\nr    983\ns    975\nt    978\nu    986\nv    982\nw    981\nx    981\ny    983\nz    981\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 284\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        900\n1        759\n2          5\n3        998\n4        168\n        ... \n99995    134\n99996     87\n99997    367\n99998     80\n99999    533\nName: julie, Length: 100000, dtype: int64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([  0,   0,   0, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([900, 759,   5, 998, 168, ... , 698, 850, 996, 560, 953, 537])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([900, 759,   5, ..., 367,  80, 533])`, type: `ndarray`\n\ncodes, expected value: `array([  1,   3,   5, ..., 996, 996, 999])`, type: `ndarray`\n\nsorter, expected value: `array([64245, 25495, 76558, ..., 10108, 34343, 87767])`, type: `ndarray`\n\nidx, expected value: `array([    0,   393,   784,  1202, ... , 98078, 98469, 98852, 99246, 99626])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([1, 1, 1, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([False, False, False, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([326, 315, 340, 313, 314, ... , 299, 323, 310, 317, 316, 314])`, shape: `(260,)`, type: `ndarray`\n\nres, expected value: `array([326, 315, 340, 313, 314, ... , 299, 323, 310, 317, 316, 314])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    326\n     2015-08-24    315\n     2015-08-25    340\n     2015-08-26    313\n     2015-08-27    314\n                  ... \nz    2015-08-28    323\n     2015-08-29    310\n     2015-08-30    317\n     2015-08-31    316\n     2015-09-01    314\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 285\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        900.0\n1        759.0\n2          5.0\n3        998.0\n4        168.0\n         ...  \n99995    134.0\n99996     87.0\n99997    367.0\n99998     80.0\n99999    533.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([900., 759.,   5., 998., 168., ... , 193., 383., 726.,  69., 920.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([900., 759.,   5., ..., 367.,  80., 533.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 81617, 14909, 67922])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9505, 13142, 16709, 20285, 23854, 27528, 31145, 34708,\n       38262, 41916, 45523, 49120, 52736, 56357, 60002, 63578, 67255,\n       70805, 74345, 78006, 81791, 85412, 89010, 92650, 96402])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([997, 954, 963, 959, 961, 961, 966, 955, 958, 946, 959, 947, 956,\n       958, 946, 952, 949, 957, 957, 960, 957, 968, 962, 958, 958, 950,\n       958])`, type: `ndarray`\n\nres, expected value: `array([954, 963, 959, 961, 961, 966, 955, 958, 946, 959, 947, 956, 958,\n       946, 952, 949, 957, 957, 960, 957, 968, 962, 958, 958, 950, 958])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    954\nb    963\nc    959\nd    961\ne    961\nf    966\ng    955\nh    958\ni    946\nj    959\nk    947\nl    956\nm    958\nn    946\no    952\np    949\nq    957\nr    957\ns    960\nt    957\nu    968\nv    962\nw    958\nx    958\ny    950\nz    958\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 286\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        900.0\n1        759.0\n2          5.0\n3        998.0\n4        168.0\n         ...  \n99995    134.0\n99996     87.0\n99997    367.0\n99998     80.0\n99999    533.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([900., 759.,   5., 998., 168., ... , 193., 383., 726.,  69., 920.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([900., 759.,   5., ..., 367.,  80., 533.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 989, 989, 991])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 10108, 34343, 78362])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8785,  9135,  9520, ... , 98230, 98588, 98936, 99302, 99652])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([1000,  259,  244,  274,  254, ... ,  264,  250,  264,  254,  267])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([259, 244, 274, 254, 255, ... , 242, 264, 250, 264, 254, 267])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    259\n     2015-08-24    244\n     2015-08-25    274\n     2015-08-26    254\n     2015-08-27    255\n                  ... \nz    2015-08-28    264\n     2015-08-29    250\n     2015-08-30    264\n     2015-08-31    254\n     2015-09-01    267\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n### Expected case 287\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        900.0\n1        759.0\n2          5.0\n3        998.0\n4        168.0\n         ...  \n99995    134.0\n99996     87.0\n99997    367.0\n99998     80.0\n99999    533.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([-1, -1, -1, ..., 25, 25, 25])`, type: `ndarray`\n\n_, expected value: `array([900., 759.,   5., 998., 168., ... , 193., 383., 726.,  69., 920.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([900., 759.,   5., ..., 367.,  80., 533.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 998, 999, 999])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 81617, 14909, 67922])`, type: `ndarray`\n\nidx, expected value: `array([ 5883,  9505, 13142, 16709, 20285, 23854, 27528, 31145, 34708,\n       38262, 41916, 45523, 49120, 52736, 56357, 60002, 63578, 67255,\n       70805, 74345, 78006, 81791, 85412, 89010, 92650, 96402])`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 0, 1, 0])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([997, 954, 963, 959, 961, 961, 966, 955, 958, 946, 959, 947, 956,\n       958, 946, 952, 949, 957, 957, 960, 957, 968, 962, 958, 958, 950,\n       958])`, type: `ndarray`\n\nres, expected value: `array([954, 963, 959, 961, 961, 966, 955, 958, 946, 959, 947, 956, 958,\n       946, 952, 949, 957, 957, 960, 957, 968, 962, 958, 958, 950, 958])`, type: `ndarray`\n\nri, expected value: `Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')`, type: `Index`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim\na    954\nb    963\nc    959\nd    961\ne    961\nf    966\ng    955\nh    958\ni    946\nj    959\nk    947\nl    956\nm    958\nn    946\no    952\np    949\nq    957\nr    957\ns    960\nt    957\nu    968\nv    962\nw    958\nx    958\ny    950\nz    958\nName: julie, dtype: int64`, type: `Series`\n\n### Expected case 288\n#### The values and types of buggy function's parameters\nself.obj, expected value: `0        900.0\n1        759.0\n2          5.0\n3        998.0\n4        168.0\n         ...  \n99995    134.0\n99996     87.0\n99997    367.0\n99998     80.0\n99999    533.0\nName: julie, Length: 100000, dtype: float64`, type: `Series`\n\ndropna, expected value: `True`, type: `bool`\n\nself._selection_name, expected value: `'julie'`, type: `str`\n\n#### Expected values and types of variables right before the buggy function's return\nids, expected value: `array([ -1,  -1,  -1, ..., 259, 259, 259])`, type: `ndarray`\n\n_, expected value: `array([900., 759.,   5., 998., 168., ... , 193., 383., 726.,  69., 920.])`, shape: `(1000,)`, type: `ndarray`\n\nval, expected value: `array([900., 759.,   5., ..., 367.,  80., 533.])`, type: `ndarray`\n\ncodes, expected value: `array([ -1,  -1,  -1, ..., 989, 989, 991])`, type: `ndarray`\n\nsorter, expected value: `array([  103,   256,   273, ..., 10108, 34343, 78362])`, type: `ndarray`\n\nidx, expected value: `array([ 8427,  8785,  9135,  9520, ... , 98230, 98588, 98936, 99302, 99652])`, shape: `(260,)`, type: `ndarray`\n\ninc, expected value: `array([0, 0, 0, ..., 1, 0, 1])`, type: `ndarray`\n\nmask, expected value: `array([ True,  True,  True, ..., False, False, False])`, type: `ndarray`\n\nout, expected value: `array([1000,  259,  244,  274,  254, ... ,  264,  250,  264,  254,  267])`, shape: `(261,)`, type: `ndarray`\n\nres, expected value: `array([259, 244, 274, 254, 255, ... , 242, 264, 250, 264, 254, 267])`, shape: `(260,)`, type: `ndarray`\n\nri, expected value: `MultiIndex([('a', '2015-08-23') ... ('z', '2015-09-01')],\n           names=['jim', 'joe'], length=260)`, shape: `(260,)`, type: `MultiIndex`\n\nout.dtype, expected value: `dtype('int64')`, type: `dtype`\n\nresult, expected value: `jim  joe       \na    2015-08-23    259\n     2015-08-24    244\n     2015-08-25    274\n     2015-08-26    254\n     2015-08-27    255\n                  ... \nz    2015-08-28    264\n     2015-08-29    250\n     2015-08-30    264\n     2015-08-31    254\n     2015-09-01    267\nName: julie, Length: 260, dtype: int64`, type: `Series`\n\n",
    "8": "## A GitHub issue for this bug\n\nThe issue's title:\n```text\nBUG: groupby-nunique modifies null values\n```\n\nThe issue's detailed description:\n```text\nCode Sample, a copy-pastable example if possible\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({\"GROUP\": 0, \"VALUE\": [1.0, np.nan]})\ndf.groupby(\"GROUP\")[\"VALUE\"].nunique()\nprint(df)\nProblem description\nOriginal dataframe is modified:\n\n   GROUP         VALUE\n0      0  1.000000e+00\n1      0 -9.223372e+18\nIssue seems to have been introduced in version 1.0.0, 0.25.3 works as expected.\n\nExpected Output\nOriginal dataframe should not be modified.\n```\n\n",
    "9": "Following these steps:\n1. Analyze the buggy function and its relationship with buggy class, related functions, test code, corresponding error message, the runtime input/output values, the expected input/output values, the GitHub issue.\n2. Identify potential error locations within the buggy function.\n3. Explain the cause of the bug using the buggy function, the related functions, the failing test, the corresponding error message, the runtime input/output variable values, the expected input/output variable values, the GitHub Issue information.\n4. Suggest a strategy for fixing the bug.\n5. Given the buggy function below, provide a corrected version. The corrected version should pass the failing test, satisfy the expected input/output values, resolve the issue posted in GitHub.\n"
}