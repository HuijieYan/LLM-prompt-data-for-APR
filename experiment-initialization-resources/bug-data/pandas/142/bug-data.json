{
    "pandas:142": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_142/pandas/core/algorithms.py": {
            "buggy_functions": [
                {
                    "function_name": "diff",
                    "function_code": "def diff(arr, n: int, axis: int = 0):\n    \"\"\"\n    difference of n between self,\n    analogous to s-s.shift(n)\n\n    Parameters\n    ----------\n    arr : ndarray\n    n : int\n        number of periods\n    axis : int\n        axis to shift on\n\n    Returns\n    -------\n    shifted\n    \"\"\"\n\n    n = int(n)\n    na = np.nan\n    dtype = arr.dtype\n\n    is_timedelta = False\n    if needs_i8_conversion(arr):\n        dtype = np.float64\n        arr = arr.view(\"i8\")\n        na = iNaT\n        is_timedelta = True\n\n    elif is_bool_dtype(dtype):\n        dtype = np.object_\n\n    elif is_integer_dtype(dtype):\n        dtype = np.float64\n\n    dtype = np.dtype(dtype)\n    out_arr = np.empty(arr.shape, dtype=dtype)\n\n    na_indexer = [slice(None)] * arr.ndim\n    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n    out_arr[tuple(na_indexer)] = na\n\n    if arr.ndim == 2 and arr.dtype.name in _diff_special:\n        f = _diff_special[arr.dtype.name]\n        f(arr, out_arr, n, axis)\n    else:\n        # To keep mypy happy, _res_indexer is a list while res_indexer is\n        #  a tuple, ditto for lag_indexer.\n        _res_indexer = [slice(None)] * arr.ndim\n        _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n        res_indexer = tuple(_res_indexer)\n\n        _lag_indexer = [slice(None)] * arr.ndim\n        _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n        lag_indexer = tuple(_lag_indexer)\n\n        # need to make sure that we account for na for datelike/timedelta\n        # we don't actually want to subtract these i8 numbers\n        if is_timedelta:\n            res = arr[res_indexer]\n            lag = arr[lag_indexer]\n\n            mask = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n            if mask.any():\n                res = res.copy()\n                res[mask] = 0\n                lag = lag.copy()\n                lag[mask] = 0\n\n            result = res - lag\n            result[mask] = na\n            out_arr[res_indexer] = result\n        else:\n            out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]\n\n    if is_timedelta:\n        out_arr = out_arr.astype(\"int64\").view(\"timedelta64[ns]\")\n\n    return out_arr\n",
                    "decorators": [],
                    "docstring": "difference of n between self,\nanalogous to s-s.shift(n)\n\nParameters\n----------\narr : ndarray\nn : int\n    number of periods\naxis : int\n    axis to shift on\n\nReturns\n-------\nshifted",
                    "start_line": 1890,
                    "end_line": 1968,
                    "variables": {
                        "int": [
                            1890,
                            1908
                        ],
                        "n": [
                            1929,
                            1934,
                            1939,
                            1908,
                            1943
                        ],
                        "na": [
                            1952,
                            1960,
                            1930,
                            1909,
                            1916
                        ],
                        "np.nan": [
                            1909
                        ],
                        "np": [
                            1920,
                            1923,
                            1925,
                            1926,
                            1909,
                            1914
                        ],
                        "dtype": [
                            1920,
                            1922,
                            1923,
                            1925,
                            1926,
                            1910,
                            1914,
                            1919
                        ],
                        "arr.dtype": [
                            1932,
                            1933,
                            1910
                        ],
                        "arr": [
                            1952,
                            1926,
                            1928,
                            1963,
                            1932,
                            1933,
                            1934,
                            1938,
                            1910,
                            1942,
                            1913,
                            1915,
                            1949,
                            1950
                        ],
                        "is_timedelta": [
                            1912,
                            1948,
                            1917,
                            1965
                        ],
                        "needs_i8_conversion": [
                            1913
                        ],
                        "np.float64": [
                            1914,
                            1923
                        ],
                        "arr.view": [
                            1915
                        ],
                        "iNaT": [
                            1916
                        ],
                        "is_bool_dtype": [
                            1919
                        ],
                        "np.object_": [
                            1920
                        ],
                        "is_integer_dtype": [
                            1922
                        ],
                        "np.dtype": [
                            1925
                        ],
                        "out_arr": [
                            1926,
                            1961,
                            1930,
                            1963,
                            1934,
                            1966,
                            1968
                        ],
                        "np.empty": [
                            1926
                        ],
                        "arr.shape": [
                            1926
                        ],
                        "na_indexer": [
                            1928,
                            1929,
                            1930
                        ],
                        "slice": [
                            1928,
                            1929,
                            1938,
                            1939,
                            1942,
                            1943
                        ],
                        "arr.ndim": [
                            1928,
                            1938,
                            1932,
                            1942
                        ],
                        "axis": [
                            1929,
                            1939,
                            1934,
                            1943
                        ],
                        "tuple": [
                            1944,
                            1930,
                            1940
                        ],
                        "arr.dtype.name": [
                            1932,
                            1933
                        ],
                        "_diff_special": [
                            1932,
                            1933
                        ],
                        "f": [
                            1933,
                            1934
                        ],
                        "_res_indexer": [
                            1938,
                            1939,
                            1940
                        ],
                        "res_indexer": [
                            1952,
                            1961,
                            1963,
                            1940,
                            1949
                        ],
                        "_lag_indexer": [
                            1944,
                            1942,
                            1943
                        ],
                        "lag_indexer": [
                            1944,
                            1952,
                            1963,
                            1950
                        ],
                        "res": [
                            1954,
                            1955,
                            1949,
                            1959
                        ],
                        "lag": [
                            1956,
                            1957,
                            1950,
                            1959
                        ],
                        "mask": [
                            1952,
                            1953,
                            1955,
                            1957,
                            1960
                        ],
                        "mask.any": [
                            1953
                        ],
                        "res.copy": [
                            1954
                        ],
                        "lag.copy": [
                            1956
                        ],
                        "result": [
                            1960,
                            1961,
                            1959
                        ],
                        "view": [
                            1966
                        ],
                        "out_arr.astype": [
                            1966
                        ]
                    },
                    "filtered_variables": {
                        "n": [
                            1929,
                            1934,
                            1939,
                            1908,
                            1943
                        ],
                        "na": [
                            1952,
                            1960,
                            1930,
                            1909,
                            1916
                        ],
                        "np.nan": [
                            1909
                        ],
                        "np": [
                            1920,
                            1923,
                            1925,
                            1926,
                            1909,
                            1914
                        ],
                        "dtype": [
                            1920,
                            1922,
                            1923,
                            1925,
                            1926,
                            1910,
                            1914,
                            1919
                        ],
                        "arr.dtype": [
                            1932,
                            1933,
                            1910
                        ],
                        "arr": [
                            1952,
                            1926,
                            1928,
                            1963,
                            1932,
                            1933,
                            1934,
                            1938,
                            1910,
                            1942,
                            1913,
                            1915,
                            1949,
                            1950
                        ],
                        "is_timedelta": [
                            1912,
                            1948,
                            1917,
                            1965
                        ],
                        "needs_i8_conversion": [
                            1913
                        ],
                        "np.float64": [
                            1914,
                            1923
                        ],
                        "arr.view": [
                            1915
                        ],
                        "iNaT": [
                            1916
                        ],
                        "is_bool_dtype": [
                            1919
                        ],
                        "np.object_": [
                            1920
                        ],
                        "is_integer_dtype": [
                            1922
                        ],
                        "np.dtype": [
                            1925
                        ],
                        "out_arr": [
                            1926,
                            1961,
                            1930,
                            1963,
                            1934,
                            1966,
                            1968
                        ],
                        "np.empty": [
                            1926
                        ],
                        "arr.shape": [
                            1926
                        ],
                        "na_indexer": [
                            1928,
                            1929,
                            1930
                        ],
                        "arr.ndim": [
                            1928,
                            1938,
                            1932,
                            1942
                        ],
                        "axis": [
                            1929,
                            1939,
                            1934,
                            1943
                        ],
                        "arr.dtype.name": [
                            1932,
                            1933
                        ],
                        "_diff_special": [
                            1932,
                            1933
                        ],
                        "f": [
                            1933,
                            1934
                        ],
                        "_res_indexer": [
                            1938,
                            1939,
                            1940
                        ],
                        "res_indexer": [
                            1952,
                            1961,
                            1963,
                            1940,
                            1949
                        ],
                        "_lag_indexer": [
                            1944,
                            1942,
                            1943
                        ],
                        "lag_indexer": [
                            1944,
                            1952,
                            1963,
                            1950
                        ],
                        "res": [
                            1954,
                            1955,
                            1949,
                            1959
                        ],
                        "lag": [
                            1956,
                            1957,
                            1950,
                            1959
                        ],
                        "mask": [
                            1952,
                            1953,
                            1955,
                            1957,
                            1960
                        ],
                        "mask.any": [
                            1953
                        ],
                        "res.copy": [
                            1954
                        ],
                        "lag.copy": [
                            1956
                        ],
                        "result": [
                            1960,
                            1961,
                            1959
                        ],
                        "view": [
                            1966
                        ],
                        "out_arr.astype": [
                            1966
                        ]
                    },
                    "diff_line_number": 1912,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "na": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "arr": {
                                    "variable_value": "array([False,  True,  True, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "is_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x12126d170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iNaT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_arr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.shape": {
                                    "variable_value": "(5,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "na_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "arr.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_diff_special": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_res_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_lag_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lag_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lag": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lag.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_arr.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "na": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "arr": {
                                    "variable_value": "array([False,  True,  True, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "is_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x11c6d5530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iNaT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_arr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.shape": {
                                    "variable_value": "(5,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "na_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "arr.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_diff_special": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_res_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_lag_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lag_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lag": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lag.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_arr.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "na": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "arr.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "arr": {
                                    "variable_value": "array([False,  True,  True, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "is_timedelta": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_bool": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x11c6d5530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iNaT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_arr": {
                                    "variable_value": "array([nan, True, False, True, False], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.shape": {
                                    "variable_value": "(5,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "na_indexer": {
                                    "variable_value": "[slice(None, 1, None)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "arr.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "arr.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_diff_special": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_res_indexer": {
                                    "variable_value": "[slice(1, None, None)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "res_indexer": {
                                    "variable_value": "(slice(1, None, None),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "_lag_indexer": {
                                    "variable_value": "[slice(None, -1, None)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "lag_indexer": {
                                    "variable_value": "(slice(None, -1, None),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lag": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lag.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_arr.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x11c9dd0d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _ensure_data(values, dtype=None):\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    (ndarray, pandas_dtype, algo dtype as a string)\n\n    \"\"\"\n\n    # we check some simple dtypes first\n    try:\n        if is_object_dtype(dtype):\n            return ensure_object(np.asarray(values)), \"object\", \"object\"\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), \"bool\", \"uint64\"\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), \"int64\", \"int64\"\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), \"uint64\", \"uint64\"\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), \"float64\", \"float64\"\n        elif is_object_dtype(values) and dtype is None:\n            return ensure_object(np.asarray(values)), \"object\", \"object\"\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, \"float64\", \"float64\"\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompat this will fall thru to here\n        return ensure_object(values), \"object\", \"object\"\n\n    # datetimelike\n    if (\n        needs_i8_conversion(values)\n        or is_period_dtype(dtype)\n        or is_datetime64_any_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        if is_period_dtype(values) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(values) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(values):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype, \"int64\"\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype, \"int64\"\n\n    elif is_categorical_dtype(values) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = getattr(values, \"values\", values)\n        values = values.codes\n        dtype = \"category\"\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype, \"int64\"\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), \"object\", \"object\"",
                "def _reconstruct_data(values, dtype, original):\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : ndarray\n    dtype : pandas_dtype\n    original : ndarray-like\n\n    Returns\n    -------\n    Index for extension types, otherwise ndarray casted to dtype\n    \"\"\"\n\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object)\n    elif dtype is not None:\n        values = values.astype(dtype)\n\n    return values",
                "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\", \"unicode\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
                "def _get_hashtable_algo(values):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n\n    Returns\n    -------\n    tuples(hashtable class,\n           vector class,\n           values,\n           dtype,\n           ndtype)\n    \"\"\"\n    values, dtype, ndtype = _ensure_data(values)\n\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n        else:\n            ndtype = \"object\"\n\n    htable, table = _hashtables[ndtype]\n    return (htable, table, values, dtype, ndtype)",
                "def _get_data_algo(values, func_map):\n\n    if is_categorical_dtype(values):\n        values = values._values_for_rank()\n\n    values, dtype, ndtype = _ensure_data(values)\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n\n    f = func_map.get(ndtype, func_map[\"object\"])\n\n    return f, values",
                "def match(to_match, values, na_sentinel=-1):\n    \"\"\"\n    Compute locations of to_match into values\n\n    Parameters\n    ----------\n    to_match : array-like\n        values to find positions of\n    values : array-like\n        Unique set of values\n    na_sentinel : int, default -1\n        Value to mark \"not found\"\n\n    Examples\n    --------\n\n    Returns\n    -------\n    match : ndarray of integers\n    \"\"\"\n    values = com.asarray_tuplesafe(values)\n    htable, _, values, dtype, ndtype = _get_hashtable_algo(values)\n    to_match, _, _ = _ensure_data(to_match, dtype)\n    table = htable(min(len(to_match), 1000000))\n    table.map_locations(values)\n    result = table.lookup(to_match)\n\n    if na_sentinel != -1:\n\n        # replace but return a numpy array\n        # use a Series because it handles dtype conversions properly\n        from pandas import Series\n\n        result = Series(result.ravel()).replace(-1, na_sentinel)\n        result = result.values.reshape(result.shape)\n\n    return result",
                "def unique(values):\n    \"\"\"\n    Hash table-based unique. Uniques are returned in order\n    of appearance. This does NOT sort.\n\n    Significantly faster than numpy.unique. Includes NA values.\n\n    Parameters\n    ----------\n    values : 1d array-like\n\n    Returns\n    -------\n    numpy.ndarray or ExtensionArray\n\n        The return can be:\n\n        * Index : when the input is an Index\n        * Categorical : when the input is a Categorical dtype\n        * ndarray : when the input is a Series/ndarray\n\n        Return numpy.ndarray or ExtensionArray.\n\n    See Also\n    --------\n    Index.unique\n    Series.unique\n\n    Examples\n    --------\n    >>> pd.unique(pd.Series([2, 1, 3, 3]))\n    array([2, 1, 3])\n\n    >>> pd.unique(pd.Series([2] + [1] * 5))\n    array([2, 1])\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101'),\n    ...                     pd.Timestamp('20160101')]))\n    array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                      pd.Timestamp('20160101', tz='US/Eastern')]))\n    array([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n          dtype=object)\n\n    >>> pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                     pd.Timestamp('20160101', tz='US/Eastern')]))\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'],\n    ...           dtype='datetime64[ns, US/Eastern]', freq=None)\n\n    >>> pd.unique(list('baabc'))\n    array(['b', 'a', 'c'], dtype=object)\n\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'),\n    ...                                    ordered=True)))\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    An array of tuples\n\n    >>> pd.unique([('a', 'b'), ('b', 'a'), ('a', 'c'), ('b', 'a')])\n    array([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)\n    \"\"\"\n\n    values = _ensure_arraylike(values)\n\n    if is_extension_array_dtype(values):\n        # Dispatch to extension dtype's unique.\n        return values.unique()\n\n    original = values\n    htable, _, values, dtype, ndtype = _get_hashtable_algo(values)\n\n    table = htable(len(values))\n    uniques = table.unique(values)\n    uniques = _reconstruct_data(uniques, dtype, original)\n    return uniques",
                "def isin(comps, values):\n    \"\"\"\n    Compute the isin boolean array\n\n    Parameters\n    ----------\n    comps : array-like\n    values : array-like\n\n    Returns\n    -------\n    boolean array same length as comps\n    \"\"\"\n\n    if not is_list_like(comps):\n        raise TypeError(\n            \"only list-like objects are allowed to be passed\"\n            \" to isin(), you passed a [{comps_type}]\".format(\n                comps_type=type(comps).__name__\n            )\n        )\n    if not is_list_like(values):\n        raise TypeError(\n            \"only list-like objects are allowed to be passed\"\n            \" to isin(), you passed a [{values_type}]\".format(\n                values_type=type(values).__name__\n            )\n        )\n\n    if not isinstance(values, (ABCIndex, ABCSeries, np.ndarray)):\n        values = construct_1d_object_array_from_listlike(list(values))\n\n    if is_categorical_dtype(comps):\n        # TODO(extension)\n        # handle categoricals\n        return comps._values.isin(values)\n\n    comps = com.values_from_object(comps)\n\n    comps, dtype, _ = _ensure_data(comps)\n    values, _, _ = _ensure_data(values, dtype=dtype)\n\n    # faster for larger cases to use np.in1d\n    f = lambda x, y: htable.ismember_object(x, values)\n\n    # GH16012\n    # Ensure np.in1d doesn't get object types or it *may* throw an exception\n    if len(comps) > 1000000 and not is_object_dtype(comps):\n        f = lambda x, y: np.in1d(x, y)\n    elif is_integer_dtype(comps):\n        try:\n            values = values.astype(\"int64\", copy=False)\n            comps = comps.astype(\"int64\", copy=False)\n            f = lambda x, y: htable.ismember_int64(x, y)\n        except (TypeError, ValueError, OverflowError):\n            values = values.astype(object)\n            comps = comps.astype(object)\n\n    elif is_float_dtype(comps):\n        try:\n            values = values.astype(\"float64\", copy=False)\n            comps = comps.astype(\"float64\", copy=False)\n            f = lambda x, y: htable.ismember_float64(x, y)\n        except (TypeError, ValueError):\n            values = values.astype(object)\n            comps = comps.astype(object)\n\n    return f(comps, values)",
                "def _factorize_array(values, na_sentinel=-1, size_hint=None, na_value=None):\n    \"\"\"Factorize an array-like to labels and uniques.\n\n    This doesn't do any coercion of types or unboxing before factorization.\n\n    Parameters\n    ----------\n    values : ndarray\n    na_sentinel : int, default -1\n    size_hint : int, optional\n        Passsed through to the hashtable's 'get_labels' method\n    na_value : object, optional\n        A value in `values` to consider missing. Note: only use this\n        parameter when you know that you don't have any values pandas would\n        consider missing in the array (NaN for float data, iNaT for\n        datetimes, etc.).\n\n    Returns\n    -------\n    labels, uniques : ndarray\n    \"\"\"\n    (hash_klass, _), values = _get_data_algo(values, _hashtables)\n\n    table = hash_klass(size_hint or len(values))\n    uniques, labels = table.factorize(\n        values, na_sentinel=na_sentinel, na_value=na_value\n    )\n\n    labels = ensure_platform_int(labels)\n    return labels, uniques",
                "@Substitution(\n    values=dedent(\n        \"\"\"\\\n    values : sequence\n        A 1-D sequence. Sequences that aren't pandas objects are\n        coerced to ndarrays before factorization.\n    \"\"\"\n    ),\n    order=dedent(\n        \"\"\"\\\n    order : None\n        .. deprecated:: 0.23.0\n\n           This parameter has no effect and is deprecated.\n    \"\"\"\n    ),\n    sort=dedent(\n        \"\"\"\\\n    sort : bool, default False\n        Sort `uniques` and shuffle `labels` to maintain the\n        relationship.\n    \"\"\"\n    ),\n    size_hint=dedent(\n        \"\"\"\\\n    size_hint : int, optional\n        Hint to the hashtable sizer.\n    \"\"\"\n    ),\n)\n@Appender(_shared_docs[\"factorize\"])\n@deprecate_kwarg(old_arg_name=\"order\", new_arg_name=None)\ndef factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None):\n    # Implementation notes: This method is responsible for 3 things\n    # 1.) coercing data to array-like (ndarray, Index, extension array)\n    # 2.) factorizing labels and uniques\n    # 3.) Maybe boxing the output in an Index\n    #\n    # Step 2 is dispatched to extension types (like Categorical). They are\n    # responsible only for factorization. All data coercion, sorting and boxing\n    # should happen here.\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    if is_extension_array_dtype(values):\n        values = getattr(values, \"_values\", values)\n        labels, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:\n        values, dtype, _ = _ensure_data(values)\n\n        if (\n            is_datetime64_any_dtype(original)\n            or is_timedelta64_dtype(original)\n            or is_period_dtype(original)\n        ):\n            na_value = na_value_for_dtype(original.dtype)\n        else:\n            na_value = None\n\n        labels, uniques = _factorize_array(\n            values, na_sentinel=na_sentinel, size_hint=size_hint, na_value=na_value\n        )\n\n    if sort and len(uniques) > 0:\n        from pandas.core.sorting import safe_sort\n\n        uniques, labels = safe_sort(\n            uniques, labels, na_sentinel=na_sentinel, assume_unique=True, verify=False\n        )\n\n    uniques = _reconstruct_data(uniques, dtype, original)\n\n    # return original tenor\n    if isinstance(original, ABCIndexClass):\n        uniques = original._shallow_copy(uniques, name=None)\n    elif isinstance(original, ABCSeries):\n        from pandas import Index\n\n        uniques = Index(uniques)\n\n    return labels, uniques",
                "def value_counts(\n    values, sort=True, ascending=False, normalize=False, bins=None, dropna=True\n):\n    \"\"\"\n    Compute a histogram of the counts of non-null values.\n\n    Parameters\n    ----------\n    values : ndarray (1-d)\n    sort : boolean, default True\n        Sort by values\n    ascending : boolean, default False\n        Sort in ascending order\n    normalize: boolean, default False\n        If True then compute a relative histogram\n    bins : integer, optional\n        Rather than count values, group them into half-open bins,\n        convenience for pd.cut, only works with numeric data\n    dropna : boolean, default True\n        Don't include counts of NaN\n\n    Returns\n    -------\n    value_counts : Series\n\n    \"\"\"\n    from pandas.core.series import Series, Index\n\n    name = getattr(values, \"name\", None)\n\n    if bins is not None:\n        try:\n            from pandas.core.reshape.tile import cut\n\n            values = Series(values)\n            ii = cut(values, bins, include_lowest=True)\n        except TypeError:\n            raise TypeError(\"bins argument only works with numeric data.\")\n\n        # count, remove nulls (from the index), and but the bins\n        result = ii.value_counts(dropna=dropna)\n        result = result[result.index.notna()]\n        result.index = result.index.astype(\"interval\")\n        result = result.sort_index()\n\n        # if we are dropna and we have NO values\n        if dropna and (result.values == 0).all():\n            result = result.iloc[0:0]\n\n        # normalizing is by len of all (regardless of dropna)\n        counts = np.array([len(ii)])\n\n    else:\n\n        if is_extension_array_dtype(values):\n\n            # handle Categorical and sparse,\n            result = Series(values)._values.value_counts(dropna=dropna)\n            result.name = name\n            counts = result.values\n\n        else:\n            keys, counts = _value_counts_arraylike(values, dropna)\n\n            if not isinstance(keys, Index):\n                keys = Index(keys)\n            result = Series(counts, index=keys, name=name)\n\n    if sort:\n        result = result.sort_values(ascending=ascending)\n\n    if normalize:\n        result = result / float(counts.sum())\n\n    return result",
                "def _value_counts_arraylike(values, dropna):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n    dropna : boolean\n\n    Returns\n    -------\n    (uniques, counts)\n\n    \"\"\"\n    values = _ensure_arraylike(values)\n    original = values\n    values, dtype, ndtype = _ensure_data(values)\n\n    if needs_i8_conversion(dtype):\n        # i8\n\n        keys, counts = htable.value_count_int64(values, dropna)\n\n        if dropna:\n            msk = keys != iNaT\n            keys, counts = keys[msk], counts[msk]\n\n    else:\n        # ndarray like\n\n        # TODO: handle uint8\n        f = getattr(htable, \"value_count_{dtype}\".format(dtype=ndtype))\n        keys, counts = f(values, dropna)\n\n        mask = isna(values)\n        if not dropna and mask.any():\n            if not isna(keys).any():\n                keys = np.insert(keys, 0, np.NaN)\n                counts = np.insert(counts, 0, mask.sum())\n\n    keys = _reconstruct_data(keys, original.dtype, original)\n\n    return keys, counts",
                "def duplicated(values, keep=\"first\"):\n    \"\"\"\n    Return boolean ndarray denoting duplicate values.\n\n    Parameters\n    ----------\n    values : ndarray-like\n        Array over which to check for duplicate values.\n    keep : {'first', 'last', False}, default 'first'\n        - ``first`` : Mark duplicates as ``True`` except for the first\n          occurrence.\n        - ``last`` : Mark duplicates as ``True`` except for the last\n          occurrence.\n        - False : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    duplicated : ndarray\n    \"\"\"\n\n    values, dtype, ndtype = _ensure_data(values)\n    f = getattr(htable, \"duplicated_{dtype}\".format(dtype=ndtype))\n    return f(values, keep=keep)",
                "def mode(values, dropna: bool = True):\n    \"\"\"\n    Returns the mode(s) of an array.\n\n    Parameters\n    ----------\n    values : array-like\n        Array over which to check for duplicate values.\n    dropna : boolean, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    mode : Series\n    \"\"\"\n    from pandas import Series\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    # categorical is a fast-path\n    if is_categorical_dtype(values):\n        if isinstance(values, Series):\n            return Series(values.values.mode(dropna=dropna), name=values.name)\n        return values.mode(dropna=dropna)\n\n    if dropna and is_datetimelike(values):\n        mask = values.isnull()\n        values = values[~mask]\n\n    values, dtype, ndtype = _ensure_data(values)\n\n    f = getattr(htable, \"mode_{dtype}\".format(dtype=ndtype))\n    result = f(values, dropna=dropna)\n    try:\n        result = np.sort(result)\n    except TypeError as e:\n        warn(\"Unable to sort modes: {error}\".format(error=e))\n\n    result = _reconstruct_data(result, original.dtype, original)\n    return Series(result)",
                "def rank(values, axis=0, method=\"average\", na_option=\"keep\", ascending=True, pct=False):\n    \"\"\"\n    Rank the values along a given axis.\n\n    Parameters\n    ----------\n    values : array-like\n        Array whose values will be ranked. The number of dimensions in this\n        array must not exceed 2.\n    axis : int, default 0\n        Axis over which to perform rankings.\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        The method by which tiebreaks are broken during the ranking.\n    na_option : {'keep', 'top'}, default 'keep'\n        The method by which NaNs are placed in the ranking.\n        - ``keep``: rank each NaN value with a NaN ranking\n        - ``top``: replace each NaN with either +/- inf so that they\n                   there are ranked at the top\n    ascending : boolean, default True\n        Whether or not the elements should be ranked in ascending order.\n    pct : boolean, default False\n        Whether or not to the display the returned rankings in integer form\n        (e.g. 1, 2, 3) or in percentile form (e.g. 0.333..., 0.666..., 1).\n    \"\"\"\n    if values.ndim == 1:\n        f, values = _get_data_algo(values, _rank1d_functions)\n        ranks = f(\n            values,\n            ties_method=method,\n            ascending=ascending,\n            na_option=na_option,\n            pct=pct,\n        )\n    elif values.ndim == 2:\n        f, values = _get_data_algo(values, _rank2d_functions)\n        ranks = f(\n            values,\n            axis=axis,\n            ties_method=method,\n            ascending=ascending,\n            na_option=na_option,\n            pct=pct,\n        )\n    else:\n        raise TypeError(\"Array with ndim > 2 are not supported.\")\n\n    return ranks",
                "def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):\n    \"\"\"\n    Perform array addition that checks for underflow and overflow.\n\n    Performs the addition of an int64 array and an int64 integer (or array)\n    but checks that they do not result in overflow first. For elements that\n    are indicated to be NaN, whether or not there is overflow for that element\n    is automatically ignored.\n\n    Parameters\n    ----------\n    arr : array addend.\n    b : array or scalar addend.\n    arr_mask : boolean array or None\n        array indicating which elements to exclude from checking\n    b_mask : boolean array or boolean or None\n        array or scalar indicating which element(s) to exclude from checking\n\n    Returns\n    -------\n    sum : An array for elements x + b for each element x in arr if b is\n          a scalar or an array for elements x + y for each element pair\n          (x, y) in (arr, b).\n\n    Raises\n    ------\n    OverflowError if any x + y exceeds the maximum or minimum int64 value.\n    \"\"\"\n    # For performance reasons, we broadcast 'b' to the new array 'b2'\n    # so that it has the same size as 'arr'.\n    b2 = np.broadcast_to(b, arr.shape)\n    if b_mask is not None:\n        # We do the same broadcasting for b_mask as well.\n        b2_mask = np.broadcast_to(b_mask, arr.shape)\n    else:\n        b2_mask = None\n\n    # For elements that are NaN, regardless of their value, we should\n    # ignore whether they overflow or not when doing the checked add.\n    if arr_mask is not None and b2_mask is not None:\n        not_nan = np.logical_not(arr_mask | b2_mask)\n    elif arr_mask is not None:\n        not_nan = np.logical_not(arr_mask)\n    elif b_mask is not None:\n        not_nan = np.logical_not(b2_mask)\n    else:\n        not_nan = np.empty(arr.shape, dtype=bool)\n        not_nan.fill(True)\n\n    # gh-14324: For each element in 'arr' and its corresponding element\n    # in 'b2', we check the sign of the element in 'b2'. If it is positive,\n    # we then check whether its sum with the element in 'arr' exceeds\n    # np.iinfo(np.int64).max. If so, we have an overflow error. If it\n    # it is negative, we then check whether its sum with the element in\n    # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\n    # error as well.\n    mask1 = b2 > 0\n    mask2 = b2 < 0\n\n    if not mask1.any():\n        to_raise = ((np.iinfo(np.int64).min - b2 > arr) & not_nan).any()\n    elif not mask2.any():\n        to_raise = ((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()\n    else:\n        to_raise = (\n            ((np.iinfo(np.int64).max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any()\n            or (\n                (np.iinfo(np.int64).min - b2[mask2] > arr[mask2]) & not_nan[mask2]\n            ).any()\n        )\n\n    if to_raise:\n        raise OverflowError(\"Overflow in int64 addition\")\n    return arr + b",
                "def quantile(x, q, interpolation_method=\"fraction\"):\n    \"\"\"\n    Compute sample quantile or quantiles of the input array. For example, q=0.5\n    computes the median.\n\n    The `interpolation_method` parameter supports three values, namely\n    `fraction` (default), `lower` and `higher`. Interpolation is done only,\n    if the desired quantile lies between two data points `i` and `j`. For\n    `fraction`, the result is an interpolated value between `i` and `j`;\n    for `lower`, the result is `i`, for `higher` the result is `j`.\n\n    Parameters\n    ----------\n    x : ndarray\n        Values from which to extract score.\n    q : scalar or array\n        Percentile at which to extract score.\n    interpolation_method : {'fraction', 'lower', 'higher'}, optional\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        - fraction: `i + (j - i)*fraction`, where `fraction` is the\n                    fractional part of the index surrounded by `i` and `j`.\n        -lower: `i`.\n        - higher: `j`.\n\n    Returns\n    -------\n    score : float\n        Score at percentile.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> a = np.arange(100)\n    >>> stats.scoreatpercentile(a, 50)\n    49.5\n\n    \"\"\"\n    x = np.asarray(x)\n    mask = isna(x)\n\n    x = x[~mask]\n\n    values = np.sort(x)\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n        return a + (b - a) * fraction\n\n    def _get_score(at):\n        if len(values) == 0:\n            return np.nan\n\n        idx = at * (len(values) - 1)\n        if idx % 1 == 0:\n            score = values[int(idx)]\n        else:\n            if interpolation_method == \"fraction\":\n                score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n            elif interpolation_method == \"lower\":\n                score = values[np.floor(idx)]\n            elif interpolation_method == \"higher\":\n                score = values[np.ceil(idx)]\n            else:\n                raise ValueError(\n                    \"interpolation_method can only be 'fraction' \"\n                    \", 'lower' or 'higher'\"\n                )\n\n        return score\n\n    if is_scalar(q):\n        return _get_score(q)\n    else:\n        q = np.asarray(q, np.float64)\n        result = [_get_score(x) for x in q]\n        result = np.array(result, dtype=np.float64)\n        return result",
                "def _view_wrapper(f, arr_dtype=None, out_dtype=None, fill_wrap=None):\n    def wrapper(arr, indexer, out, fill_value=np.nan):\n        if arr_dtype is not None:\n            arr = arr.view(arr_dtype)\n        if out_dtype is not None:\n            out = out.view(out_dtype)\n        if fill_wrap is not None:\n            fill_value = fill_wrap(fill_value)\n        f(arr, indexer, out, fill_value=fill_value)\n\n    return wrapper",
                "def _convert_wrapper(f, conv_dtype):\n    def wrapper(arr, indexer, out, fill_value=np.nan):\n        arr = arr.astype(conv_dtype)\n        f(arr, indexer, out, fill_value=fill_value)\n\n    return wrapper",
                "def _take_2d_multi_object(arr, indexer, out, fill_value, mask_info):\n    # this is not ideal, performance-wise, but it's better than raising\n    # an exception (best to optimize in Cython to avoid getting here)\n    row_idx, col_idx = indexer\n    if mask_info is not None:\n        (row_mask, col_mask), (row_needs, col_needs) = mask_info\n    else:\n        row_mask = row_idx == -1\n        col_mask = col_idx == -1\n        row_needs = row_mask.any()\n        col_needs = col_mask.any()\n    if fill_value is not None:\n        if row_needs:\n            out[row_mask, :] = fill_value\n        if col_needs:\n            out[:, col_mask] = fill_value\n    for i in range(len(row_idx)):\n        u_ = row_idx[i]\n        for j in range(len(col_idx)):\n            v = col_idx[j]\n            out[i, j] = arr[u_, v]",
                "def _take_nd_object(arr, indexer, out, axis, fill_value, mask_info):\n    if mask_info is not None:\n        mask, needs_masking = mask_info\n    else:\n        mask = indexer == -1\n        needs_masking = mask.any()\n    if arr.dtype != out.dtype:\n        arr = arr.astype(out.dtype)\n    if arr.shape[axis] > 0:\n        arr.take(ensure_platform_int(indexer), axis=axis, out=out)\n    if needs_masking:\n        outindexer = [slice(None)] * arr.ndim\n        outindexer[axis] = mask\n        out[tuple(outindexer)] = fill_value",
                "def _get_take_nd_function(ndim, arr_dtype, out_dtype, axis=0, mask_info=None):\n    if ndim <= 2:\n        tup = (arr_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            return func\n\n        tup = (out_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            func = _convert_wrapper(func, out_dtype)\n            return func\n\n    def func(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )\n\n    return func",
                "def take(arr, indices, axis=0, allow_fill=False, fill_value=None):\n    \"\"\"\n    Take elements from an array.\n\n    .. versionadded:: 0.23.0\n\n    Parameters\n    ----------\n    arr : sequence\n        Non array-likes (sequences without a dtype) are coerced\n        to an ndarray.\n    indices : sequence of integers\n        Indices to be taken.\n    axis : int, default 0\n        The axis over which to select values.\n    allow_fill : bool, default False\n        How to handle negative values in `indices`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right (the default). This is similar to :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate\n          missing values. These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n    fill_value : any, optional\n        Fill value to use for NA-indices when `allow_fill` is True.\n        This may be ``None``, in which case the default NA value for\n        the type (``self.dtype.na_value``) is used.\n\n        For multi-dimensional `arr`, each *element* is filled with\n        `fill_value`.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        Same type as the input.\n\n    Raises\n    ------\n    IndexError\n        When `indices` is out of bounds for the array.\n    ValueError\n        When the indexer contains negative values other than ``-1``\n        and `allow_fill` is True.\n\n    Notes\n    -----\n    When `allow_fill` is False, `indices` may be whatever dimensionality\n    is accepted by NumPy for `arr`.\n\n    When `allow_fill` is True, `indices` should be 1-D.\n\n    See Also\n    --------\n    numpy.take\n\n    Examples\n    --------\n    >>> from pandas.api.extensions import take\n\n    With the default ``allow_fill=False``, negative numbers indicate\n    positional indices from the right.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1])\n    array([10, 10, 30])\n\n    Setting ``allow_fill=True`` will place `fill_value` in those positions.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True)\n    array([10., 10., nan])\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True,\n    ...      fill_value=-10)\n    array([ 10,  10, -10])\n    \"\"\"\n    if not is_array_like(arr):\n        arr = np.asarray(arr)\n\n    indices = np.asarray(indices, dtype=np.intp)\n\n    if allow_fill:\n        # Pandas style, -1 means NA\n        validate_indices(indices, arr.shape[axis])\n        result = take_1d(\n            arr, indices, axis=axis, allow_fill=True, fill_value=fill_value\n        )\n    else:\n        # NumPy style\n        result = arr.take(indices, axis=axis)\n    return result",
                "def take_nd(\n    arr, indexer, axis=0, out=None, fill_value=np.nan, mask_info=None, allow_fill=True\n):\n    \"\"\"\n    Specialized Cython take which sets NaN values in one pass\n\n    This dispatches to ``take`` defined on ExtensionArrays. It does not\n    currently dispatch to ``SparseArray.take`` for sparse ``arr``.\n\n    Parameters\n    ----------\n    arr : array-like\n        Input array.\n    indexer : ndarray\n        1-D array of indices to take, subarrays corresponding to -1 value\n        indices are filed with fill_value\n    axis : int, default 0\n        Axis to take from\n    out : ndarray or None, default None\n        Optional output array, must be appropriate type to hold input and\n        fill_value together, if indexer has any -1 value entries; call\n        maybe_promote to determine this type for any fill_value\n    fill_value : any, default np.nan\n        Fill value to replace -1 values with\n    mask_info : tuple of (ndarray, boolean)\n        If provided, value should correspond to:\n            (indexer != -1, (indexer != -1).any())\n        If not provided, it will be computed internally if necessary\n    allow_fill : boolean, default True\n        If False, indexer is assumed to contain no -1 values so no filling\n        will be done.  This short-circuits computation of a mask.  Result is\n        undefined if allow_fill == False and -1 is present in indexer.\n\n    Returns\n    -------\n    subarray : array-like\n        May be the same type as the input, or cast to an ndarray.\n    \"\"\"\n\n    if is_extension_array_dtype(arr):\n        return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)\n\n    if isinstance(arr, (ABCIndexClass, ABCSeries)):\n        arr = arr._values\n\n    arr = np.asarray(arr)\n\n    if indexer is None:\n        indexer = np.arange(arr.shape[axis], dtype=np.int64)\n        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        indexer = ensure_int64(indexer, copy=False)\n        if not allow_fill:\n            dtype, fill_value = arr.dtype, arr.dtype.type()\n            mask_info = None, False\n        else:\n            # check for promotion based on types only (do this first because\n            # it's faster than computing a mask)\n            dtype, fill_value = maybe_promote(arr.dtype, fill_value)\n            if dtype != arr.dtype and (out is None or out.dtype != dtype):\n                # check if promotion is actually required based on indexer\n                if mask_info is not None:\n                    mask, needs_masking = mask_info\n                else:\n                    mask = indexer == -1\n                    needs_masking = mask.any()\n                    mask_info = mask, needs_masking\n                if needs_masking:\n                    if out is not None and out.dtype != dtype:\n                        raise TypeError(\"Incompatible type for fill_value\")\n                else:\n                    # if not, then depromote, set fill_value to dummy\n                    # (it won't be used but we don't want the cython code\n                    # to crash when trying to cast it to dtype)\n                    dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    flip_order = False\n    if arr.ndim == 2:\n        if arr.flags.f_contiguous:\n            flip_order = True\n\n    if flip_order:\n        arr = arr.T\n        axis = arr.ndim - axis - 1\n        if out is not None:\n            out = out.T\n\n    # at this point, it's guaranteed that dtype can hold both the arr values\n    # and the fill_value\n    if out is None:\n        out_shape = list(arr.shape)\n        out_shape[axis] = len(indexer)\n        out_shape = tuple(out_shape)\n        if arr.flags.f_contiguous and axis == arr.ndim - 1:\n            # minor tweak that can make an order-of-magnitude difference\n            # for dataframes initialized directly from 2-d ndarrays\n            # (s.t. df.values is c-contiguous and df._data.blocks[0] is its\n            # f-contiguous transpose)\n            out = np.empty(out_shape, dtype=dtype, order=\"F\")\n        else:\n            out = np.empty(out_shape, dtype=dtype)\n\n    func = _get_take_nd_function(\n        arr.ndim, arr.dtype, out.dtype, axis=axis, mask_info=mask_info\n    )\n    func(arr, indexer, out, fill_value)\n\n    if flip_order:\n        out = out.T\n    return out",
                "def take_2d_multi(\n    arr, indexer, out=None, fill_value=np.nan, mask_info=None, allow_fill=True\n):\n    \"\"\"\n    Specialized Cython take which sets NaN values in one pass\n    \"\"\"\n    if indexer is None or (indexer[0] is None and indexer[1] is None):\n        row_idx = np.arange(arr.shape[0], dtype=np.int64)\n        col_idx = np.arange(arr.shape[1], dtype=np.int64)\n        indexer = row_idx, col_idx\n        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        row_idx, col_idx = indexer\n        if row_idx is None:\n            row_idx = np.arange(arr.shape[0], dtype=np.int64)\n        else:\n            row_idx = ensure_int64(row_idx)\n        if col_idx is None:\n            col_idx = np.arange(arr.shape[1], dtype=np.int64)\n        else:\n            col_idx = ensure_int64(col_idx)\n        indexer = row_idx, col_idx\n        if not allow_fill:\n            dtype, fill_value = arr.dtype, arr.dtype.type()\n            mask_info = None, False\n        else:\n            # check for promotion based on types only (do this first because\n            # it's faster than computing a mask)\n            dtype, fill_value = maybe_promote(arr.dtype, fill_value)\n            if dtype != arr.dtype and (out is None or out.dtype != dtype):\n                # check if promotion is actually required based on indexer\n                if mask_info is not None:\n                    (row_mask, col_mask), (row_needs, col_needs) = mask_info\n                else:\n                    row_mask = row_idx == -1\n                    col_mask = col_idx == -1\n                    row_needs = row_mask.any()\n                    col_needs = col_mask.any()\n                    mask_info = (row_mask, col_mask), (row_needs, col_needs)\n                if row_needs or col_needs:\n                    if out is not None and out.dtype != dtype:\n                        raise TypeError(\"Incompatible type for fill_value\")\n                else:\n                    # if not, then depromote, set fill_value to dummy\n                    # (it won't be used but we don't want the cython code\n                    # to crash when trying to cast it to dtype)\n                    dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    # at this point, it's guaranteed that dtype can hold both the arr values\n    # and the fill_value\n    if out is None:\n        out_shape = len(row_idx), len(col_idx)\n        out = np.empty(out_shape, dtype=dtype)\n\n    func = _take_2d_multi_dict.get((arr.dtype.name, out.dtype.name), None)\n    if func is None and arr.dtype != out.dtype:\n        func = _take_2d_multi_dict.get((out.dtype.name, out.dtype.name), None)\n        if func is not None:\n            func = _convert_wrapper(func, out.dtype)\n    if func is None:\n\n        def func(arr, indexer, out, fill_value=np.nan):\n            _take_2d_multi_object(\n                arr, indexer, out, fill_value=fill_value, mask_info=mask_info\n            )\n\n    func(arr, indexer, out=out, fill_value=fill_value)\n    return out",
                "def searchsorted(arr, value, side=\"left\", sorter=None):\n    \"\"\"\n    Find indices where elements should be inserted to maintain order.\n\n    .. versionadded:: 0.25.0\n\n    Find the indices into a sorted array `arr` (a) such that, if the\n    corresponding elements in `value` were inserted before the indices,\n    the order of `arr` would be preserved.\n\n    Assuming that `arr` is sorted:\n\n    ======  ================================\n    `side`  returned index `i` satisfies\n    ======  ================================\n    left    ``arr[i-1] < value <= self[i]``\n    right   ``arr[i-1] <= value < self[i]``\n    ======  ================================\n\n    Parameters\n    ----------\n    arr: array-like\n        Input array. If `sorter` is None, then it must be sorted in\n        ascending order, otherwise `sorter` must be an array of indices\n        that sort it.\n    value : array_like\n        Values to insert into `arr`.\n    side : {'left', 'right'}, optional\n        If 'left', the index of the first suitable location found is given.\n        If 'right', return the last such index.  If there is no suitable\n        index, return either 0 or N (where N is the length of `self`).\n    sorter : 1-D array_like, optional\n        Optional array of integer indices that sort array a into ascending\n        order. They are typically the result of argsort.\n\n    Returns\n    -------\n    array of ints\n        Array of insertion points with the same shape as `value`.\n\n    See Also\n    --------\n    numpy.searchsorted : Similar method from NumPy.\n    \"\"\"\n    if sorter is not None:\n        sorter = ensure_platform_int(sorter)\n\n    if (\n        isinstance(arr, np.ndarray)\n        and is_integer_dtype(arr)\n        and (is_integer(value) or is_integer_dtype(value))\n    ):\n        # if `arr` and `value` have different dtypes, `arr` would be\n        # recast by numpy, causing a slow search.\n        # Before searching below, we therefore try to give `value` the\n        # same dtype as `arr`, while guarding against integer overflows.\n        iinfo = np.iinfo(arr.dtype.type)\n        value_arr = np.array([value]) if is_scalar(value) else np.array(value)\n        if (value_arr >= iinfo.min).all() and (value_arr <= iinfo.max).all():\n            # value within bounds, so no overflow, so can convert value dtype\n            # to dtype of arr\n            dtype = arr.dtype\n        else:\n            dtype = value_arr.dtype\n\n        if is_scalar(value):\n            value = dtype.type(value)\n        else:\n            value = array(value, dtype=dtype)\n    elif not (\n        is_object_dtype(arr) or is_numeric_dtype(arr) or is_categorical_dtype(arr)\n    ):\n        from pandas.core.series import Series\n\n        # E.g. if `arr` is an array with dtype='datetime64[ns]'\n        # and `value` is a pd.Timestamp, we may need to convert value\n        value_ser = Series(value)._values\n        value = value_ser[0] if is_scalar(value) else value_ser\n\n    result = arr.searchsorted(value, side=side, sorter=sorter)\n    return result",
                "def diff(arr, n: int, axis: int = 0):\n    \"\"\"\n    difference of n between self,\n    analogous to s-s.shift(n)\n\n    Parameters\n    ----------\n    arr : ndarray\n    n : int\n        number of periods\n    axis : int\n        axis to shift on\n\n    Returns\n    -------\n    shifted\n    \"\"\"\n\n    n = int(n)\n    na = np.nan\n    dtype = arr.dtype\n\n    is_timedelta = False\n    if needs_i8_conversion(arr):\n        dtype = np.float64\n        arr = arr.view(\"i8\")\n        na = iNaT\n        is_timedelta = True\n\n    elif is_bool_dtype(dtype):\n        dtype = np.object_\n\n    elif is_integer_dtype(dtype):\n        dtype = np.float64\n\n    dtype = np.dtype(dtype)\n    out_arr = np.empty(arr.shape, dtype=dtype)\n\n    na_indexer = [slice(None)] * arr.ndim\n    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n    out_arr[tuple(na_indexer)] = na\n\n    if arr.ndim == 2 and arr.dtype.name in _diff_special:\n        f = _diff_special[arr.dtype.name]\n        f(arr, out_arr, n, axis)\n    else:\n        # To keep mypy happy, _res_indexer is a list while res_indexer is\n        #  a tuple, ditto for lag_indexer.\n        _res_indexer = [slice(None)] * arr.ndim\n        _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n        res_indexer = tuple(_res_indexer)\n\n        _lag_indexer = [slice(None)] * arr.ndim\n        _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n        lag_indexer = tuple(_lag_indexer)\n\n        # need to make sure that we account for na for datelike/timedelta\n        # we don't actually want to subtract these i8 numbers\n        if is_timedelta:\n            res = arr[res_indexer]\n            lag = arr[lag_indexer]\n\n            mask = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n            if mask.any():\n                res = res.copy()\n                res[mask] = 0\n                lag = lag.copy()\n                lag[mask] = 0\n\n            result = res - lag\n            result[mask] = na\n            out_arr[res_indexer] = result\n        else:\n            out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]\n\n    if is_timedelta:\n        out_arr = out_arr.astype(\"int64\").view(\"timedelta64[ns]\")\n\n    return out_arr",
                "def _interpolate(a, b, fraction):\n    \"\"\"Returns the point at the given fraction between a and b, where\n    'fraction' must be between 0 and 1.\n    \"\"\"\n    return a + (b - a) * fraction",
                "def _get_score(at):\n    if len(values) == 0:\n        return np.nan\n\n    idx = at * (len(values) - 1)\n    if idx % 1 == 0:\n        score = values[int(idx)]\n    else:\n        if interpolation_method == \"fraction\":\n            score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n        elif interpolation_method == \"lower\":\n            score = values[np.floor(idx)]\n        elif interpolation_method == \"higher\":\n            score = values[np.ceil(idx)]\n        else:\n            raise ValueError(\n                \"interpolation_method can only be 'fraction' \"\n                \", 'lower' or 'higher'\"\n            )\n\n    return score",
                "def __init__(self, obj, n, keep):\n    self.obj = obj\n    self.n = n\n    self.keep = keep\n\n    if self.keep not in (\"first\", \"last\", \"all\"):\n        raise ValueError('keep must be either \"first\", \"last\" or \"all\"')",
                "def nlargest(self):\n    return self.compute(\"nlargest\")",
                "def nsmallest(self):\n    return self.compute(\"nsmallest\")",
                "@staticmethod\ndef is_valid_dtype_n_method(dtype):\n    \"\"\"\n    Helper function to determine if dtype is valid for\n    nsmallest/nlargest methods\n    \"\"\"\n    return (\n        is_numeric_dtype(dtype) and not is_complex_dtype(dtype)\n    ) or needs_i8_conversion(dtype)",
                "def compute(self, method):\n\n    n = self.n\n    dtype = self.obj.dtype\n    if not self.is_valid_dtype_n_method(dtype):\n        raise TypeError(\n            \"Cannot use method '{method}' with \"\n            \"dtype {dtype}\".format(method=method, dtype=dtype)\n        )\n\n    if n <= 0:\n        return self.obj[[]]\n\n    dropped = self.obj.dropna()\n\n    # slow method\n    if n >= len(self.obj):\n\n        reverse_it = self.keep == \"last\" or method == \"nlargest\"\n        ascending = method == \"nsmallest\"\n        slc = np.s_[::-1] if reverse_it else np.s_[:]\n        return dropped[slc].sort_values(ascending=ascending).head(n)\n\n    # fast method\n    arr, pandas_dtype, _ = _ensure_data(dropped.values)\n    if method == \"nlargest\":\n        arr = -arr\n        if is_integer_dtype(pandas_dtype):\n            # GH 21426: ensure reverse ordering at boundaries\n            arr -= 1\n\n        elif is_bool_dtype(pandas_dtype):\n            # GH 26154: ensure False is smaller than True\n            arr = 1 - (-arr)\n\n    if self.keep == \"last\":\n        arr = arr[::-1]\n\n    narr = len(arr)\n    n = min(n, narr)\n\n    kth_val = algos.kth_smallest(arr.copy(), n - 1)\n    ns, = np.nonzero(arr <= kth_val)\n    inds = ns[arr[ns].argsort(kind=\"mergesort\")]\n\n    if self.keep != \"all\":\n        inds = inds[:n]\n\n    if self.keep == \"last\":\n        # reverse indices\n        inds = narr - 1 - inds\n\n    return dropped.iloc[inds]",
                "def __init__(self, obj, n, keep, columns):\n    super().__init__(obj, n, keep)\n    if not is_list_like(columns) or isinstance(columns, tuple):\n        columns = [columns]\n    columns = list(columns)\n    self.columns = columns",
                "def compute(self, method):\n\n    from pandas import Int64Index\n\n    n = self.n\n    frame = self.obj\n    columns = self.columns\n\n    for column in columns:\n        dtype = frame[column].dtype\n        if not self.is_valid_dtype_n_method(dtype):\n            raise TypeError(\n                (\n                    \"Column {column!r} has dtype {dtype}, cannot use method \"\n                    \"{method!r} with this dtype\"\n                ).format(column=column, dtype=dtype, method=method)\n            )\n\n    def get_indexer(current_indexer, other_indexer):\n        \"\"\"Helper function to concat `current_indexer` and `other_indexer`\n        depending on `method`\n        \"\"\"\n        if method == \"nsmallest\":\n            return current_indexer.append(other_indexer)\n        else:\n            return other_indexer.append(current_indexer)\n\n    # Below we save and reset the index in case index contains duplicates\n    original_index = frame.index\n    cur_frame = frame = frame.reset_index(drop=True)\n    cur_n = n\n    indexer = Int64Index([])\n\n    for i, column in enumerate(columns):\n        # For each column we apply method to cur_frame[column].\n        # If it's the last column or if we have the number of\n        # results desired we are done.\n        # Otherwise there are duplicates of the largest/smallest\n        # value and we need to look at the rest of the columns\n        # to determine which of the rows with the largest/smallest\n        # value in the column to keep.\n        series = cur_frame[column]\n        is_last_column = len(columns) - 1 == i\n        values = getattr(series, method)(\n            cur_n, keep=self.keep if is_last_column else \"all\"\n        )\n\n        if is_last_column or len(values) <= cur_n:\n            indexer = get_indexer(indexer, values.index)\n            break\n\n        # Now find all values which are equal to\n        # the (nsmallest: largest)/(nlarrgest: smallest)\n        # from our series.\n        border_value = values == values[values.index[-1]]\n\n        # Some of these values are among the top-n\n        # some aren't.\n        unsafe_values = values[border_value]\n\n        # These values are definitely among the top-n\n        safe_values = values[~border_value]\n        indexer = get_indexer(indexer, safe_values.index)\n\n        # Go on and separate the unsafe_values on the remaining\n        # columns.\n        cur_frame = cur_frame.loc[unsafe_values.index]\n        cur_n = n - len(indexer)\n\n    frame = frame.take(indexer)\n\n    # Restore the index on frame\n    frame.index = original_index.take(indexer)\n\n    # If there is only one column, the frame is already sorted.\n    if len(columns) == 1:\n        return frame\n\n    ascending = method == \"nsmallest\"\n\n    return frame.sort_values(columns, ascending=ascending, kind=\"mergesort\")",
                "def wrapper(arr, indexer, out, fill_value=np.nan):\n    if arr_dtype is not None:\n        arr = arr.view(arr_dtype)\n    if out_dtype is not None:\n        out = out.view(out_dtype)\n    if fill_wrap is not None:\n        fill_value = fill_wrap(fill_value)\n    f(arr, indexer, out, fill_value=fill_value)",
                "def wrapper(arr, indexer, out, fill_value=np.nan):\n    arr = arr.astype(conv_dtype)\n    f(arr, indexer, out, fill_value=fill_value)",
                "def func(arr, indexer, out, fill_value=np.nan):\n    indexer = ensure_int64(indexer)\n    _take_nd_object(\n        arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n    )",
                "def get_indexer(current_indexer, other_indexer):\n    \"\"\"Helper function to concat `current_indexer` and `other_indexer`\n    depending on `method`\n    \"\"\"\n    if method == \"nsmallest\":\n        return current_indexer.append(other_indexer)\n    else:\n        return other_indexer.append(current_indexer)",
                "def func(arr, indexer, out, fill_value=np.nan):\n    _take_2d_multi_object(\n        arr, indexer, out, fill_value=fill_value, mask_info=mask_info\n    )"
            ],
            "inscope_function_signatures": [
                "_ensure_data(values, dtype=None)",
                "_reconstruct_data(values, dtype, original)",
                "_ensure_arraylike(values)",
                "_get_hashtable_algo(values)",
                "_get_data_algo(values, func_map)",
                "match(to_match, values, na_sentinel=-1)",
                "unique(values)",
                "isin(comps, values)",
                "_factorize_array(values, na_sentinel=-1, size_hint=None, na_value=None)",
                "factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None)",
                "value_counts(values, sort=True, ascending=False, normalize=False, bins=None, dropna=True)",
                "_value_counts_arraylike(values, dropna)",
                "duplicated(values, keep='first')",
                "mode(values, dropna: bool=True)",
                "rank(values, axis=0, method='average', na_option='keep', ascending=True, pct=False)",
                "checked_add_with_arr(arr, b, arr_mask=None, b_mask=None)",
                "quantile(x, q, interpolation_method='fraction')",
                "_view_wrapper(f, arr_dtype=None, out_dtype=None, fill_wrap=None)",
                "_convert_wrapper(f, conv_dtype)",
                "_take_2d_multi_object(arr, indexer, out, fill_value, mask_info)",
                "_take_nd_object(arr, indexer, out, axis, fill_value, mask_info)",
                "_get_take_nd_function(ndim, arr_dtype, out_dtype, axis=0, mask_info=None)",
                "take(arr, indices, axis=0, allow_fill=False, fill_value=None)",
                "take_nd(arr, indexer, axis=0, out=None, fill_value=np.nan, mask_info=None, allow_fill=True)",
                "take_2d_multi(arr, indexer, out=None, fill_value=np.nan, mask_info=None, allow_fill=True)",
                "searchsorted(arr, value, side='left', sorter=None)",
                "diff(arr, n: int, axis: int=0)",
                "_interpolate(a, b, fraction)",
                "_get_score(at)",
                "__init__(self, obj, n, keep)",
                "nlargest(self)",
                "nsmallest(self)",
                "is_valid_dtype_n_method(dtype)",
                "compute(self, method)",
                "__init__(self, obj, n, keep, columns)",
                "compute(self, method)",
                "wrapper(arr, indexer, out, fill_value=np.nan)",
                "wrapper(arr, indexer, out, fill_value=np.nan)",
                "func(arr, indexer, out, fill_value=np.nan)",
                "get_indexer(current_indexer, other_indexer)",
                "func(arr, indexer, out, fill_value=np.nan)"
            ],
            "variables_in_file": {
                "_shared_docs": [
                    635,
                    53,
                    510
                ],
                "is_object_dtype": [
                    1863,
                    98,
                    86,
                    455
                ],
                "dtype": [
                    86,
                    88,
                    92,
                    94,
                    96,
                    98,
                    100,
                    1130,
                    1131,
                    1652,
                    117,
                    118,
                    119,
                    1656,
                    121,
                    1661,
                    1662,
                    125,
                    1152,
                    1153,
                    130,
                    126,
                    1156,
                    1671,
                    137,
                    138,
                    653,
                    1677,
                    143,
                    655,
                    145,
                    148,
                    152,
                    158,
                    677,
                    1701,
                    1703,
                    180,
                    181,
                    182,
                    183,
                    188,
                    189,
                    1728,
                    1741,
                    1746,
                    1747,
                    1236,
                    1237,
                    1242,
                    1758,
                    1764,
                    232,
                    1770,
                    245,
                    253,
                    781,
                    783,
                    293,
                    294,
                    830,
                    1854,
                    1856,
                    1859,
                    1861,
                    867,
                    1910,
                    1914,
                    1919,
                    1920,
                    1922,
                    1923,
                    1925,
                    1926,
                    397,
                    401,
                    447,
                    448
                ],
                "ensure_object": [
                    112,
                    162,
                    99,
                    87
                ],
                "np.asarray": [
                    161,
                    99,
                    1059,
                    1097,
                    205,
                    1648,
                    1587,
                    1589,
                    87,
                    91
                ],
                "np": [
                    1920,
                    1923,
                    1925,
                    1926,
                    1418,
                    1419,
                    1421,
                    1169,
                    161,
                    802,
                    803,
                    1059,
                    1316,
                    1443,
                    1191,
                    1064,
                    1444,
                    1446,
                    1701,
                    1703,
                    1329,
                    1074,
                    1587,
                    1841,
                    437,
                    1589,
                    1719,
                    1849,
                    1850,
                    1083,
                    1468,
                    1085,
                    1469,
                    959,
                    1471,
                    1725,
                    962,
                    1726,
                    1604,
                    1732,
                    456,
                    969,
                    1097,
                    971,
                    1099,
                    205,
                    973,
                    975,
                    1736,
                    87,
                    91,
                    989,
                    1501,
                    991,
                    994,
                    99,
                    740,
                    996,
                    872,
                    105,
                    1770,
                    1648,
                    1393,
                    1394,
                    1651,
                    1396,
                    1779,
                    1909,
                    1914
                ],
                "values": [
                    1064,
                    1073,
                    1076,
                    1078,
                    1081,
                    1083,
                    1085,
                    87,
                    88,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    106,
                    107,
                    112,
                    116,
                    121,
                    124,
                    125,
                    126,
                    129,
                    130,
                    133,
                    647,
                    136,
                    137,
                    648,
                    650,
                    651,
                    652,
                    142,
                    143,
                    655,
                    145,
                    147,
                    150,
                    151,
                    667,
                    156,
                    158,
                    161,
                    162,
                    181,
                    183,
                    187,
                    189,
                    191,
                    198,
                    199,
                    201,
                    202,
                    203,
                    205,
                    206,
                    718,
                    724,
                    725,
                    232,
                    744,
                    747,
                    239,
                    752,
                    245,
                    1270,
                    250,
                    251,
                    1274,
                    253,
                    1275,
                    1281,
                    259,
                    1285,
                    264,
                    1288,
                    779,
                    780,
                    781,
                    786,
                    797,
                    799,
                    292,
                    293,
                    296,
                    830,
                    832,
                    854,
                    855,
                    858,
                    859,
                    860,
                    861,
                    863,
                    864,
                    865,
                    867,
                    870,
                    390,
                    392,
                    904,
                    394,
                    905,
                    396,
                    397,
                    907,
                    399,
                    400,
                    913,
                    914,
                    916,
                    429,
                    433,
                    437,
                    438,
                    443,
                    448,
                    451,
                    459,
                    463,
                    468,
                    472,
                    475,
                    499,
                    501,
                    503
                ],
                "is_bool_dtype": [
                    88,
                    1180,
                    182,
                    1919
                ],
                "astype": [
                    91
                ],
                "is_signed_integer_dtype": [
                    92
                ],
                "ensure_int64": [
                    1734,
                    1738,
                    1654,
                    156,
                    93,
                    1502
                ],
                "is_unsigned_integer_dtype": [
                    94
                ],
                "ensure_uint64": [
                    95
                ],
                "is_float_dtype": [
                    96,
                    466
                ],
                "ensure_float64": [
                    97,
                    106
                ],
                "is_complex_dtype": [
                    1130,
                    100
                ],
                "catch_warnings": [
                    104
                ],
                "simplefilter": [
                    105
                ],
                "np.ComplexWarning": [
                    105
                ],
                "TypeError": [
                    1154,
                    423,
                    1672,
                    873,
                    727,
                    109,
                    462,
                    430,
                    726,
                    471,
                    1238,
                    924,
                    1759
                ],
                "ValueError": [
                    109,
                    462,
                    471,
                    1115,
                    1087
                ],
                "OverflowError": [
                    1001,
                    109,
                    462
                ],
                "needs_i8_conversion": [
                    1913,
                    1131,
                    116,
                    783
                ],
                "is_period_dtype": [
                    121,
                    660,
                    117
                ],
                "is_datetime64_any_dtype": [
                    658,
                    118
                ],
                "is_timedelta64_dtype": [
                    659,
                    126,
                    119
                ],
                "PeriodIndex": [
                    124
                ],
                "values.dtype": [
                    137,
                    130,
                    125,
                    143
                ],
                "TimedeltaIndex": [
                    129
                ],
                "values.ndim": [
                    904,
                    913,
                    133
                ],
                "is_datetime64_ns_dtype": [
                    133
                ],
                "asi8": [
                    136,
                    138
                ],
                "values.view": [
                    136
                ],
                "DatetimeIndex": [
                    142
                ],
                "values.asi8": [
                    145
                ],
                "is_categorical_dtype": [
                    1863,
                    147,
                    148,
                    440,
                    250,
                    858
                ],
                "getattr": [
                    869,
                    651,
                    718,
                    150,
                    1270,
                    796,
                    831
                ],
                "values.codes": [
                    151
                ],
                "np.object": [
                    161
                ],
                "is_extension_array_dtype": [
                    392,
                    744,
                    650,
                    1642,
                    180
                ],
                "_from_sequence": [
                    181
                ],
                "dtype.construct_array_type": [
                    181
                ],
                "values.astype": [
                    459,
                    463,
                    468,
                    183,
                    472,
                    187,
                    189
                ],
                "isinstance": [
                    1222,
                    680,
                    201,
                    682,
                    1645,
                    1841,
                    754,
                    437,
                    186,
                    859
                ],
                "original": [
                    677,
                    805,
                    648,
                    680,
                    681,
                    682,
                    396,
                    653,
                    780,
                    876,
                    401,
                    658,
                    659,
                    660,
                    662,
                    855,
                    186
                ],
                "ABCIndexClass": [
                    680,
                    186,
                    1645
                ],
                "object": [
                    463,
                    464,
                    472,
                    473,
                    187
                ],
                "is_array_like": [
                    1586,
                    198
                ],
                "inferred": [
                    200,
                    199
                ],
                "lib.infer_dtype": [
                    259,
                    239,
                    199
                ],
                "lib": [
                    259,
                    239,
                    199
                ],
                "tuple": [
                    1222,
                    201,
                    1930,
                    1940,
                    1944,
                    1372,
                    1695
                ],
                "list": [
                    1224,
                    202,
                    1693,
                    438
                ],
                "construct_1d_object_array_from_listlike": [
                    203,
                    438
                ],
                "_hashtables": [
                    209,
                    499,
                    244
                ],
                "htable.Float64HashTable": [
                    210
                ],
                "htable": [
                    451,
                    293,
                    869,
                    295,
                    397,
                    461,
                    399,
                    210,
                    211,
                    212,
                    213,
                    214,
                    244,
                    245,
                    470,
                    786,
                    796,
                    831
                ],
                "htable.Float64Vector": [
                    210
                ],
                "htable.UInt64HashTable": [
                    211
                ],
                "htable.UInt64Vector": [
                    211
                ],
                "htable.Int64HashTable": [
                    212
                ],
                "htable.Int64Vector": [
                    212
                ],
                "htable.StringHashTable": [
                    213
                ],
                "htable.ObjectVector": [
                    213,
                    214
                ],
                "htable.PyObjectHashTable": [
                    214
                ],
                "ndtype": [
                    867,
                    260,
                    293,
                    262,
                    869,
                    232,
                    234,
                    397,
                    781,
                    240,
                    830,
                    242,
                    244,
                    245,
                    796,
                    253,
                    254,
                    831
                ],
                "_ensure_data": [
                    448,
                    867,
                    294,
                    232,
                    781,
                    655,
                    1173,
                    253,
                    830,
                    447
                ],
                "table": [
                    295,
                    296,
                    297,
                    399,
                    400,
                    244,
                    245,
                    501,
                    502
                ],
                "values._values_for_rank": [
                    251
                ],
                "f": [
                    262,
                    264,
                    905,
                    906,
                    1933,
                    1934,
                    914,
                    915,
                    796,
                    797,
                    1323,
                    1331,
                    831,
                    832,
                    451,
                    456,
                    461,
                    470,
                    475,
                    869,
                    870
                ],
                "func_map.get": [
                    262
                ],
                "func_map": [
                    262
                ],
                "com.asarray_tuplesafe": [
                    292
                ],
                "com": [
                    292,
                    445
                ],
                "_": [
                    448,
                    293,
                    294,
                    397,
                    655,
                    499,
                    1173,
                    447
                ],
                "_get_hashtable_algo": [
                    293,
                    397
                ],
                "to_match": [
                    297,
                    294,
                    295
                ],
                "min": [
                    1188,
                    996,
                    989,
                    295
                ],
                "len": [
                    1187,
                    740,
                    455,
                    295,
                    1352,
                    1354,
                    1694,
                    1769,
                    1165,
                    1294,
                    399,
                    1073,
                    1076,
                    501,
                    1269,
                    1302,
                    1274,
                    670
                ],
                "table.map_locations": [
                    296
                ],
                "result": [
                    1959,
                    1960,
                    297,
                    1961,
                    305,
                    306,
                    308,
                    1594,
                    1599,
                    1600,
                    1098,
                    1099,
                    1100,
                    1872,
                    1873,
                    730,
                    731,
                    732,
                    733,
                    736,
                    737,
                    870,
                    872,
                    747,
                    748,
                    749,
                    876,
                    877,
                    756,
                    759,
                    762,
                    764
                ],
                "table.lookup": [
                    297
                ],
                "na_sentinel": [
                    674,
                    299,
                    652,
                    305,
                    503,
                    667
                ],
                "replace": [
                    305
                ],
                "Series": [
                    747,
                    877,
                    1869,
                    305,
                    724,
                    756,
                    859,
                    860
                ],
                "result.ravel": [
                    305
                ],
                "result.values.reshape": [
                    306
                ],
                "result.values": [
                    736,
                    306,
                    749
                ],
                "result.shape": [
                    306
                ],
                "_ensure_arraylike": [
                    854,
                    779,
                    390,
                    647
                ],
                "values.unique": [
                    394
                ],
                "uniques": [
                    673,
                    674,
                    677,
                    681,
                    652,
                    685,
                    687,
                    400,
                    401,
                    402,
                    502,
                    666,
                    507,
                    670
                ],
                "table.unique": [
                    400
                ],
                "_reconstruct_data": [
                    401,
                    805,
                    876,
                    677
                ],
                "unique1d": [
                    405
                ],
                "unique": [
                    405
                ],
                "is_list_like": [
                    1222,
                    429,
                    422
                ],
                "comps": [
                    422,
                    455,
                    457,
                    426,
                    460,
                    464,
                    466,
                    469,
                    475,
                    440,
                    473,
                    443,
                    445,
                    447
                ],
                "format": [
                    1155,
                    869,
                    424,
                    874,
                    431,
                    1239,
                    796,
                    831
                ],
                "__name__": [
                    433,
                    426
                ],
                "type": [
                    433,
                    426
                ],
                "ABCIndex": [
                    437
                ],
                "ABCSeries": [
                    682,
                    1645,
                    437
                ],
                "np.ndarray": [
                    1841,
                    437
                ],
                "comps._values.isin": [
                    443
                ],
                "comps._values": [
                    443
                ],
                "com.values_from_object": [
                    445
                ],
                "htable.ismember_object": [
                    451
                ],
                "x": [
                    1059,
                    451,
                    1060,
                    1062,
                    456,
                    1064,
                    1098,
                    461,
                    470
                ],
                "np.in1d": [
                    456
                ],
                "y": [
                    456,
                    461,
                    470
                ],
                "is_integer_dtype": [
                    1922,
                    457,
                    1842,
                    1843,
                    1176
                ],
                "comps.astype": [
                    464,
                    473,
                    460,
                    469
                ],
                "htable.ismember_int64": [
                    461
                ],
                "htable.ismember_float64": [
                    470
                ],
                "hash_klass": [
                    499,
                    501
                ],
                "_get_data_algo": [
                    905,
                    914,
                    499
                ],
                "size_hint": [
                    667,
                    501
                ],
                "labels": [
                    673,
                    674,
                    652,
                    687,
                    502,
                    666,
                    506,
                    507
                ],
                "table.factorize": [
                    502
                ],
                "na_value": [
                    664,
                    667,
                    662,
                    503
                ],
                "ensure_platform_int": [
                    1368,
                    506,
                    1838
                ],
                "values.factorize": [
                    652
                ],
                "original.dtype": [
                    805,
                    876,
                    653,
                    662
                ],
                "na_value_for_dtype": [
                    662
                ],
                "_factorize_array": [
                    666
                ],
                "sort": [
                    670,
                    758
                ],
                "safe_sort": [
                    673
                ],
                "original._shallow_copy": [
                    681
                ],
                "Index": [
                    754,
                    755,
                    685
                ],
                "Substitution": [
                    605
                ],
                "dedent": [
                    621,
                    628,
                    613,
                    606
                ],
                "Appender": [
                    635
                ],
                "deprecate_kwarg": [
                    636
                ],
                "name": [
                    748,
                    756,
                    718
                ],
                "bins": [
                    720,
                    725
                ],
                "ii": [
                    730,
                    740,
                    725
                ],
                "cut": [
                    725
                ],
                "ii.value_counts": [
                    730
                ],
                "dropna": [
                    736,
                    800,
                    870,
                    747,
                    861,
                    752,
                    786,
                    788,
                    730,
                    860,
                    797,
                    863
                ],
                "result.index.notna": [
                    731
                ],
                "result.index": [
                    731,
                    732
                ],
                "result.index.astype": [
                    732
                ],
                "result.sort_index": [
                    733
                ],
                "all": [
                    736,
                    1851
                ],
                "result.iloc": [
                    737
                ],
                "counts": [
                    803,
                    740,
                    807,
                    749,
                    752,
                    786,
                    756,
                    790,
                    762,
                    797
                ],
                "np.array": [
                    1850,
                    1099,
                    740
                ],
                "_values.value_counts": [
                    747
                ],
                "_values": [
                    747,
                    1869
                ],
                "result.name": [
                    748
                ],
                "keys": [
                    801,
                    802,
                    805,
                    807,
                    752,
                    786,
                    754,
                    755,
                    756,
                    789,
                    790,
                    797
                ],
                "_value_counts_arraylike": [
                    752
                ],
                "result.sort_values": [
                    759
                ],
                "ascending": [
                    759,
                    909,
                    1168,
                    1170,
                    919,
                    1305,
                    1307
                ],
                "normalize": [
                    761
                ],
                "float": [
                    762
                ],
                "counts.sum": [
                    762
                ],
                "htable.value_count_int64": [
                    786
                ],
                "msk": [
                    789,
                    790
                ],
                "iNaT": [
                    1916,
                    789
                ],
                "mask": [
                    1665,
                    1667,
                    1668,
                    1669,
                    799,
                    800,
                    1953,
                    1952,
                    803,
                    1060,
                    1955,
                    1062,
                    1957,
                    1960,
                    1361,
                    1363,
                    1364,
                    1371,
                    864,
                    865
                ],
                "isna": [
                    801,
                    1060,
                    799
                ],
                "mask.any": [
                    800,
                    1668,
                    1953,
                    1364
                ],
                "any": [
                    801,
                    994,
                    995,
                    989,
                    991
                ],
                "np.insert": [
                    802,
                    803
                ],
                "np.NaN": [
                    802
                ],
                "mask.sum": [
                    803
                ],
                "keep": [
                    832,
                    1112,
                    1221
                ],
                "bool": [
                    835,
                    975
                ],
                "values.values.mode": [
                    860
                ],
                "values.values": [
                    860
                ],
                "values.name": [
                    860
                ],
                "values.mode": [
                    861
                ],
                "is_datetimelike": [
                    863
                ],
                "values.isnull": [
                    864
                ],
                "np.sort": [
                    872,
                    1064
                ],
                "warn": [
                    874
                ],
                "e": [
                    874
                ],
                "_rank1d_functions": [
                    905,
                    1005
                ],
                "ranks": [
                    906,
                    915,
                    926
                ],
                "method": [
                    1249,
                    1156,
                    908,
                    1167,
                    1168,
                    918,
                    1174,
                    1270,
                    1305,
                    1242
                ],
                "na_option": [
                    920,
                    910
                ],
                "pct": [
                    921,
                    911
                ],
                "_rank2d_functions": [
                    914,
                    1012
                ],
                "axis": [
                    1929,
                    1934,
                    1939,
                    917,
                    1686,
                    1943,
                    1694,
                    1696,
                    1706,
                    1593,
                    1595,
                    1599,
                    1482,
                    1493,
                    1367,
                    1368,
                    1371,
                    1504,
                    1651
                ],
                "b2": [
                    994,
                    996,
                    985,
                    986,
                    989,
                    959,
                    991
                ],
                "np.broadcast_to": [
                    962,
                    959
                ],
                "b": [
                    1002,
                    1070,
                    959
                ],
                "arr.shape": [
                    962,
                    1732,
                    1926,
                    1725,
                    1736,
                    975,
                    1651,
                    1367,
                    1593,
                    1693,
                    1726,
                    959
                ],
                "arr": [
                    1586,
                    1587,
                    1593,
                    1595,
                    1599,
                    1642,
                    1643,
                    1645,
                    1646,
                    1648,
                    1651,
                    1652,
                    1656,
                    1661,
                    1662,
                    1677,
                    1680,
                    1681,
                    1173,
                    1685,
                    1175,
                    1686,
                    1178,
                    1693,
                    1182,
                    1696,
                    1185,
                    1187,
                    1190,
                    1191,
                    1192,
                    1706,
                    1708,
                    1725,
                    1726,
                    1728,
                    1732,
                    1736,
                    1741,
                    1746,
                    1747,
                    1764,
                    1772,
                    1773,
                    1781,
                    1784,
                    1318,
                    1323,
                    1841,
                    1330,
                    1331,
                    1842,
                    1849,
                    1854,
                    1863,
                    1356,
                    1872,
                    1365,
                    1366,
                    1367,
                    1368,
                    1370,
                    1910,
                    1913,
                    1915,
                    1926,
                    1928,
                    1932,
                    1933,
                    1934,
                    1938,
                    1942,
                    1949,
                    1950,
                    1952,
                    1963,
                    959,
                    962,
                    975,
                    989,
                    991,
                    1504,
                    994,
                    996,
                    1002
                ],
                "b_mask": [
                    960,
                    962,
                    972
                ],
                "b2_mask": [
                    962,
                    964,
                    968,
                    969,
                    973
                ],
                "arr_mask": [
                    968,
                    969,
                    970,
                    971
                ],
                "not_nan": [
                    994,
                    996,
                    969,
                    971,
                    973,
                    975,
                    976,
                    989,
                    991
                ],
                "np.logical_not": [
                    969,
                    971,
                    973
                ],
                "np.empty": [
                    1701,
                    1926,
                    1703,
                    1770,
                    975
                ],
                "not_nan.fill": [
                    976
                ],
                "mask1": [
                    985,
                    994,
                    988
                ],
                "mask2": [
                    986,
                    996,
                    990
                ],
                "mask1.any": [
                    988
                ],
                "to_raise": [
                    1000,
                    993,
                    989,
                    991
                ],
                "np.iinfo": [
                    994,
                    996,
                    1849,
                    989,
                    991
                ],
                "np.int64": [
                    994,
                    996,
                    1732,
                    1446,
                    1725,
                    1736,
                    1471,
                    1421,
                    1651,
                    1396,
                    989,
                    1726,
                    991
                ],
                "mask2.any": [
                    990
                ],
                "max": [
                    994,
                    991
                ],
                "algos.rank_1d_float64": [
                    1006
                ],
                "algos": [
                    1190,
                    1881,
                    1882,
                    1883,
                    1884,
                    1885,
                    1886,
                    1376,
                    1377,
                    1378,
                    1379,
                    1380,
                    1381,
                    1382,
                    1383,
                    1384,
                    1385,
                    1386,
                    1387,
                    1388,
                    1389,
                    1390,
                    1391,
                    1392,
                    1393,
                    1394,
                    1396,
                    1401,
                    1402,
                    1403,
                    1404,
                    1405,
                    1406,
                    1407,
                    1408,
                    1409,
                    1410,
                    1411,
                    1412,
                    1413,
                    1414,
                    1415,
                    1416,
                    1417,
                    1418,
                    1419,
                    1421,
                    1426,
                    1427,
                    1428,
                    1429,
                    1430,
                    1431,
                    1432,
                    1433,
                    1434,
                    1435,
                    1436,
                    1437,
                    1438,
                    1439,
                    1440,
                    1441,
                    1442,
                    1443,
                    1444,
                    1446,
                    1451,
                    1452,
                    1453,
                    1454,
                    1455,
                    1456,
                    1457,
                    1458,
                    1459,
                    1460,
                    1461,
                    1462,
                    1463,
                    1464,
                    1465,
                    1466,
                    1467,
                    1468,
                    1469,
                    1471,
                    1006,
                    1007,
                    1008,
                    1009,
                    1013,
                    1014,
                    1015,
                    1016
                ],
                "algos.rank_1d_int64": [
                    1007
                ],
                "algos.rank_1d_uint64": [
                    1008
                ],
                "algos.rank_1d_object": [
                    1009
                ],
                "algos.rank_2d_float64": [
                    1013
                ],
                "algos.rank_2d_int64": [
                    1014
                ],
                "algos.rank_2d_uint64": [
                    1015
                ],
                "algos.rank_2d_object": [
                    1016
                ],
                "a": [
                    1070
                ],
                "fraction": [
                    1070
                ],
                "np.nan": [
                    1316,
                    1604,
                    1329,
                    1074,
                    1779,
                    1909,
                    1719,
                    1501
                ],
                "idx": [
                    1076,
                    1077,
                    1078,
                    1081,
                    1083,
                    1085
                ],
                "at": [
                    1076
                ],
                "score": [
                    1092,
                    1078,
                    1081,
                    1083,
                    1085
                ],
                "int": [
                    1081,
                    1890,
                    1908,
                    1078
                ],
                "interpolation_method": [
                    1080,
                    1082,
                    1084
                ],
                "_interpolate": [
                    1081
                ],
                "np.floor": [
                    1083
                ],
                "np.ceil": [
                    1085
                ],
                "is_scalar": [
                    1870,
                    1850,
                    1858,
                    1094
                ],
                "q": [
                    1097,
                    1098,
                    1094,
                    1095
                ],
                "_get_score": [
                    1098,
                    1095
                ],
                "np.float64": [
                    1097,
                    1914,
                    1099,
                    1923
                ],
                "self.obj": [
                    1152,
                    1160,
                    1162,
                    1165,
                    1232,
                    1110
                ],
                "self": [
                    1152,
                    1153,
                    1160,
                    1162,
                    1165,
                    1167,
                    1184,
                    1194,
                    1197,
                    1225,
                    1231,
                    1232,
                    1233,
                    1237,
                    1110,
                    1111,
                    1112,
                    1114,
                    1118,
                    1121,
                    1271,
                    1151
                ],
                "obj": [
                    1221,
                    1110
                ],
                "self.n": [
                    1231,
                    1151,
                    1111
                ],
                "n": [
                    1188,
                    1221,
                    1190,
                    1159,
                    1257,
                    1929,
                    1195,
                    1165,
                    1294,
                    1231,
                    1934,
                    1943,
                    1170,
                    1939,
                    1908,
                    1111,
                    1151
                ],
                "self.keep": [
                    1184,
                    1194,
                    1197,
                    1167,
                    1271,
                    1112,
                    1114
                ],
                "self.compute": [
                    1121,
                    1118
                ],
                "is_numeric_dtype": [
                    1130,
                    1863
                ],
                "staticmethod": [
                    1123
                ],
                "SelectN": [
                    1204,
                    1134
                ],
                "self.obj.dtype": [
                    1152
                ],
                "self.is_valid_dtype_n_method": [
                    1153,
                    1237
                ],
                "dropped": [
                    1201,
                    1162,
                    1173,
                    1170
                ],
                "self.obj.dropna": [
                    1162
                ],
                "reverse_it": [
                    1169,
                    1167
                ],
                "slc": [
                    1169,
                    1170
                ],
                "np.s_": [
                    1169
                ],
                "head": [
                    1170
                ],
                "sort_values": [
                    1170
                ],
                "pandas_dtype": [
                    1176,
                    1180,
                    1173
                ],
                "dropped.values": [
                    1173
                ],
                "narr": [
                    1187,
                    1188,
                    1199
                ],
                "kth_val": [
                    1190,
                    1191
                ],
                "algos.kth_smallest": [
                    1190
                ],
                "arr.copy": [
                    1190
                ],
                "ns": [
                    1192,
                    1191
                ],
                "np.nonzero": [
                    1191
                ],
                "inds": [
                    1192,
                    1201,
                    1195,
                    1199
                ],
                "argsort": [
                    1192
                ],
                "dropped.iloc": [
                    1201
                ],
                "__init__": [
                    1221
                ],
                "super": [
                    1221
                ],
                "columns": [
                    1222,
                    1223,
                    1224,
                    1225,
                    1260,
                    1233,
                    1235,
                    1269,
                    1302,
                    1307
                ],
                "self.columns": [
                    1225,
                    1233
                ],
                "frame": [
                    1255,
                    1256,
                    1232,
                    1296,
                    1299,
                    1236,
                    1303,
                    1307
                ],
                "column": [
                    1260,
                    1235,
                    1236,
                    1268,
                    1242
                ],
                "current_indexer.append": [
                    1250
                ],
                "current_indexer": [
                    1250,
                    1252
                ],
                "other_indexer": [
                    1250,
                    1252
                ],
                "other_indexer.append": [
                    1252
                ],
                "original_index": [
                    1299,
                    1255
                ],
                "frame.index": [
                    1299,
                    1255
                ],
                "cur_frame": [
                    1256,
                    1268,
                    1293
                ],
                "frame.reset_index": [
                    1256
                ],
                "cur_n": [
                    1257,
                    1274,
                    1294,
                    1271
                ],
                "indexer": [
                    1667,
                    1289,
                    1294,
                    1296,
                    1299,
                    1694,
                    1323,
                    1708,
                    1331,
                    1339,
                    1724,
                    1727,
                    1730,
                    1739,
                    1363,
                    1368,
                    1502,
                    1504,
                    1258,
                    1643,
                    1650,
                    1651,
                    1781,
                    1654,
                    1784,
                    1275
                ],
                "Int64Index": [
                    1258
                ],
                "i": [
                    1352,
                    1353,
                    1260,
                    1356,
                    1269
                ],
                "enumerate": [
                    1260
                ],
                "series": [
                    1268,
                    1270
                ],
                "is_last_column": [
                    1274,
                    1269,
                    1271
                ],
                "get_indexer": [
                    1289,
                    1275
                ],
                "values.index": [
                    1281,
                    1275
                ],
                "border_value": [
                    1288,
                    1281,
                    1285
                ],
                "unsafe_values": [
                    1293,
                    1285
                ],
                "safe_values": [
                    1288,
                    1289
                ],
                "safe_values.index": [
                    1289
                ],
                "cur_frame.loc": [
                    1293
                ],
                "unsafe_values.index": [
                    1293
                ],
                "frame.take": [
                    1296
                ],
                "original_index.take": [
                    1299
                ],
                "frame.sort_values": [
                    1307
                ],
                "arr_dtype": [
                    1478,
                    1317,
                    1318
                ],
                "arr.view": [
                    1915,
                    1318
                ],
                "out_dtype": [
                    1478,
                    1319,
                    1320,
                    1489,
                    1498
                ],
                "out": [
                    1671,
                    1687,
                    1688,
                    1692,
                    1701,
                    1703,
                    1320,
                    1706,
                    1323,
                    1708,
                    1711,
                    1712,
                    1331,
                    1349,
                    1351,
                    1356,
                    1747,
                    1365,
                    1366,
                    1368,
                    1372,
                    1758,
                    1504,
                    1768,
                    1770,
                    1772,
                    1773,
                    1774,
                    1776,
                    1781,
                    1784,
                    1785,
                    1662
                ],
                "out.view": [
                    1320
                ],
                "fill_wrap": [
                    1321,
                    1322
                ],
                "fill_value": [
                    1677,
                    1784,
                    1322,
                    1323,
                    1708,
                    1331,
                    1595,
                    1728,
                    1347,
                    1349,
                    1351,
                    1741,
                    1746,
                    1372,
                    1504,
                    1764,
                    1643,
                    1652,
                    1781,
                    1656,
                    1661
                ],
                "wrapper": [
                    1333,
                    1325
                ],
                "arr.astype": [
                    1330,
                    1366
                ],
                "conv_dtype": [
                    1330
                ],
                "row_idx": [
                    1730,
                    1731,
                    1732,
                    1734,
                    1352,
                    1353,
                    1769,
                    1739,
                    1727,
                    1752,
                    1339,
                    1725,
                    1343
                ],
                "col_idx": [
                    1344,
                    1730,
                    1735,
                    1736,
                    1769,
                    1354,
                    1355,
                    1738,
                    1739,
                    1753,
                    1339,
                    1726,
                    1727
                ],
                "mask_info": [
                    1504,
                    1664,
                    1665,
                    1756,
                    1669,
                    1706,
                    1742,
                    1360,
                    1361,
                    1749,
                    1750,
                    1781,
                    1657,
                    1340,
                    1341
                ],
                "row_mask": [
                    1345,
                    1349,
                    1750,
                    1752,
                    1754,
                    1756,
                    1341,
                    1343
                ],
                "col_mask": [
                    1344,
                    1346,
                    1351,
                    1750,
                    1753,
                    1755,
                    1756,
                    1341
                ],
                "row_needs": [
                    1345,
                    1348,
                    1757,
                    1750,
                    1754,
                    1756,
                    1341
                ],
                "col_needs": [
                    1346,
                    1350,
                    1757,
                    1750,
                    1755,
                    1756,
                    1341
                ],
                "row_mask.any": [
                    1345,
                    1754
                ],
                "col_mask.any": [
                    1346,
                    1755
                ],
                "range": [
                    1352,
                    1354
                ],
                "u_": [
                    1353,
                    1356
                ],
                "j": [
                    1354,
                    1355,
                    1356
                ],
                "v": [
                    1355,
                    1356
                ],
                "needs_masking": [
                    1665,
                    1668,
                    1669,
                    1670,
                    1361,
                    1364,
                    1369
                ],
                "arr.dtype": [
                    1932,
                    1677,
                    1933,
                    1706,
                    1849,
                    1854,
                    1728,
                    1741,
                    1746,
                    1747,
                    1365,
                    1764,
                    1772,
                    1773,
                    1652,
                    1910,
                    1656,
                    1661,
                    1662
                ],
                "out.dtype": [
                    1671,
                    1706,
                    1772,
                    1758,
                    1773,
                    1774,
                    1776,
                    1747,
                    1365,
                    1366,
                    1662
                ],
                "arr.take": [
                    1368,
                    1643,
                    1599
                ],
                "outindexer": [
                    1370,
                    1371,
                    1372
                ],
                "slice": [
                    1928,
                    1929,
                    1938,
                    1939,
                    1942,
                    1943,
                    1370
                ],
                "arr.ndim": [
                    1696,
                    1928,
                    1706,
                    1932,
                    1680,
                    1938,
                    1686,
                    1942,
                    1370
                ],
                "_take_1d_dict": [
                    1480,
                    1491,
                    1375
                ],
                "algos.take_1d_int8_int8": [
                    1376
                ],
                "algos.take_1d_int8_int32": [
                    1377
                ],
                "algos.take_1d_int8_int64": [
                    1378
                ],
                "algos.take_1d_int8_float64": [
                    1379
                ],
                "algos.take_1d_int16_int16": [
                    1380
                ],
                "algos.take_1d_int16_int32": [
                    1381
                ],
                "algos.take_1d_int16_int64": [
                    1382
                ],
                "algos.take_1d_int16_float64": [
                    1383
                ],
                "algos.take_1d_int32_int32": [
                    1384
                ],
                "algos.take_1d_int32_int64": [
                    1385
                ],
                "algos.take_1d_int32_float64": [
                    1386
                ],
                "algos.take_1d_int64_int64": [
                    1387,
                    1396
                ],
                "algos.take_1d_int64_float64": [
                    1388
                ],
                "algos.take_1d_float32_float32": [
                    1389
                ],
                "algos.take_1d_float32_float64": [
                    1390
                ],
                "algos.take_1d_float64_float64": [
                    1391
                ],
                "algos.take_1d_object_object": [
                    1392
                ],
                "_view_wrapper": [
                    1443,
                    1444,
                    1445,
                    1418,
                    1419,
                    1420,
                    1393,
                    1394,
                    1395,
                    1468,
                    1469,
                    1470
                ],
                "algos.take_1d_bool_bool": [
                    1393
                ],
                "np.uint8": [
                    1443,
                    1444,
                    1418,
                    1419,
                    1393,
                    1394,
                    1468,
                    1469
                ],
                "algos.take_1d_bool_object": [
                    1394
                ],
                "_take_2d_axis0_dict": [
                    1400,
                    1483,
                    1494
                ],
                "algos.take_2d_axis0_int8_int8": [
                    1401
                ],
                "algos.take_2d_axis0_int8_int32": [
                    1402
                ],
                "algos.take_2d_axis0_int8_int64": [
                    1403
                ],
                "algos.take_2d_axis0_int8_float64": [
                    1404
                ],
                "algos.take_2d_axis0_int16_int16": [
                    1405
                ],
                "algos.take_2d_axis0_int16_int32": [
                    1406
                ],
                "algos.take_2d_axis0_int16_int64": [
                    1407
                ],
                "algos.take_2d_axis0_int16_float64": [
                    1408
                ],
                "algos.take_2d_axis0_int32_int32": [
                    1409
                ],
                "algos.take_2d_axis0_int32_int64": [
                    1410
                ],
                "algos.take_2d_axis0_int32_float64": [
                    1411
                ],
                "algos.take_2d_axis0_int64_int64": [
                    1412,
                    1421
                ],
                "algos.take_2d_axis0_int64_float64": [
                    1413
                ],
                "algos.take_2d_axis0_float32_float32": [
                    1414
                ],
                "algos.take_2d_axis0_float32_float64": [
                    1415
                ],
                "algos.take_2d_axis0_float64_float64": [
                    1416
                ],
                "algos.take_2d_axis0_object_object": [
                    1417
                ],
                "algos.take_2d_axis0_bool_bool": [
                    1418
                ],
                "algos.take_2d_axis0_bool_object": [
                    1419
                ],
                "_take_2d_axis1_dict": [
                    1496,
                    1425,
                    1485
                ],
                "algos.take_2d_axis1_int8_int8": [
                    1426
                ],
                "algos.take_2d_axis1_int8_int32": [
                    1427
                ],
                "algos.take_2d_axis1_int8_int64": [
                    1428
                ],
                "algos.take_2d_axis1_int8_float64": [
                    1429
                ],
                "algos.take_2d_axis1_int16_int16": [
                    1430
                ],
                "algos.take_2d_axis1_int16_int32": [
                    1431
                ],
                "algos.take_2d_axis1_int16_int64": [
                    1432
                ],
                "algos.take_2d_axis1_int16_float64": [
                    1433
                ],
                "algos.take_2d_axis1_int32_int32": [
                    1434
                ],
                "algos.take_2d_axis1_int32_int64": [
                    1435
                ],
                "algos.take_2d_axis1_int32_float64": [
                    1436
                ],
                "algos.take_2d_axis1_int64_int64": [
                    1437,
                    1446
                ],
                "algos.take_2d_axis1_int64_float64": [
                    1438
                ],
                "algos.take_2d_axis1_float32_float32": [
                    1439
                ],
                "algos.take_2d_axis1_float32_float64": [
                    1440
                ],
                "algos.take_2d_axis1_float64_float64": [
                    1441
                ],
                "algos.take_2d_axis1_object_object": [
                    1442
                ],
                "algos.take_2d_axis1_bool_bool": [
                    1443
                ],
                "algos.take_2d_axis1_bool_object": [
                    1444
                ],
                "_take_2d_multi_dict": [
                    1450,
                    1772,
                    1774
                ],
                "algos.take_2d_multi_int8_int8": [
                    1451
                ],
                "algos.take_2d_multi_int8_int32": [
                    1452
                ],
                "algos.take_2d_multi_int8_int64": [
                    1453
                ],
                "algos.take_2d_multi_int8_float64": [
                    1454
                ],
                "algos.take_2d_multi_int16_int16": [
                    1455
                ],
                "algos.take_2d_multi_int16_int32": [
                    1456
                ],
                "algos.take_2d_multi_int16_int64": [
                    1457
                ],
                "algos.take_2d_multi_int16_float64": [
                    1458
                ],
                "algos.take_2d_multi_int32_int32": [
                    1459
                ],
                "algos.take_2d_multi_int32_int64": [
                    1460
                ],
                "algos.take_2d_multi_int32_float64": [
                    1461
                ],
                "algos.take_2d_multi_int64_int64": [
                    1462,
                    1471
                ],
                "algos.take_2d_multi_int64_float64": [
                    1463
                ],
                "algos.take_2d_multi_float32_float32": [
                    1464
                ],
                "algos.take_2d_multi_float32_float64": [
                    1465
                ],
                "algos.take_2d_multi_float64_float64": [
                    1466
                ],
                "algos.take_2d_multi_object_object": [
                    1467
                ],
                "algos.take_2d_multi_bool_bool": [
                    1468
                ],
                "algos.take_2d_multi_bool_object": [
                    1469
                ],
                "ndim": [
                    1477,
                    1479,
                    1481,
                    1490,
                    1492
                ],
                "tup": [
                    1478,
                    1480,
                    1483,
                    1485,
                    1489,
                    1491,
                    1494,
                    1496
                ],
                "arr_dtype.name": [
                    1478
                ],
                "out_dtype.name": [
                    1489,
                    1478
                ],
                "func": [
                    1705,
                    1708,
                    1480,
                    1483,
                    1485,
                    1486,
                    1487,
                    1491,
                    1494,
                    1496,
                    1497,
                    1498,
                    1499,
                    1507,
                    1772,
                    1773,
                    1774,
                    1775,
                    1776,
                    1777,
                    1784
                ],
                "_take_1d_dict.get": [
                    1480,
                    1491
                ],
                "_take_2d_axis0_dict.get": [
                    1483,
                    1494
                ],
                "_take_2d_axis1_dict.get": [
                    1496,
                    1485
                ],
                "_convert_wrapper": [
                    1776,
                    1498
                ],
                "_take_nd_object": [
                    1503
                ],
                "indices": [
                    1593,
                    1595,
                    1589,
                    1599
                ],
                "np.intp": [
                    1589
                ],
                "allow_fill": [
                    1643,
                    1740,
                    1655,
                    1591
                ],
                "validate_indices": [
                    1593
                ],
                "take_1d": [
                    1594,
                    1715
                ],
                "arr._values": [
                    1646
                ],
                "np.arange": [
                    1732,
                    1736,
                    1651,
                    1725,
                    1726
                ],
                "arr.dtype.type": [
                    1728,
                    1764,
                    1741,
                    1677,
                    1652,
                    1656,
                    1849
                ],
                "maybe_promote": [
                    1746,
                    1661
                ],
                "flip_order": [
                    1682,
                    1684,
                    1710,
                    1679
                ],
                "arr.flags.f_contiguous": [
                    1696,
                    1681
                ],
                "arr.flags": [
                    1696,
                    1681
                ],
                "arr.T": [
                    1685
                ],
                "out.T": [
                    1688,
                    1711
                ],
                "out_shape": [
                    1701,
                    1703,
                    1769,
                    1770,
                    1693,
                    1694,
                    1695
                ],
                "_get_take_nd_function": [
                    1705
                ],
                "take_nd": [
                    1715
                ],
                "_take_2d_multi_dict.get": [
                    1772,
                    1774
                ],
                "arr.dtype.name": [
                    1932,
                    1772,
                    1933
                ],
                "out.dtype.name": [
                    1772,
                    1774
                ],
                "_take_2d_multi_object": [
                    1780
                ],
                "sorter": [
                    1872,
                    1837,
                    1838
                ],
                "is_integer": [
                    1843
                ],
                "value": [
                    1858,
                    1859,
                    1861,
                    1869,
                    1870,
                    1872,
                    1843,
                    1850
                ],
                "iinfo": [
                    1849,
                    1851
                ],
                "value_arr": [
                    1856,
                    1850,
                    1851
                ],
                "iinfo.min": [
                    1851
                ],
                "iinfo.max": [
                    1851
                ],
                "value_arr.dtype": [
                    1856
                ],
                "dtype.type": [
                    1859
                ],
                "array": [
                    1861
                ],
                "value_ser": [
                    1869,
                    1870
                ],
                "arr.searchsorted": [
                    1872
                ],
                "side": [
                    1872
                ],
                "_diff_special": [
                    1880,
                    1932,
                    1933
                ],
                "algos.diff_2d_float64": [
                    1881
                ],
                "algos.diff_2d_float32": [
                    1882
                ],
                "algos.diff_2d_int64": [
                    1883
                ],
                "algos.diff_2d_int32": [
                    1884
                ],
                "algos.diff_2d_int16": [
                    1885
                ],
                "algos.diff_2d_int8": [
                    1886
                ],
                "na": [
                    1952,
                    1960,
                    1930,
                    1909,
                    1916
                ],
                "is_timedelta": [
                    1912,
                    1948,
                    1917,
                    1965
                ],
                "np.object_": [
                    1920
                ],
                "np.dtype": [
                    1925
                ],
                "out_arr": [
                    1926,
                    1961,
                    1930,
                    1963,
                    1934,
                    1966,
                    1968
                ],
                "na_indexer": [
                    1928,
                    1929,
                    1930
                ],
                "_res_indexer": [
                    1938,
                    1939,
                    1940
                ],
                "res_indexer": [
                    1952,
                    1961,
                    1963,
                    1940,
                    1949
                ],
                "_lag_indexer": [
                    1944,
                    1942,
                    1943
                ],
                "lag_indexer": [
                    1944,
                    1952,
                    1963,
                    1950
                ],
                "res": [
                    1954,
                    1955,
                    1949,
                    1959
                ],
                "lag": [
                    1956,
                    1957,
                    1950,
                    1959
                ],
                "res.copy": [
                    1954
                ],
                "lag.copy": [
                    1956
                ],
                "view": [
                    1966
                ],
                "out_arr.astype": [
                    1966
                ]
            },
            "filtered_variables_in_file": {
                "_shared_docs": [
                    635,
                    53,
                    510
                ],
                "is_object_dtype": [
                    1863,
                    98,
                    86,
                    455
                ],
                "dtype": [
                    86,
                    88,
                    92,
                    94,
                    96,
                    98,
                    100,
                    1130,
                    1131,
                    1652,
                    117,
                    118,
                    119,
                    1656,
                    121,
                    1661,
                    1662,
                    125,
                    1152,
                    1153,
                    130,
                    126,
                    1156,
                    1671,
                    137,
                    138,
                    653,
                    1677,
                    143,
                    655,
                    145,
                    148,
                    152,
                    158,
                    677,
                    1701,
                    1703,
                    180,
                    181,
                    182,
                    183,
                    188,
                    189,
                    1728,
                    1741,
                    1746,
                    1747,
                    1236,
                    1237,
                    1242,
                    1758,
                    1764,
                    232,
                    1770,
                    245,
                    253,
                    781,
                    783,
                    293,
                    294,
                    830,
                    1854,
                    1856,
                    1859,
                    1861,
                    867,
                    1910,
                    1914,
                    1919,
                    1920,
                    1922,
                    1923,
                    1925,
                    1926,
                    397,
                    401,
                    447,
                    448
                ],
                "ensure_object": [
                    112,
                    162,
                    99,
                    87
                ],
                "np.asarray": [
                    161,
                    99,
                    1059,
                    1097,
                    205,
                    1648,
                    1587,
                    1589,
                    87,
                    91
                ],
                "np": [
                    1920,
                    1923,
                    1925,
                    1926,
                    1418,
                    1419,
                    1421,
                    1169,
                    161,
                    802,
                    803,
                    1059,
                    1316,
                    1443,
                    1191,
                    1064,
                    1444,
                    1446,
                    1701,
                    1703,
                    1329,
                    1074,
                    1587,
                    1841,
                    437,
                    1589,
                    1719,
                    1849,
                    1850,
                    1083,
                    1468,
                    1085,
                    1469,
                    959,
                    1471,
                    1725,
                    962,
                    1726,
                    1604,
                    1732,
                    456,
                    969,
                    1097,
                    971,
                    1099,
                    205,
                    973,
                    975,
                    1736,
                    87,
                    91,
                    989,
                    1501,
                    991,
                    994,
                    99,
                    740,
                    996,
                    872,
                    105,
                    1770,
                    1648,
                    1393,
                    1394,
                    1651,
                    1396,
                    1779,
                    1909,
                    1914
                ],
                "values": [
                    1064,
                    1073,
                    1076,
                    1078,
                    1081,
                    1083,
                    1085,
                    87,
                    88,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    106,
                    107,
                    112,
                    116,
                    121,
                    124,
                    125,
                    126,
                    129,
                    130,
                    133,
                    647,
                    136,
                    137,
                    648,
                    650,
                    651,
                    652,
                    142,
                    143,
                    655,
                    145,
                    147,
                    150,
                    151,
                    667,
                    156,
                    158,
                    161,
                    162,
                    181,
                    183,
                    187,
                    189,
                    191,
                    198,
                    199,
                    201,
                    202,
                    203,
                    205,
                    206,
                    718,
                    724,
                    725,
                    232,
                    744,
                    747,
                    239,
                    752,
                    245,
                    1270,
                    250,
                    251,
                    1274,
                    253,
                    1275,
                    1281,
                    259,
                    1285,
                    264,
                    1288,
                    779,
                    780,
                    781,
                    786,
                    797,
                    799,
                    292,
                    293,
                    296,
                    830,
                    832,
                    854,
                    855,
                    858,
                    859,
                    860,
                    861,
                    863,
                    864,
                    865,
                    867,
                    870,
                    390,
                    392,
                    904,
                    394,
                    905,
                    396,
                    397,
                    907,
                    399,
                    400,
                    913,
                    914,
                    916,
                    429,
                    433,
                    437,
                    438,
                    443,
                    448,
                    451,
                    459,
                    463,
                    468,
                    472,
                    475,
                    499,
                    501,
                    503
                ],
                "is_bool_dtype": [
                    88,
                    1180,
                    182,
                    1919
                ],
                "astype": [
                    91
                ],
                "is_signed_integer_dtype": [
                    92
                ],
                "ensure_int64": [
                    1734,
                    1738,
                    1654,
                    156,
                    93,
                    1502
                ],
                "is_unsigned_integer_dtype": [
                    94
                ],
                "ensure_uint64": [
                    95
                ],
                "is_float_dtype": [
                    96,
                    466
                ],
                "ensure_float64": [
                    97,
                    106
                ],
                "is_complex_dtype": [
                    1130,
                    100
                ],
                "catch_warnings": [
                    104
                ],
                "simplefilter": [
                    105
                ],
                "np.ComplexWarning": [
                    105
                ],
                "needs_i8_conversion": [
                    1913,
                    1131,
                    116,
                    783
                ],
                "is_period_dtype": [
                    121,
                    660,
                    117
                ],
                "is_datetime64_any_dtype": [
                    658,
                    118
                ],
                "is_timedelta64_dtype": [
                    659,
                    126,
                    119
                ],
                "PeriodIndex": [
                    124
                ],
                "values.dtype": [
                    137,
                    130,
                    125,
                    143
                ],
                "TimedeltaIndex": [
                    129
                ],
                "values.ndim": [
                    904,
                    913,
                    133
                ],
                "is_datetime64_ns_dtype": [
                    133
                ],
                "asi8": [
                    136,
                    138
                ],
                "values.view": [
                    136
                ],
                "DatetimeIndex": [
                    142
                ],
                "values.asi8": [
                    145
                ],
                "is_categorical_dtype": [
                    1863,
                    147,
                    148,
                    440,
                    250,
                    858
                ],
                "values.codes": [
                    151
                ],
                "np.object": [
                    161
                ],
                "is_extension_array_dtype": [
                    392,
                    744,
                    650,
                    1642,
                    180
                ],
                "_from_sequence": [
                    181
                ],
                "dtype.construct_array_type": [
                    181
                ],
                "values.astype": [
                    459,
                    463,
                    468,
                    183,
                    472,
                    187,
                    189
                ],
                "original": [
                    677,
                    805,
                    648,
                    680,
                    681,
                    682,
                    396,
                    653,
                    780,
                    876,
                    401,
                    658,
                    659,
                    660,
                    662,
                    855,
                    186
                ],
                "ABCIndexClass": [
                    680,
                    186,
                    1645
                ],
                "is_array_like": [
                    1586,
                    198
                ],
                "inferred": [
                    200,
                    199
                ],
                "lib.infer_dtype": [
                    259,
                    239,
                    199
                ],
                "lib": [
                    259,
                    239,
                    199
                ],
                "construct_1d_object_array_from_listlike": [
                    203,
                    438
                ],
                "_hashtables": [
                    209,
                    499,
                    244
                ],
                "htable.Float64HashTable": [
                    210
                ],
                "htable": [
                    451,
                    293,
                    869,
                    295,
                    397,
                    461,
                    399,
                    210,
                    211,
                    212,
                    213,
                    214,
                    244,
                    245,
                    470,
                    786,
                    796,
                    831
                ],
                "htable.Float64Vector": [
                    210
                ],
                "htable.UInt64HashTable": [
                    211
                ],
                "htable.UInt64Vector": [
                    211
                ],
                "htable.Int64HashTable": [
                    212
                ],
                "htable.Int64Vector": [
                    212
                ],
                "htable.StringHashTable": [
                    213
                ],
                "htable.ObjectVector": [
                    213,
                    214
                ],
                "htable.PyObjectHashTable": [
                    214
                ],
                "ndtype": [
                    867,
                    260,
                    293,
                    262,
                    869,
                    232,
                    234,
                    397,
                    781,
                    240,
                    830,
                    242,
                    244,
                    245,
                    796,
                    253,
                    254,
                    831
                ],
                "_ensure_data": [
                    448,
                    867,
                    294,
                    232,
                    781,
                    655,
                    1173,
                    253,
                    830,
                    447
                ],
                "table": [
                    295,
                    296,
                    297,
                    399,
                    400,
                    244,
                    245,
                    501,
                    502
                ],
                "values._values_for_rank": [
                    251
                ],
                "f": [
                    262,
                    264,
                    905,
                    906,
                    1933,
                    1934,
                    914,
                    915,
                    796,
                    797,
                    1323,
                    1331,
                    831,
                    832,
                    451,
                    456,
                    461,
                    470,
                    475,
                    869,
                    870
                ],
                "func_map.get": [
                    262
                ],
                "func_map": [
                    262
                ],
                "com.asarray_tuplesafe": [
                    292
                ],
                "com": [
                    292,
                    445
                ],
                "_": [
                    448,
                    293,
                    294,
                    397,
                    655,
                    499,
                    1173,
                    447
                ],
                "_get_hashtable_algo": [
                    293,
                    397
                ],
                "to_match": [
                    297,
                    294,
                    295
                ],
                "table.map_locations": [
                    296
                ],
                "result": [
                    1959,
                    1960,
                    297,
                    1961,
                    305,
                    306,
                    308,
                    1594,
                    1599,
                    1600,
                    1098,
                    1099,
                    1100,
                    1872,
                    1873,
                    730,
                    731,
                    732,
                    733,
                    736,
                    737,
                    870,
                    872,
                    747,
                    748,
                    749,
                    876,
                    877,
                    756,
                    759,
                    762,
                    764
                ],
                "table.lookup": [
                    297
                ],
                "na_sentinel": [
                    674,
                    299,
                    652,
                    305,
                    503,
                    667
                ],
                "replace": [
                    305
                ],
                "Series": [
                    747,
                    877,
                    1869,
                    305,
                    724,
                    756,
                    859,
                    860
                ],
                "result.ravel": [
                    305
                ],
                "result.values.reshape": [
                    306
                ],
                "result.values": [
                    736,
                    306,
                    749
                ],
                "result.shape": [
                    306
                ],
                "_ensure_arraylike": [
                    854,
                    779,
                    390,
                    647
                ],
                "values.unique": [
                    394
                ],
                "uniques": [
                    673,
                    674,
                    677,
                    681,
                    652,
                    685,
                    687,
                    400,
                    401,
                    402,
                    502,
                    666,
                    507,
                    670
                ],
                "table.unique": [
                    400
                ],
                "_reconstruct_data": [
                    401,
                    805,
                    876,
                    677
                ],
                "unique1d": [
                    405
                ],
                "unique": [
                    405
                ],
                "is_list_like": [
                    1222,
                    429,
                    422
                ],
                "comps": [
                    422,
                    455,
                    457,
                    426,
                    460,
                    464,
                    466,
                    469,
                    475,
                    440,
                    473,
                    443,
                    445,
                    447
                ],
                "ABCIndex": [
                    437
                ],
                "ABCSeries": [
                    682,
                    1645,
                    437
                ],
                "np.ndarray": [
                    1841,
                    437
                ],
                "comps._values.isin": [
                    443
                ],
                "comps._values": [
                    443
                ],
                "com.values_from_object": [
                    445
                ],
                "htable.ismember_object": [
                    451
                ],
                "x": [
                    1059,
                    451,
                    1060,
                    1062,
                    456,
                    1064,
                    1098,
                    461,
                    470
                ],
                "np.in1d": [
                    456
                ],
                "y": [
                    456,
                    461,
                    470
                ],
                "is_integer_dtype": [
                    1922,
                    457,
                    1842,
                    1843,
                    1176
                ],
                "comps.astype": [
                    464,
                    473,
                    460,
                    469
                ],
                "htable.ismember_int64": [
                    461
                ],
                "htable.ismember_float64": [
                    470
                ],
                "hash_klass": [
                    499,
                    501
                ],
                "_get_data_algo": [
                    905,
                    914,
                    499
                ],
                "size_hint": [
                    667,
                    501
                ],
                "labels": [
                    673,
                    674,
                    652,
                    687,
                    502,
                    666,
                    506,
                    507
                ],
                "table.factorize": [
                    502
                ],
                "na_value": [
                    664,
                    667,
                    662,
                    503
                ],
                "ensure_platform_int": [
                    1368,
                    506,
                    1838
                ],
                "values.factorize": [
                    652
                ],
                "original.dtype": [
                    805,
                    876,
                    653,
                    662
                ],
                "na_value_for_dtype": [
                    662
                ],
                "_factorize_array": [
                    666
                ],
                "sort": [
                    670,
                    758
                ],
                "safe_sort": [
                    673
                ],
                "original._shallow_copy": [
                    681
                ],
                "Index": [
                    754,
                    755,
                    685
                ],
                "Substitution": [
                    605
                ],
                "dedent": [
                    621,
                    628,
                    613,
                    606
                ],
                "Appender": [
                    635
                ],
                "deprecate_kwarg": [
                    636
                ],
                "name": [
                    748,
                    756,
                    718
                ],
                "bins": [
                    720,
                    725
                ],
                "ii": [
                    730,
                    740,
                    725
                ],
                "cut": [
                    725
                ],
                "ii.value_counts": [
                    730
                ],
                "dropna": [
                    736,
                    800,
                    870,
                    747,
                    861,
                    752,
                    786,
                    788,
                    730,
                    860,
                    797,
                    863
                ],
                "result.index.notna": [
                    731
                ],
                "result.index": [
                    731,
                    732
                ],
                "result.index.astype": [
                    732
                ],
                "result.sort_index": [
                    733
                ],
                "result.iloc": [
                    737
                ],
                "counts": [
                    803,
                    740,
                    807,
                    749,
                    752,
                    786,
                    756,
                    790,
                    762,
                    797
                ],
                "np.array": [
                    1850,
                    1099,
                    740
                ],
                "_values.value_counts": [
                    747
                ],
                "_values": [
                    747,
                    1869
                ],
                "result.name": [
                    748
                ],
                "keys": [
                    801,
                    802,
                    805,
                    807,
                    752,
                    786,
                    754,
                    755,
                    756,
                    789,
                    790,
                    797
                ],
                "_value_counts_arraylike": [
                    752
                ],
                "result.sort_values": [
                    759
                ],
                "ascending": [
                    759,
                    909,
                    1168,
                    1170,
                    919,
                    1305,
                    1307
                ],
                "normalize": [
                    761
                ],
                "counts.sum": [
                    762
                ],
                "htable.value_count_int64": [
                    786
                ],
                "msk": [
                    789,
                    790
                ],
                "iNaT": [
                    1916,
                    789
                ],
                "mask": [
                    1665,
                    1667,
                    1668,
                    1669,
                    799,
                    800,
                    1953,
                    1952,
                    803,
                    1060,
                    1955,
                    1062,
                    1957,
                    1960,
                    1361,
                    1363,
                    1364,
                    1371,
                    864,
                    865
                ],
                "isna": [
                    801,
                    1060,
                    799
                ],
                "mask.any": [
                    800,
                    1668,
                    1953,
                    1364
                ],
                "np.insert": [
                    802,
                    803
                ],
                "np.NaN": [
                    802
                ],
                "mask.sum": [
                    803
                ],
                "keep": [
                    832,
                    1112,
                    1221
                ],
                "values.values.mode": [
                    860
                ],
                "values.values": [
                    860
                ],
                "values.name": [
                    860
                ],
                "values.mode": [
                    861
                ],
                "is_datetimelike": [
                    863
                ],
                "values.isnull": [
                    864
                ],
                "np.sort": [
                    872,
                    1064
                ],
                "warn": [
                    874
                ],
                "e": [
                    874
                ],
                "_rank1d_functions": [
                    905,
                    1005
                ],
                "ranks": [
                    906,
                    915,
                    926
                ],
                "method": [
                    1249,
                    1156,
                    908,
                    1167,
                    1168,
                    918,
                    1174,
                    1270,
                    1305,
                    1242
                ],
                "na_option": [
                    920,
                    910
                ],
                "pct": [
                    921,
                    911
                ],
                "_rank2d_functions": [
                    914,
                    1012
                ],
                "axis": [
                    1929,
                    1934,
                    1939,
                    917,
                    1686,
                    1943,
                    1694,
                    1696,
                    1706,
                    1593,
                    1595,
                    1599,
                    1482,
                    1493,
                    1367,
                    1368,
                    1371,
                    1504,
                    1651
                ],
                "b2": [
                    994,
                    996,
                    985,
                    986,
                    989,
                    959,
                    991
                ],
                "np.broadcast_to": [
                    962,
                    959
                ],
                "b": [
                    1002,
                    1070,
                    959
                ],
                "arr.shape": [
                    962,
                    1732,
                    1926,
                    1725,
                    1736,
                    975,
                    1651,
                    1367,
                    1593,
                    1693,
                    1726,
                    959
                ],
                "arr": [
                    1586,
                    1587,
                    1593,
                    1595,
                    1599,
                    1642,
                    1643,
                    1645,
                    1646,
                    1648,
                    1651,
                    1652,
                    1656,
                    1661,
                    1662,
                    1677,
                    1680,
                    1681,
                    1173,
                    1685,
                    1175,
                    1686,
                    1178,
                    1693,
                    1182,
                    1696,
                    1185,
                    1187,
                    1190,
                    1191,
                    1192,
                    1706,
                    1708,
                    1725,
                    1726,
                    1728,
                    1732,
                    1736,
                    1741,
                    1746,
                    1747,
                    1764,
                    1772,
                    1773,
                    1781,
                    1784,
                    1318,
                    1323,
                    1841,
                    1330,
                    1331,
                    1842,
                    1849,
                    1854,
                    1863,
                    1356,
                    1872,
                    1365,
                    1366,
                    1367,
                    1368,
                    1370,
                    1910,
                    1913,
                    1915,
                    1926,
                    1928,
                    1932,
                    1933,
                    1934,
                    1938,
                    1942,
                    1949,
                    1950,
                    1952,
                    1963,
                    959,
                    962,
                    975,
                    989,
                    991,
                    1504,
                    994,
                    996,
                    1002
                ],
                "b_mask": [
                    960,
                    962,
                    972
                ],
                "b2_mask": [
                    962,
                    964,
                    968,
                    969,
                    973
                ],
                "arr_mask": [
                    968,
                    969,
                    970,
                    971
                ],
                "not_nan": [
                    994,
                    996,
                    969,
                    971,
                    973,
                    975,
                    976,
                    989,
                    991
                ],
                "np.logical_not": [
                    969,
                    971,
                    973
                ],
                "np.empty": [
                    1701,
                    1926,
                    1703,
                    1770,
                    975
                ],
                "not_nan.fill": [
                    976
                ],
                "mask1": [
                    985,
                    994,
                    988
                ],
                "mask2": [
                    986,
                    996,
                    990
                ],
                "mask1.any": [
                    988
                ],
                "to_raise": [
                    1000,
                    993,
                    989,
                    991
                ],
                "np.iinfo": [
                    994,
                    996,
                    1849,
                    989,
                    991
                ],
                "np.int64": [
                    994,
                    996,
                    1732,
                    1446,
                    1725,
                    1736,
                    1471,
                    1421,
                    1651,
                    1396,
                    989,
                    1726,
                    991
                ],
                "mask2.any": [
                    990
                ],
                "algos.rank_1d_float64": [
                    1006
                ],
                "algos": [
                    1190,
                    1881,
                    1882,
                    1883,
                    1884,
                    1885,
                    1886,
                    1376,
                    1377,
                    1378,
                    1379,
                    1380,
                    1381,
                    1382,
                    1383,
                    1384,
                    1385,
                    1386,
                    1387,
                    1388,
                    1389,
                    1390,
                    1391,
                    1392,
                    1393,
                    1394,
                    1396,
                    1401,
                    1402,
                    1403,
                    1404,
                    1405,
                    1406,
                    1407,
                    1408,
                    1409,
                    1410,
                    1411,
                    1412,
                    1413,
                    1414,
                    1415,
                    1416,
                    1417,
                    1418,
                    1419,
                    1421,
                    1426,
                    1427,
                    1428,
                    1429,
                    1430,
                    1431,
                    1432,
                    1433,
                    1434,
                    1435,
                    1436,
                    1437,
                    1438,
                    1439,
                    1440,
                    1441,
                    1442,
                    1443,
                    1444,
                    1446,
                    1451,
                    1452,
                    1453,
                    1454,
                    1455,
                    1456,
                    1457,
                    1458,
                    1459,
                    1460,
                    1461,
                    1462,
                    1463,
                    1464,
                    1465,
                    1466,
                    1467,
                    1468,
                    1469,
                    1471,
                    1006,
                    1007,
                    1008,
                    1009,
                    1013,
                    1014,
                    1015,
                    1016
                ],
                "algos.rank_1d_int64": [
                    1007
                ],
                "algos.rank_1d_uint64": [
                    1008
                ],
                "algos.rank_1d_object": [
                    1009
                ],
                "algos.rank_2d_float64": [
                    1013
                ],
                "algos.rank_2d_int64": [
                    1014
                ],
                "algos.rank_2d_uint64": [
                    1015
                ],
                "algos.rank_2d_object": [
                    1016
                ],
                "a": [
                    1070
                ],
                "fraction": [
                    1070
                ],
                "np.nan": [
                    1316,
                    1604,
                    1329,
                    1074,
                    1779,
                    1909,
                    1719,
                    1501
                ],
                "idx": [
                    1076,
                    1077,
                    1078,
                    1081,
                    1083,
                    1085
                ],
                "at": [
                    1076
                ],
                "score": [
                    1092,
                    1078,
                    1081,
                    1083,
                    1085
                ],
                "interpolation_method": [
                    1080,
                    1082,
                    1084
                ],
                "_interpolate": [
                    1081
                ],
                "np.floor": [
                    1083
                ],
                "np.ceil": [
                    1085
                ],
                "is_scalar": [
                    1870,
                    1850,
                    1858,
                    1094
                ],
                "q": [
                    1097,
                    1098,
                    1094,
                    1095
                ],
                "_get_score": [
                    1098,
                    1095
                ],
                "np.float64": [
                    1097,
                    1914,
                    1099,
                    1923
                ],
                "self.obj": [
                    1152,
                    1160,
                    1162,
                    1165,
                    1232,
                    1110
                ],
                "self": [
                    1152,
                    1153,
                    1160,
                    1162,
                    1165,
                    1167,
                    1184,
                    1194,
                    1197,
                    1225,
                    1231,
                    1232,
                    1233,
                    1237,
                    1110,
                    1111,
                    1112,
                    1114,
                    1118,
                    1121,
                    1271,
                    1151
                ],
                "obj": [
                    1221,
                    1110
                ],
                "self.n": [
                    1231,
                    1151,
                    1111
                ],
                "n": [
                    1188,
                    1221,
                    1190,
                    1159,
                    1257,
                    1929,
                    1195,
                    1165,
                    1294,
                    1231,
                    1934,
                    1943,
                    1170,
                    1939,
                    1908,
                    1111,
                    1151
                ],
                "self.keep": [
                    1184,
                    1194,
                    1197,
                    1167,
                    1271,
                    1112,
                    1114
                ],
                "self.compute": [
                    1121,
                    1118
                ],
                "is_numeric_dtype": [
                    1130,
                    1863
                ],
                "SelectN": [
                    1204,
                    1134
                ],
                "self.obj.dtype": [
                    1152
                ],
                "self.is_valid_dtype_n_method": [
                    1153,
                    1237
                ],
                "dropped": [
                    1201,
                    1162,
                    1173,
                    1170
                ],
                "self.obj.dropna": [
                    1162
                ],
                "reverse_it": [
                    1169,
                    1167
                ],
                "slc": [
                    1169,
                    1170
                ],
                "np.s_": [
                    1169
                ],
                "head": [
                    1170
                ],
                "sort_values": [
                    1170
                ],
                "pandas_dtype": [
                    1176,
                    1180,
                    1173
                ],
                "dropped.values": [
                    1173
                ],
                "narr": [
                    1187,
                    1188,
                    1199
                ],
                "kth_val": [
                    1190,
                    1191
                ],
                "algos.kth_smallest": [
                    1190
                ],
                "arr.copy": [
                    1190
                ],
                "ns": [
                    1192,
                    1191
                ],
                "np.nonzero": [
                    1191
                ],
                "inds": [
                    1192,
                    1201,
                    1195,
                    1199
                ],
                "argsort": [
                    1192
                ],
                "dropped.iloc": [
                    1201
                ],
                "__init__": [
                    1221
                ],
                "columns": [
                    1222,
                    1223,
                    1224,
                    1225,
                    1260,
                    1233,
                    1235,
                    1269,
                    1302,
                    1307
                ],
                "self.columns": [
                    1225,
                    1233
                ],
                "frame": [
                    1255,
                    1256,
                    1232,
                    1296,
                    1299,
                    1236,
                    1303,
                    1307
                ],
                "column": [
                    1260,
                    1235,
                    1236,
                    1268,
                    1242
                ],
                "current_indexer.append": [
                    1250
                ],
                "current_indexer": [
                    1250,
                    1252
                ],
                "other_indexer": [
                    1250,
                    1252
                ],
                "other_indexer.append": [
                    1252
                ],
                "original_index": [
                    1299,
                    1255
                ],
                "frame.index": [
                    1299,
                    1255
                ],
                "cur_frame": [
                    1256,
                    1268,
                    1293
                ],
                "frame.reset_index": [
                    1256
                ],
                "cur_n": [
                    1257,
                    1274,
                    1294,
                    1271
                ],
                "indexer": [
                    1667,
                    1289,
                    1294,
                    1296,
                    1299,
                    1694,
                    1323,
                    1708,
                    1331,
                    1339,
                    1724,
                    1727,
                    1730,
                    1739,
                    1363,
                    1368,
                    1502,
                    1504,
                    1258,
                    1643,
                    1650,
                    1651,
                    1781,
                    1654,
                    1784,
                    1275
                ],
                "Int64Index": [
                    1258
                ],
                "i": [
                    1352,
                    1353,
                    1260,
                    1356,
                    1269
                ],
                "series": [
                    1268,
                    1270
                ],
                "is_last_column": [
                    1274,
                    1269,
                    1271
                ],
                "get_indexer": [
                    1289,
                    1275
                ],
                "values.index": [
                    1281,
                    1275
                ],
                "border_value": [
                    1288,
                    1281,
                    1285
                ],
                "unsafe_values": [
                    1293,
                    1285
                ],
                "safe_values": [
                    1288,
                    1289
                ],
                "safe_values.index": [
                    1289
                ],
                "cur_frame.loc": [
                    1293
                ],
                "unsafe_values.index": [
                    1293
                ],
                "frame.take": [
                    1296
                ],
                "original_index.take": [
                    1299
                ],
                "frame.sort_values": [
                    1307
                ],
                "arr_dtype": [
                    1478,
                    1317,
                    1318
                ],
                "arr.view": [
                    1915,
                    1318
                ],
                "out_dtype": [
                    1478,
                    1319,
                    1320,
                    1489,
                    1498
                ],
                "out": [
                    1671,
                    1687,
                    1688,
                    1692,
                    1701,
                    1703,
                    1320,
                    1706,
                    1323,
                    1708,
                    1711,
                    1712,
                    1331,
                    1349,
                    1351,
                    1356,
                    1747,
                    1365,
                    1366,
                    1368,
                    1372,
                    1758,
                    1504,
                    1768,
                    1770,
                    1772,
                    1773,
                    1774,
                    1776,
                    1781,
                    1784,
                    1785,
                    1662
                ],
                "out.view": [
                    1320
                ],
                "fill_wrap": [
                    1321,
                    1322
                ],
                "fill_value": [
                    1677,
                    1784,
                    1322,
                    1323,
                    1708,
                    1331,
                    1595,
                    1728,
                    1347,
                    1349,
                    1351,
                    1741,
                    1746,
                    1372,
                    1504,
                    1764,
                    1643,
                    1652,
                    1781,
                    1656,
                    1661
                ],
                "wrapper": [
                    1333,
                    1325
                ],
                "arr.astype": [
                    1330,
                    1366
                ],
                "conv_dtype": [
                    1330
                ],
                "row_idx": [
                    1730,
                    1731,
                    1732,
                    1734,
                    1352,
                    1353,
                    1769,
                    1739,
                    1727,
                    1752,
                    1339,
                    1725,
                    1343
                ],
                "col_idx": [
                    1344,
                    1730,
                    1735,
                    1736,
                    1769,
                    1354,
                    1355,
                    1738,
                    1739,
                    1753,
                    1339,
                    1726,
                    1727
                ],
                "mask_info": [
                    1504,
                    1664,
                    1665,
                    1756,
                    1669,
                    1706,
                    1742,
                    1360,
                    1361,
                    1749,
                    1750,
                    1781,
                    1657,
                    1340,
                    1341
                ],
                "row_mask": [
                    1345,
                    1349,
                    1750,
                    1752,
                    1754,
                    1756,
                    1341,
                    1343
                ],
                "col_mask": [
                    1344,
                    1346,
                    1351,
                    1750,
                    1753,
                    1755,
                    1756,
                    1341
                ],
                "row_needs": [
                    1345,
                    1348,
                    1757,
                    1750,
                    1754,
                    1756,
                    1341
                ],
                "col_needs": [
                    1346,
                    1350,
                    1757,
                    1750,
                    1755,
                    1756,
                    1341
                ],
                "row_mask.any": [
                    1345,
                    1754
                ],
                "col_mask.any": [
                    1346,
                    1755
                ],
                "u_": [
                    1353,
                    1356
                ],
                "j": [
                    1354,
                    1355,
                    1356
                ],
                "v": [
                    1355,
                    1356
                ],
                "needs_masking": [
                    1665,
                    1668,
                    1669,
                    1670,
                    1361,
                    1364,
                    1369
                ],
                "arr.dtype": [
                    1932,
                    1677,
                    1933,
                    1706,
                    1849,
                    1854,
                    1728,
                    1741,
                    1746,
                    1747,
                    1365,
                    1764,
                    1772,
                    1773,
                    1652,
                    1910,
                    1656,
                    1661,
                    1662
                ],
                "out.dtype": [
                    1671,
                    1706,
                    1772,
                    1758,
                    1773,
                    1774,
                    1776,
                    1747,
                    1365,
                    1366,
                    1662
                ],
                "arr.take": [
                    1368,
                    1643,
                    1599
                ],
                "outindexer": [
                    1370,
                    1371,
                    1372
                ],
                "arr.ndim": [
                    1696,
                    1928,
                    1706,
                    1932,
                    1680,
                    1938,
                    1686,
                    1942,
                    1370
                ],
                "_take_1d_dict": [
                    1480,
                    1491,
                    1375
                ],
                "algos.take_1d_int8_int8": [
                    1376
                ],
                "algos.take_1d_int8_int32": [
                    1377
                ],
                "algos.take_1d_int8_int64": [
                    1378
                ],
                "algos.take_1d_int8_float64": [
                    1379
                ],
                "algos.take_1d_int16_int16": [
                    1380
                ],
                "algos.take_1d_int16_int32": [
                    1381
                ],
                "algos.take_1d_int16_int64": [
                    1382
                ],
                "algos.take_1d_int16_float64": [
                    1383
                ],
                "algos.take_1d_int32_int32": [
                    1384
                ],
                "algos.take_1d_int32_int64": [
                    1385
                ],
                "algos.take_1d_int32_float64": [
                    1386
                ],
                "algos.take_1d_int64_int64": [
                    1387,
                    1396
                ],
                "algos.take_1d_int64_float64": [
                    1388
                ],
                "algos.take_1d_float32_float32": [
                    1389
                ],
                "algos.take_1d_float32_float64": [
                    1390
                ],
                "algos.take_1d_float64_float64": [
                    1391
                ],
                "algos.take_1d_object_object": [
                    1392
                ],
                "_view_wrapper": [
                    1443,
                    1444,
                    1445,
                    1418,
                    1419,
                    1420,
                    1393,
                    1394,
                    1395,
                    1468,
                    1469,
                    1470
                ],
                "algos.take_1d_bool_bool": [
                    1393
                ],
                "np.uint8": [
                    1443,
                    1444,
                    1418,
                    1419,
                    1393,
                    1394,
                    1468,
                    1469
                ],
                "algos.take_1d_bool_object": [
                    1394
                ],
                "_take_2d_axis0_dict": [
                    1400,
                    1483,
                    1494
                ],
                "algos.take_2d_axis0_int8_int8": [
                    1401
                ],
                "algos.take_2d_axis0_int8_int32": [
                    1402
                ],
                "algos.take_2d_axis0_int8_int64": [
                    1403
                ],
                "algos.take_2d_axis0_int8_float64": [
                    1404
                ],
                "algos.take_2d_axis0_int16_int16": [
                    1405
                ],
                "algos.take_2d_axis0_int16_int32": [
                    1406
                ],
                "algos.take_2d_axis0_int16_int64": [
                    1407
                ],
                "algos.take_2d_axis0_int16_float64": [
                    1408
                ],
                "algos.take_2d_axis0_int32_int32": [
                    1409
                ],
                "algos.take_2d_axis0_int32_int64": [
                    1410
                ],
                "algos.take_2d_axis0_int32_float64": [
                    1411
                ],
                "algos.take_2d_axis0_int64_int64": [
                    1412,
                    1421
                ],
                "algos.take_2d_axis0_int64_float64": [
                    1413
                ],
                "algos.take_2d_axis0_float32_float32": [
                    1414
                ],
                "algos.take_2d_axis0_float32_float64": [
                    1415
                ],
                "algos.take_2d_axis0_float64_float64": [
                    1416
                ],
                "algos.take_2d_axis0_object_object": [
                    1417
                ],
                "algos.take_2d_axis0_bool_bool": [
                    1418
                ],
                "algos.take_2d_axis0_bool_object": [
                    1419
                ],
                "_take_2d_axis1_dict": [
                    1496,
                    1425,
                    1485
                ],
                "algos.take_2d_axis1_int8_int8": [
                    1426
                ],
                "algos.take_2d_axis1_int8_int32": [
                    1427
                ],
                "algos.take_2d_axis1_int8_int64": [
                    1428
                ],
                "algos.take_2d_axis1_int8_float64": [
                    1429
                ],
                "algos.take_2d_axis1_int16_int16": [
                    1430
                ],
                "algos.take_2d_axis1_int16_int32": [
                    1431
                ],
                "algos.take_2d_axis1_int16_int64": [
                    1432
                ],
                "algos.take_2d_axis1_int16_float64": [
                    1433
                ],
                "algos.take_2d_axis1_int32_int32": [
                    1434
                ],
                "algos.take_2d_axis1_int32_int64": [
                    1435
                ],
                "algos.take_2d_axis1_int32_float64": [
                    1436
                ],
                "algos.take_2d_axis1_int64_int64": [
                    1437,
                    1446
                ],
                "algos.take_2d_axis1_int64_float64": [
                    1438
                ],
                "algos.take_2d_axis1_float32_float32": [
                    1439
                ],
                "algos.take_2d_axis1_float32_float64": [
                    1440
                ],
                "algos.take_2d_axis1_float64_float64": [
                    1441
                ],
                "algos.take_2d_axis1_object_object": [
                    1442
                ],
                "algos.take_2d_axis1_bool_bool": [
                    1443
                ],
                "algos.take_2d_axis1_bool_object": [
                    1444
                ],
                "_take_2d_multi_dict": [
                    1450,
                    1772,
                    1774
                ],
                "algos.take_2d_multi_int8_int8": [
                    1451
                ],
                "algos.take_2d_multi_int8_int32": [
                    1452
                ],
                "algos.take_2d_multi_int8_int64": [
                    1453
                ],
                "algos.take_2d_multi_int8_float64": [
                    1454
                ],
                "algos.take_2d_multi_int16_int16": [
                    1455
                ],
                "algos.take_2d_multi_int16_int32": [
                    1456
                ],
                "algos.take_2d_multi_int16_int64": [
                    1457
                ],
                "algos.take_2d_multi_int16_float64": [
                    1458
                ],
                "algos.take_2d_multi_int32_int32": [
                    1459
                ],
                "algos.take_2d_multi_int32_int64": [
                    1460
                ],
                "algos.take_2d_multi_int32_float64": [
                    1461
                ],
                "algos.take_2d_multi_int64_int64": [
                    1462,
                    1471
                ],
                "algos.take_2d_multi_int64_float64": [
                    1463
                ],
                "algos.take_2d_multi_float32_float32": [
                    1464
                ],
                "algos.take_2d_multi_float32_float64": [
                    1465
                ],
                "algos.take_2d_multi_float64_float64": [
                    1466
                ],
                "algos.take_2d_multi_object_object": [
                    1467
                ],
                "algos.take_2d_multi_bool_bool": [
                    1468
                ],
                "algos.take_2d_multi_bool_object": [
                    1469
                ],
                "ndim": [
                    1477,
                    1479,
                    1481,
                    1490,
                    1492
                ],
                "tup": [
                    1478,
                    1480,
                    1483,
                    1485,
                    1489,
                    1491,
                    1494,
                    1496
                ],
                "arr_dtype.name": [
                    1478
                ],
                "out_dtype.name": [
                    1489,
                    1478
                ],
                "func": [
                    1705,
                    1708,
                    1480,
                    1483,
                    1485,
                    1486,
                    1487,
                    1491,
                    1494,
                    1496,
                    1497,
                    1498,
                    1499,
                    1507,
                    1772,
                    1773,
                    1774,
                    1775,
                    1776,
                    1777,
                    1784
                ],
                "_take_1d_dict.get": [
                    1480,
                    1491
                ],
                "_take_2d_axis0_dict.get": [
                    1483,
                    1494
                ],
                "_take_2d_axis1_dict.get": [
                    1496,
                    1485
                ],
                "_convert_wrapper": [
                    1776,
                    1498
                ],
                "_take_nd_object": [
                    1503
                ],
                "indices": [
                    1593,
                    1595,
                    1589,
                    1599
                ],
                "np.intp": [
                    1589
                ],
                "allow_fill": [
                    1643,
                    1740,
                    1655,
                    1591
                ],
                "validate_indices": [
                    1593
                ],
                "take_1d": [
                    1594,
                    1715
                ],
                "arr._values": [
                    1646
                ],
                "np.arange": [
                    1732,
                    1736,
                    1651,
                    1725,
                    1726
                ],
                "arr.dtype.type": [
                    1728,
                    1764,
                    1741,
                    1677,
                    1652,
                    1656,
                    1849
                ],
                "maybe_promote": [
                    1746,
                    1661
                ],
                "flip_order": [
                    1682,
                    1684,
                    1710,
                    1679
                ],
                "arr.flags.f_contiguous": [
                    1696,
                    1681
                ],
                "arr.flags": [
                    1696,
                    1681
                ],
                "arr.T": [
                    1685
                ],
                "out.T": [
                    1688,
                    1711
                ],
                "out_shape": [
                    1701,
                    1703,
                    1769,
                    1770,
                    1693,
                    1694,
                    1695
                ],
                "_get_take_nd_function": [
                    1705
                ],
                "take_nd": [
                    1715
                ],
                "_take_2d_multi_dict.get": [
                    1772,
                    1774
                ],
                "arr.dtype.name": [
                    1932,
                    1772,
                    1933
                ],
                "out.dtype.name": [
                    1772,
                    1774
                ],
                "_take_2d_multi_object": [
                    1780
                ],
                "sorter": [
                    1872,
                    1837,
                    1838
                ],
                "is_integer": [
                    1843
                ],
                "value": [
                    1858,
                    1859,
                    1861,
                    1869,
                    1870,
                    1872,
                    1843,
                    1850
                ],
                "iinfo": [
                    1849,
                    1851
                ],
                "value_arr": [
                    1856,
                    1850,
                    1851
                ],
                "iinfo.min": [
                    1851
                ],
                "iinfo.max": [
                    1851
                ],
                "value_arr.dtype": [
                    1856
                ],
                "dtype.type": [
                    1859
                ],
                "array": [
                    1861
                ],
                "value_ser": [
                    1869,
                    1870
                ],
                "arr.searchsorted": [
                    1872
                ],
                "side": [
                    1872
                ],
                "_diff_special": [
                    1880,
                    1932,
                    1933
                ],
                "algos.diff_2d_float64": [
                    1881
                ],
                "algos.diff_2d_float32": [
                    1882
                ],
                "algos.diff_2d_int64": [
                    1883
                ],
                "algos.diff_2d_int32": [
                    1884
                ],
                "algos.diff_2d_int16": [
                    1885
                ],
                "algos.diff_2d_int8": [
                    1886
                ],
                "na": [
                    1952,
                    1960,
                    1930,
                    1909,
                    1916
                ],
                "is_timedelta": [
                    1912,
                    1948,
                    1917,
                    1965
                ],
                "np.object_": [
                    1920
                ],
                "np.dtype": [
                    1925
                ],
                "out_arr": [
                    1926,
                    1961,
                    1930,
                    1963,
                    1934,
                    1966,
                    1968
                ],
                "na_indexer": [
                    1928,
                    1929,
                    1930
                ],
                "_res_indexer": [
                    1938,
                    1939,
                    1940
                ],
                "res_indexer": [
                    1952,
                    1961,
                    1963,
                    1940,
                    1949
                ],
                "_lag_indexer": [
                    1944,
                    1942,
                    1943
                ],
                "lag_indexer": [
                    1944,
                    1952,
                    1963,
                    1950
                ],
                "res": [
                    1954,
                    1955,
                    1949,
                    1959
                ],
                "lag": [
                    1956,
                    1957,
                    1950,
                    1959
                ],
                "res.copy": [
                    1954
                ],
                "lag.copy": [
                    1956
                ],
                "view": [
                    1966
                ],
                "out_arr.astype": [
                    1966
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_142/pandas/tests/series/test_analytics.py",
                "test_function": "test_bool_diff",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"input,output,diff\",\n        [([False, True, True, False, False], [nan, True, False, True, False], 1)],\n    )\n    def test_bool_diff(self, input, output, diff):\n        # boolean series (test for fixing #17294)\n        s = Series(input)\n        result = s.diff()\n        expected = Series(output)\n        assert_series_equal(result, expected)",
                "test_error": "TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.",
                "full_test_error": "self = <pandas.tests.series.test_analytics.TestSeriesAnalytics object at 0x11d2f8ee0>\ninput = [False, True, True, False, False]\noutput = [nan, True, False, True, False], diff = 1\n\n    @pytest.mark.parametrize(\n        \"input,output,diff\",\n        [([False, True, True, False, False], [nan, True, False, True, False], 1)],\n    )\n    def test_bool_diff(self, input, output, diff):\n        # boolean series (test for fixing #17294)\n        s = Series(input)\n>       result = s.diff()\n\npandas/tests/series/test_analytics.py:291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2478: in diff\n    result = algorithms.diff(com.values_from_object(self), periods)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\narr = array([False,  True,  True, False, False]), n = 1, axis = 0\n\n    def diff(arr, n: int, axis: int = 0):\n        \"\"\"\n        difference of n between self,\n        analogous to s-s.shift(n)\n    \n        Parameters\n        ----------\n        arr : ndarray\n        n : int\n            number of periods\n        axis : int\n            axis to shift on\n    \n        Returns\n        -------\n        shifted\n        \"\"\"\n    \n        n = int(n)\n        na = np.nan\n        dtype = arr.dtype\n    \n        is_timedelta = False\n        if needs_i8_conversion(arr):\n            dtype = np.float64\n            arr = arr.view(\"i8\")\n            na = iNaT\n            is_timedelta = True\n    \n        elif is_bool_dtype(dtype):\n            dtype = np.object_\n    \n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n    \n        dtype = np.dtype(dtype)\n        out_arr = np.empty(arr.shape, dtype=dtype)\n    \n        na_indexer = [slice(None)] * arr.ndim\n        na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n        out_arr[tuple(na_indexer)] = na\n    \n        if arr.ndim == 2 and arr.dtype.name in _diff_special:\n            f = _diff_special[arr.dtype.name]\n            f(arr, out_arr, n, axis)\n        else:\n            # To keep mypy happy, _res_indexer is a list while res_indexer is\n            #  a tuple, ditto for lag_indexer.\n            _res_indexer = [slice(None)] * arr.ndim\n            _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n            res_indexer = tuple(_res_indexer)\n    \n            _lag_indexer = [slice(None)] * arr.ndim\n            _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n            lag_indexer = tuple(_lag_indexer)\n    \n            # need to make sure that we account for na for datelike/timedelta\n            # we don't actually want to subtract these i8 numbers\n            if is_timedelta:\n                res = arr[res_indexer]\n                lag = arr[lag_indexer]\n    \n                mask = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n                if mask.any():\n                    res = res.copy()\n                    res[mask] = 0\n                    lag = lag.copy()\n                    lag[mask] = 0\n    \n                result = res - lag\n                result[mask] = na\n                out_arr[res_indexer] = result\n            else:\n>               out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]\nE               TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1963: TypeError",
                "traceback": "pandas/core/series.py:2478: in diff\n    result = algorithms.diff(com.values_from_object(self), periods)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\narr = array([False,  True,  True, False, False]), n = 1, axis = 0\n\n    def diff(arr, n: int, axis: int = 0):\n        \"\"\"\n        difference of n between self,\n        analogous to s-s.shift(n)\n    \n        Parameters\n        ----------\n        arr : ndarray\n        n : int\n            number of periods\n        axis : int\n            axis to shift on\n    \n        Returns\n        -------\n        shifted\n        \"\"\"\n    \n        n = int(n)\n        na = np.nan\n        dtype = arr.dtype\n    \n        is_timedelta = False\n        if needs_i8_conversion(arr):\n            dtype = np.float64\n            arr = arr.view(\"i8\")\n            na = iNaT\n            is_timedelta = True\n    \n        elif is_bool_dtype(dtype):\n            dtype = np.object_\n    \n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n    \n        dtype = np.dtype(dtype)\n        out_arr = np.empty(arr.shape, dtype=dtype)\n    \n        na_indexer = [slice(None)] * arr.ndim\n        na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n        out_arr[tuple(na_indexer)] = na\n    \n        if arr.ndim == 2 and arr.dtype.name in _diff_special:\n            f = _diff_special[arr.dtype.name]\n            f(arr, out_arr, n, axis)\n        else:\n            # To keep mypy happy, _res_indexer is a list while res_indexer is\n            #  a tuple, ditto for lag_indexer.\n            _res_indexer = [slice(None)] * arr.ndim\n            _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n            res_indexer = tuple(_res_indexer)\n    \n            _lag_indexer = [slice(None)] * arr.ndim\n            _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n            lag_indexer = tuple(_lag_indexer)\n    \n            # need to make sure that we account for na for datelike/timedelta\n            # we don't actually want to subtract these i8 numbers\n            if is_timedelta:\n                res = arr[res_indexer]\n                lag = arr[lag_indexer]\n    \n                mask = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n                if mask.any():\n                    res = res.copy()\n                    res[mask] = 0\n                    lag = lag.copy()\n                    lag[mask] = 0\n    \n                result = res - lag\n                result[mask] = na\n                out_arr[res_indexer] = result\n            else:\n>               out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]\nE               TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1963: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('input,output,diff', [([False, True, True, False, False], [nan, True, False, True, False], 1)])"
                ]
            }
        ]
    }
}