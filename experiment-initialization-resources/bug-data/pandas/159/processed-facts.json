{
    "1.1.1": "def _combine_frame(self, other, func, fill_value=None, level=None):\n    this, other = self.align(other, join=\"outer\", level=level, copy=False)\n    new_index, new_columns = this.index, this.columns\n\n    def _arith_op(left, right):\n        # for the mixed_type case where we iterate over columns,\n        # _arith_op(left, right) is equivalent to\n        # left._binop(right, func, fill_value=fill_value)\n        left, right = ops.fill_binop(left, right, fill_value)\n        return func(left, right)\n\n    if ops.should_series_dispatch(this, other, func):\n        # iterate over columns\n        return ops.dispatch_to_series(this, other, _arith_op)\n    else:\n        result = _arith_op(this.values, other.values)\n        return self._constructor(\n            result, index=new_index, columns=new_columns, copy=False\n        )\n",
    "1.1.2": null,
    "1.2.1": "pandas/core/frame.py",
    "1.2.2": "from pandas.core import algorithms, common as com, nanops, ops",
    "1.3.1": "class DataFrame(NDFrame)",
    "1.3.2": "Two-dimensional size-mutable, potentially heterogeneous tabular data\nstructure with labeled axes (rows and columns). Arithmetic operations\nalign on both row and column labels. Can be thought of as a dict-like\ncontainer for Series objects. The primary pandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer\ncopy : boolean, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nDataFrame.from_items : From sequence of (key, value) pairs\n    read_csv, pandas.read_table, pandas.read_clipboard.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9",
    "1.4.1": [
        "_constructor(self)",
        "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)"
    ],
    "1.4.2": null,
    "1.5.1": [
        "def test_fill_value_inf_masking():\n    # GH #27464 make sure we mask 0/1 with Inf and not NaN\n    df = pd.DataFrame({\"A\": [0, 1, 2], \"B\": [1.1, None, 1.1]})\n\n    other = pd.DataFrame({\"A\": [1.1, 1.2, 1.3]}, index=[0, 2, 3])\n\n    result = df.rfloordiv(other, fill_value=1)\n\n    expected = pd.DataFrame(\n        {\"A\": [np.inf, 1.0, 0.0, 1.0], \"B\": [0.0, np.nan, 0.0, np.nan]}\n    )\n    tm.assert_frame_equal(result, expected)",
        "def test_dataframe_div_silenced():\n    # GH#26793\n    pdf1 = pd.DataFrame(\n        {\n            \"A\": np.arange(10),\n            \"B\": [np.nan, 1, 2, 3, 4] * 2,\n            \"C\": [np.nan] * 10,\n            \"D\": np.arange(10),\n        },\n        index=list(\"abcdefghij\"),\n        columns=list(\"ABCD\"),\n    )\n    pdf2 = pd.DataFrame(\n        np.random.randn(10, 4), index=list(\"abcdefghjk\"), columns=list(\"ABCX\")\n    )\n    with tm.assert_produces_warning(None):\n        pdf1.div(pdf2, fill_value=0)"
    ],
    "1.5.2": [
        "pandas/tests/arithmetic/test_numeric.py",
        "pandas/tests/arithmetic/test_numeric.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: DataFrame.iloc[:, 0] are different\nE   \nE   DataFrame.iloc[:, 0] values are different (25.0 %)\nE   [left]:  [nan, 1.0, 0.0, 1.0]\nE   [right]: [inf, 1.0, 0.0, 1.0]"
        ],
        [
            "E               AssertionError: Caused unexpected warning(s): [('RuntimeWarning', RuntimeWarning('divide by zero encountered in true_divide'), '/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_159/pandas/core/frame.py', 5302), ('RuntimeWarning', RuntimeWarning('invalid value encountered in true_divide'), '/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_159/pandas/core/frame.py', 5302)]."
        ]
    ],
    "2.1.2": [
        [
            "def test_fill_value_inf_masking():\n        # GH #27464 make sure we mask 0/1 with Inf and not NaN\n        df = pd.DataFrame({\"A\": [0, 1, 2], \"B\": [1.1, None, 1.1]})\n    \n        other = pd.DataFrame({\"A\": [1.1, 1.2, 1.3]}, index=[0, 2, 3])\n    \n        result = df.rfloordiv(other, fill_value=1)\n    \n        expected = pd.DataFrame(\n            {\"A\": [np.inf, 1.0, 0.0, 1.0], \"B\": [0.0, np.nan, 0.0, np.nan]}\n        )\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/arithmetic/test_numeric.py:1243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:178: AssertionError"
        ],
        [
            "def test_dataframe_div_silenced():\n        # GH#26793\n        pdf1 = pd.DataFrame(\n            {\n                \"A\": np.arange(10),\n                \"B\": [np.nan, 1, 2, 3, 4] * 2,\n                \"C\": [np.nan] * 10,\n                \"D\": np.arange(10),\n            },\n            index=list(\"abcdefghij\"),\n            columns=list(\"ABCD\"),\n        )\n        pdf2 = pd.DataFrame(\n            np.random.randn(10, 4), index=list(\"abcdefghjk\"), columns=list(\"ABCX\")\n        )\n        with tm.assert_produces_warning(None):\n>           pdf1.div(pdf2, fill_value=0)\n\npandas/tests/arithmetic/test_numeric.py:1262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._GeneratorContextManager object at 0x7fd51b1addc0>\ntype = None, value = None, traceback = None\n\n    def __exit__(self, type, value, traceback):\n        if type is None:\n            try:\n>               next(self.gen)",
            "\n/usr/local/lib/python3.8/contextlib.py:120: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "other": {
                    "value": "     A\n0  1.1\n2  1.2\n3  1.3",
                    "shape": "(3, 1)",
                    "omitted": false
                },
                "self": {
                    "value": "   A    B\n0  0  1.1\n1  1  NaN\n2  2  1.1",
                    "shape": "(3, 2)",
                    "omitted": false
                },
                "fill_value": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "other.values": {
                    "value": "array([[1.1],\n       [1.2],\n       [1.3]])",
                    "shape": "(3, 1)",
                    "omitted": false
                }
            },
            {
                "this": {
                    "value": "     A    B\n0  0.0  1.1\n1  1.0  NaN\n2  2.0  1.1\n3  NaN  NaN",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "other": {
                    "value": "     A   B\n0  1.1 NaN\n1  NaN NaN\n2  1.2 NaN\n3  1.3 NaN",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "new_index": {
                    "value": "Int64Index([0, 1, 2, 3], dtype='int64')",
                    "shape": "(4,)",
                    "omitted": false
                },
                "new_columns": {
                    "value": "Index(['A', 'B'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                },
                "this.index": {
                    "value": "Int64Index([0, 1, 2, 3], dtype='int64')",
                    "shape": "(4,)",
                    "omitted": false
                },
                "this.columns": {
                    "value": "Index(['A', 'B'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                },
                "left": {
                    "value": "array([[0. , 1.1],\n       [1. , nan],\n       [2. , 1.1],\n       [1. , nan]])",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "right": {
                    "value": "array([[1.1, 1. ],\n       [1. , nan],\n       [1.2, 1. ],\n       [1.3, nan]])",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "this.values": {
                    "value": "array([[0. , 1.1],\n       [1. , nan],\n       [2. , 1.1],\n       [nan, nan]])",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([[1.1, nan],\n       [nan, nan],\n       [1.2, nan],\n       [1.3, nan]])",
                    "shape": "(4, 2)",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "          A         B         C         X\na -0.659218  0.435478  1.270735  0.220762\nb -0.221513  0.270383 -1.684205  0.846294\nc -0.245443  0.029951 -0.312628  1.265499\nd -2.224192 -0.239951  1.329544  0.403112\ne  0.371278  1.380216 -1.510169  1.461771\nf -0.133945  0.901741 -0.448200  0.841603\ng  0.007002  0.034857 -0.527788  0.162617\nh  1.508878 -0.380114 -0.390133  0.519452\nj -0.376401  1.375407 -1.254385  0.325105\nk  0.210266  1.264396  1.119512 -1.146470",
                    "shape": "(10, 4)",
                    "omitted": false
                },
                "self": {
                    "value": "   A    B   C  D\na  0  NaN NaN  0\nb  1  1.0 NaN  1\nc  2  2.0 NaN  2\nd  3  3.0 NaN  3\ne  4  4.0 NaN  4\nf  5  NaN NaN  5\ng  6  1.0 NaN  6\nh  7  2.0 NaN  7\ni  8  3.0 NaN  8\nj  9  4.0 NaN  9",
                    "shape": "(10, 4)",
                    "omitted": false
                },
                "fill_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "func": {
                    "value": "<built-in function truediv>",
                    "shape": null,
                    "omitted": false
                },
                "other.values": {
                    "value": "array([[-0.6592183 ,  0.43547776,  1.27073459,  0.22076248] ... [ 0.2102662 ,  1.26439586,  1.1195117 , -1.14646995]])",
                    "shape": "(10, 4)",
                    "omitted": true
                }
            },
            {
                "this": {
                    "value": "     A    B   C    D   X\na  0.0  NaN NaN  0.0 NaN\nb  1.0  1.0 NaN  1.0 NaN\nc  2.0  2.0 NaN  2.0 NaN\nd  3.0  3.0 NaN  3.0 NaN\ne  4.0  4.0 NaN  4.0 NaN\nf  5.0  NaN NaN  5.0 NaN\ng  6.0  1.0 NaN  6.0 NaN\nh  7.0  2.0 NaN  7.0 NaN\ni  8.0  3.0 NaN  8.0 NaN\nj  9.0  4.0 NaN  9.0 NaN\nk  NaN  NaN NaN  NaN NaN",
                    "shape": "(11, 5)",
                    "omitted": false
                },
                "other": {
                    "value": "          A         B         C ... 264396  1.119512 NaN -1.146470",
                    "shape": "(11, 5)",
                    "omitted": true
                },
                "new_index": {
                    "value": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], dtype='object')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "new_columns": {
                    "value": "Index(['A', 'B', 'C', 'D', 'X'], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                },
                "this.index": {
                    "value": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], dtype='object')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "this.columns": {
                    "value": "Index(['A', 'B', 'C', 'D', 'X'], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                },
                "left": {
                    "value": "array([[ 0.,  0.,  0.,  0.,  0.],\n       [ 1.,  1.,  0.,  1.,  0.],\n       [ 2.,  2.,  0.,  2.,  0.],\n       [ 3.,  3.,  0.,  3.,  0.],\n       [ 4.,  4.,  0.,  4.,  0.],\n       [ 5.,  0.,  0.,  5.,  0.],\n       [ 6.,  1.,  0.,  6.,  0.],\n       [ 7.,  2.,  0.,  7.,  0.],\n       [ 8.,  3., nan,  8., nan],\n       [ 9.,  4.,  0.,  9.,  0.],\n       [ 0.,  0.,  0., nan,  0.]])",
                    "shape": "(11, 5)",
                    "omitted": false
                },
                "right": {
                    "value": "array([[-0.6592183 ,  0.43547776,  1.27073459,  0.        ,  0.22076248] ... [ 0.2102662 ,  1.26439586,  1.1195117 ,         nan, -1.14646995]])",
                    "shape": "(11, 5)",
                    "omitted": true
                },
                "this.values": {
                    "value": "array([[ 0., nan, nan,  0., nan],\n       [ 1.,  1., nan,  1., nan],\n       [ 2.,  2., nan,  2., nan],\n       [ 3.,  3., nan,  3., nan],\n       [ 4.,  4., nan,  4., nan],\n       [ 5., nan, nan,  5., nan],\n       [ 6.,  1., nan,  6., nan],\n       [ 7.,  2., nan,  7., nan],\n       [ 8.,  3., nan,  8., nan],\n       [ 9.,  4., nan,  9., nan],\n       [nan, nan, nan, nan, nan]])",
                    "shape": "(11, 5)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([[-0.6592183 ,  0.43547776,  1.27073459,         nan,  0.22076248] ... [ 0.2102662 ,  1.26439586,  1.1195117 ,         nan, -1.14646995]])",
                    "shape": "(11, 5)",
                    "omitted": true
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "other": "DataFrame",
                "self": "DataFrame",
                "fill_value": "int",
                "other.values": "ndarray"
            },
            {
                "this": "DataFrame",
                "other": "DataFrame",
                "new_index": "Int64Index",
                "new_columns": "Index",
                "this.index": "Int64Index",
                "this.columns": "Index",
                "left": "ndarray",
                "right": "ndarray",
                "this.values": "ndarray",
                "other.values": "ndarray"
            }
        ],
        [
            {
                "other": "DataFrame",
                "self": "DataFrame",
                "fill_value": "int",
                "func": "builtin_function_or_method",
                "other.values": "ndarray"
            },
            {
                "this": "DataFrame",
                "other": "DataFrame",
                "new_index": "Index",
                "new_columns": "Index",
                "this.index": "Index",
                "this.columns": "Index",
                "left": "ndarray",
                "right": "ndarray",
                "this.values": "ndarray",
                "other.values": "ndarray"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "other": {
                    "value": "     A\n0  1.1\n2  1.2\n3  1.3",
                    "shape": "(3, 1)",
                    "omitted": false
                },
                "self": {
                    "value": "   A    B\n0  0  1.1\n1  1  NaN\n2  2  1.1",
                    "shape": "(3, 2)",
                    "omitted": false
                },
                "fill_value": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "other.values": {
                    "value": "array([[1.1],\n       [1.2],\n       [1.3]])",
                    "shape": "(3, 1)",
                    "omitted": false
                }
            },
            {
                "this": {
                    "value": "     A    B\n0  0.0  1.1\n1  1.0  NaN\n2  2.0  1.1\n3  NaN  NaN",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "other": {
                    "value": "     A   B\n0  1.1 NaN\n1  NaN NaN\n2  1.2 NaN\n3  1.3 NaN",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "new_index": {
                    "value": "Int64Index([0, 1, 2, 3], dtype='int64')",
                    "shape": "(4,)",
                    "omitted": false
                },
                "new_columns": {
                    "value": "Index(['A', 'B'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                },
                "this.index": {
                    "value": "Int64Index([0, 1, 2, 3], dtype='int64')",
                    "shape": "(4,)",
                    "omitted": false
                },
                "this.columns": {
                    "value": "Index(['A', 'B'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                },
                "left": {
                    "value": "array([[0. , 1.1],\n       [1. , nan],\n       [2. , 1.1],\n       [1. , nan]])",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "right": {
                    "value": "array([[1.1, 1. ],\n       [1. , nan],\n       [1.2, 1. ],\n       [1.3, nan]])",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "this.values": {
                    "value": "array([[0. , 1.1],\n       [1. , nan],\n       [2. , 1.1],\n       [nan, nan]])",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([[1.1, nan],\n       [nan, nan],\n       [1.2, nan],\n       [1.3, nan]])",
                    "shape": "(4, 2)",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "          A         B         C         X\na -1.102605  0.708238 -1.247285 -2.305650\nb  1.104099 -0.871389  1.451888  0.932526\nc  1.241794 -1.155608  1.142168 -0.663814\nd -0.151520 -2.153247  1.534316  0.704432\ne -0.023536 -1.324931 -1.268030 -0.294394\nf -0.068214 -0.378324  1.190747  0.372885\ng  1.382361  0.045302  0.191458  2.038317\nh  0.117021 -0.606790 -1.322205 -0.915639\nj -0.509122 -0.336717  0.455844 -0.756660\nk  0.884865 -0.520938 -1.009469 -0.950548",
                    "shape": "(10, 4)",
                    "omitted": false
                },
                "self": {
                    "value": "   A    B   C  D\na  0  NaN NaN  0\nb  1  1.0 NaN  1\nc  2  2.0 NaN  2\nd  3  3.0 NaN  3\ne  4  4.0 NaN  4\nf  5  NaN NaN  5\ng  6  1.0 NaN  6\nh  7  2.0 NaN  7\ni  8  3.0 NaN  8\nj  9  4.0 NaN  9",
                    "shape": "(10, 4)",
                    "omitted": false
                },
                "fill_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "func": {
                    "value": "<built-in function truediv>",
                    "shape": null,
                    "omitted": false
                },
                "other.values": {
                    "value": "array([[-1.10260516,  0.7082383 , -1.24728548, -2.30565012] ... [ 0.88486505, -0.52093834, -1.00946912, -0.95054776]])",
                    "shape": "(10, 4)",
                    "omitted": true
                }
            },
            {
                "this": {
                    "value": "     A    B   C    D   X\na  0.0  NaN NaN  0.0 NaN\nb  1.0  1.0 NaN  1.0 NaN\nc  2.0  2.0 NaN  2.0 NaN\nd  3.0  3.0 NaN  3.0 NaN\ne  4.0  4.0 NaN  4.0 NaN\nf  5.0  NaN NaN  5.0 NaN\ng  6.0  1.0 NaN  6.0 NaN\nh  7.0  2.0 NaN  7.0 NaN\ni  8.0  3.0 NaN  8.0 NaN\nj  9.0  4.0 NaN  9.0 NaN\nk  NaN  NaN NaN  NaN NaN",
                    "shape": "(11, 5)",
                    "omitted": false
                },
                "other": {
                    "value": "          A         B         C ... 520938 -1.009469 NaN -0.950548",
                    "shape": "(11, 5)",
                    "omitted": true
                },
                "new_index": {
                    "value": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], dtype='object')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "new_columns": {
                    "value": "Index(['A', 'B', 'C', 'D', 'X'], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                },
                "this.index": {
                    "value": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], dtype='object')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "this.columns": {
                    "value": "Index(['A', 'B', 'C', 'D', 'X'], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                },
                "left": {
                    "value": "array([[ 0.,  0.,  0.,  0.,  0.],\n       [ 1.,  1.,  0.,  1.,  0.],\n       [ 2.,  2.,  0.,  2.,  0.],\n       [ 3.,  3.,  0.,  3.,  0.],\n       [ 4.,  4.,  0.,  4.,  0.],\n       [ 5.,  0.,  0.,  5.,  0.],\n       [ 6.,  1.,  0.,  6.,  0.],\n       [ 7.,  2.,  0.,  7.,  0.],\n       [ 8.,  3., nan,  8., nan],\n       [ 9.,  4.,  0.,  9.,  0.],\n       [ 0.,  0.,  0., nan,  0.]])",
                    "shape": "(11, 5)",
                    "omitted": false
                },
                "right": {
                    "value": "array([[-1.10260516,  0.7082383 , -1.24728548,  0.        , -2.30565012] ... [ 0.88486505, -0.52093834, -1.00946912,         nan, -0.95054776]])",
                    "shape": "(11, 5)",
                    "omitted": true
                },
                "this.values": {
                    "value": "array([[ 0., nan, nan,  0., nan],\n       [ 1.,  1., nan,  1., nan],\n       [ 2.,  2., nan,  2., nan],\n       [ 3.,  3., nan,  3., nan],\n       [ 4.,  4., nan,  4., nan],\n       [ 5., nan, nan,  5., nan],\n       [ 6.,  1., nan,  6., nan],\n       [ 7.,  2., nan,  7., nan],\n       [ 8.,  3., nan,  8., nan],\n       [ 9.,  4., nan,  9., nan],\n       [nan, nan, nan, nan, nan]])",
                    "shape": "(11, 5)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([[-1.10260516,  0.7082383 , -1.24728548,         nan, -2.30565012] ... [ 0.88486505, -0.52093834, -1.00946912,         nan, -0.95054776]])",
                    "shape": "(11, 5)",
                    "omitted": true
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "other": "DataFrame",
                "self": "DataFrame",
                "fill_value": "int",
                "other.values": "ndarray"
            },
            {
                "this": "DataFrame",
                "other": "DataFrame",
                "new_index": "Int64Index",
                "new_columns": "Index",
                "this.index": "Int64Index",
                "this.columns": "Index",
                "left": "ndarray",
                "right": "ndarray",
                "this.values": "ndarray",
                "other.values": "ndarray"
            }
        ],
        [
            {
                "other": "DataFrame",
                "self": "DataFrame",
                "fill_value": "int",
                "func": "builtin_function_or_method",
                "other.values": "ndarray"
            },
            {
                "this": "DataFrame",
                "other": "DataFrame",
                "new_index": "Index",
                "new_columns": "Index",
                "this.index": "Index",
                "this.columns": "Index",
                "left": "ndarray",
                "right": "ndarray",
                "this.values": "ndarray",
                "other.values": "ndarray"
            }
        ]
    ],
    "3.1.1": [
        "RuntimeWarning in DataFrame.div with fill_value=0\n",
        "Bug in DataFrame.rfloordiv when alignment for different columns and index.\n"
    ],
    "3.1.2": [
        "Typically we silence these\n\nimport pandas as pd\nimport numpy as np\n\n\na = pd.DataFrame({\"A\": [0, 2], \"B\": [0, 4]})\nb = pd.DataFrame({\"A\": [0, 2], \"C\": [0, 4]}, index=[0, 2])\n\npdf1 = pd.DataFrame({'A': np.arange(10),\n                     'B': [np.nan, 1, 2, 3, 4] * 2,\n                     'C': [np.nan] * 10,\n                     'D': np.arange(10)},\n                    index=list('abcdefghij'), columns=list('ABCD'))\npdf2 = pd.DataFrame(np.random.randn(10, 4),\n                    index=list('abcdefghjk'), columns=list('ABCX'))\npdf1.div(pdf2, fill_value=0)\nouput\n\n/Users/taugspurger/sandbox/pandas/pandas/core/frame.py:5138: RuntimeWarning: divide by zero encountered in true_divide\n  return func(left, right)\n/Users/taugspurger/sandbox/pandas/pandas/core/frame.py:5138: RuntimeWarning: invalid value encountered in true_divide\n  return func(left, right)\nOut[46]:\n           A          B    C    D    X\na  -0.000000   0.000000 -0.0  NaN  0.0\nb  -1.381770  -0.870061  0.0  inf -0.0\nc  -7.686931  -5.446084  0.0  inf  0.0\nd  -5.396100   1.323770 -0.0  inf  0.0\ne   4.114989  -4.120187 -0.0  inf  0.0\nf -15.748104   0.000000  0.0  inf  0.0\ng  -7.147032   0.990337 -0.0  inf  0.0\nh  -3.421108  -3.465087  0.0  inf  0.0\ni        inf        inf  NaN  inf  NaN\nj  27.476268  40.169326 -0.0  inf -0.0\nk  -0.000000   0.000000  0.0  NaN -0.0\n",
        "I think that .loc[0, 'A'] should be inf.\n\nIn [36]: a = pd.DataFrame({\"A\": [0, 1, 2], 'B': [1.1, None, 1.1]})\n\nIn [37]: b = pd.DataFrame({\"A\": [1.1, 1.2, 1.3]}, index=[0, 2, 3])\n\nIn [38]: a.rfloordiv(b, fill_value=1)\nOut[38]:\n     A    B\n0  NaN  0.0\n1  1.0  NaN\n2  0.0  0.0\n3  1.0  NaN\nto match\n\nIn [49]: a.rfloordiv(1.1, fill_value=1)\nOut[49]:\n     A    B\n0  inf  1.0\n1  1.0  1.0\n2  0.0  1.0\ncc @jbrockmendel\n"
    ]
}