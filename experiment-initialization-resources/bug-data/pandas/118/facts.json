{
    "1.1.1": "@Appender(\n    _shared_docs[\"melt\"]\n    % dict(caller=\"pd.melt(df, \", versionadded=\"\", other=\"DataFrame.melt\")\n)\ndef melt(\n    frame: DataFrame,\n    id_vars=None,\n    value_vars=None,\n    var_name=None,\n    value_name=\"value\",\n    col_level=None,\n) -> DataFrame:\n    # TODO: what about the existing index?\n    # If multiindex, gather names of columns on all level for checking presence\n    # of `id_vars` and `value_vars`\n    if isinstance(frame.columns, ABCMultiIndex):\n        cols = [x for c in frame.columns for x in c]\n    else:\n        cols = list(frame.columns)\n\n    if id_vars is not None:\n        if not is_list_like(id_vars):\n            id_vars = [id_vars]\n        elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):\n            raise ValueError(\n                \"id_vars must be a list of tuples when columns are a MultiIndex\"\n            )\n        else:\n            # Check that `id_vars` are in frame\n            id_vars = list(id_vars)\n            missing = Index(np.ravel(id_vars)).difference(cols)\n            if not missing.empty:\n                raise KeyError(\n                    \"The following 'id_vars' are not present\"\n                    \" in the DataFrame: {missing}\"\n                    \"\".format(missing=list(missing))\n                )\n    else:\n        id_vars = []\n\n    if value_vars is not None:\n        if not is_list_like(value_vars):\n            value_vars = [value_vars]\n        elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(\n            value_vars, list\n        ):\n            raise ValueError(\n                \"value_vars must be a list of tuples when columns are a MultiIndex\"\n            )\n        else:\n            value_vars = list(value_vars)\n            # Check that `value_vars` are in frame\n            missing = Index(np.ravel(value_vars)).difference(cols)\n            if not missing.empty:\n                raise KeyError(\n                    \"The following 'value_vars' are not present in\"\n                    \" the DataFrame: {missing}\"\n                    \"\".format(missing=list(missing))\n                )\n        frame = frame.loc[:, id_vars + value_vars]\n    else:\n        frame = frame.copy()\n\n    if col_level is not None:  # allow list or other?\n        # frame is a copy\n        frame.columns = frame.columns.get_level_values(col_level)\n\n    if var_name is None:\n        if isinstance(frame.columns, ABCMultiIndex):\n            if len(frame.columns.names) == len(set(frame.columns.names)):\n                var_name = frame.columns.names\n            else:\n                var_name = [\n                    \"variable_{i}\".format(i=i) for i in range(len(frame.columns.names))\n                ]\n        else:\n            var_name = [\n                frame.columns.name if frame.columns.name is not None else \"variable\"\n            ]\n    if isinstance(var_name, str):\n        var_name = [var_name]\n\n    N, K = frame.shape\n    K -= len(id_vars)\n\n    mdata = {}\n    for col in id_vars:\n        id_data = frame.pop(col)\n        if is_extension_array_dtype(id_data):\n            id_data = concat([id_data] * K, ignore_index=True)\n        else:\n            id_data = np.tile(id_data.values, K)\n        mdata[col] = id_data\n\n    mcolumns = id_vars + var_name + [value_name]\n\n    mdata[value_name] = frame.values.ravel(\"F\")\n    for i, col in enumerate(var_name):\n        # asanyarray will keep the columns as an Index\n        mdata[col] = np.asanyarray(frame.columns._get_level_values(i)).repeat(N)\n\n    return frame._constructor(mdata, columns=mcolumns)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "pandas/core/reshape/melt.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_melt_mixed_int_str_id_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"], \"b\": [1], \"d\": [2]})\n        result = melt(df, id_vars=[0, \"a\"], value_vars=[\"b\", \"d\"])\n        expected = DataFrame(\n            {0: [\"foo\"] * 2, \"a\": [\"bar\"] * 2, \"variable\": list(\"bd\"), \"value\": [1, 2]}\n        )\n        tm.assert_frame_equal(result, expected)",
        "    def test_melt_mixed_int_str_value_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"]})\n        result = melt(df, value_vars=[0, \"a\"])\n        expected = DataFrame({\"variable\": [0, \"a\"], \"value\": [\"foo\", \"bar\"]})\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/reshape/test_melt.py",
        "pandas/tests/reshape/test_melt.py"
    ],
    "2.1.1": [
        [
            "E                   KeyError: \"The following 'id_vars' are not present in the DataFrame: ['0']\""
        ],
        [
            "E                   KeyError: \"The following 'value_vars' are not present in the DataFrame: ['0']\""
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.reshape.test_melt.TestMelt object at 0x7fcd92ac0f40>\n\n    def test_melt_mixed_int_str_id_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"], \"b\": [1], \"d\": [2]})\n>       result = melt(df, id_vars=[0, \"a\"], value_vars=[\"b\", \"d\"])\n\npandas/tests/reshape/test_melt.py:323: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nframe =      0    a  b  d\n0  foo  bar  1  2, id_vars = [0, 'a']\nvalue_vars = ['b', 'd'], var_name = None, value_name = 'value', col_level = None\n\n    @Appender(\n        _shared_docs[\"melt\"]\n        % dict(caller=\"pd.melt(df, \", versionadded=\"\", other=\"DataFrame.melt\")\n    )\n    def melt(\n        frame: DataFrame,\n        id_vars=None,\n        value_vars=None,\n        var_name=None,\n        value_name=\"value\",\n        col_level=None,\n    ) -> DataFrame:\n        # TODO: what about the existing index?\n        # If multiindex, gather names of columns on all level for checking presence\n        # of `id_vars` and `value_vars`\n        if isinstance(frame.columns, ABCMultiIndex):\n            cols = [x for c in frame.columns for x in c]\n        else:\n            cols = list(frame.columns)\n    \n        if id_vars is not None:\n            if not is_list_like(id_vars):\n                id_vars = [id_vars]\n            elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):\n                raise ValueError(\n                    \"id_vars must be a list of tuples when columns are a MultiIndex\"\n                )\n            else:\n                # Check that `id_vars` are in frame\n                id_vars = list(id_vars)\n                missing = Index(np.ravel(id_vars)).difference(cols)\n                if not missing.empty:\n>                   raise KeyError(\n                        \"The following 'id_vars' are not present\"\n                        \" in the DataFrame: {missing}\"\n                        \"\".format(missing=list(missing))\n                    )",
            "\npandas/core/reshape/melt.py:52: KeyError"
        ],
        [
            "self = <pandas.tests.reshape.test_melt.TestMelt object at 0x7fcd94e8bb20>\n\n    def test_melt_mixed_int_str_value_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"]})\n>       result = melt(df, value_vars=[0, \"a\"])\n\npandas/tests/reshape/test_melt.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nframe =      0    a\n0  foo  bar, id_vars = [], value_vars = [0, 'a']\nvar_name = None, value_name = 'value', col_level = None\n\n    @Appender(\n        _shared_docs[\"melt\"]\n        % dict(caller=\"pd.melt(df, \", versionadded=\"\", other=\"DataFrame.melt\")\n    )\n    def melt(\n        frame: DataFrame,\n        id_vars=None,\n        value_vars=None,\n        var_name=None,\n        value_name=\"value\",\n        col_level=None,\n    ) -> DataFrame:\n        # TODO: what about the existing index?\n        # If multiindex, gather names of columns on all level for checking presence\n        # of `id_vars` and `value_vars`\n        if isinstance(frame.columns, ABCMultiIndex):\n            cols = [x for c in frame.columns for x in c]\n        else:\n            cols = list(frame.columns)\n    \n        if id_vars is not None:\n            if not is_list_like(id_vars):\n                id_vars = [id_vars]\n            elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):\n                raise ValueError(\n                    \"id_vars must be a list of tuples when columns are a MultiIndex\"\n                )\n            else:\n                # Check that `id_vars` are in frame\n                id_vars = list(id_vars)\n                missing = Index(np.ravel(id_vars)).difference(cols)\n                if not missing.empty:\n                    raise KeyError(\n                        \"The following 'id_vars' are not present\"\n                        \" in the DataFrame: {missing}\"\n                        \"\".format(missing=list(missing))\n                    )\n        else:\n            id_vars = []\n    \n        if value_vars is not None:\n            if not is_list_like(value_vars):\n                value_vars = [value_vars]\n            elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(\n                value_vars, list\n            ):\n                raise ValueError(\n                    \"value_vars must be a list of tuples when columns are a MultiIndex\"\n                )\n            else:\n                value_vars = list(value_vars)\n                # Check that `value_vars` are in frame\n                missing = Index(np.ravel(value_vars)).difference(cols)\n                if not missing.empty:\n>                   raise KeyError(\n                        \"The following 'value_vars' are not present in\"\n                        \" the DataFrame: {missing}\"\n                        \"\".format(missing=list(missing))\n                    )",
            "\npandas/core/reshape/melt.py:74: KeyError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "frame.columns": {
                    "value": "Index([0, 'a', 'b', 'd'], dtype='object')",
                    "shape": "(4,)",
                    "omitted": false
                },
                "frame": {
                    "value": "     0    a  b  d\n0  foo  bar  1  2",
                    "shape": "(1, 4)",
                    "omitted": false
                },
                "id_vars": {
                    "value": "[0, 'a']",
                    "shape": "2",
                    "omitted": false
                },
                "value_vars": {
                    "value": "['b', 'd']",
                    "shape": "2",
                    "omitted": false
                },
                "frame.shape": {
                    "value": "(1, 4)",
                    "shape": "2",
                    "omitted": false
                },
                "value_name": {
                    "value": "'value'",
                    "shape": "5",
                    "omitted": false
                },
                "frame.values": {
                    "value": "array([['foo', 'bar', 1, 2]], dtype=object)",
                    "shape": "(1, 4)",
                    "omitted": false
                }
            },
            {
                "frame.columns": {
                    "value": "Index(['b', 'd'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                },
                "frame": {
                    "value": "   b  d\n0  1  2",
                    "shape": "(1, 2)",
                    "omitted": false
                },
                "cols": {
                    "value": "[0, 'a', 'b', 'd']",
                    "shape": "4",
                    "omitted": false
                },
                "missing": {
                    "value": "Index([], dtype='object')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "missing.empty": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "var_name": {
                    "value": "['variable']",
                    "shape": "1",
                    "omitted": false
                },
                "i": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "N": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "K": {
                    "value": "2",
                    "shape": null,
                    "omitted": false
                },
                "frame.shape": {
                    "value": "(1, 2)",
                    "shape": "2",
                    "omitted": false
                },
                "mdata": {
                    "value": "{0: array(['foo', 'foo'], dtype=object), 'a': array(['bar', 'bar'], dtype=object), 'value': array([1, 2]), 'variable': array(['b', 'd'], dtype=object)}",
                    "shape": "4",
                    "omitted": false
                },
                "col": {
                    "value": "'variable'",
                    "shape": "8",
                    "omitted": false
                },
                "id_data": {
                    "value": "array(['bar', 'bar'], dtype=object)",
                    "shape": "(2,)",
                    "omitted": false
                },
                "mcolumns": {
                    "value": "[0, 'a', 'variable', 'value']",
                    "shape": "4",
                    "omitted": false
                },
                "frame.values": {
                    "value": "array([[1, 2]])",
                    "shape": "(1, 2)",
                    "omitted": false
                }
            }
        ],
        [
            {
                "frame.columns": {
                    "value": "Index([0, 'a'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                },
                "frame": {
                    "value": "     0    a\n0  foo  bar",
                    "shape": "(1, 2)",
                    "omitted": false
                },
                "value_vars": {
                    "value": "[0, 'a']",
                    "shape": "2",
                    "omitted": false
                },
                "frame.shape": {
                    "value": "(1, 2)",
                    "shape": "2",
                    "omitted": false
                },
                "value_name": {
                    "value": "'value'",
                    "shape": "5",
                    "omitted": false
                },
                "frame.values": {
                    "value": "array([['foo', 'bar']], dtype=object)",
                    "shape": "(1, 2)",
                    "omitted": false
                }
            },
            {
                "cols": {
                    "value": "[0, 'a']",
                    "shape": "2",
                    "omitted": false
                },
                "id_vars": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "missing": {
                    "value": "Index([], dtype='object')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "missing.empty": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "var_name": {
                    "value": "['variable']",
                    "shape": "1",
                    "omitted": false
                },
                "i": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "N": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "K": {
                    "value": "2",
                    "shape": null,
                    "omitted": false
                },
                "mdata": {
                    "value": "{'value': array(['foo', 'bar'], dtype=object), 'variable': array([0, 'a'], dtype=object)}",
                    "shape": "2",
                    "omitted": false
                },
                "col": {
                    "value": "'variable'",
                    "shape": "8",
                    "omitted": false
                },
                "mcolumns": {
                    "value": "['variable', 'value']",
                    "shape": "2",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "frame.columns": "Index",
                "frame": "DataFrame",
                "id_vars": "list",
                "value_vars": "list",
                "frame.shape": "tuple",
                "value_name": "str",
                "frame.values": "ndarray"
            },
            {
                "frame.columns": "Index",
                "frame": "DataFrame",
                "cols": "list",
                "missing": "Index",
                "missing.empty": "bool",
                "var_name": "list",
                "i": "int",
                "N": "int",
                "K": "int",
                "frame.shape": "tuple",
                "mdata": "dict",
                "col": "str",
                "id_data": "ndarray",
                "mcolumns": "list",
                "frame.values": "ndarray"
            }
        ],
        [
            {
                "frame.columns": "Index",
                "frame": "DataFrame",
                "value_vars": "list",
                "frame.shape": "tuple",
                "value_name": "str",
                "frame.values": "ndarray"
            },
            {
                "cols": "list",
                "id_vars": "list",
                "missing": "Index",
                "missing.empty": "bool",
                "var_name": "list",
                "i": "int",
                "N": "int",
                "K": "int",
                "mdata": "dict",
                "col": "str",
                "mcolumns": "list"
            }
        ]
    ],
    "3.1.1": [
        "melt does not recognize numeric column names\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nimport pandas as pd\n\ndf = pd.DataFrame(columns=[1, \"string\"])\npd.melt(df, id_vars=[1, \"string\"])\nProblem description\nThe shown example fails with\n\nTraceback (most recent call last):\n  File \"test.py\", line 5, in <module>\n    pd.melt(df, id_vars=[1, \"string\"])\n  File \"/home/nils/projects/tsfresh/venv/lib/python3.6/site-packages/pandas/core/reshape/melt.py\", line 52, in melt\n    \"\".format(missing=list(missing))\nKeyError: \"The following 'id_vars' are not present in the DataFrame: ['1']\"\nand I guess the reason is that the call of\n\nIndex(np.ravel(id_vars))\nin pd.melt somehow casts the numerical column name 1 to the string \"1\".\n\nI am not sure if this is intended behavior or if the case of numerical column names is just not supported, but at least in older pandas versions (e.g. 0.23.4) this still worked.\n\nThanks for looking into this! I am also fine if this is closed with \"won't fix\" :-)\n"
    ],
    "used_imports": "import numpy as np\nfrom pandas.util._decorators import Appender\nfrom pandas.core.dtypes.common import is_extension_array_dtype, is_list_like\nfrom pandas.core.dtypes.generic import ABCMultiIndex\nfrom pandas.core.frame import DataFrame, _shared_docs\nfrom pandas.core.indexes.base import Index\nfrom pandas.core.reshape.concat import concat"
}