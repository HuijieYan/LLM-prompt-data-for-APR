{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom typing import TYPE_CHECKING, Callable, Dict, List, Tuple, Union\nfrom pandas.core.dtypes.generic import ABCDataFrame, ABCSeries\nimport pandas.core.common as com\nfrom pandas.core.indexes.api import Index, MultiIndex, get_objs_combined_axis\nfrom pandas import DataFrame\nfrom pandas import DataFrame\nfrom pandas import DataFrame\n```\n\n# The source code of the buggy function\n```python\n# The relative path of the buggy file: pandas/core/reshape/pivot.py\n\n# this is the buggy function you need to fix\ndef crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> \"DataFrame\":\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors. By default\n    computes a frequency table of the factors unless an array of values and an\n    aggregation function are passed.\n\n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n\n        .. versionadded:: 0.21.0\n\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n\n        - If passed 'all' or `True`, will normalize over all values.\n        - If passed 'index' will normalize over each row.\n        - If passed 'columns' will normalize over each column.\n        - If margins is `True`, will also normalize margin values.\n\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n\n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n\n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n\n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n\n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n\n    Examples\n    --------\n    >>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n    ...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n    >>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n    ...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n    >>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n    ...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n    ...              dtype=object)\n    >>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\n    b   one        two\n    c   dull shiny dull shiny\n    a\n    bar    1     2    1     0\n    foo    2     2    1     2\n\n    Here 'c' and 'f' are not represented in the data and will not be\n    shown in the output because dropna is True by default. Set\n    dropna=False to preserve categories with no data.\n\n    >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n    >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n    >>> pd.crosstab(foo, bar)\n    col_0  d  e\n    row_0\n    a      1  0\n    b      0  1\n    >>> pd.crosstab(foo, bar, dropna=False)\n    col_0  d  e  f\n    row_0\n    a      1  0  0\n    b      0  1  0\n    c      0  0  0\n    \"\"\"\n\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n\n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    data: Dict = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    from pandas import DataFrame\n\n    df = DataFrame(data, index=common_idx)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    return table\n\n```",
    "2": "",
    "3": "# This function from the same file, but not the same class, is called by the buggy function\ndef pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame':\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef _normalize(table, normalize, margins: bool, margins_name='All'):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef _get_names(arrs, names, prefix: str='row'):\n    # Please ignore the body of this function\n\n",
    "4": "# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/reshape/test_pivot.py\n\n    def test_crosstab_both_tuple_names(self):\n        # GH 18321\n        s1 = pd.Series(range(3), name=(\"a\", \"b\"))\n        s2 = pd.Series(range(3), name=(\"c\", \"d\"))\n\n        expected = pd.DataFrame(\n            np.eye(3, dtype=\"int64\"),\n            index=pd.Index(range(3), name=(\"a\", \"b\")),\n            columns=pd.Index(range(3), name=(\"c\", \"d\")),\n        )\n        result = crosstab(s1, s2)\n        tm.assert_frame_equal(result, expected)\n```\n\n\n",
    "5": "## The error message from the failing test\n```text\nself = <pandas.tests.reshape.test_pivot.TestCrosstab object at 0x7f97fa767dc0>\n\n    def test_crosstab_both_tuple_names(self):\n        # GH 18321\n        s1 = pd.Series(range(3), name=(\"a\", \"b\"))\n        s2 = pd.Series(range(3), name=(\"c\", \"d\"))\n    \n        expected = pd.DataFrame(\n            np.eye(3, dtype=\"int64\"),\n            index=pd.Index(range(3), name=(\"a\", \"b\")),\n            columns=pd.Index(range(3), name=(\"c\", \"d\")),\n        )\n        result = crosstab(s1, s2)\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/reshape/test_pivot.py:2571: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nl = MultiIndex([('', 0),\n            ('', 1),\n            ('', 2)],\n           names=[None, ('c', 'd')])\nr = RangeIndex(start=0, stop=3, step=1, name=('c', 'd'))\nobj = 'DataFrame.columns'\n\n    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n>           assert_class_equal(l, r, exact=exact, obj=obj)\nE           AssertionError: DataFrame.columns are different\nE           \nE           DataFrame.columns classes are not equivalent\nE           [left]:  MultiIndex([('', 0),\nE                       ('', 1),\nE                       ('', 2)],\nE                      names=[None, ('c', 'd')])\nE           [right]: RangeIndex(start=0, stop=3, step=1, name=('c', 'd'))\n\npandas/_testing.py:623: AssertionError\n\n```\n",
    "6": "# Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n## Case 1\n### Runtime values and types of the input parameters of the buggy function\nindex, value: `0    0\n1    1\n2    2\nName: (a, b), dtype: int64`, type: `Series`\n\ncolumns, value: `0    0\n1    1\n2    2\nName: (c, d), dtype: int64`, type: `Series`\n\nmargins, value: `False`, type: `bool`\n\nmargins_name, value: `'All'`, type: `str`\n\ndropna, value: `True`, type: `bool`\n\nnormalize, value: `False`, type: `bool`\n\n### Runtime values and types of variables right before the buggy function's return\nindex, value: `[0    0\n1    1\n2    2\nName: (a, b), dtype: int64]`, type: `list`\n\ncolumns, value: `[0    0\n1    1\n2    2\nName: (c, d), dtype: int64]`, type: `list`\n\nrownames, value: `[('a', 'b')]`, type: `list`\n\ncolnames, value: `[('c', 'd')]`, type: `list`\n\ncommon_idx, value: `RangeIndex(start=0, stop=3, step=1)`, type: `RangeIndex`\n\npass_objs, value: `[0    0\n1    1\n2    2\nName: (a, b), dtype: int64, 0    0\n1    1\n2    2\nName: (c, d), dtype: int64]`, type: `list`\n\ndata, value: `{('a', 'b'): 0    0\n1    1\n2    2\nName: (a, b), dtype: int64, ('c', 'd'): 0    0\n1    1\n2    2\nName: (c, d), dtype: int64}`, type: `dict`\n\ndf, value: `   a  c __dummy__\n   b  d          \n0  0  0         0\n1  1  1         0\n2  2  2         0`, type: `DataFrame`\n\noriginal_df_cols, value: `MultiIndex([('a', 'b'),\n            ('c', 'd')],\n           )`, type: `MultiIndex`\n\ndf.columns, value: `MultiIndex([(        'a', 'b'),\n            (        'c', 'd'),\n            ('__dummy__',  '')],\n           )`, type: `MultiIndex`\n\nkwargs, value: `{'aggfunc': <built-in function len>, 'fill_value': 0}`, type: `dict`\n\ntable, value: `('c', 'd')  0  1  2\n(a, b)             \n0           1  0  0\n1           0  1  0\n2           0  0  1`, type: `DataFrame`\n\ntable.empty, value: `False`, type: `bool`\n\ncols_diff, value: `('__dummy__', '')`, type: `tuple`\n\n",
    "7": "# Expected values and types of variables during the failing test execution\nEach case below includes input parameter values and types, and the expected values and types of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n## Expected case 1\n### Input parameter values and types\n### The values and types of buggy function's parameters\nindex, value: `0    0\n1    1\n2    2\nName: (a, b), dtype: int64`, type: `Series`\n\ncolumns, value: `0    0\n1    1\n2    2\nName: (c, d), dtype: int64`, type: `Series`\n\nmargins, value: `False`, type: `bool`\n\nmargins_name, value: `'All'`, type: `str`\n\ndropna, value: `True`, type: `bool`\n\nnormalize, value: `False`, type: `bool`\n\n### Expected values and types of variables right before the buggy function's return\nindex, expected value: `[0    0\n1    1\n2    2\nName: (a, b), dtype: int64]`, type: `list`\n\ncolumns, expected value: `[0    0\n1    1\n2    2\nName: (c, d), dtype: int64]`, type: `list`\n\nrownames, expected value: `[('a', 'b')]`, type: `list`\n\ncolnames, expected value: `[('c', 'd')]`, type: `list`\n\ncommon_idx, expected value: `RangeIndex(start=0, stop=3, step=1)`, type: `RangeIndex`\n\npass_objs, expected value: `[0    0\n1    1\n2    2\nName: (a, b), dtype: int64, 0    0\n1    1\n2    2\nName: (c, d), dtype: int64]`, type: `list`\n\ndata, expected value: `{('a', 'b'): 0    0\n1    1\n2    2\nName: (a, b), dtype: int64, ('c', 'd'): 0    0\n1    1\n2    2\nName: (c, d), dtype: int64}`, type: `dict`\n\ndf, expected value: `   a  c __dummy__\n   b  d          \n0  0  0         0\n1  1  1         0\n2  2  2         0`, type: `DataFrame`\n\nkwargs, expected value: `{'aggfunc': <built-in function len>, 'fill_value': 0}`, type: `dict`\n\ntable, expected value: `                   \n('c', 'd')  0  1  2\n(a, b)             \n0           1  0  0\n1           0  1  0\n2           0  0  1`, type: `DataFrame`\n\n",
    "8": "# A GitHub issue for this bug\n\nThe issue's title:\n```text\npd.crosstab(s1, s2) keeps dummy MultiIndex as columns if both s1 and s2 have tuple name\n```\n\nThe issue's detailed description:\n```text\nCode Sample, a copy-pastable example if possible\nIn [2]: s1 = pd.Series(range(3), name=('a', 'b'))\n\nIn [3]: s2 = pd.Series(range(3), name=('c', 'd'))\n\nIn [4]: pd.crosstab(s1, s2)\nOut[4]: \n                   \n('c', 'd')  0  1  2\n(a, b)             \n0           1  0  0\n1           0  1  0\n2           0  0  1\n\nIn [5]: list(pd.crosstab(s1, s2).columns)\nOut[5]: [('', 0), ('', 1), ('', 2)]\nProblem description\nWhile the example is similar to that reported in #18304, the fix doesn't seem to be related. Reminder: test by expanding the test in #18309 .\n\nExpected Output\nIn [5]: list(pd.crosstab(s1, s2).columns)\nOut[5]: [0, 1, 2]\n```\n\n",
    "9": "Your output should follow these steps:\n1. Analyze the buggy function and its relationship with the related functions, test code, corresponding error message, the actual input/output variable information, the expected input/output variable information, the github issue.\n2. Identify a potential error location within the buggy function.\n3. Elucidate the bug's cause using:\n   (a) The buggy function, \n   (b) The related functions, \n   (c) The failing test, \n   (d) The corresponding error message, \n   (e) The actual input/output variable values, \n   (f) The expected input/output variable values, \n   (g) The GitHub Issue information\n\n4. Suggest approaches for fixing the bug.\n5. Present the corrected code for the buggy function such that it satisfied the following:\n   (a) the program passes the failing test, \n   (b) the function satisfies the expected input/output variable information provided, \n   (c) successfully resolves the issue posted in GitHub\n\n",
    "1.3.3": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom typing import TYPE_CHECKING, Callable, Dict, List, Tuple, Union\nfrom pandas.core.dtypes.generic import ABCDataFrame, ABCSeries\nimport pandas.core.common as com\nfrom pandas.core.indexes.api import Index, MultiIndex, get_objs_combined_axis\nfrom pandas import DataFrame\nfrom pandas import DataFrame\nfrom pandas import DataFrame\n```\n\n",
    "source_code_section": "# The source code of the buggy function\n```python\n# The relative path of the buggy file: pandas/core/reshape/pivot.py\n\n# this is the buggy function you need to fix\ndef crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> \"DataFrame\":\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors. By default\n    computes a frequency table of the factors unless an array of values and an\n    aggregation function are passed.\n\n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n\n        .. versionadded:: 0.21.0\n\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n\n        - If passed 'all' or `True`, will normalize over all values.\n        - If passed 'index' will normalize over each row.\n        - If passed 'columns' will normalize over each column.\n        - If margins is `True`, will also normalize margin values.\n\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n\n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n\n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n\n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n\n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n\n    Examples\n    --------\n    >>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n    ...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n    >>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n    ...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n    >>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n    ...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n    ...              dtype=object)\n    >>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\n    b   one        two\n    c   dull shiny dull shiny\n    a\n    bar    1     2    1     0\n    foo    2     2    1     2\n\n    Here 'c' and 'f' are not represented in the data and will not be\n    shown in the output because dropna is True by default. Set\n    dropna=False to preserve categories with no data.\n\n    >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n    >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n    >>> pd.crosstab(foo, bar)\n    col_0  d  e\n    row_0\n    a      1  0\n    b      0  1\n    >>> pd.crosstab(foo, bar, dropna=False)\n    col_0  d  e  f\n    row_0\n    a      1  0  0\n    b      0  1  0\n    c      0  0  0\n    \"\"\"\n\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n\n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    data: Dict = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    from pandas import DataFrame\n\n    df = DataFrame(data, index=common_idx)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    return table\n\n```",
    "source_code_body": "# The relative path of the buggy file: pandas/core/reshape/pivot.py\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame':\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef _normalize(table, normalize, margins: bool, margins_name='All'):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef _get_names(arrs, names, prefix: str='row'):\n    # Please ignore the body of this function\n\n# this is the buggy function you need to fix\ndef crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> \"DataFrame\":\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors. By default\n    computes a frequency table of the factors unless an array of values and an\n    aggregation function are passed.\n\n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n\n        .. versionadded:: 0.21.0\n\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n\n        - If passed 'all' or `True`, will normalize over all values.\n        - If passed 'index' will normalize over each row.\n        - If passed 'columns' will normalize over each column.\n        - If margins is `True`, will also normalize margin values.\n\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n\n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n\n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n\n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n\n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n\n    Examples\n    --------\n    >>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n    ...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n    >>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n    ...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n    >>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n    ...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n    ...              dtype=object)\n    >>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\n    b   one        two\n    c   dull shiny dull shiny\n    a\n    bar    1     2    1     0\n    foo    2     2    1     2\n\n    Here 'c' and 'f' are not represented in the data and will not be\n    shown in the output because dropna is True by default. Set\n    dropna=False to preserve categories with no data.\n\n    >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n    >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n    >>> pd.crosstab(foo, bar)\n    col_0  d  e\n    row_0\n    a      1  0\n    b      0  1\n    >>> pd.crosstab(foo, bar, dropna=False)\n    col_0  d  e  f\n    row_0\n    a      1  0  0\n    b      0  1  0\n    c      0  0  0\n    \"\"\"\n\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n\n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    data: Dict = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    from pandas import DataFrame\n\n    df = DataFrame(data, index=common_idx)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    return table\n\n"
}