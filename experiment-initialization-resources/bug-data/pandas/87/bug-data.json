{
    "pandas:87": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_87/pandas/core/reshape/pivot.py": {
            "buggy_functions": [
                {
                    "function_name": "crosstab",
                    "function_code": "def crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> \"DataFrame\":\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors. By default\n    computes a frequency table of the factors unless an array of values and an\n    aggregation function are passed.\n\n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n\n        .. versionadded:: 0.21.0\n\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n\n        - If passed 'all' or `True`, will normalize over all values.\n        - If passed 'index' will normalize over each row.\n        - If passed 'columns' will normalize over each column.\n        - If margins is `True`, will also normalize margin values.\n\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n\n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n\n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n\n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n\n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n\n    Examples\n    --------\n    >>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n    ...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n    >>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n    ...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n    >>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n    ...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n    ...              dtype=object)\n    >>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\n    b   one        two\n    c   dull shiny dull shiny\n    a\n    bar    1     2    1     0\n    foo    2     2    1     2\n\n    Here 'c' and 'f' are not represented in the data and will not be\n    shown in the output because dropna is True by default. Set\n    dropna=False to preserve categories with no data.\n\n    >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n    >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n    >>> pd.crosstab(foo, bar)\n    col_0  d  e\n    row_0\n    a      1  0\n    b      0  1\n    >>> pd.crosstab(foo, bar, dropna=False)\n    col_0  d  e  f\n    row_0\n    a      1  0  0\n    b      0  1  0\n    c      0  0  0\n    \"\"\"\n\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n\n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    data: Dict = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    from pandas import DataFrame\n\n    df = DataFrame(data, index=common_idx)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    return table\n",
                    "decorators": [],
                    "docstring": "Compute a simple cross tabulation of two (or more) factors. By default\ncomputes a frequency table of the factors unless an array of values and an\naggregation function are passed.\n\nParameters\n----------\nindex : array-like, Series, or list of arrays/Series\n    Values to group by in the rows.\ncolumns : array-like, Series, or list of arrays/Series\n    Values to group by in the columns.\nvalues : array-like, optional\n    Array of values to aggregate according to the factors.\n    Requires `aggfunc` be specified.\nrownames : sequence, default None\n    If passed, must match number of row arrays passed.\ncolnames : sequence, default None\n    If passed, must match number of column arrays passed.\naggfunc : function, optional\n    If specified, requires `values` be specified as well.\nmargins : bool, default False\n    Add row/column margins (subtotals).\nmargins_name : str, default 'All'\n    Name of the row/column that will contain the totals\n    when margins is True.\n\n    .. versionadded:: 0.21.0\n\ndropna : bool, default True\n    Do not include columns whose entries are all NaN.\nnormalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n    Normalize by dividing all values by the sum of values.\n\n    - If passed 'all' or `True`, will normalize over all values.\n    - If passed 'index' will normalize over each row.\n    - If passed 'columns' will normalize over each column.\n    - If margins is `True`, will also normalize margin values.\n\nReturns\n-------\nDataFrame\n    Cross tabulation of the data.\n\nSee Also\n--------\nDataFrame.pivot : Reshape data based on column values.\npivot_table : Create a pivot table as a DataFrame.\n\nNotes\n-----\nAny Series passed will have their name attributes used unless row or column\nnames for the cross-tabulation are specified.\n\nAny input passed containing Categorical data will have **all** of its\ncategories included in the cross-tabulation, even if the actual data does\nnot contain any instances of a particular category.\n\nIn the event that there aren't overlapping indexes an empty DataFrame will\nbe returned.\n\nExamples\n--------\n>>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n>>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n>>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n...              dtype=object)\n>>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\nb   one        two\nc   dull shiny dull shiny\na\nbar    1     2    1     0\nfoo    2     2    1     2\n\nHere 'c' and 'f' are not represented in the data and will not be\nshown in the output because dropna is True by default. Set\ndropna=False to preserve categories with no data.\n\n>>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n>>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n>>> pd.crosstab(foo, bar)\ncol_0  d  e\nrow_0\na      1  0\nb      0  1\n>>> pd.crosstab(foo, bar, dropna=False)\ncol_0  d  e  f\nrow_0\na      1  0  0\nb      0  1  0\nc      0  0  0",
                    "start_line": 453,
                    "end_line": 607,
                    "variables": {
                        "str": [
                            461
                        ],
                        "bool": [
                            462
                        ],
                        "index": [
                            560,
                            563,
                            572,
                            567
                        ],
                        "com.maybe_make_list": [
                            560,
                            561
                        ],
                        "com": [
                            560,
                            561
                        ],
                        "columns": [
                            561,
                            564,
                            573,
                            567
                        ],
                        "rownames": [
                            593,
                            563,
                            572
                        ],
                        "_get_names": [
                            563,
                            564
                        ],
                        "colnames": [
                            594,
                            564,
                            573
                        ],
                        "common_idx": [
                            569,
                            566,
                            583
                        ],
                        "pass_objs": [
                            568,
                            569,
                            567
                        ],
                        "x": [
                            567
                        ],
                        "isinstance": [
                            567
                        ],
                        "ABCSeries": [
                            567
                        ],
                        "ABCDataFrame": [
                            567
                        ],
                        "get_objs_combined_axis": [
                            569
                        ],
                        "data": [
                            571,
                            572,
                            573,
                            583
                        ],
                        "Dict": [
                            571
                        ],
                        "data.update": [
                            572,
                            573
                        ],
                        "zip": [
                            572,
                            573
                        ],
                        "values": [
                            584,
                            578,
                            588,
                            575
                        ],
                        "aggfunc": [
                            578,
                            589,
                            575
                        ],
                        "ValueError": [
                            576,
                            579
                        ],
                        "df": [
                            585,
                            588,
                            591,
                            583
                        ],
                        "DataFrame": [
                            583
                        ],
                        "kwargs": [
                            586,
                            589,
                            598
                        ],
                        "len": [
                            586
                        ],
                        "table": [
                            603,
                            604,
                            607,
                            591
                        ],
                        "df.pivot_table": [
                            591
                        ],
                        "margins": [
                            595,
                            604
                        ],
                        "margins_name": [
                            596,
                            604
                        ],
                        "dropna": [
                            597
                        ],
                        "normalize": [
                            602,
                            604
                        ],
                        "_normalize": [
                            603
                        ]
                    },
                    "filtered_variables": {
                        "index": [
                            560,
                            563,
                            572,
                            567
                        ],
                        "com.maybe_make_list": [
                            560,
                            561
                        ],
                        "com": [
                            560,
                            561
                        ],
                        "columns": [
                            561,
                            564,
                            573,
                            567
                        ],
                        "rownames": [
                            593,
                            563,
                            572
                        ],
                        "_get_names": [
                            563,
                            564
                        ],
                        "colnames": [
                            594,
                            564,
                            573
                        ],
                        "common_idx": [
                            569,
                            566,
                            583
                        ],
                        "pass_objs": [
                            568,
                            569,
                            567
                        ],
                        "x": [
                            567
                        ],
                        "ABCSeries": [
                            567
                        ],
                        "ABCDataFrame": [
                            567
                        ],
                        "get_objs_combined_axis": [
                            569
                        ],
                        "data": [
                            571,
                            572,
                            573,
                            583
                        ],
                        "Dict": [
                            571
                        ],
                        "data.update": [
                            572,
                            573
                        ],
                        "values": [
                            584,
                            578,
                            588,
                            575
                        ],
                        "aggfunc": [
                            578,
                            589,
                            575
                        ],
                        "df": [
                            585,
                            588,
                            591,
                            583
                        ],
                        "DataFrame": [
                            583
                        ],
                        "kwargs": [
                            586,
                            589,
                            598
                        ],
                        "table": [
                            603,
                            604,
                            607,
                            591
                        ],
                        "df.pivot_table": [
                            591
                        ],
                        "margins": [
                            595,
                            604
                        ],
                        "margins_name": [
                            596,
                            604
                        ],
                        "dropna": [
                            597
                        ],
                        "normalize": [
                            602,
                            604
                        ],
                        "_normalize": [
                            603
                        ]
                    },
                    "diff_line_number": 583,
                    "class_data": null,
                    "used_imports": [
                        "from typing import TYPE_CHECKING, Callable, Dict, List, Tuple, Union",
                        "from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries",
                        "import pandas.core.common as com",
                        "from pandas.core.indexes.api import Index, MultiIndex, get_objs_combined_axis",
                        "from pandas import DataFrame",
                        "from pandas import DataFrame",
                        "from pandas import DataFrame"
                    ],
                    "variable_values": [
                        [
                            {
                                "index": {
                                    "variable_value": "0    0\n1    1\n2    2\nName: (a, b), dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "com.maybe_make_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": "0    0\n1    1\n2    2\nName: (c, d), dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "rownames": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_get_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "colnames": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "common_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pass_objs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_objs_combined_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "aggfunc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "df": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "df.pivot_table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "dropna": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalize": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "index": {
                                    "variable_value": "[0    0\n1    1\n2    2\nName: (a, b), dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "com.maybe_make_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": "[0    0\n1    1\n2    2\nName: (c, d), dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "rownames": {
                                    "variable_value": "[('a', 'b')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_get_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "colnames": {
                                    "variable_value": "[('c', 'd')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "common_idx": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "pass_objs": {
                                    "variable_value": "[0    0\n1    1\n2    2\nName: (a, b), dtype: int64, 0    0\n1    1\n2    2\nName: (c, d), dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_objs_combined_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "{('a', 'b'): 0    0\n1    1\n2    2\nName: (a, b), dtype: int64, ('c', 'd'): 0    0\n1    1\n2    2\nName: (c, d), dtype: int64}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7f56acbc3180>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "aggfunc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "df": {
                                    "variable_value": "   a  c __dummy__\n   b  d          \n0  0  0         0\n1  1  1         0\n2  2  2         0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "DataFrame": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7f56992f28b0>"
                                },
                                "kwargs": {
                                    "variable_value": "{'aggfunc': <built-in function len>, 'fill_value': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "table": {
                                    "variable_value": "                   \n('c', 'd')  0  1  2\n(a, b)             \n0           1  0  0\n1           0  1  0\n2           0  0  1",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "df.pivot_table": {
                                    "variable_value": "<bound method DataFrame.pivot_table of    a  c __dummy__\n   b  d          \n0  0  0         0\n1  1  1         0\n2  2  2         0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "dropna": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalize": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "index": {
                                    "variable_value": "0    0\n1    1\n2    2\nName: (a, b), dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "com.maybe_make_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": "0    0\n1    1\n2    2\nName: (c, d), dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "rownames": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_get_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "colnames": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "common_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pass_objs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_objs_combined_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "aggfunc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "df": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "original_df_cols": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "df.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "df.pivot_table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "dropna": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "table.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "df.columns.difference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "normalize": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "index": {
                                    "variable_value": "[0    0\n1    1\n2    2\nName: (a, b), dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "com.maybe_make_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": "[0    0\n1    1\n2    2\nName: (c, d), dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "rownames": {
                                    "variable_value": "[('a', 'b')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_get_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "colnames": {
                                    "variable_value": "[('c', 'd')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "common_idx": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "pass_objs": {
                                    "variable_value": "[0    0\n1    1\n2    2\nName: (a, b), dtype: int64, 0    0\n1    1\n2    2\nName: (c, d), dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_objs_combined_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "{('a', 'b'): 0    0\n1    1\n2    2\nName: (a, b), dtype: int64, ('c', 'd'): 0    0\n1    1\n2    2\nName: (c, d), dtype: int64}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7f50b4f75080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "aggfunc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "df": {
                                    "variable_value": "   a  c __dummy__\n   b  d          \n0  0  0         0\n1  1  1         0\n2  2  2         0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "DataFrame": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7f50c5bc04a0>"
                                },
                                "original_df_cols": {
                                    "variable_value": "MultiIndex([('a', 'b'),\n            ('c', 'd')],\n           )",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(2,)"
                                },
                                "df.columns": {
                                    "variable_value": "MultiIndex([(        'a', 'b'),\n            (        'c', 'd'),\n            ('__dummy__',  '')],\n           )",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(3,)"
                                },
                                "kwargs": {
                                    "variable_value": "{'aggfunc': <built-in function len>, 'fill_value': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "table": {
                                    "variable_value": "('c', 'd')  0  1  2\n(a, b)             \n0           1  0  0\n1           0  1  0\n2           0  0  1",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "df.pivot_table": {
                                    "variable_value": "<bound method DataFrame.pivot_table of    a  c __dummy__\n   b  d          \n0  0  0         0\n1  1  1         0\n2  2  2         0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "dropna": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "table.empty": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "cols_diff": {
                                    "variable_value": "('__dummy__', '')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "df.columns.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "normalize": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot_table\"], indents=1)\ndef pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = []\n        for x in keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        # gh-21133\n        # we want to down cast if\n        # the original values are ints\n        # as we grouped with a NaN value\n        # and then dropped, coercing to floats\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n\n    # GH17038, this check should only happen if index is defined (not None)\n    if table.index.nlevels > 1 and index:\n        # Related GH #17123\n        # If index_names are integers, determine whether the integers refer\n        # to the level position or name.\n        index_names = agged.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.index.levels), names=table.index.names\n            )\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.columns.levels), names=table.columns.names\n            )\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # discard the top level\n    if (\n        values_passed\n        and not values_multi\n        and not table.empty\n        and (table.columns.nlevels > 1)\n    ):\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    # GH 15193 Make sure empty columns are removed if dropna=True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
                "def _add_margins(\n    table: Union[\"Series\", \"DataFrame\"],\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name: str = \"All\",\n    fill_value=None,\n):\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n\n    msg = 'Conflicting name \"{name}\" in margins'.format(name=margins_name)\n    for level in table.index.names:\n        if margins_name in table.index.get_level_values(level):\n            raise ValueError(msg)\n\n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n\n    if table.ndim == 2:\n        # i.e. DataFramae\n        for level in table.columns.names[1:]:\n            if margins_name in table.columns.get_level_values(level):\n                raise ValueError(msg)\n\n    key: Union[str, Tuple[str, ...]]\n    if len(rows) > 1:\n        key = (margins_name,) + (\"\",) * (len(rows) - 1)\n    else:\n        key = margins_name\n\n    if not values and isinstance(table, ABCSeries):\n        # If there are no values and the table is a series, then there is only\n        # one column in the data. Compute grand margin and return it.\n        return table.append(Series({key: grand_margin[margins_name]}))\n\n    elif values:\n        marginal_result_set = _generate_marginal_results(\n            table,\n            data,\n            values,\n            rows,\n            cols,\n            aggfunc,\n            observed,\n            grand_margin,\n            margins_name,\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n    else:\n        # no values, and table is a DataFrame\n        assert isinstance(table, ABCDataFrame)\n        marginal_result_set = _generate_marginal_results_without_values(\n            table, data, rows, cols, aggfunc, observed, margins_name\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n\n    row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n    # populate grand margin\n    for k in margin_keys:\n        if isinstance(k, str):\n            row_margin[k] = grand_margin[k]\n        else:\n            row_margin[k] = grand_margin[k[0]]\n\n    from pandas import DataFrame\n\n    margin_dummy = DataFrame(row_margin, columns=[key]).T\n\n    row_names = result.index.names\n    try:\n        # check the result column and leave floats\n        for dtype in set(result.dtypes):\n            cols = result.select_dtypes([dtype]).columns\n            margin_dummy[cols] = margin_dummy[cols].apply(\n                maybe_downcast_to_dtype, args=(dtype,)\n            )\n        result = result.append(margin_dummy)\n    except TypeError:\n\n        # we cannot reshape, so coerce the axis\n        result.index = result.index._to_safe_for_reshape()\n        result = result.append(margin_dummy)\n    result.index.names = row_names\n\n    return result",
                "def _compute_grand_margin(data, values, aggfunc, margins_name: str = \"All\"):\n\n    if values:\n        grand_margin = {}\n        for k, v in data[values].items():\n            try:\n                if isinstance(aggfunc, str):\n                    grand_margin[k] = getattr(v, aggfunc)()\n                elif isinstance(aggfunc, dict):\n                    if isinstance(aggfunc[k], str):\n                        grand_margin[k] = getattr(v, aggfunc[k])()\n                    else:\n                        grand_margin[k] = aggfunc[k](v)\n                else:\n                    grand_margin[k] = aggfunc(v)\n            except TypeError:\n                pass\n        return grand_margin\n    else:\n        return {margins_name: aggfunc(data.index)}",
                "def _generate_marginal_results(\n    table,\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed,\n    grand_margin,\n    margins_name: str = \"All\",\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        table_pieces = []\n        margin_keys = []\n\n        def _all_key(key):\n            return (key, margins_name) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows + values].groupby(rows, observed=observed).agg(aggfunc)\n            cat_axis = 1\n\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                all_key = _all_key(key)\n\n                # we are going to mutate this, so need to copy!\n                piece = piece.copy()\n                try:\n                    piece[all_key] = margin[key]\n                except TypeError:\n\n                    # we cannot reshape, so coerce the axis\n                    piece.set_axis(\n                        piece._get_axis(cat_axis)._to_safe_for_reshape(),\n                        axis=cat_axis,\n                        inplace=True,\n                    )\n                    piece[all_key] = margin[key]\n\n                table_pieces.append(piece)\n                margin_keys.append(all_key)\n        else:\n            margin = grand_margin\n            cat_axis = 0\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                all_key = _all_key(key)\n                table_pieces.append(piece)\n                table_pieces.append(Series(margin[key], index=[all_key]))\n                margin_keys.append(all_key)\n\n        result = concat(table_pieces, axis=cat_axis)\n\n        if len(rows) == 0:\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols) > 0:\n        row_margin = data[cols + values].groupby(cols, observed=observed).agg(aggfunc)\n        row_margin = row_margin.stack()\n\n        # slight hack\n        new_order = [len(cols)] + list(range(len(cols)))\n        row_margin.index = row_margin.index.reorder_levels(new_order)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin",
                "def _generate_marginal_results_without_values(\n    table: \"DataFrame\", data, rows, cols, aggfunc, observed, margins_name: str = \"All\"\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        margin_keys = []\n\n        def _all_key():\n            if len(cols) == 1:\n                return margins_name\n            return (margins_name,) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows].groupby(rows, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n\n        else:\n            margin = data.groupby(level=0, axis=0, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols):\n        row_margin = data[cols].groupby(cols, observed=observed).apply(aggfunc)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin",
                "def _convert_by(by):\n    if by is None:\n        by = []\n    elif (\n        is_scalar(by)\n        or isinstance(by, (np.ndarray, Index, ABCSeries, Grouper))\n        or hasattr(by, \"__call__\")\n    ):\n        by = [by]\n    else:\n        by = list(by)\n    return by",
                "@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot\"], indents=1)\ndef pivot(data: \"DataFrame\", index=None, columns=None, values=None) -> \"DataFrame\":\n    if values is None:\n        cols = [columns] if index is None else [index, columns]\n        append = index is None\n        indexed = data.set_index(cols, append=append)\n    else:\n        if index is None:\n            index = data.index\n        else:\n            index = data[index]\n        index = MultiIndex.from_arrays([index, data[columns]])\n\n        if is_list_like(values) and not isinstance(values, tuple):\n            # Exclude tuple because it is seen as a single column name\n            indexed = data._constructor(\n                data[values].values, index=index, columns=values\n            )\n        else:\n            indexed = data._constructor_sliced(data[values].values, index=index)\n    return indexed.unstack(columns)",
                "def crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> \"DataFrame\":\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors. By default\n    computes a frequency table of the factors unless an array of values and an\n    aggregation function are passed.\n\n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n\n        .. versionadded:: 0.21.0\n\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n\n        - If passed 'all' or `True`, will normalize over all values.\n        - If passed 'index' will normalize over each row.\n        - If passed 'columns' will normalize over each column.\n        - If margins is `True`, will also normalize margin values.\n\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n\n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n\n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n\n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n\n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n\n    Examples\n    --------\n    >>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n    ...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n    >>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n    ...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n    >>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n    ...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n    ...              dtype=object)\n    >>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\n    b   one        two\n    c   dull shiny dull shiny\n    a\n    bar    1     2    1     0\n    foo    2     2    1     2\n\n    Here 'c' and 'f' are not represented in the data and will not be\n    shown in the output because dropna is True by default. Set\n    dropna=False to preserve categories with no data.\n\n    >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n    >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n    >>> pd.crosstab(foo, bar)\n    col_0  d  e\n    row_0\n    a      1  0\n    b      0  1\n    >>> pd.crosstab(foo, bar, dropna=False)\n    col_0  d  e  f\n    row_0\n    a      1  0  0\n    b      0  1  0\n    c      0  0  0\n    \"\"\"\n\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n\n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    data: Dict = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    from pandas import DataFrame\n\n    df = DataFrame(data, index=common_idx)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    return table",
                "def _normalize(table, normalize, margins: bool, margins_name=\"All\"):\n\n    if not isinstance(normalize, (bool, str)):\n        axis_subs = {0: \"index\", 1: \"columns\"}\n        try:\n            normalize = axis_subs[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    if margins is False:\n\n        # Actual Normalizations\n        normalizers: Dict[Union[bool, str], Callable] = {\n            \"all\": lambda x: x / x.sum(axis=1).sum(axis=0),\n            \"columns\": lambda x: x / x.sum(),\n            \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n        }\n\n        normalizers[True] = normalizers[\"all\"]\n\n        try:\n            f = normalizers[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n        table = f(table)\n        table = table.fillna(0)\n\n    elif margins is True:\n        # keep index and column of pivoted table\n        table_index = table.index\n        table_columns = table.columns\n\n        # check if margin name is in (for MI cases) or equal to last\n        # index/column and save the column and index margin\n        if (margins_name not in table.iloc[-1, :].name) | (\n            margins_name != table.iloc[:, -1].name\n        ):\n            raise ValueError(\n                \"{mname} not in pivoted DataFrame\".format(mname=margins_name)\n            )\n        column_margin = table.iloc[:-1, -1]\n        index_margin = table.iloc[-1, :-1]\n\n        # keep the core table\n        table = table.iloc[:-1, :-1]\n\n        # Normalize core\n        table = _normalize(table, normalize=normalize, margins=False)\n\n        # Fix Margins\n        if normalize == \"columns\":\n            column_margin = column_margin / column_margin.sum()\n            table = concat([table, column_margin], axis=1)\n            table = table.fillna(0)\n            table.columns = table_columns\n\n        elif normalize == \"index\":\n            index_margin = index_margin / index_margin.sum()\n            table = table.append(index_margin)\n            table = table.fillna(0)\n            table.index = table_index\n\n        elif normalize == \"all\" or normalize is True:\n            column_margin = column_margin / column_margin.sum()\n            index_margin = index_margin / index_margin.sum()\n            index_margin.loc[margins_name] = 1\n            table = concat([table, column_margin], axis=1)\n            table = table.append(index_margin)\n\n            table = table.fillna(0)\n            table.index = table_index\n            table.columns = table_columns\n\n        else:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    else:\n        raise ValueError(\"Not a valid margins argument\")\n\n    return table",
                "def _get_names(arrs, names, prefix: str = \"row\"):\n    if names is None:\n        names = []\n        for i, arr in enumerate(arrs):\n            if isinstance(arr, ABCSeries) and arr.name is not None:\n                names.append(arr.name)\n            else:\n                names.append(\"{prefix}_{i}\".format(prefix=prefix, i=i))\n    else:\n        if len(names) != len(arrs):\n            raise AssertionError(\"arrays and names must have the same length\")\n        if not isinstance(names, list):\n            names = list(names)\n\n    return names",
                "def _all_key(key):\n    return (key, margins_name) + (\"\",) * (len(cols) - 1)",
                "def _all_key():\n    if len(cols) == 1:\n        return margins_name\n    return (margins_name,) + (\"\",) * (len(cols) - 1)"
            ],
            "inscope_function_signatures": [
                "pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame'",
                "_add_margins(table: Union['Series', 'DataFrame'], data, values, rows, cols, aggfunc, observed=None, margins_name: str='All', fill_value=None)",
                "_compute_grand_margin(data, values, aggfunc, margins_name: str='All')",
                "_generate_marginal_results(table, data, values, rows, cols, aggfunc, observed, grand_margin, margins_name: str='All')",
                "_generate_marginal_results_without_values(table: 'DataFrame', data, rows, cols, aggfunc, observed, margins_name: str='All')",
                "_convert_by(by)",
                "pivot(data: 'DataFrame', index=None, columns=None, values=None) -> 'DataFrame'",
                "crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name: str='All', dropna: bool=True, normalize=False) -> 'DataFrame'",
                "_normalize(table, normalize, margins: bool, margins_name='All')",
                "_get_names(arrs, names, prefix: str='row')",
                "_all_key(key)",
                "_all_key()"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    19
                ],
                "index": [
                    128,
                    162,
                    39,
                    560,
                    49,
                    433,
                    179,
                    434,
                    437,
                    438,
                    567,
                    563,
                    440,
                    441,
                    572,
                    446,
                    63,
                    449,
                    122,
                    126
                ],
                "_convert_by": [
                    40,
                    39
                ],
                "columns": [
                    450,
                    163,
                    40,
                    268,
                    433,
                    50,
                    179,
                    561,
                    564,
                    567,
                    441,
                    573,
                    63
                ],
                "isinstance": [
                    149,
                    289,
                    291,
                    292,
                    420,
                    42,
                    567,
                    183,
                    697,
                    443,
                    704,
                    200,
                    81,
                    222,
                    612,
                    102,
                    239,
                    244,
                    248,
                    255
                ],
                "aggfunc": [
                    390,
                    397,
                    408,
                    289,
                    290,
                    291,
                    164,
                    292,
                    293,
                    295,
                    297,
                    42,
                    45,
                    302,
                    575,
                    578,
                    325,
                    589,
                    208,
                    101,
                    234,
                    365,
                    246
                ],
                "list": [
                    704,
                    705,
                    98,
                    69,
                    425,
                    42,
                    369
                ],
                "pieces": [
                    58,
                    43,
                    61
                ],
                "List": [
                    43
                ],
                "DataFrame": [
                    43,
                    262,
                    583
                ],
                "keys": [
                    128,
                    100,
                    44,
                    80,
                    93,
                    59,
                    61,
                    63
                ],
                "func": [
                    59,
                    52,
                    45
                ],
                "table": [
                    640,
                    641,
                    645,
                    134,
                    646,
                    392,
                    137,
                    393,
                    139,
                    651,
                    141,
                    652,
                    143,
                    399,
                    145,
                    400,
                    147,
                    404,
                    149,
                    150,
                    405,
                    655,
                    153,
                    658,
                    663,
                    664,
                    665,
                    158,
                    159,
                    669,
                    670,
                    671,
                    677,
                    678,
                    680,
                    681,
                    682,
                    46,
                    174,
                    175,
                    177,
                    690,
                    180,
                    183,
                    184,
                    58,
                    186,
                    328,
                    204,
                    205,
                    591,
                    210,
                    212,
                    213,
                    603,
                    604,
                    222,
                    350,
                    607,
                    225,
                    229,
                    361,
                    362,
                    244,
                    246,
                    119,
                    122,
                    635,
                    636
                ],
                "pivot_table": [
                    46
                ],
                "data": [
                    390,
                    397,
                    408,
                    157,
                    287,
                    160,
                    302,
                    47,
                    435,
                    438,
                    440,
                    441,
                    571,
                    572,
                    445,
                    446,
                    573,
                    449,
                    325,
                    583,
                    76,
                    208,
                    84,
                    88,
                    89,
                    92,
                    100,
                    230,
                    365,
                    112,
                    113,
                    117,
                    246
                ],
                "values": [
                    285,
                    287,
                    161,
                    48,
                    177,
                    432,
                    443,
                    446,
                    575,
                    65,
                    449,
                    67,
                    578,
                    69,
                    325,
                    72,
                    584,
                    75,
                    588,
                    80,
                    208,
                    92,
                    222,
                    95,
                    98,
                    227,
                    231,
                    365,
                    110
                ],
                "fill_value": [
                    167,
                    51,
                    152,
                    153,
                    252
                ],
                "margins": [
                    619,
                    595,
                    53,
                    155,
                    604,
                    638
                ],
                "dropna": [
                    165,
                    102,
                    136,
                    597,
                    54,
                    183,
                    156
                ],
                "margins_name": [
                    386,
                    387,
                    645,
                    646,
                    649,
                    676,
                    166,
                    302,
                    55,
                    322,
                    200,
                    203,
                    205,
                    208,
                    596,
                    213,
                    218,
                    220,
                    604,
                    225,
                    237,
                    246
                ],
                "observed": [
                    100,
                    325,
                    390,
                    408,
                    328,
                    235,
                    365,
                    397,
                    246,
                    56,
                    350
                ],
                "pieces.append": [
                    58
                ],
                "keys.append": [
                    59
                ],
                "getattr": [
                    290,
                    59,
                    293
                ],
                "concat": [
                    677,
                    356,
                    61,
                    663
                ],
                "values_passed": [
                    65,
                    66,
                    172
                ],
                "is_list_like": [
                    67,
                    443
                ],
                "values_multi": [
                    68,
                    173,
                    71
                ],
                "i": [
                    128,
                    129,
                    131,
                    75,
                    76,
                    77,
                    696,
                    700
                ],
                "KeyError": [
                    96,
                    632,
                    616,
                    77
                ],
                "to_filter": [
                    88,
                    89,
                    85,
                    79
                ],
                "x": [
                    623,
                    80,
                    81,
                    82,
                    624,
                    84,
                    85,
                    625,
                    567
                ],
                "Grouper": [
                    81,
                    420
                ],
                "x.key": [
                    82
                ],
                "to_filter.append": [
                    85
                ],
                "TypeError": [
                    96,
                    298,
                    335,
                    273,
                    86
                ],
                "len": [
                    128,
                    385,
                    387,
                    389,
                    407,
                    179,
                    316,
                    702,
                    322,
                    324,
                    586,
                    88,
                    217,
                    218,
                    102,
                    358,
                    364,
                    369,
                    380,
                    126
                ],
                "data.columns": [
                    88,
                    92
                ],
                "key": [
                    225,
                    322,
                    353,
                    262,
                    351,
                    328,
                    329,
                    334,
                    343,
                    216,
                    218,
                    220,
                    93,
                    350,
                    95
                ],
                "values.drop": [
                    95
                ],
                "ValueError": [
                    96,
                    576,
                    579,
                    648,
                    201,
                    617,
                    685,
                    206,
                    688,
                    214,
                    633
                ],
                "grouped": [
                    100,
                    101
                ],
                "data.groupby": [
                    100,
                    397
                ],
                "agged": [
                    129,
                    101,
                    102,
                    103,
                    134,
                    114,
                    115,
                    117,
                    119,
                    126
                ],
                "grouped.agg": [
                    101
                ],
                "ABCDataFrame": [
                    102,
                    244,
                    149,
                    567,
                    183
                ],
                "agged.columns": [
                    102
                ],
                "agged.dropna": [
                    103
                ],
                "v": [
                    290,
                    293,
                    295,
                    297,
                    110,
                    112,
                    113,
                    114,
                    115,
                    117,
                    287
                ],
                "is_integer_dtype": [
                    113,
                    115
                ],
                "maybe_downcast_to_dtype": [
                    117,
                    270
                ],
                "dtype": [
                    267,
                    268,
                    117,
                    270
                ],
                "table.index.nlevels": [
                    137,
                    122
                ],
                "table.index": [
                    640,
                    137,
                    681,
                    139,
                    204,
                    205,
                    122,
                    671
                ],
                "index_names": [
                    130,
                    126
                ],
                "agged.index.names": [
                    129,
                    126
                ],
                "agged.index": [
                    129,
                    126
                ],
                "to_unstack": [
                    131,
                    133,
                    134,
                    127
                ],
                "range": [
                    128,
                    369
                ],
                "name": [
                    129,
                    130,
                    133,
                    646,
                    645
                ],
                "to_unstack.append": [
                    131,
                    133
                ],
                "agged.unstack": [
                    134
                ],
                "m": [
                    144,
                    138,
                    147,
                    141
                ],
                "MultiIndex.from_arrays": [
                    144,
                    441,
                    138
                ],
                "MultiIndex": [
                    144,
                    441,
                    138
                ],
                "cartesian_product": [
                    145,
                    139
                ],
                "table.index.levels": [
                    139
                ],
                "table.index.names": [
                    139,
                    204
                ],
                "table.reindex": [
                    147,
                    141
                ],
                "table.columns.nlevels": [
                    175,
                    143
                ],
                "table.columns": [
                    641,
                    362,
                    682,
                    175,
                    143,
                    145,
                    212,
                    213,
                    405,
                    665
                ],
                "table.columns.levels": [
                    145
                ],
                "table.columns.names": [
                    145,
                    212
                ],
                "table.sort_index": [
                    150
                ],
                "table._ensure_type": [
                    153
                ],
                "table.fillna": [
                    680,
                    664,
                    153,
                    636,
                    670
                ],
                "all": [
                    157
                ],
                "data.notna": [
                    157
                ],
                "_add_margins": [
                    158
                ],
                "table.empty": [
                    174
                ],
                "table.T": [
                    180
                ],
                "table.dropna": [
                    184
                ],
                "Substitution": [
                    25,
                    429
                ],
                "Appender": [
                    26,
                    430
                ],
                "_shared_docs": [
                    26,
                    430
                ],
                "Union": [
                    216,
                    622,
                    190
                ],
                "str": [
                    289,
                    292,
                    197,
                    612,
                    200,
                    461,
                    378,
                    622,
                    693,
                    216,
                    314,
                    283,
                    255
                ],
                "msg": [
                    203,
                    214,
                    206
                ],
                "format": [
                    649,
                    203,
                    700
                ],
                "level": [
                    213,
                    212,
                    204,
                    205
                ],
                "table.index.get_level_values": [
                    205
                ],
                "grand_margin": [
                    256,
                    225,
                    258,
                    290,
                    293,
                    295,
                    297,
                    236,
                    300,
                    208,
                    348,
                    286
                ],
                "_compute_grand_margin": [
                    208
                ],
                "table.ndim": [
                    210
                ],
                "table.columns.get_level_values": [
                    213
                ],
                "Tuple": [
                    216
                ],
                "rows": [
                    324,
                    325,
                    358,
                    389,
                    232,
                    390,
                    246,
                    217,
                    218
                ],
                "ABCSeries": [
                    697,
                    420,
                    222,
                    567
                ],
                "table.append": [
                    225,
                    669,
                    678
                ],
                "Series": [
                    225,
                    410,
                    372,
                    353
                ],
                "marginal_result_set": [
                    228,
                    239,
                    240,
                    241,
                    245,
                    248,
                    249,
                    250
                ],
                "_generate_marginal_results": [
                    228
                ],
                "cols": [
                    385,
                    322,
                    387,
                    408,
                    233,
                    268,
                    269,
                    364,
                    365,
                    369,
                    433,
                    435,
                    246,
                    407,
                    380,
                    316
                ],
                "tuple": [
                    248,
                    443,
                    239
                ],
                "result": [
                    264,
                    393,
                    267,
                    268,
                    272,
                    400,
                    402,
                    276,
                    277,
                    278,
                    404,
                    280,
                    410,
                    412,
                    356,
                    359,
                    361,
                    241,
                    372,
                    374,
                    250,
                    252
                ],
                "margin_keys": [
                    354,
                    382,
                    362,
                    394,
                    346,
                    241,
                    401,
                    405,
                    374,
                    250,
                    412,
                    254,
                    319
                ],
                "row_margin": [
                    256,
                    258,
                    262,
                    365,
                    366,
                    410,
                    241,
                    370,
                    372,
                    374,
                    408,
                    412,
                    250,
                    252
                ],
                "_generate_marginal_results_without_values": [
                    245
                ],
                "row_margin.reindex": [
                    252
                ],
                "result.columns": [
                    372,
                    410,
                    252
                ],
                "k": [
                    256,
                    258,
                    255,
                    290,
                    292,
                    293,
                    295,
                    297,
                    254,
                    287
                ],
                "margin_dummy": [
                    272,
                    277,
                    269,
                    262
                ],
                "T": [
                    262
                ],
                "row_names": [
                    264,
                    278
                ],
                "result.index.names": [
                    264,
                    278
                ],
                "result.index": [
                    264,
                    276,
                    278
                ],
                "set": [
                    267
                ],
                "result.dtypes": [
                    267
                ],
                "result.select_dtypes": [
                    268
                ],
                "apply": [
                    408,
                    269,
                    390,
                    397
                ],
                "result.append": [
                    272,
                    277
                ],
                "result.index._to_safe_for_reshape": [
                    276
                ],
                "items": [
                    287
                ],
                "dict": [
                    291
                ],
                "data.index": [
                    438,
                    302
                ],
                "table_pieces": [
                    352,
                    353,
                    356,
                    345,
                    318
                ],
                "margin": [
                    353,
                    325,
                    390,
                    392,
                    397,
                    334,
                    399,
                    343,
                    348
                ],
                "agg": [
                    365,
                    325
                ],
                "groupby": [
                    408,
                    365,
                    325,
                    390
                ],
                "cat_axis": [
                    356,
                    326,
                    328,
                    339,
                    340,
                    349,
                    350
                ],
                "piece": [
                    352,
                    328,
                    332,
                    334,
                    338,
                    339,
                    343,
                    345,
                    350
                ],
                "table.groupby": [
                    328,
                    350
                ],
                "all_key": [
                    353,
                    354,
                    391,
                    392,
                    329,
                    394,
                    334,
                    398,
                    399,
                    401,
                    343,
                    346,
                    351
                ],
                "_all_key": [
                    391,
                    329,
                    398,
                    351
                ],
                "piece.copy": [
                    332
                ],
                "piece.set_axis": [
                    338
                ],
                "_to_safe_for_reshape": [
                    339
                ],
                "piece._get_axis": [
                    339
                ],
                "table_pieces.append": [
                    352,
                    345,
                    353
                ],
                "margin_keys.append": [
                    401,
                    346,
                    354,
                    394
                ],
                "row_margin.stack": [
                    366
                ],
                "new_order": [
                    369,
                    370
                ],
                "row_margin.index": [
                    370
                ],
                "row_margin.index.reorder_levels": [
                    370
                ],
                "np.nan": [
                    410,
                    372
                ],
                "np": [
                    410,
                    420,
                    372
                ],
                "by": [
                    416,
                    417,
                    419,
                    420,
                    421,
                    423,
                    425,
                    426
                ],
                "is_scalar": [
                    419
                ],
                "np.ndarray": [
                    420
                ],
                "Index": [
                    420
                ],
                "hasattr": [
                    421
                ],
                "append": [
                    434,
                    435
                ],
                "indexed": [
                    449,
                    450,
                    435,
                    445
                ],
                "data.set_index": [
                    435
                ],
                "data._constructor": [
                    445
                ],
                "data._constructor_sliced": [
                    449
                ],
                "indexed.unstack": [
                    450
                ],
                "bool": [
                    610,
                    622,
                    612,
                    462
                ],
                "com.maybe_make_list": [
                    560,
                    561
                ],
                "com": [
                    560,
                    561
                ],
                "rownames": [
                    593,
                    563,
                    572
                ],
                "_get_names": [
                    563,
                    564
                ],
                "colnames": [
                    594,
                    564,
                    573
                ],
                "common_idx": [
                    569,
                    566,
                    583
                ],
                "pass_objs": [
                    568,
                    569,
                    567
                ],
                "get_objs_combined_axis": [
                    569
                ],
                "Dict": [
                    571,
                    622
                ],
                "data.update": [
                    572,
                    573
                ],
                "zip": [
                    572,
                    573
                ],
                "df": [
                    585,
                    588,
                    591,
                    583
                ],
                "kwargs": [
                    586,
                    589,
                    598
                ],
                "df.pivot_table": [
                    591
                ],
                "normalize": [
                    673,
                    612,
                    615,
                    658,
                    661,
                    631,
                    602,
                    667,
                    604
                ],
                "_normalize": [
                    658,
                    603
                ],
                "axis_subs": [
                    613,
                    615
                ],
                "normalizers": [
                    628,
                    622,
                    631
                ],
                "Callable": [
                    622
                ],
                "sum": [
                    623
                ],
                "x.sum": [
                    624,
                    625,
                    623
                ],
                "x.div": [
                    625
                ],
                "f": [
                    635,
                    631
                ],
                "table_index": [
                    640,
                    681,
                    671
                ],
                "table_columns": [
                    682,
                    641,
                    665
                ],
                "table.iloc": [
                    645,
                    646,
                    651,
                    652,
                    655
                ],
                "column_margin": [
                    674,
                    677,
                    651,
                    662,
                    663
                ],
                "index_margin": [
                    675,
                    676,
                    678,
                    652,
                    668,
                    669
                ],
                "column_margin.sum": [
                    674,
                    662
                ],
                "index_margin.sum": [
                    675,
                    668
                ],
                "index_margin.loc": [
                    676
                ],
                "names": [
                    704,
                    705,
                    707,
                    694,
                    695,
                    698,
                    700,
                    702
                ],
                "arr": [
                    696,
                    697,
                    698
                ],
                "enumerate": [
                    696
                ],
                "arrs": [
                    696,
                    702
                ],
                "arr.name": [
                    697,
                    698
                ],
                "names.append": [
                    698,
                    700
                ],
                "prefix": [
                    700
                ],
                "AssertionError": [
                    703
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    19
                ],
                "index": [
                    128,
                    162,
                    39,
                    560,
                    49,
                    433,
                    179,
                    434,
                    437,
                    438,
                    567,
                    563,
                    440,
                    441,
                    572,
                    446,
                    63,
                    449,
                    122,
                    126
                ],
                "_convert_by": [
                    40,
                    39
                ],
                "columns": [
                    450,
                    163,
                    40,
                    268,
                    433,
                    50,
                    179,
                    561,
                    564,
                    567,
                    441,
                    573,
                    63
                ],
                "aggfunc": [
                    390,
                    397,
                    408,
                    289,
                    290,
                    291,
                    164,
                    292,
                    293,
                    295,
                    297,
                    42,
                    45,
                    302,
                    575,
                    578,
                    325,
                    589,
                    208,
                    101,
                    234,
                    365,
                    246
                ],
                "pieces": [
                    58,
                    43,
                    61
                ],
                "List": [
                    43
                ],
                "DataFrame": [
                    43,
                    262,
                    583
                ],
                "keys": [
                    128,
                    100,
                    44,
                    80,
                    93,
                    59,
                    61,
                    63
                ],
                "func": [
                    59,
                    52,
                    45
                ],
                "table": [
                    640,
                    641,
                    645,
                    134,
                    646,
                    392,
                    137,
                    393,
                    139,
                    651,
                    141,
                    652,
                    143,
                    399,
                    145,
                    400,
                    147,
                    404,
                    149,
                    150,
                    405,
                    655,
                    153,
                    658,
                    663,
                    664,
                    665,
                    158,
                    159,
                    669,
                    670,
                    671,
                    677,
                    678,
                    680,
                    681,
                    682,
                    46,
                    174,
                    175,
                    177,
                    690,
                    180,
                    183,
                    184,
                    58,
                    186,
                    328,
                    204,
                    205,
                    591,
                    210,
                    212,
                    213,
                    603,
                    604,
                    222,
                    350,
                    607,
                    225,
                    229,
                    361,
                    362,
                    244,
                    246,
                    119,
                    122,
                    635,
                    636
                ],
                "pivot_table": [
                    46
                ],
                "data": [
                    390,
                    397,
                    408,
                    157,
                    287,
                    160,
                    302,
                    47,
                    435,
                    438,
                    440,
                    441,
                    571,
                    572,
                    445,
                    446,
                    573,
                    449,
                    325,
                    583,
                    76,
                    208,
                    84,
                    88,
                    89,
                    92,
                    100,
                    230,
                    365,
                    112,
                    113,
                    117,
                    246
                ],
                "values": [
                    285,
                    287,
                    161,
                    48,
                    177,
                    432,
                    443,
                    446,
                    575,
                    65,
                    449,
                    67,
                    578,
                    69,
                    325,
                    72,
                    584,
                    75,
                    588,
                    80,
                    208,
                    92,
                    222,
                    95,
                    98,
                    227,
                    231,
                    365,
                    110
                ],
                "fill_value": [
                    167,
                    51,
                    152,
                    153,
                    252
                ],
                "margins": [
                    619,
                    595,
                    53,
                    155,
                    604,
                    638
                ],
                "dropna": [
                    165,
                    102,
                    136,
                    597,
                    54,
                    183,
                    156
                ],
                "margins_name": [
                    386,
                    387,
                    645,
                    646,
                    649,
                    676,
                    166,
                    302,
                    55,
                    322,
                    200,
                    203,
                    205,
                    208,
                    596,
                    213,
                    218,
                    220,
                    604,
                    225,
                    237,
                    246
                ],
                "observed": [
                    100,
                    325,
                    390,
                    408,
                    328,
                    235,
                    365,
                    397,
                    246,
                    56,
                    350
                ],
                "pieces.append": [
                    58
                ],
                "keys.append": [
                    59
                ],
                "concat": [
                    677,
                    356,
                    61,
                    663
                ],
                "values_passed": [
                    65,
                    66,
                    172
                ],
                "is_list_like": [
                    67,
                    443
                ],
                "values_multi": [
                    68,
                    173,
                    71
                ],
                "i": [
                    128,
                    129,
                    131,
                    75,
                    76,
                    77,
                    696,
                    700
                ],
                "to_filter": [
                    88,
                    89,
                    85,
                    79
                ],
                "x": [
                    623,
                    80,
                    81,
                    82,
                    624,
                    84,
                    85,
                    625,
                    567
                ],
                "Grouper": [
                    81,
                    420
                ],
                "x.key": [
                    82
                ],
                "to_filter.append": [
                    85
                ],
                "data.columns": [
                    88,
                    92
                ],
                "key": [
                    225,
                    322,
                    353,
                    262,
                    351,
                    328,
                    329,
                    334,
                    343,
                    216,
                    218,
                    220,
                    93,
                    350,
                    95
                ],
                "values.drop": [
                    95
                ],
                "grouped": [
                    100,
                    101
                ],
                "data.groupby": [
                    100,
                    397
                ],
                "agged": [
                    129,
                    101,
                    102,
                    103,
                    134,
                    114,
                    115,
                    117,
                    119,
                    126
                ],
                "grouped.agg": [
                    101
                ],
                "ABCDataFrame": [
                    102,
                    244,
                    149,
                    567,
                    183
                ],
                "agged.columns": [
                    102
                ],
                "agged.dropna": [
                    103
                ],
                "v": [
                    290,
                    293,
                    295,
                    297,
                    110,
                    112,
                    113,
                    114,
                    115,
                    117,
                    287
                ],
                "is_integer_dtype": [
                    113,
                    115
                ],
                "maybe_downcast_to_dtype": [
                    117,
                    270
                ],
                "dtype": [
                    267,
                    268,
                    117,
                    270
                ],
                "table.index.nlevels": [
                    137,
                    122
                ],
                "table.index": [
                    640,
                    137,
                    681,
                    139,
                    204,
                    205,
                    122,
                    671
                ],
                "index_names": [
                    130,
                    126
                ],
                "agged.index.names": [
                    129,
                    126
                ],
                "agged.index": [
                    129,
                    126
                ],
                "to_unstack": [
                    131,
                    133,
                    134,
                    127
                ],
                "name": [
                    129,
                    130,
                    133,
                    646,
                    645
                ],
                "to_unstack.append": [
                    131,
                    133
                ],
                "agged.unstack": [
                    134
                ],
                "m": [
                    144,
                    138,
                    147,
                    141
                ],
                "MultiIndex.from_arrays": [
                    144,
                    441,
                    138
                ],
                "MultiIndex": [
                    144,
                    441,
                    138
                ],
                "cartesian_product": [
                    145,
                    139
                ],
                "table.index.levels": [
                    139
                ],
                "table.index.names": [
                    139,
                    204
                ],
                "table.reindex": [
                    147,
                    141
                ],
                "table.columns.nlevels": [
                    175,
                    143
                ],
                "table.columns": [
                    641,
                    362,
                    682,
                    175,
                    143,
                    145,
                    212,
                    213,
                    405,
                    665
                ],
                "table.columns.levels": [
                    145
                ],
                "table.columns.names": [
                    145,
                    212
                ],
                "table.sort_index": [
                    150
                ],
                "table._ensure_type": [
                    153
                ],
                "table.fillna": [
                    680,
                    664,
                    153,
                    636,
                    670
                ],
                "data.notna": [
                    157
                ],
                "_add_margins": [
                    158
                ],
                "table.empty": [
                    174
                ],
                "table.T": [
                    180
                ],
                "table.dropna": [
                    184
                ],
                "Substitution": [
                    25,
                    429
                ],
                "Appender": [
                    26,
                    430
                ],
                "_shared_docs": [
                    26,
                    430
                ],
                "Union": [
                    216,
                    622,
                    190
                ],
                "msg": [
                    203,
                    214,
                    206
                ],
                "level": [
                    213,
                    212,
                    204,
                    205
                ],
                "table.index.get_level_values": [
                    205
                ],
                "grand_margin": [
                    256,
                    225,
                    258,
                    290,
                    293,
                    295,
                    297,
                    236,
                    300,
                    208,
                    348,
                    286
                ],
                "_compute_grand_margin": [
                    208
                ],
                "table.ndim": [
                    210
                ],
                "table.columns.get_level_values": [
                    213
                ],
                "Tuple": [
                    216
                ],
                "rows": [
                    324,
                    325,
                    358,
                    389,
                    232,
                    390,
                    246,
                    217,
                    218
                ],
                "ABCSeries": [
                    697,
                    420,
                    222,
                    567
                ],
                "table.append": [
                    225,
                    669,
                    678
                ],
                "Series": [
                    225,
                    410,
                    372,
                    353
                ],
                "marginal_result_set": [
                    228,
                    239,
                    240,
                    241,
                    245,
                    248,
                    249,
                    250
                ],
                "_generate_marginal_results": [
                    228
                ],
                "cols": [
                    385,
                    322,
                    387,
                    408,
                    233,
                    268,
                    269,
                    364,
                    365,
                    369,
                    433,
                    435,
                    246,
                    407,
                    380,
                    316
                ],
                "result": [
                    264,
                    393,
                    267,
                    268,
                    272,
                    400,
                    402,
                    276,
                    277,
                    278,
                    404,
                    280,
                    410,
                    412,
                    356,
                    359,
                    361,
                    241,
                    372,
                    374,
                    250,
                    252
                ],
                "margin_keys": [
                    354,
                    382,
                    362,
                    394,
                    346,
                    241,
                    401,
                    405,
                    374,
                    250,
                    412,
                    254,
                    319
                ],
                "row_margin": [
                    256,
                    258,
                    262,
                    365,
                    366,
                    410,
                    241,
                    370,
                    372,
                    374,
                    408,
                    412,
                    250,
                    252
                ],
                "_generate_marginal_results_without_values": [
                    245
                ],
                "row_margin.reindex": [
                    252
                ],
                "result.columns": [
                    372,
                    410,
                    252
                ],
                "k": [
                    256,
                    258,
                    255,
                    290,
                    292,
                    293,
                    295,
                    297,
                    254,
                    287
                ],
                "margin_dummy": [
                    272,
                    277,
                    269,
                    262
                ],
                "T": [
                    262
                ],
                "row_names": [
                    264,
                    278
                ],
                "result.index.names": [
                    264,
                    278
                ],
                "result.index": [
                    264,
                    276,
                    278
                ],
                "result.dtypes": [
                    267
                ],
                "result.select_dtypes": [
                    268
                ],
                "apply": [
                    408,
                    269,
                    390,
                    397
                ],
                "result.append": [
                    272,
                    277
                ],
                "result.index._to_safe_for_reshape": [
                    276
                ],
                "items": [
                    287
                ],
                "data.index": [
                    438,
                    302
                ],
                "table_pieces": [
                    352,
                    353,
                    356,
                    345,
                    318
                ],
                "margin": [
                    353,
                    325,
                    390,
                    392,
                    397,
                    334,
                    399,
                    343,
                    348
                ],
                "agg": [
                    365,
                    325
                ],
                "groupby": [
                    408,
                    365,
                    325,
                    390
                ],
                "cat_axis": [
                    356,
                    326,
                    328,
                    339,
                    340,
                    349,
                    350
                ],
                "piece": [
                    352,
                    328,
                    332,
                    334,
                    338,
                    339,
                    343,
                    345,
                    350
                ],
                "table.groupby": [
                    328,
                    350
                ],
                "all_key": [
                    353,
                    354,
                    391,
                    392,
                    329,
                    394,
                    334,
                    398,
                    399,
                    401,
                    343,
                    346,
                    351
                ],
                "_all_key": [
                    391,
                    329,
                    398,
                    351
                ],
                "piece.copy": [
                    332
                ],
                "piece.set_axis": [
                    338
                ],
                "_to_safe_for_reshape": [
                    339
                ],
                "piece._get_axis": [
                    339
                ],
                "table_pieces.append": [
                    352,
                    345,
                    353
                ],
                "margin_keys.append": [
                    401,
                    346,
                    354,
                    394
                ],
                "row_margin.stack": [
                    366
                ],
                "new_order": [
                    369,
                    370
                ],
                "row_margin.index": [
                    370
                ],
                "row_margin.index.reorder_levels": [
                    370
                ],
                "np.nan": [
                    410,
                    372
                ],
                "np": [
                    410,
                    420,
                    372
                ],
                "by": [
                    416,
                    417,
                    419,
                    420,
                    421,
                    423,
                    425,
                    426
                ],
                "is_scalar": [
                    419
                ],
                "np.ndarray": [
                    420
                ],
                "Index": [
                    420
                ],
                "append": [
                    434,
                    435
                ],
                "indexed": [
                    449,
                    450,
                    435,
                    445
                ],
                "data.set_index": [
                    435
                ],
                "data._constructor": [
                    445
                ],
                "data._constructor_sliced": [
                    449
                ],
                "indexed.unstack": [
                    450
                ],
                "com.maybe_make_list": [
                    560,
                    561
                ],
                "com": [
                    560,
                    561
                ],
                "rownames": [
                    593,
                    563,
                    572
                ],
                "_get_names": [
                    563,
                    564
                ],
                "colnames": [
                    594,
                    564,
                    573
                ],
                "common_idx": [
                    569,
                    566,
                    583
                ],
                "pass_objs": [
                    568,
                    569,
                    567
                ],
                "get_objs_combined_axis": [
                    569
                ],
                "Dict": [
                    571,
                    622
                ],
                "data.update": [
                    572,
                    573
                ],
                "df": [
                    585,
                    588,
                    591,
                    583
                ],
                "kwargs": [
                    586,
                    589,
                    598
                ],
                "df.pivot_table": [
                    591
                ],
                "normalize": [
                    673,
                    612,
                    615,
                    658,
                    661,
                    631,
                    602,
                    667,
                    604
                ],
                "_normalize": [
                    658,
                    603
                ],
                "axis_subs": [
                    613,
                    615
                ],
                "normalizers": [
                    628,
                    622,
                    631
                ],
                "Callable": [
                    622
                ],
                "x.sum": [
                    624,
                    625,
                    623
                ],
                "x.div": [
                    625
                ],
                "f": [
                    635,
                    631
                ],
                "table_index": [
                    640,
                    681,
                    671
                ],
                "table_columns": [
                    682,
                    641,
                    665
                ],
                "table.iloc": [
                    645,
                    646,
                    651,
                    652,
                    655
                ],
                "column_margin": [
                    674,
                    677,
                    651,
                    662,
                    663
                ],
                "index_margin": [
                    675,
                    676,
                    678,
                    652,
                    668,
                    669
                ],
                "column_margin.sum": [
                    674,
                    662
                ],
                "index_margin.sum": [
                    675,
                    668
                ],
                "index_margin.loc": [
                    676
                ],
                "names": [
                    704,
                    705,
                    707,
                    694,
                    695,
                    698,
                    700,
                    702
                ],
                "arr": [
                    696,
                    697,
                    698
                ],
                "arrs": [
                    696,
                    702
                ],
                "arr.name": [
                    697,
                    698
                ],
                "names.append": [
                    698,
                    700
                ],
                "prefix": [
                    700
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_87/pandas/tests/reshape/test_pivot.py",
                "test_function": "test_crosstab_both_tuple_names",
                "test_function_code": "    def test_crosstab_both_tuple_names(self):\n        # GH 18321\n        s1 = pd.Series(range(3), name=(\"a\", \"b\"))\n        s2 = pd.Series(range(3), name=(\"c\", \"d\"))\n\n        expected = pd.DataFrame(\n            np.eye(3, dtype=\"int64\"),\n            index=pd.Index(range(3), name=(\"a\", \"b\")),\n            columns=pd.Index(range(3), name=(\"c\", \"d\")),\n        )\n        result = crosstab(s1, s2)\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: DataFrame.columns are different  DataFrame.columns classes are not equivalent [left]:  MultiIndex([('', 0),             ('', 1),             ('', 2)],            names=[None, ('c', 'd')]) [right]: RangeIndex(start=0, stop=3, step=1, name=('c', 'd'))",
                "full_test_error": "self = <pandas.tests.reshape.test_pivot.TestCrosstab object at 0x7f97fa767dc0>\n\n    def test_crosstab_both_tuple_names(self):\n        # GH 18321\n        s1 = pd.Series(range(3), name=(\"a\", \"b\"))\n        s2 = pd.Series(range(3), name=(\"c\", \"d\"))\n    \n        expected = pd.DataFrame(\n            np.eye(3, dtype=\"int64\"),\n            index=pd.Index(range(3), name=(\"a\", \"b\")),\n            columns=pd.Index(range(3), name=(\"c\", \"d\")),\n        )\n        result = crosstab(s1, s2)\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/reshape/test_pivot.py:2571: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nl = MultiIndex([('', 0),\n            ('', 1),\n            ('', 2)],\n           names=[None, ('c', 'd')])\nr = RangeIndex(start=0, stop=3, step=1, name=('c', 'd'))\nobj = 'DataFrame.columns'\n\n    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n>           assert_class_equal(l, r, exact=exact, obj=obj)\nE           AssertionError: DataFrame.columns are different\nE           \nE           DataFrame.columns classes are not equivalent\nE           [left]:  MultiIndex([('', 0),\nE                       ('', 1),\nE                       ('', 2)],\nE                      names=[None, ('c', 'd')])\nE           [right]: RangeIndex(start=0, stop=3, step=1, name=('c', 'd'))\n\npandas/_testing.py:623: AssertionError",
                "traceback": "l = MultiIndex([('', 0),\n            ('', 1),\n            ('', 2)],\n           names=[None, ('c', 'd')])\nr = RangeIndex(start=0, stop=3, step=1, name=('c', 'd'))\nobj = 'DataFrame.columns'\n\n    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n>           assert_class_equal(l, r, exact=exact, obj=obj)\nE           AssertionError: DataFrame.columns are different\nE           \nE           DataFrame.columns classes are not equivalent\nE           [left]:  MultiIndex([('', 0),\nE                       ('', 1),",
                "test_error_location": "E                       ('', 2)],\nE                      names=[None, ('c', 'd')])\nE           [right]: RangeIndex(start=0, stop=3, step=1, name=('c', 'd'))\n\npandas/_testing.py:623: AssertionError",
                "test_function_decorators": []
            }
        ]
    }
}