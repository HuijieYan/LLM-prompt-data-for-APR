{
    "pandas:157": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_157/pandas/core/reshape/merge.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_merge_keys",
                    "function_code": "def _get_merge_keys(self):\n\n    # note this function has side effects\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                # The generic error message is confusing for categoricals.\n                #\n                # In this function, the join keys include both the original\n                # ones of the merge_asof() call, and also the keys passed\n                # to its by= argument. Unordered but equal categories\n                # are not supported for the former, but will fail\n                # later with a ValueError, so we don't *need* to check\n                # for them here.\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, both sides category, but not equal ones\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            else:\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            raise MergeError(msg)\n\n    # validate tolerance; must be a Timedelta if we have a DTI\n    if self.tolerance is not None:\n\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n\n        msg = (\n            \"incompatible tolerance {tolerance}, must be compat \"\n            \"with type {lkdtype}\".format(\n                tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n            )\n        )\n\n        if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n            if not isinstance(self.tolerance, Timedelta):\n                raise MergeError(msg)\n            if self.tolerance < Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_int64_dtype(lt):\n            if not is_integer(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_float_dtype(lt):\n            if not is_number(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n\n    # validate allow_exact_matches\n    if not is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n    return left_join_keys, right_join_keys, join_names\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1591,
                    "end_line": 1664,
                    "variables": {
                        "left_join_keys": [
                            1664,
                            1594,
                            1629,
                            1597
                        ],
                        "right_join_keys": [
                            1664,
                            1594,
                            1597
                        ],
                        "join_names": [
                            1664,
                            1594
                        ],
                        "_get_merge_keys": [
                            1594
                        ],
                        "super": [
                            1594
                        ],
                        "i": [
                            1618,
                            1611,
                            1597
                        ],
                        "lk": [
                            1611,
                            1618,
                            1597,
                            1598,
                            1599
                        ],
                        "rk": [
                            1611,
                            1618,
                            1597,
                            1598,
                            1599
                        ],
                        "enumerate": [
                            1597
                        ],
                        "zip": [
                            1597
                        ],
                        "is_dtype_equal": [
                            1598
                        ],
                        "lk.dtype": [
                            1618,
                            1611,
                            1598,
                            1599
                        ],
                        "rk.dtype": [
                            1618,
                            1611,
                            1598,
                            1599
                        ],
                        "is_categorical_dtype": [
                            1599
                        ],
                        "msg": [
                            1608,
                            1640,
                            1646,
                            1615,
                            1652,
                            1621,
                            1661,
                            1662,
                            1631
                        ],
                        "format": [
                            1616,
                            1609,
                            1632
                        ],
                        "repr": [
                            1618,
                            1611,
                            1634
                        ],
                        "MergeError": [
                            1640,
                            1642,
                            1646,
                            1648,
                            1652,
                            1621,
                            1654,
                            1657,
                            1662
                        ],
                        "self.tolerance": [
                            1634,
                            1639,
                            1641,
                            1645,
                            1647,
                            1651,
                            1653,
                            1624
                        ],
                        "self": [
                            1634,
                            1639,
                            1641,
                            1645,
                            1647,
                            1651,
                            1653,
                            1624,
                            1626,
                            1627,
                            1660,
                            1662
                        ],
                        "self.left_index": [
                            1626
                        ],
                        "lt": [
                            1634,
                            1638,
                            1644,
                            1650,
                            1627,
                            1629
                        ],
                        "self.left.index": [
                            1627
                        ],
                        "self.left": [
                            1627
                        ],
                        "type": [
                            1634
                        ],
                        "lt.dtype": [
                            1634
                        ],
                        "is_datetime64_dtype": [
                            1638
                        ],
                        "is_datetime64tz_dtype": [
                            1638
                        ],
                        "isinstance": [
                            1639
                        ],
                        "Timedelta": [
                            1641,
                            1639
                        ],
                        "is_int64_dtype": [
                            1644
                        ],
                        "is_integer": [
                            1645
                        ],
                        "is_float_dtype": [
                            1650
                        ],
                        "is_number": [
                            1651
                        ],
                        "is_bool": [
                            1660
                        ],
                        "self.allow_exact_matches": [
                            1660,
                            1662
                        ],
                        "msg.format": [
                            1662
                        ]
                    },
                    "filtered_variables": {
                        "left_join_keys": [
                            1664,
                            1594,
                            1629,
                            1597
                        ],
                        "right_join_keys": [
                            1664,
                            1594,
                            1597
                        ],
                        "join_names": [
                            1664,
                            1594
                        ],
                        "_get_merge_keys": [
                            1594
                        ],
                        "i": [
                            1618,
                            1611,
                            1597
                        ],
                        "lk": [
                            1611,
                            1618,
                            1597,
                            1598,
                            1599
                        ],
                        "rk": [
                            1611,
                            1618,
                            1597,
                            1598,
                            1599
                        ],
                        "is_dtype_equal": [
                            1598
                        ],
                        "lk.dtype": [
                            1618,
                            1611,
                            1598,
                            1599
                        ],
                        "rk.dtype": [
                            1618,
                            1611,
                            1598,
                            1599
                        ],
                        "is_categorical_dtype": [
                            1599
                        ],
                        "msg": [
                            1608,
                            1640,
                            1646,
                            1615,
                            1652,
                            1621,
                            1661,
                            1662,
                            1631
                        ],
                        "MergeError": [
                            1640,
                            1642,
                            1646,
                            1648,
                            1652,
                            1621,
                            1654,
                            1657,
                            1662
                        ],
                        "self.tolerance": [
                            1634,
                            1639,
                            1641,
                            1645,
                            1647,
                            1651,
                            1653,
                            1624
                        ],
                        "self": [
                            1634,
                            1639,
                            1641,
                            1645,
                            1647,
                            1651,
                            1653,
                            1624,
                            1626,
                            1627,
                            1660,
                            1662
                        ],
                        "self.left_index": [
                            1626
                        ],
                        "lt": [
                            1634,
                            1638,
                            1644,
                            1650,
                            1627,
                            1629
                        ],
                        "self.left.index": [
                            1627
                        ],
                        "self.left": [
                            1627
                        ],
                        "lt.dtype": [
                            1634
                        ],
                        "is_datetime64_dtype": [
                            1638
                        ],
                        "is_datetime64tz_dtype": [
                            1638
                        ],
                        "Timedelta": [
                            1641,
                            1639
                        ],
                        "is_int64_dtype": [
                            1644
                        ],
                        "is_integer": [
                            1645
                        ],
                        "is_float_dtype": [
                            1650
                        ],
                        "is_number": [
                            1651
                        ],
                        "is_bool": [
                            1660
                        ],
                        "self.allow_exact_matches": [
                            1660,
                            1662
                        ],
                        "msg.format": [
                            1662
                        ]
                    },
                    "diff_line_number": 1638,
                    "class_data": {
                        "signature": "class _AsOfMerge(_OrderedMerge)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, left, right, on=None, left_on=None, right_on=None, left_index=False, right_index=False, by=None, left_by=None, right_by=None, axis=1, suffixes=('_x', '_y'), copy=True, fill_method=None, how='asof', tolerance=None, allow_exact_matches=True, direction='backward'):\n    self.by = by\n    self.left_by = left_by\n    self.right_by = right_by\n    self.tolerance = tolerance\n    self.allow_exact_matches = allow_exact_matches\n    self.direction = direction\n    _OrderedMerge.__init__(self, left, right, on=on, left_on=left_on, right_on=right_on, left_index=left_index, right_index=right_index, axis=axis, how=how, suffixes=suffixes, fill_method=fill_method)",
                            "def _validate_specification(self):\n    super()._validate_specification()\n    if len(self.left_on) != 1 and (not self.left_index):\n        raise MergeError('can only asof on a key for left')\n    if len(self.right_on) != 1 and (not self.right_index):\n        raise MergeError('can only asof on a key for right')\n    if self.left_index and isinstance(self.left.index, MultiIndex):\n        raise MergeError('left can only have one index')\n    if self.right_index and isinstance(self.right.index, MultiIndex):\n        raise MergeError('right can only have one index')\n    if self.by is not None:\n        if self.left_by is not None or self.right_by is not None:\n            raise MergeError('Can only pass by OR left_by and right_by')\n        self.left_by = self.right_by = self.by\n    if self.left_by is None and self.right_by is not None:\n        raise MergeError('missing left_by')\n    if self.left_by is not None and self.right_by is None:\n        raise MergeError('missing right_by')\n    if self.left_by is not None:\n        if not is_list_like(self.left_by):\n            self.left_by = [self.left_by]\n        if not is_list_like(self.right_by):\n            self.right_by = [self.right_by]\n        if len(self.left_by) != len(self.right_by):\n            raise MergeError('left_by and right_by must be same length')\n        self.left_on = self.left_by + list(self.left_on)\n        self.right_on = self.right_by + list(self.right_on)\n    if self.direction not in ['backward', 'forward', 'nearest']:\n        raise MergeError('direction invalid: {direction}'.format(direction=self.direction))",
                            "@property\ndef _asof_key(self):\n    \"\"\" This is our asof key, the 'on' \"\"\"\n    return self.left_on[-1]",
                            "def _get_merge_keys(self):\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    for (i, (lk, rk)) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                msg = 'incompatible merge keys [{i}] {lkdtype} and {rkdtype}, both sides category, but not equal ones'.format(i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype))\n            else:\n                msg = 'incompatible merge keys [{i}] {lkdtype} and {rkdtype}, must be the same type'.format(i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype))\n            raise MergeError(msg)\n    if self.tolerance is not None:\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n        msg = 'incompatible tolerance {tolerance}, must be compat with type {lkdtype}'.format(tolerance=type(self.tolerance), lkdtype=repr(lt.dtype))\n        if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n            if not isinstance(self.tolerance, Timedelta):\n                raise MergeError(msg)\n            if self.tolerance < Timedelta(0):\n                raise MergeError('tolerance must be positive')\n        elif is_int64_dtype(lt):\n            if not is_integer(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError('tolerance must be positive')\n        elif is_float_dtype(lt):\n            if not is_number(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError('tolerance must be positive')\n        else:\n            raise MergeError('key must be integer, timestamp or float')\n    if not is_bool(self.allow_exact_matches):\n        msg = 'allow_exact_matches must be boolean, passed {passed}'\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n    return (left_join_keys, right_join_keys, join_names)",
                            "def _get_join_indexers(self):\n    \"\"\" return the join indexers \"\"\"\n\n    def flip(xs):\n        \"\"\" unlike np.transpose, this returns an array of tuples \"\"\"\n        xs = [x if not is_extension_array_dtype(x) else x._ndarray_values for x in xs]\n        labels = list(string.ascii_lowercase[:len(xs)])\n        dtypes = [x.dtype for x in xs]\n        labeled_dtypes = list(zip(labels, dtypes))\n        return np.array(list(zip(*xs)), labeled_dtypes)\n    left_values = self.left.index.values if self.left_index else self.left_join_keys[-1]\n    right_values = self.right.index.values if self.right_index else self.right_join_keys[-1]\n    tolerance = self.tolerance\n    msg_sorted = '{side} keys must be sorted'\n    msg_missings = 'Merge keys contain null values on {side} side'\n    if not Index(left_values).is_monotonic:\n        if isnull(left_values).any():\n            raise ValueError(msg_missings.format(side='left'))\n        else:\n            raise ValueError(msg_sorted.format(side='left'))\n    if not Index(right_values).is_monotonic:\n        if isnull(right_values).any():\n            raise ValueError(msg_missings.format(side='right'))\n        else:\n            raise ValueError(msg_sorted.format(side='right'))\n    if needs_i8_conversion(left_values):\n        left_values = left_values.view('i8')\n        right_values = right_values.view('i8')\n        if tolerance is not None:\n            tolerance = tolerance.value\n    if self.left_by is not None:\n        if self.left_index and self.right_index:\n            left_by_values = self.left_join_keys\n            right_by_values = self.right_join_keys\n        else:\n            left_by_values = self.left_join_keys[0:-1]\n            right_by_values = self.right_join_keys[0:-1]\n        if len(left_by_values) == 1:\n            left_by_values = left_by_values[0]\n            right_by_values = right_by_values[0]\n        else:\n            left_by_values = flip(left_by_values)\n            right_by_values = flip(right_by_values)\n        by_type = _get_cython_type_upcast(left_by_values.dtype)\n        by_type_caster = _type_casters[by_type]\n        left_by_values = by_type_caster(left_by_values)\n        right_by_values = by_type_caster(right_by_values)\n        func = _asof_by_function(self.direction)\n        return func(left_values, right_values, left_by_values, right_by_values, self.allow_exact_matches, tolerance)\n    else:\n        func = _asof_function(self.direction)\n        return func(left_values, right_values, self.allow_exact_matches, tolerance)"
                        ],
                        "constructor_variables": [
                            "self.by = by",
                            "self.left_by = left_by",
                            "self.right_by = right_by",
                            "self.tolerance = tolerance",
                            "self.allow_exact_matches = allow_exact_matches",
                            "self.direction = direction"
                        ],
                        "class_level_variables": [
                            "_merge_type = 'asof_merge'"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, left, right, on=None, left_on=None, right_on=None, left_index=False, right_index=False, by=None, left_by=None, right_by=None, axis=1, suffixes=('_x', '_y'), copy=True, fill_method=None, how='asof', tolerance=None, allow_exact_matches=True, direction='backward')",
                            "_validate_specification(self)",
                            "_asof_key(self)",
                            "_get_merge_keys(self)",
                            "_get_join_indexers(self)"
                        ],
                        "class_level_variable_names": [
                            "_merge_type"
                        ],
                        "constructor_variable_names": [
                            "tolerance",
                            "allow_exact_matches",
                            "direction",
                            "left_by",
                            "right_by",
                            "by"
                        ]
                    },
                    "used_imports": [
                        "from pandas.errors import MergeError",
                        "from pandas.core.dtypes.common import ensure_float64, ensure_int64, ensure_object, is_array_like, is_bool, is_bool_dtype, is_categorical_dtype, is_datetime64_dtype, is_datetime64tz_dtype, is_datetimelike, is_dtype_equal, is_extension_array_dtype, is_float_dtype, is_int64_dtype, is_integer, is_integer_dtype, is_list_like, is_number, is_numeric_dtype, is_object_dtype, needs_i8_conversion",
                        "from pandas import Categorical, DataFrame, Index, MultiIndex, Series, Timedelta"
                    ],
                    "variable_values": [
                        [
                            {
                                "left_join_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_join_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_merge_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lk.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MergeError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tolerance": {
                                    "variable_value": "Timedelta('0 days 00:00:00.001000')",
                                    "variable_type": "Timedelta",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.reshape.merge._AsOfMerge object at 0x7fa8cbab5be0>",
                                    "variable_type": "_AsOfMerge",
                                    "variable_shape": null
                                },
                                "self.left_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "             time  left\n0        00:00:00     0\n1 00:00:00.005000     1\n2 00:00:00.010000     2\n3 00:00:00.015000     3\n4 00:00:00.020000     4\n5 00:00:00.025000     5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(6, 2)"
                                },
                                "lt.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_int64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.allow_exact_matches": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "left_join_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_join_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_merge_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lk.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MergeError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tolerance": {
                                    "variable_value": "Timedelta('0 days 00:00:00.001000')",
                                    "variable_type": "Timedelta",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.reshape.merge._AsOfMerge object at 0x7f4a991e1040>",
                                    "variable_type": "_AsOfMerge",
                                    "variable_shape": null
                                },
                                "self.left_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "             time  left\n0        00:00:00     0\n1 00:00:00.005000     1\n2 00:00:00.010000     2\n3 00:00:00.015000     3\n4 00:00:00.020000     4\n5 00:00:00.025000     5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(6, 2)"
                                },
                                "lt.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_int64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.allow_exact_matches": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "left_join_keys": {
                                    "variable_value": "[array([       0,  5000000, 10000000, 15000000, 20000000, 25000000],\n      dtype='timedelta64[ns]')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "right_join_keys": {
                                    "variable_value": "[array([       0,  3000000,  9000000, 12000000, 15000000, 18000000],\n      dtype='timedelta64[ns]')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "join_names": {
                                    "variable_value": "['time']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_get_merge_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "lk": {
                                    "variable_value": "array([       0,  5000000, 10000000, 15000000, 20000000, 25000000],\n      dtype='timedelta64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "rk": {
                                    "variable_value": "array([       0,  3000000,  9000000, 12000000, 15000000, 18000000],\n      dtype='timedelta64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lk.dtype": {
                                    "variable_value": "dtype('<m8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "rk.dtype": {
                                    "variable_value": "dtype('<m8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": "\"incompatible tolerance <class 'pandas._libs.tslibs.timedeltas.Timedelta'>, must be compat with type dtype('<m8[ns]')\"",
                                    "variable_type": "str",
                                    "variable_shape": "116"
                                },
                                "MergeError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tolerance": {
                                    "variable_value": "Timedelta('0 days 00:00:00.001000')",
                                    "variable_type": "Timedelta",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.reshape.merge._AsOfMerge object at 0x7f4a991e1040>",
                                    "variable_type": "_AsOfMerge",
                                    "variable_shape": null
                                },
                                "self.left_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lt": {
                                    "variable_value": "array([       0,  5000000, 10000000, 15000000, 20000000, 25000000],\n      dtype='timedelta64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "self.left.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "             time  left\n0        00:00:00     0\n1 00:00:00.005000     1\n2 00:00:00.010000     2\n3 00:00:00.015000     3\n4 00:00:00.020000     4\n5 00:00:00.025000     5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(6, 2)"
                                },
                                "lt.dtype": {
                                    "variable_value": "dtype('<m8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_int64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.allow_exact_matches": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": "<built-in method format of str object at 0x7f4a991a12f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from pandas.core.dtypes.common import (\n    ensure_float64,\n    ensure_int64,\n    ensure_object,\n    is_array_like,\n    is_bool,\n    is_bool_dtype,\n    is_categorical_dtype,\n    is_datetime64_dtype,\n    is_datetime64tz_dtype,\n    is_datetimelike,\n    is_dtype_equal,\n    is_extension_array_dtype,\n    is_float_dtype,\n    is_int64_dtype,\n    is_integer,\n    is_integer_dtype,\n    is_list_like,\n    is_number,\n    is_numeric_dtype,\n    is_object_dtype,\n    needs_i8_conversion,\n)",
                    "start_line": 17,
                    "end_line": 39
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "@Substitution(\"\\nleft : DataFrame\")\n@Appender(_merge_doc, indents=0)\ndef merge(\n    left,\n    right,\n    how=\"inner\",\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index=False,\n    right_index=False,\n    sort=False,\n    suffixes=(\"_x\", \"_y\"),\n    copy=True,\n    indicator=False,\n    validate=None,\n):\n    op = _MergeOperation(\n        left,\n        right,\n        how=how,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        sort=sort,\n        suffixes=suffixes,\n        copy=copy,\n        indicator=indicator,\n        validate=validate,\n    )\n    return op.get_result()",
                        "signature": "merge(left, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)"
                    },
                    {
                        "code": "def _groupby_and_merge(by, on, left, right, _merge_pieces, check_duplicates=True):\n    \"\"\"\n    groupby & merge; we are always performing a left-by type operation\n\n    Parameters\n    ----------\n    by: field to group\n    on: duplicates field\n    left: left frame\n    right: right frame\n    _merge_pieces: function for merging\n    check_duplicates: boolean, default True\n        should we check & clean duplicates\n    \"\"\"\n\n    pieces = []\n    if not isinstance(by, (list, tuple)):\n        by = [by]\n\n    lby = left.groupby(by, sort=False)\n\n    # if we can groupby the rhs\n    # then we can get vastly better perf\n    try:\n\n        # we will check & remove duplicates if indicated\n        if check_duplicates:\n            if on is None:\n                on = []\n            elif not isinstance(on, (list, tuple)):\n                on = [on]\n\n            if right.duplicated(by + on).any():\n                right = right.drop_duplicates(by + on, keep=\"last\")\n        rby = right.groupby(by, sort=False)\n    except KeyError:\n        rby = None\n\n    for key, lhs in lby:\n\n        if rby is None:\n            rhs = right\n        else:\n            try:\n                rhs = right.take(rby.indices[key])\n            except KeyError:\n                # key doesn't exist in left\n                lcols = lhs.columns.tolist()\n                cols = lcols + [r for r in right.columns if r not in set(lcols)]\n                merged = lhs.reindex(columns=cols)\n                merged.index = range(len(merged))\n                pieces.append(merged)\n                continue\n\n        merged = _merge_pieces(lhs, rhs)\n\n        # make sure join keys are in the merged\n        # TODO, should _merge_pieces do this?\n        for k in by:\n            try:\n                if k in merged:\n                    merged[k] = key\n            except KeyError:\n                pass\n\n        pieces.append(merged)\n\n    # preserve the original order\n    # if we have a missing piece this can be reset\n    from pandas.core.reshape.concat import concat\n\n    result = concat(pieces, ignore_index=True)\n    result = result.reindex(columns=pieces[0].columns, copy=False)\n    return result, lby",
                        "signature": "_groupby_and_merge(by, on, left, right, _merge_pieces, check_duplicates=True)"
                    },
                    {
                        "code": "def merge_ordered(\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_by=None,\n    right_by=None,\n    fill_method=None,\n    suffixes=(\"_x\", \"_y\"),\n    how=\"outer\",\n):\n    \"\"\"\n    Perform merge with optional filling/interpolation designed for ordered\n    data like time series data. Optionally perform group-wise merge (see\n    examples)\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : DataFrame\n    on : label or list\n        Field names to join on. Must be found in both DataFrames.\n    left_on : label or list, or array-like\n        Field names to join on in left DataFrame. Can be a vector or list of\n        vectors of the length of the DataFrame to use a particular vector as\n        the join key instead of columns\n    right_on : label or list, or array-like\n        Field names to join on in right DataFrame or vector/list of vectors per\n        left_on docs\n    left_by : column name or list of column names\n        Group left DataFrame by group columns and merge piece by piece with\n        right DataFrame\n    right_by : column name or list of column names\n        Group right DataFrame by group columns and merge piece by piece with\n        left DataFrame\n    fill_method : {'ffill', None}, default None\n        Interpolation method for data\n    suffixes : Sequence, default is (\"_x\", \"_y\")\n        A length-2 sequence where each element is optionally a string\n        indicating the suffix to add to overlapping column names in\n        `left` and `right` respectively. Pass a value of `None` instead\n        of a string to indicate that the column name from `left` or\n        `right` should be left as-is, with no suffix. At least one of the\n        values must not be None.\n\n        .. versionchanged:: 0.25.0\n    how : {'left', 'right', 'outer', 'inner'}, default 'outer'\n        * left: use only keys from left frame (SQL: left outer join)\n        * right: use only keys from right frame (SQL: right outer join)\n        * outer: use union of keys from both frames (SQL: full outer join)\n        * inner: use intersection of keys from both frames (SQL: inner join)\n\n    Returns\n    -------\n    merged : DataFrame\n        The output type will the be same as 'left', if it is a subclass\n        of DataFrame.\n\n    See Also\n    --------\n    merge\n    merge_asof\n\n    Examples\n    --------\n    >>> A                      >>> B\n          key  lvalue group        key  rvalue\n    0   a       1     a        0     b       1\n    1   c       2     a        1     c       2\n    2   e       3     a        2     d       3\n    3   a       1     b\n    4   c       2     b\n    5   e       3     b\n\n    >>> merge_ordered(A, B, fill_method='ffill', left_by='group')\n      group key  lvalue  rvalue\n    0     a   a       1     NaN\n    1     a   b       1     1.0\n    2     a   c       2     2.0\n    3     a   d       2     3.0\n    4     a   e       3     3.0\n    5     b   a       1     NaN\n    6     b   b       1     1.0\n    7     b   c       2     2.0\n    8     b   d       2     3.0\n    9     b   e       3     3.0\n    \"\"\"\n\n    def _merger(x, y):\n        # perform the ordered merge operation\n        op = _OrderedMerge(\n            x,\n            y,\n            on=on,\n            left_on=left_on,\n            right_on=right_on,\n            suffixes=suffixes,\n            fill_method=fill_method,\n            how=how,\n        )\n        return op.get_result()\n\n    if left_by is not None and right_by is not None:\n        raise ValueError(\"Can only group either left or right frames\")\n    elif left_by is not None:\n        result, _ = _groupby_and_merge(\n            left_by, on, left, right, lambda x, y: _merger(x, y), check_duplicates=False\n        )\n    elif right_by is not None:\n        result, _ = _groupby_and_merge(\n            right_by,\n            on,\n            right,\n            left,\n            lambda x, y: _merger(y, x),\n            check_duplicates=False,\n        )\n    else:\n        result = _merger(left, right)\n    return result",
                        "signature": "merge_ordered(left, right, on=None, left_on=None, right_on=None, left_by=None, right_by=None, fill_method=None, suffixes=('_x', '_y'), how='outer')"
                    },
                    {
                        "code": "def merge_asof(\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index=False,\n    right_index=False,\n    by=None,\n    left_by=None,\n    right_by=None,\n    suffixes=(\"_x\", \"_y\"),\n    tolerance=None,\n    allow_exact_matches=True,\n    direction=\"backward\",\n):\n    \"\"\"\n    Perform an asof merge. This is similar to a left-join except that we\n    match on nearest key rather than equal keys.\n\n    Both DataFrames must be sorted by the key.\n\n    For each row in the left DataFrame:\n\n      - A \"backward\" search selects the last row in the right DataFrame whose\n        'on' key is less than or equal to the left's key.\n\n      - A \"forward\" search selects the first row in the right DataFrame whose\n        'on' key is greater than or equal to the left's key.\n\n      - A \"nearest\" search selects the row in the right DataFrame whose 'on'\n        key is closest in absolute distance to the left's key.\n\n    The default is \"backward\" and is compatible in versions below 0.20.0.\n    The direction parameter was added in version 0.20.0 and introduces\n    \"forward\" and \"nearest\".\n\n    Optionally match on equivalent keys with 'by' before searching with 'on'.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : DataFrame\n    on : label\n        Field name to join on. Must be found in both DataFrames.\n        The data MUST be ordered. Furthermore this must be a numeric column,\n        such as datetimelike, integer, or float. On or left_on/right_on\n        must be given.\n    left_on : label\n        Field name to join on in left DataFrame.\n    right_on : label\n        Field name to join on in right DataFrame.\n    left_index : boolean\n        Use the index of the left DataFrame as the join key.\n    right_index : boolean\n        Use the index of the right DataFrame as the join key.\n    by : column name or list of column names\n        Match on these columns before performing merge operation.\n    left_by : column name\n        Field names to match on in the left DataFrame.\n    right_by : column name\n        Field names to match on in the right DataFrame.\n    suffixes : 2-length sequence (tuple, list, ...)\n        Suffix to apply to overlapping column names in the left and right\n        side, respectively.\n    tolerance : integer or Timedelta, optional, default None\n        Select asof tolerance within this range; must be compatible\n        with the merge index.\n    allow_exact_matches : boolean, default True\n\n        - If True, allow matching with the same 'on' value\n          (i.e. less-than-or-equal-to / greater-than-or-equal-to)\n        - If False, don't match the same 'on' value\n          (i.e., strictly less-than / strictly greater-than)\n\n    direction : 'backward' (default), 'forward', or 'nearest'\n        Whether to search for prior, subsequent, or closest matches.\n\n        .. versionadded:: 0.20.0\n\n    Returns\n    -------\n    merged : DataFrame\n\n    See Also\n    --------\n    merge\n    merge_ordered\n\n    Examples\n    --------\n    >>> left = pd.DataFrame({'a': [1, 5, 10], 'left_val': ['a', 'b', 'c']})\n    >>> left\n        a left_val\n    0   1        a\n    1   5        b\n    2  10        c\n\n    >>> right = pd.DataFrame({'a': [1, 2, 3, 6, 7],\n    ...                       'right_val': [1, 2, 3, 6, 7]})\n    >>> right\n       a  right_val\n    0  1          1\n    1  2          2\n    2  3          3\n    3  6          6\n    4  7          7\n\n    >>> pd.merge_asof(left, right, on='a')\n        a left_val  right_val\n    0   1        a          1\n    1   5        b          3\n    2  10        c          7\n\n    >>> pd.merge_asof(left, right, on='a', allow_exact_matches=False)\n        a left_val  right_val\n    0   1        a        NaN\n    1   5        b        3.0\n    2  10        c        7.0\n\n    >>> pd.merge_asof(left, right, on='a', direction='forward')\n        a left_val  right_val\n    0   1        a        1.0\n    1   5        b        6.0\n    2  10        c        NaN\n\n    >>> pd.merge_asof(left, right, on='a', direction='nearest')\n        a left_val  right_val\n    0   1        a          1\n    1   5        b          6\n    2  10        c          7\n\n    We can use indexed DataFrames as well.\n\n    >>> left = pd.DataFrame({'left_val': ['a', 'b', 'c']}, index=[1, 5, 10])\n    >>> left\n       left_val\n    1         a\n    5         b\n    10        c\n\n    >>> right = pd.DataFrame({'right_val': [1, 2, 3, 6, 7]},\n    ...                      index=[1, 2, 3, 6, 7])\n    >>> right\n       right_val\n    1          1\n    2          2\n    3          3\n    6          6\n    7          7\n\n    >>> pd.merge_asof(left, right, left_index=True, right_index=True)\n       left_val  right_val\n    1         a          1\n    5         b          3\n    10        c          7\n\n    Here is a real-world times-series example\n\n    >>> quotes\n                         time ticker     bid     ask\n    0 2016-05-25 13:30:00.023   GOOG  720.50  720.93\n    1 2016-05-25 13:30:00.023   MSFT   51.95   51.96\n    2 2016-05-25 13:30:00.030   MSFT   51.97   51.98\n    3 2016-05-25 13:30:00.041   MSFT   51.99   52.00\n    4 2016-05-25 13:30:00.048   GOOG  720.50  720.93\n    5 2016-05-25 13:30:00.049   AAPL   97.99   98.01\n    6 2016-05-25 13:30:00.072   GOOG  720.50  720.88\n    7 2016-05-25 13:30:00.075   MSFT   52.01   52.03\n\n    >>> trades\n                         time ticker   price  quantity\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100\n\n    By default we are taking the asof of the quotes\n\n    >>> pd.merge_asof(trades, quotes,\n    ...                       on='time',\n    ...                       by='ticker')\n                         time ticker   price  quantity     bid     ask\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\n    We only asof within 2ms between the quote time and the trade time\n\n    >>> pd.merge_asof(trades, quotes,\n    ...                       on='time',\n    ...                       by='ticker',\n    ...                       tolerance=pd.Timedelta('2ms'))\n                         time ticker   price  quantity     bid     ask\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155     NaN     NaN\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\n    We only asof within 10ms between the quote time and the trade time\n    and we exclude exact matches on time. However *prior* data will\n    propagate forward\n\n    >>> pd.merge_asof(trades, quotes,\n    ...                       on='time',\n    ...                       by='ticker',\n    ...                       tolerance=pd.Timedelta('10ms'),\n    ...                       allow_exact_matches=False)\n                         time ticker   price  quantity     bid     ask\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75     NaN     NaN\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100     NaN     NaN\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100     NaN     NaN\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n    \"\"\"\n    op = _AsOfMerge(\n        left,\n        right,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        by=by,\n        left_by=left_by,\n        right_by=right_by,\n        suffixes=suffixes,\n        how=\"asof\",\n        tolerance=tolerance,\n        allow_exact_matches=allow_exact_matches,\n        direction=direction,\n    )\n    return op.get_result()",
                        "signature": "merge_asof(left, right, on=None, left_on=None, right_on=None, left_index=False, right_index=False, by=None, left_by=None, right_by=None, suffixes=('_x', '_y'), tolerance=None, allow_exact_matches=True, direction='backward')"
                    },
                    {
                        "code": "def _get_join_indexers(left_keys, right_keys, sort=False, how=\"inner\", **kwargs):\n    \"\"\"\n\n    Parameters\n    ----------\n    left_keys: ndarray, Index, Series\n    right_keys: ndarray, Index, Series\n    sort: boolean, default False\n    how: string {'inner', 'outer', 'left', 'right'}, default 'inner'\n\n    Returns\n    -------\n    tuple of (left_indexer, right_indexer)\n        indexers into the left_keys, right_keys\n\n    \"\"\"\n    assert len(left_keys) == len(\n        right_keys\n    ), \"left_key and right_keys must be the same length\"\n\n    # bind `sort` arg. of _factorize_keys\n    fkeys = partial(_factorize_keys, sort=sort)\n\n    # get left & right join labels and num. of levels at each location\n    llab, rlab, shape = map(list, zip(*map(fkeys, left_keys, right_keys)))\n\n    # get flat i8 keys from label lists\n    lkey, rkey = _get_join_keys(llab, rlab, shape, sort)\n\n    # factorize keys to a dense i8 space\n    # `count` is the num. of unique keys\n    # set(lkey) | set(rkey) == range(count)\n    lkey, rkey, count = fkeys(lkey, rkey)\n\n    # preserve left frame order if how == 'left' and sort == False\n    kwargs = copy.copy(kwargs)\n    if how == \"left\":\n        kwargs[\"sort\"] = sort\n    join_func = _join_functions[how]\n\n    return join_func(lkey, rkey, count, **kwargs)",
                        "signature": "_get_join_indexers(left_keys, right_keys, sort=False, how='inner', **kwargs)"
                    },
                    {
                        "code": "def _restore_dropped_levels_multijoin(\n    left, right, dropped_level_names, join_index, lindexer, rindexer\n):\n    \"\"\"\n    *this is an internal non-public method*\n\n    Returns the levels, labels and names of a multi-index to multi-index join.\n    Depending on the type of join, this method restores the appropriate\n    dropped levels of the joined multi-index.\n    The method relies on lidx, rindexer which hold the index positions of\n    left and right, where a join was feasible\n\n    Parameters\n    ----------\n    left : MultiIndex\n        left index\n    right : MultiIndex\n        right index\n    dropped_level_names : str array\n        list of non-common level names\n    join_index : MultiIndex\n        the index of the join between the\n        common levels of left and right\n    lindexer : intp array\n        left indexer\n    rindexer : intp array\n        right indexer\n\n    Returns\n    -------\n    levels : list of Index\n        levels of combined multiindexes\n    labels : intp array\n        labels of combined multiindexes\n    names : str array\n        names of combined multiindexes\n\n    \"\"\"\n\n    def _convert_to_mulitindex(index):\n        if isinstance(index, MultiIndex):\n            return index\n        else:\n            return MultiIndex.from_arrays([index.values], names=[index.name])\n\n    # For multi-multi joins with one overlapping level,\n    # the returned index if of type Index\n    # Assure that join_index is of type MultiIndex\n    # so that dropped levels can be appended\n    join_index = _convert_to_mulitindex(join_index)\n\n    join_levels = join_index.levels\n    join_codes = join_index.codes\n    join_names = join_index.names\n\n    # lindexer and rindexer hold the indexes where the join occurred\n    # for left and right respectively. If left/right is None then\n    # the join occurred on all indices of left/right\n    if lindexer is None:\n        lindexer = range(left.size)\n\n    if rindexer is None:\n        rindexer = range(right.size)\n\n    # Iterate through the levels that must be restored\n    for dropped_level_name in dropped_level_names:\n        if dropped_level_name in left.names:\n            idx = left\n            indexer = lindexer\n        else:\n            idx = right\n            indexer = rindexer\n\n        # The index of the level name to be restored\n        name_idx = idx.names.index(dropped_level_name)\n\n        restore_levels = idx.levels[name_idx]\n        # Inject -1 in the codes list where a join was not possible\n        # IOW indexer[i]=-1\n        codes = idx.codes[name_idx]\n        restore_codes = algos.take_nd(codes, indexer, fill_value=-1)\n\n        join_levels = join_levels + [restore_levels]\n        join_codes = join_codes + [restore_codes]\n        join_names = join_names + [dropped_level_name]\n\n    return join_levels, join_codes, join_names",
                        "signature": "_restore_dropped_levels_multijoin(left, right, dropped_level_names, join_index, lindexer, rindexer)"
                    },
                    {
                        "code": "def _asof_function(direction):\n    name = \"asof_join_{dir}\".format(dir=direction)\n    return getattr(libjoin, name, None)",
                        "signature": "_asof_function(direction)"
                    },
                    {
                        "code": "def _asof_by_function(direction):\n    name = \"asof_join_{dir}_on_X_by_Y\".format(dir=direction)\n    return getattr(libjoin, name, None)",
                        "signature": "_asof_by_function(direction)"
                    },
                    {
                        "code": "def _get_cython_type_upcast(dtype):\n    \"\"\" Upcast a dtype to 'int64_t', 'double', or 'object' \"\"\"\n    if is_integer_dtype(dtype):\n        return \"int64_t\"\n    elif is_float_dtype(dtype):\n        return \"double\"\n    else:\n        return \"object\"",
                        "signature": "_get_cython_type_upcast(dtype)"
                    },
                    {
                        "code": "def _get_multiindex_indexer(join_keys, index, sort):\n\n    # bind `sort` argument\n    fkeys = partial(_factorize_keys, sort=sort)\n\n    # left & right join labels and num. of levels at each location\n    rcodes, lcodes, shape = map(list, zip(*map(fkeys, index.levels, join_keys)))\n    if sort:\n        rcodes = list(map(np.take, rcodes, index.codes))\n    else:\n        i8copy = lambda a: a.astype(\"i8\", subok=False, copy=True)\n        rcodes = list(map(i8copy, index.codes))\n\n    # fix right labels if there were any nulls\n    for i in range(len(join_keys)):\n        mask = index.codes[i] == -1\n        if mask.any():\n            # check if there already was any nulls at this location\n            # if there was, it is factorized to `shape[i] - 1`\n            a = join_keys[i][lcodes[i] == shape[i] - 1]\n            if a.size == 0 or not a[0] != a[0]:\n                shape[i] += 1\n\n            rcodes[i][mask] = shape[i] - 1\n\n    # get flat i8 join keys\n    lkey, rkey = _get_join_keys(lcodes, rcodes, shape, sort)\n\n    # factorize keys to a dense i8 space\n    lkey, rkey, count = fkeys(lkey, rkey)\n\n    return libjoin.left_outer_join(lkey, rkey, count, sort=sort)",
                        "signature": "_get_multiindex_indexer(join_keys, index, sort)"
                    },
                    {
                        "code": "def _get_single_indexer(join_key, index, sort=False):\n    left_key, right_key, count = _factorize_keys(join_key, index, sort=sort)\n\n    left_indexer, right_indexer = libjoin.left_outer_join(\n        ensure_int64(left_key), ensure_int64(right_key), count, sort=sort\n    )\n\n    return left_indexer, right_indexer",
                        "signature": "_get_single_indexer(join_key, index, sort=False)"
                    },
                    {
                        "code": "def _left_join_on_index(left_ax, right_ax, join_keys, sort=False):\n    if len(join_keys) > 1:\n        if not (\n            (isinstance(right_ax, MultiIndex) and len(join_keys) == right_ax.nlevels)\n        ):\n            raise AssertionError(\n                \"If more than one join key is given then \"\n                \"'right_ax' must be a MultiIndex and the \"\n                \"number of join keys must be the number of \"\n                \"levels in right_ax\"\n            )\n\n        left_indexer, right_indexer = _get_multiindex_indexer(\n            join_keys, right_ax, sort=sort\n        )\n    else:\n        jkey = join_keys[0]\n\n        left_indexer, right_indexer = _get_single_indexer(jkey, right_ax, sort=sort)\n\n    if sort or len(left_ax) != len(left_indexer):\n        # if asked to sort or there are 1-to-many matches\n        join_index = left_ax.take(left_indexer)\n        return join_index, left_indexer, right_indexer\n\n    # left frame preserves order & length of its index\n    return left_ax, None, right_indexer",
                        "signature": "_left_join_on_index(left_ax, right_ax, join_keys, sort=False)"
                    },
                    {
                        "code": "def _right_outer_join(x, y, max_groups):\n    right_indexer, left_indexer = libjoin.left_outer_join(y, x, max_groups)\n    return left_indexer, right_indexer",
                        "signature": "_right_outer_join(x, y, max_groups)"
                    },
                    {
                        "code": "def _factorize_keys(lk, rk, sort=True):\n    # Some pre-processing for non-ndarray lk / rk\n    if is_datetime64tz_dtype(lk) and is_datetime64tz_dtype(rk):\n        lk = getattr(lk, \"_values\", lk)._data\n        rk = getattr(rk, \"_values\", rk)._data\n\n    elif (\n        is_categorical_dtype(lk) and is_categorical_dtype(rk) and lk.is_dtype_equal(rk)\n    ):\n        if lk.categories.equals(rk.categories):\n            # if we exactly match in categories, allow us to factorize on codes\n            rk = rk.codes\n        else:\n            # Same categories in different orders -> recode\n            rk = _recode_for_categories(rk.codes, rk.categories, lk.categories)\n\n        lk = ensure_int64(lk.codes)\n        rk = ensure_int64(rk)\n\n    elif (\n        is_extension_array_dtype(lk.dtype)\n        and is_extension_array_dtype(rk.dtype)\n        and lk.dtype == rk.dtype\n    ):\n        lk, _ = lk._values_for_factorize()\n        rk, _ = rk._values_for_factorize()\n\n    if is_integer_dtype(lk) and is_integer_dtype(rk):\n        # GH#23917 TODO: needs tests for case where lk is integer-dtype\n        #  and rk is datetime-dtype\n        klass = libhashtable.Int64Factorizer\n        lk = ensure_int64(com.values_from_object(lk))\n        rk = ensure_int64(com.values_from_object(rk))\n    elif issubclass(lk.dtype.type, (np.timedelta64, np.datetime64)) and issubclass(\n        rk.dtype.type, (np.timedelta64, np.datetime64)\n    ):\n        # GH#23917 TODO: Needs tests for non-matching dtypes\n        klass = libhashtable.Int64Factorizer\n        lk = ensure_int64(com.values_from_object(lk))\n        rk = ensure_int64(com.values_from_object(rk))\n    else:\n        klass = libhashtable.Factorizer\n        lk = ensure_object(lk)\n        rk = ensure_object(rk)\n\n    rizer = klass(max(len(lk), len(rk)))\n\n    llab = rizer.factorize(lk)\n    rlab = rizer.factorize(rk)\n\n    count = rizer.get_count()\n\n    if sort:\n        uniques = rizer.uniques.to_array()\n        llab, rlab = _sort_labels(uniques, llab, rlab)\n\n    # NA group\n    lmask = llab == -1\n    lany = lmask.any()\n    rmask = rlab == -1\n    rany = rmask.any()\n\n    if lany or rany:\n        if lany:\n            np.putmask(llab, lmask, count)\n        if rany:\n            np.putmask(rlab, rmask, count)\n        count += 1\n\n    return llab, rlab, count",
                        "signature": "_factorize_keys(lk, rk, sort=True)"
                    },
                    {
                        "code": "def _sort_labels(uniques, left, right):\n    if not isinstance(uniques, np.ndarray):\n        # tuplesafe\n        uniques = Index(uniques).values\n\n    llength = len(left)\n    labels = np.concatenate([left, right])\n\n    _, new_labels = sorting.safe_sort(uniques, labels, na_sentinel=-1)\n    new_labels = ensure_int64(new_labels)\n    new_left, new_right = new_labels[:llength], new_labels[llength:]\n\n    return new_left, new_right",
                        "signature": "_sort_labels(uniques, left, right)"
                    },
                    {
                        "code": "def _get_join_keys(llab, rlab, shape, sort):\n\n    # how many levels can be done without overflow\n    pred = lambda i: not is_int64_overflow_possible(shape[:i])\n    nlev = next(filter(pred, range(len(shape), 0, -1)))\n\n    # get keys for the first `nlev` levels\n    stride = np.prod(shape[1:nlev], dtype=\"i8\")\n    lkey = stride * llab[0].astype(\"i8\", subok=False, copy=False)\n    rkey = stride * rlab[0].astype(\"i8\", subok=False, copy=False)\n\n    for i in range(1, nlev):\n        with np.errstate(divide=\"ignore\"):\n            stride //= shape[i]\n        lkey += llab[i] * stride\n        rkey += rlab[i] * stride\n\n    if nlev == len(shape):  # all done!\n        return lkey, rkey\n\n    # densify current keys to avoid overflow\n    lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)\n\n    llab = [lkey] + llab[nlev:]\n    rlab = [rkey] + rlab[nlev:]\n    shape = [count] + shape[nlev:]\n\n    return _get_join_keys(llab, rlab, shape, sort)",
                        "signature": "_get_join_keys(llab, rlab, shape, sort)"
                    },
                    {
                        "code": "def _should_fill(lname, rname):\n    if not isinstance(lname, str) or not isinstance(rname, str):\n        return True\n    return lname == rname",
                        "signature": "_should_fill(lname, rname)"
                    },
                    {
                        "code": "def _any(x):\n    return x is not None and com.any_not_none(*x)",
                        "signature": "_any(x)"
                    },
                    {
                        "code": "def validate_operand(obj):\n    if isinstance(obj, DataFrame):\n        return obj\n    elif isinstance(obj, Series):\n        if obj.name is None:\n            raise ValueError(\"Cannot merge a Series without a name\")\n        else:\n            return obj.to_frame()\n    else:\n        raise TypeError(\n            \"Can only merge Series or DataFrame objects, \"\n            \"a {obj} was passed\".format(obj=type(obj))\n        )",
                        "signature": "validate_operand(obj)"
                    },
                    {
                        "code": "def _items_overlap_with_suffix(left, lsuffix, right, rsuffix):\n    \"\"\"\n    If two indices overlap, add suffixes to overlapping entries.\n\n    If corresponding suffix is empty, the entry is simply converted to string.\n\n    \"\"\"\n    to_rename = left.intersection(right)\n    if len(to_rename) == 0:\n        return left, right\n\n    if not lsuffix and not rsuffix:\n        raise ValueError(\n            \"columns overlap but no suffix specified: \"\n            \"{rename}\".format(rename=to_rename)\n        )\n\n    def renamer(x, suffix):\n        \"\"\"\n        Rename the left and right indices.\n\n        If there is overlap, and suffix is not None, add\n        suffix, otherwise, leave it as-is.\n\n        Parameters\n        ----------\n        x : original column name\n        suffix : str or None\n\n        Returns\n        -------\n        x : renamed column name\n        \"\"\"\n        if x in to_rename and suffix is not None:\n            return \"{x}{suffix}\".format(x=x, suffix=suffix)\n        return x\n\n    lrenamer = partial(renamer, suffix=lsuffix)\n    rrenamer = partial(renamer, suffix=rsuffix)\n\n    return (_transform_index(left, lrenamer), _transform_index(right, rrenamer))",
                        "signature": "_items_overlap_with_suffix(left, lsuffix, right, rsuffix)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class _MergeOperation:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    left,\n    right,\n    how=\"inner\",\n    on=None,\n    left_on=None,\n    right_on=None,\n    axis=1,\n    left_index=False,\n    right_index=False,\n    sort=True,\n    suffixes=(\"_x\", \"_y\"),\n    copy=True,\n    indicator=False,\n    validate=None,\n):\n    left = validate_operand(left)\n    right = validate_operand(right)\n    self.left = self.orig_left = left\n    self.right = self.orig_right = right\n    self.how = how\n    self.axis = axis\n\n    self.on = com.maybe_make_list(on)\n    self.left_on = com.maybe_make_list(left_on)\n    self.right_on = com.maybe_make_list(right_on)\n\n    self.copy = copy\n    self.suffixes = suffixes\n    self.sort = sort\n\n    self.left_index = left_index\n    self.right_index = right_index\n\n    self.indicator = indicator\n\n    if isinstance(self.indicator, str):\n        self.indicator_name = self.indicator\n    elif isinstance(self.indicator, bool):\n        self.indicator_name = \"_merge\" if self.indicator else None\n    else:\n        raise ValueError(\n            \"indicator option can only accept boolean or string arguments\"\n        )\n\n    if not is_bool(left_index):\n        raise ValueError(\n            \"left_index parameter must be of type bool, not \"\n            \"{left_index}\".format(left_index=type(left_index))\n        )\n    if not is_bool(right_index):\n        raise ValueError(\n            \"right_index parameter must be of type bool, not \"\n            \"{right_index}\".format(right_index=type(right_index))\n        )\n\n    # warn user when merging between different levels\n    if left.columns.nlevels != right.columns.nlevels:\n        msg = (\n            \"merging between different levels can give an unintended \"\n            \"result ({left} levels on the left, {right} on the right)\"\n        ).format(left=left.columns.nlevels, right=right.columns.nlevels)\n        warnings.warn(msg, UserWarning)\n\n    self._validate_specification()\n\n    # note this function has side effects\n    (\n        self.left_join_keys,\n        self.right_join_keys,\n        self.join_names,\n    ) = self._get_merge_keys()\n\n    # validate the merge keys dtypes. We may need to coerce\n    # to avoid incompat dtypes\n    self._maybe_coerce_merge_keys()\n\n    # If argument passed to validate,\n    # check if columns specified as unique\n    # are in fact unique.\n    if validate is not None:\n        self._validate(validate)",
                                "signature": "__init__(self, left, right, how='inner', on=None, left_on=None, right_on=None, axis=1, left_index=False, right_index=False, sort=True, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)"
                            },
                            {
                                "code": "def get_result(self):\n    if self.indicator:\n        self.left, self.right = self._indicator_pre_merge(self.left, self.right)\n\n    join_index, left_indexer, right_indexer = self._get_join_info()\n\n    ldata, rdata = self.left._data, self.right._data\n    lsuf, rsuf = self.suffixes\n\n    llabels, rlabels = _items_overlap_with_suffix(\n        ldata.items, lsuf, rdata.items, rsuf\n    )\n\n    lindexers = {1: left_indexer} if left_indexer is not None else {}\n    rindexers = {1: right_indexer} if right_indexer is not None else {}\n\n    result_data = concatenate_block_managers(\n        [(ldata, lindexers), (rdata, rindexers)],\n        axes=[llabels.append(rlabels), join_index],\n        concat_axis=0,\n        copy=self.copy,\n    )\n\n    typ = self.left._constructor\n    result = typ(result_data).__finalize__(self, method=self._merge_type)\n\n    if self.indicator:\n        result = self._indicator_post_merge(result)\n\n    self._maybe_add_join_keys(result, left_indexer, right_indexer)\n\n    self._maybe_restore_index_levels(result)\n\n    return result",
                                "signature": "get_result(self)"
                            },
                            {
                                "code": "def _indicator_pre_merge(self, left, right):\n\n    columns = left.columns.union(right.columns)\n\n    for i in [\"_left_indicator\", \"_right_indicator\"]:\n        if i in columns:\n            raise ValueError(\n                \"Cannot use `indicator=True` option when \"\n                \"data contains a column named {name}\".format(name=i)\n            )\n    if self.indicator_name in columns:\n        raise ValueError(\n            \"Cannot use name of an existing column for indicator column\"\n        )\n\n    left = left.copy()\n    right = right.copy()\n\n    left[\"_left_indicator\"] = 1\n    left[\"_left_indicator\"] = left[\"_left_indicator\"].astype(\"int8\")\n\n    right[\"_right_indicator\"] = 2\n    right[\"_right_indicator\"] = right[\"_right_indicator\"].astype(\"int8\")\n\n    return left, right",
                                "signature": "_indicator_pre_merge(self, left, right)"
                            },
                            {
                                "code": "def _indicator_post_merge(self, result):\n\n    result[\"_left_indicator\"] = result[\"_left_indicator\"].fillna(0)\n    result[\"_right_indicator\"] = result[\"_right_indicator\"].fillna(0)\n\n    result[self.indicator_name] = Categorical(\n        (result[\"_left_indicator\"] + result[\"_right_indicator\"]),\n        categories=[1, 2, 3],\n    )\n    result[self.indicator_name] = result[self.indicator_name].cat.rename_categories(\n        [\"left_only\", \"right_only\", \"both\"]\n    )\n\n    result = result.drop(labels=[\"_left_indicator\", \"_right_indicator\"], axis=1)\n    return result",
                                "signature": "_indicator_post_merge(self, result)"
                            },
                            {
                                "code": "def _maybe_restore_index_levels(self, result):\n    \"\"\"\n    Restore index levels specified as `on` parameters\n\n    Here we check for cases where `self.left_on` and `self.right_on` pairs\n    each reference an index level in their respective DataFrames. The\n    joined columns corresponding to these pairs are then restored to the\n    index of `result`.\n\n    **Note:** This method has side effects. It modifies `result` in-place\n\n    Parameters\n    ----------\n    result: DataFrame\n        merge result\n\n    Returns\n    -------\n    None\n    \"\"\"\n    names_to_restore = []\n    for name, left_key, right_key in zip(\n        self.join_names, self.left_on, self.right_on\n    ):\n        if (\n            self.orig_left._is_level_reference(left_key)\n            and self.orig_right._is_level_reference(right_key)\n            and name not in result.index.names\n        ):\n\n            names_to_restore.append(name)\n\n    if names_to_restore:\n        result.set_index(names_to_restore, inplace=True)",
                                "signature": "_maybe_restore_index_levels(self, result)"
                            },
                            {
                                "code": "def _maybe_add_join_keys(self, result, left_indexer, right_indexer):\n\n    left_has_missing = None\n    right_has_missing = None\n\n    keys = zip(self.join_names, self.left_on, self.right_on)\n    for i, (name, lname, rname) in enumerate(keys):\n        if not _should_fill(lname, rname):\n            continue\n\n        take_left, take_right = None, None\n\n        if name in result:\n\n            if left_indexer is not None and right_indexer is not None:\n                if name in self.left:\n\n                    if left_has_missing is None:\n                        left_has_missing = (left_indexer == -1).any()\n\n                    if left_has_missing:\n                        take_right = self.right_join_keys[i]\n\n                        if not is_dtype_equal(\n                            result[name].dtype, self.left[name].dtype\n                        ):\n                            take_left = self.left[name]._values\n\n                elif name in self.right:\n\n                    if right_has_missing is None:\n                        right_has_missing = (right_indexer == -1).any()\n\n                    if right_has_missing:\n                        take_left = self.left_join_keys[i]\n\n                        if not is_dtype_equal(\n                            result[name].dtype, self.right[name].dtype\n                        ):\n                            take_right = self.right[name]._values\n\n        elif left_indexer is not None and is_array_like(self.left_join_keys[i]):\n            take_left = self.left_join_keys[i]\n            take_right = self.right_join_keys[i]\n\n        if take_left is not None or take_right is not None:\n\n            if take_left is None:\n                lvals = result[name]._values\n            else:\n                lfill = na_value_for_dtype(take_left.dtype)\n                lvals = algos.take_1d(take_left, left_indexer, fill_value=lfill)\n\n            if take_right is None:\n                rvals = result[name]._values\n            else:\n                rfill = na_value_for_dtype(take_right.dtype)\n                rvals = algos.take_1d(take_right, right_indexer, fill_value=rfill)\n\n            # if we have an all missing left_indexer\n            # make sure to just use the right values\n            mask = left_indexer == -1\n            if mask.all():\n                key_col = rvals\n            else:\n                key_col = Index(lvals).where(~mask, rvals)\n\n            if result._is_label_reference(name):\n                result[name] = key_col\n            elif result._is_level_reference(name):\n                if isinstance(result.index, MultiIndex):\n                    key_col.name = name\n                    idx_list = [\n                        result.index.get_level_values(level_name)\n                        if level_name != name\n                        else key_col\n                        for level_name in result.index.names\n                    ]\n\n                    result.set_index(idx_list, inplace=True)\n                else:\n                    result.index = Index(key_col, name=name)\n            else:\n                result.insert(i, name or \"key_{i}\".format(i=i), key_col)",
                                "signature": "_maybe_add_join_keys(self, result, left_indexer, right_indexer)"
                            },
                            {
                                "code": "def _get_join_indexers(self):\n    \"\"\" return the join indexers \"\"\"\n    return _get_join_indexers(\n        self.left_join_keys, self.right_join_keys, sort=self.sort, how=self.how\n    )",
                                "signature": "_get_join_indexers(self)"
                            },
                            {
                                "code": "def _get_join_info(self):\n    left_ax = self.left._data.axes[self.axis]\n    right_ax = self.right._data.axes[self.axis]\n\n    if self.left_index and self.right_index and self.how != \"asof\":\n        join_index, left_indexer, right_indexer = left_ax.join(\n            right_ax, how=self.how, return_indexers=True, sort=self.sort\n        )\n    elif self.right_index and self.how == \"left\":\n        join_index, left_indexer, right_indexer = _left_join_on_index(\n            left_ax, right_ax, self.left_join_keys, sort=self.sort\n        )\n\n    elif self.left_index and self.how == \"right\":\n        join_index, right_indexer, left_indexer = _left_join_on_index(\n            right_ax, left_ax, self.right_join_keys, sort=self.sort\n        )\n    else:\n        (left_indexer, right_indexer) = self._get_join_indexers()\n\n        if self.right_index:\n            if len(self.left) > 0:\n                join_index = self._create_join_index(\n                    self.left.index,\n                    self.right.index,\n                    left_indexer,\n                    right_indexer,\n                    how=\"right\",\n                )\n            else:\n                join_index = self.right.index.take(right_indexer)\n                left_indexer = np.array([-1] * len(join_index))\n        elif self.left_index:\n            if len(self.right) > 0:\n                join_index = self._create_join_index(\n                    self.right.index,\n                    self.left.index,\n                    right_indexer,\n                    left_indexer,\n                    how=\"left\",\n                )\n            else:\n                join_index = self.left.index.take(left_indexer)\n                right_indexer = np.array([-1] * len(join_index))\n        else:\n            join_index = Index(np.arange(len(left_indexer)))\n\n    if len(join_index) == 0:\n        join_index = join_index.astype(object)\n    return join_index, left_indexer, right_indexer",
                                "signature": "_get_join_info(self)"
                            },
                            {
                                "code": "def _create_join_index(\n    self, index, other_index, indexer, other_indexer, how=\"left\"\n):\n    \"\"\"\n    Create a join index by rearranging one index to match another\n\n    Parameters\n    ----------\n    index: Index being rearranged\n    other_index: Index used to supply values not found in index\n    indexer: how to rearrange index\n    how: replacement is only necessary if indexer based on other_index\n\n    Returns\n    -------\n    join_index\n    \"\"\"\n    if self.how in (how, \"outer\") and not isinstance(other_index, MultiIndex):\n        # if final index requires values in other_index but not target\n        # index, indexer may hold missing (-1) values, causing Index.take\n        # to take the final value in target index. So, we set the last\n        # element to be the desired fill value. We do not use allow_fill\n        # and fill_value because it throws a ValueError on integer indices\n        mask = indexer == -1\n        if np.any(mask):\n            fill_value = na_value_for_dtype(index.dtype, compat=False)\n            index = index.append(Index([fill_value]))\n    return index.take(indexer)",
                                "signature": "_create_join_index(self, index, other_index, indexer, other_indexer, how='left')"
                            },
                            {
                                "code": "def _get_merge_keys(self):\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n\n    Parameters\n    ----------\n    left\n    right\n    on\n\n    Returns\n    -------\n    left_keys, right_keys\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n\n    left, right = self.left, self.right\n\n    is_lkey = lambda x: is_array_like(x) and len(x) == len(left)\n    is_rkey = lambda x: is_array_like(x) and len(x) == len(right)\n\n    # Note that pd.merge_asof() has separate 'on' and 'by' parameters. A\n    # user could, for example, request 'left_index' and 'left_by'. In a\n    # regular pd.merge(), users cannot specify both 'left_index' and\n    # 'left_on'. (Instead, users have a MultiIndex). That means the\n    # self.left_on in this function is always empty in a pd.merge(), but\n    # a pd.merge_asof(left_index=True, left_by=...) will result in a\n    # self.left_on array with a None in the middle of it. This requires\n    # a work-around as designated in the code below.\n    # See _validate_specification() for where this happens.\n\n    # ugh, spaghetti re #733\n    if _any(self.left_on) and _any(self.right_on):\n        for lk, rk in zip(self.left_on, self.right_on):\n            if is_lkey(lk):\n                left_keys.append(lk)\n                if is_rkey(rk):\n                    right_keys.append(rk)\n                    join_names.append(None)  # what to do?\n                else:\n                    if rk is not None:\n                        right_keys.append(right._get_label_or_level_values(rk))\n                        join_names.append(rk)\n                    else:\n                        # work-around for merge_asof(right_index=True)\n                        right_keys.append(right.index)\n                        join_names.append(right.index.name)\n            else:\n                if not is_rkey(rk):\n                    if rk is not None:\n                        right_keys.append(right._get_label_or_level_values(rk))\n                    else:\n                        # work-around for merge_asof(right_index=True)\n                        right_keys.append(right.index)\n                    if lk is not None and lk == rk:\n                        # avoid key upcast in corner case (length-0)\n                        if len(left) > 0:\n                            right_drop.append(rk)\n                        else:\n                            left_drop.append(lk)\n                else:\n                    right_keys.append(rk)\n                if lk is not None:\n                    left_keys.append(left._get_label_or_level_values(lk))\n                    join_names.append(lk)\n                else:\n                    # work-around for merge_asof(left_index=True)\n                    left_keys.append(left.index)\n                    join_names.append(left.index.name)\n    elif _any(self.left_on):\n        for k in self.left_on:\n            if is_lkey(k):\n                left_keys.append(k)\n                join_names.append(None)\n            else:\n                left_keys.append(left._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(self.right.index, MultiIndex):\n            right_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    self.right.index.levels, self.right.index.codes\n                )\n            ]\n        else:\n            right_keys = [self.right.index._values]\n    elif _any(self.right_on):\n        for k in self.right_on:\n            if is_rkey(k):\n                right_keys.append(k)\n                join_names.append(None)\n            else:\n                right_keys.append(right._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(self.left.index, MultiIndex):\n            left_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    self.left.index.levels, self.left.index.codes\n                )\n            ]\n        else:\n            left_keys = [self.left.index.values]\n\n    if left_drop:\n        self.left = self.left._drop_labels_or_levels(left_drop)\n\n    if right_drop:\n        self.right = self.right._drop_labels_or_levels(right_drop)\n\n    return left_keys, right_keys, join_names",
                                "signature": "_get_merge_keys(self)"
                            },
                            {
                                "code": "def _maybe_coerce_merge_keys(self):\n    # we have valid mergees but we may have to further\n    # coerce these if they are originally incompatible types\n    #\n    # for example if these are categorical, but are not dtype_equal\n    # or if we have object and integer dtypes\n\n    for lk, rk, name in zip(\n        self.left_join_keys, self.right_join_keys, self.join_names\n    ):\n        if (len(lk) and not len(rk)) or (not len(lk) and len(rk)):\n            continue\n\n        lk_is_cat = is_categorical_dtype(lk)\n        rk_is_cat = is_categorical_dtype(rk)\n        lk_is_object = is_object_dtype(lk)\n        rk_is_object = is_object_dtype(rk)\n\n        # if either left or right is a categorical\n        # then the must match exactly in categories & ordered\n        if lk_is_cat and rk_is_cat:\n            if lk.is_dtype_equal(rk):\n                continue\n\n        elif lk_is_cat or rk_is_cat:\n            pass\n\n        elif is_dtype_equal(lk.dtype, rk.dtype):\n            continue\n\n        msg = (\n            \"You are trying to merge on {lk_dtype} and \"\n            \"{rk_dtype} columns. If you wish to proceed \"\n            \"you should use pd.concat\".format(lk_dtype=lk.dtype, rk_dtype=rk.dtype)\n        )\n\n        # if we are numeric, then allow differing\n        # kinds to proceed, eg. int64 and int8, int and float\n        # further if we are object, but we infer to\n        # the same, then proceed\n        if is_numeric_dtype(lk) and is_numeric_dtype(rk):\n            if lk.dtype.kind == rk.dtype.kind:\n                continue\n\n            # check whether ints and floats\n            elif is_integer_dtype(rk) and is_float_dtype(lk):\n                if not (lk == lk.astype(rk.dtype))[~np.isnan(lk)].all():\n                    warnings.warn(\n                        \"You are merging on int and float \"\n                        \"columns where the float values \"\n                        \"are not equal to their int \"\n                        \"representation\",\n                        UserWarning,\n                    )\n                continue\n\n            elif is_float_dtype(rk) and is_integer_dtype(lk):\n                if not (rk == rk.astype(lk.dtype))[~np.isnan(rk)].all():\n                    warnings.warn(\n                        \"You are merging on int and float \"\n                        \"columns where the float values \"\n                        \"are not equal to their int \"\n                        \"representation\",\n                        UserWarning,\n                    )\n                continue\n\n            # let's infer and see if we are ok\n            elif lib.infer_dtype(lk, skipna=False) == lib.infer_dtype(\n                rk, skipna=False\n            ):\n                continue\n\n        # Check if we are trying to merge on obviously\n        # incompatible dtypes GH 9780, GH 15800\n\n        # bool values are coerced to object\n        elif (lk_is_object and is_bool_dtype(rk)) or (\n            is_bool_dtype(lk) and rk_is_object\n        ):\n            pass\n\n        # object values are allowed to be merged\n        elif (lk_is_object and is_numeric_dtype(rk)) or (\n            is_numeric_dtype(lk) and rk_is_object\n        ):\n            inferred_left = lib.infer_dtype(lk, skipna=False)\n            inferred_right = lib.infer_dtype(rk, skipna=False)\n            bool_types = [\"integer\", \"mixed-integer\", \"boolean\", \"empty\"]\n            string_types = [\"string\", \"unicode\", \"mixed\", \"bytes\", \"empty\"]\n\n            # inferred bool\n            if inferred_left in bool_types and inferred_right in bool_types:\n                pass\n\n            # unless we are merging non-string-like with string-like\n            elif (\n                inferred_left in string_types and inferred_right not in string_types\n            ) or (\n                inferred_right in string_types and inferred_left not in string_types\n            ):\n                raise ValueError(msg)\n\n        # datetimelikes must match exactly\n        elif is_datetimelike(lk) and not is_datetimelike(rk):\n            raise ValueError(msg)\n        elif not is_datetimelike(lk) and is_datetimelike(rk):\n            raise ValueError(msg)\n        elif is_datetime64tz_dtype(lk) and not is_datetime64tz_dtype(rk):\n            raise ValueError(msg)\n        elif not is_datetime64tz_dtype(lk) and is_datetime64tz_dtype(rk):\n            raise ValueError(msg)\n\n        elif lk_is_object and rk_is_object:\n            continue\n\n        # Houston, we have a problem!\n        # let's coerce to object if the dtypes aren't\n        # categorical, otherwise coerce to the category\n        # dtype. If we coerced categories to object,\n        # then we would lose type information on some\n        # columns, and end up trying to merge\n        # incompatible dtypes. See GH 16900.\n        if name in self.left.columns:\n            typ = lk.categories.dtype if lk_is_cat else object\n            self.left = self.left.assign(**{name: self.left[name].astype(typ)})\n        if name in self.right.columns:\n            typ = rk.categories.dtype if rk_is_cat else object\n            self.right = self.right.assign(**{name: self.right[name].astype(typ)})",
                                "signature": "_maybe_coerce_merge_keys(self)"
                            },
                            {
                                "code": "def _validate_specification(self):\n    # Hm, any way to make this logic less complicated??\n    if self.on is None and self.left_on is None and self.right_on is None:\n\n        if self.left_index and self.right_index:\n            self.left_on, self.right_on = (), ()\n        elif self.left_index:\n            if self.right_on is None:\n                raise MergeError(\"Must pass right_on or right_index=True\")\n        elif self.right_index:\n            if self.left_on is None:\n                raise MergeError(\"Must pass left_on or left_index=True\")\n        else:\n            # use the common columns\n            common_cols = self.left.columns.intersection(self.right.columns)\n            if len(common_cols) == 0:\n                raise MergeError(\n                    \"No common columns to perform merge on. \"\n                    \"Merge options: left_on={lon}, right_on={ron}, \"\n                    \"left_index={lidx}, right_index={ridx}\".format(\n                        lon=self.left_on,\n                        ron=self.right_on,\n                        lidx=self.left_index,\n                        ridx=self.right_index,\n                    )\n                )\n            if not common_cols.is_unique:\n                raise MergeError(\n                    \"Data columns not unique: {common!r}\".format(common=common_cols)\n                )\n            self.left_on = self.right_on = common_cols\n    elif self.on is not None:\n        if self.left_on is not None or self.right_on is not None:\n            raise MergeError(\n                'Can only pass argument \"on\" OR \"left_on\" '\n                'and \"right_on\", not a combination of both.'\n            )\n        self.left_on = self.right_on = self.on\n    elif self.left_on is not None:\n        n = len(self.left_on)\n        if self.right_index:\n            if len(self.left_on) != self.right.index.nlevels:\n                raise ValueError(\n                    \"len(left_on) must equal the number \"\n                    'of levels in the index of \"right\"'\n                )\n            self.right_on = [None] * n\n    elif self.right_on is not None:\n        n = len(self.right_on)\n        if self.left_index:\n            if len(self.right_on) != self.left.index.nlevels:\n                raise ValueError(\n                    \"len(right_on) must equal the number \"\n                    'of levels in the index of \"left\"'\n                )\n            self.left_on = [None] * n\n    if len(self.right_on) != len(self.left_on):\n        raise ValueError(\"len(right_on) must equal len(left_on)\")",
                                "signature": "_validate_specification(self)"
                            },
                            {
                                "code": "def _validate(self, validate):\n\n    # Check uniqueness of each\n    if self.left_index:\n        left_unique = self.orig_left.index.is_unique\n    else:\n        left_unique = MultiIndex.from_arrays(self.left_join_keys).is_unique\n\n    if self.right_index:\n        right_unique = self.orig_right.index.is_unique\n    else:\n        right_unique = MultiIndex.from_arrays(self.right_join_keys).is_unique\n\n    # Check data integrity\n    if validate in [\"one_to_one\", \"1:1\"]:\n        if not left_unique and not right_unique:\n            raise MergeError(\n                \"Merge keys are not unique in either left\"\n                \" or right dataset; not a one-to-one merge\"\n            )\n        elif not left_unique:\n            raise MergeError(\n                \"Merge keys are not unique in left dataset;\"\n                \" not a one-to-one merge\"\n            )\n        elif not right_unique:\n            raise MergeError(\n                \"Merge keys are not unique in right dataset;\"\n                \" not a one-to-one merge\"\n            )\n\n    elif validate in [\"one_to_many\", \"1:m\"]:\n        if not left_unique:\n            raise MergeError(\n                \"Merge keys are not unique in left dataset;\"\n                \" not a one-to-many merge\"\n            )\n\n    elif validate in [\"many_to_one\", \"m:1\"]:\n        if not right_unique:\n            raise MergeError(\n                \"Merge keys are not unique in right dataset;\"\n                \" not a many-to-one merge\"\n            )\n\n    elif validate in [\"many_to_many\", \"m:m\"]:\n        pass\n\n    else:\n        raise ValueError(\"Not a valid argument for validate\")",
                                "signature": "_validate(self, validate)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class _OrderedMerge:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index=False,\n    right_index=False,\n    axis=1,\n    suffixes=(\"_x\", \"_y\"),\n    copy=True,\n    fill_method=None,\n    how=\"outer\",\n):\n\n    self.fill_method = fill_method\n    _MergeOperation.__init__(\n        self,\n        left,\n        right,\n        on=on,\n        left_on=left_on,\n        left_index=left_index,\n        right_index=right_index,\n        right_on=right_on,\n        axis=axis,\n        how=how,\n        suffixes=suffixes,\n        sort=True,  # factorize sorts\n    )",
                                "signature": "__init__(self, left, right, on=None, left_on=None, right_on=None, left_index=False, right_index=False, axis=1, suffixes=('_x', '_y'), copy=True, fill_method=None, how='outer')"
                            },
                            {
                                "code": "def get_result(self):\n    join_index, left_indexer, right_indexer = self._get_join_info()\n\n    # this is a bit kludgy\n    ldata, rdata = self.left._data, self.right._data\n    lsuf, rsuf = self.suffixes\n\n    llabels, rlabels = _items_overlap_with_suffix(\n        ldata.items, lsuf, rdata.items, rsuf\n    )\n\n    if self.fill_method == \"ffill\":\n        left_join_indexer = libjoin.ffill_indexer(left_indexer)\n        right_join_indexer = libjoin.ffill_indexer(right_indexer)\n    else:\n        left_join_indexer = left_indexer\n        right_join_indexer = right_indexer\n\n    lindexers = {1: left_join_indexer} if left_join_indexer is not None else {}\n    rindexers = {1: right_join_indexer} if right_join_indexer is not None else {}\n\n    result_data = concatenate_block_managers(\n        [(ldata, lindexers), (rdata, rindexers)],\n        axes=[llabels.append(rlabels), join_index],\n        concat_axis=0,\n        copy=self.copy,\n    )\n\n    typ = self.left._constructor\n    result = typ(result_data).__finalize__(self, method=self._merge_type)\n\n    self._maybe_add_join_keys(result, left_indexer, right_indexer)\n\n    return result",
                                "signature": "get_result(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class _AsOfMerge:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index=False,\n    right_index=False,\n    by=None,\n    left_by=None,\n    right_by=None,\n    axis=1,\n    suffixes=(\"_x\", \"_y\"),\n    copy=True,\n    fill_method=None,\n    how=\"asof\",\n    tolerance=None,\n    allow_exact_matches=True,\n    direction=\"backward\",\n):\n\n    self.by = by\n    self.left_by = left_by\n    self.right_by = right_by\n    self.tolerance = tolerance\n    self.allow_exact_matches = allow_exact_matches\n    self.direction = direction\n\n    _OrderedMerge.__init__(\n        self,\n        left,\n        right,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        axis=axis,\n        how=how,\n        suffixes=suffixes,\n        fill_method=fill_method,\n    )",
                                "signature": "__init__(self, left, right, on=None, left_on=None, right_on=None, left_index=False, right_index=False, by=None, left_by=None, right_by=None, axis=1, suffixes=('_x', '_y'), copy=True, fill_method=None, how='asof', tolerance=None, allow_exact_matches=True, direction='backward')"
                            },
                            {
                                "code": "def _validate_specification(self):\n    super()._validate_specification()\n\n    # we only allow on to be a single item for on\n    if len(self.left_on) != 1 and not self.left_index:\n        raise MergeError(\"can only asof on a key for left\")\n\n    if len(self.right_on) != 1 and not self.right_index:\n        raise MergeError(\"can only asof on a key for right\")\n\n    if self.left_index and isinstance(self.left.index, MultiIndex):\n        raise MergeError(\"left can only have one index\")\n\n    if self.right_index and isinstance(self.right.index, MultiIndex):\n        raise MergeError(\"right can only have one index\")\n\n    # set 'by' columns\n    if self.by is not None:\n        if self.left_by is not None or self.right_by is not None:\n            raise MergeError(\"Can only pass by OR left_by and right_by\")\n        self.left_by = self.right_by = self.by\n    if self.left_by is None and self.right_by is not None:\n        raise MergeError(\"missing left_by\")\n    if self.left_by is not None and self.right_by is None:\n        raise MergeError(\"missing right_by\")\n\n    # add 'by' to our key-list so we can have it in the\n    # output as a key\n    if self.left_by is not None:\n        if not is_list_like(self.left_by):\n            self.left_by = [self.left_by]\n        if not is_list_like(self.right_by):\n            self.right_by = [self.right_by]\n\n        if len(self.left_by) != len(self.right_by):\n            raise MergeError(\"left_by and right_by must be same length\")\n\n        self.left_on = self.left_by + list(self.left_on)\n        self.right_on = self.right_by + list(self.right_on)\n\n    # check 'direction' is valid\n    if self.direction not in [\"backward\", \"forward\", \"nearest\"]:\n        raise MergeError(\n            \"direction invalid: {direction}\".format(direction=self.direction)\n        )",
                                "signature": "_validate_specification(self)"
                            },
                            {
                                "code": "@property\ndef _asof_key(self):\n    \"\"\" This is our asof key, the 'on' \"\"\"\n    return self.left_on[-1]",
                                "signature": "_asof_key(self)"
                            },
                            {
                                "code": "def _get_merge_keys(self):\n\n    # note this function has side effects\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                # The generic error message is confusing for categoricals.\n                #\n                # In this function, the join keys include both the original\n                # ones of the merge_asof() call, and also the keys passed\n                # to its by= argument. Unordered but equal categories\n                # are not supported for the former, but will fail\n                # later with a ValueError, so we don't *need* to check\n                # for them here.\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, both sides category, but not equal ones\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            else:\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            raise MergeError(msg)\n\n    # validate tolerance; must be a Timedelta if we have a DTI\n    if self.tolerance is not None:\n\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n\n        msg = (\n            \"incompatible tolerance {tolerance}, must be compat \"\n            \"with type {lkdtype}\".format(\n                tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n            )\n        )\n\n        if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n            if not isinstance(self.tolerance, Timedelta):\n                raise MergeError(msg)\n            if self.tolerance < Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_int64_dtype(lt):\n            if not is_integer(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_float_dtype(lt):\n            if not is_number(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n\n    # validate allow_exact_matches\n    if not is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n    return left_join_keys, right_join_keys, join_names",
                                "signature": "_get_merge_keys(self)"
                            },
                            {
                                "code": "def _get_join_indexers(self):\n    \"\"\" return the join indexers \"\"\"\n\n    def flip(xs):\n        \"\"\" unlike np.transpose, this returns an array of tuples \"\"\"\n        xs = [\n            x if not is_extension_array_dtype(x) else x._ndarray_values for x in xs\n        ]\n        labels = list(string.ascii_lowercase[: len(xs)])\n        dtypes = [x.dtype for x in xs]\n        labeled_dtypes = list(zip(labels, dtypes))\n        return np.array(list(zip(*xs)), labeled_dtypes)\n\n    # values to compare\n    left_values = (\n        self.left.index.values if self.left_index else self.left_join_keys[-1]\n    )\n    right_values = (\n        self.right.index.values if self.right_index else self.right_join_keys[-1]\n    )\n    tolerance = self.tolerance\n\n    # we require sortedness and non-null values in the join keys\n    msg_sorted = \"{side} keys must be sorted\"\n    msg_missings = \"Merge keys contain null values on {side} side\"\n\n    if not Index(left_values).is_monotonic:\n        if isnull(left_values).any():\n            raise ValueError(msg_missings.format(side=\"left\"))\n        else:\n            raise ValueError(msg_sorted.format(side=\"left\"))\n\n    if not Index(right_values).is_monotonic:\n        if isnull(right_values).any():\n            raise ValueError(msg_missings.format(side=\"right\"))\n        else:\n            raise ValueError(msg_sorted.format(side=\"right\"))\n\n    # initial type conversion as needed\n    if needs_i8_conversion(left_values):\n        left_values = left_values.view(\"i8\")\n        right_values = right_values.view(\"i8\")\n        if tolerance is not None:\n            tolerance = tolerance.value\n\n    # a \"by\" parameter requires special handling\n    if self.left_by is not None:\n        # remove 'on' parameter from values if one existed\n        if self.left_index and self.right_index:\n            left_by_values = self.left_join_keys\n            right_by_values = self.right_join_keys\n        else:\n            left_by_values = self.left_join_keys[0:-1]\n            right_by_values = self.right_join_keys[0:-1]\n\n        # get tuple representation of values if more than one\n        if len(left_by_values) == 1:\n            left_by_values = left_by_values[0]\n            right_by_values = right_by_values[0]\n        else:\n            left_by_values = flip(left_by_values)\n            right_by_values = flip(right_by_values)\n\n        # upcast 'by' parameter because HashTable is limited\n        by_type = _get_cython_type_upcast(left_by_values.dtype)\n        by_type_caster = _type_casters[by_type]\n        left_by_values = by_type_caster(left_by_values)\n        right_by_values = by_type_caster(right_by_values)\n\n        # choose appropriate function by type\n        func = _asof_by_function(self.direction)\n        return func(\n            left_values,\n            right_values,\n            left_by_values,\n            right_by_values,\n            self.allow_exact_matches,\n            tolerance,\n        )\n    else:\n        # choose appropriate function by type\n        func = _asof_function(self.direction)\n        return func(left_values, right_values, self.allow_exact_matches, tolerance)",
                                "signature": "_get_join_indexers(self)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "op": [
                    258,
                    69,
                    268,
                    526,
                    84,
                    509
                ],
                "_MergeOperation": [
                    1395,
                    69,
                    1415
                ],
                "left": [
                    1417,
                    274,
                    660,
                    281,
                    926,
                    286,
                    928,
                    673,
                    676,
                    677,
                    682,
                    556,
                    558,
                    1986,
                    1988,
                    70,
                    966,
                    973,
                    977,
                    978,
                    597,
                    1365,
                    601,
                    985,
                    1372,
                    1373,
                    2019,
                    110,
                    1527,
                    1914,
                    1915,
                    510
                ],
                "right": [
                    132,
                    135,
                    1418,
                    139,
                    274,
                    660,
                    280,
                    286,
                    926,
                    929,
                    674,
                    1915,
                    679,
                    680,
                    682,
                    557,
                    559,
                    951,
                    955,
                    956,
                    960,
                    1986,
                    963,
                    1988,
                    71,
                    597,
                    1368,
                    601,
                    1376,
                    2019,
                    1002,
                    1528,
                    123,
                    124,
                    125,
                    511
                ],
                "how": [
                    72,
                    266,
                    560,
                    1425,
                    1299,
                    1301,
                    894,
                    1535
                ],
                "on": [
                    512,
                    261,
                    73,
                    1419,
                    279,
                    1529,
                    274,
                    563,
                    118,
                    119,
                    120,
                    121,
                    123,
                    124
                ],
                "left_on": [
                    513,
                    262,
                    74,
                    1420,
                    564,
                    1530
                ],
                "right_on": [
                    514,
                    263,
                    75,
                    1423,
                    565,
                    1531
                ],
                "left_index": [
                    515,
                    585,
                    76,
                    588,
                    1421,
                    571,
                    1532
                ],
                "right_index": [
                    516,
                    77,
                    590,
                    1422,
                    593,
                    572,
                    1533
                ],
                "sort": [
                    1889,
                    1284,
                    1786,
                    1945,
                    1290,
                    78,
                    1808,
                    1777,
                    1300,
                    1813,
                    1782,
                    1815,
                    569,
                    1754,
                    1789,
                    1758,
                    1951
                ],
                "suffixes": [
                    1536,
                    264,
                    520,
                    79,
                    1426,
                    568
                ],
                "copy": [
                    80,
                    1298,
                    567
                ],
                "indicator": [
                    81,
                    574
                ],
                "validate": [
                    1249,
                    1256,
                    1225,
                    620,
                    621,
                    82,
                    1242
                ],
                "op.get_result": [
                    84,
                    268,
                    526
                ],
                "Substitution": [
                    52
                ],
                "Appender": [
                    53
                ],
                "_merge_doc": [
                    88,
                    53
                ],
                "__debug__": [
                    87
                ],
                "merge.__doc__": [
                    88
                ],
                "merge": [
                    88
                ],
                "pieces": [
                    162,
                    163,
                    106,
                    142,
                    156
                ],
                "isinstance": [
                    576,
                    578,
                    1346,
                    1955,
                    805,
                    1798,
                    1639,
                    107,
                    1004,
                    1965,
                    1550,
                    1967,
                    1553,
                    1910,
                    120,
                    987,
                    894
                ],
                "by": [
                    517,
                    107,
                    108,
                    110,
                    1518,
                    149,
                    123,
                    124,
                    125
                ],
                "list": [
                    1762,
                    1287,
                    1577,
                    1578,
                    107,
                    1674,
                    1676,
                    1677,
                    120,
                    1757,
                    1759
                ],
                "tuple": [
                    120,
                    107
                ],
                "lby": [
                    129,
                    164,
                    110
                ],
                "left.groupby": [
                    110
                ],
                "check_duplicates": [
                    117
                ],
                "any": [
                    1699,
                    753,
                    123,
                    1693,
                    766
                ],
                "right.duplicated": [
                    123
                ],
                "right.drop_duplicates": [
                    124
                ],
                "rby": [
                    135,
                    131,
                    125,
                    127
                ],
                "right.groupby": [
                    125
                ],
                "KeyError": [
                    136,
                    153,
                    126
                ],
                "key": [
                    152,
                    129,
                    135
                ],
                "lhs": [
                    129,
                    138,
                    145,
                    140
                ],
                "rhs": [
                    145,
                    132,
                    135
                ],
                "right.take": [
                    135
                ],
                "rby.indices": [
                    135
                ],
                "lcols": [
                    138,
                    139
                ],
                "lhs.columns.tolist": [
                    138
                ],
                "lhs.columns": [
                    138
                ],
                "cols": [
                    139,
                    140
                ],
                "r": [
                    139
                ],
                "right.columns": [
                    601,
                    139,
                    660,
                    597
                ],
                "set": [
                    139
                ],
                "merged": [
                    140,
                    141,
                    142,
                    145,
                    151,
                    152,
                    156
                ],
                "lhs.reindex": [
                    140
                ],
                "merged.index": [
                    141
                ],
                "range": [
                    1765,
                    1928,
                    141,
                    1935,
                    1365,
                    1368
                ],
                "len": [
                    1796,
                    1798,
                    1032,
                    1544,
                    1674,
                    1547,
                    1928,
                    141,
                    1167,
                    1941,
                    1815,
                    928,
                    929,
                    1574,
                    1191,
                    1193,
                    1200,
                    1202,
                    1208,
                    1722,
                    1987,
                    966,
                    847,
                    857,
                    1882,
                    859,
                    869,
                    1765,
                    871,
                    873,
                    1914,
                    1279
                ],
                "pieces.append": [
                    156,
                    142
                ],
                "_merge_pieces": [
                    145
                ],
                "k": [
                    997,
                    998,
                    999,
                    1002,
                    1003,
                    980,
                    981,
                    149,
                    151,
                    152,
                    982,
                    986,
                    985
                ],
                "result": [
                    772,
                    647,
                    650,
                    652,
                    654,
                    783,
                    656,
                    273,
                    277,
                    789,
                    286,
                    287,
                    162,
                    163,
                    164,
                    802,
                    803,
                    804,
                    805,
                    808,
                    811,
                    686,
                    687,
                    814,
                    689,
                    690,
                    816,
                    818,
                    693,
                    1459,
                    1461,
                    1463,
                    697,
                    698,
                    727,
                    733,
                    747,
                    759
                ],
                "concat": [
                    162
                ],
                "result.reindex": [
                    163
                ],
                "columns": [
                    668,
                    163,
                    660,
                    663
                ],
                "_OrderedMerge": [
                    1525,
                    258,
                    1493
                ],
                "x": [
                    928,
                    929,
                    1825,
                    259,
                    1672,
                    1961,
                    1675,
                    274,
                    282,
                    2012,
                    2013,
                    2014
                ],
                "y": [
                    1825,
                    274,
                    282,
                    260
                ],
                "fill_method": [
                    1537,
                    265,
                    1414
                ],
                "left_by": [
                    518,
                    270,
                    1519,
                    272,
                    274
                ],
                "right_by": [
                    519,
                    270,
                    1520,
                    276,
                    278
                ],
                "ValueError": [
                    271,
                    664,
                    669,
                    1694,
                    1696,
                    1700,
                    1702,
                    1194,
                    1969,
                    1203,
                    1209,
                    581,
                    1991,
                    586,
                    591,
                    1123,
                    1127,
                    1129,
                    1131,
                    1260,
                    1133
                ],
                "_": [
                    1861,
                    1862,
                    273,
                    277,
                    1917
                ],
                "_groupby_and_merge": [
                    273,
                    277
                ],
                "_merger": [
                    274,
                    282,
                    286
                ],
                "_AsOfMerge": [
                    509
                ],
                "tolerance": [
                    522,
                    1708,
                    1709,
                    1743,
                    1521,
                    1748,
                    1686
                ],
                "allow_exact_matches": [
                    1522,
                    523
                ],
                "direction": [
                    1472,
                    1467,
                    524,
                    1523
                ],
                "_merge_type": [
                    537,
                    1396,
                    1494
                ],
                "validate_operand": [
                    556,
                    557
                ],
                "self.left": [
                    646,
                    1166,
                    1550,
                    1681,
                    1434,
                    926,
                    558,
                    1202,
                    1458,
                    827,
                    847,
                    849,
                    1627,
                    862,
                    868,
                    1004,
                    750,
                    1008,
                    625,
                    1015,
                    1012,
                    629,
                    761,
                    759,
                    1145,
                    1147
                ],
                "self": [
                    1030,
                    1544,
                    1547,
                    1550,
                    1553,
                    1557,
                    1558,
                    1560,
                    1561,
                    1563,
                    1568,
                    1569,
                    1570,
                    1571,
                    1572,
                    1574,
                    1577,
                    1578,
                    1581,
                    558,
                    559,
                    560,
                    561,
                    1583,
                    563,
                    564,
                    565,
                    1589,
                    567,
                    568,
                    569,
                    571,
                    572,
                    574,
                    576,
                    577,
                    578,
                    579,
                    1624,
                    1626,
                    1627,
                    604,
                    608,
                    609,
                    610,
                    611,
                    1634,
                    615,
                    1639,
                    1641,
                    621,
                    1645,
                    1647,
                    624,
                    625,
                    627,
                    1651,
                    629,
                    630,
                    1653,
                    1145,
                    1147,
                    1148,
                    1660,
                    1150,
                    1662,
                    1154,
                    643,
                    1156,
                    1157,
                    646,
                    647,
                    1158,
                    649,
                    650,
                    1159,
                    652,
                    1161,
                    654,
                    1162,
                    1166,
                    1681,
                    1172,
                    1173,
                    1174,
                    1175,
                    1684,
                    1686,
                    668,
                    1182,
                    1183,
                    1184,
                    1189,
                    1190,
                    1191,
                    1192,
                    1193,
                    1198,
                    1199,
                    1200,
                    689,
                    1201,
                    1202,
                    1712,
                    693,
                    1714,
                    1207,
                    1208,
                    1715,
                    1716,
                    1718,
                    1719,
                    1214,
                    1215,
                    1217,
                    1219,
                    1220,
                    1222,
                    1736,
                    1742,
                    722,
                    1747,
                    1748,
                    725,
                    726,
                    740,
                    750,
                    756,
                    759,
                    761,
                    763,
                    769,
                    772,
                    774,
                    776,
                    777,
                    778,
                    823,
                    827,
                    828,
                    830,
                    832,
                    834,
                    836,
                    839,
                    841,
                    844,
                    846,
                    847,
                    848,
                    849,
                    850,
                    856,
                    858,
                    859,
                    860,
                    861,
                    862,
                    868,
                    894,
                    1414,
                    1416,
                    1431,
                    1434,
                    1435,
                    926,
                    1441,
                    942,
                    943,
                    1455,
                    1458,
                    1459,
                    1461,
                    979,
                    980,
                    987,
                    991,
                    995,
                    996,
                    997,
                    1004,
                    1518,
                    1519,
                    1008,
                    1520,
                    1521,
                    1522,
                    1012,
                    1523,
                    1526,
                    1015,
                    1018
                ],
                "self.orig_left": [
                    725,
                    558,
                    1215
                ],
                "self.right": [
                    772,
                    774,
                    1166,
                    1553,
                    1684,
                    1434,
                    926,
                    1193,
                    559,
                    828,
                    850,
                    856,
                    859,
                    987,
                    861,
                    991,
                    995,
                    625,
                    629,
                    1018,
                    763,
                    1148,
                    1150
                ],
                "self.orig_right": [
                    1220,
                    726,
                    559
                ],
                "self.how": [
                    832,
                    834,
                    839,
                    560,
                    894,
                    823,
                    830
                ],
                "self.axis": [
                    561,
                    827,
                    828
                ],
                "axis": [
                    1424,
                    561,
                    1534
                ],
                "self.on": [
                    1154,
                    563,
                    1189,
                    1183
                ],
                "com.maybe_make_list": [
                    563,
                    564,
                    565
                ],
                "com": [
                    1961,
                    1868,
                    1869,
                    563,
                    564,
                    565,
                    1875,
                    1876
                ],
                "self.left_on": [
                    1154,
                    1157,
                    1544,
                    1162,
                    1172,
                    1182,
                    1184,
                    1189,
                    1190,
                    1191,
                    1193,
                    1577,
                    942,
                    943,
                    564,
                    1589,
                    1207,
                    1208,
                    722,
                    979,
                    980,
                    740
                ],
                "self.right_on": [
                    1154,
                    1157,
                    1159,
                    1547,
                    1173,
                    1182,
                    1184,
                    1189,
                    1578,
                    942,
                    943,
                    1198,
                    1199,
                    1200,
                    1202,
                    565,
                    1208,
                    722,
                    740,
                    996,
                    997
                ],
                "self.copy": [
                    1455,
                    643,
                    567
                ],
                "self.suffixes": [
                    568,
                    1435,
                    630
                ],
                "self.sort": [
                    832,
                    836,
                    841,
                    823,
                    569
                ],
                "self.left_index": [
                    1156,
                    1158,
                    839,
                    1544,
                    1550,
                    1201,
                    1681,
                    1714,
                    1626,
                    1174,
                    858,
                    571,
                    1214,
                    830
                ],
                "self.right_index": [
                    834,
                    1219,
                    1156,
                    1192,
                    1161,
                    1547,
                    846,
                    1553,
                    1714,
                    1684,
                    1175,
                    572,
                    830
                ],
                "self.indicator": [
                    576,
                    577,
                    578,
                    579,
                    649,
                    624,
                    574
                ],
                "str": [
                    576,
                    1955
                ],
                "self.indicator_name": [
                    577,
                    579,
                    689,
                    693,
                    668
                ],
                "bool": [
                    578
                ],
                "is_bool": [
                    585,
                    1660,
                    590
                ],
                "format": [
                    1472,
                    1632,
                    1992,
                    1609,
                    587,
                    1583,
                    592,
                    1169,
                    818,
                    1616,
                    2013,
                    598,
                    1974,
                    665,
                    1467,
                    1180,
                    1053
                ],
                "type": [
                    593,
                    1634,
                    588,
                    1975
                ],
                "left.columns.nlevels": [
                    601,
                    597
                ],
                "left.columns": [
                    601,
                    660,
                    597
                ],
                "right.columns.nlevels": [
                    601,
                    597
                ],
                "msg": [
                    1123,
                    1127,
                    1608,
                    1129,
                    1640,
                    1131,
                    1133,
                    1646,
                    1615,
                    1652,
                    1621,
                    598,
                    602,
                    1052,
                    1661,
                    1662,
                    1631
                ],
                "warnings.warn": [
                    1080,
                    602,
                    1069
                ],
                "warnings": [
                    1080,
                    602,
                    1069
                ],
                "UserWarning": [
                    602,
                    1074,
                    1085
                ],
                "self._validate_specification": [
                    604
                ],
                "self.left_join_keys": [
                    608,
                    769,
                    1217,
                    836,
                    1030,
                    776,
                    777,
                    1681,
                    1715,
                    1718,
                    823
                ],
                "self.right_join_keys": [
                    609,
                    1030,
                    1222,
                    841,
                    778,
                    1719,
                    756,
                    1684,
                    1716,
                    823
                ],
                "self.join_names": [
                    722,
                    610,
                    740,
                    1030
                ],
                "self._get_merge_keys": [
                    611
                ],
                "self._maybe_coerce_merge_keys": [
                    615
                ],
                "self._validate": [
                    621
                ],
                "self._indicator_pre_merge": [
                    625
                ],
                "join_index": [
                    641,
                    1431,
                    1817,
                    1818,
                    1453,
                    831,
                    835,
                    840,
                    1355,
                    1357,
                    1358,
                    1359,
                    848,
                    856,
                    857,
                    860,
                    868,
                    869,
                    871,
                    873,
                    874,
                    875,
                    627
                ],
                "left_indexer": [
                    1792,
                    776,
                    652,
                    1807,
                    786,
                    1813,
                    1431,
                    1815,
                    1817,
                    1818,
                    796,
                    1825,
                    1442,
                    1826,
                    1788,
                    1445,
                    1461,
                    831,
                    835,
                    840,
                    844,
                    851,
                    857,
                    864,
                    868,
                    871,
                    875,
                    749,
                    753,
                    627,
                    636
                ],
                "right_indexer": [
                    1792,
                    652,
                    1807,
                    1813,
                    1431,
                    792,
                    1818,
                    1821,
                    1825,
                    1826,
                    1443,
                    1446,
                    1461,
                    831,
                    835,
                    840,
                    844,
                    852,
                    856,
                    863,
                    869,
                    875,
                    749,
                    627,
                    1788,
                    637,
                    766
                ],
                "self._get_join_info": [
                    627,
                    1431
                ],
                "ldata": [
                    640,
                    1452,
                    629,
                    633,
                    1434,
                    1438
                ],
                "rdata": [
                    640,
                    1452,
                    629,
                    633,
                    1434,
                    1438
                ],
                "self.left._data": [
                    1434,
                    827,
                    629
                ],
                "self.right._data": [
                    1434,
                    828,
                    629
                ],
                "lsuf": [
                    633,
                    1435,
                    630,
                    1438
                ],
                "rsuf": [
                    633,
                    1435,
                    630,
                    1438
                ],
                "llabels": [
                    632,
                    641,
                    1437,
                    1453
                ],
                "rlabels": [
                    632,
                    641,
                    1437,
                    1453
                ],
                "_items_overlap_with_suffix": [
                    632,
                    1437
                ],
                "ldata.items": [
                    633,
                    1438
                ],
                "rdata.items": [
                    633,
                    1438
                ],
                "lindexers": [
                    640,
                    1452,
                    636,
                    1448
                ],
                "rindexers": [
                    640,
                    1449,
                    1452,
                    637
                ],
                "result_data": [
                    647,
                    1451,
                    1459,
                    639
                ],
                "concatenate_block_managers": [
                    1451,
                    639
                ],
                "llabels.append": [
                    641,
                    1453
                ],
                "typ": [
                    646,
                    647,
                    1458,
                    1459,
                    1146,
                    1147,
                    1149,
                    1150
                ],
                "self.left._constructor": [
                    1458,
                    646
                ],
                "__finalize__": [
                    1459,
                    647
                ],
                "self._merge_type": [
                    1459,
                    647
                ],
                "self._indicator_post_merge": [
                    650
                ],
                "self._maybe_add_join_keys": [
                    652,
                    1461
                ],
                "self._maybe_restore_index_levels": [
                    654
                ],
                "left.columns.union": [
                    660
                ],
                "i": [
                    769,
                    1927,
                    776,
                    777,
                    778,
                    1935,
                    1937,
                    1938,
                    1939,
                    662,
                    663,
                    666,
                    818,
                    1597,
                    1611,
                    1618,
                    741,
                    1765,
                    1766,
                    1770,
                    1772,
                    1774,
                    756
                ],
                "left.copy": [
                    673
                ],
                "right.copy": [
                    674
                ],
                "astype": [
                    677,
                    680,
                    1932,
                    1933,
                    1147,
                    1150
                ],
                "fillna": [
                    686,
                    687
                ],
                "Categorical": [
                    689
                ],
                "cat.rename_categories": [
                    693
                ],
                "cat": [
                    693
                ],
                "result.drop": [
                    697
                ],
                "names_to_restore": [
                    720,
                    730,
                    732,
                    733
                ],
                "name": [
                    1145,
                    772,
                    1029,
                    774,
                    1147,
                    783,
                    789,
                    802,
                    803,
                    804,
                    806,
                    809,
                    816,
                    818,
                    1467,
                    1468,
                    1472,
                    1473,
                    721,
                    727,
                    730,
                    741,
                    747,
                    750,
                    759,
                    761,
                    763,
                    1148,
                    1150
                ],
                "left_key": [
                    721,
                    1786,
                    725,
                    1789
                ],
                "right_key": [
                    721,
                    1786,
                    1789,
                    726
                ],
                "zip": [
                    740,
                    1029,
                    1287,
                    1757,
                    1676,
                    1677,
                    1007,
                    943,
                    721,
                    1597,
                    990
                ],
                "self.orig_left._is_level_reference": [
                    725
                ],
                "self.orig_right._is_level_reference": [
                    726
                ],
                "result.index.names": [
                    811,
                    727
                ],
                "result.index": [
                    805,
                    808,
                    811,
                    816,
                    727
                ],
                "names_to_restore.append": [
                    730
                ],
                "result.set_index": [
                    733,
                    814
                ],
                "left_has_missing": [
                    752,
                    737,
                    755,
                    753
                ],
                "right_has_missing": [
                    768,
                    738,
                    765,
                    766
                ],
                "keys": [
                    740,
                    741
                ],
                "lname": [
                    1955,
                    741,
                    742,
                    1957
                ],
                "rname": [
                    1955,
                    741,
                    742,
                    1957
                ],
                "enumerate": [
                    1597,
                    741
                ],
                "_should_fill": [
                    742
                ],
                "take_left": [
                    769,
                    745,
                    777,
                    780,
                    782,
                    785,
                    786,
                    761
                ],
                "take_right": [
                    774,
                    745,
                    778,
                    780,
                    756,
                    788,
                    791,
                    792
                ],
                "is_dtype_equal": [
                    1598,
                    1049,
                    771,
                    758
                ],
                "dtype": [
                    1487,
                    772,
                    1485,
                    759
                ],
                "_values": [
                    761,
                    789,
                    774,
                    783
                ],
                "is_array_like": [
                    776,
                    929,
                    928
                ],
                "lvals": [
                    800,
                    786,
                    783
                ],
                "lfill": [
                    785,
                    786
                ],
                "na_value_for_dtype": [
                    785,
                    902,
                    791
                ],
                "take_left.dtype": [
                    785
                ],
                "algos.take_1d": [
                    792,
                    786
                ],
                "algos": [
                    792,
                    786,
                    1386
                ],
                "rvals": [
                    792,
                    800,
                    789,
                    798
                ],
                "rfill": [
                    792,
                    791
                ],
                "take_right.dtype": [
                    791
                ],
                "mask": [
                    800,
                    900,
                    901,
                    1766,
                    1767,
                    1774,
                    796,
                    797
                ],
                "mask.all": [
                    797
                ],
                "key_col": [
                    800,
                    803,
                    806,
                    810,
                    816,
                    818,
                    798
                ],
                "where": [
                    800
                ],
                "Index": [
                    800,
                    1698,
                    903,
                    871,
                    816,
                    1912,
                    1692
                ],
                "result._is_label_reference": [
                    802
                ],
                "result._is_level_reference": [
                    804
                ],
                "MultiIndex": [
                    1217,
                    1346,
                    805,
                    1222,
                    1349,
                    1798,
                    1004,
                    1550,
                    1553,
                    987,
                    894
                ],
                "key_col.name": [
                    806
                ],
                "idx_list": [
                    814,
                    807
                ],
                "level_name": [
                    808,
                    809,
                    811
                ],
                "result.index.get_level_values": [
                    808
                ],
                "result.insert": [
                    818
                ],
                "_get_join_indexers": [
                    822
                ],
                "left_ax": [
                    836,
                    841,
                    1815,
                    1817,
                    827,
                    1821,
                    831
                ],
                "self.left._data.axes": [
                    827
                ],
                "right_ax": [
                    832,
                    836,
                    1798,
                    841,
                    1808,
                    1813,
                    828
                ],
                "self.right._data.axes": [
                    828
                ],
                "left_ax.join": [
                    831
                ],
                "_left_join_on_index": [
                    840,
                    835
                ],
                "self._get_join_indexers": [
                    844
                ],
                "self._create_join_index": [
                    848,
                    860
                ],
                "self.left.index": [
                    868,
                    1004,
                    1550,
                    1008,
                    849,
                    1202,
                    1681,
                    1012,
                    1627,
                    862
                ],
                "self.right.index": [
                    995,
                    1193,
                    1553,
                    850,
                    1684,
                    856,
                    987,
                    861,
                    991
                ],
                "self.right.index.take": [
                    856
                ],
                "np.array": [
                    857,
                    869,
                    1677
                ],
                "np": [
                    869,
                    901,
                    871,
                    1931,
                    1068,
                    1677,
                    1870,
                    1871,
                    1901,
                    1903,
                    1936,
                    1910,
                    1079,
                    857,
                    1915,
                    1759
                ],
                "self.left.index.take": [
                    868
                ],
                "np.arange": [
                    871
                ],
                "join_index.astype": [
                    874
                ],
                "object": [
                    874,
                    1149,
                    1146
                ],
                "other_index": [
                    894
                ],
                "indexer": [
                    1377,
                    900,
                    904,
                    1386,
                    1374
                ],
                "np.any": [
                    901
                ],
                "fill_value": [
                    902,
                    903
                ],
                "index.dtype": [
                    902
                ],
                "index": [
                    1346,
                    1347,
                    1762,
                    1349,
                    902,
                    903,
                    904,
                    1766,
                    1786,
                    1757,
                    1759
                ],
                "index.append": [
                    903
                ],
                "index.take": [
                    904
                ],
                "left_keys": [
                    1287,
                    973,
                    1005,
                    945,
                    977,
                    1012,
                    982,
                    920,
                    985,
                    1020,
                    1279
                ],
                "right_keys": [
                    960,
                    1280,
                    963,
                    995,
                    999,
                    1287,
                    1002,
                    971,
                    1020,
                    947,
                    951,
                    921,
                    955,
                    988
                ],
                "join_names": [
                    1664,
                    986,
                    1000,
                    1003,
                    1020,
                    974,
                    1359,
                    1390,
                    1392,
                    978,
                    948,
                    1594,
                    983,
                    952,
                    922,
                    956
                ],
                "right_drop": [
                    1017,
                    1018,
                    923,
                    967
                ],
                "left_drop": [
                    969,
                    924,
                    1014,
                    1015
                ],
                "is_lkey": [
                    928,
                    981,
                    944
                ],
                "is_rkey": [
                    929,
                    946,
                    958,
                    998
                ],
                "_any": [
                    979,
                    996,
                    942
                ],
                "lk": [
                    1029,
                    1032,
                    1035,
                    1037,
                    1043,
                    1049,
                    1055,
                    1062,
                    1063,
                    1067,
                    1068,
                    943,
                    944,
                    945,
                    1839,
                    1840,
                    1844,
                    1078,
                    1079,
                    1846,
                    1851,
                    1597,
                    1598,
                    1599,
                    1853,
                    1857,
                    1090,
                    1859,
                    964,
                    1861,
                    1864,
                    969,
                    1611,
                    972,
                    973,
                    974,
                    1100,
                    1868,
                    1870,
                    1106,
                    1618,
                    1108,
                    1875,
                    1879,
                    1882,
                    1884,
                    1126,
                    1128,
                    1130,
                    1132,
                    1146
                ],
                "rk": [
                    1029,
                    1032,
                    1036,
                    1038,
                    1043,
                    1049,
                    1055,
                    1062,
                    1063,
                    1067,
                    1068,
                    943,
                    1839,
                    1841,
                    946,
                    947,
                    1844,
                    950,
                    951,
                    952,
                    1078,
                    1079,
                    1846,
                    1848,
                    1597,
                    958,
                    959,
                    960,
                    1598,
                    1599,
                    1091,
                    964,
                    1854,
                    1858,
                    967,
                    1859,
                    1862,
                    1864,
                    971,
                    1099,
                    1611,
                    1869,
                    1871,
                    1105,
                    1618,
                    1876,
                    1109,
                    1880,
                    1882,
                    1885,
                    1851,
                    1126,
                    1128,
                    1130,
                    1132,
                    1149
                ],
                "left_keys.append": [
                    973,
                    945,
                    977,
                    982,
                    985
                ],
                "right_keys.append": [
                    960,
                    963,
                    999,
                    1002,
                    971,
                    947,
                    951,
                    955
                ],
                "join_names.append": [
                    1000,
                    1003,
                    974,
                    978,
                    948,
                    983,
                    952,
                    986,
                    956
                ],
                "right._get_label_or_level_values": [
                    960,
                    1002,
                    951
                ],
                "right.index": [
                    955,
                    956,
                    963
                ],
                "right.index.name": [
                    956
                ],
                "right_drop.append": [
                    967
                ],
                "left_drop.append": [
                    969
                ],
                "left._get_label_or_level_values": [
                    985,
                    973
                ],
                "left.index": [
                    977,
                    978
                ],
                "left.index.name": [
                    978
                ],
                "lev._values.take": [
                    989,
                    1006
                ],
                "lev._values": [
                    989,
                    1006
                ],
                "lev": [
                    1007,
                    989,
                    990,
                    1006
                ],
                "lev_codes": [
                    1007,
                    989,
                    990,
                    1006
                ],
                "self.right.index.levels": [
                    991
                ],
                "self.right.index.codes": [
                    991
                ],
                "self.right.index._values": [
                    995
                ],
                "self.left.index.levels": [
                    1008
                ],
                "self.left.index.codes": [
                    1008
                ],
                "self.left.index.values": [
                    1681,
                    1012
                ],
                "self.left._drop_labels_or_levels": [
                    1015
                ],
                "self.right._drop_labels_or_levels": [
                    1018
                ],
                "lk_is_cat": [
                    1146,
                    1042,
                    1035,
                    1046
                ],
                "is_categorical_dtype": [
                    1035,
                    1036,
                    1844,
                    1599
                ],
                "rk_is_cat": [
                    1042,
                    1036,
                    1149,
                    1046
                ],
                "lk_is_object": [
                    1105,
                    1099,
                    1037,
                    1135
                ],
                "is_object_dtype": [
                    1037,
                    1038
                ],
                "rk_is_object": [
                    1106,
                    1100,
                    1038,
                    1135
                ],
                "lk.is_dtype_equal": [
                    1043,
                    1844
                ],
                "lk.dtype": [
                    1857,
                    1859,
                    1063,
                    1611,
                    1599,
                    1870,
                    1618,
                    1079,
                    1049,
                    1598,
                    1055
                ],
                "rk.dtype": [
                    1858,
                    1859,
                    1063,
                    1611,
                    1068,
                    1599,
                    1871,
                    1618,
                    1049,
                    1598,
                    1055
                ],
                "is_numeric_dtype": [
                    1105,
                    1106,
                    1062
                ],
                "lk.dtype.kind": [
                    1063
                ],
                "rk.dtype.kind": [
                    1063
                ],
                "is_integer_dtype": [
                    1864,
                    1067,
                    1485,
                    1078
                ],
                "is_float_dtype": [
                    1650,
                    1067,
                    1078,
                    1487
                ],
                "all": [
                    1068,
                    1079
                ],
                "lk.astype": [
                    1068
                ],
                "np.isnan": [
                    1068,
                    1079
                ],
                "rk.astype": [
                    1079
                ],
                "lib.infer_dtype": [
                    1090,
                    1108,
                    1109
                ],
                "lib": [
                    1090,
                    1108,
                    1109
                ],
                "is_bool_dtype": [
                    1099,
                    1100
                ],
                "inferred_left": [
                    1121,
                    1114,
                    1108,
                    1119
                ],
                "inferred_right": [
                    1121,
                    1114,
                    1109,
                    1119
                ],
                "bool_types": [
                    1114,
                    1110
                ],
                "string_types": [
                    1121,
                    1119,
                    1111
                ],
                "is_datetimelike": [
                    1128,
                    1126
                ],
                "is_datetime64tz_dtype": [
                    1130,
                    1132,
                    1638,
                    1839
                ],
                "self.left.columns": [
                    1145,
                    1166
                ],
                "lk.categories.dtype": [
                    1146
                ],
                "lk.categories": [
                    1146,
                    1851,
                    1846
                ],
                "self.left.assign": [
                    1147
                ],
                "self.right.columns": [
                    1148,
                    1166
                ],
                "rk.categories.dtype": [
                    1149
                ],
                "rk.categories": [
                    1851,
                    1149,
                    1846
                ],
                "self.right.assign": [
                    1150
                ],
                "MergeError": [
                    1160,
                    1545,
                    1163,
                    1548,
                    1551,
                    1168,
                    1554,
                    1559,
                    1562,
                    1179,
                    1564,
                    1185,
                    1575,
                    1582,
                    1227,
                    1232,
                    1237,
                    1621,
                    1244,
                    1251,
                    1640,
                    1642,
                    1646,
                    1648,
                    1652,
                    1654,
                    1657,
                    1662
                ],
                "common_cols": [
                    1166,
                    1167,
                    1178,
                    1180,
                    1182
                ],
                "self.left.columns.intersection": [
                    1166
                ],
                "common_cols.is_unique": [
                    1178
                ],
                "n": [
                    1200,
                    1207,
                    1198,
                    1191
                ],
                "self.right.index.nlevels": [
                    1193
                ],
                "self.left.index.nlevels": [
                    1202
                ],
                "left_unique": [
                    1217,
                    1226,
                    1231,
                    1243,
                    1215
                ],
                "self.orig_left.index.is_unique": [
                    1215
                ],
                "self.orig_left.index": [
                    1215
                ],
                "is_unique": [
                    1217,
                    1222
                ],
                "MultiIndex.from_arrays": [
                    1217,
                    1349,
                    1222
                ],
                "right_unique": [
                    1250,
                    1220,
                    1222,
                    1226,
                    1236
                ],
                "self.orig_right.index.is_unique": [
                    1220
                ],
                "self.orig_right.index": [
                    1220
                ],
                "fkeys": [
                    1284,
                    1287,
                    1295,
                    1780,
                    1754,
                    1757
                ],
                "partial": [
                    2016,
                    2017,
                    1754,
                    1284
                ],
                "_factorize_keys": [
                    1945,
                    1754,
                    1284,
                    1786
                ],
                "llab": [
                    1891,
                    1894,
                    1287,
                    1290,
                    1932,
                    1901,
                    1906,
                    1938,
                    1947,
                    1884,
                    1951
                ],
                "rlab": [
                    1891,
                    1287,
                    1896,
                    1290,
                    1933,
                    1903,
                    1906,
                    1939,
                    1948,
                    1885,
                    1951
                ],
                "shape": [
                    1287,
                    1927,
                    1928,
                    1290,
                    1770,
                    1772,
                    1931,
                    1774,
                    1949,
                    1777,
                    1937,
                    1941,
                    1757,
                    1951
                ],
                "map": [
                    1759,
                    1762,
                    1757,
                    1287
                ],
                "lkey": [
                    1290,
                    1932,
                    1295,
                    1777,
                    1938,
                    1780,
                    1782,
                    1303,
                    1942,
                    1945,
                    1947
                ],
                "rkey": [
                    1290,
                    1933,
                    1295,
                    1777,
                    1939,
                    1780,
                    1782,
                    1303,
                    1942,
                    1945,
                    1948
                ],
                "_get_join_keys": [
                    1777,
                    1290,
                    1951
                ],
                "count": [
                    1901,
                    1949,
                    1295,
                    1903,
                    1904,
                    1906,
                    1780,
                    1782,
                    1303,
                    1945,
                    1786,
                    1789,
                    1887
                ],
                "kwargs": [
                    1298,
                    1300,
                    1303
                ],
                "copy.copy": [
                    1298
                ],
                "join_func": [
                    1301,
                    1303
                ],
                "_join_functions": [
                    1829,
                    1301
                ],
                "index.values": [
                    1349
                ],
                "index.name": [
                    1349
                ],
                "_convert_to_mulitindex": [
                    1355
                ],
                "join_levels": [
                    1392,
                    1388,
                    1357
                ],
                "join_index.levels": [
                    1357
                ],
                "join_codes": [
                    1392,
                    1389,
                    1358
                ],
                "join_index.codes": [
                    1358
                ],
                "join_index.names": [
                    1359
                ],
                "lindexer": [
                    1364,
                    1365,
                    1374
                ],
                "left.size": [
                    1365
                ],
                "rindexer": [
                    1368,
                    1377,
                    1367
                ],
                "right.size": [
                    1368
                ],
                "dropped_level_name": [
                    1380,
                    1371,
                    1372,
                    1390
                ],
                "dropped_level_names": [
                    1371
                ],
                "left.names": [
                    1372
                ],
                "idx": [
                    1376,
                    1380,
                    1382,
                    1385,
                    1373
                ],
                "name_idx": [
                    1385,
                    1380,
                    1382
                ],
                "idx.names.index": [
                    1380
                ],
                "idx.names": [
                    1380
                ],
                "restore_levels": [
                    1388,
                    1382
                ],
                "idx.levels": [
                    1382
                ],
                "codes": [
                    1385,
                    1386
                ],
                "idx.codes": [
                    1385
                ],
                "restore_codes": [
                    1386,
                    1389
                ],
                "algos.take_nd": [
                    1386
                ],
                "self.fill_method": [
                    1441,
                    1414
                ],
                "_MergeOperation.__init__": [
                    1415
                ],
                "left_join_indexer": [
                    1448,
                    1442,
                    1445
                ],
                "libjoin.ffill_indexer": [
                    1442,
                    1443
                ],
                "libjoin": [
                    1473,
                    1442,
                    1443,
                    1788,
                    1825,
                    1830,
                    1831,
                    1833,
                    1782,
                    1468
                ],
                "right_join_indexer": [
                    1449,
                    1443,
                    1446
                ],
                "getattr": [
                    1840,
                    1473,
                    1468,
                    1841
                ],
                "_type_casters": [
                    1731,
                    1476
                ],
                "ensure_int64": [
                    1477,
                    1853,
                    1868,
                    1869,
                    1918,
                    1875,
                    1876,
                    1789,
                    1854
                ],
                "ensure_float64": [
                    1478
                ],
                "ensure_object": [
                    1880,
                    1879,
                    1479
                ],
                "self.by": [
                    1560,
                    1557,
                    1518
                ],
                "self.left_by": [
                    1568,
                    1569,
                    1570,
                    1574,
                    1577,
                    1519,
                    1712,
                    1558,
                    1560,
                    1561,
                    1563
                ],
                "self.right_by": [
                    1571,
                    1572,
                    1574,
                    1578,
                    1520,
                    1558,
                    1560,
                    1561,
                    1563
                ],
                "self.tolerance": [
                    1634,
                    1639,
                    1641,
                    1645,
                    1647,
                    1521,
                    1651,
                    1653,
                    1686,
                    1624
                ],
                "self.allow_exact_matches": [
                    1742,
                    1522,
                    1748,
                    1660,
                    1662
                ],
                "self.direction": [
                    1736,
                    1581,
                    1583,
                    1523,
                    1747
                ],
                "_OrderedMerge.__init__": [
                    1525
                ],
                "_validate_specification": [
                    1541
                ],
                "super": [
                    1594,
                    1541
                ],
                "is_list_like": [
                    1569,
                    1571
                ],
                "property": [
                    1586
                ],
                "left_join_keys": [
                    1664,
                    1594,
                    1629,
                    1597
                ],
                "right_join_keys": [
                    1664,
                    1594,
                    1597
                ],
                "_get_merge_keys": [
                    1594
                ],
                "repr": [
                    1618,
                    1611,
                    1634
                ],
                "lt": [
                    1634,
                    1638,
                    1644,
                    1650,
                    1627,
                    1629
                ],
                "lt.dtype": [
                    1634
                ],
                "is_datetime64_dtype": [
                    1638
                ],
                "Timedelta": [
                    1641,
                    1639
                ],
                "is_int64_dtype": [
                    1644
                ],
                "is_integer": [
                    1645
                ],
                "is_number": [
                    1651
                ],
                "msg.format": [
                    1662
                ],
                "xs": [
                    1671,
                    1672,
                    1674,
                    1675,
                    1677
                ],
                "is_extension_array_dtype": [
                    1672,
                    1857,
                    1858
                ],
                "x._ndarray_values": [
                    1672
                ],
                "labels": [
                    1674,
                    1915,
                    1676,
                    1917
                ],
                "string.ascii_lowercase": [
                    1674
                ],
                "string": [
                    1674
                ],
                "dtypes": [
                    1675,
                    1676
                ],
                "x.dtype": [
                    1675
                ],
                "labeled_dtypes": [
                    1676,
                    1677
                ],
                "left_values": [
                    1705,
                    1706,
                    1738,
                    1680,
                    1748,
                    1692,
                    1693
                ],
                "right_values": [
                    1698,
                    1699,
                    1707,
                    1739,
                    1683,
                    1748
                ],
                "self.right.index.values": [
                    1684
                ],
                "msg_sorted": [
                    1696,
                    1689,
                    1702
                ],
                "msg_missings": [
                    1690,
                    1700,
                    1694
                ],
                "is_monotonic": [
                    1698,
                    1692
                ],
                "isnull": [
                    1699,
                    1693
                ],
                "msg_missings.format": [
                    1700,
                    1694
                ],
                "msg_sorted.format": [
                    1696,
                    1702
                ],
                "needs_i8_conversion": [
                    1705
                ],
                "left_values.view": [
                    1706
                ],
                "right_values.view": [
                    1707
                ],
                "tolerance.value": [
                    1709
                ],
                "left_by_values": [
                    1730,
                    1732,
                    1740,
                    1715,
                    1718,
                    1722,
                    1723,
                    1726
                ],
                "right_by_values": [
                    1733,
                    1741,
                    1716,
                    1719,
                    1724,
                    1727
                ],
                "flip": [
                    1726,
                    1727
                ],
                "by_type": [
                    1730,
                    1731
                ],
                "_get_cython_type_upcast": [
                    1730
                ],
                "left_by_values.dtype": [
                    1730
                ],
                "by_type_caster": [
                    1731,
                    1732,
                    1733
                ],
                "func": [
                    1736,
                    1737,
                    1747,
                    1748
                ],
                "_asof_by_function": [
                    1736
                ],
                "_asof_function": [
                    1747
                ],
                "rcodes": [
                    1762,
                    1774,
                    1777,
                    1757,
                    1759
                ],
                "lcodes": [
                    1777,
                    1770,
                    1757
                ],
                "index.levels": [
                    1757
                ],
                "join_keys": [
                    1796,
                    1765,
                    1798,
                    1770,
                    1808,
                    1811,
                    1757
                ],
                "np.take": [
                    1759
                ],
                "index.codes": [
                    1762,
                    1766,
                    1759
                ],
                "i8copy": [
                    1761,
                    1762
                ],
                "a.astype": [
                    1761
                ],
                "a": [
                    1761,
                    1770,
                    1771
                ],
                "mask.any": [
                    1767
                ],
                "a.size": [
                    1771
                ],
                "libjoin.left_outer_join": [
                    1825,
                    1788,
                    1782,
                    1831
                ],
                "join_key": [
                    1786
                ],
                "right_ax.nlevels": [
                    1798
                ],
                "AssertionError": [
                    1800
                ],
                "_get_multiindex_indexer": [
                    1807
                ],
                "jkey": [
                    1811,
                    1813
                ],
                "_get_single_indexer": [
                    1813
                ],
                "left_ax.take": [
                    1817
                ],
                "max_groups": [
                    1825
                ],
                "libjoin.inner_join": [
                    1830
                ],
                "_right_outer_join": [
                    1832
                ],
                "libjoin.full_outer_join": [
                    1833
                ],
                "_data": [
                    1840,
                    1841
                ],
                "lk.categories.equals": [
                    1846
                ],
                "rk.codes": [
                    1848,
                    1851
                ],
                "_recode_for_categories": [
                    1851
                ],
                "lk.codes": [
                    1853
                ],
                "lk._values_for_factorize": [
                    1861
                ],
                "rk._values_for_factorize": [
                    1862
                ],
                "klass": [
                    1874,
                    1867,
                    1882,
                    1878
                ],
                "libhashtable.Int64Factorizer": [
                    1874,
                    1867
                ],
                "libhashtable": [
                    1874,
                    1867,
                    1878
                ],
                "com.values_from_object": [
                    1875,
                    1868,
                    1869,
                    1876
                ],
                "issubclass": [
                    1870
                ],
                "lk.dtype.type": [
                    1870
                ],
                "np.timedelta64": [
                    1870,
                    1871
                ],
                "np.datetime64": [
                    1870,
                    1871
                ],
                "rk.dtype.type": [
                    1871
                ],
                "libhashtable.Factorizer": [
                    1878
                ],
                "rizer": [
                    1890,
                    1882,
                    1884,
                    1885,
                    1887
                ],
                "max": [
                    1882
                ],
                "rizer.factorize": [
                    1884,
                    1885
                ],
                "rizer.get_count": [
                    1887
                ],
                "uniques": [
                    1890,
                    1891,
                    1910,
                    1912,
                    1917
                ],
                "rizer.uniques.to_array": [
                    1890
                ],
                "rizer.uniques": [
                    1890
                ],
                "_sort_labels": [
                    1891
                ],
                "lmask": [
                    1901,
                    1894,
                    1895
                ],
                "lany": [
                    1899,
                    1900,
                    1895
                ],
                "lmask.any": [
                    1895
                ],
                "rmask": [
                    1896,
                    1897,
                    1903
                ],
                "rany": [
                    1897,
                    1899,
                    1902
                ],
                "rmask.any": [
                    1897
                ],
                "np.putmask": [
                    1901,
                    1903
                ],
                "np.ndarray": [
                    1910
                ],
                "values": [
                    1912
                ],
                "llength": [
                    1914,
                    1919
                ],
                "np.concatenate": [
                    1915
                ],
                "new_labels": [
                    1917,
                    1918,
                    1919
                ],
                "sorting.safe_sort": [
                    1917
                ],
                "sorting": [
                    1917
                ],
                "new_left": [
                    1921,
                    1919
                ],
                "new_right": [
                    1921,
                    1919
                ],
                "pred": [
                    1928,
                    1927
                ],
                "is_int64_overflow_possible": [
                    1927
                ],
                "nlev": [
                    1928,
                    1931,
                    1935,
                    1941,
                    1947,
                    1948,
                    1949
                ],
                "next": [
                    1928
                ],
                "filter": [
                    1928
                ],
                "stride": [
                    1931,
                    1932,
                    1933,
                    1937,
                    1938,
                    1939
                ],
                "np.prod": [
                    1931
                ],
                "np.errstate": [
                    1936
                ],
                "com.any_not_none": [
                    1961
                ],
                "obj": [
                    1965,
                    1966,
                    1967,
                    1968,
                    1971,
                    1975
                ],
                "DataFrame": [
                    1965
                ],
                "Series": [
                    1967
                ],
                "obj.name": [
                    1968
                ],
                "obj.to_frame": [
                    1971
                ],
                "TypeError": [
                    1973
                ],
                "to_rename": [
                    1993,
                    1986,
                    1987,
                    2012
                ],
                "left.intersection": [
                    1986
                ],
                "lsuffix": [
                    2016,
                    1990
                ],
                "rsuffix": [
                    2017,
                    1990
                ],
                "suffix": [
                    2012,
                    2013
                ],
                "lrenamer": [
                    2016,
                    2019
                ],
                "renamer": [
                    2016,
                    2017
                ],
                "rrenamer": [
                    2017,
                    2019
                ],
                "_transform_index": [
                    2019
                ]
            },
            "filtered_variables_in_file": {
                "op": [
                    258,
                    69,
                    268,
                    526,
                    84,
                    509
                ],
                "_MergeOperation": [
                    1395,
                    69,
                    1415
                ],
                "left": [
                    1417,
                    274,
                    660,
                    281,
                    926,
                    286,
                    928,
                    673,
                    676,
                    677,
                    682,
                    556,
                    558,
                    1986,
                    1988,
                    70,
                    966,
                    973,
                    977,
                    978,
                    597,
                    1365,
                    601,
                    985,
                    1372,
                    1373,
                    2019,
                    110,
                    1527,
                    1914,
                    1915,
                    510
                ],
                "right": [
                    132,
                    135,
                    1418,
                    139,
                    274,
                    660,
                    280,
                    286,
                    926,
                    929,
                    674,
                    1915,
                    679,
                    680,
                    682,
                    557,
                    559,
                    951,
                    955,
                    956,
                    960,
                    1986,
                    963,
                    1988,
                    71,
                    597,
                    1368,
                    601,
                    1376,
                    2019,
                    1002,
                    1528,
                    123,
                    124,
                    125,
                    511
                ],
                "how": [
                    72,
                    266,
                    560,
                    1425,
                    1299,
                    1301,
                    894,
                    1535
                ],
                "on": [
                    512,
                    261,
                    73,
                    1419,
                    279,
                    1529,
                    274,
                    563,
                    118,
                    119,
                    120,
                    121,
                    123,
                    124
                ],
                "left_on": [
                    513,
                    262,
                    74,
                    1420,
                    564,
                    1530
                ],
                "right_on": [
                    514,
                    263,
                    75,
                    1423,
                    565,
                    1531
                ],
                "left_index": [
                    515,
                    585,
                    76,
                    588,
                    1421,
                    571,
                    1532
                ],
                "right_index": [
                    516,
                    77,
                    590,
                    1422,
                    593,
                    572,
                    1533
                ],
                "sort": [
                    1889,
                    1284,
                    1786,
                    1945,
                    1290,
                    78,
                    1808,
                    1777,
                    1300,
                    1813,
                    1782,
                    1815,
                    569,
                    1754,
                    1789,
                    1758,
                    1951
                ],
                "suffixes": [
                    1536,
                    264,
                    520,
                    79,
                    1426,
                    568
                ],
                "copy": [
                    80,
                    1298,
                    567
                ],
                "indicator": [
                    81,
                    574
                ],
                "validate": [
                    1249,
                    1256,
                    1225,
                    620,
                    621,
                    82,
                    1242
                ],
                "op.get_result": [
                    84,
                    268,
                    526
                ],
                "Substitution": [
                    52
                ],
                "Appender": [
                    53
                ],
                "_merge_doc": [
                    88,
                    53
                ],
                "merge.__doc__": [
                    88
                ],
                "merge": [
                    88
                ],
                "pieces": [
                    162,
                    163,
                    106,
                    142,
                    156
                ],
                "by": [
                    517,
                    107,
                    108,
                    110,
                    1518,
                    149,
                    123,
                    124,
                    125
                ],
                "lby": [
                    129,
                    164,
                    110
                ],
                "left.groupby": [
                    110
                ],
                "check_duplicates": [
                    117
                ],
                "right.duplicated": [
                    123
                ],
                "right.drop_duplicates": [
                    124
                ],
                "rby": [
                    135,
                    131,
                    125,
                    127
                ],
                "right.groupby": [
                    125
                ],
                "key": [
                    152,
                    129,
                    135
                ],
                "lhs": [
                    129,
                    138,
                    145,
                    140
                ],
                "rhs": [
                    145,
                    132,
                    135
                ],
                "right.take": [
                    135
                ],
                "rby.indices": [
                    135
                ],
                "lcols": [
                    138,
                    139
                ],
                "lhs.columns.tolist": [
                    138
                ],
                "lhs.columns": [
                    138
                ],
                "cols": [
                    139,
                    140
                ],
                "r": [
                    139
                ],
                "right.columns": [
                    601,
                    139,
                    660,
                    597
                ],
                "merged": [
                    140,
                    141,
                    142,
                    145,
                    151,
                    152,
                    156
                ],
                "lhs.reindex": [
                    140
                ],
                "merged.index": [
                    141
                ],
                "pieces.append": [
                    156,
                    142
                ],
                "_merge_pieces": [
                    145
                ],
                "k": [
                    997,
                    998,
                    999,
                    1002,
                    1003,
                    980,
                    981,
                    149,
                    151,
                    152,
                    982,
                    986,
                    985
                ],
                "result": [
                    772,
                    647,
                    650,
                    652,
                    654,
                    783,
                    656,
                    273,
                    277,
                    789,
                    286,
                    287,
                    162,
                    163,
                    164,
                    802,
                    803,
                    804,
                    805,
                    808,
                    811,
                    686,
                    687,
                    814,
                    689,
                    690,
                    816,
                    818,
                    693,
                    1459,
                    1461,
                    1463,
                    697,
                    698,
                    727,
                    733,
                    747,
                    759
                ],
                "concat": [
                    162
                ],
                "result.reindex": [
                    163
                ],
                "columns": [
                    668,
                    163,
                    660,
                    663
                ],
                "_OrderedMerge": [
                    1525,
                    258,
                    1493
                ],
                "x": [
                    928,
                    929,
                    1825,
                    259,
                    1672,
                    1961,
                    1675,
                    274,
                    282,
                    2012,
                    2013,
                    2014
                ],
                "y": [
                    1825,
                    274,
                    282,
                    260
                ],
                "fill_method": [
                    1537,
                    265,
                    1414
                ],
                "left_by": [
                    518,
                    270,
                    1519,
                    272,
                    274
                ],
                "right_by": [
                    519,
                    270,
                    1520,
                    276,
                    278
                ],
                "_": [
                    1861,
                    1862,
                    273,
                    277,
                    1917
                ],
                "_groupby_and_merge": [
                    273,
                    277
                ],
                "_merger": [
                    274,
                    282,
                    286
                ],
                "_AsOfMerge": [
                    509
                ],
                "tolerance": [
                    522,
                    1708,
                    1709,
                    1743,
                    1521,
                    1748,
                    1686
                ],
                "allow_exact_matches": [
                    1522,
                    523
                ],
                "direction": [
                    1472,
                    1467,
                    524,
                    1523
                ],
                "_merge_type": [
                    537,
                    1396,
                    1494
                ],
                "validate_operand": [
                    556,
                    557
                ],
                "self.left": [
                    646,
                    1166,
                    1550,
                    1681,
                    1434,
                    926,
                    558,
                    1202,
                    1458,
                    827,
                    847,
                    849,
                    1627,
                    862,
                    868,
                    1004,
                    750,
                    1008,
                    625,
                    1015,
                    1012,
                    629,
                    761,
                    759,
                    1145,
                    1147
                ],
                "self": [
                    1030,
                    1544,
                    1547,
                    1550,
                    1553,
                    1557,
                    1558,
                    1560,
                    1561,
                    1563,
                    1568,
                    1569,
                    1570,
                    1571,
                    1572,
                    1574,
                    1577,
                    1578,
                    1581,
                    558,
                    559,
                    560,
                    561,
                    1583,
                    563,
                    564,
                    565,
                    1589,
                    567,
                    568,
                    569,
                    571,
                    572,
                    574,
                    576,
                    577,
                    578,
                    579,
                    1624,
                    1626,
                    1627,
                    604,
                    608,
                    609,
                    610,
                    611,
                    1634,
                    615,
                    1639,
                    1641,
                    621,
                    1645,
                    1647,
                    624,
                    625,
                    627,
                    1651,
                    629,
                    630,
                    1653,
                    1145,
                    1147,
                    1148,
                    1660,
                    1150,
                    1662,
                    1154,
                    643,
                    1156,
                    1157,
                    646,
                    647,
                    1158,
                    649,
                    650,
                    1159,
                    652,
                    1161,
                    654,
                    1162,
                    1166,
                    1681,
                    1172,
                    1173,
                    1174,
                    1175,
                    1684,
                    1686,
                    668,
                    1182,
                    1183,
                    1184,
                    1189,
                    1190,
                    1191,
                    1192,
                    1193,
                    1198,
                    1199,
                    1200,
                    689,
                    1201,
                    1202,
                    1712,
                    693,
                    1714,
                    1207,
                    1208,
                    1715,
                    1716,
                    1718,
                    1719,
                    1214,
                    1215,
                    1217,
                    1219,
                    1220,
                    1222,
                    1736,
                    1742,
                    722,
                    1747,
                    1748,
                    725,
                    726,
                    740,
                    750,
                    756,
                    759,
                    761,
                    763,
                    769,
                    772,
                    774,
                    776,
                    777,
                    778,
                    823,
                    827,
                    828,
                    830,
                    832,
                    834,
                    836,
                    839,
                    841,
                    844,
                    846,
                    847,
                    848,
                    849,
                    850,
                    856,
                    858,
                    859,
                    860,
                    861,
                    862,
                    868,
                    894,
                    1414,
                    1416,
                    1431,
                    1434,
                    1435,
                    926,
                    1441,
                    942,
                    943,
                    1455,
                    1458,
                    1459,
                    1461,
                    979,
                    980,
                    987,
                    991,
                    995,
                    996,
                    997,
                    1004,
                    1518,
                    1519,
                    1008,
                    1520,
                    1521,
                    1522,
                    1012,
                    1523,
                    1526,
                    1015,
                    1018
                ],
                "self.orig_left": [
                    725,
                    558,
                    1215
                ],
                "self.right": [
                    772,
                    774,
                    1166,
                    1553,
                    1684,
                    1434,
                    926,
                    1193,
                    559,
                    828,
                    850,
                    856,
                    859,
                    987,
                    861,
                    991,
                    995,
                    625,
                    629,
                    1018,
                    763,
                    1148,
                    1150
                ],
                "self.orig_right": [
                    1220,
                    726,
                    559
                ],
                "self.how": [
                    832,
                    834,
                    839,
                    560,
                    894,
                    823,
                    830
                ],
                "self.axis": [
                    561,
                    827,
                    828
                ],
                "axis": [
                    1424,
                    561,
                    1534
                ],
                "self.on": [
                    1154,
                    563,
                    1189,
                    1183
                ],
                "com.maybe_make_list": [
                    563,
                    564,
                    565
                ],
                "com": [
                    1961,
                    1868,
                    1869,
                    563,
                    564,
                    565,
                    1875,
                    1876
                ],
                "self.left_on": [
                    1154,
                    1157,
                    1544,
                    1162,
                    1172,
                    1182,
                    1184,
                    1189,
                    1190,
                    1191,
                    1193,
                    1577,
                    942,
                    943,
                    564,
                    1589,
                    1207,
                    1208,
                    722,
                    979,
                    980,
                    740
                ],
                "self.right_on": [
                    1154,
                    1157,
                    1159,
                    1547,
                    1173,
                    1182,
                    1184,
                    1189,
                    1578,
                    942,
                    943,
                    1198,
                    1199,
                    1200,
                    1202,
                    565,
                    1208,
                    722,
                    740,
                    996,
                    997
                ],
                "self.copy": [
                    1455,
                    643,
                    567
                ],
                "self.suffixes": [
                    568,
                    1435,
                    630
                ],
                "self.sort": [
                    832,
                    836,
                    841,
                    823,
                    569
                ],
                "self.left_index": [
                    1156,
                    1158,
                    839,
                    1544,
                    1550,
                    1201,
                    1681,
                    1714,
                    1626,
                    1174,
                    858,
                    571,
                    1214,
                    830
                ],
                "self.right_index": [
                    834,
                    1219,
                    1156,
                    1192,
                    1161,
                    1547,
                    846,
                    1553,
                    1714,
                    1684,
                    1175,
                    572,
                    830
                ],
                "self.indicator": [
                    576,
                    577,
                    578,
                    579,
                    649,
                    624,
                    574
                ],
                "self.indicator_name": [
                    577,
                    579,
                    689,
                    693,
                    668
                ],
                "is_bool": [
                    585,
                    1660,
                    590
                ],
                "left.columns.nlevels": [
                    601,
                    597
                ],
                "left.columns": [
                    601,
                    660,
                    597
                ],
                "right.columns.nlevels": [
                    601,
                    597
                ],
                "msg": [
                    1123,
                    1127,
                    1608,
                    1129,
                    1640,
                    1131,
                    1133,
                    1646,
                    1615,
                    1652,
                    1621,
                    598,
                    602,
                    1052,
                    1661,
                    1662,
                    1631
                ],
                "warnings.warn": [
                    1080,
                    602,
                    1069
                ],
                "warnings": [
                    1080,
                    602,
                    1069
                ],
                "self._validate_specification": [
                    604
                ],
                "self.left_join_keys": [
                    608,
                    769,
                    1217,
                    836,
                    1030,
                    776,
                    777,
                    1681,
                    1715,
                    1718,
                    823
                ],
                "self.right_join_keys": [
                    609,
                    1030,
                    1222,
                    841,
                    778,
                    1719,
                    756,
                    1684,
                    1716,
                    823
                ],
                "self.join_names": [
                    722,
                    610,
                    740,
                    1030
                ],
                "self._get_merge_keys": [
                    611
                ],
                "self._maybe_coerce_merge_keys": [
                    615
                ],
                "self._validate": [
                    621
                ],
                "self._indicator_pre_merge": [
                    625
                ],
                "join_index": [
                    641,
                    1431,
                    1817,
                    1818,
                    1453,
                    831,
                    835,
                    840,
                    1355,
                    1357,
                    1358,
                    1359,
                    848,
                    856,
                    857,
                    860,
                    868,
                    869,
                    871,
                    873,
                    874,
                    875,
                    627
                ],
                "left_indexer": [
                    1792,
                    776,
                    652,
                    1807,
                    786,
                    1813,
                    1431,
                    1815,
                    1817,
                    1818,
                    796,
                    1825,
                    1442,
                    1826,
                    1788,
                    1445,
                    1461,
                    831,
                    835,
                    840,
                    844,
                    851,
                    857,
                    864,
                    868,
                    871,
                    875,
                    749,
                    753,
                    627,
                    636
                ],
                "right_indexer": [
                    1792,
                    652,
                    1807,
                    1813,
                    1431,
                    792,
                    1818,
                    1821,
                    1825,
                    1826,
                    1443,
                    1446,
                    1461,
                    831,
                    835,
                    840,
                    844,
                    852,
                    856,
                    863,
                    869,
                    875,
                    749,
                    627,
                    1788,
                    637,
                    766
                ],
                "self._get_join_info": [
                    627,
                    1431
                ],
                "ldata": [
                    640,
                    1452,
                    629,
                    633,
                    1434,
                    1438
                ],
                "rdata": [
                    640,
                    1452,
                    629,
                    633,
                    1434,
                    1438
                ],
                "self.left._data": [
                    1434,
                    827,
                    629
                ],
                "self.right._data": [
                    1434,
                    828,
                    629
                ],
                "lsuf": [
                    633,
                    1435,
                    630,
                    1438
                ],
                "rsuf": [
                    633,
                    1435,
                    630,
                    1438
                ],
                "llabels": [
                    632,
                    641,
                    1437,
                    1453
                ],
                "rlabels": [
                    632,
                    641,
                    1437,
                    1453
                ],
                "_items_overlap_with_suffix": [
                    632,
                    1437
                ],
                "ldata.items": [
                    633,
                    1438
                ],
                "rdata.items": [
                    633,
                    1438
                ],
                "lindexers": [
                    640,
                    1452,
                    636,
                    1448
                ],
                "rindexers": [
                    640,
                    1449,
                    1452,
                    637
                ],
                "result_data": [
                    647,
                    1451,
                    1459,
                    639
                ],
                "concatenate_block_managers": [
                    1451,
                    639
                ],
                "llabels.append": [
                    641,
                    1453
                ],
                "typ": [
                    646,
                    647,
                    1458,
                    1459,
                    1146,
                    1147,
                    1149,
                    1150
                ],
                "self.left._constructor": [
                    1458,
                    646
                ],
                "__finalize__": [
                    1459,
                    647
                ],
                "self._merge_type": [
                    1459,
                    647
                ],
                "self._indicator_post_merge": [
                    650
                ],
                "self._maybe_add_join_keys": [
                    652,
                    1461
                ],
                "self._maybe_restore_index_levels": [
                    654
                ],
                "left.columns.union": [
                    660
                ],
                "i": [
                    769,
                    1927,
                    776,
                    777,
                    778,
                    1935,
                    1937,
                    1938,
                    1939,
                    662,
                    663,
                    666,
                    818,
                    1597,
                    1611,
                    1618,
                    741,
                    1765,
                    1766,
                    1770,
                    1772,
                    1774,
                    756
                ],
                "left.copy": [
                    673
                ],
                "right.copy": [
                    674
                ],
                "astype": [
                    677,
                    680,
                    1932,
                    1933,
                    1147,
                    1150
                ],
                "fillna": [
                    686,
                    687
                ],
                "Categorical": [
                    689
                ],
                "cat.rename_categories": [
                    693
                ],
                "cat": [
                    693
                ],
                "result.drop": [
                    697
                ],
                "names_to_restore": [
                    720,
                    730,
                    732,
                    733
                ],
                "name": [
                    1145,
                    772,
                    1029,
                    774,
                    1147,
                    783,
                    789,
                    802,
                    803,
                    804,
                    806,
                    809,
                    816,
                    818,
                    1467,
                    1468,
                    1472,
                    1473,
                    721,
                    727,
                    730,
                    741,
                    747,
                    750,
                    759,
                    761,
                    763,
                    1148,
                    1150
                ],
                "left_key": [
                    721,
                    1786,
                    725,
                    1789
                ],
                "right_key": [
                    721,
                    1786,
                    1789,
                    726
                ],
                "self.orig_left._is_level_reference": [
                    725
                ],
                "self.orig_right._is_level_reference": [
                    726
                ],
                "result.index.names": [
                    811,
                    727
                ],
                "result.index": [
                    805,
                    808,
                    811,
                    816,
                    727
                ],
                "names_to_restore.append": [
                    730
                ],
                "result.set_index": [
                    733,
                    814
                ],
                "left_has_missing": [
                    752,
                    737,
                    755,
                    753
                ],
                "right_has_missing": [
                    768,
                    738,
                    765,
                    766
                ],
                "keys": [
                    740,
                    741
                ],
                "lname": [
                    1955,
                    741,
                    742,
                    1957
                ],
                "rname": [
                    1955,
                    741,
                    742,
                    1957
                ],
                "_should_fill": [
                    742
                ],
                "take_left": [
                    769,
                    745,
                    777,
                    780,
                    782,
                    785,
                    786,
                    761
                ],
                "take_right": [
                    774,
                    745,
                    778,
                    780,
                    756,
                    788,
                    791,
                    792
                ],
                "is_dtype_equal": [
                    1598,
                    1049,
                    771,
                    758
                ],
                "dtype": [
                    1487,
                    772,
                    1485,
                    759
                ],
                "_values": [
                    761,
                    789,
                    774,
                    783
                ],
                "is_array_like": [
                    776,
                    929,
                    928
                ],
                "lvals": [
                    800,
                    786,
                    783
                ],
                "lfill": [
                    785,
                    786
                ],
                "na_value_for_dtype": [
                    785,
                    902,
                    791
                ],
                "take_left.dtype": [
                    785
                ],
                "algos.take_1d": [
                    792,
                    786
                ],
                "algos": [
                    792,
                    786,
                    1386
                ],
                "rvals": [
                    792,
                    800,
                    789,
                    798
                ],
                "rfill": [
                    792,
                    791
                ],
                "take_right.dtype": [
                    791
                ],
                "mask": [
                    800,
                    900,
                    901,
                    1766,
                    1767,
                    1774,
                    796,
                    797
                ],
                "mask.all": [
                    797
                ],
                "key_col": [
                    800,
                    803,
                    806,
                    810,
                    816,
                    818,
                    798
                ],
                "where": [
                    800
                ],
                "Index": [
                    800,
                    1698,
                    903,
                    871,
                    816,
                    1912,
                    1692
                ],
                "result._is_label_reference": [
                    802
                ],
                "result._is_level_reference": [
                    804
                ],
                "MultiIndex": [
                    1217,
                    1346,
                    805,
                    1222,
                    1349,
                    1798,
                    1004,
                    1550,
                    1553,
                    987,
                    894
                ],
                "key_col.name": [
                    806
                ],
                "idx_list": [
                    814,
                    807
                ],
                "level_name": [
                    808,
                    809,
                    811
                ],
                "result.index.get_level_values": [
                    808
                ],
                "result.insert": [
                    818
                ],
                "_get_join_indexers": [
                    822
                ],
                "left_ax": [
                    836,
                    841,
                    1815,
                    1817,
                    827,
                    1821,
                    831
                ],
                "self.left._data.axes": [
                    827
                ],
                "right_ax": [
                    832,
                    836,
                    1798,
                    841,
                    1808,
                    1813,
                    828
                ],
                "self.right._data.axes": [
                    828
                ],
                "left_ax.join": [
                    831
                ],
                "_left_join_on_index": [
                    840,
                    835
                ],
                "self._get_join_indexers": [
                    844
                ],
                "self._create_join_index": [
                    848,
                    860
                ],
                "self.left.index": [
                    868,
                    1004,
                    1550,
                    1008,
                    849,
                    1202,
                    1681,
                    1012,
                    1627,
                    862
                ],
                "self.right.index": [
                    995,
                    1193,
                    1553,
                    850,
                    1684,
                    856,
                    987,
                    861,
                    991
                ],
                "self.right.index.take": [
                    856
                ],
                "np.array": [
                    857,
                    869,
                    1677
                ],
                "np": [
                    869,
                    901,
                    871,
                    1931,
                    1068,
                    1677,
                    1870,
                    1871,
                    1901,
                    1903,
                    1936,
                    1910,
                    1079,
                    857,
                    1915,
                    1759
                ],
                "self.left.index.take": [
                    868
                ],
                "np.arange": [
                    871
                ],
                "join_index.astype": [
                    874
                ],
                "other_index": [
                    894
                ],
                "indexer": [
                    1377,
                    900,
                    904,
                    1386,
                    1374
                ],
                "np.any": [
                    901
                ],
                "fill_value": [
                    902,
                    903
                ],
                "index.dtype": [
                    902
                ],
                "index": [
                    1346,
                    1347,
                    1762,
                    1349,
                    902,
                    903,
                    904,
                    1766,
                    1786,
                    1757,
                    1759
                ],
                "index.append": [
                    903
                ],
                "index.take": [
                    904
                ],
                "left_keys": [
                    1287,
                    973,
                    1005,
                    945,
                    977,
                    1012,
                    982,
                    920,
                    985,
                    1020,
                    1279
                ],
                "right_keys": [
                    960,
                    1280,
                    963,
                    995,
                    999,
                    1287,
                    1002,
                    971,
                    1020,
                    947,
                    951,
                    921,
                    955,
                    988
                ],
                "join_names": [
                    1664,
                    986,
                    1000,
                    1003,
                    1020,
                    974,
                    1359,
                    1390,
                    1392,
                    978,
                    948,
                    1594,
                    983,
                    952,
                    922,
                    956
                ],
                "right_drop": [
                    1017,
                    1018,
                    923,
                    967
                ],
                "left_drop": [
                    969,
                    924,
                    1014,
                    1015
                ],
                "is_lkey": [
                    928,
                    981,
                    944
                ],
                "is_rkey": [
                    929,
                    946,
                    958,
                    998
                ],
                "_any": [
                    979,
                    996,
                    942
                ],
                "lk": [
                    1029,
                    1032,
                    1035,
                    1037,
                    1043,
                    1049,
                    1055,
                    1062,
                    1063,
                    1067,
                    1068,
                    943,
                    944,
                    945,
                    1839,
                    1840,
                    1844,
                    1078,
                    1079,
                    1846,
                    1851,
                    1597,
                    1598,
                    1599,
                    1853,
                    1857,
                    1090,
                    1859,
                    964,
                    1861,
                    1864,
                    969,
                    1611,
                    972,
                    973,
                    974,
                    1100,
                    1868,
                    1870,
                    1106,
                    1618,
                    1108,
                    1875,
                    1879,
                    1882,
                    1884,
                    1126,
                    1128,
                    1130,
                    1132,
                    1146
                ],
                "rk": [
                    1029,
                    1032,
                    1036,
                    1038,
                    1043,
                    1049,
                    1055,
                    1062,
                    1063,
                    1067,
                    1068,
                    943,
                    1839,
                    1841,
                    946,
                    947,
                    1844,
                    950,
                    951,
                    952,
                    1078,
                    1079,
                    1846,
                    1848,
                    1597,
                    958,
                    959,
                    960,
                    1598,
                    1599,
                    1091,
                    964,
                    1854,
                    1858,
                    967,
                    1859,
                    1862,
                    1864,
                    971,
                    1099,
                    1611,
                    1869,
                    1871,
                    1105,
                    1618,
                    1876,
                    1109,
                    1880,
                    1882,
                    1885,
                    1851,
                    1126,
                    1128,
                    1130,
                    1132,
                    1149
                ],
                "left_keys.append": [
                    973,
                    945,
                    977,
                    982,
                    985
                ],
                "right_keys.append": [
                    960,
                    963,
                    999,
                    1002,
                    971,
                    947,
                    951,
                    955
                ],
                "join_names.append": [
                    1000,
                    1003,
                    974,
                    978,
                    948,
                    983,
                    952,
                    986,
                    956
                ],
                "right._get_label_or_level_values": [
                    960,
                    1002,
                    951
                ],
                "right.index": [
                    955,
                    956,
                    963
                ],
                "right.index.name": [
                    956
                ],
                "right_drop.append": [
                    967
                ],
                "left_drop.append": [
                    969
                ],
                "left._get_label_or_level_values": [
                    985,
                    973
                ],
                "left.index": [
                    977,
                    978
                ],
                "left.index.name": [
                    978
                ],
                "lev._values.take": [
                    989,
                    1006
                ],
                "lev._values": [
                    989,
                    1006
                ],
                "lev": [
                    1007,
                    989,
                    990,
                    1006
                ],
                "lev_codes": [
                    1007,
                    989,
                    990,
                    1006
                ],
                "self.right.index.levels": [
                    991
                ],
                "self.right.index.codes": [
                    991
                ],
                "self.right.index._values": [
                    995
                ],
                "self.left.index.levels": [
                    1008
                ],
                "self.left.index.codes": [
                    1008
                ],
                "self.left.index.values": [
                    1681,
                    1012
                ],
                "self.left._drop_labels_or_levels": [
                    1015
                ],
                "self.right._drop_labels_or_levels": [
                    1018
                ],
                "lk_is_cat": [
                    1146,
                    1042,
                    1035,
                    1046
                ],
                "is_categorical_dtype": [
                    1035,
                    1036,
                    1844,
                    1599
                ],
                "rk_is_cat": [
                    1042,
                    1036,
                    1149,
                    1046
                ],
                "lk_is_object": [
                    1105,
                    1099,
                    1037,
                    1135
                ],
                "is_object_dtype": [
                    1037,
                    1038
                ],
                "rk_is_object": [
                    1106,
                    1100,
                    1038,
                    1135
                ],
                "lk.is_dtype_equal": [
                    1043,
                    1844
                ],
                "lk.dtype": [
                    1857,
                    1859,
                    1063,
                    1611,
                    1599,
                    1870,
                    1618,
                    1079,
                    1049,
                    1598,
                    1055
                ],
                "rk.dtype": [
                    1858,
                    1859,
                    1063,
                    1611,
                    1068,
                    1599,
                    1871,
                    1618,
                    1049,
                    1598,
                    1055
                ],
                "is_numeric_dtype": [
                    1105,
                    1106,
                    1062
                ],
                "lk.dtype.kind": [
                    1063
                ],
                "rk.dtype.kind": [
                    1063
                ],
                "is_integer_dtype": [
                    1864,
                    1067,
                    1485,
                    1078
                ],
                "is_float_dtype": [
                    1650,
                    1067,
                    1078,
                    1487
                ],
                "lk.astype": [
                    1068
                ],
                "np.isnan": [
                    1068,
                    1079
                ],
                "rk.astype": [
                    1079
                ],
                "lib.infer_dtype": [
                    1090,
                    1108,
                    1109
                ],
                "lib": [
                    1090,
                    1108,
                    1109
                ],
                "is_bool_dtype": [
                    1099,
                    1100
                ],
                "inferred_left": [
                    1121,
                    1114,
                    1108,
                    1119
                ],
                "inferred_right": [
                    1121,
                    1114,
                    1109,
                    1119
                ],
                "bool_types": [
                    1114,
                    1110
                ],
                "string_types": [
                    1121,
                    1119,
                    1111
                ],
                "is_datetimelike": [
                    1128,
                    1126
                ],
                "is_datetime64tz_dtype": [
                    1130,
                    1132,
                    1638,
                    1839
                ],
                "self.left.columns": [
                    1145,
                    1166
                ],
                "lk.categories.dtype": [
                    1146
                ],
                "lk.categories": [
                    1146,
                    1851,
                    1846
                ],
                "self.left.assign": [
                    1147
                ],
                "self.right.columns": [
                    1148,
                    1166
                ],
                "rk.categories.dtype": [
                    1149
                ],
                "rk.categories": [
                    1851,
                    1149,
                    1846
                ],
                "self.right.assign": [
                    1150
                ],
                "MergeError": [
                    1160,
                    1545,
                    1163,
                    1548,
                    1551,
                    1168,
                    1554,
                    1559,
                    1562,
                    1179,
                    1564,
                    1185,
                    1575,
                    1582,
                    1227,
                    1232,
                    1237,
                    1621,
                    1244,
                    1251,
                    1640,
                    1642,
                    1646,
                    1648,
                    1652,
                    1654,
                    1657,
                    1662
                ],
                "common_cols": [
                    1166,
                    1167,
                    1178,
                    1180,
                    1182
                ],
                "self.left.columns.intersection": [
                    1166
                ],
                "common_cols.is_unique": [
                    1178
                ],
                "n": [
                    1200,
                    1207,
                    1198,
                    1191
                ],
                "self.right.index.nlevels": [
                    1193
                ],
                "self.left.index.nlevels": [
                    1202
                ],
                "left_unique": [
                    1217,
                    1226,
                    1231,
                    1243,
                    1215
                ],
                "self.orig_left.index.is_unique": [
                    1215
                ],
                "self.orig_left.index": [
                    1215
                ],
                "is_unique": [
                    1217,
                    1222
                ],
                "MultiIndex.from_arrays": [
                    1217,
                    1349,
                    1222
                ],
                "right_unique": [
                    1250,
                    1220,
                    1222,
                    1226,
                    1236
                ],
                "self.orig_right.index.is_unique": [
                    1220
                ],
                "self.orig_right.index": [
                    1220
                ],
                "fkeys": [
                    1284,
                    1287,
                    1295,
                    1780,
                    1754,
                    1757
                ],
                "partial": [
                    2016,
                    2017,
                    1754,
                    1284
                ],
                "_factorize_keys": [
                    1945,
                    1754,
                    1284,
                    1786
                ],
                "llab": [
                    1891,
                    1894,
                    1287,
                    1290,
                    1932,
                    1901,
                    1906,
                    1938,
                    1947,
                    1884,
                    1951
                ],
                "rlab": [
                    1891,
                    1287,
                    1896,
                    1290,
                    1933,
                    1903,
                    1906,
                    1939,
                    1948,
                    1885,
                    1951
                ],
                "shape": [
                    1287,
                    1927,
                    1928,
                    1290,
                    1770,
                    1772,
                    1931,
                    1774,
                    1949,
                    1777,
                    1937,
                    1941,
                    1757,
                    1951
                ],
                "lkey": [
                    1290,
                    1932,
                    1295,
                    1777,
                    1938,
                    1780,
                    1782,
                    1303,
                    1942,
                    1945,
                    1947
                ],
                "rkey": [
                    1290,
                    1933,
                    1295,
                    1777,
                    1939,
                    1780,
                    1782,
                    1303,
                    1942,
                    1945,
                    1948
                ],
                "_get_join_keys": [
                    1777,
                    1290,
                    1951
                ],
                "count": [
                    1901,
                    1949,
                    1295,
                    1903,
                    1904,
                    1906,
                    1780,
                    1782,
                    1303,
                    1945,
                    1786,
                    1789,
                    1887
                ],
                "kwargs": [
                    1298,
                    1300,
                    1303
                ],
                "copy.copy": [
                    1298
                ],
                "join_func": [
                    1301,
                    1303
                ],
                "_join_functions": [
                    1829,
                    1301
                ],
                "index.values": [
                    1349
                ],
                "index.name": [
                    1349
                ],
                "_convert_to_mulitindex": [
                    1355
                ],
                "join_levels": [
                    1392,
                    1388,
                    1357
                ],
                "join_index.levels": [
                    1357
                ],
                "join_codes": [
                    1392,
                    1389,
                    1358
                ],
                "join_index.codes": [
                    1358
                ],
                "join_index.names": [
                    1359
                ],
                "lindexer": [
                    1364,
                    1365,
                    1374
                ],
                "left.size": [
                    1365
                ],
                "rindexer": [
                    1368,
                    1377,
                    1367
                ],
                "right.size": [
                    1368
                ],
                "dropped_level_name": [
                    1380,
                    1371,
                    1372,
                    1390
                ],
                "dropped_level_names": [
                    1371
                ],
                "left.names": [
                    1372
                ],
                "idx": [
                    1376,
                    1380,
                    1382,
                    1385,
                    1373
                ],
                "name_idx": [
                    1385,
                    1380,
                    1382
                ],
                "idx.names.index": [
                    1380
                ],
                "idx.names": [
                    1380
                ],
                "restore_levels": [
                    1388,
                    1382
                ],
                "idx.levels": [
                    1382
                ],
                "codes": [
                    1385,
                    1386
                ],
                "idx.codes": [
                    1385
                ],
                "restore_codes": [
                    1386,
                    1389
                ],
                "algos.take_nd": [
                    1386
                ],
                "self.fill_method": [
                    1441,
                    1414
                ],
                "_MergeOperation.__init__": [
                    1415
                ],
                "left_join_indexer": [
                    1448,
                    1442,
                    1445
                ],
                "libjoin.ffill_indexer": [
                    1442,
                    1443
                ],
                "libjoin": [
                    1473,
                    1442,
                    1443,
                    1788,
                    1825,
                    1830,
                    1831,
                    1833,
                    1782,
                    1468
                ],
                "right_join_indexer": [
                    1449,
                    1443,
                    1446
                ],
                "_type_casters": [
                    1731,
                    1476
                ],
                "ensure_int64": [
                    1477,
                    1853,
                    1868,
                    1869,
                    1918,
                    1875,
                    1876,
                    1789,
                    1854
                ],
                "ensure_float64": [
                    1478
                ],
                "ensure_object": [
                    1880,
                    1879,
                    1479
                ],
                "self.by": [
                    1560,
                    1557,
                    1518
                ],
                "self.left_by": [
                    1568,
                    1569,
                    1570,
                    1574,
                    1577,
                    1519,
                    1712,
                    1558,
                    1560,
                    1561,
                    1563
                ],
                "self.right_by": [
                    1571,
                    1572,
                    1574,
                    1578,
                    1520,
                    1558,
                    1560,
                    1561,
                    1563
                ],
                "self.tolerance": [
                    1634,
                    1639,
                    1641,
                    1645,
                    1647,
                    1521,
                    1651,
                    1653,
                    1686,
                    1624
                ],
                "self.allow_exact_matches": [
                    1742,
                    1522,
                    1748,
                    1660,
                    1662
                ],
                "self.direction": [
                    1736,
                    1581,
                    1583,
                    1523,
                    1747
                ],
                "_OrderedMerge.__init__": [
                    1525
                ],
                "_validate_specification": [
                    1541
                ],
                "is_list_like": [
                    1569,
                    1571
                ],
                "left_join_keys": [
                    1664,
                    1594,
                    1629,
                    1597
                ],
                "right_join_keys": [
                    1664,
                    1594,
                    1597
                ],
                "_get_merge_keys": [
                    1594
                ],
                "lt": [
                    1634,
                    1638,
                    1644,
                    1650,
                    1627,
                    1629
                ],
                "lt.dtype": [
                    1634
                ],
                "is_datetime64_dtype": [
                    1638
                ],
                "Timedelta": [
                    1641,
                    1639
                ],
                "is_int64_dtype": [
                    1644
                ],
                "is_integer": [
                    1645
                ],
                "is_number": [
                    1651
                ],
                "msg.format": [
                    1662
                ],
                "xs": [
                    1671,
                    1672,
                    1674,
                    1675,
                    1677
                ],
                "is_extension_array_dtype": [
                    1672,
                    1857,
                    1858
                ],
                "x._ndarray_values": [
                    1672
                ],
                "labels": [
                    1674,
                    1915,
                    1676,
                    1917
                ],
                "string.ascii_lowercase": [
                    1674
                ],
                "string": [
                    1674
                ],
                "dtypes": [
                    1675,
                    1676
                ],
                "x.dtype": [
                    1675
                ],
                "labeled_dtypes": [
                    1676,
                    1677
                ],
                "left_values": [
                    1705,
                    1706,
                    1738,
                    1680,
                    1748,
                    1692,
                    1693
                ],
                "right_values": [
                    1698,
                    1699,
                    1707,
                    1739,
                    1683,
                    1748
                ],
                "self.right.index.values": [
                    1684
                ],
                "msg_sorted": [
                    1696,
                    1689,
                    1702
                ],
                "msg_missings": [
                    1690,
                    1700,
                    1694
                ],
                "is_monotonic": [
                    1698,
                    1692
                ],
                "isnull": [
                    1699,
                    1693
                ],
                "msg_missings.format": [
                    1700,
                    1694
                ],
                "msg_sorted.format": [
                    1696,
                    1702
                ],
                "needs_i8_conversion": [
                    1705
                ],
                "left_values.view": [
                    1706
                ],
                "right_values.view": [
                    1707
                ],
                "tolerance.value": [
                    1709
                ],
                "left_by_values": [
                    1730,
                    1732,
                    1740,
                    1715,
                    1718,
                    1722,
                    1723,
                    1726
                ],
                "right_by_values": [
                    1733,
                    1741,
                    1716,
                    1719,
                    1724,
                    1727
                ],
                "flip": [
                    1726,
                    1727
                ],
                "by_type": [
                    1730,
                    1731
                ],
                "_get_cython_type_upcast": [
                    1730
                ],
                "left_by_values.dtype": [
                    1730
                ],
                "by_type_caster": [
                    1731,
                    1732,
                    1733
                ],
                "func": [
                    1736,
                    1737,
                    1747,
                    1748
                ],
                "_asof_by_function": [
                    1736
                ],
                "_asof_function": [
                    1747
                ],
                "rcodes": [
                    1762,
                    1774,
                    1777,
                    1757,
                    1759
                ],
                "lcodes": [
                    1777,
                    1770,
                    1757
                ],
                "index.levels": [
                    1757
                ],
                "join_keys": [
                    1796,
                    1765,
                    1798,
                    1770,
                    1808,
                    1811,
                    1757
                ],
                "np.take": [
                    1759
                ],
                "index.codes": [
                    1762,
                    1766,
                    1759
                ],
                "i8copy": [
                    1761,
                    1762
                ],
                "a.astype": [
                    1761
                ],
                "a": [
                    1761,
                    1770,
                    1771
                ],
                "mask.any": [
                    1767
                ],
                "a.size": [
                    1771
                ],
                "libjoin.left_outer_join": [
                    1825,
                    1788,
                    1782,
                    1831
                ],
                "join_key": [
                    1786
                ],
                "right_ax.nlevels": [
                    1798
                ],
                "_get_multiindex_indexer": [
                    1807
                ],
                "jkey": [
                    1811,
                    1813
                ],
                "_get_single_indexer": [
                    1813
                ],
                "left_ax.take": [
                    1817
                ],
                "max_groups": [
                    1825
                ],
                "libjoin.inner_join": [
                    1830
                ],
                "_right_outer_join": [
                    1832
                ],
                "libjoin.full_outer_join": [
                    1833
                ],
                "_data": [
                    1840,
                    1841
                ],
                "lk.categories.equals": [
                    1846
                ],
                "rk.codes": [
                    1848,
                    1851
                ],
                "_recode_for_categories": [
                    1851
                ],
                "lk.codes": [
                    1853
                ],
                "lk._values_for_factorize": [
                    1861
                ],
                "rk._values_for_factorize": [
                    1862
                ],
                "klass": [
                    1874,
                    1867,
                    1882,
                    1878
                ],
                "libhashtable.Int64Factorizer": [
                    1874,
                    1867
                ],
                "libhashtable": [
                    1874,
                    1867,
                    1878
                ],
                "com.values_from_object": [
                    1875,
                    1868,
                    1869,
                    1876
                ],
                "lk.dtype.type": [
                    1870
                ],
                "np.timedelta64": [
                    1870,
                    1871
                ],
                "np.datetime64": [
                    1870,
                    1871
                ],
                "rk.dtype.type": [
                    1871
                ],
                "libhashtable.Factorizer": [
                    1878
                ],
                "rizer": [
                    1890,
                    1882,
                    1884,
                    1885,
                    1887
                ],
                "rizer.factorize": [
                    1884,
                    1885
                ],
                "rizer.get_count": [
                    1887
                ],
                "uniques": [
                    1890,
                    1891,
                    1910,
                    1912,
                    1917
                ],
                "rizer.uniques.to_array": [
                    1890
                ],
                "rizer.uniques": [
                    1890
                ],
                "_sort_labels": [
                    1891
                ],
                "lmask": [
                    1901,
                    1894,
                    1895
                ],
                "lany": [
                    1899,
                    1900,
                    1895
                ],
                "lmask.any": [
                    1895
                ],
                "rmask": [
                    1896,
                    1897,
                    1903
                ],
                "rany": [
                    1897,
                    1899,
                    1902
                ],
                "rmask.any": [
                    1897
                ],
                "np.putmask": [
                    1901,
                    1903
                ],
                "np.ndarray": [
                    1910
                ],
                "values": [
                    1912
                ],
                "llength": [
                    1914,
                    1919
                ],
                "np.concatenate": [
                    1915
                ],
                "new_labels": [
                    1917,
                    1918,
                    1919
                ],
                "sorting.safe_sort": [
                    1917
                ],
                "sorting": [
                    1917
                ],
                "new_left": [
                    1921,
                    1919
                ],
                "new_right": [
                    1921,
                    1919
                ],
                "pred": [
                    1928,
                    1927
                ],
                "is_int64_overflow_possible": [
                    1927
                ],
                "nlev": [
                    1928,
                    1931,
                    1935,
                    1941,
                    1947,
                    1948,
                    1949
                ],
                "stride": [
                    1931,
                    1932,
                    1933,
                    1937,
                    1938,
                    1939
                ],
                "np.prod": [
                    1931
                ],
                "np.errstate": [
                    1936
                ],
                "com.any_not_none": [
                    1961
                ],
                "obj": [
                    1965,
                    1966,
                    1967,
                    1968,
                    1971,
                    1975
                ],
                "DataFrame": [
                    1965
                ],
                "Series": [
                    1967
                ],
                "obj.name": [
                    1968
                ],
                "obj.to_frame": [
                    1971
                ],
                "to_rename": [
                    1993,
                    1986,
                    1987,
                    2012
                ],
                "left.intersection": [
                    1986
                ],
                "lsuffix": [
                    2016,
                    1990
                ],
                "rsuffix": [
                    2017,
                    1990
                ],
                "suffix": [
                    2012,
                    2013
                ],
                "lrenamer": [
                    2016,
                    2019
                ],
                "renamer": [
                    2016,
                    2017
                ],
                "rrenamer": [
                    2017,
                    2019
                ],
                "_transform_index": [
                    2019
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_157/pandas/tests/reshape/merge/test_merge_asof.py",
                "test_function": "test_timedelta_tolerance_nearest",
                "test_function_code": "    def test_timedelta_tolerance_nearest(self):\n        # GH 27642\n\n        left = pd.DataFrame(\n            list(zip([0, 5, 10, 15, 20, 25], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"left\"],\n        )\n\n        left[\"time\"] = pd.to_timedelta(left[\"time\"], \"ms\")\n\n        right = pd.DataFrame(\n            list(zip([0, 3, 9, 12, 15, 18], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"right\"],\n        )\n\n        right[\"time\"] = pd.to_timedelta(right[\"time\"], \"ms\")\n\n        expected = pd.DataFrame(\n            list(\n                zip(\n                    [0, 5, 10, 15, 20, 25],\n                    [0, 1, 2, 3, 4, 5],\n                    [0, np.nan, 2, 4, np.nan, np.nan],\n                )\n            ),\n            columns=[\"time\", \"left\", \"right\"],\n        )\n\n        expected[\"time\"] = pd.to_timedelta(expected[\"time\"], \"ms\")\n\n        result = pd.merge_asof(\n            left, right, on=\"time\", tolerance=Timedelta(\"1ms\"), direction=\"nearest\"\n        )\n\n        assert_frame_equal(result, expected)",
                "test_error": "pandas.errors.MergeError: key must be integer, timestamp or float",
                "full_test_error": "self = <pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge object at 0x7f6e4090edc0>\n\n    def test_timedelta_tolerance_nearest(self):\n        # GH 27642\n    \n        left = pd.DataFrame(\n            list(zip([0, 5, 10, 15, 20, 25], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"left\"],\n        )\n    \n        left[\"time\"] = pd.to_timedelta(left[\"time\"], \"ms\")\n    \n        right = pd.DataFrame(\n            list(zip([0, 3, 9, 12, 15, 18], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"right\"],\n        )\n    \n        right[\"time\"] = pd.to_timedelta(right[\"time\"], \"ms\")\n    \n        expected = pd.DataFrame(\n            list(\n                zip(\n                    [0, 5, 10, 15, 20, 25],\n                    [0, 1, 2, 3, 4, 5],\n                    [0, np.nan, 2, 4, np.nan, np.nan],\n                )\n            ),\n            columns=[\"time\", \"left\", \"right\"],\n        )\n    \n        expected[\"time\"] = pd.to_timedelta(expected[\"time\"], \"ms\")\n    \n>       result = pd.merge_asof(\n            left, right, on=\"time\", tolerance=Timedelta(\"1ms\"), direction=\"nearest\"\n        )\n\npandas/tests/reshape/merge/test_merge_asof.py:1291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/merge.py:509: in merge_asof\n    op = _AsOfMerge(\npandas/core/reshape/merge.py:1525: in __init__\n    _OrderedMerge.__init__(\npandas/core/reshape/merge.py:1415: in __init__\n    _MergeOperation.__init__(\npandas/core/reshape/merge.py:611: in __init__\n    ) = self._get_merge_keys()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.reshape.merge._AsOfMerge object at 0x7f6e405c3d00>\n\n    def _get_merge_keys(self):\n    \n        # note this function has side effects\n        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n        # validate index types are the same\n        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n            if not is_dtype_equal(lk.dtype, rk.dtype):\n                if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                    # The generic error message is confusing for categoricals.\n                    #\n                    # In this function, the join keys include both the original\n                    # ones of the merge_asof() call, and also the keys passed\n                    # to its by= argument. Unordered but equal categories\n                    # are not supported for the former, but will fail\n                    # later with a ValueError, so we don't *need* to check\n                    # for them here.\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, both sides category, but not equal ones\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                else:\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, must be the same type\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                raise MergeError(msg)\n    \n        # validate tolerance; must be a Timedelta if we have a DTI\n        if self.tolerance is not None:\n    \n            if self.left_index:\n                lt = self.left.index\n            else:\n                lt = left_join_keys[-1]\n    \n            msg = (\n                \"incompatible tolerance {tolerance}, must be compat \"\n                \"with type {lkdtype}\".format(\n                    tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n                )\n            )\n    \n            if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n                if not isinstance(self.tolerance, Timedelta):\n                    raise MergeError(msg)\n                if self.tolerance < Timedelta(0):\n                    raise MergeError(\"tolerance must be positive\")\n    \n            elif is_int64_dtype(lt):\n                if not is_integer(self.tolerance):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n    \n            elif is_float_dtype(lt):\n                if not is_number(self.tolerance):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n    \n            else:\n>               raise MergeError(\"key must be integer, timestamp or float\")\nE               pandas.errors.MergeError: key must be integer, timestamp or float\n\npandas/core/reshape/merge.py:1657: MergeError",
                "traceback": "pandas/core/reshape/merge.py:509: in merge_asof\n    op = _AsOfMerge(\npandas/core/reshape/merge.py:1525: in __init__\n    _OrderedMerge.__init__(\npandas/core/reshape/merge.py:1415: in __init__\n    _MergeOperation.__init__(\npandas/core/reshape/merge.py:611: in __init__\n    ) = self._get_merge_keys()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.reshape.merge._AsOfMerge object at 0x7f6e405c3d00>\n\n    def _get_merge_keys(self):\n    \n        # note this function has side effects\n        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n        # validate index types are the same\n        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n            if not is_dtype_equal(lk.dtype, rk.dtype):\n                if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                    # The generic error message is confusing for categoricals.\n                    #\n                    # In this function, the join keys include both the original\n                    # ones of the merge_asof() call, and also the keys passed\n                    # to its by= argument. Unordered but equal categories\n                    # are not supported for the former, but will fail\n                    # later with a ValueError, so we don't *need* to check\n                    # for them here.\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, both sides category, but not equal ones\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                else:\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, must be the same type\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                raise MergeError(msg)\n    \n        # validate tolerance; must be a Timedelta if we have a DTI\n        if self.tolerance is not None:\n    \n            if self.left_index:\n                lt = self.left.index\n            else:\n                lt = left_join_keys[-1]\n    \n            msg = (\n                \"incompatible tolerance {tolerance}, must be compat \"\n                \"with type {lkdtype}\".format(\n                    tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n                )\n            )\n    \n            if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n                if not isinstance(self.tolerance, Timedelta):\n                    raise MergeError(msg)\n                if self.tolerance < Timedelta(0):\n                    raise MergeError(\"tolerance must be positive\")\n    \n            elif is_int64_dtype(lt):\n                if not is_integer(self.tolerance):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n    \n            elif is_float_dtype(lt):\n                if not is_number(self.tolerance):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n    \n            else:\n>               raise MergeError(\"key must be integer, timestamp or float\")\nE               pandas.errors.MergeError: key must be integer, timestamp or float\n\npandas/core/reshape/merge.py:1657: MergeError",
                "test_function_decorators": []
            }
        ]
    }
}