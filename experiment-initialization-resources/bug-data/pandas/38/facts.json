{
    "1.1.1": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    # GH 19966 Make sure if MultiIndexed index has tuple name, they will be\n    # recognised as a whole\n    if clocs in index.names:\n        clocs = [clocs]\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val, fill_value=fill_value)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        assert isinstance(unstcols, MultiIndex)  # for mypy\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "pandas/core/reshape/reshape.py",
    "1.3.2": [
        "unstack(obj, level, fill_value=None)"
    ],
    "1.4.1": [
        "    def test_unstack_long_index(self):\n        # PH 32624: Error when using a lot of indices to unstack.\n        # The error occurred only, if a lot of indices are used.\n        df = pd.DataFrame(\n            [[1]],\n            columns=pd.MultiIndex.from_tuples([[0]], names=[\"c1\"]),\n            index=pd.MultiIndex.from_tuples(\n                [[0, 0, 1, 0, 0, 0, 1]],\n                names=[\"i1\", \"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"],\n            ),\n        )\n        result = df.unstack([\"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"])\n        expected = pd.DataFrame(\n            [[1]],\n            columns=pd.MultiIndex.from_tuples(\n                [[0, 0, 1, 0, 0, 0, 1]],\n                names=[\"c1\", \"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"],\n            ),\n            index=pd.Index([0], name=\"i1\"),\n        )\n        tm.assert_frame_equal(result, expected)",
        "    def test_unstack_multi_level_cols(self):\n        # PH 24729: Unstack a df with multi level columns\n        df = pd.DataFrame(\n            [[0.0, 0.0], [0.0, 0.0]],\n            columns=pd.MultiIndex.from_tuples(\n                [[\"B\", \"C\"], [\"B\", \"D\"]], names=[\"c1\", \"c2\"]\n            ),\n            index=pd.MultiIndex.from_tuples(\n                [[10, 20, 30], [10, 20, 40]], names=[\"i1\", \"i2\", \"i3\"],\n            ),\n        )\n        assert df.unstack([\"i2\", \"i1\"]).columns.names[-2:] == [\"i2\", \"i1\"]",
        "    def test_unstack_multi_level_rows_and_cols(self):\n        # PH 28306: Unstack df with multi level cols and rows\n        df = pd.DataFrame(\n            [[1, 2], [3, 4], [-1, -2], [-3, -4]],\n            columns=pd.MultiIndex.from_tuples([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]]),\n            index=pd.MultiIndex.from_tuples(\n                [\n                    [\"m1\", \"P3\", 222],\n                    [\"m1\", \"A5\", 111],\n                    [\"m2\", \"P3\", 222],\n                    [\"m2\", \"A5\", 111],\n                ],\n                names=[\"i1\", \"i2\", \"i3\"],\n            ),\n        )\n        result = df.unstack([\"i3\", \"i2\"])\n        expected = df.unstack([\"i3\"]).unstack([\"i2\"])\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/frame/test_reshape.py",
        "pandas/tests/frame/test_reshape.py",
        "pandas/tests/frame/test_reshape.py"
    ],
    "2.1.1": [
        [
            "E           ValueError: 2 is not in list",
            "E               IndexError: Too many levels: Index has only 2 levels, not 3"
        ],
        [
            "E       AssertionError: assert FrozenList(['i2', 'i3']) == ['i2', 'i1']\nE         At index 1 diff: 'i3' != 'i1'\nE         Full diff:\nE         - ['i2', 'i1']\nE         + FrozenList(['i2', 'i3'])"
        ],
        [
            "E   AssertionError: DataFrame.index are different\nE   \nE   DataFrame.index values are different (100.0 %)\nE   [left]:  Index(['A5', 'P3'], dtype='object', name='i2')\nE   [right]: Index(['m1', 'm2'], dtype='object', name='i1')"
        ]
    ],
    "2.1.2": [
        [
            "self = MultiIndex([(0, 0)],\n           names=['i1', 'i6']), level = 2\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n>           level = self.names.index(level)",
            "\npandas/core/indexes/multi.py:1402: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nself = <pandas.tests.frame.test_reshape.TestDataFrameReshape object at 0x7f7f673ed1c0>\n\n    def test_unstack_long_index(self):\n        # PH 32624: Error when using a lot of indices to unstack.\n        # The error occurred only, if a lot of indices are used.\n        df = pd.DataFrame(\n            [[1]],\n            columns=pd.MultiIndex.from_tuples([[0]], names=[\"c1\"]),\n            index=pd.MultiIndex.from_tuples(\n                [[0, 0, 1, 0, 0, 0, 1]],\n                names=[\"i1\", \"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"],\n            ),\n        )\n>       result = df.unstack([\"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"])\n\npandas/tests/frame/test_reshape.py:779: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:6452: in unstack\n    return unstack(self, level, fill_value)\npandas/core/reshape/reshape.py:403: in unstack\n    return _unstack_multiple(obj, level, fill_value=fill_value)\npandas/core/reshape/reshape.py:365: in _unstack_multiple\n    result = result.unstack(val, fill_value=fill_value)\npandas/core/frame.py:6452: in unstack\n    return unstack(self, level, fill_value)\npandas/core/reshape/reshape.py:413: in unstack\n    return _unstack_frame(obj, level, fill_value=fill_value)\npandas/core/reshape/reshape.py:437: in _unstack_frame\n    return _Unstacker(\npandas/core/reshape/reshape.py:115: in __init__\n    self.level = self.index._get_level_number(level)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MultiIndex([(0, 0)],\n           names=['i1', 'i6']), level = 2\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n            level = self.names.index(level)\n        except ValueError as err:\n            if not is_integer(level):\n                raise KeyError(f\"Level {level} not found\") from err\n            elif level < 0:\n                level += self.nlevels\n                if level < 0:\n                    orig_level = level - self.nlevels\n                    raise IndexError(\n                        f\"Too many levels: Index has only {self.nlevels} levels, \"\n                        f\"{orig_level} is not a valid level number\"\n                    ) from err\n            # Note: levels are zero-based\n            elif level >= self.nlevels:\n>               raise IndexError(\n                    f\"Too many levels: Index has only {self.nlevels} levels, \"\n                    f\"not {level + 1}\"\n                ) from err",
            "\npandas/core/indexes/multi.py:1416: IndexError"
        ],
        [
            "self = <pandas.tests.frame.test_reshape.TestDataFrameReshape object at 0x7f7f67341d30>\n\n    def test_unstack_multi_level_cols(self):\n        # PH 24729: Unstack a df with multi level columns\n        df = pd.DataFrame(\n            [[0.0, 0.0], [0.0, 0.0]],\n            columns=pd.MultiIndex.from_tuples(\n                [[\"B\", \"C\"], [\"B\", \"D\"]], names=[\"c1\", \"c2\"]\n            ),\n            index=pd.MultiIndex.from_tuples(\n                [[10, 20, 30], [10, 20, 40]], names=[\"i1\", \"i2\", \"i3\"],\n            ),\n        )\n>       assert df.unstack([\"i2\", \"i1\"]).columns.names[-2:] == [\"i2\", \"i1\"]",
            "\npandas/tests/frame/test_reshape.py:801: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_reshape.TestDataFrameReshape object at 0x7f7f62dac100>\n\n    def test_unstack_multi_level_rows_and_cols(self):\n        # PH 28306: Unstack df with multi level cols and rows\n        df = pd.DataFrame(\n            [[1, 2], [3, 4], [-1, -2], [-3, -4]],\n            columns=pd.MultiIndex.from_tuples([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]]),\n            index=pd.MultiIndex.from_tuples(\n                [\n                    [\"m1\", \"P3\", 222],\n                    [\"m1\", \"A5\", 111],\n                    [\"m2\", \"P3\", 222],\n                    [\"m2\", \"A5\", 111],\n                ],\n                names=[\"i1\", \"i2\", \"i3\"],\n            ),\n        )\n        result = df.unstack([\"i3\", \"i2\"])\n        expected = df.unstack([\"i3\"]).unstack([\"i2\"])\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/frame/test_reshape.py:820: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj, index_values=index_values)",
            "\npandas/_libs/testing.pyx:180: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "clocs": {
                    "value": "['i2', 'i1']",
                    "shape": "2",
                    "omitted": false
                },
                "data": {
                    "value": "c1          B     \nc2          C    D\ni1 i2 i3          \n10 20 30  0.0  0.0\n      40  0.0  0.0",
                    "shape": "(2, 2)",
                    "omitted": false
                },
                "data.index": {
                    "value": "MultiIndex([(10, 20, 30),\n            (10, 20, 40)],\n           names=['i1', 'i2', 'i3'])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "data.columns": {
                    "value": "MultiIndex([('B', 'C'),\n            ('B', 'D')],\n           names=['c1', 'c2'])",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "clocs": {
                    "value": "[0, -1]",
                    "shape": "2",
                    "omitted": false
                },
                "index": {
                    "value": "MultiIndex([(10, 20, 30),\n            (10, 20, 40)],\n           names=['i1', 'i2', 'i3'])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList(['i1', 'i2', 'i3'])",
                    "shape": "3",
                    "omitted": false
                },
                "i": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "rlocs": {
                    "value": "[2]",
                    "shape": "1",
                    "omitted": false
                },
                "index.nlevels": {
                    "value": "3",
                    "shape": null,
                    "omitted": false
                },
                "clevels": {
                    "value": "[Int64Index([20], dtype='int64', name='i2'), Int64Index([10], dtype='int64', name='i1')]",
                    "shape": "2",
                    "omitted": false
                },
                "index.levels": {
                    "value": "FrozenList([[10], [20], [30, 40]])",
                    "shape": "3",
                    "omitted": false
                },
                "ccodes": {
                    "value": "[array([0, 0], dtype=int8), array([0, 0], dtype=int8)]",
                    "shape": "2",
                    "omitted": false
                },
                "index.codes": {
                    "value": "FrozenList([[0, 0], [0, 0], [0, 1]])",
                    "shape": "3",
                    "omitted": false
                },
                "cnames": {
                    "value": "['i2', 'i1']",
                    "shape": "2",
                    "omitted": false
                },
                "rlevels": {
                    "value": "[Int64Index([30, 40], dtype='int64', name='i3')]",
                    "shape": "1",
                    "omitted": false
                },
                "rcodes": {
                    "value": "[array([0, 1], dtype=int8)]",
                    "shape": "1",
                    "omitted": false
                },
                "rnames": {
                    "value": "['i3']",
                    "shape": "1",
                    "omitted": false
                },
                "shape": {
                    "value": "[1, 1]",
                    "shape": "2",
                    "omitted": false
                },
                "group_index": {
                    "value": "array([0, 0])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "comp_ids": {
                    "value": "array([0, 0])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "obs_ids": {
                    "value": "array([0])",
                    "shape": "(1,)",
                    "omitted": false
                },
                "recons_codes": {
                    "value": "[array([0]), array([0])]",
                    "shape": "2",
                    "omitted": false
                },
                "dummy_index": {
                    "value": "MultiIndex([(30, 0),\n            (40, 0)],\n           names=['i3', '__placeholder__'])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "result": {
                    "value": "c1    B               \nc2    C         D     \ni2   20        20     \ni3   30   40   30   40\ni1                    \n10  0.0  0.0  0.0  0.0",
                    "shape": "(1, 4)",
                    "omitted": false
                },
                "val": {
                    "value": "-1",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "clocs": {
                    "value": "['i3', 'i2']",
                    "shape": "2",
                    "omitted": false
                },
                "data": {
                    "value": "           a  d\n           b  e\n           c  f\ni1 i2 i3       \nm1 P3 222  1  2\n   A5 111  3  4\nm2 P3 222 -1 -2\n   A5 111 -3 -4",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "data.index": {
                    "value": "MultiIndex([('m1', 'P3', 222),\n            ('m1', 'A5', 111),\n            ('m2', 'P3', 222),\n            ('m2', 'A5', 111)],\n           names=['i1', 'i2', 'i3'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "data.columns": {
                    "value": "MultiIndex([('a', 'b', 'c'),\n            ('d', 'e', 'f')],\n           )",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "clocs": {
                    "value": "[0, 0]",
                    "shape": "2",
                    "omitted": false
                },
                "index": {
                    "value": "MultiIndex([('m1', 'P3', 222),\n            ('m1', 'A5', 111),\n            ('m2', 'P3', 222),\n            ('m2', 'A5', 111)],\n           names=['i1', 'i2', 'i3'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList(['i1', 'i2', 'i3'])",
                    "shape": "3",
                    "omitted": false
                },
                "i": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "rlocs": {
                    "value": "[0]",
                    "shape": "1",
                    "omitted": false
                },
                "index.nlevels": {
                    "value": "3",
                    "shape": null,
                    "omitted": false
                },
                "clevels": {
                    "value": "[Int64Index([111, 222], dtype='int64', name='i3'), Index(['A5', 'P3'], dtype='object', name='i2')]",
                    "shape": "2",
                    "omitted": false
                },
                "index.levels": {
                    "value": "FrozenList([['m1', 'm2'], ['A5', 'P3'], [111, 222]])",
                    "shape": "3",
                    "omitted": false
                },
                "ccodes": {
                    "value": "[array([1, 0, 1, 0], dtype=int8), array([1, 0, 1, 0], dtype=int8)]",
                    "shape": "2",
                    "omitted": false
                },
                "index.codes": {
                    "value": "FrozenList([[0, 0, 1, 1], [1, 0, 1, 0], [1, 0, 1, 0]])",
                    "shape": "3",
                    "omitted": false
                },
                "cnames": {
                    "value": "['i3', 'i2']",
                    "shape": "2",
                    "omitted": false
                },
                "rlevels": {
                    "value": "[Index(['m1', 'm2'], dtype='object', name='i1')]",
                    "shape": "1",
                    "omitted": false
                },
                "rcodes": {
                    "value": "[array([0, 0, 1, 1], dtype=int8)]",
                    "shape": "1",
                    "omitted": false
                },
                "rnames": {
                    "value": "['i1']",
                    "shape": "1",
                    "omitted": false
                },
                "shape": {
                    "value": "[2, 2]",
                    "shape": "2",
                    "omitted": false
                },
                "group_index": {
                    "value": "array([3, 0, 3, 0])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "comp_ids": {
                    "value": "array([0, 1, 0, 1])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "obs_ids": {
                    "value": "array([3, 0])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "recons_codes": {
                    "value": "[array([1, 0]), array([1, 0])]",
                    "shape": "2",
                    "omitted": false
                },
                "dummy_index": {
                    "value": "MultiIndex([('m1', 3),\n            ('m1', 0),\n            ('m2', 3),\n            ('m2', 0)],\n           names=['i1', '__placeholder__'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "result": {
                    "value": "      a                   d               \n      b                   e               \n      c                   f               \ni3  111       222       111       222     \ni1   m1   m2   m1   m2   m1   m2   m1   m2\ni2                                        \nA5  3.0 -3.0  NaN  NaN  4.0 -4.0  NaN  NaN\nP3  NaN  NaN  1.0 -1.0  NaN  NaN  2.0 -2.0",
                    "shape": "(2, 8)",
                    "omitted": false
                },
                "val": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "clocs": "list",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.columns": "MultiIndex"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index.names": "FrozenList",
                "i": "int",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "result": "DataFrame",
                "val": "int"
            }
        ],
        [
            {
                "clocs": "list",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.columns": "MultiIndex"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index.names": "FrozenList",
                "i": "int",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "result": "DataFrame",
                "val": "int"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "clocs": {
                    "value": "['i2', 'i3', 'i4', 'i5', 'i6', 'i7']",
                    "shape": "6",
                    "omitted": false
                },
                "data": {
                    "value": "c1                    0\ni1 i2 i3 i4 i5 i6 i7   \n0  0  1  0  0  0  1   1",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "data.index": {
                    "value": "MultiIndex([(0, 0, 1, 0, 0, 0, 1)],\n           names=['i1', 'i2', 'i3', 'i4', 'i5', 'i6', 'i7'])",
                    "shape": "(1,)",
                    "omitted": false
                },
                "data.columns": {
                    "value": "MultiIndex([(0,)],\n           names=['c1'])",
                    "shape": "(1,)",
                    "omitted": false
                }
            },
            {
                "clocs": {
                    "value": "[0, 0, 0, 0, 0, 0]",
                    "shape": "6",
                    "omitted": false
                },
                "index": {
                    "value": "MultiIndex([(0, 0, 1, 0, 0, 0, 1)],\n           names=['i1', 'i2', 'i3', 'i4', 'i5', 'i6', 'i7'])",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList(['i1', 'i2', 'i3', 'i4', 'i5', 'i6', 'i7'])",
                    "shape": "7",
                    "omitted": false
                },
                "i": {
                    "value": "5",
                    "shape": null,
                    "omitted": false
                },
                "rlocs": {
                    "value": "[0]",
                    "shape": "1",
                    "omitted": false
                },
                "index.nlevels": {
                    "value": "7",
                    "shape": null,
                    "omitted": false
                },
                "clevels": {
                    "value": "[Int64Index([0], dtype='int64', name='i2'), Int64Index([1], dtype='int64', name='i3'), Int64Index([0], dtype='int64', name='i4'), Int64Index([0], dtype='int64', name='i5'), Int64Index([0], dtype='int64', name='i6'), Int64Index([1], dtype='int64', name='i7')]",
                    "shape": "6",
                    "omitted": false
                },
                "index.levels": {
                    "value": "FrozenList([[0], [0], [1], [0], [0], [0], [1]])",
                    "shape": "7",
                    "omitted": false
                },
                "ccodes": {
                    "value": "[array([0], dtype=int8), array([0], dtype=int8), array([0], dtype=int8), array([0], dtype=int8), array([0], dtype=int8), array([0], dtype=int8)]",
                    "shape": "6",
                    "omitted": false
                },
                "index.codes": {
                    "value": "FrozenList([[0], [0], [0], [0], [0], [0], [0]])",
                    "shape": "7",
                    "omitted": false
                },
                "cnames": {
                    "value": "['i2', 'i3', 'i4', 'i5', 'i6', 'i7']",
                    "shape": "6",
                    "omitted": false
                },
                "rlevels": {
                    "value": "[Int64Index([0], dtype='int64', name='i1')]",
                    "shape": "1",
                    "omitted": false
                },
                "rcodes": {
                    "value": "[array([0], dtype=int8)]",
                    "shape": "1",
                    "omitted": false
                },
                "rnames": {
                    "value": "['i1']",
                    "shape": "1",
                    "omitted": false
                },
                "shape": {
                    "value": "[1, 1, 1, 1, 1, 1]",
                    "shape": "6",
                    "omitted": false
                },
                "group_index": {
                    "value": "array([0])",
                    "shape": "(1,)",
                    "omitted": false
                },
                "comp_ids": {
                    "value": "array([0])",
                    "shape": "(1,)",
                    "omitted": false
                },
                "obs_ids": {
                    "value": "array([0])",
                    "shape": "(1,)",
                    "omitted": false
                },
                "recons_codes": {
                    "value": "[array([0]), array([0]), array([0]), array([0]), array([0]), array([0])]",
                    "shape": "6",
                    "omitted": false
                },
                "dummy_index": {
                    "value": "MultiIndex([(0, 0)],\n           names=['i1', '__placeholder__'])",
                    "shape": "(1,)",
                    "omitted": false
                },
                "result": {
                    "value": "c1  0\ni2  0\ni3  1\ni4  0\ni5  0\ni6  0\ni7  1\ni1   \n0   1",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "val": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "clocs": {
                    "value": "['i2', 'i1']",
                    "shape": "2",
                    "omitted": false
                },
                "data": {
                    "value": "c1          B     \nc2          C    D\ni1 i2 i3          \n10 20 30  0.0  0.0\n      40  0.0  0.0",
                    "shape": "(2, 2)",
                    "omitted": false
                },
                "data.index": {
                    "value": "MultiIndex([(10, 20, 30),\n            (10, 20, 40)],\n           names=['i1', 'i2', 'i3'])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "data.columns": {
                    "value": "MultiIndex([('B', 'C'),\n            ('B', 'D')],\n           names=['c1', 'c2'])",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "clocs": {
                    "value": "[-1, -1]",
                    "shape": "2",
                    "omitted": false
                },
                "index": {
                    "value": "MultiIndex([(10, 20, 30),\n            (10, 20, 40)],\n           names=['i1', 'i2', 'i3'])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList(['i1', 'i2', 'i3'])",
                    "shape": "3",
                    "omitted": false
                },
                "i": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "rlocs": {
                    "value": "[2]",
                    "shape": "1",
                    "omitted": false
                },
                "index.nlevels": {
                    "value": "3",
                    "shape": null,
                    "omitted": false
                },
                "clevels": {
                    "value": "[Int64Index([20], dtype='int64', name='i2'), Int64Index([10], dtype='int64', name='i1')]",
                    "shape": "2",
                    "omitted": false
                },
                "index.levels": {
                    "value": "FrozenList([[10], [20], [30, 40]])",
                    "shape": "3",
                    "omitted": false
                },
                "ccodes": {
                    "value": "[array([0, 0], dtype=int8), array([0, 0], dtype=int8)]",
                    "shape": "2",
                    "omitted": false
                },
                "index.codes": {
                    "value": "FrozenList([[0, 0], [0, 0], [0, 1]])",
                    "shape": "3",
                    "omitted": false
                },
                "cnames": {
                    "value": "['i2', 'i1']",
                    "shape": "2",
                    "omitted": false
                },
                "rlevels": {
                    "value": "[Int64Index([30, 40], dtype='int64', name='i3')]",
                    "shape": "1",
                    "omitted": false
                },
                "rcodes": {
                    "value": "[array([0, 1], dtype=int8)]",
                    "shape": "1",
                    "omitted": false
                },
                "rnames": {
                    "value": "['i3']",
                    "shape": "1",
                    "omitted": false
                },
                "shape": {
                    "value": "[1, 1]",
                    "shape": "2",
                    "omitted": false
                },
                "group_index": {
                    "value": "array([0, 0])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "comp_ids": {
                    "value": "array([0, 0])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "obs_ids": {
                    "value": "array([0])",
                    "shape": "(1,)",
                    "omitted": false
                },
                "recons_codes": {
                    "value": "[array([0]), array([0])]",
                    "shape": "2",
                    "omitted": false
                },
                "dummy_index": {
                    "value": "MultiIndex([(30, 0),\n            (40, 0)],\n           names=['i3', '__placeholder__'])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "result": {
                    "value": "c1    B     \nc2    C    D\ni2   20   20\ni1   10   10\ni3          \n30  0.0  0.0\n40  0.0  0.0",
                    "shape": "(2, 2)",
                    "omitted": false
                },
                "val": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "clocs": {
                    "value": "['i3', 'i2']",
                    "shape": "2",
                    "omitted": false
                },
                "data": {
                    "value": "           a  d\n           b  e\n           c  f\ni1 i2 i3       \nm1 P3 222  1  2\n   A5 111  3  4\nm2 P3 222 -1 -2\n   A5 111 -3 -4",
                    "shape": "(4, 2)",
                    "omitted": false
                },
                "data.index": {
                    "value": "MultiIndex([('m1', 'P3', 222),\n            ('m1', 'A5', 111),\n            ('m2', 'P3', 222),\n            ('m2', 'A5', 111)],\n           names=['i1', 'i2', 'i3'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "data.columns": {
                    "value": "MultiIndex([('a', 'b', 'c'),\n            ('d', 'e', 'f')],\n           )",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "clocs": {
                    "value": "[0, 0]",
                    "shape": "2",
                    "omitted": false
                },
                "index": {
                    "value": "MultiIndex([('m1', 'P3', 222),\n            ('m1', 'A5', 111),\n            ('m2', 'P3', 222),\n            ('m2', 'A5', 111)],\n           names=['i1', 'i2', 'i3'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList(['i1', 'i2', 'i3'])",
                    "shape": "3",
                    "omitted": false
                },
                "i": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "rlocs": {
                    "value": "[0]",
                    "shape": "1",
                    "omitted": false
                },
                "index.nlevels": {
                    "value": "3",
                    "shape": null,
                    "omitted": false
                },
                "clevels": {
                    "value": "[Int64Index([111, 222], dtype='int64', name='i3'), Index(['A5', 'P3'], dtype='object', name='i2')]",
                    "shape": "2",
                    "omitted": false
                },
                "index.levels": {
                    "value": "FrozenList([['m1', 'm2'], ['A5', 'P3'], [111, 222]])",
                    "shape": "3",
                    "omitted": false
                },
                "ccodes": {
                    "value": "[array([1, 0, 1, 0], dtype=int8), array([1, 0, 1, 0], dtype=int8)]",
                    "shape": "2",
                    "omitted": false
                },
                "index.codes": {
                    "value": "FrozenList([[0, 0, 1, 1], [1, 0, 1, 0], [1, 0, 1, 0]])",
                    "shape": "3",
                    "omitted": false
                },
                "cnames": {
                    "value": "['i3', 'i2']",
                    "shape": "2",
                    "omitted": false
                },
                "rlevels": {
                    "value": "[Index(['m1', 'm2'], dtype='object', name='i1')]",
                    "shape": "1",
                    "omitted": false
                },
                "rcodes": {
                    "value": "[array([0, 0, 1, 1], dtype=int8)]",
                    "shape": "1",
                    "omitted": false
                },
                "rnames": {
                    "value": "['i1']",
                    "shape": "1",
                    "omitted": false
                },
                "shape": {
                    "value": "[2, 2]",
                    "shape": "2",
                    "omitted": false
                },
                "group_index": {
                    "value": "array([3, 0, 3, 0])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "comp_ids": {
                    "value": "array([0, 1, 0, 1])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "obs_ids": {
                    "value": "array([3, 0])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "recons_codes": {
                    "value": "[array([1, 0]), array([1, 0])]",
                    "shape": "2",
                    "omitted": false
                },
                "dummy_index": {
                    "value": "MultiIndex([('m1', 3),\n            ('m1', 0),\n            ('m2', 3),\n            ('m2', 0)],\n           names=['i1', '__placeholder__'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "result": {
                    "value": "      a                 d             \n      b                 e             \n      c                 f             \ni3  111     222       111     222     \ni2   A5  P3  A5   P3   A5  P3  A5   P3\ni1                                    \nm1  3.0 NaN NaN  1.0  4.0 NaN NaN  2.0\nm2 -3.0 NaN NaN -1.0 -4.0 NaN NaN -2.0",
                    "shape": "(2, 8)",
                    "omitted": false
                },
                "val": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "clocs": "list",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.columns": "MultiIndex"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index.names": "FrozenList",
                "i": "int",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "result": "DataFrame",
                "val": "int"
            }
        ],
        [
            {
                "clocs": "list",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.columns": "MultiIndex"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index.names": "FrozenList",
                "i": "int",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "result": "DataFrame",
                "val": "int"
            }
        ],
        [
            {
                "clocs": "list",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.columns": "MultiIndex"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index.names": "FrozenList",
                "i": "int",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "result": "DataFrame",
                "val": "int"
            }
        ]
    ],
    "3.1.1": [
        "Multiple unstack in multi level columns DataFrame\n",
        "Pandas unstack() unexpected behavior with multiindex row and column\n",
        "BUG in _unstack_multiple\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nimport pandas as pd\nfrom six import StringIO\nstats = pd.DataFrame({('B', 'C'): \n                          {\n                              (10, 20, 30): 0.0,\n                              (10, 20, 40): 0.0\n                          },\n                      ('B', 'D'): \n                          {\n                              (10, 20, 30): 0.0, \n                              (10, 20, 40): 0.0\n                          }\n                     })\n\nstats.index.names = ['i1', 'i2', 'i3']\nstats.columns.names = ['c1', 'c2']\n\n# Expected true,  actual false\nstats.unstack(['i2', 'i1']).columns.names[-2:] == ['i2', 'i1']\n\n# In case of single level column, expected true, actual true\nstats['B'].unstack(['i2', 'i1']).columns.names[-2:] == ['i2', 'i1']\nProblem description\nTrying to unstack multiindex multicolumns DataFrame, yield to an unexpected behavior.\nThe unstacked levels are not those expected (see the code above).\n\nNote: In a single level column case, behavior is the expected one.\n\nExpected Output\nN/A\n",
        "Code Sample, a copy-pastable example if possible\ndata = {\n    ('effect_size', 'cohen_d', 'mean'): {\n        ('m1', 'P3', '222'): 0.52,\n        ('m1', 'A5', '111'): -0.07,\n        ('m2', 'P3', '222'): -0.53,\n        ('m2', 'A5', '111'): 0.05,\n    },\n    ('wilcoxon', 'z_score', 'stouffer'): {\n        ('m1', 'P3', '222'): 2.2,\n        ('m1', 'A5', '111'): -0.92,\n        ('m2', 'P3', '222'): -2.0,\n        ('m2', 'A5', '111'): -0.52,\n    }\n}\ndf = pd.DataFrame(data)\ndf.index.rename(['metric', 'bar', 'foo'], inplace=True)\ndf.unstack(['foo', 'bar'])\nProblem description\nThe df looks like this before unstacking:\n\n               effect_size wilcoxon\n                   cohen_d  z_score\n                      mean stouffer\nmetric bar foo                     \nm1     A5  111       -0.07    -0.92\n       P3  222        0.52     2.20\nm2     A5  111        0.05    -0.52\n       P3  222       -0.53    -2.00\nby unstacking bar and foo, I had expected to see them as column indices, but that's not what happens. Instead foo and metric are unstacked, and bar is left stacked as a row index:\n\n> df.unstack(['foo', 'bar'])\n\n       effect_size                   wilcoxon                \n           cohen_d                    z_score                \n              mean                   stouffer                \nfoo            111         222            111        222     \nmetric          m1    m2    m1    m2       m1    m2   m1   m2\nbar                                                          \nA5           -0.07  0.05   NaN   NaN    -0.92 -0.52  NaN  NaN\nP3             NaN   NaN  0.52 -0.53      NaN   NaN  2.2 -2.0\nI got around the problem by doing the following, but I think the above behavior might be a bug.\n\nHere's my workaround:\n\n> print df.stack([0, 1, 2]).unstack(0).transpose()\n\nbar             A5                   P3         \nfoo            111                  222         \n       effect_size wilcoxon effect_size wilcoxon\n           cohen_d  z_score     cohen_d  z_score\n              mean stouffer        mean stouffer\nmetric                                          \nm1           -0.07    -0.92        0.52      2.2\nm2            0.05    -0.52       -0.53     -2.0\n",
        "Code Sample\nNext code fail to do unstack.\n\nd = pd.DataFrame([[1,2,3],[2,2,3],[3,2,3],[4,2,3],[5,2,3]], \n                 columns=pd.MultiIndex.from_tuples([[0, 0, 0], [0, 0, 1], [0, 0, 2]], names=['c1', 'c2', 'c3']),\n                 index=pd.MultiIndex.from_tuples([[0, 0, 0, 0, 0, 0, 0],\n                                                  [0, 0, 1, 0, 0, 0, 1],\n                                                  [0, 1, 0, 0, 0, 1, 0],\n                                                  [0, 1, 1, 0, 0, 1, 1],\n                                                  [1, 0, 0, 0, 1, 0, 0]\n                                                  ], \n                                                 names=['i1', 'i2', 'i3', 'i4', 'i5', 'i6', 'i7']))\ne = d.unstack(['i2', 'i3', 'i4', 'i5', 'i6', 'i7'])\nIt rise exception IndexError with message \"Too many levels: Index has only 2 levels, not 3\"\n\nProblem description\nThe reason semms to mistyping in https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/reshape.py#L366 :\n\nclocs = [v if i > v else v - 1 for v in clocs]\nI think it must be:\n\nclocs = [v if val > v else v - 1 for v in clocs]\n"
    ],
    "used_imports": "from pandas.core.indexes.api import Index, MultiIndex\nfrom pandas.core.series import Series\nfrom pandas.core.sorting import compress_group_index, decons_obs_group_ids, get_compressed_ids, get_group_index"
}