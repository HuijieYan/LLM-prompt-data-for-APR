{
    "pandas:101": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_101/pandas/core/dtypes/cast.py": {
            "buggy_functions": [
                {
                    "function_name": "astype_nansafe",
                    "function_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        # allow frequency conversions\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        if dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)\n",
                    "decorators": [],
                    "docstring": "Cast the elements of an array to a given dtype a nan-safe manner.\n\nParameters\n----------\narr : ndarray\ndtype : np.dtype\ncopy : bool, default True\n    If False, a view will be attempted but may fail, if\n    e.g. the item sizes don't align.\nskipna: bool, default False\n    Whether or not we should skip NaN when casting as a string-type.\n\nRaises\n------\nValueError\n    The dtype was a datetime64/timedelta64 dtype, but it had no unit.",
                    "start_line": 792,
                    "end_line": 888,
                    "variables": {
                        "bool": [
                            792
                        ],
                        "is_extension_array_dtype": [
                            813
                        ],
                        "dtype": [
                            813,
                            814,
                            816,
                            817,
                            819,
                            823,
                            825,
                            826,
                            829,
                            830,
                            832,
                            835,
                            837,
                            838,
                            840,
                            844,
                            846,
                            849,
                            852,
                            854,
                            862,
                            863,
                            868,
                            871,
                            872,
                            875,
                            877,
                            879,
                            880,
                            884,
                            886,
                            888
                        ],
                        "_from_sequence": [
                            814
                        ],
                        "dtype.construct_array_type": [
                            814
                        ],
                        "arr": [
                            814,
                            820,
                            822,
                            824,
                            826,
                            830,
                            832,
                            834,
                            836,
                            838,
                            845,
                            846,
                            850,
                            852,
                            854,
                            856,
                            859,
                            863,
                            871,
                            875,
                            884,
                            886,
                            888
                        ],
                        "copy": [
                            871,
                            875,
                            814,
                            850,
                            884
                        ],
                        "isinstance": [
                            816
                        ],
                        "np.dtype": [
                            816
                        ],
                        "np": [
                            836,
                            837,
                            846,
                            847,
                            816,
                            856,
                            854,
                            824,
                            825,
                            862
                        ],
                        "pandas_dtype": [
                            817
                        ],
                        "issubclass": [
                            819
                        ],
                        "dtype.type": [
                            819,
                            862
                        ],
                        "str": [
                            819
                        ],
                        "reshape": [
                            820,
                            863
                        ],
                        "lib.astype_str": [
                            820
                        ],
                        "lib": [
                            820,
                            863
                        ],
                        "arr.ravel": [
                            820,
                            863
                        ],
                        "skipna": [
                            820
                        ],
                        "arr.shape": [
                            820,
                            863
                        ],
                        "is_datetime64_dtype": [
                            868,
                            822
                        ],
                        "is_object_dtype": [
                            859,
                            835,
                            884,
                            823
                        ],
                        "tslib.ints_to_pydatetime": [
                            824
                        ],
                        "tslib": [
                            824
                        ],
                        "arr.view": [
                            836,
                            838,
                            888,
                            824,
                            826
                        ],
                        "np.int64": [
                            824,
                            825,
                            836,
                            837
                        ],
                        "dtype.kind": [
                            844,
                            829
                        ],
                        "arr.astype": [
                            846,
                            850,
                            886,
                            830
                        ],
                        "TypeError": [
                            832,
                            852
                        ],
                        "arr.dtype": [
                            832,
                            852,
                            854
                        ],
                        "is_timedelta64_dtype": [
                            872,
                            834
                        ],
                        "tslibs.ints_to_pytimedelta": [
                            836
                        ],
                        "tslibs": [
                            836
                        ],
                        "_INT64_DTYPE": [
                            840
                        ],
                        "_TD_DTYPE": [
                            840,
                            849,
                            850
                        ],
                        "mask": [
                            845,
                            847
                        ],
                        "isna": [
                            845
                        ],
                        "result": [
                            848,
                            846,
                            847
                        ],
                        "astype": [
                            846
                        ],
                        "np.float64": [
                            846
                        ],
                        "np.nan": [
                            847
                        ],
                        "np.issubdtype": [
                            862,
                            854
                        ],
                        "np.floating": [
                            854
                        ],
                        "np.integer": [
                            862,
                            854
                        ],
                        "all": [
                            856
                        ],
                        "np.isfinite": [
                            856
                        ],
                        "ValueError": [
                            857,
                            882
                        ],
                        "lib.astype_intsafe": [
                            863
                        ],
                        "astype_nansafe": [
                            875,
                            871
                        ],
                        "values": [
                            875,
                            871
                        ],
                        "to_datetime": [
                            871
                        ],
                        "to_timedelta": [
                            875
                        ],
                        "dtype.name": [
                            880,
                            877,
                            879
                        ],
                        "msg": [
                            882,
                            878
                        ]
                    },
                    "filtered_variables": {
                        "is_extension_array_dtype": [
                            813
                        ],
                        "dtype": [
                            813,
                            814,
                            816,
                            817,
                            819,
                            823,
                            825,
                            826,
                            829,
                            830,
                            832,
                            835,
                            837,
                            838,
                            840,
                            844,
                            846,
                            849,
                            852,
                            854,
                            862,
                            863,
                            868,
                            871,
                            872,
                            875,
                            877,
                            879,
                            880,
                            884,
                            886,
                            888
                        ],
                        "_from_sequence": [
                            814
                        ],
                        "dtype.construct_array_type": [
                            814
                        ],
                        "arr": [
                            814,
                            820,
                            822,
                            824,
                            826,
                            830,
                            832,
                            834,
                            836,
                            838,
                            845,
                            846,
                            850,
                            852,
                            854,
                            856,
                            859,
                            863,
                            871,
                            875,
                            884,
                            886,
                            888
                        ],
                        "copy": [
                            871,
                            875,
                            814,
                            850,
                            884
                        ],
                        "np.dtype": [
                            816
                        ],
                        "np": [
                            836,
                            837,
                            846,
                            847,
                            816,
                            856,
                            854,
                            824,
                            825,
                            862
                        ],
                        "pandas_dtype": [
                            817
                        ],
                        "dtype.type": [
                            819,
                            862
                        ],
                        "reshape": [
                            820,
                            863
                        ],
                        "lib.astype_str": [
                            820
                        ],
                        "lib": [
                            820,
                            863
                        ],
                        "arr.ravel": [
                            820,
                            863
                        ],
                        "skipna": [
                            820
                        ],
                        "arr.shape": [
                            820,
                            863
                        ],
                        "is_datetime64_dtype": [
                            868,
                            822
                        ],
                        "is_object_dtype": [
                            859,
                            835,
                            884,
                            823
                        ],
                        "tslib.ints_to_pydatetime": [
                            824
                        ],
                        "tslib": [
                            824
                        ],
                        "arr.view": [
                            836,
                            838,
                            888,
                            824,
                            826
                        ],
                        "np.int64": [
                            824,
                            825,
                            836,
                            837
                        ],
                        "dtype.kind": [
                            844,
                            829
                        ],
                        "arr.astype": [
                            846,
                            850,
                            886,
                            830
                        ],
                        "arr.dtype": [
                            832,
                            852,
                            854
                        ],
                        "is_timedelta64_dtype": [
                            872,
                            834
                        ],
                        "tslibs.ints_to_pytimedelta": [
                            836
                        ],
                        "tslibs": [
                            836
                        ],
                        "_INT64_DTYPE": [
                            840
                        ],
                        "_TD_DTYPE": [
                            840,
                            849,
                            850
                        ],
                        "mask": [
                            845,
                            847
                        ],
                        "isna": [
                            845
                        ],
                        "result": [
                            848,
                            846,
                            847
                        ],
                        "astype": [
                            846
                        ],
                        "np.float64": [
                            846
                        ],
                        "np.nan": [
                            847
                        ],
                        "np.issubdtype": [
                            862,
                            854
                        ],
                        "np.floating": [
                            854
                        ],
                        "np.integer": [
                            862,
                            854
                        ],
                        "np.isfinite": [
                            856
                        ],
                        "lib.astype_intsafe": [
                            863
                        ],
                        "astype_nansafe": [
                            875,
                            871
                        ],
                        "values": [
                            875,
                            871
                        ],
                        "to_datetime": [
                            871
                        ],
                        "to_timedelta": [
                            875
                        ],
                        "dtype.name": [
                            880,
                            877,
                            879
                        ],
                        "msg": [
                            882,
                            878
                        ]
                    },
                    "diff_line_number": 825,
                    "class_data": null,
                    "used_imports": [
                        "import numpy as np",
                        "from pandas._libs import lib, tslib, tslibs",
                        "from .common import _INT64_DTYPE, _NS_DTYPE, _POSSIBLY_CAST_DTYPES, _TD_DTYPE, ensure_int8, ensure_int16, ensure_int32, ensure_int64, ensure_object, ensure_str, is_bool, is_bool_dtype, is_complex, is_complex_dtype, is_datetime64_dtype, is_datetime64_ns_dtype, is_datetime64tz_dtype, is_datetime_or_timedelta_dtype, is_dtype_equal, is_extension_array_dtype, is_float, is_float_dtype, is_integer, is_integer_dtype, is_object_dtype, is_scalar, is_string_dtype, is_timedelta64_dtype, is_timedelta64_ns_dtype, is_unsigned_integer_dtype, pandas_dtype",
                        "from .missing import isna, notna",
                        "from pandas import to_timedelta",
                        "from pandas import to_datetime",
                        "from pandas import to_datetime",
                        "from pandas import to_timedelta",
                        "from pandas import to_datetime",
                        "from pandas import to_timedelta"
                    ],
                    "variable_values": [
                        [
                            {
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "_from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "arr": {
                                    "variable_value": "array(['NaT'], dtype=datetime64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "copy": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pandas_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x7fdd0c5cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "skipna": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "arr.shape": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib.ints_to_pydatetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7fdd0c5cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "arr.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fdd0c5cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "arr.dtype": {
                                    "variable_value": "dtype('<M8')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs.ints_to_pytimedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_INT64_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_TD_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.issubdtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.floating": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_intsafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype_nansafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "_from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "arr": {
                                    "variable_value": "array(['NaT'], dtype=datetime64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "copy": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pandas_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.type": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x7fdd0c5cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "skipna": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "arr.shape": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib.ints_to_pydatetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7fdd0c5cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": "'i'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "arr.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fdd0c5cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "arr.dtype": {
                                    "variable_value": "dtype('<M8')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs.ints_to_pytimedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_INT64_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_TD_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.issubdtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.floating": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_intsafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype_nansafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.name": {
                                    "variable_value": "'int64'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "_from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "arr": {
                                    "variable_value": "array(['NaT'], dtype=timedelta64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "copy": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pandas_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x7fdd10877bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "skipna": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "arr.shape": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib.ints_to_pydatetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7fdd10877bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "arr.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fdd10877bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "arr.dtype": {
                                    "variable_value": "dtype('<m8')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs.ints_to_pytimedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_INT64_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_TD_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.issubdtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.floating": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_intsafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype_nansafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "_from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "arr": {
                                    "variable_value": "array(['NaT'], dtype=timedelta64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "copy": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pandas_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.type": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x7fdd10877bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "skipna": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "arr.shape": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib.ints_to_pydatetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7fdd10877bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": "'i'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "arr.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fdd10877bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "arr.dtype": {
                                    "variable_value": "dtype('<m8')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs.ints_to_pytimedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_INT64_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_TD_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.issubdtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.floating": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_intsafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype_nansafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.name": {
                                    "variable_value": "'int64'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "_from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "arr": {
                                    "variable_value": "array(['NaT'], dtype=timedelta64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "copy": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pandas_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x7fcd1ede47b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "skipna": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "arr.shape": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib.ints_to_pydatetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7fcd1ede47b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "arr.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fcd1ede47b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "arr.dtype": {
                                    "variable_value": "dtype('<m8')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs.ints_to_pytimedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tslibs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_INT64_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_TD_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.issubdtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.floating": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isfinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.astype_intsafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype_nansafe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
                "def is_nested_object(obj) -> bool:\n    \"\"\"\n    return a boolean if we have a nested object, e.g. a Series with 1 or\n    more Series elements\n\n    This may not be necessarily be performant.\n\n    \"\"\"\n\n    if isinstance(obj, ABCSeries) and is_object_dtype(obj):\n\n        if any(isinstance(v, ABCSeries) for v in obj.values):\n            return True\n\n    return False",
                "def maybe_downcast_to_dtype(result, dtype):\n    \"\"\" try to cast to the specified dtype (e.g. convert back to bool/int\n    or could be an astype of float64->float32\n    \"\"\"\n    do_round = False\n\n    if is_scalar(result):\n        return result\n    elif isinstance(result, ABCDataFrame):\n        # occurs in pivot_table doctest\n        return result\n\n    if isinstance(dtype, str):\n        if dtype == \"infer\":\n            inferred_type = lib.infer_dtype(ensure_object(result.ravel()), skipna=False)\n            if inferred_type == \"boolean\":\n                dtype = \"bool\"\n            elif inferred_type == \"integer\":\n                dtype = \"int64\"\n            elif inferred_type == \"datetime64\":\n                dtype = \"datetime64[ns]\"\n            elif inferred_type == \"timedelta64\":\n                dtype = \"timedelta64[ns]\"\n\n            # try to upcast here\n            elif inferred_type == \"floating\":\n                dtype = \"int64\"\n                if issubclass(result.dtype.type, np.number):\n                    do_round = True\n\n            else:\n                dtype = \"object\"\n\n        dtype = np.dtype(dtype)\n\n    converted = maybe_downcast_numeric(result, dtype, do_round)\n    if converted is not result:\n        return converted\n\n    # a datetimelike\n    # GH12821, iNaT is casted to float\n    if dtype.kind in [\"M\", \"m\"] and result.dtype.kind in [\"i\", \"f\"]:\n        if hasattr(dtype, \"tz\"):\n            # not a numpy dtype\n            if dtype.tz:\n                # convert to datetime and change timezone\n                from pandas import to_datetime\n\n                result = to_datetime(result).tz_localize(\"utc\")\n                result = result.tz_convert(dtype.tz)\n        else:\n            result = result.astype(dtype)\n\n    elif dtype.type is Period:\n        # TODO(DatetimeArray): merge with previous elif\n        from pandas.core.arrays import PeriodArray\n\n        try:\n            return PeriodArray(result, freq=dtype.freq)\n        except TypeError:\n            # e.g. TypeError: int() argument must be a string, a\n            #  bytes-like object or a number, not 'Period\n            pass\n\n    return result",
                "def maybe_downcast_numeric(result, dtype, do_round: bool = False):\n    \"\"\"\n    Subset of maybe_downcast_to_dtype restricted to numeric dtypes.\n\n    Parameters\n    ----------\n    result : ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    do_round : bool\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    if not isinstance(dtype, np.dtype):\n        # e.g. SparseDtype has no itemsize attr\n        return result\n\n    if isinstance(result, list):\n        # reached via groupoby.agg _ohlc; really this should be handled\n        #  earlier\n        result = np.array(result)\n\n    def trans(x):\n        if do_round:\n            return x.round()\n        return x\n\n    if dtype.kind == result.dtype.kind:\n        # don't allow upcasts here (except if empty)\n        if result.dtype.itemsize <= dtype.itemsize and result.size:\n            return result\n\n    if is_bool_dtype(dtype) or is_integer_dtype(dtype):\n\n        if not result.size:\n            # if we don't have any elements, just astype it\n            return trans(result).astype(dtype)\n\n        # do a test on the first element, if it fails then we are done\n        r = result.ravel()\n        arr = np.array([r[0]])\n\n        if isna(arr).any():\n            # if we have any nulls, then we are done\n            return result\n\n        elif not isinstance(r[0], (np.integer, np.floating, np.bool, int, float, bool)):\n            # a comparable, e.g. a Decimal may slip in here\n            return result\n\n        if (\n            issubclass(result.dtype.type, (np.object_, np.number))\n            and notna(result).all()\n        ):\n            new_result = trans(result).astype(dtype)\n            if new_result.dtype.kind == \"O\" or result.dtype.kind == \"O\":\n                # np.allclose may raise TypeError on object-dtype\n                if (new_result == result).all():\n                    return new_result\n            else:\n                if np.allclose(new_result, result, rtol=0):\n                    return new_result\n\n    elif (\n        issubclass(dtype.type, np.floating)\n        and not is_bool_dtype(result.dtype)\n        and not is_string_dtype(result.dtype)\n    ):\n        return result.astype(dtype)\n\n    return result",
                "def maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other):\n    \"\"\"\n    A safe version of putmask that potentially upcasts the result.\n    The result is replaced with the first N elements of other,\n    where N is the number of True values in mask.\n    If the length of other is shorter than N, other will be repeated.\n\n    Parameters\n    ----------\n    result : ndarray\n        The destination array. This will be mutated in-place if no upcasting is\n        necessary.\n    mask : boolean ndarray\n    other : scalar\n        The source value.\n\n    Returns\n    -------\n    result : ndarray\n    changed : bool\n        Set to true if the result array was upcasted.\n\n    Examples\n    --------\n    >>> result, _ = maybe_upcast_putmask(np.arange(1,6),\n    np.array([False, True, False, True, True]), np.arange(21,23))\n    >>> result\n    array([1, 21, 3, 22, 21])\n    \"\"\"\n\n    if not isinstance(result, np.ndarray):\n        raise ValueError(\"The result input must be a ndarray.\")\n    if not is_scalar(other):\n        # We _could_ support non-scalar other, but until we have a compelling\n        #  use case, we assume away the possibility.\n        raise ValueError(\"other must be a scalar\")\n\n    if mask.any():\n        # Two conversions for date-like dtypes that can't be done automatically\n        # in np.place:\n        #   NaN -> NaT\n        #   integer or integer array -> date-like array\n        if result.dtype.kind in [\"m\", \"M\"]:\n            if is_scalar(other):\n                if isna(other):\n                    other = result.dtype.type(\"nat\")\n                elif is_integer(other):\n                    other = np.array(other, dtype=result.dtype)\n            elif is_integer_dtype(other):\n                other = np.array(other, dtype=result.dtype)\n\n        def changeit():\n\n            # try to directly set by expanding our array to full\n            # length of the boolean\n            try:\n                om = other[mask]\n            except (IndexError, TypeError):\n                # IndexError occurs in test_upcast when we have a boolean\n                #  mask of the wrong shape\n                # TypeError occurs in test_upcast when `other` is a bool\n                pass\n            else:\n                om_at = om.astype(result.dtype)\n                if (om == om_at).all():\n                    new_result = result.values.copy()\n                    new_result[mask] = om_at\n                    result[:] = new_result\n                    return result, False\n\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True\n\n        # we want to decide whether place will work\n        # if we have nans in the False portion of our mask then we need to\n        # upcast (possibly), otherwise we DON't want to upcast (e.g. if we\n        # have values, say integers, in the success portion then it's ok to not\n        # upcast)\n        new_dtype, _ = maybe_promote(result.dtype, other)\n        if new_dtype != result.dtype:\n\n            # we have a scalar or len 0 ndarray\n            # and its nan and we are changing some values\n            if is_scalar(other) or (isinstance(other, np.ndarray) and other.ndim < 1):\n                if isna(other):\n                    return changeit()\n\n            # we have an ndarray and the masking has nans in it\n            else:\n\n                if isna(other).any():\n                    return changeit()\n\n        try:\n            np.place(result, mask, other)\n        except TypeError:\n            # e.g. int-dtype result and float-dtype other\n            return changeit()\n\n    return result, False",
                "def maybe_promote(dtype, fill_value=np.nan):\n    \"\"\"\n    Find the minimal dtype that can hold both the given dtype and fill_value.\n\n    Parameters\n    ----------\n    dtype : np.dtype or ExtensionDtype\n    fill_value : scalar, default np.nan\n\n    Returns\n    -------\n    dtype\n        Upcasted from dtype argument if necessary.\n    fill_value\n        Upcasted from fill_value argument if necessary.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(dtype):\n        # with object dtype there is nothing to promote, and the user can\n        #  pass pretty much any weird fill_value they like\n        raise ValueError(\"fill_value must be a scalar\")\n\n    # if we passed an array here, determine the fill value by dtype\n    if isinstance(fill_value, np.ndarray):\n        if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)):\n            fill_value = fill_value.dtype.type(\"NaT\", \"ns\")\n        else:\n\n            # we need to change to object type as our\n            # fill_value is of object type\n            if fill_value.dtype == np.object_:\n                dtype = np.dtype(np.object_)\n            fill_value = np.nan\n\n        if dtype == np.object_ or dtype.kind in [\"U\", \"S\"]:\n            # We treat string-like dtypes as object, and _always_ fill\n            #  with np.nan\n            fill_value = np.nan\n            dtype = np.dtype(np.object_)\n\n    # returns tuple of (dtype, fill_value)\n    if issubclass(dtype.type, np.datetime64):\n        if isinstance(fill_value, datetime) and fill_value.tzinfo is not None:\n            # Trying to insert tzaware into tznaive, have to cast to object\n            dtype = np.dtype(np.object_)\n        elif is_integer(fill_value) or (is_float(fill_value) and not isna(fill_value)):\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fill_value = tslibs.Timestamp(fill_value).to_datetime64()\n            except (TypeError, ValueError):\n                dtype = np.dtype(np.object_)\n    elif issubclass(dtype.type, np.timedelta64):\n        if (\n            is_integer(fill_value)\n            or (is_float(fill_value) and not np.isnan(fill_value))\n            or isinstance(fill_value, str)\n        ):\n            # TODO: What about str that can be a timedelta?\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fv = tslibs.Timedelta(fill_value)\n            except ValueError:\n                dtype = np.dtype(np.object_)\n            else:\n                if fv is NaT:\n                    # NaT has no `to_timedelta64` method\n                    fill_value = np.timedelta64(\"NaT\", \"ns\")\n                else:\n                    fill_value = fv.to_timedelta64()\n    elif is_datetime64tz_dtype(dtype):\n        if isna(fill_value):\n            fill_value = NaT\n        elif not isinstance(fill_value, datetime):\n            dtype = np.dtype(np.object_)\n        elif fill_value.tzinfo is None:\n            dtype = np.dtype(np.object_)\n        elif not tz_compare(fill_value.tzinfo, dtype.tz):\n            # TODO: sure we want to cast here?\n            dtype = np.dtype(np.object_)\n\n    elif is_extension_array_dtype(dtype) and isna(fill_value):\n        fill_value = dtype.na_value\n\n    elif is_float(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            dtype = np.dtype(np.float64)\n\n        elif dtype.kind == \"f\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.float64 and dtype is np.float32\n                dtype = mst\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n    elif is_integer(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            if not np.can_cast(fill_value, dtype):\n                # upcast to prevent overflow\n                mst = np.min_scalar_type(fill_value)\n                dtype = np.promote_types(dtype, mst)\n                if dtype.kind == \"f\":\n                    # Case where we disagree with numpy\n                    dtype = np.dtype(np.object_)\n\n    elif is_complex(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, (np.integer, np.floating)):\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.complex128 and dtype is np.complex64\n                dtype = mst\n\n    elif fill_value is None:\n        if is_float_dtype(dtype) or is_complex_dtype(dtype):\n            fill_value = np.nan\n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:\n            dtype = np.dtype(np.object_)\n            fill_value = np.nan\n    else:\n        dtype = np.dtype(np.object_)\n\n    # in case we have a string that looked like a number\n    if is_extension_array_dtype(dtype):\n        pass\n    elif issubclass(np.dtype(dtype).type, (bytes, str)):\n        dtype = np.dtype(np.object_)\n\n    fill_value = _ensure_dtype_type(fill_value, dtype)\n    return dtype, fill_value",
                "def _ensure_dtype_type(value, dtype):\n    \"\"\"\n    Ensure that the given value is an instance of the given dtype.\n\n    e.g. if out dtype is np.complex64, we should have an instance of that\n    as opposed to a python complex object.\n\n    Parameters\n    ----------\n    value : object\n    dtype : np.dtype or ExtensionDtype\n\n    Returns\n    -------\n    object\n    \"\"\"\n\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:\n        return value\n    elif isna(value):\n        # e.g. keep np.nan rather than try to cast to np.float32(np.nan)\n        return value\n\n    return dtype.type(value)",
                "def infer_dtype_from(val, pandas_dtype: bool = False):\n    \"\"\"\n    Interpret the dtype from a scalar or array.\n\n    Parameters\n    ----------\n    val : object\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar/array belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n    if is_scalar(val):\n        return infer_dtype_from_scalar(val, pandas_dtype=pandas_dtype)\n    return infer_dtype_from_array(val, pandas_dtype=pandas_dtype)",
                "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n\n    dtype = np.object_\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.object_\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.object_, val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.bool_\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = type(val)\n        else:\n            dtype = np.int64\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = type(val)\n        else:\n            dtype = np.float64\n\n    elif is_complex(val):\n        dtype = np.complex_\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n        elif lib.is_interval(val):\n            subtype = infer_dtype_from_scalar(val.left, pandas_dtype=True)[0]\n            dtype = IntervalDtype(subtype=subtype)\n\n    return dtype, val",
                "def infer_dtype_from_array(arr, pandas_dtype: bool = False):\n    \"\"\"\n    Infer the dtype from an array.\n\n    Parameters\n    ----------\n    arr : array\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, array belongs to pandas extension types\n        is inferred as object\n\n    Returns\n    -------\n    tuple (numpy-compat/pandas-compat dtype, array)\n\n    Notes\n    -----\n    if pandas_dtype=False. these infer to numpy dtypes\n    exactly with the exception that mixed / object dtypes\n    are not coerced by stringifying or conversion\n\n    if pandas_dtype=True. datetime64tz-aware/categorical\n    types will retain there character.\n\n    Examples\n    --------\n    >>> np.asarray([1, '1'])\n    array(['1', '1'], dtype='<U21')\n\n    >>> infer_dtype_from_array([1, '1'])\n    (numpy.object_, [1, '1'])\n    \"\"\"\n\n    if isinstance(arr, np.ndarray):\n        return arr.dtype, arr\n\n    if not is_list_like(arr):\n        arr = [arr]\n\n    if pandas_dtype and is_extension_array_dtype(arr):\n        return arr.dtype, arr\n\n    elif isinstance(arr, ABCSeries):\n        return arr.dtype, np.asarray(arr)\n\n    # don't force numpy coerce with nan's\n    inferred = lib.infer_dtype(arr, skipna=False)\n    if inferred in [\"string\", \"bytes\", \"unicode\", \"mixed\", \"mixed-integer\"]:\n        return (np.object_, arr)\n\n    arr = np.asarray(arr)\n    return arr.dtype, arr",
                "def maybe_infer_dtype_type(element):\n    \"\"\"\n    Try to infer an object's dtype, for use in arithmetic ops.\n\n    Uses `element.dtype` if that's available.\n    Objects implementing the iterator protocol are cast to a NumPy array,\n    and from there the array's type is used.\n\n    Parameters\n    ----------\n    element : object\n        Possibly has a `.dtype` attribute, and possibly the iterator\n        protocol.\n\n    Returns\n    -------\n    tipo : type\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Foo = namedtuple(\"Foo\", \"dtype\")\n    >>> maybe_infer_dtype_type(Foo(np.dtype(\"i8\")))\n    numpy.int64\n    \"\"\"\n    tipo = None\n    if hasattr(element, \"dtype\"):\n        tipo = element.dtype\n    elif is_list_like(element):\n        element = np.asarray(element)\n        tipo = element.dtype\n    return tipo",
                "def maybe_upcast(values, fill_value=np.nan, dtype=None, copy: bool = False):\n    \"\"\"\n    Provide explicit type promotion and coercion.\n\n    Parameters\n    ----------\n    values : ndarray or ExtensionArray\n        The array that we want to maybe upcast.\n    fill_value : what we want to fill with\n    dtype : if None, then use the dtype of the values, else coerce to this type\n    copy : bool, default True\n        If True always make a copy even if no upcast is required.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(values.dtype):\n        # We allow arbitrary fill values for object dtype\n        raise ValueError(\"fill_value must be a scalar\")\n\n    if is_extension_array_dtype(values):\n        if copy:\n            values = values.copy()\n    else:\n        if dtype is None:\n            dtype = values.dtype\n        new_dtype, fill_value = maybe_promote(dtype, fill_value)\n        if new_dtype != values.dtype:\n            values = values.astype(new_dtype)\n        elif copy:\n            values = values.copy()\n\n    return values, fill_value",
                "def invalidate_string_dtypes(dtype_set):\n    \"\"\"Change string like dtypes to object for\n    ``DataFrame.select_dtypes()``.\n    \"\"\"\n    non_string_dtypes = dtype_set - {np.dtype(\"S\").type, np.dtype(\"<U\").type}\n    if non_string_dtypes != dtype_set:\n        raise TypeError(\"string dtypes are not allowed, use 'object' instead\")",
                "def coerce_indexer_dtype(indexer, categories):\n    \"\"\" coerce the indexer input array to the smallest dtype possible \"\"\"\n    length = len(categories)\n    if length < _int8_max:\n        return ensure_int8(indexer)\n    elif length < _int16_max:\n        return ensure_int16(indexer)\n    elif length < _int32_max:\n        return ensure_int32(indexer)\n    return ensure_int64(indexer)",
                "def coerce_to_dtypes(result, dtypes):\n    \"\"\"\n    given a dtypes and a result set, coerce the result elements to the\n    dtypes\n    \"\"\"\n    if len(result) != len(dtypes):\n        raise AssertionError(\"_coerce_to_dtypes requires equal len arrays\")\n\n    def conv(r, dtype):\n        if np.any(isna(r)):\n            pass\n        elif dtype == _NS_DTYPE:\n            r = tslibs.Timestamp(r)\n        elif dtype == _TD_DTYPE:\n            r = tslibs.Timedelta(r)\n        elif dtype == np.bool_:\n            # messy. non 0/1 integers do not get converted.\n            if is_integer(r) and r not in [0, 1]:\n                return int(r)\n            r = bool(r)\n        elif dtype.kind == \"f\":\n            r = float(r)\n        elif dtype.kind == \"i\":\n            r = int(r)\n\n        return r\n\n    return [conv(r, dtype) for r, dtype in zip(result, dtypes)]",
                "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        # allow frequency conversions\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        if dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
                "def maybe_convert_objects(values: np.ndarray, convert_numeric: bool = True):\n    \"\"\"\n    If we have an object dtype array, try to coerce dates and/or numbers.\n\n    Parameters\n    ----------\n    values : ndarray\n    convert_numeric : bool, default True\n\n    Returns\n    -------\n    ndarray or DatetimeIndex\n    \"\"\"\n    validate_bool_kwarg(convert_numeric, \"convert_numeric\")\n\n    orig_values = values\n\n    # convert dates\n    if is_object_dtype(values.dtype):\n        values = lib.maybe_convert_objects(values, convert_datetime=True)\n\n    # convert timedeltas\n    if is_object_dtype(values.dtype):\n        values = lib.maybe_convert_objects(values, convert_timedelta=True)\n\n    # convert to numeric\n    if is_object_dtype(values.dtype):\n        if convert_numeric:\n            try:\n                new_values = lib.maybe_convert_numeric(\n                    values, set(), coerce_numeric=True\n                )\n            except (ValueError, TypeError):\n                pass\n            else:\n                # if we are all nans then leave me alone\n                if not isna(new_values).all():\n                    values = new_values\n\n        else:\n            # soft-conversion\n            values = lib.maybe_convert_objects(values)\n\n    if values is orig_values:\n        values = values.copy()\n\n    return values",
                "def soft_convert_objects(\n    values: np.ndarray,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n    copy: bool = True,\n):\n    \"\"\" if we have an object dtype, try to coerce dates and/or numbers \"\"\"\n\n    validate_bool_kwarg(datetime, \"datetime\")\n    validate_bool_kwarg(numeric, \"numeric\")\n    validate_bool_kwarg(timedelta, \"timedelta\")\n    validate_bool_kwarg(coerce, \"coerce\")\n    validate_bool_kwarg(copy, \"copy\")\n\n    conversion_count = sum((datetime, numeric, timedelta))\n    if conversion_count == 0:\n        raise ValueError(\"At least one of datetime, numeric or timedelta must be True.\")\n    elif conversion_count > 1 and coerce:\n        raise ValueError(\n            \"Only one of 'datetime', 'numeric' or \"\n            \"'timedelta' can be True when when coerce=True.\"\n        )\n\n    if not is_object_dtype(values.dtype):\n        # If not object, do not attempt conversion\n        values = values.copy() if copy else values\n        return values\n\n    # If 1 flag is coerce, ensure 2 others are False\n    if coerce:\n        # Immediate return if coerce\n        if datetime:\n            from pandas import to_datetime\n\n            return to_datetime(values, errors=\"coerce\").to_numpy()\n        elif timedelta:\n            from pandas import to_timedelta\n\n            return to_timedelta(values, errors=\"coerce\").to_numpy()\n        elif numeric:\n            from pandas import to_numeric\n\n            return to_numeric(values, errors=\"coerce\")\n\n    # Soft conversions\n    if datetime:\n        # GH 20380, when datetime is beyond year 2262, hence outside\n        # bound of nanosecond-resolution 64-bit integers.\n        try:\n            values = lib.maybe_convert_objects(values, convert_datetime=True)\n        except OutOfBoundsDatetime:\n            pass\n\n    if timedelta and is_object_dtype(values.dtype):\n        # Object check to ensure only run if previous did not convert\n        values = lib.maybe_convert_objects(values, convert_timedelta=True)\n\n    if numeric and is_object_dtype(values.dtype):\n        try:\n            converted = lib.maybe_convert_numeric(values, set(), coerce_numeric=True)\n        except (ValueError, TypeError):\n            pass\n        else:\n            # If all NaNs, then do not-alter\n            values = converted if not isna(converted).all() else values\n            values = values.copy() if copy else values\n\n    return values",
                "def maybe_castable(arr) -> bool:\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
                "def maybe_infer_to_datetimelike(value, convert_dates: bool = False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            return to_timedelta(v)._ndarray_values.reshape(shape)\n        except ValueError:\n            return v.reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
                "def maybe_cast_to_datetime(value, dtype, errors: str = \"raise\"):\n    \"\"\" try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                f\"The '{dtype.name}' dtype has no unit. \"\n                f\"Please pass in '{dtype.name}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, _NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg)\n                    dtype = _NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert datetimelike to dtype [{dtype}]\")\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, _TD_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg)\n                    dtype = _TD_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert timedeltalike to dtype [{dtype}]\")\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(value) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != _NS_DTYPE:\n                    value = value.astype(_NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(f\"Cannot cast datetime64 to {dtype}\")\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != _NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != _TD_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
                "def find_common_type(types):\n    \"\"\"\n    Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type\n\n    \"\"\"\n\n    if len(types) == 0:\n        raise ValueError(\"no types given\")\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    if any(isinstance(t, ExtensionDtype) for t in types):\n        return np.object\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype(\"datetime64[ns]\")\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype(\"timedelta64[ns]\")\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])",
                "def cast_scalar_to_array(shape, value, dtype=None):\n    \"\"\"\n    Create np.ndarray of specified shape and dtype, filled with values.\n\n    Parameters\n    ----------\n    shape : tuple\n    value : scalar value\n    dtype : np.dtype, optional\n        dtype to coerce\n\n    Returns\n    -------\n    ndarray of shape, filled with value, of specified / inferred dtype\n\n    \"\"\"\n\n    if dtype is None:\n        dtype, fill_value = infer_dtype_from_scalar(value)\n    else:\n        fill_value = value\n\n    values = np.empty(shape, dtype=dtype)\n    values.fill(fill_value)\n\n    return values",
                "def construct_1d_arraylike_from_scalar(value, length: int, dtype):\n    \"\"\"\n    create a np.ndarray / pandas type of specified shape and dtype\n    filled with values\n\n    Parameters\n    ----------\n    value : scalar value\n    length : int\n    dtype : pandas_dtype / np.dtype\n\n    Returns\n    -------\n    np.ndarray / pandas type of length, filled with value\n\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        cls = dtype.construct_array_type()\n        subarr = cls._from_sequence([value] * length, dtype=dtype)\n\n    else:\n        if not isinstance(dtype, (np.dtype, type(np.dtype))):\n            dtype = dtype.dtype\n\n        if length and is_integer_dtype(dtype) and isna(value):\n            # coerce if we have nan for an integer dtype\n            dtype = np.dtype(\"float64\")\n        elif isinstance(dtype, np.dtype) and dtype.kind in (\"U\", \"S\"):\n            # we need to coerce to object dtype to avoid\n            # to allow numpy to take our string as a scalar value\n            dtype = object\n            if not isna(value):\n                value = ensure_str(value)\n\n        subarr = np.empty(length, dtype=dtype)\n        subarr.fill(value)\n\n    return subarr",
                "def construct_1d_object_array_from_listlike(values):\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
                "def construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool = False):\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
                "def maybe_cast_to_integer_array(arr, dtype, copy: bool = False):\n    \"\"\"\n    Takes any dtype and returns the casted version, raising for when data is\n    incompatible with integer/unsigned integer dtypes.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    arr : array-like\n        The array to cast.\n    dtype : str, np.dtype\n        The integer dtype to cast the array to.\n    copy: bool, default False\n        Whether to make a copy of the array before returning.\n\n    Returns\n    -------\n    int_arr : ndarray\n        An array of integer or unsigned integer dtype\n\n    Raises\n    ------\n    OverflowError : the dtype is incompatible with the data\n    ValueError : loss of precision has occurred during casting\n\n    Examples\n    --------\n    If you try to coerce negative values to unsigned integers, it raises:\n\n    >>> Series([-1], dtype=\"uint64\")\n    Traceback (most recent call last):\n        ...\n    OverflowError: Trying to coerce negative values to unsigned integers\n\n    Also, if you try to coerce float values to integers, it raises:\n\n    >>> Series([1, 2, 3.5], dtype=\"int64\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Trying to coerce float values to integers\n    \"\"\"\n\n    try:\n        if not hasattr(arr, \"astype\"):\n            casted = np.array(arr, dtype=dtype, copy=copy)\n        else:\n            casted = arr.astype(dtype, copy=copy)\n    except OverflowError:\n        raise OverflowError(\n            \"The elements provided in the data cannot all be \"\n            f\"casted to the dtype {dtype}\"\n        )\n\n    if np.array_equal(arr, casted):\n        return casted\n\n    # We do this casting to allow for proper\n    # data and dtype checking.\n    #\n    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or is_object_dtype(arr)):\n        raise ValueError(\"Trying to coerce float values to integers\")",
                "def trans(x):\n    if do_round:\n        return x.round()\n    return x",
                "def conv(r, dtype):\n    if np.any(isna(r)):\n        pass\n    elif dtype == _NS_DTYPE:\n        r = tslibs.Timestamp(r)\n    elif dtype == _TD_DTYPE:\n        r = tslibs.Timedelta(r)\n    elif dtype == np.bool_:\n        # messy. non 0/1 integers do not get converted.\n        if is_integer(r) and r not in [0, 1]:\n            return int(r)\n        r = bool(r)\n    elif dtype.kind == \"f\":\n        r = float(r)\n    elif dtype.kind == \"i\":\n        r = int(r)\n\n    return r",
                "def try_datetime(v):\n    # safe coerce to datetime64\n    try:\n        # GH19671\n        v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n    except ValueError:\n\n        # we might have a sequence of the same-datetimes with tz's\n        # if so coerce to a DatetimeIndex; if they are not the same,\n        # then these stay as object dtype, xref GH19671\n        from pandas._libs.tslibs import conversion\n        from pandas import DatetimeIndex\n\n        try:\n\n            values, tz = conversion.datetime_to_datetime64(v)\n            return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n        except (ValueError, TypeError):\n            pass\n\n    except Exception:\n        pass\n\n    return v.reshape(shape)",
                "def try_timedelta(v):\n    # safe coerce to timedelta64\n\n    # will try first with a string & object conversion\n    from pandas import to_timedelta\n\n    try:\n        return to_timedelta(v)._ndarray_values.reshape(shape)\n    except ValueError:\n        return v.reshape(shape)",
                "def changeit():\n\n    # try to directly set by expanding our array to full\n    # length of the boolean\n    try:\n        om = other[mask]\n    except (IndexError, TypeError):\n        # IndexError occurs in test_upcast when we have a boolean\n        #  mask of the wrong shape\n        # TypeError occurs in test_upcast when `other` is a bool\n        pass\n    else:\n        om_at = om.astype(result.dtype)\n        if (om == om_at).all():\n            new_result = result.values.copy()\n            new_result[mask] = om_at\n            result[:] = new_result\n            return result, False\n\n    # we are forced to change the dtype of the result as the input\n    # isn't compatible\n    r, _ = maybe_upcast(result, fill_value=other, copy=True)\n    np.place(r, mask, other)\n\n    return r, True"
            ],
            "inscope_function_signatures": [
                "maybe_convert_platform(values)",
                "is_nested_object(obj) -> bool",
                "maybe_downcast_to_dtype(result, dtype)",
                "maybe_downcast_numeric(result, dtype, do_round: bool=False)",
                "maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other)",
                "maybe_promote(dtype, fill_value=np.nan)",
                "_ensure_dtype_type(value, dtype)",
                "infer_dtype_from(val, pandas_dtype: bool=False)",
                "infer_dtype_from_scalar(val, pandas_dtype: bool=False)",
                "infer_dtype_from_array(arr, pandas_dtype: bool=False)",
                "maybe_infer_dtype_type(element)",
                "maybe_upcast(values, fill_value=np.nan, dtype=None, copy: bool=False)",
                "invalidate_string_dtypes(dtype_set)",
                "coerce_indexer_dtype(indexer, categories)",
                "coerce_to_dtypes(result, dtypes)",
                "astype_nansafe(arr, dtype, copy: bool=True, skipna: bool=False)",
                "maybe_convert_objects(values: np.ndarray, convert_numeric: bool=True)",
                "soft_convert_objects(values: np.ndarray, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False, copy: bool=True)",
                "maybe_castable(arr) -> bool",
                "maybe_infer_to_datetimelike(value, convert_dates: bool=False)",
                "maybe_cast_to_datetime(value, dtype, errors: str='raise')",
                "find_common_type(types)",
                "cast_scalar_to_array(shape, value, dtype=None)",
                "construct_1d_arraylike_from_scalar(value, length: int, dtype)",
                "construct_1d_object_array_from_listlike(values)",
                "construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool=False)",
                "maybe_cast_to_integer_array(arr, dtype, copy: bool=False)",
                "trans(x)",
                "conv(r, dtype)",
                "try_datetime(v)",
                "try_timedelta(v)",
                "changeit()"
            ],
            "variables_in_file": {
                "_int8_max": [
                    57,
                    753
                ],
                "max": [
                    57,
                    58,
                    59,
                    60
                ],
                "np.iinfo": [
                    57,
                    58,
                    59,
                    60
                ],
                "np": [
                    516,
                    1057,
                    554,
                    557,
                    57,
                    58,
                    59,
                    60,
                    573,
                    575,
                    578,
                    68,
                    584,
                    587,
                    589,
                    592,
                    595,
                    598,
                    601,
                    604,
                    607,
                    1142,
                    120,
                    126,
                    1160,
                    654,
                    664,
                    1178,
                    669,
                    671,
                    1189,
                    1196,
                    174,
                    181,
                    704,
                    709,
                    201,
                    207,
                    1231,
                    212,
                    1239,
                    221,
                    225,
                    745,
                    234,
                    1258,
                    771,
                    264,
                    777,
                    1295,
                    1299,
                    1301,
                    281,
                    283,
                    1309,
                    1311,
                    816,
                    307,
                    824,
                    825,
                    1336,
                    321,
                    836,
                    837,
                    332,
                    846,
                    847,
                    1363,
                    340,
                    854,
                    856,
                    1368,
                    1369,
                    862,
                    1376,
                    362,
                    363,
                    369,
                    370,
                    371,
                    373,
                    376,
                    377,
                    1402,
                    891,
                    380,
                    383,
                    385,
                    390,
                    391,
                    394,
                    398,
                    403,
                    407,
                    1431,
                    414,
                    416,
                    1442,
                    419,
                    425,
                    426,
                    428,
                    429,
                    941,
                    432,
                    438,
                    439,
                    442,
                    443,
                    446,
                    447,
                    449,
                    450,
                    452,
                    453,
                    456,
                    459,
                    460,
                    462,
                    463,
                    464,
                    467,
                    1493,
                    474,
                    476,
                    477,
                    1502,
                    481,
                    482,
                    484,
                    1510,
                    489,
                    490
                ],
                "np.int8": [
                    57
                ],
                "_int16_max": [
                    58,
                    755
                ],
                "np.int16": [
                    58
                ],
                "_int32_max": [
                    59,
                    757
                ],
                "np.int32": [
                    59
                ],
                "_int64_max": [
                    60
                ],
                "np.int64": [
                    836,
                    837,
                    598,
                    824,
                    825,
                    60
                ],
                "isinstance": [
                    264,
                    395,
                    654,
                    1294,
                    1045,
                    663,
                    1049,
                    1050,
                    413,
                    557,
                    174,
                    816,
                    178,
                    565,
                    575,
                    321,
                    66,
                    587,
                    207,
                    595,
                    1363,
                    85,
                    87,
                    1239,
                    601,
                    1369,
                    101,
                    105,
                    362,
                    1141,
                    381
                ],
                "values": [
                    906,
                    909,
                    910,
                    913,
                    914,
                    917,
                    1431,
                    921,
                    928,
                    1440,
                    1442,
                    932,
                    934,
                    935,
                    937,
                    1336,
                    1337,
                    1339,
                    1085,
                    1086,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    965,
                    73,
                    967,
                    968,
                    976,
                    722,
                    980,
                    726,
                    728,
                    984,
                    731,
                    733,
                    734,
                    991,
                    736,
                    738,
                    995,
                    997,
                    871,
                    999,
                    1001,
                    875,
                    1006,
                    1007,
                    1009,
                    1402,
                    1403
                ],
                "list": [
                    178,
                    66
                ],
                "tuple": [
                    66
                ],
                "range": [
                    66
                ],
                "construct_1d_object_array_from_listlike": [
                    67
                ],
                "getattr": [
                    68
                ],
                "np.object_": [
                    385,
                    516,
                    390,
                    398,
                    403,
                    669,
                    414,
                    416,
                    419,
                    426,
                    554,
                    443,
                    573,
                    447,
                    68,
                    456,
                    584,
                    460,
                    212,
                    481,
                    484,
                    490,
                    1258,
                    369,
                    370,
                    373,
                    377,
                    383
                ],
                "hasattr": [
                    1492,
                    701,
                    69,
                    135
                ],
                "values._values": [
                    70
                ],
                "lib.maybe_convert_objects": [
                    932,
                    997,
                    71,
                    910,
                    914,
                    991
                ],
                "lib": [
                    610,
                    932,
                    613,
                    997,
                    71,
                    1125,
                    1001,
                    107,
                    910,
                    914,
                    1106,
                    820,
                    920,
                    991,
                    667,
                    863
                ],
                "obj": [
                    85,
                    87
                ],
                "ABCSeries": [
                    663,
                    1049,
                    85,
                    87
                ],
                "is_object_dtype": [
                    835,
                    356,
                    965,
                    995,
                    999,
                    1060,
                    1515,
                    1228,
                    909,
                    913,
                    722,
                    884,
                    85,
                    917,
                    823,
                    859
                ],
                "any": [
                    328,
                    1512,
                    203,
                    1294,
                    87,
                    1305
                ],
                "v": [
                    1053,
                    1055,
                    1056,
                    1057,
                    1060,
                    1063,
                    1064,
                    1065,
                    1067,
                    1074,
                    1085,
                    1093,
                    1102,
                    1104,
                    1106,
                    1109,
                    1111,
                    87,
                    1113,
                    1117,
                    1118,
                    1124,
                    1128
                ],
                "obj.values": [
                    87
                ],
                "bool": [
                    1026,
                    525,
                    781,
                    792,
                    542,
                    160,
                    1448,
                    942,
                    943,
                    944,
                    945,
                    946,
                    709,
                    76,
                    207,
                    620,
                    1012,
                    891,
                    1407
                ],
                "do_round": [
                    128,
                    97,
                    121,
                    184
                ],
                "is_scalar": [
                    321,
                    1185,
                    99,
                    356,
                    266,
                    722,
                    1171,
                    277,
                    537
                ],
                "result": [
                    128,
                    129,
                    134,
                    264,
                    141,
                    142,
                    144,
                    276,
                    789,
                    151,
                    279,
                    281,
                    283,
                    157,
                    297,
                    299,
                    301,
                    302,
                    176,
                    178,
                    306,
                    181,
                    188,
                    316,
                    190,
                    191,
                    317,
                    195,
                    197,
                    200,
                    332,
                    205,
                    846,
                    847,
                    848,
                    209,
                    337,
                    212,
                    213,
                    215,
                    216,
                    218,
                    221,
                    226,
                    99,
                    100,
                    101,
                    227,
                    103,
                    229,
                    231,
                    107,
                    120,
                    1402,
                    1403,
                    1404,
                    767
                ],
                "ABCDataFrame": [
                    101
                ],
                "dtype": [
                    514,
                    516,
                    522,
                    554,
                    562,
                    573,
                    578,
                    581,
                    589,
                    592,
                    596,
                    598,
                    602,
                    604,
                    607,
                    611,
                    615,
                    105,
                    106,
                    617,
                    109,
                    111,
                    113,
                    115,
                    1140,
                    1141,
                    1142,
                    119,
                    1144,
                    1145,
                    1146,
                    124,
                    126,
                    128,
                    1152,
                    1153,
                    1156,
                    134,
                    135,
                    1160,
                    137,
                    1161,
                    1163,
                    1165,
                    142,
                    144,
                    146,
                    1174,
                    151,
                    1178,
                    1179,
                    1181,
                    1183,
                    1196,
                    174,
                    188,
                    190,
                    1214,
                    193,
                    1218,
                    197,
                    1227,
                    1228,
                    1235,
                    215,
                    730,
                    731,
                    732,
                    1244,
                    1246,
                    225,
                    1249,
                    229,
                    773,
                    775,
                    777,
                    782,
                    784,
                    789,
                    813,
                    814,
                    816,
                    817,
                    819,
                    1331,
                    1332,
                    823,
                    1336,
                    825,
                    826,
                    829,
                    830,
                    832,
                    835,
                    837,
                    838,
                    840,
                    844,
                    846,
                    1358,
                    1359,
                    849,
                    1360,
                    1363,
                    852,
                    1364,
                    854,
                    1366,
                    1368,
                    1369,
                    1372,
                    862,
                    863,
                    1376,
                    356,
                    868,
                    871,
                    872,
                    875,
                    877,
                    879,
                    880,
                    370,
                    884,
                    373,
                    886,
                    888,
                    377,
                    380,
                    383,
                    385,
                    390,
                    391,
                    398,
                    403,
                    1431,
                    1433,
                    410,
                    414,
                    416,
                    417,
                    419,
                    421,
                    422,
                    425,
                    426,
                    428,
                    429,
                    431,
                    433,
                    435,
                    437,
                    439,
                    442,
                    443,
                    446,
                    447,
                    449,
                    450,
                    453,
                    454,
                    456,
                    459,
                    460,
                    462,
                    464,
                    466,
                    468,
                    1493,
                    470,
                    1495,
                    473,
                    475,
                    476,
                    1499,
                    478,
                    479,
                    481,
                    484,
                    487,
                    1512,
                    489,
                    490,
                    1515,
                    492,
                    493
                ],
                "str": [
                    105,
                    489,
                    395,
                    1133,
                    819,
                    565,
                    1141
                ],
                "inferred_type": [
                    107,
                    108,
                    110,
                    112,
                    114,
                    1106,
                    1108,
                    118,
                    1110,
                    1112,
                    1114
                ],
                "lib.infer_dtype": [
                    107,
                    667,
                    1125
                ],
                "ensure_object": [
                    1106,
                    107
                ],
                "result.ravel": [
                    200,
                    107
                ],
                "issubclass": [
                    225,
                    449,
                    391,
                    425,
                    489,
                    363,
                    428,
                    459,
                    462,
                    1258,
                    819,
                    212,
                    120,
                    442,
                    380,
                    446
                ],
                "result.dtype.type": [
                    120,
                    212,
                    279
                ],
                "result.dtype": [
                    226,
                    227,
                    134,
                    297,
                    212,
                    276,
                    316,
                    279,
                    120,
                    281,
                    283,
                    188,
                    317,
                    190,
                    216
                ],
                "np.number": [
                    120,
                    212
                ],
                "np.dtype": [
                    385,
                    390,
                    1160,
                    398,
                    403,
                    1299,
                    1301,
                    1178,
                    414,
                    416,
                    419,
                    426,
                    429,
                    174,
                    816,
                    443,
                    447,
                    578,
                    456,
                    460,
                    589,
                    1363,
                    1368,
                    1369,
                    481,
                    484,
                    489,
                    490,
                    745,
                    370,
                    1142,
                    377,
                    126,
                    383
                ],
                "converted": [
                    128,
                    129,
                    130,
                    1001,
                    1006
                ],
                "maybe_downcast_numeric": [
                    128
                ],
                "dtype.kind": [
                    1249,
                    134,
                    454,
                    1433,
                    844,
                    782,
                    431,
                    784,
                    466,
                    437,
                    373,
                    1369,
                    188,
                    829,
                    1246
                ],
                "result.dtype.kind": [
                    216,
                    188,
                    276,
                    134
                ],
                "dtype.tz": [
                    417,
                    1218,
                    137,
                    142,
                    1214
                ],
                "tz_localize": [
                    141,
                    1086
                ],
                "to_datetime": [
                    871,
                    141,
                    1199,
                    976,
                    1211
                ],
                "result.tz_convert": [
                    142
                ],
                "result.astype": [
                    144,
                    229
                ],
                "dtype.type": [
                    225,
                    449,
                    391,
                    425,
                    522,
                    459,
                    428,
                    462,
                    862,
                    146,
                    819,
                    442,
                    380,
                    446,
                    479
                ],
                "Period": [
                    146
                ],
                "PeriodArray": [
                    151
                ],
                "dtype.freq": [
                    151
                ],
                "TypeError": [
                    832,
                    1183,
                    291,
                    389,
                    1223,
                    1002,
                    747,
                    333,
                    1165,
                    1235,
                    852,
                    152,
                    923,
                    1087
                ],
                "np.array": [
                    1057,
                    1189,
                    201,
                    181,
                    1493,
                    1431,
                    281,
                    283
                ],
                "x.round": [
                    185
                ],
                "x": [
                    185,
                    186
                ],
                "result.dtype.itemsize": [
                    190
                ],
                "dtype.itemsize": [
                    190
                ],
                "result.size": [
                    195,
                    190
                ],
                "is_bool_dtype": [
                    193,
                    226,
                    1305
                ],
                "is_integer_dtype": [
                    193,
                    1515,
                    1366,
                    282,
                    475,
                    1308
                ],
                "astype": [
                    197,
                    846,
                    215
                ],
                "trans": [
                    197,
                    215
                ],
                "r": [
                    771,
                    774,
                    200,
                    201,
                    776,
                    779,
                    780,
                    781,
                    207,
                    783,
                    785,
                    306,
                    307,
                    787,
                    309,
                    789
                ],
                "arr": [
                    654,
                    655,
                    657,
                    658,
                    660,
                    661,
                    663,
                    664,
                    667,
                    669,
                    671,
                    672,
                    814,
                    820,
                    822,
                    824,
                    826,
                    830,
                    832,
                    834,
                    836,
                    838,
                    201,
                    203,
                    845,
                    846,
                    850,
                    852,
                    1492,
                    854,
                    1493,
                    856,
                    1495,
                    859,
                    1502,
                    863,
                    1510,
                    871,
                    1512,
                    875,
                    1515,
                    884,
                    886,
                    888,
                    1017,
                    1019,
                    1021,
                    1023
                ],
                "isna": [
                    384,
                    1440,
                    322,
                    771,
                    1186,
                    421,
                    518,
                    328,
                    203,
                    845,
                    1006,
                    1171,
                    278,
                    1366,
                    411,
                    1373,
                    1117,
                    927
                ],
                "np.integer": [
                    449,
                    1258,
                    428,
                    462,
                    207,
                    595,
                    854,
                    862
                ],
                "np.floating": [
                    225,
                    462,
                    207,
                    854,
                    601
                ],
                "np.bool": [
                    207
                ],
                "int": [
                    785,
                    780,
                    1342,
                    207
                ],
                "float": [
                    783,
                    207
                ],
                "all": [
                    298,
                    1291,
                    1006,
                    1298,
                    1300,
                    213,
                    856,
                    218,
                    1117,
                    927
                ],
                "notna": [
                    213
                ],
                "new_result": [
                    299,
                    300,
                    301,
                    215,
                    216,
                    218,
                    219,
                    221,
                    222
                ],
                "new_result.dtype.kind": [
                    216
                ],
                "new_result.dtype": [
                    216
                ],
                "np.allclose": [
                    221
                ],
                "is_string_dtype": [
                    1210,
                    227
                ],
                "np.ndarray": [
                    321,
                    264,
                    234,
                    362,
                    557,
                    654,
                    941,
                    1239,
                    891
                ],
                "ValueError": [
                    389,
                    1285,
                    265,
                    1162,
                    269,
                    402,
                    923,
                    1180,
                    560,
                    1075,
                    958,
                    1087,
                    960,
                    1223,
                    1103,
                    724,
                    857,
                    359,
                    1002,
                    1516,
                    882
                ],
                "other": [
                    321,
                    290,
                    322,
                    328,
                    266,
                    332,
                    306,
                    307,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    316
                ],
                "mask.any": [
                    271
                ],
                "mask": [
                    290,
                    300,
                    332,
                    845,
                    271,
                    847,
                    307
                ],
                "is_integer": [
                    384,
                    393,
                    779,
                    594,
                    280,
                    445
                ],
                "om": [
                    297,
                    290,
                    298
                ],
                "IndexError": [
                    291
                ],
                "om_at": [
                    297,
                    298,
                    300
                ],
                "om.astype": [
                    297
                ],
                "result.values.copy": [
                    299
                ],
                "result.values": [
                    299
                ],
                "_": [
                    306,
                    316
                ],
                "maybe_upcast": [
                    306
                ],
                "np.place": [
                    307,
                    332
                ],
                "new_dtype": [
                    316,
                    317,
                    732,
                    733,
                    734
                ],
                "maybe_promote": [
                    732,
                    316
                ],
                "other.ndim": [
                    321
                ],
                "changeit": [
                    329,
                    323,
                    335
                ],
                "np.nan": [
                    482,
                    709,
                    847,
                    371,
                    340,
                    376,
                    474,
                    477
                ],
                "fill_value": [
                    384,
                    388,
                    393,
                    394,
                    395,
                    401,
                    407,
                    409,
                    411,
                    412,
                    413,
                    415,
                    417,
                    421,
                    422,
                    424,
                    432,
                    1332,
                    438,
                    1334,
                    441,
                    1337,
                    445,
                    450,
                    452,
                    458,
                    463,
                    722,
                    467,
                    472,
                    474,
                    732,
                    477,
                    479,
                    482,
                    738,
                    356,
                    362,
                    363,
                    364,
                    492,
                    493,
                    369,
                    371,
                    376,
                    381
                ],
                "fill_value.dtype.type": [
                    363,
                    364
                ],
                "fill_value.dtype": [
                    369,
                    363,
                    364
                ],
                "np.datetime64": [
                    363,
                    380,
                    575
                ],
                "np.timedelta64": [
                    407,
                    587,
                    363,
                    391
                ],
                "datetime": [
                    973,
                    950,
                    987,
                    956,
                    381,
                    413,
                    575
                ],
                "fill_value.tzinfo": [
                    417,
                    381,
                    415
                ],
                "is_float": [
                    384,
                    394,
                    600,
                    424
                ],
                "to_datetime64": [
                    388
                ],
                "tslibs.Timestamp": [
                    576,
                    388,
                    774
                ],
                "tslibs": [
                    576,
                    577,
                    388,
                    836,
                    774,
                    776,
                    588,
                    401,
                    1247
                ],
                "np.isnan": [
                    394
                ],
                "fv": [
                    401,
                    409,
                    405
                ],
                "tslibs.Timedelta": [
                    776,
                    401,
                    588
                ],
                "NaT": [
                    412,
                    405
                ],
                "fv.to_timedelta64": [
                    409
                ],
                "is_datetime64tz_dtype": [
                    1145,
                    410
                ],
                "tz_compare": [
                    417
                ],
                "is_extension_array_dtype": [
                    514,
                    421,
                    487,
                    813,
                    1358,
                    660,
                    726
                ],
                "dtype.na_value": [
                    422
                ],
                "np.bool_": [
                    425,
                    777,
                    459,
                    592,
                    442,
                    446
                ],
                "np.float64": [
                    476,
                    429,
                    846,
                    604
                ],
                "mst": [
                    452,
                    453,
                    463,
                    432,
                    433,
                    464,
                    435,
                    467,
                    468,
                    438,
                    439,
                    470
                ],
                "np.min_scalar_type": [
                    452,
                    463,
                    432,
                    467,
                    438
                ],
                "np.promote_types": [
                    464,
                    453,
                    439
                ],
                "is_bool": [
                    441,
                    591
                ],
                "np.can_cast": [
                    450
                ],
                "is_complex": [
                    458,
                    606
                ],
                "is_float_dtype": [
                    473,
                    1515,
                    1308
                ],
                "is_complex_dtype": [
                    473,
                    1308
                ],
                "is_datetime_or_timedelta_dtype": [
                    478
                ],
                "type": [
                    489,
                    745,
                    1363,
                    596,
                    602
                ],
                "bytes": [
                    489
                ],
                "_ensure_dtype_type": [
                    492
                ],
                "value": [
                    515,
                    517,
                    518,
                    520,
                    522,
                    1171,
                    1172,
                    1046,
                    1048,
                    1049,
                    1050,
                    1051,
                    1053,
                    1185,
                    1186,
                    1187,
                    1061,
                    1189,
                    1192,
                    1193,
                    1068,
                    1196,
                    1199,
                    1202,
                    1203,
                    1204,
                    1332,
                    1334,
                    1210,
                    1211,
                    1214,
                    1218,
                    1220,
                    1227,
                    588,
                    1229,
                    1230,
                    1231,
                    1360,
                    1109,
                    1366,
                    1111,
                    1239,
                    1113,
                    1243,
                    1244,
                    1373,
                    1118,
                    1247,
                    1374,
                    1377,
                    1250,
                    1124,
                    1125,
                    1128,
                    1130,
                    1258,
                    1261,
                    1263
                ],
                "val": [
                    537,
                    538,
                    539,
                    557,
                    559,
                    562,
                    563,
                    565,
                    575,
                    576,
                    577,
                    581,
                    584,
                    585,
                    587,
                    588,
                    591,
                    594,
                    595,
                    596,
                    600,
                    601,
                    602,
                    606,
                    610,
                    611,
                    612,
                    613,
                    614,
                    617
                ],
                "infer_dtype_from_scalar": [
                    538,
                    1332,
                    614
                ],
                "pandas_dtype": [
                    609,
                    580,
                    817,
                    660,
                    538,
                    539
                ],
                "infer_dtype_from_array": [
                    539
                ],
                "msg": [
                    1162,
                    878,
                    558,
                    560,
                    882,
                    1180,
                    1151
                ],
                "val.ndim": [
                    559
                ],
                "val.dtype": [
                    562
                ],
                "val.item": [
                    563
                ],
                "tslibs.NaT": [
                    577
                ],
                "val.tz": [
                    577,
                    581
                ],
                "DatetimeTZDtype": [
                    581
                ],
                "val.value": [
                    585
                ],
                "timedelta": [
                    995,
                    587,
                    977,
                    952,
                    956
                ],
                "np.complex_": [
                    607
                ],
                "lib.is_period": [
                    610
                ],
                "PeriodDtype": [
                    611
                ],
                "val.freq": [
                    611
                ],
                "val.ordinal": [
                    612
                ],
                "lib.is_interval": [
                    613
                ],
                "subtype": [
                    614,
                    615
                ],
                "val.left": [
                    614
                ],
                "IntervalDtype": [
                    615
                ],
                "arr.dtype": [
                    832,
                    672,
                    655,
                    852,
                    661,
                    854,
                    664,
                    1017,
                    1019,
                    1021,
                    1023
                ],
                "is_list_like": [
                    657,
                    1055,
                    703
                ],
                "np.asarray": [
                    704,
                    1442,
                    1510,
                    1231,
                    664,
                    671
                ],
                "inferred": [
                    667,
                    668
                ],
                "tipo": [
                    705,
                    706,
                    700,
                    702
                ],
                "element": [
                    704,
                    705,
                    701,
                    702,
                    703
                ],
                "element.dtype": [
                    705,
                    702
                ],
                "values.dtype": [
                    995,
                    965,
                    999,
                    909,
                    913,
                    722,
                    917,
                    731,
                    733
                ],
                "copy": [
                    1431,
                    1495,
                    871,
                    967,
                    875,
                    814,
                    1007,
                    850,
                    884,
                    1493,
                    727,
                    954,
                    735
                ],
                "values.copy": [
                    736,
                    967,
                    935,
                    1007,
                    728
                ],
                "values.astype": [
                    734
                ],
                "non_string_dtypes": [
                    745,
                    746
                ],
                "dtype_set": [
                    745,
                    746
                ],
                "length": [
                    1376,
                    752,
                    753,
                    1360,
                    755,
                    757,
                    1366
                ],
                "len": [
                    1284,
                    1067,
                    752,
                    1402,
                    767
                ],
                "categories": [
                    752
                ],
                "ensure_int8": [
                    754
                ],
                "indexer": [
                    754,
                    756,
                    758,
                    759
                ],
                "ensure_int16": [
                    756
                ],
                "ensure_int32": [
                    758
                ],
                "ensure_int64": [
                    759
                ],
                "dtypes": [
                    789,
                    767
                ],
                "AssertionError": [
                    768
                ],
                "np.any": [
                    771
                ],
                "_NS_DTYPE": [
                    1156,
                    773,
                    1163,
                    1229,
                    1230,
                    1246
                ],
                "_TD_DTYPE": [
                    1249,
                    775,
                    840,
                    849,
                    850,
                    1174,
                    1181
                ],
                "conv": [
                    789
                ],
                "zip": [
                    789
                ],
                "_from_sequence": [
                    814
                ],
                "dtype.construct_array_type": [
                    814,
                    1359
                ],
                "reshape": [
                    820,
                    863
                ],
                "lib.astype_str": [
                    820
                ],
                "arr.ravel": [
                    820,
                    863
                ],
                "skipna": [
                    820
                ],
                "arr.shape": [
                    820,
                    863
                ],
                "is_datetime64_dtype": [
                    868,
                    1227,
                    1298,
                    822,
                    1144
                ],
                "tslib.ints_to_pydatetime": [
                    824,
                    1232
                ],
                "tslib": [
                    824,
                    1074,
                    1232
                ],
                "arr.view": [
                    836,
                    838,
                    888,
                    824,
                    826
                ],
                "arr.astype": [
                    846,
                    850,
                    886,
                    1495,
                    830
                ],
                "is_timedelta64_dtype": [
                    872,
                    834,
                    1300,
                    1146
                ],
                "tslibs.ints_to_pytimedelta": [
                    836
                ],
                "_INT64_DTYPE": [
                    840
                ],
                "np.issubdtype": [
                    862,
                    854
                ],
                "np.isfinite": [
                    856
                ],
                "lib.astype_intsafe": [
                    863
                ],
                "astype_nansafe": [
                    875,
                    871
                ],
                "to_timedelta": [
                    1250,
                    1220,
                    875,
                    1102,
                    980
                ],
                "dtype.name": [
                    1152,
                    1153,
                    1161,
                    877,
                    879,
                    880,
                    1179
                ],
                "validate_bool_kwarg": [
                    904,
                    950,
                    951,
                    952,
                    953,
                    954
                ],
                "convert_numeric": [
                    904,
                    918
                ],
                "orig_values": [
                    906,
                    934
                ],
                "new_values": [
                    920,
                    928,
                    927
                ],
                "lib.maybe_convert_numeric": [
                    920,
                    1001
                ],
                "set": [
                    921,
                    1001
                ],
                "numeric": [
                    999,
                    956,
                    981,
                    951
                ],
                "coerce": [
                    953,
                    971,
                    959
                ],
                "conversion_count": [
                    956,
                    957,
                    959
                ],
                "sum": [
                    956
                ],
                "to_numpy": [
                    976,
                    980
                ],
                "to_numeric": [
                    984
                ],
                "OutOfBoundsDatetime": [
                    992,
                    1221
                ],
                "kind": [
                    1017,
                    1018,
                    1020
                ],
                "arr.dtype.kind": [
                    1017
                ],
                "is_datetime64_ns_dtype": [
                    1019
                ],
                "is_timedelta64_ns_dtype": [
                    1021
                ],
                "arr.dtype.name": [
                    1023
                ],
                "_POSSIBLY_CAST_DTYPES": [
                    1023
                ],
                "ABCDatetimeIndex": [
                    1050,
                    1046
                ],
                "ABCPeriodIndex": [
                    1046
                ],
                "ABCDatetimeArray": [
                    1046
                ],
                "ABCPeriodArray": [
                    1046
                ],
                "value._values": [
                    1050,
                    1051,
                    1204
                ],
                "shape": [
                    1093,
                    1063,
                    1102,
                    1104,
                    1336
                ],
                "v.shape": [
                    1063
                ],
                "v.ndim": [
                    1064
                ],
                "v.ravel": [
                    1065
                ],
                "tslib.array_to_datetime": [
                    1074
                ],
                "tz": [
                    1085,
                    1086
                ],
                "conversion.datetime_to_datetime64": [
                    1085
                ],
                "conversion": [
                    1085
                ],
                "tz_convert": [
                    1218,
                    1086
                ],
                "DatetimeIndex": [
                    1086
                ],
                "Exception": [
                    1090
                ],
                "v.reshape": [
                    1104,
                    1093
                ],
                "_ndarray_values.reshape": [
                    1102
                ],
                "_ndarray_values": [
                    1102
                ],
                "lib.infer_datetimelike_array": [
                    1106
                ],
                "convert_dates": [
                    1108
                ],
                "try_datetime": [
                    1128,
                    1109,
                    1118,
                    1111
                ],
                "try_timedelta": [
                    1113,
                    1124
                ],
                "is_datetime64": [
                    1144,
                    1156,
                    1148,
                    1198
                ],
                "is_datetime64tz": [
                    1145,
                    1148,
                    1205,
                    1166
                ],
                "is_timedelta64": [
                    1146,
                    1219,
                    1148,
                    1174
                ],
                "is_dtype_equal": [
                    1196,
                    1291,
                    1156,
                    1174
                ],
                "iNaT": [
                    1193,
                    1186,
                    1187
                ],
                "value.ndim": [
                    1192
                ],
                "np.prod": [
                    1196
                ],
                "value.shape": [
                    1196
                ],
                "value.dtype": [
                    1258,
                    1196,
                    1229,
                    1243,
                    1244
                ],
                "errors": [
                    1211,
                    1220,
                    1199
                ],
                "value.tz": [
                    1202
                ],
                "value.tz_localize": [
                    1218,
                    1203,
                    1214
                ],
                "is_dt_string": [
                    1210,
                    1212
                ],
                "array": [
                    1211
                ],
                "_values": [
                    1220
                ],
                "AttributeError": [
                    1223
                ],
                "value.astype": [
                    1230
                ],
                "ints": [
                    1232,
                    1231
                ],
                "view": [
                    1231
                ],
                "is_array": [
                    1256,
                    1243,
                    1239
                ],
                "value.dtype.kind": [
                    1243
                ],
                "tslibs.conversion.ensure_datetime64ns": [
                    1247
                ],
                "tslibs.conversion": [
                    1247
                ],
                "value.dtype.type": [
                    1258
                ],
                "maybe_infer_to_datetimelike": [
                    1261
                ],
                "types": [
                    1284,
                    1287,
                    1291,
                    1294,
                    1298,
                    1300,
                    1305,
                    1307,
                    1311
                ],
                "first": [
                    1291,
                    1292,
                    1287
                ],
                "t": [
                    1291,
                    1294,
                    1298,
                    1300,
                    1305,
                    1307,
                    1308
                ],
                "ExtensionDtype": [
                    1294
                ],
                "np.object": [
                    1309,
                    1295
                ],
                "has_bools": [
                    1305,
                    1306
                ],
                "np.find_common_type": [
                    1311
                ],
                "np.empty": [
                    1336,
                    1402,
                    1376
                ],
                "values.fill": [
                    1337
                ],
                "cls": [
                    1360,
                    1359
                ],
                "subarr": [
                    1376,
                    1377,
                    1441,
                    1379,
                    1443,
                    1445,
                    1360,
                    1431
                ],
                "cls._from_sequence": [
                    1360
                ],
                "dtype.dtype": [
                    1364
                ],
                "object": [
                    1441,
                    1442,
                    1372
                ],
                "ensure_str": [
                    1374
                ],
                "subarr.fill": [
                    1377
                ],
                "na_values": [
                    1440,
                    1442
                ],
                "subarr2": [
                    1441,
                    1442,
                    1443
                ],
                "subarr.astype": [
                    1441
                ],
                "casted": [
                    1503,
                    1493,
                    1502,
                    1495
                ],
                "OverflowError": [
                    1496,
                    1497,
                    1513
                ],
                "np.array_equal": [
                    1502
                ],
                "is_unsigned_integer_dtype": [
                    1512
                ]
            },
            "filtered_variables_in_file": {
                "_int8_max": [
                    57,
                    753
                ],
                "np.iinfo": [
                    57,
                    58,
                    59,
                    60
                ],
                "np": [
                    516,
                    1057,
                    554,
                    557,
                    57,
                    58,
                    59,
                    60,
                    573,
                    575,
                    578,
                    68,
                    584,
                    587,
                    589,
                    592,
                    595,
                    598,
                    601,
                    604,
                    607,
                    1142,
                    120,
                    126,
                    1160,
                    654,
                    664,
                    1178,
                    669,
                    671,
                    1189,
                    1196,
                    174,
                    181,
                    704,
                    709,
                    201,
                    207,
                    1231,
                    212,
                    1239,
                    221,
                    225,
                    745,
                    234,
                    1258,
                    771,
                    264,
                    777,
                    1295,
                    1299,
                    1301,
                    281,
                    283,
                    1309,
                    1311,
                    816,
                    307,
                    824,
                    825,
                    1336,
                    321,
                    836,
                    837,
                    332,
                    846,
                    847,
                    1363,
                    340,
                    854,
                    856,
                    1368,
                    1369,
                    862,
                    1376,
                    362,
                    363,
                    369,
                    370,
                    371,
                    373,
                    376,
                    377,
                    1402,
                    891,
                    380,
                    383,
                    385,
                    390,
                    391,
                    394,
                    398,
                    403,
                    407,
                    1431,
                    414,
                    416,
                    1442,
                    419,
                    425,
                    426,
                    428,
                    429,
                    941,
                    432,
                    438,
                    439,
                    442,
                    443,
                    446,
                    447,
                    449,
                    450,
                    452,
                    453,
                    456,
                    459,
                    460,
                    462,
                    463,
                    464,
                    467,
                    1493,
                    474,
                    476,
                    477,
                    1502,
                    481,
                    482,
                    484,
                    1510,
                    489,
                    490
                ],
                "np.int8": [
                    57
                ],
                "_int16_max": [
                    58,
                    755
                ],
                "np.int16": [
                    58
                ],
                "_int32_max": [
                    59,
                    757
                ],
                "np.int32": [
                    59
                ],
                "_int64_max": [
                    60
                ],
                "np.int64": [
                    836,
                    837,
                    598,
                    824,
                    825,
                    60
                ],
                "values": [
                    906,
                    909,
                    910,
                    913,
                    914,
                    917,
                    1431,
                    921,
                    928,
                    1440,
                    1442,
                    932,
                    934,
                    935,
                    937,
                    1336,
                    1337,
                    1339,
                    1085,
                    1086,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    965,
                    73,
                    967,
                    968,
                    976,
                    722,
                    980,
                    726,
                    728,
                    984,
                    731,
                    733,
                    734,
                    991,
                    736,
                    738,
                    995,
                    997,
                    871,
                    999,
                    1001,
                    875,
                    1006,
                    1007,
                    1009,
                    1402,
                    1403
                ],
                "construct_1d_object_array_from_listlike": [
                    67
                ],
                "np.object_": [
                    385,
                    516,
                    390,
                    398,
                    403,
                    669,
                    414,
                    416,
                    419,
                    426,
                    554,
                    443,
                    573,
                    447,
                    68,
                    456,
                    584,
                    460,
                    212,
                    481,
                    484,
                    490,
                    1258,
                    369,
                    370,
                    373,
                    377,
                    383
                ],
                "values._values": [
                    70
                ],
                "lib.maybe_convert_objects": [
                    932,
                    997,
                    71,
                    910,
                    914,
                    991
                ],
                "lib": [
                    610,
                    932,
                    613,
                    997,
                    71,
                    1125,
                    1001,
                    107,
                    910,
                    914,
                    1106,
                    820,
                    920,
                    991,
                    667,
                    863
                ],
                "obj": [
                    85,
                    87
                ],
                "ABCSeries": [
                    663,
                    1049,
                    85,
                    87
                ],
                "is_object_dtype": [
                    835,
                    356,
                    965,
                    995,
                    999,
                    1060,
                    1515,
                    1228,
                    909,
                    913,
                    722,
                    884,
                    85,
                    917,
                    823,
                    859
                ],
                "v": [
                    1053,
                    1055,
                    1056,
                    1057,
                    1060,
                    1063,
                    1064,
                    1065,
                    1067,
                    1074,
                    1085,
                    1093,
                    1102,
                    1104,
                    1106,
                    1109,
                    1111,
                    87,
                    1113,
                    1117,
                    1118,
                    1124,
                    1128
                ],
                "obj.values": [
                    87
                ],
                "do_round": [
                    128,
                    97,
                    121,
                    184
                ],
                "is_scalar": [
                    321,
                    1185,
                    99,
                    356,
                    266,
                    722,
                    1171,
                    277,
                    537
                ],
                "result": [
                    128,
                    129,
                    134,
                    264,
                    141,
                    142,
                    144,
                    276,
                    789,
                    151,
                    279,
                    281,
                    283,
                    157,
                    297,
                    299,
                    301,
                    302,
                    176,
                    178,
                    306,
                    181,
                    188,
                    316,
                    190,
                    191,
                    317,
                    195,
                    197,
                    200,
                    332,
                    205,
                    846,
                    847,
                    848,
                    209,
                    337,
                    212,
                    213,
                    215,
                    216,
                    218,
                    221,
                    226,
                    99,
                    100,
                    101,
                    227,
                    103,
                    229,
                    231,
                    107,
                    120,
                    1402,
                    1403,
                    1404,
                    767
                ],
                "ABCDataFrame": [
                    101
                ],
                "dtype": [
                    514,
                    516,
                    522,
                    554,
                    562,
                    573,
                    578,
                    581,
                    589,
                    592,
                    596,
                    598,
                    602,
                    604,
                    607,
                    611,
                    615,
                    105,
                    106,
                    617,
                    109,
                    111,
                    113,
                    115,
                    1140,
                    1141,
                    1142,
                    119,
                    1144,
                    1145,
                    1146,
                    124,
                    126,
                    128,
                    1152,
                    1153,
                    1156,
                    134,
                    135,
                    1160,
                    137,
                    1161,
                    1163,
                    1165,
                    142,
                    144,
                    146,
                    1174,
                    151,
                    1178,
                    1179,
                    1181,
                    1183,
                    1196,
                    174,
                    188,
                    190,
                    1214,
                    193,
                    1218,
                    197,
                    1227,
                    1228,
                    1235,
                    215,
                    730,
                    731,
                    732,
                    1244,
                    1246,
                    225,
                    1249,
                    229,
                    773,
                    775,
                    777,
                    782,
                    784,
                    789,
                    813,
                    814,
                    816,
                    817,
                    819,
                    1331,
                    1332,
                    823,
                    1336,
                    825,
                    826,
                    829,
                    830,
                    832,
                    835,
                    837,
                    838,
                    840,
                    844,
                    846,
                    1358,
                    1359,
                    849,
                    1360,
                    1363,
                    852,
                    1364,
                    854,
                    1366,
                    1368,
                    1369,
                    1372,
                    862,
                    863,
                    1376,
                    356,
                    868,
                    871,
                    872,
                    875,
                    877,
                    879,
                    880,
                    370,
                    884,
                    373,
                    886,
                    888,
                    377,
                    380,
                    383,
                    385,
                    390,
                    391,
                    398,
                    403,
                    1431,
                    1433,
                    410,
                    414,
                    416,
                    417,
                    419,
                    421,
                    422,
                    425,
                    426,
                    428,
                    429,
                    431,
                    433,
                    435,
                    437,
                    439,
                    442,
                    443,
                    446,
                    447,
                    449,
                    450,
                    453,
                    454,
                    456,
                    459,
                    460,
                    462,
                    464,
                    466,
                    468,
                    1493,
                    470,
                    1495,
                    473,
                    475,
                    476,
                    1499,
                    478,
                    479,
                    481,
                    484,
                    487,
                    1512,
                    489,
                    490,
                    1515,
                    492,
                    493
                ],
                "inferred_type": [
                    107,
                    108,
                    110,
                    112,
                    114,
                    1106,
                    1108,
                    118,
                    1110,
                    1112,
                    1114
                ],
                "lib.infer_dtype": [
                    107,
                    667,
                    1125
                ],
                "ensure_object": [
                    1106,
                    107
                ],
                "result.ravel": [
                    200,
                    107
                ],
                "result.dtype.type": [
                    120,
                    212,
                    279
                ],
                "result.dtype": [
                    226,
                    227,
                    134,
                    297,
                    212,
                    276,
                    316,
                    279,
                    120,
                    281,
                    283,
                    188,
                    317,
                    190,
                    216
                ],
                "np.number": [
                    120,
                    212
                ],
                "np.dtype": [
                    385,
                    390,
                    1160,
                    398,
                    403,
                    1299,
                    1301,
                    1178,
                    414,
                    416,
                    419,
                    426,
                    429,
                    174,
                    816,
                    443,
                    447,
                    578,
                    456,
                    460,
                    589,
                    1363,
                    1368,
                    1369,
                    481,
                    484,
                    489,
                    490,
                    745,
                    370,
                    1142,
                    377,
                    126,
                    383
                ],
                "converted": [
                    128,
                    129,
                    130,
                    1001,
                    1006
                ],
                "maybe_downcast_numeric": [
                    128
                ],
                "dtype.kind": [
                    1249,
                    134,
                    454,
                    1433,
                    844,
                    782,
                    431,
                    784,
                    466,
                    437,
                    373,
                    1369,
                    188,
                    829,
                    1246
                ],
                "result.dtype.kind": [
                    216,
                    188,
                    276,
                    134
                ],
                "dtype.tz": [
                    417,
                    1218,
                    137,
                    142,
                    1214
                ],
                "tz_localize": [
                    141,
                    1086
                ],
                "to_datetime": [
                    871,
                    141,
                    1199,
                    976,
                    1211
                ],
                "result.tz_convert": [
                    142
                ],
                "result.astype": [
                    144,
                    229
                ],
                "dtype.type": [
                    225,
                    449,
                    391,
                    425,
                    522,
                    459,
                    428,
                    462,
                    862,
                    146,
                    819,
                    442,
                    380,
                    446,
                    479
                ],
                "Period": [
                    146
                ],
                "PeriodArray": [
                    151
                ],
                "dtype.freq": [
                    151
                ],
                "np.array": [
                    1057,
                    1189,
                    201,
                    181,
                    1493,
                    1431,
                    281,
                    283
                ],
                "x.round": [
                    185
                ],
                "x": [
                    185,
                    186
                ],
                "result.dtype.itemsize": [
                    190
                ],
                "dtype.itemsize": [
                    190
                ],
                "result.size": [
                    195,
                    190
                ],
                "is_bool_dtype": [
                    193,
                    226,
                    1305
                ],
                "is_integer_dtype": [
                    193,
                    1515,
                    1366,
                    282,
                    475,
                    1308
                ],
                "astype": [
                    197,
                    846,
                    215
                ],
                "trans": [
                    197,
                    215
                ],
                "r": [
                    771,
                    774,
                    200,
                    201,
                    776,
                    779,
                    780,
                    781,
                    207,
                    783,
                    785,
                    306,
                    307,
                    787,
                    309,
                    789
                ],
                "arr": [
                    654,
                    655,
                    657,
                    658,
                    660,
                    661,
                    663,
                    664,
                    667,
                    669,
                    671,
                    672,
                    814,
                    820,
                    822,
                    824,
                    826,
                    830,
                    832,
                    834,
                    836,
                    838,
                    201,
                    203,
                    845,
                    846,
                    850,
                    852,
                    1492,
                    854,
                    1493,
                    856,
                    1495,
                    859,
                    1502,
                    863,
                    1510,
                    871,
                    1512,
                    875,
                    1515,
                    884,
                    886,
                    888,
                    1017,
                    1019,
                    1021,
                    1023
                ],
                "isna": [
                    384,
                    1440,
                    322,
                    771,
                    1186,
                    421,
                    518,
                    328,
                    203,
                    845,
                    1006,
                    1171,
                    278,
                    1366,
                    411,
                    1373,
                    1117,
                    927
                ],
                "np.integer": [
                    449,
                    1258,
                    428,
                    462,
                    207,
                    595,
                    854,
                    862
                ],
                "np.floating": [
                    225,
                    462,
                    207,
                    854,
                    601
                ],
                "np.bool": [
                    207
                ],
                "notna": [
                    213
                ],
                "new_result": [
                    299,
                    300,
                    301,
                    215,
                    216,
                    218,
                    219,
                    221,
                    222
                ],
                "new_result.dtype.kind": [
                    216
                ],
                "new_result.dtype": [
                    216
                ],
                "np.allclose": [
                    221
                ],
                "is_string_dtype": [
                    1210,
                    227
                ],
                "np.ndarray": [
                    321,
                    264,
                    234,
                    362,
                    557,
                    654,
                    941,
                    1239,
                    891
                ],
                "other": [
                    321,
                    290,
                    322,
                    328,
                    266,
                    332,
                    306,
                    307,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    316
                ],
                "mask.any": [
                    271
                ],
                "mask": [
                    290,
                    300,
                    332,
                    845,
                    271,
                    847,
                    307
                ],
                "is_integer": [
                    384,
                    393,
                    779,
                    594,
                    280,
                    445
                ],
                "om": [
                    297,
                    290,
                    298
                ],
                "om_at": [
                    297,
                    298,
                    300
                ],
                "om.astype": [
                    297
                ],
                "result.values.copy": [
                    299
                ],
                "result.values": [
                    299
                ],
                "_": [
                    306,
                    316
                ],
                "maybe_upcast": [
                    306
                ],
                "np.place": [
                    307,
                    332
                ],
                "new_dtype": [
                    316,
                    317,
                    732,
                    733,
                    734
                ],
                "maybe_promote": [
                    732,
                    316
                ],
                "other.ndim": [
                    321
                ],
                "changeit": [
                    329,
                    323,
                    335
                ],
                "np.nan": [
                    482,
                    709,
                    847,
                    371,
                    340,
                    376,
                    474,
                    477
                ],
                "fill_value": [
                    384,
                    388,
                    393,
                    394,
                    395,
                    401,
                    407,
                    409,
                    411,
                    412,
                    413,
                    415,
                    417,
                    421,
                    422,
                    424,
                    432,
                    1332,
                    438,
                    1334,
                    441,
                    1337,
                    445,
                    450,
                    452,
                    458,
                    463,
                    722,
                    467,
                    472,
                    474,
                    732,
                    477,
                    479,
                    482,
                    738,
                    356,
                    362,
                    363,
                    364,
                    492,
                    493,
                    369,
                    371,
                    376,
                    381
                ],
                "fill_value.dtype.type": [
                    363,
                    364
                ],
                "fill_value.dtype": [
                    369,
                    363,
                    364
                ],
                "np.datetime64": [
                    363,
                    380,
                    575
                ],
                "np.timedelta64": [
                    407,
                    587,
                    363,
                    391
                ],
                "datetime": [
                    973,
                    950,
                    987,
                    956,
                    381,
                    413,
                    575
                ],
                "fill_value.tzinfo": [
                    417,
                    381,
                    415
                ],
                "is_float": [
                    384,
                    394,
                    600,
                    424
                ],
                "to_datetime64": [
                    388
                ],
                "tslibs.Timestamp": [
                    576,
                    388,
                    774
                ],
                "tslibs": [
                    576,
                    577,
                    388,
                    836,
                    774,
                    776,
                    588,
                    401,
                    1247
                ],
                "np.isnan": [
                    394
                ],
                "fv": [
                    401,
                    409,
                    405
                ],
                "tslibs.Timedelta": [
                    776,
                    401,
                    588
                ],
                "NaT": [
                    412,
                    405
                ],
                "fv.to_timedelta64": [
                    409
                ],
                "is_datetime64tz_dtype": [
                    1145,
                    410
                ],
                "tz_compare": [
                    417
                ],
                "is_extension_array_dtype": [
                    514,
                    421,
                    487,
                    813,
                    1358,
                    660,
                    726
                ],
                "dtype.na_value": [
                    422
                ],
                "np.bool_": [
                    425,
                    777,
                    459,
                    592,
                    442,
                    446
                ],
                "np.float64": [
                    476,
                    429,
                    846,
                    604
                ],
                "mst": [
                    452,
                    453,
                    463,
                    432,
                    433,
                    464,
                    435,
                    467,
                    468,
                    438,
                    439,
                    470
                ],
                "np.min_scalar_type": [
                    452,
                    463,
                    432,
                    467,
                    438
                ],
                "np.promote_types": [
                    464,
                    453,
                    439
                ],
                "is_bool": [
                    441,
                    591
                ],
                "np.can_cast": [
                    450
                ],
                "is_complex": [
                    458,
                    606
                ],
                "is_float_dtype": [
                    473,
                    1515,
                    1308
                ],
                "is_complex_dtype": [
                    473,
                    1308
                ],
                "is_datetime_or_timedelta_dtype": [
                    478
                ],
                "_ensure_dtype_type": [
                    492
                ],
                "value": [
                    515,
                    517,
                    518,
                    520,
                    522,
                    1171,
                    1172,
                    1046,
                    1048,
                    1049,
                    1050,
                    1051,
                    1053,
                    1185,
                    1186,
                    1187,
                    1061,
                    1189,
                    1192,
                    1193,
                    1068,
                    1196,
                    1199,
                    1202,
                    1203,
                    1204,
                    1332,
                    1334,
                    1210,
                    1211,
                    1214,
                    1218,
                    1220,
                    1227,
                    588,
                    1229,
                    1230,
                    1231,
                    1360,
                    1109,
                    1366,
                    1111,
                    1239,
                    1113,
                    1243,
                    1244,
                    1373,
                    1118,
                    1247,
                    1374,
                    1377,
                    1250,
                    1124,
                    1125,
                    1128,
                    1130,
                    1258,
                    1261,
                    1263
                ],
                "val": [
                    537,
                    538,
                    539,
                    557,
                    559,
                    562,
                    563,
                    565,
                    575,
                    576,
                    577,
                    581,
                    584,
                    585,
                    587,
                    588,
                    591,
                    594,
                    595,
                    596,
                    600,
                    601,
                    602,
                    606,
                    610,
                    611,
                    612,
                    613,
                    614,
                    617
                ],
                "infer_dtype_from_scalar": [
                    538,
                    1332,
                    614
                ],
                "pandas_dtype": [
                    609,
                    580,
                    817,
                    660,
                    538,
                    539
                ],
                "infer_dtype_from_array": [
                    539
                ],
                "msg": [
                    1162,
                    878,
                    558,
                    560,
                    882,
                    1180,
                    1151
                ],
                "val.ndim": [
                    559
                ],
                "val.dtype": [
                    562
                ],
                "val.item": [
                    563
                ],
                "tslibs.NaT": [
                    577
                ],
                "val.tz": [
                    577,
                    581
                ],
                "DatetimeTZDtype": [
                    581
                ],
                "val.value": [
                    585
                ],
                "timedelta": [
                    995,
                    587,
                    977,
                    952,
                    956
                ],
                "np.complex_": [
                    607
                ],
                "lib.is_period": [
                    610
                ],
                "PeriodDtype": [
                    611
                ],
                "val.freq": [
                    611
                ],
                "val.ordinal": [
                    612
                ],
                "lib.is_interval": [
                    613
                ],
                "subtype": [
                    614,
                    615
                ],
                "val.left": [
                    614
                ],
                "IntervalDtype": [
                    615
                ],
                "arr.dtype": [
                    832,
                    672,
                    655,
                    852,
                    661,
                    854,
                    664,
                    1017,
                    1019,
                    1021,
                    1023
                ],
                "is_list_like": [
                    657,
                    1055,
                    703
                ],
                "np.asarray": [
                    704,
                    1442,
                    1510,
                    1231,
                    664,
                    671
                ],
                "inferred": [
                    667,
                    668
                ],
                "tipo": [
                    705,
                    706,
                    700,
                    702
                ],
                "element": [
                    704,
                    705,
                    701,
                    702,
                    703
                ],
                "element.dtype": [
                    705,
                    702
                ],
                "values.dtype": [
                    995,
                    965,
                    999,
                    909,
                    913,
                    722,
                    917,
                    731,
                    733
                ],
                "copy": [
                    1431,
                    1495,
                    871,
                    967,
                    875,
                    814,
                    1007,
                    850,
                    884,
                    1493,
                    727,
                    954,
                    735
                ],
                "values.copy": [
                    736,
                    967,
                    935,
                    1007,
                    728
                ],
                "values.astype": [
                    734
                ],
                "non_string_dtypes": [
                    745,
                    746
                ],
                "dtype_set": [
                    745,
                    746
                ],
                "length": [
                    1376,
                    752,
                    753,
                    1360,
                    755,
                    757,
                    1366
                ],
                "categories": [
                    752
                ],
                "ensure_int8": [
                    754
                ],
                "indexer": [
                    754,
                    756,
                    758,
                    759
                ],
                "ensure_int16": [
                    756
                ],
                "ensure_int32": [
                    758
                ],
                "ensure_int64": [
                    759
                ],
                "dtypes": [
                    789,
                    767
                ],
                "np.any": [
                    771
                ],
                "_NS_DTYPE": [
                    1156,
                    773,
                    1163,
                    1229,
                    1230,
                    1246
                ],
                "_TD_DTYPE": [
                    1249,
                    775,
                    840,
                    849,
                    850,
                    1174,
                    1181
                ],
                "conv": [
                    789
                ],
                "_from_sequence": [
                    814
                ],
                "dtype.construct_array_type": [
                    814,
                    1359
                ],
                "reshape": [
                    820,
                    863
                ],
                "lib.astype_str": [
                    820
                ],
                "arr.ravel": [
                    820,
                    863
                ],
                "skipna": [
                    820
                ],
                "arr.shape": [
                    820,
                    863
                ],
                "is_datetime64_dtype": [
                    868,
                    1227,
                    1298,
                    822,
                    1144
                ],
                "tslib.ints_to_pydatetime": [
                    824,
                    1232
                ],
                "tslib": [
                    824,
                    1074,
                    1232
                ],
                "arr.view": [
                    836,
                    838,
                    888,
                    824,
                    826
                ],
                "arr.astype": [
                    846,
                    850,
                    886,
                    1495,
                    830
                ],
                "is_timedelta64_dtype": [
                    872,
                    834,
                    1300,
                    1146
                ],
                "tslibs.ints_to_pytimedelta": [
                    836
                ],
                "_INT64_DTYPE": [
                    840
                ],
                "np.issubdtype": [
                    862,
                    854
                ],
                "np.isfinite": [
                    856
                ],
                "lib.astype_intsafe": [
                    863
                ],
                "astype_nansafe": [
                    875,
                    871
                ],
                "to_timedelta": [
                    1250,
                    1220,
                    875,
                    1102,
                    980
                ],
                "dtype.name": [
                    1152,
                    1153,
                    1161,
                    877,
                    879,
                    880,
                    1179
                ],
                "validate_bool_kwarg": [
                    904,
                    950,
                    951,
                    952,
                    953,
                    954
                ],
                "convert_numeric": [
                    904,
                    918
                ],
                "orig_values": [
                    906,
                    934
                ],
                "new_values": [
                    920,
                    928,
                    927
                ],
                "lib.maybe_convert_numeric": [
                    920,
                    1001
                ],
                "numeric": [
                    999,
                    956,
                    981,
                    951
                ],
                "coerce": [
                    953,
                    971,
                    959
                ],
                "conversion_count": [
                    956,
                    957,
                    959
                ],
                "to_numpy": [
                    976,
                    980
                ],
                "to_numeric": [
                    984
                ],
                "OutOfBoundsDatetime": [
                    992,
                    1221
                ],
                "kind": [
                    1017,
                    1018,
                    1020
                ],
                "arr.dtype.kind": [
                    1017
                ],
                "is_datetime64_ns_dtype": [
                    1019
                ],
                "is_timedelta64_ns_dtype": [
                    1021
                ],
                "arr.dtype.name": [
                    1023
                ],
                "_POSSIBLY_CAST_DTYPES": [
                    1023
                ],
                "ABCDatetimeIndex": [
                    1050,
                    1046
                ],
                "ABCPeriodIndex": [
                    1046
                ],
                "ABCDatetimeArray": [
                    1046
                ],
                "ABCPeriodArray": [
                    1046
                ],
                "value._values": [
                    1050,
                    1051,
                    1204
                ],
                "shape": [
                    1093,
                    1063,
                    1102,
                    1104,
                    1336
                ],
                "v.shape": [
                    1063
                ],
                "v.ndim": [
                    1064
                ],
                "v.ravel": [
                    1065
                ],
                "tslib.array_to_datetime": [
                    1074
                ],
                "tz": [
                    1085,
                    1086
                ],
                "conversion.datetime_to_datetime64": [
                    1085
                ],
                "conversion": [
                    1085
                ],
                "tz_convert": [
                    1218,
                    1086
                ],
                "DatetimeIndex": [
                    1086
                ],
                "v.reshape": [
                    1104,
                    1093
                ],
                "_ndarray_values.reshape": [
                    1102
                ],
                "_ndarray_values": [
                    1102
                ],
                "lib.infer_datetimelike_array": [
                    1106
                ],
                "convert_dates": [
                    1108
                ],
                "try_datetime": [
                    1128,
                    1109,
                    1118,
                    1111
                ],
                "try_timedelta": [
                    1113,
                    1124
                ],
                "is_datetime64": [
                    1144,
                    1156,
                    1148,
                    1198
                ],
                "is_datetime64tz": [
                    1145,
                    1148,
                    1205,
                    1166
                ],
                "is_timedelta64": [
                    1146,
                    1219,
                    1148,
                    1174
                ],
                "is_dtype_equal": [
                    1196,
                    1291,
                    1156,
                    1174
                ],
                "iNaT": [
                    1193,
                    1186,
                    1187
                ],
                "value.ndim": [
                    1192
                ],
                "np.prod": [
                    1196
                ],
                "value.shape": [
                    1196
                ],
                "value.dtype": [
                    1258,
                    1196,
                    1229,
                    1243,
                    1244
                ],
                "errors": [
                    1211,
                    1220,
                    1199
                ],
                "value.tz": [
                    1202
                ],
                "value.tz_localize": [
                    1218,
                    1203,
                    1214
                ],
                "is_dt_string": [
                    1210,
                    1212
                ],
                "array": [
                    1211
                ],
                "_values": [
                    1220
                ],
                "value.astype": [
                    1230
                ],
                "ints": [
                    1232,
                    1231
                ],
                "view": [
                    1231
                ],
                "is_array": [
                    1256,
                    1243,
                    1239
                ],
                "value.dtype.kind": [
                    1243
                ],
                "tslibs.conversion.ensure_datetime64ns": [
                    1247
                ],
                "tslibs.conversion": [
                    1247
                ],
                "value.dtype.type": [
                    1258
                ],
                "maybe_infer_to_datetimelike": [
                    1261
                ],
                "types": [
                    1284,
                    1287,
                    1291,
                    1294,
                    1298,
                    1300,
                    1305,
                    1307,
                    1311
                ],
                "first": [
                    1291,
                    1292,
                    1287
                ],
                "t": [
                    1291,
                    1294,
                    1298,
                    1300,
                    1305,
                    1307,
                    1308
                ],
                "ExtensionDtype": [
                    1294
                ],
                "np.object": [
                    1309,
                    1295
                ],
                "has_bools": [
                    1305,
                    1306
                ],
                "np.find_common_type": [
                    1311
                ],
                "np.empty": [
                    1336,
                    1402,
                    1376
                ],
                "values.fill": [
                    1337
                ],
                "cls": [
                    1360,
                    1359
                ],
                "subarr": [
                    1376,
                    1377,
                    1441,
                    1379,
                    1443,
                    1445,
                    1360,
                    1431
                ],
                "cls._from_sequence": [
                    1360
                ],
                "dtype.dtype": [
                    1364
                ],
                "ensure_str": [
                    1374
                ],
                "subarr.fill": [
                    1377
                ],
                "na_values": [
                    1440,
                    1442
                ],
                "subarr2": [
                    1441,
                    1442,
                    1443
                ],
                "subarr.astype": [
                    1441
                ],
                "casted": [
                    1503,
                    1493,
                    1502,
                    1495
                ],
                "np.array_equal": [
                    1502
                ],
                "is_unsigned_integer_dtype": [
                    1512
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_101/pandas/tests/dtypes/test_common.py",
                "test_function": "test_astype_nansafe",
                "test_function_code": "@pytest.mark.parametrize(\"val\", [np.datetime64(\"NaT\"), np.timedelta64(\"NaT\")])\n@pytest.mark.parametrize(\"typ\", [np.int64])\ndef test_astype_nansafe(val, typ):\n    arr = np.array([val])\n\n    msg = \"Cannot convert NaT values to integer\"\n    with pytest.raises(ValueError, match=msg):\n        astype_nansafe(arr, dtype=typ)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "val = numpy.datetime64('NaT'), typ = <class 'numpy.int64'>\n\n    @pytest.mark.parametrize(\"val\", [np.datetime64(\"NaT\"), np.timedelta64(\"NaT\")])\n    @pytest.mark.parametrize(\"typ\", [np.int64])\n    def test_astype_nansafe(val, typ):\n        arr = np.array([val])\n    \n        msg = \"Cannot convert NaT values to integer\"\n        with pytest.raises(ValueError, match=msg):\n>           astype_nansafe(arr, dtype=typ)\nE           Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/dtypes/test_common.py:723: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('val', [np.datetime64('NaT'), np.timedelta64('NaT')])",
                    "pytest.mark.parametrize('typ', [np.int64])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_101/pandas/tests/dtypes/test_common.py",
                "test_function": "test_astype_nansafe",
                "test_function_code": "@pytest.mark.parametrize(\"val\", [np.datetime64(\"NaT\"), np.timedelta64(\"NaT\")])\n@pytest.mark.parametrize(\"typ\", [np.int64])\ndef test_astype_nansafe(val, typ):\n    arr = np.array([val])\n\n    msg = \"Cannot convert NaT values to integer\"\n    with pytest.raises(ValueError, match=msg):\n        astype_nansafe(arr, dtype=typ)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "val = numpy.timedelta64('NaT'), typ = <class 'numpy.int64'>\n\n    @pytest.mark.parametrize(\"val\", [np.datetime64(\"NaT\"), np.timedelta64(\"NaT\")])\n    @pytest.mark.parametrize(\"typ\", [np.int64])\n    def test_astype_nansafe(val, typ):\n        arr = np.array([val])\n    \n        msg = \"Cannot convert NaT values to integer\"\n        with pytest.raises(ValueError, match=msg):\n>           astype_nansafe(arr, dtype=typ)\nE           Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/dtypes/test_common.py:723: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('val', [np.datetime64('NaT'), np.timedelta64('NaT')])",
                    "pytest.mark.parametrize('typ', [np.int64])"
                ]
            }
        ]
    }
}