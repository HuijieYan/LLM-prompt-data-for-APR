{
    "pandas:31": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_31/pandas/core/groupby/groupby.py": {
            "buggy_functions": [
                {
                    "function_name": "quantile",
                    "function_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n\n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by caller of GroupBy object.\n\n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     ['a', 1], ['a', 2], ['a', 3],\n    ...     ['b', 1], ['b', 3], ['b', 5]\n    ... ], columns=['key', 'val'])\n    >>> df.groupby('key').quantile()\n        val\n    key\n    a    2.0\n    b    3.0\n    \"\"\"\n    from pandas import concat\n\n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_object_dtype(vals):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' dtypes!\"\n            )\n\n        inference = None\n        if is_integer_dtype(vals):\n            inference = np.int64\n        elif is_datetime64_dtype(vals):\n            inference = \"datetime64[ns]\"\n            vals = np.asarray(vals).astype(np.float)\n\n        return vals, inference\n\n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference:\n            # Check for edge case\n            if not (\n                is_integer_dtype(inference)\n                and interpolation in {\"linear\", \"midpoint\"}\n            ):\n                vals = vals.astype(inference)\n\n        return vals\n\n    if is_scalar(q):\n        return self._get_cythonized_result(\n            \"group_quantile\",\n            aggregate=True,\n            needs_values=True,\n            needs_mask=True,\n            cython_dtype=np.dtype(np.float64),\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n            q=q,\n            interpolation=interpolation,\n        )\n    else:\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                cython_dtype=np.dtype(np.float64),\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                q=qi,\n                interpolation=interpolation,\n            )\n            for qi in q\n        ]\n        result = concat(results, axis=0, keys=q)\n        # fix levels to place quantiles on the inside\n        # TODO(GH-10710): Ideally, we could write this as\n        #  >>> result.stack(0).loc[pd.IndexSlice[:, ..., q], :]\n        #  but this hits https://github.com/pandas-dev/pandas/issues/10710\n        #  which doesn't reorder the list-like `q` on the inner level.\n        order = list(range(1, result.index.nlevels)) + [0]\n\n        # temporarily saves the index names\n        index_names = np.array(result.index.names)\n\n        # set index names to positions to avoid confusion\n        result.index.names = np.arange(len(index_names))\n\n        # place quantiles on the inside\n        result = result.reorder_levels(order)\n\n        # restore the index names in order\n        result.index.names = index_names[order]\n\n        # reorder rows to keep things sorted\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)\n",
                    "decorators": [],
                    "docstring": "Return group values at the given quantile, a la numpy.percentile.\n\nParameters\n----------\nq : float or array-like, default 0.5 (50% quantile)\n    Value(s) between 0 and 1 providing the quantile(s) to compute.\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    Method to use when the desired quantile falls between two points.\n\nReturns\n-------\nSeries or DataFrame\n    Return type determined by caller of GroupBy object.\n\nSee Also\n--------\nSeries.quantile : Similar method for Series.\nDataFrame.quantile : Similar method for DataFrame.\nnumpy.percentile : NumPy method to compute qth percentile.\n\nExamples\n--------\n>>> df = pd.DataFrame([\n...     ['a', 1], ['a', 2], ['a', 3],\n...     ['b', 1], ['b', 3], ['b', 5]\n... ], columns=['key', 'val'])\n>>> df.groupby('key').quantile()\n    val\nkey\na    2.0\nb    3.0",
                    "start_line": 1827,
                    "end_line": 1938,
                    "variables": {
                        "str": [
                            1827
                        ],
                        "np.ndarray": [
                            1878,
                            1863
                        ],
                        "np": [
                            1925,
                            1895,
                            1863,
                            1928,
                            1871,
                            1937,
                            1874,
                            1908,
                            1878
                        ],
                        "is_object_dtype": [
                            1864
                        ],
                        "vals": [
                            1864,
                            1870,
                            1872,
                            1874,
                            1876,
                            1885,
                            1887
                        ],
                        "TypeError": [
                            1865
                        ],
                        "inference": [
                            1869,
                            1871,
                            1873,
                            1876,
                            1879,
                            1882,
                            1885
                        ],
                        "is_integer_dtype": [
                            1882,
                            1870
                        ],
                        "np.int64": [
                            1871
                        ],
                        "is_datetime64_dtype": [
                            1872
                        ],
                        "astype": [
                            1874
                        ],
                        "np.asarray": [
                            1874
                        ],
                        "np.float": [
                            1874
                        ],
                        "Tuple": [
                            1863
                        ],
                        "Optional": [
                            1878,
                            1863
                        ],
                        "Type": [
                            1878,
                            1863
                        ],
                        "interpolation": [
                            1912,
                            1899,
                            1883
                        ],
                        "vals.astype": [
                            1885
                        ],
                        "is_scalar": [
                            1889
                        ],
                        "q": [
                            1889,
                            1898,
                            1937,
                            1914,
                            1916
                        ],
                        "self._get_cythonized_result": [
                            1890,
                            1903
                        ],
                        "self": [
                            1937,
                            1890,
                            1903
                        ],
                        "np.dtype": [
                            1908,
                            1895
                        ],
                        "np.float64": [
                            1908,
                            1895
                        ],
                        "pre_processor": [
                            1896,
                            1909
                        ],
                        "post_processor": [
                            1897,
                            1910
                        ],
                        "results": [
                            1916,
                            1902
                        ],
                        "qi": [
                            1914,
                            1911
                        ],
                        "result": [
                            1922,
                            1925,
                            1928,
                            1931,
                            1934,
                            1937,
                            1938,
                            1916
                        ],
                        "concat": [
                            1916
                        ],
                        "order": [
                            1922,
                            1931,
                            1934
                        ],
                        "list": [
                            1922
                        ],
                        "range": [
                            1922
                        ],
                        "result.index.nlevels": [
                            1922
                        ],
                        "result.index": [
                            1928,
                            1922,
                            1925,
                            1934
                        ],
                        "index_names": [
                            1928,
                            1925,
                            1934
                        ],
                        "np.array": [
                            1925
                        ],
                        "result.index.names": [
                            1928,
                            1925,
                            1934
                        ],
                        "np.arange": [
                            1928,
                            1937
                        ],
                        "len": [
                            1928,
                            1937
                        ],
                        "result.reorder_levels": [
                            1931
                        ],
                        "indices": [
                            1937,
                            1938
                        ],
                        "T.flatten": [
                            1937
                        ],
                        "T": [
                            1937
                        ],
                        "reshape": [
                            1937
                        ],
                        "self.ngroups": [
                            1937
                        ],
                        "result.take": [
                            1938
                        ]
                    },
                    "filtered_variables": {
                        "np.ndarray": [
                            1878,
                            1863
                        ],
                        "np": [
                            1925,
                            1895,
                            1863,
                            1928,
                            1871,
                            1937,
                            1874,
                            1908,
                            1878
                        ],
                        "is_object_dtype": [
                            1864
                        ],
                        "vals": [
                            1864,
                            1870,
                            1872,
                            1874,
                            1876,
                            1885,
                            1887
                        ],
                        "inference": [
                            1869,
                            1871,
                            1873,
                            1876,
                            1879,
                            1882,
                            1885
                        ],
                        "is_integer_dtype": [
                            1882,
                            1870
                        ],
                        "np.int64": [
                            1871
                        ],
                        "is_datetime64_dtype": [
                            1872
                        ],
                        "astype": [
                            1874
                        ],
                        "np.asarray": [
                            1874
                        ],
                        "np.float": [
                            1874
                        ],
                        "Tuple": [
                            1863
                        ],
                        "Optional": [
                            1878,
                            1863
                        ],
                        "Type": [
                            1878,
                            1863
                        ],
                        "interpolation": [
                            1912,
                            1899,
                            1883
                        ],
                        "vals.astype": [
                            1885
                        ],
                        "is_scalar": [
                            1889
                        ],
                        "q": [
                            1889,
                            1898,
                            1937,
                            1914,
                            1916
                        ],
                        "self._get_cythonized_result": [
                            1890,
                            1903
                        ],
                        "self": [
                            1937,
                            1890,
                            1903
                        ],
                        "np.dtype": [
                            1908,
                            1895
                        ],
                        "np.float64": [
                            1908,
                            1895
                        ],
                        "pre_processor": [
                            1896,
                            1909
                        ],
                        "post_processor": [
                            1897,
                            1910
                        ],
                        "results": [
                            1916,
                            1902
                        ],
                        "qi": [
                            1914,
                            1911
                        ],
                        "result": [
                            1922,
                            1925,
                            1928,
                            1931,
                            1934,
                            1937,
                            1938,
                            1916
                        ],
                        "concat": [
                            1916
                        ],
                        "order": [
                            1922,
                            1931,
                            1934
                        ],
                        "result.index.nlevels": [
                            1922
                        ],
                        "result.index": [
                            1928,
                            1922,
                            1925,
                            1934
                        ],
                        "index_names": [
                            1928,
                            1925,
                            1934
                        ],
                        "np.array": [
                            1925
                        ],
                        "result.index.names": [
                            1928,
                            1925,
                            1934
                        ],
                        "np.arange": [
                            1928,
                            1937
                        ],
                        "result.reorder_levels": [
                            1931
                        ],
                        "indices": [
                            1937,
                            1938
                        ],
                        "T.flatten": [
                            1937
                        ],
                        "T": [
                            1937
                        ],
                        "reshape": [
                            1937
                        ],
                        "self.ngroups": [
                            1937
                        ],
                        "result.take": [
                            1938
                        ]
                    },
                    "diff_line_number": 1870,
                    "class_data": {
                        "signature": "class GroupBy(_GroupBy[FrameOrSeries])",
                        "docstring": "Class for grouping and aggregating relational data.\n\nSee aggregate, transform, and apply functions on this object.\n\nIt's easiest to use obj.groupby(...) to use GroupBy, but you can also do:\n\n::\n\n    grouped = groupby(obj, ...)\n\nParameters\n----------\nobj : pandas object\naxis : int, default 0\nlevel : int, default None\n    Level of MultiIndex\ngroupings : list of Grouping objects\n    Most users should ignore this\nexclusions : array-like, optional\n    List of columns to exclude\nname : str\n    Most users should ignore this\n\nReturns\n-------\n**Attributes**\ngroups : dict\n    {group name -> group labels}\nlen(grouped) : int\n    Number of groups\n\nNotes\n-----\nAfter grouping, see aggregate, apply, and transform functions. Here are\nsome other brief notes about usage. When grouping by multiple groups, the\nresult index will be a MultiIndex (hierarchical) by default.\n\nIteration produces (key, group) tuples, i.e. chunking the data by group. So\nyou can write code like:\n\n::\n\n    grouped = obj.groupby(keys, axis=axis)\n    for key, group in grouped:\n        # do something with the data\n\nFunction calls on GroupBy, if not specially implemented, \"dispatch\" to the\ngrouped data. So if you group a DataFrame and wish to invoke the std()\nmethod on each group, you can simply do:\n\n::\n\n    df.groupby(mapper).std()\n\nrather than\n\n::\n\n    df.groupby(mapper).aggregate(np.std)\n\nYou can pass arguments to these \"wrapped\" functions, too.\n\nSee the online documentation for full exposition on these topics and much\nmore",
                        "constructor_docstring": null,
                        "functions": [
                            "def _bool_agg(self, val_test, skipna):\n    \"\"\"\n    Shared func to call any / all Cython GroupBy implementations.\n    \"\"\"\n\n    def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n        if is_object_dtype(vals):\n            vals = np.array([bool(x) for x in vals])\n        else:\n            vals = vals.astype(np.bool)\n        return (vals.view(np.uint8), np.bool)\n\n    def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n        return result.astype(inference, copy=False)\n    return self._get_cythonized_result('group_any_all', aggregate=True, cython_dtype=np.dtype(np.uint8), needs_values=True, needs_mask=True, pre_processing=objs_to_bool, post_processing=result_to_bool, val_test=val_test, skipna=skipna)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef any(self, skipna: bool=True):\n    \"\"\"\n    Return True if any value in the group is truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg('any', skipna)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef all(self, skipna: bool=True):\n    \"\"\"\n    Return True if all values in the group are truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg('all', skipna)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n        Count of values within each group.\n    \"\"\"\n    raise NotImplementedError",
                            "@Substitution(name='groupby')\n@Substitution(see_also=_common_see_also)\ndef mean(self, numeric_only: bool=True):\n    \"\"\"\n    Compute mean of groups, excluding missing values.\n\n    Parameters\n    ----------\n    numeric_only : bool, default True\n        Include only float, int, boolean columns. If None, will attempt to use\n        everything, then use only numeric data.\n\n    Returns\n    -------\n    pandas.Series or pandas.DataFrame\n    %(see_also)s\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5],\n    ...                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])\n\n    Groupby one column and return the mean of the remaining columns in\n    each group.\n\n    >>> df.groupby('A').mean()\n         B         C\n    A\n    1  3.0  1.333333\n    2  4.0  1.500000\n\n    Groupby two columns and return the mean of the remaining column.\n\n    >>> df.groupby(['A', 'B']).mean()\n           C\n    A B\n    1 2.0  2\n      4.0  1\n    2 3.0  1\n      5.0  2\n\n    Groupby one column and return the mean of only particular column in\n    the group.\n\n    >>> df.groupby('A')['B'].mean()\n    A\n    1    3.0\n    2    4.0\n    Name: B, dtype: float64\n    \"\"\"\n    return self._cython_agg_general('mean', alt=lambda x, axis: Series(x).mean(numeric_only=numeric_only), numeric_only=numeric_only)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef median(self, numeric_only=True):\n    \"\"\"\n    Compute median of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Parameters\n    ----------\n    numeric_only : bool, default True\n        Include only float, int, boolean columns. If None, will attempt to use\n        everything, then use only numeric data.\n\n    Returns\n    -------\n    Series or DataFrame\n        Median of values within each group.\n    \"\"\"\n    return self._cython_agg_general('median', alt=lambda x, axis: Series(x).median(axis=axis, numeric_only=numeric_only), numeric_only=numeric_only)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef std(self, ddof: int=1):\n    \"\"\"\n    Compute standard deviation of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard deviation of values within each group.\n    \"\"\"\n    return np.sqrt(self.var(ddof=ddof))",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef var(self, ddof: int=1):\n    \"\"\"\n    Compute variance of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Variance of values within each group.\n    \"\"\"\n    if ddof == 1:\n        return self._cython_agg_general('var', alt=lambda x, axis: Series(x).var(ddof=ddof))\n    else:\n        func = lambda x: x.var(ddof=ddof)\n        with _group_selection_context(self):\n            return self._python_agg_general(func)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef sem(self, ddof: int=1):\n    \"\"\"\n    Compute standard error of the mean of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard error of the mean of values within each group.\n    \"\"\"\n    return self.std(ddof=ddof) / np.sqrt(self.count())",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef size(self):\n    \"\"\"\n    Compute group sizes.\n\n    Returns\n    -------\n    Series\n        Number of rows in each group.\n    \"\"\"\n    result = self.grouper.size()\n    if isinstance(self.obj, Series):\n        result.name = self.obj.name\n    return self._reindex_output(result, fill_value=0)",
                            "@classmethod\ndef _add_numeric_operations(cls):\n    \"\"\"\n    Add numeric operations to the GroupBy generically.\n    \"\"\"\n\n    def groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1):\n        _local_template = '\\n            Compute %(f)s of group values.\\n\\n            Parameters\\n            ----------\\n            numeric_only : bool, default %(no)s\\n                Include only float, int, boolean columns. If None, will attempt to use\\n                everything, then use only numeric data.\\n            min_count : int, default %(mc)s\\n                The required number of valid values to perform the operation. If fewer\\n                than ``min_count`` non-NA values are present the result will be NA.\\n\\n            Returns\\n            -------\\n            Series or DataFrame\\n                Computed %(f)s of values within each group.\\n            '\n\n        @Substitution(name='groupby', f=name, no=numeric_only, mc=min_count)\n        @Appender(_common_see_also)\n        @Appender(_local_template)\n        def func(self, numeric_only=numeric_only, min_count=min_count):\n            self._set_group_selection()\n            try:\n                return self._cython_agg_general(how=alias, alt=npfunc, numeric_only=numeric_only, min_count=min_count)\n            except DataError:\n                pass\n            except NotImplementedError as err:\n                if 'function is not implemented for this dtype' in str(err) or 'category dtype not supported' in str(err):\n                    pass\n                else:\n                    raise\n            result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n            return result\n        set_function_name(func, name, cls)\n        return func\n\n    def first_compat(x, axis=0):\n\n        def first(x):\n            x = x.to_numpy()\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[0]\n        if isinstance(x, DataFrame):\n            return x.apply(first, axis=axis)\n        else:\n            return first(x)\n\n    def last_compat(x, axis=0):\n\n        def last(x):\n            x = x.to_numpy()\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[-1]\n        if isinstance(x, DataFrame):\n            return x.apply(last, axis=axis)\n        else:\n            return last(x)\n    cls.sum = groupby_function('sum', 'add', np.sum, min_count=0)\n    cls.prod = groupby_function('prod', 'prod', np.prod, min_count=0)\n    cls.min = groupby_function('min', 'min', np.min, numeric_only=False)\n    cls.max = groupby_function('max', 'max', np.max, numeric_only=False)\n    cls.first = groupby_function('first', 'first', first_compat, numeric_only=False)\n    cls.last = groupby_function('last', 'last', last_compat, numeric_only=False)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef ohlc(self) -> DataFrame:\n    \"\"\"\n    Compute open, high, low and close values of a group, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Returns\n    -------\n    DataFrame\n        Open, high, low and close values within each group.\n    \"\"\"\n    return self._apply_to_column_groupbys(lambda x: x._cython_agg_general('ohlc'))",
                            "@doc(DataFrame.describe)\ndef describe(self, **kwargs):\n    with _group_selection_context(self):\n        result = self.apply(lambda x: x.describe(**kwargs))\n        if self.axis == 1:\n            return result.T\n        return result.unstack()",
                            "def resample(self, rule, *args, **kwargs):\n    \"\"\"\n    Provide resampling when using a TimeGrouper.\n\n    Given a grouper, the function resamples it according to a string\n    \"string\" -> \"frequency\".\n\n    See the :ref:`frequency aliases <timeseries.offset_aliases>`\n    documentation for more details.\n\n    Parameters\n    ----------\n    rule : str or DateOffset\n        The offset string or object representing target grouper conversion.\n    *args, **kwargs\n        Possible arguments are `how`, `fill_method`, `limit`, `kind` and\n        `on`, and other arguments of `TimeGrouper`.\n\n    Returns\n    -------\n    Grouper\n        Return a new grouper with our resampler appended.\n\n    See Also\n    --------\n    Grouper : Specify a frequency to resample with when\n        grouping by a key.\n    DatetimeIndex.resample : Frequency conversion and resampling of\n        time series.\n\n    Examples\n    --------\n    >>> idx = pd.date_range('1/1/2000', periods=4, freq='T')\n    >>> df = pd.DataFrame(data=4 * [range(2)],\n    ...                   index=idx,\n    ...                   columns=['a', 'b'])\n    >>> df.iloc[2, 0] = 5\n    >>> df\n                        a  b\n    2000-01-01 00:00:00  0  1\n    2000-01-01 00:01:00  0  1\n    2000-01-01 00:02:00  5  1\n    2000-01-01 00:03:00  0  1\n\n    Downsample the DataFrame into 3 minute bins and sum the values of\n    the timestamps falling into a bin.\n\n    >>> df.groupby('a').resample('3T').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  2\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:00:00  5  1\n\n    Upsample the series into 30 second bins.\n\n    >>> df.groupby('a').resample('30S').sum()\n                        a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:00:30  0  0\n        2000-01-01 00:01:00  0  1\n        2000-01-01 00:01:30  0  0\n        2000-01-01 00:02:00  0  0\n        2000-01-01 00:02:30  0  0\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:02:00  5  1\n\n    Resample by month. Values are assigned to the month of the period.\n\n    >>> df.groupby('a').resample('M').sum()\n                a  b\n    a\n    0   2000-01-31  0  3\n    5   2000-01-31  5  1\n\n    Downsample the series into 3 minute bins as above, but close the right\n    side of the bin interval.\n\n    >>> df.groupby('a').resample('3T', closed='right').sum()\n                             a  b\n    a\n    0   1999-12-31 23:57:00  0  1\n        2000-01-01 00:00:00  0  2\n    5   2000-01-01 00:00:00  5  1\n\n    Downsample the series into 3 minute bins and close the right side of\n    the bin interval, but label each bin using the right edge instead of\n    the left.\n\n    >>> df.groupby('a').resample('3T', closed='right', label='right').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:03:00  0  2\n    5   2000-01-01 00:03:00  5  1\n\n    Add an offset of twenty seconds.\n\n    >>> df.groupby('a').resample('3T', loffset='20s').sum()\n                           a  b\n    a\n    0   2000-01-01 00:00:20  0  2\n        2000-01-01 00:03:20  0  1\n    5   2000-01-01 00:00:20  5  1\n    \"\"\"\n    from pandas.core.resample import get_resampler_for_grouping\n    return get_resampler_for_grouping(self, rule, *args, **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef rolling(self, *args, **kwargs):\n    \"\"\"\n    Return a rolling grouper, providing rolling functionality per group.\n    \"\"\"\n    from pandas.core.window import RollingGroupby\n    return RollingGroupby(self, *args, **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef expanding(self, *args, **kwargs):\n    \"\"\"\n    Return an expanding grouper, providing expanding\n    functionality per group.\n    \"\"\"\n    from pandas.core.window import ExpandingGroupby\n    return ExpandingGroupby(self, *args, **kwargs)",
                            "def _fill(self, direction, limit=None):\n    \"\"\"\n    Shared function for `pad` and `backfill` to call Cython method.\n\n    Parameters\n    ----------\n    direction : {'ffill', 'bfill'}\n        Direction passed to underlying Cython function. `bfill` will cause\n        values to be filled backwards. `ffill` and any other values will\n        default to a forward fill\n    limit : int, default None\n        Maximum number of consecutive values to fill. If `None`, this\n        method will convert to -1 prior to passing to Cython\n\n    Returns\n    -------\n    `Series` or `DataFrame` with filled values\n\n    See Also\n    --------\n    pad\n    backfill\n    \"\"\"\n    if limit is None:\n        limit = -1\n    return self._get_cythonized_result('group_fillna_indexer', needs_mask=True, cython_dtype=np.dtype(np.int64), result_is_index=True, direction=direction, limit=limit)",
                            "@Substitution(name='groupby')\ndef pad(self, limit=None):\n    \"\"\"\n    Forward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.pad\n    DataFrame.pad\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill('ffill', limit=limit)",
                            "@Substitution(name='groupby')\ndef backfill(self, limit=None):\n    \"\"\"\n    Backward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.backfill\n    DataFrame.backfill\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill('bfill', limit=limit)",
                            "@Substitution(name='groupby')\n@Substitution(see_also=_common_see_also)\ndef nth(self, n: Union[int, List[int]], dropna: Optional[str]=None) -> DataFrame:\n    \"\"\"\n    Take the nth row from each group if n is an int, or a subset of rows\n    if n is a list of ints.\n\n    If dropna, will take the nth non-null row, dropna is either\n    'all' or 'any'; this is equivalent to calling dropna(how=dropna)\n    before the groupby.\n\n    Parameters\n    ----------\n    n : int or list of ints\n        A single nth value for the row or a list of nth values.\n    dropna : None or str, optional\n        Apply the specified dropna operation before counting which row is\n        the nth row. Needs to be None, 'any' or 'all'.\n\n    Returns\n    -------\n    Series or DataFrame\n        N-th value within each group.\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5]}, columns=['A', 'B'])\n    >>> g = df.groupby('A')\n    >>> g.nth(0)\n         B\n    A\n    1  NaN\n    2  3.0\n    >>> g.nth(1)\n         B\n    A\n    1  2.0\n    2  5.0\n    >>> g.nth(-1)\n         B\n    A\n    1  4.0\n    2  5.0\n    >>> g.nth([0, 1])\n         B\n    A\n    1  NaN\n    1  2.0\n    2  3.0\n    2  5.0\n\n    Specifying `dropna` allows count ignoring ``NaN``\n\n    >>> g.nth(0, dropna='any')\n         B\n    A\n    1  2.0\n    2  3.0\n\n    NaNs denote group exhausted when using dropna\n\n    >>> g.nth(3, dropna='any')\n        B\n    A\n    1 NaN\n    2 NaN\n\n    Specifying `as_index=False` in `groupby` keeps the original index.\n\n    >>> df.groupby('A', as_index=False).nth(1)\n       A    B\n    1  1  2.0\n    4  2  5.0\n    \"\"\"\n    valid_containers = (set, list, tuple)\n    if not isinstance(n, (valid_containers, int)):\n        raise TypeError('n needs to be an int or a list/set/tuple of ints')\n    if not dropna:\n        if isinstance(n, int):\n            nth_values = [n]\n        elif isinstance(n, valid_containers):\n            nth_values = list(set(n))\n        nth_array = np.array(nth_values, dtype=np.intp)\n        self._set_group_selection()\n        mask_left = np.in1d(self._cumcount_array(), nth_array)\n        mask_right = np.in1d(self._cumcount_array(ascending=False) + 1, -nth_array)\n        mask = mask_left | mask_right\n        (ids, _, _) = self.grouper.group_info\n        mask = mask & (ids != -1)\n        out = self._selected_obj[mask]\n        if not self.as_index:\n            return out\n        result_index = self.grouper.result_index\n        out.index = result_index[ids[mask]]\n        if not self.observed and isinstance(result_index, CategoricalIndex):\n            out = out.reindex(result_index)\n        out = self._reindex_output(out)\n        return out.sort_index() if self.sort else out\n    if isinstance(n, valid_containers):\n        raise ValueError('dropna option with a list of nth values is not supported')\n    if dropna not in ['any', 'all']:\n        raise ValueError(f\"For a DataFrame groupby, dropna must be either None, 'any' or 'all', (was passed {dropna}).\")\n    max_len = n if n >= 0 else -1 - n\n    dropped = self.obj.dropna(how=dropna, axis=self.axis)\n    if self.keys is None and self.level is None:\n        axis = self.grouper.axis\n        grouper = axis[axis.isin(dropped.index)]\n    else:\n        from pandas.core.groupby.grouper import get_grouper\n        (grouper, _, _) = get_grouper(dropped, key=self.keys, axis=self.axis, level=self.level, sort=self.sort, mutated=self.mutated)\n    grb = dropped.groupby(grouper, as_index=self.as_index, sort=self.sort)\n    (sizes, result) = (grb.size(), grb.nth(n))\n    mask = (sizes < max_len).values\n    if len(result) and mask.any():\n        result.loc[mask] = np.nan\n    if len(self.obj) == len(dropped) or len(result) == len(self.grouper.result_index):\n        result.index = self.grouper.result_index\n    else:\n        result = result.reindex(self.grouper.result_index)\n    return result",
                            "def quantile(self, q=0.5, interpolation: str='linear'):\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n\n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by caller of GroupBy object.\n\n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     ['a', 1], ['a', 2], ['a', 3],\n    ...     ['b', 1], ['b', 3], ['b', 5]\n    ... ], columns=['key', 'val'])\n    >>> df.groupby('key').quantile()\n        val\n    key\n    a    2.0\n    b    3.0\n    \"\"\"\n    from pandas import concat\n\n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_object_dtype(vals):\n            raise TypeError(\"'quantile' cannot be performed against 'object' dtypes!\")\n        inference = None\n        if is_integer_dtype(vals):\n            inference = np.int64\n        elif is_datetime64_dtype(vals):\n            inference = 'datetime64[ns]'\n            vals = np.asarray(vals).astype(np.float)\n        return (vals, inference)\n\n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference:\n            if not (is_integer_dtype(inference) and interpolation in {'linear', 'midpoint'}):\n                vals = vals.astype(inference)\n        return vals\n    if is_scalar(q):\n        return self._get_cythonized_result('group_quantile', aggregate=True, needs_values=True, needs_mask=True, cython_dtype=np.dtype(np.float64), pre_processing=pre_processor, post_processing=post_processor, q=q, interpolation=interpolation)\n    else:\n        results = [self._get_cythonized_result('group_quantile', aggregate=True, needs_values=True, needs_mask=True, cython_dtype=np.dtype(np.float64), pre_processing=pre_processor, post_processing=post_processor, q=qi, interpolation=interpolation) for qi in q]\n        result = concat(results, axis=0, keys=q)\n        order = list(range(1, result.index.nlevels)) + [0]\n        index_names = np.array(result.index.names)\n        result.index.names = np.arange(len(index_names))\n        result = result.reorder_levels(order)\n        result.index.names = index_names[order]\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)",
                            "@Substitution(name='groupby')\ndef ngroup(self, ascending: bool=True):\n    \"\"\"\n    Number each group from 0 to the number of groups - 1.\n\n    This is the enumerative complement of cumcount.  Note that the\n    numbers given to the groups match the order in which the groups\n    would be seen when iterating over the groupby object, not the\n    order they are first observed.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from number of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Unique numbers for each group.\n\n    See Also\n    --------\n    .cumcount : Number the rows in each group.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"A\": list(\"aaabba\")})\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').ngroup()\n    0    0\n    1    0\n    2    0\n    3    1\n    4    1\n    5    0\n    dtype: int64\n    >>> df.groupby('A').ngroup(ascending=False)\n    0    1\n    1    1\n    2    1\n    3    0\n    4    0\n    5    1\n    dtype: int64\n    >>> df.groupby([\"A\", [1,1,2,3,2,1]]).ngroup()\n    0    0\n    1    0\n    2    1\n    3    3\n    4    2\n    5    0\n    dtype: int64\n    \"\"\"\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        result = Series(self.grouper.group_info[0], index)\n        if not ascending:\n            result = self.ngroups - 1 - result\n        return result",
                            "@Substitution(name='groupby')\ndef cumcount(self, ascending: bool=True):\n    \"\"\"\n    Number each item in each group from 0 to the length of that group - 1.\n\n    Essentially this is equivalent to\n\n    >>> self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from length of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Sequence number of each element within each group.\n\n    See Also\n    --------\n    .ngroup : Number the groups themselves.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']],\n    ...                   columns=['A'])\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').cumcount()\n    0    0\n    1    1\n    2    2\n    3    0\n    4    1\n    5    3\n    dtype: int64\n    >>> df.groupby('A').cumcount(ascending=False)\n    0    3\n    1    2\n    2    1\n    3    1\n    4    0\n    5    0\n    dtype: int64\n    \"\"\"\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        cumcounts = self._cumcount_array(ascending=ascending)\n        return Series(cumcounts, index)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef rank(self, method: str='average', ascending: bool=True, na_option: str='keep', pct: bool=False, axis: int=0):\n    \"\"\"\n    Provide the rank of values within each group.\n\n    Parameters\n    ----------\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        * average: average rank of group.\n        * min: lowest rank in group.\n        * max: highest rank in group.\n        * first: ranks assigned in order they appear in the array.\n        * dense: like 'min', but rank always increases by 1 between groups.\n    ascending : bool, default True\n        False for ranks by high (1) to low (N).\n    na_option : {'keep', 'top', 'bottom'}, default 'keep'\n        * keep: leave NA values where they are.\n        * top: smallest rank if ascending.\n        * bottom: smallest rank if descending.\n    pct : bool, default False\n        Compute percentage rank of data within each group.\n    axis : int, default 0\n        The axis of the object over which to compute the rank.\n\n    Returns\n    -------\n    DataFrame with ranking of values within each group\n    \"\"\"\n    if na_option not in {'keep', 'top', 'bottom'}:\n        msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n        raise ValueError(msg)\n    return self._cython_transform('rank', numeric_only=False, ties_method=method, ascending=ascending, na_option=na_option, pct=pct, axis=axis)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef cumprod(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative product for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func('cumprod', args, kwargs, ['numeric_only', 'skipna'])\n    if axis != 0:\n        return self.apply(lambda x: x.cumprod(axis=axis, **kwargs))\n    return self._cython_transform('cumprod', **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef cumsum(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative sum for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func('cumsum', args, kwargs, ['numeric_only', 'skipna'])\n    if axis != 0:\n        return self.apply(lambda x: x.cumsum(axis=axis, **kwargs))\n    return self._cython_transform('cumsum', **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef cummin(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative min for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.minimum.accumulate(x, axis))\n    return self._cython_transform('cummin', numeric_only=False)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef cummax(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative max for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.maximum.accumulate(x, axis))\n    return self._cython_transform('cummax', numeric_only=False)",
                            "def _get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs):\n    \"\"\"\n    Get result for Cythonized functions.\n\n    Parameters\n    ----------\n    how : str, Cythonized function name to be called\n    cython_dtype : np.dtype\n        Type of the array that will be modified by the Cython call.\n    aggregate : bool, default False\n        Whether the result should be aggregated to match the number of\n        groups\n    needs_values : bool, default False\n        Whether the values should be a part of the Cython call\n        signature\n    needs_mask : bool, default False\n        Whether boolean mask needs to be part of the Cython call\n        signature\n    needs_ngroups : bool, default False\n        Whether number of groups is part of the Cython call signature\n    result_is_index : bool, default False\n        Whether the result of the Cython operation is an index of\n        values to be retrieved, instead of the actual values themselves\n    pre_processing : function, default None\n        Function to be applied to `values` prior to passing to Cython.\n        Function should return a tuple where the first element is the\n        values to be passed to Cython and the second element is an optional\n        type which the values should be converted to after being returned\n        by the Cython operation. Raises if `needs_values` is False.\n    post_processing : function, default None\n        Function to be applied to result of Cython function. Should accept\n        an array of values as the first argument and type inferences as its\n        second argument, i.e. the signature should be\n        (ndarray, Type).\n    **kwargs : dict\n        Extra arguments to be passed back to Cython funcs\n\n    Returns\n    -------\n    `Series` or `DataFrame`  with filled values\n    \"\"\"\n    if result_is_index and aggregate:\n        raise ValueError(\"'result_is_index' and 'aggregate' cannot both be True!\")\n    if post_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'post_processing' must be a callable!\")\n    if pre_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'pre_processing' must be a callable!\")\n        if not needs_values:\n            raise ValueError(\"Cannot use 'pre_processing' without specifying 'needs_values'!\")\n    grouper = self.grouper\n    (labels, _, ngroups) = grouper.group_info\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    base_func = getattr(libgroupby, how)\n    for (idx, obj) in enumerate(self._iterate_slices()):\n        name = obj.name\n        values = obj._values\n        if aggregate:\n            result_sz = ngroups\n        else:\n            result_sz = len(values)\n        result = np.zeros(result_sz, dtype=cython_dtype)\n        func = partial(base_func, result, labels)\n        inferences = None\n        if needs_values:\n            vals = values\n            if pre_processing:\n                (vals, inferences) = pre_processing(vals)\n            func = partial(func, vals)\n        if needs_mask:\n            mask = isna(values).view(np.uint8)\n            func = partial(func, mask)\n        if needs_ngroups:\n            func = partial(func, ngroups)\n        func(**kwargs)\n        if result_is_index:\n            result = algorithms.take_nd(values, result)\n        if post_processing:\n            result = post_processing(result, inferences)\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = result\n    if aggregate:\n        return self._wrap_aggregated_output(output)\n    else:\n        return self._wrap_transformed_output(output)",
                            "@Substitution(name='groupby')\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    \"\"\"\n    Shift each group by periods observations.\n\n    If freq is passed, the index will be increased using the periods and the freq.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods to shift.\n    freq : str, optional\n        Frequency string.\n    axis : axis to shift, default 0\n        Shift direction.\n    fill_value : optional\n        The scalar value to use for newly introduced missing values.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n        Object shifted within each group.\n\n    See Also\n    --------\n    Index.shift : Shift values of Index.\n    tshift : Shift the time index, using the index\u2019s frequency\n        if available.\n    \"\"\"\n    if freq is not None or axis != 0 or (not isna(fill_value)):\n        return self.apply(lambda x: x.shift(periods, freq, axis, fill_value))\n    return self._get_cythonized_result('group_shift_indexer', cython_dtype=np.dtype(np.int64), needs_ngroups=True, result_is_index=True, periods=periods)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, axis=0):\n    \"\"\"\n    Calculate pct_change of each value to previous entry in group.\n\n    Returns\n    -------\n    Series or DataFrame\n        Percentage changes within each group.\n    \"\"\"\n    if freq is not None or axis != 0:\n        return self.apply(lambda x: x.pct_change(periods=periods, fill_method=fill_method, limit=limit, freq=freq, axis=axis))\n    if fill_method is None:\n        fill_method = 'pad'\n        limit = 0\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n    return filled / shifted - 1",
                            "@Substitution(name='groupby')\n@Substitution(see_also=_common_see_also)\ndef head(self, n=5):\n    \"\"\"\n    Return first n rows of each group.\n\n    Similar to ``.apply(lambda x: x.head(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [1, 4], [5, 6]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').head(1)\n       A  B\n    0  1  2\n    2  5  6\n    >>> df.groupby('A').head(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array() < n\n    return self._selected_obj[mask]",
                            "@Substitution(name='groupby')\n@Substitution(see_also=_common_see_also)\ndef tail(self, n=5):\n    \"\"\"\n    Return last n rows of each group.\n\n    Similar to ``.apply(lambda x: x.tail(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').tail(1)\n       A  B\n    1  a  2\n    3  b  2\n    >>> df.groupby('A').tail(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array(ascending=False) < n\n    return self._selected_obj[mask]",
                            "def _reindex_output(self, output: OutputFrameOrSeries, fill_value: Scalar=np.NaN) -> OutputFrameOrSeries:\n    \"\"\"\n    If we have categorical groupers, then we might want to make sure that\n    we have a fully re-indexed output to the levels. This means expanding\n    the output space to accommodate all values in the cartesian product of\n    our groups, regardless of whether they were observed in the data or\n    not. This will expand the output space if there are missing groups.\n\n    The method returns early without modifying the input if the number of\n    groupings is less than 2, self.observed == True or none of the groupers\n    are categorical.\n\n    Parameters\n    ----------\n    output : Series or DataFrame\n        Object resulting from grouping and applying an operation.\n    fill_value : scalar, default np.NaN\n        Value to use for unobserved categories if self.observed is False.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object (potentially) re-indexed to include all possible groups.\n    \"\"\"\n    groupings = self.grouper.groupings\n    if groupings is None:\n        return output\n    elif len(groupings) == 1:\n        return output\n    elif self.observed:\n        return output\n    elif not any((isinstance(ping.grouper, (Categorical, CategoricalIndex)) for ping in groupings)):\n        return output\n    levels_list = [ping.group_index for ping in groupings]\n    (index, _) = MultiIndex.from_product(levels_list, names=self.grouper.names).sortlevel()\n    if self.as_index:\n        d = {self.obj._get_axis_name(self.axis): index, 'copy': False, 'fill_value': fill_value}\n        return output.reindex(**d)\n    in_axis_grps = ((i, ping.name) for (i, ping) in enumerate(groupings) if ping.in_axis)\n    (g_nums, g_names) = zip(*in_axis_grps)\n    output = output.drop(labels=list(g_names), axis=1)\n    output = output.set_index(self.grouper.result_index).reindex(index, copy=False, fill_value=fill_value)\n    output = output.reset_index(level=g_nums)\n    return output.reset_index(drop=True)",
                            "def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n    if is_object_dtype(vals):\n        vals = np.array([bool(x) for x in vals])\n    else:\n        vals = vals.astype(np.bool)\n    return (vals.view(np.uint8), np.bool)",
                            "def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n    return result.astype(inference, copy=False)",
                            "def groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1):\n    _local_template = '\\n            Compute %(f)s of group values.\\n\\n            Parameters\\n            ----------\\n            numeric_only : bool, default %(no)s\\n                Include only float, int, boolean columns. If None, will attempt to use\\n                everything, then use only numeric data.\\n            min_count : int, default %(mc)s\\n                The required number of valid values to perform the operation. If fewer\\n                than ``min_count`` non-NA values are present the result will be NA.\\n\\n            Returns\\n            -------\\n            Series or DataFrame\\n                Computed %(f)s of values within each group.\\n            '\n\n    @Substitution(name='groupby', f=name, no=numeric_only, mc=min_count)\n    @Appender(_common_see_also)\n    @Appender(_local_template)\n    def func(self, numeric_only=numeric_only, min_count=min_count):\n        self._set_group_selection()\n        try:\n            return self._cython_agg_general(how=alias, alt=npfunc, numeric_only=numeric_only, min_count=min_count)\n        except DataError:\n            pass\n        except NotImplementedError as err:\n            if 'function is not implemented for this dtype' in str(err) or 'category dtype not supported' in str(err):\n                pass\n            else:\n                raise\n        result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n        return result\n    set_function_name(func, name, cls)\n    return func",
                            "def first_compat(x, axis=0):\n\n    def first(x):\n        x = x.to_numpy()\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[0]\n    if isinstance(x, DataFrame):\n        return x.apply(first, axis=axis)\n    else:\n        return first(x)",
                            "def last_compat(x, axis=0):\n\n    def last(x):\n        x = x.to_numpy()\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[-1]\n    if isinstance(x, DataFrame):\n        return x.apply(last, axis=axis)\n    else:\n        return last(x)",
                            "def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n    if is_object_dtype(vals):\n        raise TypeError(\"'quantile' cannot be performed against 'object' dtypes!\")\n    inference = None\n    if is_integer_dtype(vals):\n        inference = np.int64\n    elif is_datetime64_dtype(vals):\n        inference = 'datetime64[ns]'\n        vals = np.asarray(vals).astype(np.float)\n    return (vals, inference)",
                            "def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n    if inference:\n        if not (is_integer_dtype(inference) and interpolation in {'linear', 'midpoint'}):\n            vals = vals.astype(inference)\n    return vals",
                            "@Substitution(name='groupby', f=name, no=numeric_only, mc=min_count)\n@Appender(_common_see_also)\n@Appender(_local_template)\ndef func(self, numeric_only=numeric_only, min_count=min_count):\n    self._set_group_selection()\n    try:\n        return self._cython_agg_general(how=alias, alt=npfunc, numeric_only=numeric_only, min_count=min_count)\n    except DataError:\n        pass\n    except NotImplementedError as err:\n        if 'function is not implemented for this dtype' in str(err) or 'category dtype not supported' in str(err):\n            pass\n        else:\n            raise\n    result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n    return result",
                            "def first(x):\n    x = x.to_numpy()\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[0]",
                            "def last(x):\n    x = x.to_numpy()\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[-1]"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "ffill = pad",
                            "bfill = backfill"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "_bool_agg(self, val_test, skipna)",
                            "any(self, skipna: bool=True)",
                            "all(self, skipna: bool=True)",
                            "count(self)",
                            "mean(self, numeric_only: bool=True)",
                            "median(self, numeric_only=True)",
                            "std(self, ddof: int=1)",
                            "var(self, ddof: int=1)",
                            "sem(self, ddof: int=1)",
                            "size(self)",
                            "_add_numeric_operations(cls)",
                            "ohlc(self) -> DataFrame",
                            "describe(self, **kwargs)",
                            "resample(self, rule, *args, **kwargs)",
                            "rolling(self, *args, **kwargs)",
                            "expanding(self, *args, **kwargs)",
                            "_fill(self, direction, limit=None)",
                            "pad(self, limit=None)",
                            "backfill(self, limit=None)",
                            "nth(self, n: Union[int, List[int]], dropna: Optional[str]=None) -> DataFrame",
                            "quantile(self, q=0.5, interpolation: str='linear')",
                            "ngroup(self, ascending: bool=True)",
                            "cumcount(self, ascending: bool=True)",
                            "rank(self, method: str='average', ascending: bool=True, na_option: str='keep', pct: bool=False, axis: int=0)",
                            "cumprod(self, axis=0, *args, **kwargs)",
                            "cumsum(self, axis=0, *args, **kwargs)",
                            "cummin(self, axis=0, **kwargs)",
                            "cummax(self, axis=0, **kwargs)",
                            "_get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs)",
                            "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                            "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, axis=0)",
                            "head(self, n=5)",
                            "tail(self, n=5)",
                            "_reindex_output(self, output: OutputFrameOrSeries, fill_value: Scalar=np.NaN) -> OutputFrameOrSeries",
                            "objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]",
                            "result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray",
                            "groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1)",
                            "first_compat(x, axis=0)",
                            "last_compat(x, axis=0)",
                            "pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]",
                            "post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray",
                            "func(self, numeric_only=numeric_only, min_count=min_count)",
                            "first(x)",
                            "last(x)"
                        ],
                        "class_level_variable_names": [
                            "ffill",
                            "bfill"
                        ],
                        "constructor_variable_names": []
                    },
                    "used_imports": [
                        "from typing import Callable, Dict, FrozenSet, Generic, Hashable, Iterable, List, Mapping, Optional, Tuple, Type, TypeVar, Union",
                        "import numpy as np",
                        "from pandas.core.dtypes.common import ensure_float, is_datetime64_dtype, is_integer_dtype, is_numeric_dtype, is_object_dtype, is_scalar",
                        "from pandas import concat"
                    ],
                    "variable_values": [
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d81d700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d81d700>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d81d700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d81d700>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7f521d839820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7f521d839790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7f51ff739280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d81d700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d81d700>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "<IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64",
                                    "variable_type": "IntegerArray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<bound method IntegerArray.astype of <IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d81d700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d81d700>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7f521d839820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7f521d839790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7f51ff739280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d974790>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d974790>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d974790>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d974790>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7f521d640430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7f521d6404c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7f51ff739280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d974790>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d974790>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "<BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean",
                                    "variable_type": "BooleanArray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<bound method BooleanArray.astype of <BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d974790>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521d974790>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7f521d640430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7f521d6404c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7f51ff739280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521908fb50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521908fb50>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "<IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64",
                                    "variable_type": "IntegerArray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<bound method IntegerArray.astype of <IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521908fb50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521908fb50>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7f521d962700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7f521d9625e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7f51ff739280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521908f130>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521908f130>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "<BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean",
                                    "variable_type": "BooleanArray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<bound method BooleanArray.astype of <BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521908f130>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f521908f130>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7f521d9c4280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7f521d9c41f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7f51ff739280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476a60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b34769d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([ 1.,  0., nan,  1.,  0., nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b35603a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476a60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b34769d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([0.5, 0.5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b3560300>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b346edc0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476a60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b34769d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b34763a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b34761f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([ 1.,  0., nan,  1.,  0., nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b3578f80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b34763a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b34761f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([0.5, 0.5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b3578ee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35425e0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b34763a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b34761f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([ 1.,  0., nan,  1.,  0., nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b358e8f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b356ae50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b356ab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([0., 0.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b358e710>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b356ae50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b356ab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([ 1.,  0., nan,  1.,  0., nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b358eb20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b356ae50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b356ab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([0.5, 0.5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b358e8a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b356ae50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b356ab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([ 1.,  0., nan,  1.,  0., nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b358ecb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b356ae50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b356ab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([1., 1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "inference": {
                                    "variable_value": "<class 'numpy.int64'>",
                                    "variable_type": "type",
                                    "variable_shape": "<attribute 'shape' of 'numpy.generic' objects>"
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b358e8f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b356ae50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b356ab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b3542430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b356ae50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b356ab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": "[a\nx    0.0\ny    0.0\nName: b, dtype: float64, a\nx    0.5\ny    0.5\nName: b, dtype: float64, a\nx    1.0\ny    1.0\nName: b, dtype: float64]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "a     \nx  0.0    0.0\ny  0.0    0.0\nx  0.5    0.5\ny  0.5    0.5\nx  1.0    1.0\ny  1.0    1.0\nName: b, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(6,)"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "[1, 0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "result.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": "MultiIndex([('x', 0.0),\n            ('y', 0.0),\n            ('x', 0.5),\n            ('y', 0.5),\n            ('x', 1.0),\n            ('y', 1.0)],\n           names=['a', None])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(6,)"
                                },
                                "index_names": {
                                    "variable_value": "array([None, 'a'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": "<bound method Series.reorder_levels of a     \nx  0.0    0.0\ny  0.0    0.0\nx  0.5    0.5\ny  0.5    0.5\nx  1.0    1.0\ny  1.0    1.0\nName: b, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": "array([0, 2, 4, 1, 3, 5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": "<bound method Series.take of a     \nx  0.0    0.0\ny  0.0    0.0\nx  0.5    0.5\ny  0.5    0.5\nx  1.0    1.0\ny  1.0    1.0\nName: b, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([ 1.,  0., nan,  1.,  0., nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b35a0800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b3476790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([0., 0.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b35a0990>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b3476790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([ 1.,  0., nan,  1.,  0., nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b35a0c60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b3476790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([0.5, 0.5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b35a07b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b3476790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([ 1.,  0., nan,  1.,  0., nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b35a0da0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b3476790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": "array([1., 1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "inference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7fb3b35a0800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b3476790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inference": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "vals.to_numpy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolation": {
                                    "variable_value": "'linear'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "vals.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "q": {
                                    "variable_value": "[0.0, 0.5, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_cythonized_result": {
                                    "variable_value": "<bound method GroupBy._get_cythonized_result of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fb3b35871f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pre_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.pre_processor at 0x7fb3b3476040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "post_processor": {
                                    "variable_value": "<function GroupBy.quantile.<locals>.post_processor at 0x7fb3b3476790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "results": {
                                    "variable_value": "[a\nx    0.0\ny    0.0\nName: b, dtype: float64, a\nx    0.5\ny    0.5\nName: b, dtype: float64, a\nx    1.0\ny    1.0\nName: b, dtype: float64]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "qi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "a     \nx  0.0    0.0\ny  0.0    0.0\nx  0.5    0.5\ny  0.5    0.5\nx  1.0    1.0\ny  1.0    1.0\nName: b, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(6,)"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x7fb3971eb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "[1, 0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "result.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": "MultiIndex([('x', 0.0),\n            ('y', 0.0),\n            ('x', 0.5),\n            ('y', 0.5),\n            ('x', 1.0),\n            ('y', 1.0)],\n           names=['a', None])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(6,)"
                                },
                                "index_names": {
                                    "variable_value": "array([None, 'a'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.reorder_levels": {
                                    "variable_value": "<bound method Series.reorder_levels of a     \nx  0.0    0.0\ny  0.0    0.0\nx  0.5    0.5\ny  0.5    0.5\nx  1.0    1.0\ny  1.0    1.0\nName: b, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "indices": {
                                    "variable_value": "array([0, 2, 4, 1, 3, 5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "T.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ngroups": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result.take": {
                                    "variable_value": "<bound method Series.take of a     \nx  0.0    0.0\ny  0.0    0.0\nx  0.5    0.5\ny  0.5    0.5\nx  1.0    1.0\ny  1.0    1.0\nName: b, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from pandas.core.dtypes.common import (\n    ensure_float,\n    is_datetime64_dtype,\n    is_integer_dtype,\n    is_numeric_dtype,\n    is_object_dtype,\n    is_scalar,\n)",
                    "start_line": 45,
                    "end_line": 52
                }
            ],
            "inscope_functions": [
                "@contextmanager\ndef _group_selection_context(groupby):\n    \"\"\"\n    Set / reset the _group_selection_context.\n    \"\"\"\n    groupby._set_group_selection()\n    yield groupby\n    groupby._reset_group_selection()",
                "@doc(GroupBy)\ndef get_groupby(\n    obj: NDFrame,\n    by: Optional[_KeysArgType] = None,\n    axis: int = 0,\n    level=None,\n    grouper: \"Optional[ops.BaseGrouper]\" = None,\n    exclusions=None,\n    selection=None,\n    as_index: bool = True,\n    sort: bool = True,\n    group_keys: bool = True,\n    squeeze: bool = False,\n    observed: bool = False,\n    mutated: bool = False,\n) -> GroupBy:\n\n    klass: Type[GroupBy]\n    if isinstance(obj, Series):\n        from pandas.core.groupby.generic import SeriesGroupBy\n\n        klass = SeriesGroupBy\n    elif isinstance(obj, DataFrame):\n        from pandas.core.groupby.generic import DataFrameGroupBy\n\n        klass = DataFrameGroupBy\n    else:\n        raise TypeError(f\"invalid type: {obj}\")\n\n    return klass(\n        obj=obj,\n        keys=by,\n        axis=axis,\n        level=level,\n        grouper=grouper,\n        exclusions=exclusions,\n        selection=selection,\n        as_index=as_index,\n        sort=sort,\n        group_keys=group_keys,\n        squeeze=squeeze,\n        observed=observed,\n        mutated=mutated,\n    )",
                "def __init__(self, groupby):\n    self._groupby = groupby",
                "def __call__(self, *args, **kwargs):\n    def f(self):\n        return self.plot(*args, **kwargs)\n\n    f.__name__ = \"plot\"\n    return self._groupby.apply(f)",
                "def __getattr__(self, name: str):\n    def attr(*args, **kwargs):\n        def f(self):\n            return getattr(self.plot, name)(*args, **kwargs)\n\n        return self._groupby.apply(f)\n\n    return attr",
                "def __init__(\n    self,\n    obj: FrameOrSeries,\n    keys: Optional[_KeysArgType] = None,\n    axis: int = 0,\n    level=None,\n    grouper: \"Optional[ops.BaseGrouper]\" = None,\n    exclusions=None,\n    selection=None,\n    as_index: bool = True,\n    sort: bool = True,\n    group_keys: bool = True,\n    squeeze: bool = False,\n    observed: bool = False,\n    mutated: bool = False,\n):\n\n    self._selection = selection\n\n    assert isinstance(obj, NDFrame), type(obj)\n    obj._consolidate_inplace()\n\n    self.level = level\n\n    if not as_index:\n        if not isinstance(obj, DataFrame):\n            raise TypeError(\"as_index=False only valid with DataFrame\")\n        if axis != 0:\n            raise ValueError(\"as_index=False only valid for axis=0\")\n\n    self.as_index = as_index\n    self.keys = keys\n    self.sort = sort\n    self.group_keys = group_keys\n    self.squeeze = squeeze\n    self.observed = observed\n    self.mutated = mutated\n\n    if grouper is None:\n        from pandas.core.groupby.grouper import get_grouper\n\n        grouper, exclusions, obj = get_grouper(\n            obj,\n            keys,\n            axis=axis,\n            level=level,\n            sort=sort,\n            observed=observed,\n            mutated=self.mutated,\n        )\n\n    self.obj = obj\n    self.axis = obj._get_axis_number(axis)\n    self.grouper = grouper\n    self.exclusions = set(exclusions) if exclusions else set()",
                "def __len__(self) -> int:\n    return len(self.groups)",
                "def __repr__(self) -> str:\n    # TODO: Better repr for GroupBy object\n    return object.__repr__(self)",
                "def _assure_grouper(self):\n    \"\"\"\n    We create the grouper on instantiation sub-classes may have a\n    different policy.\n    \"\"\"\n    pass",
                "@property\ndef groups(self):\n    \"\"\"\n    Dict {group name -> group labels}.\n    \"\"\"\n    self._assure_grouper()\n    return self.grouper.groups",
                "@property\ndef ngroups(self):\n    self._assure_grouper()\n    return self.grouper.ngroups",
                "@property\ndef indices(self):\n    \"\"\"\n    Dict {group name -> group indices}.\n    \"\"\"\n    self._assure_grouper()\n    return self.grouper.indices",
                "def _get_indices(self, names):\n    \"\"\"\n    Safe get multiple indices, translate keys for\n    datelike to underlying repr.\n    \"\"\"\n\n    def get_converter(s):\n        # possibly convert to the actual key types\n        # in the indices, could be a Timestamp or a np.datetime64\n        if isinstance(s, datetime.datetime):\n            return lambda key: Timestamp(key)\n        elif isinstance(s, np.datetime64):\n            return lambda key: Timestamp(key).asm8\n        else:\n            return lambda key: key\n\n    if len(names) == 0:\n        return []\n\n    if len(self.indices) > 0:\n        index_sample = next(iter(self.indices))\n    else:\n        index_sample = None  # Dummy sample\n\n    name_sample = names[0]\n    if isinstance(index_sample, tuple):\n        if not isinstance(name_sample, tuple):\n            msg = \"must supply a tuple to get_group with multiple grouping keys\"\n            raise ValueError(msg)\n        if not len(name_sample) == len(index_sample):\n            try:\n                # If the original grouper was a tuple\n                return [self.indices[name] for name in names]\n            except KeyError as err:\n                # turns out it wasn't a tuple\n                msg = (\n                    \"must supply a same-length tuple to get_group \"\n                    \"with multiple grouping keys\"\n                )\n                raise ValueError(msg) from err\n\n        converters = [get_converter(s) for s in index_sample]\n        names = (tuple(f(n) for f, n in zip(converters, name)) for name in names)\n\n    else:\n        converter = get_converter(index_sample)\n        names = (converter(name) for name in names)\n\n    return [self.indices.get(name, []) for name in names]",
                "def _get_index(self, name):\n    \"\"\"\n    Safe get index, translate keys for datelike to underlying repr.\n    \"\"\"\n    return self._get_indices([name])[0]",
                "@cache_readonly\ndef _selected_obj(self):\n    # Note: _selected_obj is always just `self.obj` for SeriesGroupBy\n\n    if self._selection is None or isinstance(self.obj, Series):\n        if self._group_selection is not None:\n            return self.obj[self._group_selection]\n        return self.obj\n    else:\n        return self.obj[self._selection]",
                "def _reset_group_selection(self):\n    \"\"\"\n    Clear group based selection.\n\n    Used for methods needing to return info on each group regardless of\n    whether a group selection was previously set.\n    \"\"\"\n    if self._group_selection is not None:\n        # GH12839 clear cached selection too when changing group selection\n        self._group_selection = None\n        self._reset_cache(\"_selected_obj\")",
                "def _set_group_selection(self):\n    \"\"\"\n    Create group based selection.\n\n    Used when selection is not passed directly but instead via a grouper.\n\n    NOTE: this should be paired with a call to _reset_group_selection\n    \"\"\"\n    grp = self.grouper\n    if not (\n        self.as_index\n        and getattr(grp, \"groupings\", None) is not None\n        and self.obj.ndim > 1\n        and self._group_selection is None\n    ):\n        return\n\n    ax = self.obj._info_axis\n    groupers = [g.name for g in grp.groupings if g.level is None and g.in_axis]\n\n    if len(groupers):\n        # GH12839 clear selected obj cache when group selection changes\n        self._group_selection = ax.difference(Index(groupers), sort=False).tolist()\n        self._reset_cache(\"_selected_obj\")",
                "def _set_result_index_ordered(self, result):\n    # set the result index on the passed values object and\n    # return the new object, xref 8046\n\n    # the values/counts are repeated according to the group index\n    # shortcut if we have an already ordered grouper\n    if not self.grouper.is_monotonic:\n        index = Index(np.concatenate(self._get_indices(self.grouper.result_index)))\n        result.set_axis(index, axis=self.axis, inplace=True)\n        result = result.sort_index(axis=self.axis)\n\n    result.set_axis(self.obj._get_axis(self.axis), axis=self.axis, inplace=True)\n    return result",
                "def _dir_additions(self):\n    return self.obj._dir_additions() | self._apply_whitelist",
                "def __getattr__(self, attr: str):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self.obj:\n        return self[attr]\n\n    raise AttributeError(\n        f\"'{type(self).__name__}' object has no attribute '{attr}'\"\n    )",
                "    @Substitution(\n        klass=\"GroupBy\",\n        versionadded=\".. versionadded:: 0.21.0\",\n        examples=\"\"\"\\\n>>> df = pd.DataFrame({'A': 'a b a b'.split(), 'B': [1, 2, 3, 4]})\n>>> df\n   A  B\n0  a  1\n1  b  2\n2  a  3\n3  b  4\n\nTo get the difference between each groups maximum and minimum value in one\npass, you can do\n\n>>> df.groupby('A').pipe(lambda x: x.max() - x.min())\n   B\nA\na  2\nb  2\"\"\",\n    )\n    @Appender(_pipe_template)\n    def pipe(self, func, *args, **kwargs):\n        return com.pipe(self, func, *args, **kwargs)",
                "def _make_wrapper(self, name):\n    assert name in self._apply_whitelist\n\n    self._set_group_selection()\n\n    # need to setup the selection\n    # as are not passed directly but in the grouper\n    f = getattr(self._selected_obj, name)\n    if not isinstance(f, types.MethodType):\n        return self.apply(lambda self: getattr(self, name))\n\n    f = getattr(type(self._selected_obj), name)\n    sig = inspect.signature(f)\n\n    def wrapper(*args, **kwargs):\n        # a little trickery for aggregation functions that need an axis\n        # argument\n        if \"axis\" in sig.parameters:\n            if kwargs.get(\"axis\", None) is None:\n                kwargs[\"axis\"] = self.axis\n\n        def curried(x):\n            return f(x, *args, **kwargs)\n\n        # preserve the name so we can detect it when calling plot methods,\n        # to avoid duplicates\n        curried.__name__ = name\n\n        # special case otherwise extra plots are created when catching the\n        # exception below\n        if name in base.plotting_methods:\n            return self.apply(curried)\n\n        try:\n            return self.apply(curried)\n        except TypeError as err:\n            if not re.search(\n                \"reduction operation '.*' not allowed for this dtype\", str(err)\n            ):\n                # We don't have a cython implementation\n                # TODO: is the above comment accurate?\n                raise\n\n        if self.obj.ndim == 1:\n            # this can be called recursively, so need to raise ValueError\n            raise ValueError\n\n        # GH#3688 try to operate item-by-item\n        result = self._aggregate_item_by_item(name, *args, **kwargs)\n        return result\n\n    wrapper.__name__ = name\n    return wrapper",
                "def get_group(self, name, obj=None):\n    \"\"\"\n    Construct DataFrame from group with provided name.\n\n    Parameters\n    ----------\n    name : object\n        The name of the group to get as a DataFrame.\n    obj : DataFrame, default None\n        The DataFrame to take the DataFrame out of.  If\n        it is None, the object groupby was called on will\n        be used.\n\n    Returns\n    -------\n    group : same type as obj\n    \"\"\"\n    if obj is None:\n        obj = self._selected_obj\n\n    inds = self._get_index(name)\n    if not len(inds):\n        raise KeyError(name)\n\n    return obj._take_with_is_copy(inds, axis=self.axis)",
                "def __iter__(self):\n    \"\"\"\n    Groupby iterator.\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    return self.grouper.get_iterator(self.obj, axis=self.axis)",
                "@Appender(\n    _apply_docs[\"template\"].format(\n        input=\"dataframe\", examples=_apply_docs[\"dataframe_examples\"]\n    )\n)\ndef apply(self, func, *args, **kwargs):\n\n    func = self._is_builtin_func(func)\n\n    # this is needed so we don't try and wrap strings. If we could\n    # resolve functions to their callable functions prior, this\n    # wouldn't be needed\n    if args or kwargs:\n        if callable(func):\n\n            @wraps(func)\n            def f(g):\n                with np.errstate(all=\"ignore\"):\n                    return func(g, *args, **kwargs)\n\n        elif hasattr(nanops, \"nan\" + func):\n            # TODO: should we wrap this in to e.g. _is_builtin_func?\n            f = getattr(nanops, \"nan\" + func)\n\n        else:\n            raise ValueError(\n                \"func must be a callable if args or kwargs are supplied\"\n            )\n    else:\n        f = func\n\n    # ignore SettingWithCopy here in case the user mutates\n    with option_context(\"mode.chained_assignment\", None):\n        try:\n            result = self._python_apply_general(f)\n        except TypeError:\n            # gh-20949\n            # try again, with .apply acting as a filtering\n            # operation, by excluding the grouping column\n            # This would normally not be triggered\n            # except if the udf is trying an operation that\n            # fails on *some* columns, e.g. a numeric operation\n            # on a string grouper column\n\n            with _group_selection_context(self):\n                return self._python_apply_general(f)\n\n    return result",
                "def _python_apply_general(self, f):\n    keys, values, mutated = self.grouper.apply(f, self._selected_obj, self.axis)\n\n    return self._wrap_applied_output(\n        keys, values, not_indexed_same=mutated or self.mutated\n    )",
                "def _iterate_slices(self) -> Iterable[Series]:\n    raise AbstractMethodError(self)",
                "def transform(self, func, *args, **kwargs):\n    raise AbstractMethodError(self)",
                "def _cumcount_array(self, ascending: bool = True):\n    \"\"\"\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from length of group - 1 to 0.\n\n    Notes\n    -----\n    this is currently implementing sort=False\n    (though the default is sort=True) for groupby in general\n    \"\"\"\n    ids, _, ngroups = self.grouper.group_info\n    sorter = get_group_index_sorter(ids, ngroups)\n    ids, count = ids[sorter], len(ids)\n\n    if count == 0:\n        return np.empty(0, dtype=np.int64)\n\n    run = np.r_[True, ids[:-1] != ids[1:]]\n    rep = np.diff(np.r_[np.nonzero(run)[0], count])\n    out = (~run).cumsum()\n\n    if ascending:\n        out -= np.repeat(out[run], rep)\n    else:\n        out = np.repeat(out[np.r_[run[1:], True]], rep) - out\n\n    rev = np.empty(count, dtype=np.intp)\n    rev[sorter] = np.arange(count, dtype=np.intp)\n    return out[rev].astype(np.int64, copy=False)",
                "def _transform_should_cast(self, func_nm: str) -> bool:\n    \"\"\"\n    Parameters\n    ----------\n    func_nm: str\n        The name of the aggregation function being performed\n\n    Returns\n    -------\n    bool\n        Whether transform should attempt to cast the result of aggregation\n    \"\"\"\n    return (self.size().fillna(0) > 0).any() and (\n        func_nm not in base.cython_cast_blacklist\n    )",
                "def _cython_transform(self, how: str, numeric_only: bool = True, **kwargs):\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        is_numeric = is_numeric_dtype(obj.dtype)\n        if numeric_only and not is_numeric:\n            continue\n\n        try:\n            result, _ = self.grouper.transform(obj.values, how, **kwargs)\n        except NotImplementedError:\n            continue\n\n        if self._transform_should_cast(how):\n            result = maybe_cast_result(result, obj, how=how)\n\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = result\n\n    if len(output) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    return self._wrap_transformed_output(output)",
                "def _wrap_aggregated_output(self, output: Mapping[base.OutputKey, np.ndarray]):\n    raise AbstractMethodError(self)",
                "def _wrap_transformed_output(self, output: Mapping[base.OutputKey, np.ndarray]):\n    raise AbstractMethodError(self)",
                "def _wrap_applied_output(self, keys, values, not_indexed_same: bool = False):\n    raise AbstractMethodError(self)",
                "def _cython_agg_general(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n):\n    output: Dict[base.OutputKey, Union[np.ndarray, DatetimeArray]] = {}\n    # Ideally we would be able to enumerate self._iterate_slices and use\n    # the index from enumeration as the key of output, but ohlc in particular\n    # returns a (n x 4) array. Output requires 1D ndarrays as values, so we\n    # need to slice that up into 1D arrays\n    idx = 0\n    for obj in self._iterate_slices():\n        name = obj.name\n        is_numeric = is_numeric_dtype(obj.dtype)\n        if numeric_only and not is_numeric:\n            continue\n\n        result, agg_names = self.grouper.aggregate(\n            obj._values, how, min_count=min_count\n        )\n\n        if agg_names:\n            # e.g. ohlc\n            assert len(agg_names) == result.shape[1]\n            for result_column, result_name in zip(result.T, agg_names):\n                key = base.OutputKey(label=result_name, position=idx)\n                output[key] = maybe_cast_result(result_column, obj, how=how)\n                idx += 1\n        else:\n            assert result.ndim == 1\n            key = base.OutputKey(label=name, position=idx)\n            output[key] = maybe_cast_result(result, obj, how=how)\n            idx += 1\n\n    if len(output) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    return self._wrap_aggregated_output(output)",
                "def _python_agg_general(self, func, *args, **kwargs):\n    func = self._is_builtin_func(func)\n    f = lambda x: func(x, *args, **kwargs)\n\n    # iterate through \"columns\" ex exclusions to populate output dict\n    output: Dict[base.OutputKey, np.ndarray] = {}\n\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        if self.grouper.ngroups == 0:\n            # agg_series below assumes ngroups > 0\n            continue\n\n        try:\n            # if this function is invalid for this dtype, we will ignore it.\n            result, counts = self.grouper.agg_series(obj, f)\n        except TypeError:\n            continue\n\n        assert result is not None\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = maybe_cast_result(result, obj, numeric_only=True)\n\n    if len(output) == 0:\n        return self._python_apply_general(f)\n\n    if self.grouper._filter_empty_groups:\n\n        mask = counts.ravel() > 0\n        for key, result in output.items():\n\n            # since we are masking, make sure that we have a float object\n            values = result\n            if is_numeric_dtype(values.dtype):\n                values = ensure_float(values)\n\n            output[key] = maybe_cast_result(values[mask], result)\n\n    return self._wrap_aggregated_output(output)",
                "def _concat_objects(self, keys, values, not_indexed_same: bool = False):\n    from pandas.core.reshape.concat import concat\n\n    def reset_identity(values):\n        # reset the identities of the components\n        # of the values to prevent aliasing\n        for v in com.not_none(*values):\n            ax = v._get_axis(self.axis)\n            ax._reset_identity()\n        return values\n\n    if not not_indexed_same:\n        result = concat(values, axis=self.axis)\n        ax = self._selected_obj._get_axis(self.axis)\n\n        # this is a very unfortunate situation\n        # we can't use reindex to restore the original order\n        # when the ax has duplicates\n        # so we resort to this\n        # GH 14776, 30667\n        if ax.has_duplicates:\n            indexer, _ = result.index.get_indexer_non_unique(ax.values)\n            indexer = algorithms.unique1d(indexer)\n            result = result.take(indexer, axis=self.axis)\n        else:\n            result = result.reindex(ax, axis=self.axis)\n\n    elif self.group_keys:\n\n        values = reset_identity(values)\n        if self.as_index:\n\n            # possible MI return case\n            group_keys = keys\n            group_levels = self.grouper.levels\n            group_names = self.grouper.names\n\n            result = concat(\n                values,\n                axis=self.axis,\n                keys=group_keys,\n                levels=group_levels,\n                names=group_names,\n                sort=False,\n            )\n        else:\n\n            # GH5610, returns a MI, with the first level being a\n            # range index\n            keys = list(range(len(values)))\n            result = concat(values, axis=self.axis, keys=keys)\n    else:\n        values = reset_identity(values)\n        result = concat(values, axis=self.axis)\n\n    if isinstance(result, Series) and self._selection_name is not None:\n\n        result.name = self._selection_name\n\n    return result",
                "def _apply_filter(self, indices, dropna):\n    if len(indices) == 0:\n        indices = np.array([], dtype=\"int64\")\n    else:\n        indices = np.sort(np.concatenate(indices))\n    if dropna:\n        filtered = self._selected_obj.take(indices, axis=self.axis)\n    else:\n        mask = np.empty(len(self._selected_obj.index), dtype=bool)\n        mask.fill(False)\n        mask[indices.astype(int)] = True\n        # mask fails to broadcast when passed to where; broadcast manually.\n        mask = np.tile(mask, list(self._selected_obj.shape[1:]) + [1]).T\n        filtered = self._selected_obj.where(mask)  # Fill with NaNs.\n    return filtered",
                "def _bool_agg(self, val_test, skipna):\n    \"\"\"\n    Shared func to call any / all Cython GroupBy implementations.\n    \"\"\"\n\n    def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n        if is_object_dtype(vals):\n            vals = np.array([bool(x) for x in vals])\n        else:\n            vals = vals.astype(np.bool)\n\n        return vals.view(np.uint8), np.bool\n\n    def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n        return result.astype(inference, copy=False)\n\n    return self._get_cythonized_result(\n        \"group_any_all\",\n        aggregate=True,\n        cython_dtype=np.dtype(np.uint8),\n        needs_values=True,\n        needs_mask=True,\n        pre_processing=objs_to_bool,\n        post_processing=result_to_bool,\n        val_test=val_test,\n        skipna=skipna,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef any(self, skipna: bool = True):\n    \"\"\"\n    Return True if any value in the group is truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg(\"any\", skipna)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef all(self, skipna: bool = True):\n    \"\"\"\n    Return True if all values in the group are truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg(\"all\", skipna)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n        Count of values within each group.\n    \"\"\"\n    # defined here for API doc\n    raise NotImplementedError",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef mean(self, numeric_only: bool = True):\n    \"\"\"\n    Compute mean of groups, excluding missing values.\n\n    Parameters\n    ----------\n    numeric_only : bool, default True\n        Include only float, int, boolean columns. If None, will attempt to use\n        everything, then use only numeric data.\n\n    Returns\n    -------\n    pandas.Series or pandas.DataFrame\n    %(see_also)s\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5],\n    ...                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])\n\n    Groupby one column and return the mean of the remaining columns in\n    each group.\n\n    >>> df.groupby('A').mean()\n         B         C\n    A\n    1  3.0  1.333333\n    2  4.0  1.500000\n\n    Groupby two columns and return the mean of the remaining column.\n\n    >>> df.groupby(['A', 'B']).mean()\n           C\n    A B\n    1 2.0  2\n      4.0  1\n    2 3.0  1\n      5.0  2\n\n    Groupby one column and return the mean of only particular column in\n    the group.\n\n    >>> df.groupby('A')['B'].mean()\n    A\n    1    3.0\n    2    4.0\n    Name: B, dtype: float64\n    \"\"\"\n    return self._cython_agg_general(\n        \"mean\",\n        alt=lambda x, axis: Series(x).mean(numeric_only=numeric_only),\n        numeric_only=numeric_only,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef median(self, numeric_only=True):\n    \"\"\"\n    Compute median of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Parameters\n    ----------\n    numeric_only : bool, default True\n        Include only float, int, boolean columns. If None, will attempt to use\n        everything, then use only numeric data.\n\n    Returns\n    -------\n    Series or DataFrame\n        Median of values within each group.\n    \"\"\"\n    return self._cython_agg_general(\n        \"median\",\n        alt=lambda x, axis: Series(x).median(axis=axis, numeric_only=numeric_only),\n        numeric_only=numeric_only,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef std(self, ddof: int = 1):\n    \"\"\"\n    Compute standard deviation of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard deviation of values within each group.\n    \"\"\"\n    # TODO: implement at Cython level?\n    return np.sqrt(self.var(ddof=ddof))",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef var(self, ddof: int = 1):\n    \"\"\"\n    Compute variance of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Variance of values within each group.\n    \"\"\"\n    if ddof == 1:\n        return self._cython_agg_general(\n            \"var\", alt=lambda x, axis: Series(x).var(ddof=ddof)\n        )\n    else:\n        func = lambda x: x.var(ddof=ddof)\n        with _group_selection_context(self):\n            return self._python_agg_general(func)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef sem(self, ddof: int = 1):\n    \"\"\"\n    Compute standard error of the mean of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard error of the mean of values within each group.\n    \"\"\"\n    return self.std(ddof=ddof) / np.sqrt(self.count())",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef size(self):\n    \"\"\"\n    Compute group sizes.\n\n    Returns\n    -------\n    Series\n        Number of rows in each group.\n    \"\"\"\n    result = self.grouper.size()\n\n    if isinstance(self.obj, Series):\n        result.name = self.obj.name\n    return self._reindex_output(result, fill_value=0)",
                "@classmethod\ndef _add_numeric_operations(cls):\n    \"\"\"\n    Add numeric operations to the GroupBy generically.\n    \"\"\"\n\n    def groupby_function(\n        name: str,\n        alias: str,\n        npfunc,\n        numeric_only: bool = True,\n        min_count: int = -1,\n    ):\n\n        _local_template = \"\"\"\n        Compute %(f)s of group values.\n\n        Parameters\n        ----------\n        numeric_only : bool, default %(no)s\n            Include only float, int, boolean columns. If None, will attempt to use\n            everything, then use only numeric data.\n        min_count : int, default %(mc)s\n            The required number of valid values to perform the operation. If fewer\n            than ``min_count`` non-NA values are present the result will be NA.\n\n        Returns\n        -------\n        Series or DataFrame\n            Computed %(f)s of values within each group.\n        \"\"\"\n\n        @Substitution(name=\"groupby\", f=name, no=numeric_only, mc=min_count)\n        @Appender(_common_see_also)\n        @Appender(_local_template)\n        def func(self, numeric_only=numeric_only, min_count=min_count):\n            self._set_group_selection()\n\n            # try a cython aggregation if we can\n            try:\n                return self._cython_agg_general(\n                    how=alias,\n                    alt=npfunc,\n                    numeric_only=numeric_only,\n                    min_count=min_count,\n                )\n            except DataError:\n                pass\n            except NotImplementedError as err:\n                if \"function is not implemented for this dtype\" in str(\n                    err\n                ) or \"category dtype not supported\" in str(err):\n                    # raised in _get_cython_function, in some cases can\n                    #  be trimmed by implementing cython funcs for more dtypes\n                    pass\n                else:\n                    raise\n\n            # apply a non-cython aggregation\n            result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n            return result\n\n        set_function_name(func, name, cls)\n\n        return func\n\n    def first_compat(x, axis=0):\n        def first(x):\n            x = x.to_numpy()\n\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[0]\n\n        if isinstance(x, DataFrame):\n            return x.apply(first, axis=axis)\n        else:\n            return first(x)\n\n    def last_compat(x, axis=0):\n        def last(x):\n            x = x.to_numpy()\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[-1]\n\n        if isinstance(x, DataFrame):\n            return x.apply(last, axis=axis)\n        else:\n            return last(x)\n\n    cls.sum = groupby_function(\"sum\", \"add\", np.sum, min_count=0)\n    cls.prod = groupby_function(\"prod\", \"prod\", np.prod, min_count=0)\n    cls.min = groupby_function(\"min\", \"min\", np.min, numeric_only=False)\n    cls.max = groupby_function(\"max\", \"max\", np.max, numeric_only=False)\n    cls.first = groupby_function(\"first\", \"first\", first_compat, numeric_only=False)\n    cls.last = groupby_function(\"last\", \"last\", last_compat, numeric_only=False)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef ohlc(self) -> DataFrame:\n    \"\"\"\n    Compute open, high, low and close values of a group, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Returns\n    -------\n    DataFrame\n        Open, high, low and close values within each group.\n    \"\"\"\n    return self._apply_to_column_groupbys(lambda x: x._cython_agg_general(\"ohlc\"))",
                "@doc(DataFrame.describe)\ndef describe(self, **kwargs):\n    with _group_selection_context(self):\n        result = self.apply(lambda x: x.describe(**kwargs))\n        if self.axis == 1:\n            return result.T\n        return result.unstack()",
                "def resample(self, rule, *args, **kwargs):\n    \"\"\"\n    Provide resampling when using a TimeGrouper.\n\n    Given a grouper, the function resamples it according to a string\n    \"string\" -> \"frequency\".\n\n    See the :ref:`frequency aliases <timeseries.offset_aliases>`\n    documentation for more details.\n\n    Parameters\n    ----------\n    rule : str or DateOffset\n        The offset string or object representing target grouper conversion.\n    *args, **kwargs\n        Possible arguments are `how`, `fill_method`, `limit`, `kind` and\n        `on`, and other arguments of `TimeGrouper`.\n\n    Returns\n    -------\n    Grouper\n        Return a new grouper with our resampler appended.\n\n    See Also\n    --------\n    Grouper : Specify a frequency to resample with when\n        grouping by a key.\n    DatetimeIndex.resample : Frequency conversion and resampling of\n        time series.\n\n    Examples\n    --------\n    >>> idx = pd.date_range('1/1/2000', periods=4, freq='T')\n    >>> df = pd.DataFrame(data=4 * [range(2)],\n    ...                   index=idx,\n    ...                   columns=['a', 'b'])\n    >>> df.iloc[2, 0] = 5\n    >>> df\n                        a  b\n    2000-01-01 00:00:00  0  1\n    2000-01-01 00:01:00  0  1\n    2000-01-01 00:02:00  5  1\n    2000-01-01 00:03:00  0  1\n\n    Downsample the DataFrame into 3 minute bins and sum the values of\n    the timestamps falling into a bin.\n\n    >>> df.groupby('a').resample('3T').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  2\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:00:00  5  1\n\n    Upsample the series into 30 second bins.\n\n    >>> df.groupby('a').resample('30S').sum()\n                        a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:00:30  0  0\n        2000-01-01 00:01:00  0  1\n        2000-01-01 00:01:30  0  0\n        2000-01-01 00:02:00  0  0\n        2000-01-01 00:02:30  0  0\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:02:00  5  1\n\n    Resample by month. Values are assigned to the month of the period.\n\n    >>> df.groupby('a').resample('M').sum()\n                a  b\n    a\n    0   2000-01-31  0  3\n    5   2000-01-31  5  1\n\n    Downsample the series into 3 minute bins as above, but close the right\n    side of the bin interval.\n\n    >>> df.groupby('a').resample('3T', closed='right').sum()\n                             a  b\n    a\n    0   1999-12-31 23:57:00  0  1\n        2000-01-01 00:00:00  0  2\n    5   2000-01-01 00:00:00  5  1\n\n    Downsample the series into 3 minute bins and close the right side of\n    the bin interval, but label each bin using the right edge instead of\n    the left.\n\n    >>> df.groupby('a').resample('3T', closed='right', label='right').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:03:00  0  2\n    5   2000-01-01 00:03:00  5  1\n\n    Add an offset of twenty seconds.\n\n    >>> df.groupby('a').resample('3T', loffset='20s').sum()\n                           a  b\n    a\n    0   2000-01-01 00:00:20  0  2\n        2000-01-01 00:03:20  0  1\n    5   2000-01-01 00:00:20  5  1\n    \"\"\"\n    from pandas.core.resample import get_resampler_for_grouping\n\n    return get_resampler_for_grouping(self, rule, *args, **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef rolling(self, *args, **kwargs):\n    \"\"\"\n    Return a rolling grouper, providing rolling functionality per group.\n    \"\"\"\n    from pandas.core.window import RollingGroupby\n\n    return RollingGroupby(self, *args, **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef expanding(self, *args, **kwargs):\n    \"\"\"\n    Return an expanding grouper, providing expanding\n    functionality per group.\n    \"\"\"\n    from pandas.core.window import ExpandingGroupby\n\n    return ExpandingGroupby(self, *args, **kwargs)",
                "def _fill(self, direction, limit=None):\n    \"\"\"\n    Shared function for `pad` and `backfill` to call Cython method.\n\n    Parameters\n    ----------\n    direction : {'ffill', 'bfill'}\n        Direction passed to underlying Cython function. `bfill` will cause\n        values to be filled backwards. `ffill` and any other values will\n        default to a forward fill\n    limit : int, default None\n        Maximum number of consecutive values to fill. If `None`, this\n        method will convert to -1 prior to passing to Cython\n\n    Returns\n    -------\n    `Series` or `DataFrame` with filled values\n\n    See Also\n    --------\n    pad\n    backfill\n    \"\"\"\n    # Need int value for Cython\n    if limit is None:\n        limit = -1\n\n    return self._get_cythonized_result(\n        \"group_fillna_indexer\",\n        needs_mask=True,\n        cython_dtype=np.dtype(np.int64),\n        result_is_index=True,\n        direction=direction,\n        limit=limit,\n    )",
                "@Substitution(name=\"groupby\")\ndef pad(self, limit=None):\n    \"\"\"\n    Forward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.pad\n    DataFrame.pad\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill(\"ffill\", limit=limit)",
                "@Substitution(name=\"groupby\")\ndef backfill(self, limit=None):\n    \"\"\"\n    Backward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.backfill\n    DataFrame.backfill\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill(\"bfill\", limit=limit)",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef nth(self, n: Union[int, List[int]], dropna: Optional[str] = None) -> DataFrame:\n    \"\"\"\n    Take the nth row from each group if n is an int, or a subset of rows\n    if n is a list of ints.\n\n    If dropna, will take the nth non-null row, dropna is either\n    'all' or 'any'; this is equivalent to calling dropna(how=dropna)\n    before the groupby.\n\n    Parameters\n    ----------\n    n : int or list of ints\n        A single nth value for the row or a list of nth values.\n    dropna : None or str, optional\n        Apply the specified dropna operation before counting which row is\n        the nth row. Needs to be None, 'any' or 'all'.\n\n    Returns\n    -------\n    Series or DataFrame\n        N-th value within each group.\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5]}, columns=['A', 'B'])\n    >>> g = df.groupby('A')\n    >>> g.nth(0)\n         B\n    A\n    1  NaN\n    2  3.0\n    >>> g.nth(1)\n         B\n    A\n    1  2.0\n    2  5.0\n    >>> g.nth(-1)\n         B\n    A\n    1  4.0\n    2  5.0\n    >>> g.nth([0, 1])\n         B\n    A\n    1  NaN\n    1  2.0\n    2  3.0\n    2  5.0\n\n    Specifying `dropna` allows count ignoring ``NaN``\n\n    >>> g.nth(0, dropna='any')\n         B\n    A\n    1  2.0\n    2  3.0\n\n    NaNs denote group exhausted when using dropna\n\n    >>> g.nth(3, dropna='any')\n        B\n    A\n    1 NaN\n    2 NaN\n\n    Specifying `as_index=False` in `groupby` keeps the original index.\n\n    >>> df.groupby('A', as_index=False).nth(1)\n       A    B\n    1  1  2.0\n    4  2  5.0\n    \"\"\"\n    valid_containers = (set, list, tuple)\n    if not isinstance(n, (valid_containers, int)):\n        raise TypeError(\"n needs to be an int or a list/set/tuple of ints\")\n\n    if not dropna:\n\n        if isinstance(n, int):\n            nth_values = [n]\n        elif isinstance(n, valid_containers):\n            nth_values = list(set(n))\n\n        nth_array = np.array(nth_values, dtype=np.intp)\n        self._set_group_selection()\n\n        mask_left = np.in1d(self._cumcount_array(), nth_array)\n        mask_right = np.in1d(self._cumcount_array(ascending=False) + 1, -nth_array)\n        mask = mask_left | mask_right\n\n        ids, _, _ = self.grouper.group_info\n\n        # Drop NA values in grouping\n        mask = mask & (ids != -1)\n\n        out = self._selected_obj[mask]\n        if not self.as_index:\n            return out\n\n        result_index = self.grouper.result_index\n        out.index = result_index[ids[mask]]\n\n        if not self.observed and isinstance(result_index, CategoricalIndex):\n            out = out.reindex(result_index)\n\n        out = self._reindex_output(out)\n        return out.sort_index() if self.sort else out\n\n    # dropna is truthy\n    if isinstance(n, valid_containers):\n        raise ValueError(\"dropna option with a list of nth values is not supported\")\n\n    if dropna not in [\"any\", \"all\"]:\n        # Note: when agg-ing picker doesn't raise this, just returns NaN\n        raise ValueError(\n            \"For a DataFrame groupby, dropna must be \"\n            \"either None, 'any' or 'all', \"\n            f\"(was passed {dropna}).\"\n        )\n\n    # old behaviour, but with all and any support for DataFrames.\n    # modified in GH 7559 to have better perf\n    max_len = n if n >= 0 else -1 - n\n    dropped = self.obj.dropna(how=dropna, axis=self.axis)\n\n    # get a new grouper for our dropped obj\n    if self.keys is None and self.level is None:\n\n        # we don't have the grouper info available\n        # (e.g. we have selected out\n        # a column that is not in the current object)\n        axis = self.grouper.axis\n        grouper = axis[axis.isin(dropped.index)]\n\n    else:\n\n        # create a grouper with the original parameters, but on dropped\n        # object\n        from pandas.core.groupby.grouper import get_grouper\n\n        grouper, _, _ = get_grouper(\n            dropped,\n            key=self.keys,\n            axis=self.axis,\n            level=self.level,\n            sort=self.sort,\n            mutated=self.mutated,\n        )\n\n    grb = dropped.groupby(grouper, as_index=self.as_index, sort=self.sort)\n    sizes, result = grb.size(), grb.nth(n)\n    mask = (sizes < max_len).values\n\n    # set the results which don't meet the criteria\n    if len(result) and mask.any():\n        result.loc[mask] = np.nan\n\n    # reset/reindex to the original groups\n    if len(self.obj) == len(dropped) or len(result) == len(\n        self.grouper.result_index\n    ):\n        result.index = self.grouper.result_index\n    else:\n        result = result.reindex(self.grouper.result_index)\n\n    return result",
                "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n\n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by caller of GroupBy object.\n\n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     ['a', 1], ['a', 2], ['a', 3],\n    ...     ['b', 1], ['b', 3], ['b', 5]\n    ... ], columns=['key', 'val'])\n    >>> df.groupby('key').quantile()\n        val\n    key\n    a    2.0\n    b    3.0\n    \"\"\"\n    from pandas import concat\n\n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_object_dtype(vals):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' dtypes!\"\n            )\n\n        inference = None\n        if is_integer_dtype(vals):\n            inference = np.int64\n        elif is_datetime64_dtype(vals):\n            inference = \"datetime64[ns]\"\n            vals = np.asarray(vals).astype(np.float)\n\n        return vals, inference\n\n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference:\n            # Check for edge case\n            if not (\n                is_integer_dtype(inference)\n                and interpolation in {\"linear\", \"midpoint\"}\n            ):\n                vals = vals.astype(inference)\n\n        return vals\n\n    if is_scalar(q):\n        return self._get_cythonized_result(\n            \"group_quantile\",\n            aggregate=True,\n            needs_values=True,\n            needs_mask=True,\n            cython_dtype=np.dtype(np.float64),\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n            q=q,\n            interpolation=interpolation,\n        )\n    else:\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                cython_dtype=np.dtype(np.float64),\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                q=qi,\n                interpolation=interpolation,\n            )\n            for qi in q\n        ]\n        result = concat(results, axis=0, keys=q)\n        # fix levels to place quantiles on the inside\n        # TODO(GH-10710): Ideally, we could write this as\n        #  >>> result.stack(0).loc[pd.IndexSlice[:, ..., q], :]\n        #  but this hits https://github.com/pandas-dev/pandas/issues/10710\n        #  which doesn't reorder the list-like `q` on the inner level.\n        order = list(range(1, result.index.nlevels)) + [0]\n\n        # temporarily saves the index names\n        index_names = np.array(result.index.names)\n\n        # set index names to positions to avoid confusion\n        result.index.names = np.arange(len(index_names))\n\n        # place quantiles on the inside\n        result = result.reorder_levels(order)\n\n        # restore the index names in order\n        result.index.names = index_names[order]\n\n        # reorder rows to keep things sorted\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)",
                "@Substitution(name=\"groupby\")\ndef ngroup(self, ascending: bool = True):\n    \"\"\"\n    Number each group from 0 to the number of groups - 1.\n\n    This is the enumerative complement of cumcount.  Note that the\n    numbers given to the groups match the order in which the groups\n    would be seen when iterating over the groupby object, not the\n    order they are first observed.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from number of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Unique numbers for each group.\n\n    See Also\n    --------\n    .cumcount : Number the rows in each group.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"A\": list(\"aaabba\")})\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').ngroup()\n    0    0\n    1    0\n    2    0\n    3    1\n    4    1\n    5    0\n    dtype: int64\n    >>> df.groupby('A').ngroup(ascending=False)\n    0    1\n    1    1\n    2    1\n    3    0\n    4    0\n    5    1\n    dtype: int64\n    >>> df.groupby([\"A\", [1,1,2,3,2,1]]).ngroup()\n    0    0\n    1    0\n    2    1\n    3    3\n    4    2\n    5    0\n    dtype: int64\n    \"\"\"\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        result = Series(self.grouper.group_info[0], index)\n        if not ascending:\n            result = self.ngroups - 1 - result\n        return result",
                "@Substitution(name=\"groupby\")\ndef cumcount(self, ascending: bool = True):\n    \"\"\"\n    Number each item in each group from 0 to the length of that group - 1.\n\n    Essentially this is equivalent to\n\n    >>> self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from length of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Sequence number of each element within each group.\n\n    See Also\n    --------\n    .ngroup : Number the groups themselves.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']],\n    ...                   columns=['A'])\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').cumcount()\n    0    0\n    1    1\n    2    2\n    3    0\n    4    1\n    5    3\n    dtype: int64\n    >>> df.groupby('A').cumcount(ascending=False)\n    0    3\n    1    2\n    2    1\n    3    1\n    4    0\n    5    0\n    dtype: int64\n    \"\"\"\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        cumcounts = self._cumcount_array(ascending=ascending)\n        return Series(cumcounts, index)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef rank(\n    self,\n    method: str = \"average\",\n    ascending: bool = True,\n    na_option: str = \"keep\",\n    pct: bool = False,\n    axis: int = 0,\n):\n    \"\"\"\n    Provide the rank of values within each group.\n\n    Parameters\n    ----------\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        * average: average rank of group.\n        * min: lowest rank in group.\n        * max: highest rank in group.\n        * first: ranks assigned in order they appear in the array.\n        * dense: like 'min', but rank always increases by 1 between groups.\n    ascending : bool, default True\n        False for ranks by high (1) to low (N).\n    na_option : {'keep', 'top', 'bottom'}, default 'keep'\n        * keep: leave NA values where they are.\n        * top: smallest rank if ascending.\n        * bottom: smallest rank if descending.\n    pct : bool, default False\n        Compute percentage rank of data within each group.\n    axis : int, default 0\n        The axis of the object over which to compute the rank.\n\n    Returns\n    -------\n    DataFrame with ranking of values within each group\n    \"\"\"\n    if na_option not in {\"keep\", \"top\", \"bottom\"}:\n        msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n        raise ValueError(msg)\n    return self._cython_transform(\n        \"rank\",\n        numeric_only=False,\n        ties_method=method,\n        ascending=ascending,\n        na_option=na_option,\n        pct=pct,\n        axis=axis,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cumprod(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative product for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func(\"cumprod\", args, kwargs, [\"numeric_only\", \"skipna\"])\n    if axis != 0:\n        return self.apply(lambda x: x.cumprod(axis=axis, **kwargs))\n\n    return self._cython_transform(\"cumprod\", **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cumsum(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative sum for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func(\"cumsum\", args, kwargs, [\"numeric_only\", \"skipna\"])\n    if axis != 0:\n        return self.apply(lambda x: x.cumsum(axis=axis, **kwargs))\n\n    return self._cython_transform(\"cumsum\", **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cummin(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative min for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.minimum.accumulate(x, axis))\n\n    return self._cython_transform(\"cummin\", numeric_only=False)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cummax(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative max for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.maximum.accumulate(x, axis))\n\n    return self._cython_transform(\"cummax\", numeric_only=False)",
                "def _get_cythonized_result(\n    self,\n    how: str,\n    cython_dtype: np.dtype,\n    aggregate: bool = False,\n    needs_values: bool = False,\n    needs_mask: bool = False,\n    needs_ngroups: bool = False,\n    result_is_index: bool = False,\n    pre_processing=None,\n    post_processing=None,\n    **kwargs,\n):\n    \"\"\"\n    Get result for Cythonized functions.\n\n    Parameters\n    ----------\n    how : str, Cythonized function name to be called\n    cython_dtype : np.dtype\n        Type of the array that will be modified by the Cython call.\n    aggregate : bool, default False\n        Whether the result should be aggregated to match the number of\n        groups\n    needs_values : bool, default False\n        Whether the values should be a part of the Cython call\n        signature\n    needs_mask : bool, default False\n        Whether boolean mask needs to be part of the Cython call\n        signature\n    needs_ngroups : bool, default False\n        Whether number of groups is part of the Cython call signature\n    result_is_index : bool, default False\n        Whether the result of the Cython operation is an index of\n        values to be retrieved, instead of the actual values themselves\n    pre_processing : function, default None\n        Function to be applied to `values` prior to passing to Cython.\n        Function should return a tuple where the first element is the\n        values to be passed to Cython and the second element is an optional\n        type which the values should be converted to after being returned\n        by the Cython operation. Raises if `needs_values` is False.\n    post_processing : function, default None\n        Function to be applied to result of Cython function. Should accept\n        an array of values as the first argument and type inferences as its\n        second argument, i.e. the signature should be\n        (ndarray, Type).\n    **kwargs : dict\n        Extra arguments to be passed back to Cython funcs\n\n    Returns\n    -------\n    `Series` or `DataFrame`  with filled values\n    \"\"\"\n    if result_is_index and aggregate:\n        raise ValueError(\"'result_is_index' and 'aggregate' cannot both be True!\")\n    if post_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'post_processing' must be a callable!\")\n    if pre_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'pre_processing' must be a callable!\")\n        if not needs_values:\n            raise ValueError(\n                \"Cannot use 'pre_processing' without specifying 'needs_values'!\"\n            )\n\n    grouper = self.grouper\n\n    labels, _, ngroups = grouper.group_info\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    base_func = getattr(libgroupby, how)\n\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        values = obj._values\n\n        if aggregate:\n            result_sz = ngroups\n        else:\n            result_sz = len(values)\n\n        result = np.zeros(result_sz, dtype=cython_dtype)\n        func = partial(base_func, result, labels)\n        inferences = None\n\n        if needs_values:\n            vals = values\n            if pre_processing:\n                vals, inferences = pre_processing(vals)\n            func = partial(func, vals)\n\n        if needs_mask:\n            mask = isna(values).view(np.uint8)\n            func = partial(func, mask)\n\n        if needs_ngroups:\n            func = partial(func, ngroups)\n\n        func(**kwargs)  # Call func to modify indexer values in place\n\n        if result_is_index:\n            result = algorithms.take_nd(values, result)\n\n        if post_processing:\n            result = post_processing(result, inferences)\n\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = result\n\n    if aggregate:\n        return self._wrap_aggregated_output(output)\n    else:\n        return self._wrap_transformed_output(output)",
                "@Substitution(name=\"groupby\")\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    \"\"\"\n    Shift each group by periods observations.\n\n    If freq is passed, the index will be increased using the periods and the freq.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods to shift.\n    freq : str, optional\n        Frequency string.\n    axis : axis to shift, default 0\n        Shift direction.\n    fill_value : optional\n        The scalar value to use for newly introduced missing values.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n        Object shifted within each group.\n\n    See Also\n    --------\n    Index.shift : Shift values of Index.\n    tshift : Shift the time index, using the index\u2019s frequency\n        if available.\n    \"\"\"\n    if freq is not None or axis != 0 or not isna(fill_value):\n        return self.apply(lambda x: x.shift(periods, freq, axis, fill_value))\n\n    return self._get_cythonized_result(\n        \"group_shift_indexer\",\n        cython_dtype=np.dtype(np.int64),\n        needs_ngroups=True,\n        result_is_index=True,\n        periods=periods,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, axis=0):\n    \"\"\"\n    Calculate pct_change of each value to previous entry in group.\n\n    Returns\n    -------\n    Series or DataFrame\n        Percentage changes within each group.\n    \"\"\"\n    if freq is not None or axis != 0:\n        return self.apply(\n            lambda x: x.pct_change(\n                periods=periods,\n                fill_method=fill_method,\n                limit=limit,\n                freq=freq,\n                axis=axis,\n            )\n        )\n    if fill_method is None:  # GH30463\n        fill_method = \"pad\"\n        limit = 0\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n    return (filled / shifted) - 1",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef head(self, n=5):\n    \"\"\"\n    Return first n rows of each group.\n\n    Similar to ``.apply(lambda x: x.head(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [1, 4], [5, 6]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').head(1)\n       A  B\n    0  1  2\n    2  5  6\n    >>> df.groupby('A').head(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array() < n\n    return self._selected_obj[mask]",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef tail(self, n=5):\n    \"\"\"\n    Return last n rows of each group.\n\n    Similar to ``.apply(lambda x: x.tail(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').tail(1)\n       A  B\n    1  a  2\n    3  b  2\n    >>> df.groupby('A').tail(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array(ascending=False) < n\n    return self._selected_obj[mask]",
                "def _reindex_output(\n    self, output: OutputFrameOrSeries, fill_value: Scalar = np.NaN\n) -> OutputFrameOrSeries:\n    \"\"\"\n    If we have categorical groupers, then we might want to make sure that\n    we have a fully re-indexed output to the levels. This means expanding\n    the output space to accommodate all values in the cartesian product of\n    our groups, regardless of whether they were observed in the data or\n    not. This will expand the output space if there are missing groups.\n\n    The method returns early without modifying the input if the number of\n    groupings is less than 2, self.observed == True or none of the groupers\n    are categorical.\n\n    Parameters\n    ----------\n    output : Series or DataFrame\n        Object resulting from grouping and applying an operation.\n    fill_value : scalar, default np.NaN\n        Value to use for unobserved categories if self.observed is False.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object (potentially) re-indexed to include all possible groups.\n    \"\"\"\n    groupings = self.grouper.groupings\n    if groupings is None:\n        return output\n    elif len(groupings) == 1:\n        return output\n\n    # if we only care about the observed values\n    # we are done\n    elif self.observed:\n        return output\n\n    # reindexing only applies to a Categorical grouper\n    elif not any(\n        isinstance(ping.grouper, (Categorical, CategoricalIndex))\n        for ping in groupings\n    ):\n        return output\n\n    levels_list = [ping.group_index for ping in groupings]\n    index, _ = MultiIndex.from_product(\n        levels_list, names=self.grouper.names\n    ).sortlevel()\n\n    if self.as_index:\n        d = {\n            self.obj._get_axis_name(self.axis): index,\n            \"copy\": False,\n            \"fill_value\": fill_value,\n        }\n        return output.reindex(**d)\n\n    # GH 13204\n    # Here, the categorical in-axis groupers, which need to be fully\n    # expanded, are columns in `output`. An idea is to do:\n    # output = output.set_index(self.grouper.names)\n    #                .reindex(index).reset_index()\n    # but special care has to be taken because of possible not-in-axis\n    # groupers.\n    # So, we manually select and drop the in-axis grouper columns,\n    # reindex `output`, and then reset the in-axis grouper columns.\n\n    # Select in-axis groupers\n    in_axis_grps = (\n        (i, ping.name) for (i, ping) in enumerate(groupings) if ping.in_axis\n    )\n    g_nums, g_names = zip(*in_axis_grps)\n\n    output = output.drop(labels=list(g_names), axis=1)\n\n    # Set a temp index and reindex (possibly expanding)\n    output = output.set_index(self.grouper.result_index).reindex(\n        index, copy=False, fill_value=fill_value\n    )\n\n    # Reset in-axis grouper columns\n    # (using level numbers `g_nums` because level names may not be unique)\n    output = output.reset_index(level=g_nums)\n\n    return output.reset_index(drop=True)",
                "def f(self):\n    return self.plot(*args, **kwargs)",
                "def attr(*args, **kwargs):\n    def f(self):\n        return getattr(self.plot, name)(*args, **kwargs)\n\n    return self._groupby.apply(f)",
                "def get_converter(s):\n    # possibly convert to the actual key types\n    # in the indices, could be a Timestamp or a np.datetime64\n    if isinstance(s, datetime.datetime):\n        return lambda key: Timestamp(key)\n    elif isinstance(s, np.datetime64):\n        return lambda key: Timestamp(key).asm8\n    else:\n        return lambda key: key",
                "def wrapper(*args, **kwargs):\n    # a little trickery for aggregation functions that need an axis\n    # argument\n    if \"axis\" in sig.parameters:\n        if kwargs.get(\"axis\", None) is None:\n            kwargs[\"axis\"] = self.axis\n\n    def curried(x):\n        return f(x, *args, **kwargs)\n\n    # preserve the name so we can detect it when calling plot methods,\n    # to avoid duplicates\n    curried.__name__ = name\n\n    # special case otherwise extra plots are created when catching the\n    # exception below\n    if name in base.plotting_methods:\n        return self.apply(curried)\n\n    try:\n        return self.apply(curried)\n    except TypeError as err:\n        if not re.search(\n            \"reduction operation '.*' not allowed for this dtype\", str(err)\n        ):\n            # We don't have a cython implementation\n            # TODO: is the above comment accurate?\n            raise\n\n    if self.obj.ndim == 1:\n        # this can be called recursively, so need to raise ValueError\n        raise ValueError\n\n    # GH#3688 try to operate item-by-item\n    result = self._aggregate_item_by_item(name, *args, **kwargs)\n    return result",
                "def reset_identity(values):\n    # reset the identities of the components\n    # of the values to prevent aliasing\n    for v in com.not_none(*values):\n        ax = v._get_axis(self.axis)\n        ax._reset_identity()\n    return values",
                "def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n    if is_object_dtype(vals):\n        vals = np.array([bool(x) for x in vals])\n    else:\n        vals = vals.astype(np.bool)\n\n    return vals.view(np.uint8), np.bool",
                "def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n    return result.astype(inference, copy=False)",
                "def groupby_function(\n    name: str,\n    alias: str,\n    npfunc,\n    numeric_only: bool = True,\n    min_count: int = -1,\n):\n\n    _local_template = \"\"\"\n    Compute %(f)s of group values.\n\n    Parameters\n    ----------\n    numeric_only : bool, default %(no)s\n        Include only float, int, boolean columns. If None, will attempt to use\n        everything, then use only numeric data.\n    min_count : int, default %(mc)s\n        The required number of valid values to perform the operation. If fewer\n        than ``min_count`` non-NA values are present the result will be NA.\n\n    Returns\n    -------\n    Series or DataFrame\n        Computed %(f)s of values within each group.\n    \"\"\"\n\n    @Substitution(name=\"groupby\", f=name, no=numeric_only, mc=min_count)\n    @Appender(_common_see_also)\n    @Appender(_local_template)\n    def func(self, numeric_only=numeric_only, min_count=min_count):\n        self._set_group_selection()\n\n        # try a cython aggregation if we can\n        try:\n            return self._cython_agg_general(\n                how=alias,\n                alt=npfunc,\n                numeric_only=numeric_only,\n                min_count=min_count,\n            )\n        except DataError:\n            pass\n        except NotImplementedError as err:\n            if \"function is not implemented for this dtype\" in str(\n                err\n            ) or \"category dtype not supported\" in str(err):\n                # raised in _get_cython_function, in some cases can\n                #  be trimmed by implementing cython funcs for more dtypes\n                pass\n            else:\n                raise\n\n        # apply a non-cython aggregation\n        result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n        return result\n\n    set_function_name(func, name, cls)\n\n    return func",
                "def first_compat(x, axis=0):\n    def first(x):\n        x = x.to_numpy()\n\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[0]\n\n    if isinstance(x, DataFrame):\n        return x.apply(first, axis=axis)\n    else:\n        return first(x)",
                "def last_compat(x, axis=0):\n    def last(x):\n        x = x.to_numpy()\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[-1]\n\n    if isinstance(x, DataFrame):\n        return x.apply(last, axis=axis)\n    else:\n        return last(x)",
                "def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n    if is_object_dtype(vals):\n        raise TypeError(\n            \"'quantile' cannot be performed against 'object' dtypes!\"\n        )\n\n    inference = None\n    if is_integer_dtype(vals):\n        inference = np.int64\n    elif is_datetime64_dtype(vals):\n        inference = \"datetime64[ns]\"\n        vals = np.asarray(vals).astype(np.float)\n\n    return vals, inference",
                "def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n    if inference:\n        # Check for edge case\n        if not (\n            is_integer_dtype(inference)\n            and interpolation in {\"linear\", \"midpoint\"}\n        ):\n            vals = vals.astype(inference)\n\n    return vals",
                "def f(self):\n    return getattr(self.plot, name)(*args, **kwargs)",
                "def curried(x):\n    return f(x, *args, **kwargs)",
                "@Substitution(name=\"groupby\", f=name, no=numeric_only, mc=min_count)\n@Appender(_common_see_also)\n@Appender(_local_template)\ndef func(self, numeric_only=numeric_only, min_count=min_count):\n    self._set_group_selection()\n\n    # try a cython aggregation if we can\n    try:\n        return self._cython_agg_general(\n            how=alias,\n            alt=npfunc,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n    except DataError:\n        pass\n    except NotImplementedError as err:\n        if \"function is not implemented for this dtype\" in str(\n            err\n        ) or \"category dtype not supported\" in str(err):\n            # raised in _get_cython_function, in some cases can\n            #  be trimmed by implementing cython funcs for more dtypes\n            pass\n        else:\n            raise\n\n    # apply a non-cython aggregation\n    result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n    return result",
                "def first(x):\n    x = x.to_numpy()\n\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[0]",
                "def last(x):\n    x = x.to_numpy()\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[-1]",
                "@wraps(func)\ndef f(g):\n    with np.errstate(all=\"ignore\"):\n        return func(g, *args, **kwargs)"
            ],
            "inscope_function_signatures": [
                "_group_selection_context(groupby)",
                "get_groupby(obj: NDFrame, by: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False) -> GroupBy",
                "__init__(self, groupby)",
                "__call__(self, *args, **kwargs)",
                "__getattr__(self, name: str)",
                "__init__(self, obj: FrameOrSeries, keys: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False)",
                "__len__(self) -> int",
                "__repr__(self) -> str",
                "_assure_grouper(self)",
                "groups(self)",
                "ngroups(self)",
                "indices(self)",
                "_get_indices(self, names)",
                "_get_index(self, name)",
                "_selected_obj(self)",
                "_reset_group_selection(self)",
                "_set_group_selection(self)",
                "_set_result_index_ordered(self, result)",
                "_dir_additions(self)",
                "__getattr__(self, attr: str)",
                "pipe(self, func, *args, **kwargs)",
                "_make_wrapper(self, name)",
                "get_group(self, name, obj=None)",
                "__iter__(self)",
                "apply(self, func, *args, **kwargs)",
                "_python_apply_general(self, f)",
                "_iterate_slices(self) -> Iterable[Series]",
                "transform(self, func, *args, **kwargs)",
                "_cumcount_array(self, ascending: bool=True)",
                "_transform_should_cast(self, func_nm: str) -> bool",
                "_cython_transform(self, how: str, numeric_only: bool=True, **kwargs)",
                "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, np.ndarray])",
                "_wrap_transformed_output(self, output: Mapping[base.OutputKey, np.ndarray])",
                "_wrap_applied_output(self, keys, values, not_indexed_same: bool=False)",
                "_cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
                "_python_agg_general(self, func, *args, **kwargs)",
                "_concat_objects(self, keys, values, not_indexed_same: bool=False)",
                "_apply_filter(self, indices, dropna)",
                "_bool_agg(self, val_test, skipna)",
                "any(self, skipna: bool=True)",
                "all(self, skipna: bool=True)",
                "count(self)",
                "mean(self, numeric_only: bool=True)",
                "median(self, numeric_only=True)",
                "std(self, ddof: int=1)",
                "var(self, ddof: int=1)",
                "sem(self, ddof: int=1)",
                "size(self)",
                "_add_numeric_operations(cls)",
                "ohlc(self) -> DataFrame",
                "describe(self, **kwargs)",
                "resample(self, rule, *args, **kwargs)",
                "rolling(self, *args, **kwargs)",
                "expanding(self, *args, **kwargs)",
                "_fill(self, direction, limit=None)",
                "pad(self, limit=None)",
                "backfill(self, limit=None)",
                "nth(self, n: Union[int, List[int]], dropna: Optional[str]=None) -> DataFrame",
                "quantile(self, q=0.5, interpolation: str='linear')",
                "ngroup(self, ascending: bool=True)",
                "cumcount(self, ascending: bool=True)",
                "rank(self, method: str='average', ascending: bool=True, na_option: str='keep', pct: bool=False, axis: int=0)",
                "cumprod(self, axis=0, *args, **kwargs)",
                "cumsum(self, axis=0, *args, **kwargs)",
                "cummin(self, axis=0, **kwargs)",
                "cummax(self, axis=0, **kwargs)",
                "_get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs)",
                "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, axis=0)",
                "head(self, n=5)",
                "tail(self, n=5)",
                "_reindex_output(self, output: OutputFrameOrSeries, fill_value: Scalar=np.NaN) -> OutputFrameOrSeries",
                "f(self)",
                "attr(*args, **kwargs)",
                "get_converter(s)",
                "wrapper(*args, **kwargs)",
                "reset_identity(values)",
                "objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]",
                "result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray",
                "groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1)",
                "first_compat(x, axis=0)",
                "last_compat(x, axis=0)",
                "pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]",
                "post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray",
                "f(self)",
                "curried(x)",
                "func(self, numeric_only=numeric_only, min_count=min_count)",
                "first(x)",
                "last(x)",
                "f(g)"
            ],
            "variables_in_file": {
                "_common_see_also": [
                    1415,
                    1548,
                    2065,
                    1298,
                    1558,
                    2332,
                    1205,
                    2361,
                    2114,
                    67,
                    1347,
                    1101,
                    1230,
                    2130,
                    2395,
                    1118,
                    2146,
                    1251,
                    1135,
                    2161,
                    1657,
                    1149,
                    1278
                ],
                "_apply_docs": [
                    704,
                    74,
                    703
                ],
                "dict": [
                    74
                ],
                "_pipe_template": [
                    193,
                    605
                ],
                "_transform_template": [
                    247
                ],
                "PandasObject": [
                    314,
                    358
                ],
                "self._groupby": [
                    320,
                    334,
                    327
                ],
                "self": [
                    513,
                    514,
                    515,
                    516,
                    518,
                    1545,
                    2059,
                    2060,
                    2061,
                    527,
                    529,
                    530,
                    1555,
                    540,
                    542,
                    1566,
                    544,
                    545,
                    549,
                    554,
                    555,
                    563,
                    564,
                    565,
                    566,
                    2103,
                    568,
                    1595,
                    572,
                    575,
                    576,
                    577,
                    578,
                    1088,
                    581,
                    2125,
                    2127,
                    1626,
                    1115,
                    2141,
                    607,
                    2143,
                    612,
                    614,
                    618,
                    620,
                    1132,
                    622,
                    2156,
                    2158,
                    1652,
                    630,
                    2171,
                    2173,
                    642,
                    645,
                    654,
                    659,
                    683,
                    685,
                    1198,
                    689,
                    700,
                    2241,
                    709,
                    1223,
                    2247,
                    1744,
                    1746,
                    1747,
                    1750,
                    1755,
                    1756,
                    1759,
                    736,
                    1248,
                    1762,
                    1765,
                    1766,
                    746,
                    747,
                    2285,
                    2287,
                    752,
                    754,
                    755,
                    1269,
                    759,
                    1783,
                    762,
                    1274,
                    1275,
                    1786,
                    1791,
                    776,
                    1802,
                    1803,
                    1804,
                    1805,
                    1806,
                    1295,
                    1809,
                    2321,
                    2323,
                    1818,
                    1819,
                    1308,
                    1821,
                    1310,
                    1311,
                    1312,
                    1823,
                    2343,
                    808,
                    814,
                    2355,
                    2356,
                    821,
                    825,
                    320,
                    834,
                    324,
                    837,
                    1350,
                    327,
                    840,
                    1354,
                    843,
                    332,
                    334,
                    854,
                    2390,
                    2391,
                    2392,
                    860,
                    1373,
                    1890,
                    1903,
                    880,
                    883,
                    2424,
                    889,
                    2425,
                    379,
                    891,
                    2426,
                    384,
                    897,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    398,
                    906,
                    908,
                    1937,
                    1427,
                    2454,
                    1431,
                    920,
                    1432,
                    410,
                    1433,
                    413,
                    414,
                    415,
                    416,
                    929,
                    2462,
                    419,
                    934,
                    423,
                    935,
                    2474,
                    2477,
                    2479,
                    945,
                    947,
                    437,
                    438,
                    949,
                    952,
                    442,
                    443,
                    956,
                    957,
                    961,
                    450,
                    451,
                    2504,
                    972,
                    975,
                    2000,
                    977,
                    2001,
                    979,
                    2002,
                    2004,
                    472,
                    473,
                    989,
                    991,
                    995,
                    996,
                    485,
                    501,
                    507
                ],
                "groupby": [
                    320,
                    345,
                    346,
                    344
                ],
                "self.plot": [
                    324,
                    332
                ],
                "args": [
                    324,
                    1545,
                    714,
                    2123,
                    332,
                    720,
                    659,
                    884,
                    1555,
                    633,
                    2139,
                    1566,
                    607
                ],
                "kwargs": [
                    1545,
                    659,
                    1555,
                    1432,
                    1566,
                    821,
                    324,
                    714,
                    2123,
                    332,
                    2125,
                    2127,
                    720,
                    2139,
                    2141,
                    607,
                    2143,
                    2273,
                    884,
                    629,
                    630,
                    633
                ],
                "f.__name__": [
                    326
                ],
                "f": [
                    736,
                    897,
                    326,
                    327,
                    618,
                    619,
                    747,
                    906,
                    334,
                    495,
                    622,
                    623,
                    752,
                    724,
                    884,
                    633,
                    731
                ],
                "self._groupby.apply": [
                    334,
                    327
                ],
                "str": [
                    2177,
                    1827,
                    421,
                    360,
                    329,
                    648,
                    1321,
                    812,
                    1322,
                    846,
                    1363,
                    2068,
                    1365,
                    2070,
                    1658,
                    796,
                    574
                ],
                "getattr": [
                    2245,
                    618,
                    620,
                    332,
                    622,
                    2355,
                    724,
                    543
                ],
                "name": [
                    641,
                    902,
                    659,
                    662,
                    685,
                    687,
                    815,
                    828,
                    1346,
                    2248,
                    332,
                    855,
                    1376,
                    612,
                    485,
                    873,
                    618,
                    2281,
                    620,
                    622,
                    495,
                    499,
                    501,
                    890,
                    507,
                    637
                ],
                "attr": [
                    576,
                    577,
                    578,
                    581,
                    336,
                    575
                ],
                "groupby._set_group_selection": [
                    344
                ],
                "groupby._reset_group_selection": [
                    346
                ],
                "contextmanager": [
                    339
                ],
                "_KeysArgType": [
                    2521,
                    365,
                    349
                ],
                "Union": [
                    848,
                    1658,
                    349
                ],
                "Hashable": [
                    352,
                    353,
                    354,
                    350,
                    351
                ],
                "List": [
                    353,
                    1658,
                    351
                ],
                "Callable": [
                    352,
                    353
                ],
                "Mapping": [
                    354,
                    836,
                    839
                ],
                "SelectionMixin": [
                    358
                ],
                "Generic": [
                    358
                ],
                "FrameOrSeries": [
                    364,
                    1004,
                    358
                ],
                "_group_selection": [
                    359
                ],
                "_apply_whitelist": [
                    360
                ],
                "FrozenSet": [
                    360
                ],
                "frozenset": [
                    360
                ],
                "Optional": [
                    1863,
                    365,
                    1878,
                    2521,
                    1658
                ],
                "int": [
                    993,
                    418,
                    1252,
                    1733,
                    1738,
                    1325,
                    846,
                    366,
                    1231,
                    2522,
                    2072,
                    1658,
                    1279
                ],
                "bool": [
                    2179,
                    2180,
                    2181,
                    2182,
                    2183,
                    1941,
                    2069,
                    2071,
                    922,
                    796,
                    812,
                    1324,
                    1079,
                    842,
                    846,
                    1102,
                    2008,
                    1119,
                    991,
                    2527,
                    2528,
                    2529,
                    2530,
                    2531,
                    2532,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    764,
                    1150
                ],
                "self._selection": [
                    513,
                    379,
                    518
                ],
                "selection": [
                    2554,
                    379
                ],
                "isinstance": [
                    513,
                    387,
                    1310,
                    2467,
                    1733,
                    1738,
                    1740,
                    462,
                    464,
                    977,
                    478,
                    479,
                    1762,
                    2536,
                    1769,
                    619,
                    2540,
                    1389,
                    1402,
                    381
                ],
                "obj": [
                    897,
                    387,
                    903,
                    403,
                    404,
                    413,
                    414,
                    682,
                    683,
                    814,
                    815,
                    816,
                    689,
                    821,
                    826,
                    2247,
                    2248,
                    2249,
                    854,
                    855,
                    856,
                    861,
                    869,
                    2536,
                    874,
                    2540,
                    2545,
                    2548,
                    889,
                    890,
                    381,
                    382
                ],
                "NDFrame": [
                    2520,
                    1001,
                    381
                ],
                "type": [
                    581,
                    381,
                    622
                ],
                "obj._consolidate_inplace": [
                    382
                ],
                "self.level": [
                    384,
                    1786,
                    1804
                ],
                "level": [
                    384,
                    2551,
                    407
                ],
                "as_index": [
                    392,
                    386,
                    2555
                ],
                "DataFrame": [
                    387,
                    1416,
                    2540,
                    1389,
                    1429,
                    1658,
                    1402
                ],
                "TypeError": [
                    737,
                    898,
                    388,
                    1734,
                    646,
                    1865,
                    2545
                ],
                "axis": [
                    1792,
                    389,
                    2320,
                    2321,
                    1403,
                    406,
                    414,
                    2342,
                    2349,
                    2110,
                    1225,
                    2124,
                    2125,
                    2140,
                    2141,
                    2155,
                    2156,
                    1390,
                    2550,
                    2170,
                    2171,
                    1791
                ],
                "ValueError": [
                    481,
                    390,
                    1770,
                    492,
                    1774,
                    656,
                    2229,
                    2102,
                    727,
                    2232,
                    2235,
                    2237
                ],
                "self.as_index": [
                    392,
                    2477,
                    1809,
                    952,
                    1756,
                    542
                ],
                "self.keys": [
                    393,
                    1786,
                    1802
                ],
                "keys": [
                    393,
                    971,
                    972,
                    752,
                    755,
                    405,
                    955
                ],
                "self.sort": [
                    1809,
                    394,
                    1805,
                    1766
                ],
                "sort": [
                    408,
                    394,
                    2556
                ],
                "self.group_keys": [
                    395,
                    949
                ],
                "group_keys": [
                    2557,
                    962,
                    395,
                    955
                ],
                "self.squeeze": [
                    396
                ],
                "squeeze": [
                    396,
                    2558
                ],
                "self.observed": [
                    1762,
                    397,
                    2462
                ],
                "observed": [
                    409,
                    397,
                    2559
                ],
                "self.mutated": [
                    410,
                    755,
                    398,
                    1806
                ],
                "mutated": [
                    752,
                    2560,
                    755,
                    398
                ],
                "grouper": [
                    1792,
                    2241,
                    2243,
                    1800,
                    400,
                    1809,
                    403,
                    2552,
                    415
                ],
                "exclusions": [
                    416,
                    2553,
                    403
                ],
                "get_grouper": [
                    1800,
                    403
                ],
                "self.obj": [
                    544,
                    513,
                    577,
                    515,
                    516,
                    549,
                    518,
                    700,
                    654,
                    2479,
                    1783,
                    568,
                    1818,
                    572,
                    413,
                    1310,
                    1311
                ],
                "self.axis": [
                    1803,
                    1433,
                    414,
                    929,
                    934,
                    935,
                    2479,
                    689,
                    945,
                    947,
                    565,
                    566,
                    568,
                    700,
                    961,
                    972,
                    975,
                    1373,
                    989,
                    752,
                    630,
                    1783
                ],
                "obj._get_axis_number": [
                    414
                ],
                "self.grouper": [
                    897,
                    776,
                    908,
                    2454,
                    1819,
                    1308,
                    540,
                    1821,
                    415,
                    1823,
                    2474,
                    563,
                    564,
                    821,
                    438,
                    2356,
                    443,
                    700,
                    956,
                    957,
                    2241,
                    451,
                    2504,
                    2002,
                    1750,
                    860,
                    1759,
                    752,
                    891,
                    1791
                ],
                "self.exclusions": [
                    416
                ],
                "set": [
                    416,
                    1732,
                    1741
                ],
                "len": [
                    1928,
                    905,
                    778,
                    1937,
                    1814,
                    2457,
                    1818,
                    419,
                    552,
                    686,
                    831,
                    971,
                    2254,
                    469,
                    984,
                    472,
                    991,
                    482,
                    866,
                    1385,
                    877,
                    1398
                ],
                "self.groups": [
                    419
                ],
                "object.__repr__": [
                    423
                ],
                "object": [
                    576,
                    423
                ],
                "self._assure_grouper": [
                    450,
                    442,
                    437
                ],
                "self.grouper.groups": [
                    438
                ],
                "property": [
                    432,
                    609,
                    445,
                    440
                ],
                "self.grouper.ngroups": [
                    891,
                    443
                ],
                "self.grouper.indices": [
                    451
                ],
                "s": [
                    464,
                    462,
                    494
                ],
                "datetime.datetime": [
                    462
                ],
                "datetime": [
                    462
                ],
                "Timestamp": [
                    465,
                    463
                ],
                "key": [
                    868,
                    869,
                    902,
                    903,
                    873,
                    874,
                    2281,
                    2282,
                    463,
                    911,
                    465,
                    467,
                    918,
                    828,
                    829
                ],
                "np.datetime64": [
                    464
                ],
                "np": [
                    1408,
                    1409,
                    1410,
                    2178,
                    1925,
                    1928,
                    781,
                    783,
                    784,
                    1295,
                    1937,
                    788,
                    2325,
                    790,
                    1815,
                    792,
                    793,
                    794,
                    1407,
                    813,
                    564,
                    1077,
                    1079,
                    1081,
                    1083,
                    1085,
                    1598,
                    1091,
                    836,
                    2244,
                    839,
                    1863,
                    719,
                    464,
                    848,
                    1743,
                    1746,
                    1747,
                    1871,
                    1874,
                    1878,
                    2256,
                    985,
                    987,
                    2267,
                    991,
                    1248,
                    995,
                    1895,
                    1386,
                    2156,
                    1908,
                    887,
                    2171,
                    2429,
                    1399
                ],
                "asm8": [
                    465
                ],
                "names": [
                    485,
                    495,
                    499,
                    469,
                    501,
                    477
                ],
                "self.indices": [
                    472,
                    473,
                    485,
                    501
                ],
                "index_sample": [
                    482,
                    494,
                    498,
                    473,
                    475,
                    478
                ],
                "next": [
                    473
                ],
                "iter": [
                    473
                ],
                "name_sample": [
                    482,
                    477,
                    479
                ],
                "tuple": [
                    495,
                    1732,
                    478,
                    479
                ],
                "msg": [
                    480,
                    481,
                    488,
                    492,
                    2101,
                    2102
                ],
                "KeyError": [
                    486,
                    687
                ],
                "err": [
                    648,
                    492,
                    1365,
                    1364
                ],
                "converters": [
                    494,
                    495
                ],
                "get_converter": [
                    498,
                    494
                ],
                "n": [
                    1733,
                    1769,
                    1738,
                    1739,
                    1740,
                    1741,
                    495,
                    1810,
                    1782,
                    2391,
                    2425
                ],
                "zip": [
                    867,
                    2499,
                    495
                ],
                "converter": [
                    498,
                    499
                ],
                "self.indices.get": [
                    501
                ],
                "self._get_indices": [
                    507,
                    564
                ],
                "Series": [
                    513,
                    2536,
                    1225,
                    2062,
                    1200,
                    977,
                    2002,
                    758,
                    1270,
                    1310
                ],
                "self._group_selection": [
                    545,
                    514,
                    515,
                    554,
                    527,
                    529
                ],
                "cache_readonly": [
                    509
                ],
                "self._reset_cache": [
                    530,
                    555
                ],
                "grp": [
                    540,
                    550,
                    543
                ],
                "self.obj.ndim": [
                    544,
                    654
                ],
                "ax": [
                    929,
                    930,
                    549,
                    935,
                    554,
                    942,
                    943,
                    947
                ],
                "self.obj._info_axis": [
                    549
                ],
                "groupers": [
                    552,
                    554,
                    550
                ],
                "g.name": [
                    550
                ],
                "g": [
                    720,
                    550
                ],
                "grp.groupings": [
                    550
                ],
                "g.level": [
                    550
                ],
                "g.in_axis": [
                    550
                ],
                "tolist": [
                    554
                ],
                "ax.difference": [
                    554
                ],
                "Index": [
                    554,
                    564
                ],
                "self.grouper.is_monotonic": [
                    563
                ],
                "index": [
                    2473,
                    2505,
                    2060,
                    2062,
                    2479,
                    2001,
                    2002,
                    564,
                    565
                ],
                "np.concatenate": [
                    987,
                    564
                ],
                "self.grouper.result_index": [
                    2504,
                    1759,
                    564,
                    1819,
                    1821,
                    1823
                ],
                "result.set_axis": [
                    568,
                    565
                ],
                "result": [
                    897,
                    1922,
                    901,
                    1925,
                    903,
                    1928,
                    1931,
                    1934,
                    911,
                    1937,
                    914,
                    659,
                    660,
                    1810,
                    918,
                    1814,
                    1432,
                    1815,
                    1434,
                    1435,
                    1308,
                    1818,
                    1821,
                    1311,
                    1312,
                    1823,
                    1825,
                    934,
                    943,
                    945,
                    947,
                    565,
                    566,
                    821,
                    568,
                    569,
                    826,
                    829,
                    1086,
                    959,
                    972,
                    975,
                    2256,
                    977,
                    2002,
                    979,
                    2004,
                    981,
                    2005,
                    2257,
                    860,
                    1373,
                    1374,
                    736,
                    866,
                    867,
                    2276,
                    2279,
                    872,
                    874,
                    2282,
                    749,
                    1938,
                    1916
                ],
                "result.sort_index": [
                    566
                ],
                "self.obj._get_axis": [
                    568
                ],
                "self.obj._dir_additions": [
                    572
                ],
                "self._apply_whitelist": [
                    612,
                    572
                ],
                "self._internal_names_set": [
                    575
                ],
                "object.__getattribute__": [
                    576
                ],
                "AttributeError": [
                    580
                ],
                "__name__": [
                    581
                ],
                "com.pipe": [
                    607
                ],
                "com": [
                    928,
                    607
                ],
                "func": [
                    709,
                    715,
                    717,
                    720,
                    2257,
                    722,
                    724,
                    2264,
                    731,
                    2268,
                    2271,
                    1376,
                    2273,
                    1378,
                    607,
                    883,
                    884,
                    1273,
                    1275
                ],
                "Substitution": [
                    1414,
                    1547,
                    2064,
                    1297,
                    1940,
                    1557,
                    1277,
                    2331,
                    1204,
                    2360,
                    2361,
                    2113,
                    1346,
                    1604,
                    584,
                    1100,
                    1229,
                    2129,
                    2007,
                    2394,
                    2395,
                    1117,
                    1630,
                    2145,
                    1250,
                    1134,
                    2160,
                    2289,
                    1656,
                    1657,
                    1148,
                    1149
                ],
                "Appender": [
                    1415,
                    1548,
                    2065,
                    1298,
                    1558,
                    2332,
                    1205,
                    702,
                    2114,
                    1347,
                    1348,
                    1101,
                    1230,
                    2130,
                    605,
                    1118,
                    2146,
                    1251,
                    1135,
                    2161,
                    1278
                ],
                "plot": [
                    609
                ],
                "GroupByPlot": [
                    609
                ],
                "self._set_group_selection": [
                    1744,
                    1350,
                    614
                ],
                "self._selected_obj": [
                    995,
                    996,
                    935,
                    618,
                    683,
                    2060,
                    622,
                    752,
                    2001,
                    2392,
                    2426,
                    1755,
                    989,
                    991
                ],
                "types.MethodType": [
                    619
                ],
                "types": [
                    619
                ],
                "self.apply": [
                    642,
                    645,
                    2343,
                    620,
                    2125,
                    2156,
                    2321,
                    1432,
                    2171,
                    2141
                ],
                "sig": [
                    628,
                    623
                ],
                "inspect.signature": [
                    623
                ],
                "inspect": [
                    623
                ],
                "sig.parameters": [
                    628
                ],
                "kwargs.get": [
                    629
                ],
                "x": [
                    1402,
                    2321,
                    1427,
                    1432,
                    2344,
                    2171,
                    1200,
                    1079,
                    1225,
                    2125,
                    1373,
                    2141,
                    1382,
                    1384,
                    1385,
                    1387,
                    2156,
                    1389,
                    1390,
                    1392,
                    633,
                    884,
                    1396,
                    1270,
                    1397,
                    1400,
                    1273,
                    1398,
                    1403,
                    1405
                ],
                "curried.__name__": [
                    637
                ],
                "curried": [
                    642,
                    637,
                    645
                ],
                "base.plotting_methods": [
                    641
                ],
                "base": [
                    641,
                    836,
                    868,
                    902,
                    839,
                    2244,
                    809,
                    873,
                    2281,
                    813,
                    848,
                    887,
                    828
                ],
                "re.search": [
                    647
                ],
                "re": [
                    647
                ],
                "self._aggregate_item_by_item": [
                    659
                ],
                "wrapper.__name__": [
                    662
                ],
                "wrapper": [
                    662,
                    663
                ],
                "inds": [
                    689,
                    685,
                    686
                ],
                "self._get_index": [
                    685
                ],
                "obj._take_with_is_copy": [
                    689
                ],
                "self.grouper.get_iterator": [
                    700
                ],
                "self._is_builtin_func": [
                    883,
                    709
                ],
                "callable": [
                    2234,
                    715,
                    2231
                ],
                "np.errstate": [
                    719
                ],
                "wraps": [
                    717
                ],
                "hasattr": [
                    722
                ],
                "nanops": [
                    722,
                    724
                ],
                "option_context": [
                    734
                ],
                "self._python_apply_general": [
                    736,
                    906,
                    747
                ],
                "_group_selection_context": [
                    746,
                    2059,
                    2000,
                    1431,
                    1274
                ],
                "format": [
                    703
                ],
                "values": [
                    914,
                    915,
                    916,
                    1811,
                    918,
                    928,
                    931,
                    934,
                    951,
                    960,
                    2249,
                    971,
                    972,
                    974,
                    975,
                    2254,
                    2261,
                    2267,
                    2276,
                    752,
                    755
                ],
                "self.grouper.apply": [
                    752
                ],
                "self._wrap_applied_output": [
                    754
                ],
                "AbstractMethodError": [
                    837,
                    840,
                    843,
                    759,
                    762
                ],
                "Iterable": [
                    758
                ],
                "ids": [
                    1760,
                    776,
                    777,
                    778,
                    783,
                    1750,
                    1753
                ],
                "_": [
                    2243,
                    776,
                    1800,
                    2473,
                    943,
                    821,
                    1750
                ],
                "ngroups": [
                    2243,
                    776,
                    777,
                    2252,
                    2271
                ],
                "self.grouper.group_info": [
                    776,
                    2002,
                    1750
                ],
                "sorter": [
                    777,
                    778,
                    793
                ],
                "get_group_index_sorter": [
                    777
                ],
                "count": [
                    778,
                    780,
                    784,
                    792,
                    793
                ],
                "np.empty": [
                    792,
                    781,
                    991
                ],
                "np.int64": [
                    781,
                    1871,
                    2325,
                    794,
                    1598
                ],
                "run": [
                    783,
                    784,
                    785,
                    788,
                    790
                ],
                "np.r_": [
                    784,
                    790,
                    783
                ],
                "rep": [
                    784,
                    788,
                    790
                ],
                "np.diff": [
                    784
                ],
                "np.nonzero": [
                    784
                ],
                "out": [
                    1760,
                    1763,
                    1765,
                    1766,
                    785,
                    788,
                    790,
                    794,
                    1755,
                    1757
                ],
                "cumsum": [
                    785
                ],
                "ascending": [
                    2107,
                    787,
                    2061,
                    2003
                ],
                "np.repeat": [
                    788,
                    790
                ],
                "rev": [
                    792,
                    793,
                    794
                ],
                "np.intp": [
                    792,
                    793,
                    1743
                ],
                "np.arange": [
                    1928,
                    793,
                    1937
                ],
                "astype": [
                    794,
                    1874
                ],
                "any": [
                    808,
                    2466
                ],
                "fillna": [
                    808
                ],
                "self.size": [
                    808
                ],
                "func_nm": [
                    809
                ],
                "base.cython_cast_blacklist": [
                    809
                ],
                "output": [
                    903,
                    905,
                    911,
                    918,
                    920,
                    2456,
                    2458,
                    2463,
                    2470,
                    813,
                    2483,
                    829,
                    831,
                    834,
                    2244,
                    2501,
                    2504,
                    2510,
                    848,
                    2512,
                    869,
                    874,
                    2282,
                    877,
                    2285,
                    2287,
                    880,
                    887
                ],
                "Dict": [
                    848,
                    2244,
                    813,
                    887
                ],
                "base.OutputKey": [
                    836,
                    868,
                    902,
                    839,
                    2244,
                    873,
                    2281,
                    813,
                    848,
                    887,
                    828
                ],
                "np.ndarray": [
                    836,
                    2244,
                    839,
                    1863,
                    813,
                    848,
                    1077,
                    1878,
                    887,
                    1085
                ],
                "idx": [
                    868,
                    870,
                    902,
                    2247,
                    873,
                    2281,
                    875,
                    814,
                    853,
                    889,
                    828
                ],
                "enumerate": [
                    889,
                    2497,
                    814,
                    2247
                ],
                "self._iterate_slices": [
                    854,
                    2247,
                    814,
                    889
                ],
                "obj.name": [
                    2248,
                    890,
                    855,
                    815
                ],
                "is_numeric": [
                    816,
                    817,
                    856,
                    857
                ],
                "is_numeric_dtype": [
                    816,
                    856,
                    915
                ],
                "obj.dtype": [
                    816,
                    856
                ],
                "numeric_only": [
                    1346,
                    1349,
                    1225,
                    1226,
                    1357,
                    1200,
                    817,
                    1201,
                    857
                ],
                "self.grouper.transform": [
                    821
                ],
                "obj.values": [
                    821
                ],
                "how": [
                    869,
                    2245,
                    874,
                    821,
                    825,
                    826,
                    861
                ],
                "NotImplementedError": [
                    1146,
                    1362,
                    822
                ],
                "self._transform_should_cast": [
                    825
                ],
                "maybe_cast_result": [
                    869,
                    903,
                    874,
                    918,
                    826
                ],
                "DataError": [
                    832,
                    1360,
                    878
                ],
                "self._wrap_transformed_output": [
                    834,
                    2287
                ],
                "DatetimeArray": [
                    848
                ],
                "agg_names": [
                    864,
                    866,
                    867,
                    860
                ],
                "self.grouper.aggregate": [
                    860
                ],
                "obj._values": [
                    2249,
                    861
                ],
                "min_count": [
                    1346,
                    1349,
                    861,
                    1358
                ],
                "result.shape": [
                    866
                ],
                "result_column": [
                    867,
                    869
                ],
                "result_name": [
                    867,
                    868
                ],
                "result.T": [
                    1434,
                    867
                ],
                "result.ndim": [
                    872
                ],
                "self._wrap_aggregated_output": [
                    880,
                    2285,
                    920
                ],
                "counts": [
                    897,
                    910
                ],
                "self.grouper.agg_series": [
                    897
                ],
                "self.grouper._filter_empty_groups": [
                    908
                ],
                "mask": [
                    910,
                    1811,
                    918,
                    1815,
                    1814,
                    1748,
                    2391,
                    2392,
                    1753,
                    2267,
                    1755,
                    2268,
                    991,
                    992,
                    993,
                    1760,
                    995,
                    996,
                    2425,
                    2426
                ],
                "counts.ravel": [
                    910
                ],
                "output.items": [
                    911
                ],
                "values.dtype": [
                    915
                ],
                "ensure_float": [
                    916
                ],
                "v": [
                    928,
                    929
                ],
                "com.not_none": [
                    928
                ],
                "v._get_axis": [
                    929
                ],
                "ax._reset_identity": [
                    930
                ],
                "not_indexed_same": [
                    933
                ],
                "concat": [
                    934,
                    972,
                    975,
                    1916,
                    959
                ],
                "self._selected_obj._get_axis": [
                    935
                ],
                "ax.has_duplicates": [
                    942
                ],
                "indexer": [
                    944,
                    945,
                    943
                ],
                "result.index.get_indexer_non_unique": [
                    943
                ],
                "result.index": [
                    1922,
                    1925,
                    1928,
                    1934,
                    943,
                    1821
                ],
                "ax.values": [
                    943
                ],
                "algorithms.unique1d": [
                    944
                ],
                "algorithms": [
                    944,
                    2276
                ],
                "result.take": [
                    945,
                    1938
                ],
                "result.reindex": [
                    947,
                    1823
                ],
                "reset_identity": [
                    974,
                    951
                ],
                "group_levels": [
                    963,
                    956
                ],
                "self.grouper.levels": [
                    956
                ],
                "group_names": [
                    964,
                    957
                ],
                "self.grouper.names": [
                    2474,
                    957
                ],
                "list": [
                    1922,
                    995,
                    1732,
                    2501,
                    971,
                    1741
                ],
                "range": [
                    1922,
                    971
                ],
                "self._selection_name": [
                    977,
                    979
                ],
                "result.name": [
                    979,
                    1311
                ],
                "indices": [
                    993,
                    1937,
                    1938,
                    984,
                    985,
                    987,
                    989
                ],
                "np.array": [
                    985,
                    1743,
                    1925,
                    1079
                ],
                "np.sort": [
                    987
                ],
                "dropna": [
                    1736,
                    1772,
                    1777,
                    1783,
                    988
                ],
                "filtered": [
                    997,
                    996,
                    989
                ],
                "self._selected_obj.take": [
                    989
                ],
                "self._selected_obj.index": [
                    2001,
                    2060,
                    991
                ],
                "mask.fill": [
                    992
                ],
                "indices.astype": [
                    993
                ],
                "T": [
                    1937,
                    995
                ],
                "np.tile": [
                    995
                ],
                "self._selected_obj.shape": [
                    995
                ],
                "self._selected_obj.where": [
                    996
                ],
                "OutputFrameOrSeries": [
                    1001,
                    2429,
                    2430
                ],
                "TypeVar": [
                    1001
                ],
                "_GroupBy": [
                    1004
                ],
                "is_object_dtype": [
                    1864,
                    1078
                ],
                "vals": [
                    1864,
                    1870,
                    1872,
                    1874,
                    1876,
                    2261,
                    1078,
                    1079,
                    2264,
                    1081,
                    2263,
                    1083,
                    1885,
                    1887
                ],
                "vals.astype": [
                    1081,
                    1885
                ],
                "np.bool": [
                    1081,
                    1083
                ],
                "vals.view": [
                    1083
                ],
                "np.uint8": [
                    1091,
                    1083,
                    2267
                ],
                "Tuple": [
                    1077,
                    1863
                ],
                "Type": [
                    2535,
                    1863,
                    1077,
                    1878,
                    1085
                ],
                "result.astype": [
                    1086
                ],
                "inference": [
                    1869,
                    1871,
                    1873,
                    1876,
                    1879,
                    1882,
                    1885,
                    1086
                ],
                "self._get_cythonized_result": [
                    1088,
                    1890,
                    1903,
                    2323,
                    1595
                ],
                "np.dtype": [
                    2178,
                    1091,
                    1895,
                    1908,
                    2325,
                    1598
                ],
                "objs_to_bool": [
                    1094
                ],
                "result_to_bool": [
                    1095
                ],
                "val_test": [
                    1096
                ],
                "skipna": [
                    1097,
                    1115,
                    1132
                ],
                "self._bool_agg": [
                    1115,
                    1132
                ],
                "self._cython_agg_general": [
                    1354,
                    1269,
                    1198,
                    1223
                ],
                "mean": [
                    1200
                ],
                "median": [
                    1225
                ],
                "np.sqrt": [
                    1248,
                    1295
                ],
                "self.var": [
                    1248
                ],
                "ddof": [
                    1248,
                    1295,
                    1268,
                    1270,
                    1273
                ],
                "var": [
                    1270
                ],
                "x.var": [
                    1273
                ],
                "self._python_agg_general": [
                    1275
                ],
                "self.std": [
                    1295
                ],
                "self.count": [
                    1295
                ],
                "self.grouper.size": [
                    1308
                ],
                "self.obj.name": [
                    1311
                ],
                "self._reindex_output": [
                    1312,
                    1765
                ],
                "_local_template": [
                    1328,
                    1348
                ],
                "alias": [
                    1355
                ],
                "npfunc": [
                    1356,
                    1373
                ],
                "self.aggregate": [
                    1373
                ],
                "set_function_name": [
                    1376
                ],
                "cls": [
                    1376,
                    1409,
                    1410,
                    1408,
                    1411,
                    1412,
                    1407
                ],
                "x.to_numpy": [
                    1396,
                    1382
                ],
                "notna": [
                    1384,
                    1397
                ],
                "np.nan": [
                    1386,
                    1815,
                    1399
                ],
                "x.apply": [
                    1403,
                    1390
                ],
                "first": [
                    1392,
                    1390
                ],
                "last": [
                    1403,
                    1405
                ],
                "cls.sum": [
                    1407
                ],
                "groupby_function": [
                    1408,
                    1409,
                    1410,
                    1411,
                    1412,
                    1407
                ],
                "np.sum": [
                    1407
                ],
                "cls.prod": [
                    1408
                ],
                "np.prod": [
                    1408
                ],
                "cls.min": [
                    1409
                ],
                "np.min": [
                    1409
                ],
                "cls.max": [
                    1410
                ],
                "np.max": [
                    1410
                ],
                "cls.first": [
                    1411
                ],
                "first_compat": [
                    1411
                ],
                "cls.last": [
                    1412
                ],
                "last_compat": [
                    1412
                ],
                "classmethod": [
                    1314
                ],
                "self._apply_to_column_groupbys": [
                    1427
                ],
                "x._cython_agg_general": [
                    1427
                ],
                "x.describe": [
                    1432
                ],
                "result.unstack": [
                    1435
                ],
                "doc": [
                    1429,
                    2518
                ],
                "DataFrame.describe": [
                    1429
                ],
                "get_resampler_for_grouping": [
                    1545
                ],
                "rule": [
                    1545
                ],
                "RollingGroupby": [
                    1555
                ],
                "ExpandingGroupby": [
                    1566
                ],
                "limit": [
                    1601,
                    2347,
                    2354,
                    2355,
                    1652,
                    1592,
                    1593,
                    1626
                ],
                "direction": [
                    1600
                ],
                "self._fill": [
                    1626,
                    1652
                ],
                "ffill": [
                    1628
                ],
                "pad": [
                    1628
                ],
                "bfill": [
                    1654
                ],
                "backfill": [
                    1654
                ],
                "valid_containers": [
                    1769,
                    1740,
                    1732,
                    1733
                ],
                "nth_values": [
                    1739,
                    1741,
                    1743
                ],
                "nth_array": [
                    1746,
                    1747,
                    1743
                ],
                "mask_left": [
                    1746,
                    1748
                ],
                "np.in1d": [
                    1746,
                    1747
                ],
                "self._cumcount_array": [
                    2061,
                    1746,
                    1747,
                    2391,
                    2425
                ],
                "mask_right": [
                    1747,
                    1748
                ],
                "result_index": [
                    1760,
                    1762,
                    1763,
                    1759
                ],
                "out.index": [
                    1760
                ],
                "CategoricalIndex": [
                    1762,
                    2467
                ],
                "out.reindex": [
                    1763
                ],
                "out.sort_index": [
                    1766
                ],
                "max_len": [
                    1811,
                    1782
                ],
                "dropped": [
                    1792,
                    1801,
                    1809,
                    1783,
                    1818
                ],
                "self.obj.dropna": [
                    1783
                ],
                "self.grouper.axis": [
                    1791
                ],
                "axis.isin": [
                    1792
                ],
                "dropped.index": [
                    1792
                ],
                "grb": [
                    1809,
                    1810
                ],
                "dropped.groupby": [
                    1809
                ],
                "sizes": [
                    1810,
                    1811
                ],
                "grb.size": [
                    1810
                ],
                "grb.nth": [
                    1810
                ],
                "mask.any": [
                    1814
                ],
                "result.loc": [
                    1815
                ],
                "is_integer_dtype": [
                    1882,
                    1870
                ],
                "is_datetime64_dtype": [
                    1872
                ],
                "np.asarray": [
                    1874
                ],
                "np.float": [
                    1874
                ],
                "interpolation": [
                    1912,
                    1899,
                    1883
                ],
                "is_scalar": [
                    1889
                ],
                "q": [
                    1889,
                    1898,
                    1937,
                    1914,
                    1916
                ],
                "np.float64": [
                    1908,
                    1895
                ],
                "pre_processor": [
                    1896,
                    1909
                ],
                "post_processor": [
                    1897,
                    1910
                ],
                "results": [
                    1916,
                    1902
                ],
                "qi": [
                    1914,
                    1911
                ],
                "order": [
                    1922,
                    1931,
                    1934
                ],
                "result.index.nlevels": [
                    1922
                ],
                "index_names": [
                    1928,
                    1925,
                    1934
                ],
                "result.index.names": [
                    1928,
                    1925,
                    1934
                ],
                "result.reorder_levels": [
                    1931
                ],
                "T.flatten": [
                    1937
                ],
                "reshape": [
                    1937
                ],
                "self.ngroups": [
                    1937,
                    2004
                ],
                "cumcounts": [
                    2061,
                    2062
                ],
                "na_option": [
                    2100,
                    2108
                ],
                "self._cython_transform": [
                    2158,
                    2127,
                    2103,
                    2173,
                    2143
                ],
                "method": [
                    2106
                ],
                "pct": [
                    2109
                ],
                "nv.validate_groupby_func": [
                    2139,
                    2123
                ],
                "nv": [
                    2139,
                    2123
                ],
                "x.cumprod": [
                    2125
                ],
                "x.cumsum": [
                    2141
                ],
                "np.minimum.accumulate": [
                    2156
                ],
                "np.minimum": [
                    2156
                ],
                "np.maximum.accumulate": [
                    2171
                ],
                "np.maximum": [
                    2171
                ],
                "result_is_index": [
                    2275,
                    2228
                ],
                "aggregate": [
                    2251,
                    2228,
                    2284
                ],
                "post_processing": [
                    2278,
                    2230,
                    2279
                ],
                "pre_processing": [
                    2231,
                    2262,
                    2263,
                    2233,
                    2234
                ],
                "needs_values": [
                    2260,
                    2236
                ],
                "labels": [
                    2257,
                    2243
                ],
                "grouper.group_info": [
                    2243
                ],
                "base_func": [
                    2257,
                    2245
                ],
                "libgroupby": [
                    2245
                ],
                "result_sz": [
                    2256,
                    2252,
                    2254
                ],
                "np.zeros": [
                    2256
                ],
                "cython_dtype": [
                    2256
                ],
                "partial": [
                    2264,
                    2257,
                    2268,
                    2271
                ],
                "inferences": [
                    2258,
                    2279,
                    2263
                ],
                "needs_mask": [
                    2266
                ],
                "view": [
                    2267
                ],
                "isna": [
                    2320,
                    2267
                ],
                "needs_ngroups": [
                    2270
                ],
                "algorithms.take_nd": [
                    2276
                ],
                "freq": [
                    2342,
                    2348,
                    2320,
                    2321,
                    2357
                ],
                "fill_value": [
                    2320,
                    2321,
                    2481,
                    2505
                ],
                "x.shift": [
                    2321
                ],
                "periods": [
                    2328,
                    2321,
                    2357,
                    2345
                ],
                "x.pct_change": [
                    2344
                ],
                "fill_method": [
                    2352,
                    2353,
                    2346,
                    2355
                ],
                "filled": [
                    2355,
                    2356,
                    2358
                ],
                "fill_grp": [
                    2356,
                    2357
                ],
                "filled.groupby": [
                    2356
                ],
                "self.grouper.codes": [
                    2356
                ],
                "shifted": [
                    2357,
                    2358
                ],
                "fill_grp.shift": [
                    2357
                ],
                "self._reset_group_selection": [
                    2424,
                    2390
                ],
                "Scalar": [
                    2429
                ],
                "np.NaN": [
                    2429
                ],
                "groupings": [
                    2497,
                    2468,
                    2472,
                    2454,
                    2455,
                    2457
                ],
                "self.grouper.groupings": [
                    2454
                ],
                "ping.grouper": [
                    2467
                ],
                "ping": [
                    2472,
                    2497,
                    2467,
                    2468
                ],
                "Categorical": [
                    2467
                ],
                "levels_list": [
                    2472,
                    2474
                ],
                "ping.group_index": [
                    2472
                ],
                "sortlevel": [
                    2473
                ],
                "MultiIndex.from_product": [
                    2473
                ],
                "MultiIndex": [
                    2473
                ],
                "d": [
                    2483,
                    2478
                ],
                "self.obj._get_axis_name": [
                    2479
                ],
                "output.reindex": [
                    2483
                ],
                "in_axis_grps": [
                    2496,
                    2499
                ],
                "i": [
                    2497
                ],
                "ping.name": [
                    2497
                ],
                "ping.in_axis": [
                    2497
                ],
                "g_nums": [
                    2499,
                    2510
                ],
                "g_names": [
                    2499,
                    2501
                ],
                "output.drop": [
                    2501
                ],
                "reindex": [
                    2504
                ],
                "output.set_index": [
                    2504
                ],
                "output.reset_index": [
                    2512,
                    2510
                ],
                "GroupBy._add_numeric_operations": [
                    2515
                ],
                "GroupBy": [
                    2515,
                    2533,
                    2518,
                    2535
                ],
                "klass": [
                    2543,
                    2539,
                    2547,
                    2535
                ],
                "SeriesGroupBy": [
                    2539
                ],
                "DataFrameGroupBy": [
                    2543
                ],
                "by": [
                    2549
                ]
            },
            "filtered_variables_in_file": {
                "_common_see_also": [
                    1415,
                    1548,
                    2065,
                    1298,
                    1558,
                    2332,
                    1205,
                    2361,
                    2114,
                    67,
                    1347,
                    1101,
                    1230,
                    2130,
                    2395,
                    1118,
                    2146,
                    1251,
                    1135,
                    2161,
                    1657,
                    1149,
                    1278
                ],
                "_apply_docs": [
                    704,
                    74,
                    703
                ],
                "_pipe_template": [
                    193,
                    605
                ],
                "_transform_template": [
                    247
                ],
                "PandasObject": [
                    314,
                    358
                ],
                "self._groupby": [
                    320,
                    334,
                    327
                ],
                "self": [
                    513,
                    514,
                    515,
                    516,
                    518,
                    1545,
                    2059,
                    2060,
                    2061,
                    527,
                    529,
                    530,
                    1555,
                    540,
                    542,
                    1566,
                    544,
                    545,
                    549,
                    554,
                    555,
                    563,
                    564,
                    565,
                    566,
                    2103,
                    568,
                    1595,
                    572,
                    575,
                    576,
                    577,
                    578,
                    1088,
                    581,
                    2125,
                    2127,
                    1626,
                    1115,
                    2141,
                    607,
                    2143,
                    612,
                    614,
                    618,
                    620,
                    1132,
                    622,
                    2156,
                    2158,
                    1652,
                    630,
                    2171,
                    2173,
                    642,
                    645,
                    654,
                    659,
                    683,
                    685,
                    1198,
                    689,
                    700,
                    2241,
                    709,
                    1223,
                    2247,
                    1744,
                    1746,
                    1747,
                    1750,
                    1755,
                    1756,
                    1759,
                    736,
                    1248,
                    1762,
                    1765,
                    1766,
                    746,
                    747,
                    2285,
                    2287,
                    752,
                    754,
                    755,
                    1269,
                    759,
                    1783,
                    762,
                    1274,
                    1275,
                    1786,
                    1791,
                    776,
                    1802,
                    1803,
                    1804,
                    1805,
                    1806,
                    1295,
                    1809,
                    2321,
                    2323,
                    1818,
                    1819,
                    1308,
                    1821,
                    1310,
                    1311,
                    1312,
                    1823,
                    2343,
                    808,
                    814,
                    2355,
                    2356,
                    821,
                    825,
                    320,
                    834,
                    324,
                    837,
                    1350,
                    327,
                    840,
                    1354,
                    843,
                    332,
                    334,
                    854,
                    2390,
                    2391,
                    2392,
                    860,
                    1373,
                    1890,
                    1903,
                    880,
                    883,
                    2424,
                    889,
                    2425,
                    379,
                    891,
                    2426,
                    384,
                    897,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    398,
                    906,
                    908,
                    1937,
                    1427,
                    2454,
                    1431,
                    920,
                    1432,
                    410,
                    1433,
                    413,
                    414,
                    415,
                    416,
                    929,
                    2462,
                    419,
                    934,
                    423,
                    935,
                    2474,
                    2477,
                    2479,
                    945,
                    947,
                    437,
                    438,
                    949,
                    952,
                    442,
                    443,
                    956,
                    957,
                    961,
                    450,
                    451,
                    2504,
                    972,
                    975,
                    2000,
                    977,
                    2001,
                    979,
                    2002,
                    2004,
                    472,
                    473,
                    989,
                    991,
                    995,
                    996,
                    485,
                    501,
                    507
                ],
                "groupby": [
                    320,
                    345,
                    346,
                    344
                ],
                "self.plot": [
                    324,
                    332
                ],
                "args": [
                    324,
                    1545,
                    714,
                    2123,
                    332,
                    720,
                    659,
                    884,
                    1555,
                    633,
                    2139,
                    1566,
                    607
                ],
                "kwargs": [
                    1545,
                    659,
                    1555,
                    1432,
                    1566,
                    821,
                    324,
                    714,
                    2123,
                    332,
                    2125,
                    2127,
                    720,
                    2139,
                    2141,
                    607,
                    2143,
                    2273,
                    884,
                    629,
                    630,
                    633
                ],
                "f.__name__": [
                    326
                ],
                "f": [
                    736,
                    897,
                    326,
                    327,
                    618,
                    619,
                    747,
                    906,
                    334,
                    495,
                    622,
                    623,
                    752,
                    724,
                    884,
                    633,
                    731
                ],
                "self._groupby.apply": [
                    334,
                    327
                ],
                "name": [
                    641,
                    902,
                    659,
                    662,
                    685,
                    687,
                    815,
                    828,
                    1346,
                    2248,
                    332,
                    855,
                    1376,
                    612,
                    485,
                    873,
                    618,
                    2281,
                    620,
                    622,
                    495,
                    499,
                    501,
                    890,
                    507,
                    637
                ],
                "attr": [
                    576,
                    577,
                    578,
                    581,
                    336,
                    575
                ],
                "groupby._set_group_selection": [
                    344
                ],
                "groupby._reset_group_selection": [
                    346
                ],
                "contextmanager": [
                    339
                ],
                "_KeysArgType": [
                    2521,
                    365,
                    349
                ],
                "Union": [
                    848,
                    1658,
                    349
                ],
                "Hashable": [
                    352,
                    353,
                    354,
                    350,
                    351
                ],
                "List": [
                    353,
                    1658,
                    351
                ],
                "Callable": [
                    352,
                    353
                ],
                "Mapping": [
                    354,
                    836,
                    839
                ],
                "SelectionMixin": [
                    358
                ],
                "Generic": [
                    358
                ],
                "FrameOrSeries": [
                    364,
                    1004,
                    358
                ],
                "_group_selection": [
                    359
                ],
                "_apply_whitelist": [
                    360
                ],
                "FrozenSet": [
                    360
                ],
                "Optional": [
                    1863,
                    365,
                    1878,
                    2521,
                    1658
                ],
                "self._selection": [
                    513,
                    379,
                    518
                ],
                "selection": [
                    2554,
                    379
                ],
                "obj": [
                    897,
                    387,
                    903,
                    403,
                    404,
                    413,
                    414,
                    682,
                    683,
                    814,
                    815,
                    816,
                    689,
                    821,
                    826,
                    2247,
                    2248,
                    2249,
                    854,
                    855,
                    856,
                    861,
                    869,
                    2536,
                    874,
                    2540,
                    2545,
                    2548,
                    889,
                    890,
                    381,
                    382
                ],
                "NDFrame": [
                    2520,
                    1001,
                    381
                ],
                "obj._consolidate_inplace": [
                    382
                ],
                "self.level": [
                    384,
                    1786,
                    1804
                ],
                "level": [
                    384,
                    2551,
                    407
                ],
                "as_index": [
                    392,
                    386,
                    2555
                ],
                "DataFrame": [
                    387,
                    1416,
                    2540,
                    1389,
                    1429,
                    1658,
                    1402
                ],
                "axis": [
                    1792,
                    389,
                    2320,
                    2321,
                    1403,
                    406,
                    414,
                    2342,
                    2349,
                    2110,
                    1225,
                    2124,
                    2125,
                    2140,
                    2141,
                    2155,
                    2156,
                    1390,
                    2550,
                    2170,
                    2171,
                    1791
                ],
                "self.as_index": [
                    392,
                    2477,
                    1809,
                    952,
                    1756,
                    542
                ],
                "self.keys": [
                    393,
                    1786,
                    1802
                ],
                "keys": [
                    393,
                    971,
                    972,
                    752,
                    755,
                    405,
                    955
                ],
                "self.sort": [
                    1809,
                    394,
                    1805,
                    1766
                ],
                "sort": [
                    408,
                    394,
                    2556
                ],
                "self.group_keys": [
                    395,
                    949
                ],
                "group_keys": [
                    2557,
                    962,
                    395,
                    955
                ],
                "self.squeeze": [
                    396
                ],
                "squeeze": [
                    396,
                    2558
                ],
                "self.observed": [
                    1762,
                    397,
                    2462
                ],
                "observed": [
                    409,
                    397,
                    2559
                ],
                "self.mutated": [
                    410,
                    755,
                    398,
                    1806
                ],
                "mutated": [
                    752,
                    2560,
                    755,
                    398
                ],
                "grouper": [
                    1792,
                    2241,
                    2243,
                    1800,
                    400,
                    1809,
                    403,
                    2552,
                    415
                ],
                "exclusions": [
                    416,
                    2553,
                    403
                ],
                "get_grouper": [
                    1800,
                    403
                ],
                "self.obj": [
                    544,
                    513,
                    577,
                    515,
                    516,
                    549,
                    518,
                    700,
                    654,
                    2479,
                    1783,
                    568,
                    1818,
                    572,
                    413,
                    1310,
                    1311
                ],
                "self.axis": [
                    1803,
                    1433,
                    414,
                    929,
                    934,
                    935,
                    2479,
                    689,
                    945,
                    947,
                    565,
                    566,
                    568,
                    700,
                    961,
                    972,
                    975,
                    1373,
                    989,
                    752,
                    630,
                    1783
                ],
                "obj._get_axis_number": [
                    414
                ],
                "self.grouper": [
                    897,
                    776,
                    908,
                    2454,
                    1819,
                    1308,
                    540,
                    1821,
                    415,
                    1823,
                    2474,
                    563,
                    564,
                    821,
                    438,
                    2356,
                    443,
                    700,
                    956,
                    957,
                    2241,
                    451,
                    2504,
                    2002,
                    1750,
                    860,
                    1759,
                    752,
                    891,
                    1791
                ],
                "self.exclusions": [
                    416
                ],
                "self.groups": [
                    419
                ],
                "object.__repr__": [
                    423
                ],
                "self._assure_grouper": [
                    450,
                    442,
                    437
                ],
                "self.grouper.groups": [
                    438
                ],
                "self.grouper.ngroups": [
                    891,
                    443
                ],
                "self.grouper.indices": [
                    451
                ],
                "s": [
                    464,
                    462,
                    494
                ],
                "datetime.datetime": [
                    462
                ],
                "datetime": [
                    462
                ],
                "Timestamp": [
                    465,
                    463
                ],
                "key": [
                    868,
                    869,
                    902,
                    903,
                    873,
                    874,
                    2281,
                    2282,
                    463,
                    911,
                    465,
                    467,
                    918,
                    828,
                    829
                ],
                "np.datetime64": [
                    464
                ],
                "np": [
                    1408,
                    1409,
                    1410,
                    2178,
                    1925,
                    1928,
                    781,
                    783,
                    784,
                    1295,
                    1937,
                    788,
                    2325,
                    790,
                    1815,
                    792,
                    793,
                    794,
                    1407,
                    813,
                    564,
                    1077,
                    1079,
                    1081,
                    1083,
                    1085,
                    1598,
                    1091,
                    836,
                    2244,
                    839,
                    1863,
                    719,
                    464,
                    848,
                    1743,
                    1746,
                    1747,
                    1871,
                    1874,
                    1878,
                    2256,
                    985,
                    987,
                    2267,
                    991,
                    1248,
                    995,
                    1895,
                    1386,
                    2156,
                    1908,
                    887,
                    2171,
                    2429,
                    1399
                ],
                "asm8": [
                    465
                ],
                "names": [
                    485,
                    495,
                    499,
                    469,
                    501,
                    477
                ],
                "self.indices": [
                    472,
                    473,
                    485,
                    501
                ],
                "index_sample": [
                    482,
                    494,
                    498,
                    473,
                    475,
                    478
                ],
                "name_sample": [
                    482,
                    477,
                    479
                ],
                "msg": [
                    480,
                    481,
                    488,
                    492,
                    2101,
                    2102
                ],
                "err": [
                    648,
                    492,
                    1365,
                    1364
                ],
                "converters": [
                    494,
                    495
                ],
                "get_converter": [
                    498,
                    494
                ],
                "n": [
                    1733,
                    1769,
                    1738,
                    1739,
                    1740,
                    1741,
                    495,
                    1810,
                    1782,
                    2391,
                    2425
                ],
                "converter": [
                    498,
                    499
                ],
                "self.indices.get": [
                    501
                ],
                "self._get_indices": [
                    507,
                    564
                ],
                "Series": [
                    513,
                    2536,
                    1225,
                    2062,
                    1200,
                    977,
                    2002,
                    758,
                    1270,
                    1310
                ],
                "self._group_selection": [
                    545,
                    514,
                    515,
                    554,
                    527,
                    529
                ],
                "cache_readonly": [
                    509
                ],
                "self._reset_cache": [
                    530,
                    555
                ],
                "grp": [
                    540,
                    550,
                    543
                ],
                "self.obj.ndim": [
                    544,
                    654
                ],
                "ax": [
                    929,
                    930,
                    549,
                    935,
                    554,
                    942,
                    943,
                    947
                ],
                "self.obj._info_axis": [
                    549
                ],
                "groupers": [
                    552,
                    554,
                    550
                ],
                "g.name": [
                    550
                ],
                "g": [
                    720,
                    550
                ],
                "grp.groupings": [
                    550
                ],
                "g.level": [
                    550
                ],
                "g.in_axis": [
                    550
                ],
                "tolist": [
                    554
                ],
                "ax.difference": [
                    554
                ],
                "Index": [
                    554,
                    564
                ],
                "self.grouper.is_monotonic": [
                    563
                ],
                "index": [
                    2473,
                    2505,
                    2060,
                    2062,
                    2479,
                    2001,
                    2002,
                    564,
                    565
                ],
                "np.concatenate": [
                    987,
                    564
                ],
                "self.grouper.result_index": [
                    2504,
                    1759,
                    564,
                    1819,
                    1821,
                    1823
                ],
                "result.set_axis": [
                    568,
                    565
                ],
                "result": [
                    897,
                    1922,
                    901,
                    1925,
                    903,
                    1928,
                    1931,
                    1934,
                    911,
                    1937,
                    914,
                    659,
                    660,
                    1810,
                    918,
                    1814,
                    1432,
                    1815,
                    1434,
                    1435,
                    1308,
                    1818,
                    1821,
                    1311,
                    1312,
                    1823,
                    1825,
                    934,
                    943,
                    945,
                    947,
                    565,
                    566,
                    821,
                    568,
                    569,
                    826,
                    829,
                    1086,
                    959,
                    972,
                    975,
                    2256,
                    977,
                    2002,
                    979,
                    2004,
                    981,
                    2005,
                    2257,
                    860,
                    1373,
                    1374,
                    736,
                    866,
                    867,
                    2276,
                    2279,
                    872,
                    874,
                    2282,
                    749,
                    1938,
                    1916
                ],
                "result.sort_index": [
                    566
                ],
                "self.obj._get_axis": [
                    568
                ],
                "self.obj._dir_additions": [
                    572
                ],
                "self._apply_whitelist": [
                    612,
                    572
                ],
                "self._internal_names_set": [
                    575
                ],
                "object.__getattribute__": [
                    576
                ],
                "com.pipe": [
                    607
                ],
                "com": [
                    928,
                    607
                ],
                "func": [
                    709,
                    715,
                    717,
                    720,
                    2257,
                    722,
                    724,
                    2264,
                    731,
                    2268,
                    2271,
                    1376,
                    2273,
                    1378,
                    607,
                    883,
                    884,
                    1273,
                    1275
                ],
                "Substitution": [
                    1414,
                    1547,
                    2064,
                    1297,
                    1940,
                    1557,
                    1277,
                    2331,
                    1204,
                    2360,
                    2361,
                    2113,
                    1346,
                    1604,
                    584,
                    1100,
                    1229,
                    2129,
                    2007,
                    2394,
                    2395,
                    1117,
                    1630,
                    2145,
                    1250,
                    1134,
                    2160,
                    2289,
                    1656,
                    1657,
                    1148,
                    1149
                ],
                "Appender": [
                    1415,
                    1548,
                    2065,
                    1298,
                    1558,
                    2332,
                    1205,
                    702,
                    2114,
                    1347,
                    1348,
                    1101,
                    1230,
                    2130,
                    605,
                    1118,
                    2146,
                    1251,
                    1135,
                    2161,
                    1278
                ],
                "plot": [
                    609
                ],
                "GroupByPlot": [
                    609
                ],
                "self._set_group_selection": [
                    1744,
                    1350,
                    614
                ],
                "self._selected_obj": [
                    995,
                    996,
                    935,
                    618,
                    683,
                    2060,
                    622,
                    752,
                    2001,
                    2392,
                    2426,
                    1755,
                    989,
                    991
                ],
                "types.MethodType": [
                    619
                ],
                "types": [
                    619
                ],
                "self.apply": [
                    642,
                    645,
                    2343,
                    620,
                    2125,
                    2156,
                    2321,
                    1432,
                    2171,
                    2141
                ],
                "sig": [
                    628,
                    623
                ],
                "inspect.signature": [
                    623
                ],
                "inspect": [
                    623
                ],
                "sig.parameters": [
                    628
                ],
                "kwargs.get": [
                    629
                ],
                "x": [
                    1402,
                    2321,
                    1427,
                    1432,
                    2344,
                    2171,
                    1200,
                    1079,
                    1225,
                    2125,
                    1373,
                    2141,
                    1382,
                    1384,
                    1385,
                    1387,
                    2156,
                    1389,
                    1390,
                    1392,
                    633,
                    884,
                    1396,
                    1270,
                    1397,
                    1400,
                    1273,
                    1398,
                    1403,
                    1405
                ],
                "curried.__name__": [
                    637
                ],
                "curried": [
                    642,
                    637,
                    645
                ],
                "base.plotting_methods": [
                    641
                ],
                "base": [
                    641,
                    836,
                    868,
                    902,
                    839,
                    2244,
                    809,
                    873,
                    2281,
                    813,
                    848,
                    887,
                    828
                ],
                "re.search": [
                    647
                ],
                "re": [
                    647
                ],
                "self._aggregate_item_by_item": [
                    659
                ],
                "wrapper.__name__": [
                    662
                ],
                "wrapper": [
                    662,
                    663
                ],
                "inds": [
                    689,
                    685,
                    686
                ],
                "self._get_index": [
                    685
                ],
                "obj._take_with_is_copy": [
                    689
                ],
                "self.grouper.get_iterator": [
                    700
                ],
                "self._is_builtin_func": [
                    883,
                    709
                ],
                "np.errstate": [
                    719
                ],
                "wraps": [
                    717
                ],
                "nanops": [
                    722,
                    724
                ],
                "option_context": [
                    734
                ],
                "self._python_apply_general": [
                    736,
                    906,
                    747
                ],
                "_group_selection_context": [
                    746,
                    2059,
                    2000,
                    1431,
                    1274
                ],
                "values": [
                    914,
                    915,
                    916,
                    1811,
                    918,
                    928,
                    931,
                    934,
                    951,
                    960,
                    2249,
                    971,
                    972,
                    974,
                    975,
                    2254,
                    2261,
                    2267,
                    2276,
                    752,
                    755
                ],
                "self.grouper.apply": [
                    752
                ],
                "self._wrap_applied_output": [
                    754
                ],
                "AbstractMethodError": [
                    837,
                    840,
                    843,
                    759,
                    762
                ],
                "Iterable": [
                    758
                ],
                "ids": [
                    1760,
                    776,
                    777,
                    778,
                    783,
                    1750,
                    1753
                ],
                "_": [
                    2243,
                    776,
                    1800,
                    2473,
                    943,
                    821,
                    1750
                ],
                "ngroups": [
                    2243,
                    776,
                    777,
                    2252,
                    2271
                ],
                "self.grouper.group_info": [
                    776,
                    2002,
                    1750
                ],
                "sorter": [
                    777,
                    778,
                    793
                ],
                "get_group_index_sorter": [
                    777
                ],
                "count": [
                    778,
                    780,
                    784,
                    792,
                    793
                ],
                "np.empty": [
                    792,
                    781,
                    991
                ],
                "np.int64": [
                    781,
                    1871,
                    2325,
                    794,
                    1598
                ],
                "run": [
                    783,
                    784,
                    785,
                    788,
                    790
                ],
                "np.r_": [
                    784,
                    790,
                    783
                ],
                "rep": [
                    784,
                    788,
                    790
                ],
                "np.diff": [
                    784
                ],
                "np.nonzero": [
                    784
                ],
                "out": [
                    1760,
                    1763,
                    1765,
                    1766,
                    785,
                    788,
                    790,
                    794,
                    1755,
                    1757
                ],
                "cumsum": [
                    785
                ],
                "ascending": [
                    2107,
                    787,
                    2061,
                    2003
                ],
                "np.repeat": [
                    788,
                    790
                ],
                "rev": [
                    792,
                    793,
                    794
                ],
                "np.intp": [
                    792,
                    793,
                    1743
                ],
                "np.arange": [
                    1928,
                    793,
                    1937
                ],
                "astype": [
                    794,
                    1874
                ],
                "fillna": [
                    808
                ],
                "self.size": [
                    808
                ],
                "func_nm": [
                    809
                ],
                "base.cython_cast_blacklist": [
                    809
                ],
                "output": [
                    903,
                    905,
                    911,
                    918,
                    920,
                    2456,
                    2458,
                    2463,
                    2470,
                    813,
                    2483,
                    829,
                    831,
                    834,
                    2244,
                    2501,
                    2504,
                    2510,
                    848,
                    2512,
                    869,
                    874,
                    2282,
                    877,
                    2285,
                    2287,
                    880,
                    887
                ],
                "Dict": [
                    848,
                    2244,
                    813,
                    887
                ],
                "base.OutputKey": [
                    836,
                    868,
                    902,
                    839,
                    2244,
                    873,
                    2281,
                    813,
                    848,
                    887,
                    828
                ],
                "np.ndarray": [
                    836,
                    2244,
                    839,
                    1863,
                    813,
                    848,
                    1077,
                    1878,
                    887,
                    1085
                ],
                "idx": [
                    868,
                    870,
                    902,
                    2247,
                    873,
                    2281,
                    875,
                    814,
                    853,
                    889,
                    828
                ],
                "self._iterate_slices": [
                    854,
                    2247,
                    814,
                    889
                ],
                "obj.name": [
                    2248,
                    890,
                    855,
                    815
                ],
                "is_numeric": [
                    816,
                    817,
                    856,
                    857
                ],
                "is_numeric_dtype": [
                    816,
                    856,
                    915
                ],
                "obj.dtype": [
                    816,
                    856
                ],
                "numeric_only": [
                    1346,
                    1349,
                    1225,
                    1226,
                    1357,
                    1200,
                    817,
                    1201,
                    857
                ],
                "self.grouper.transform": [
                    821
                ],
                "obj.values": [
                    821
                ],
                "how": [
                    869,
                    2245,
                    874,
                    821,
                    825,
                    826,
                    861
                ],
                "self._transform_should_cast": [
                    825
                ],
                "maybe_cast_result": [
                    869,
                    903,
                    874,
                    918,
                    826
                ],
                "DataError": [
                    832,
                    1360,
                    878
                ],
                "self._wrap_transformed_output": [
                    834,
                    2287
                ],
                "DatetimeArray": [
                    848
                ],
                "agg_names": [
                    864,
                    866,
                    867,
                    860
                ],
                "self.grouper.aggregate": [
                    860
                ],
                "obj._values": [
                    2249,
                    861
                ],
                "min_count": [
                    1346,
                    1349,
                    861,
                    1358
                ],
                "result.shape": [
                    866
                ],
                "result_column": [
                    867,
                    869
                ],
                "result_name": [
                    867,
                    868
                ],
                "result.T": [
                    1434,
                    867
                ],
                "result.ndim": [
                    872
                ],
                "self._wrap_aggregated_output": [
                    880,
                    2285,
                    920
                ],
                "counts": [
                    897,
                    910
                ],
                "self.grouper.agg_series": [
                    897
                ],
                "self.grouper._filter_empty_groups": [
                    908
                ],
                "mask": [
                    910,
                    1811,
                    918,
                    1815,
                    1814,
                    1748,
                    2391,
                    2392,
                    1753,
                    2267,
                    1755,
                    2268,
                    991,
                    992,
                    993,
                    1760,
                    995,
                    996,
                    2425,
                    2426
                ],
                "counts.ravel": [
                    910
                ],
                "output.items": [
                    911
                ],
                "values.dtype": [
                    915
                ],
                "ensure_float": [
                    916
                ],
                "v": [
                    928,
                    929
                ],
                "com.not_none": [
                    928
                ],
                "v._get_axis": [
                    929
                ],
                "ax._reset_identity": [
                    930
                ],
                "not_indexed_same": [
                    933
                ],
                "concat": [
                    934,
                    972,
                    975,
                    1916,
                    959
                ],
                "self._selected_obj._get_axis": [
                    935
                ],
                "ax.has_duplicates": [
                    942
                ],
                "indexer": [
                    944,
                    945,
                    943
                ],
                "result.index.get_indexer_non_unique": [
                    943
                ],
                "result.index": [
                    1922,
                    1925,
                    1928,
                    1934,
                    943,
                    1821
                ],
                "ax.values": [
                    943
                ],
                "algorithms.unique1d": [
                    944
                ],
                "algorithms": [
                    944,
                    2276
                ],
                "result.take": [
                    945,
                    1938
                ],
                "result.reindex": [
                    947,
                    1823
                ],
                "reset_identity": [
                    974,
                    951
                ],
                "group_levels": [
                    963,
                    956
                ],
                "self.grouper.levels": [
                    956
                ],
                "group_names": [
                    964,
                    957
                ],
                "self.grouper.names": [
                    2474,
                    957
                ],
                "self._selection_name": [
                    977,
                    979
                ],
                "result.name": [
                    979,
                    1311
                ],
                "indices": [
                    993,
                    1937,
                    1938,
                    984,
                    985,
                    987,
                    989
                ],
                "np.array": [
                    985,
                    1743,
                    1925,
                    1079
                ],
                "np.sort": [
                    987
                ],
                "dropna": [
                    1736,
                    1772,
                    1777,
                    1783,
                    988
                ],
                "filtered": [
                    997,
                    996,
                    989
                ],
                "self._selected_obj.take": [
                    989
                ],
                "self._selected_obj.index": [
                    2001,
                    2060,
                    991
                ],
                "mask.fill": [
                    992
                ],
                "indices.astype": [
                    993
                ],
                "T": [
                    1937,
                    995
                ],
                "np.tile": [
                    995
                ],
                "self._selected_obj.shape": [
                    995
                ],
                "self._selected_obj.where": [
                    996
                ],
                "OutputFrameOrSeries": [
                    1001,
                    2429,
                    2430
                ],
                "TypeVar": [
                    1001
                ],
                "_GroupBy": [
                    1004
                ],
                "is_object_dtype": [
                    1864,
                    1078
                ],
                "vals": [
                    1864,
                    1870,
                    1872,
                    1874,
                    1876,
                    2261,
                    1078,
                    1079,
                    2264,
                    1081,
                    2263,
                    1083,
                    1885,
                    1887
                ],
                "vals.astype": [
                    1081,
                    1885
                ],
                "np.bool": [
                    1081,
                    1083
                ],
                "vals.view": [
                    1083
                ],
                "np.uint8": [
                    1091,
                    1083,
                    2267
                ],
                "Tuple": [
                    1077,
                    1863
                ],
                "Type": [
                    2535,
                    1863,
                    1077,
                    1878,
                    1085
                ],
                "result.astype": [
                    1086
                ],
                "inference": [
                    1869,
                    1871,
                    1873,
                    1876,
                    1879,
                    1882,
                    1885,
                    1086
                ],
                "self._get_cythonized_result": [
                    1088,
                    1890,
                    1903,
                    2323,
                    1595
                ],
                "np.dtype": [
                    2178,
                    1091,
                    1895,
                    1908,
                    2325,
                    1598
                ],
                "objs_to_bool": [
                    1094
                ],
                "result_to_bool": [
                    1095
                ],
                "val_test": [
                    1096
                ],
                "skipna": [
                    1097,
                    1115,
                    1132
                ],
                "self._bool_agg": [
                    1115,
                    1132
                ],
                "self._cython_agg_general": [
                    1354,
                    1269,
                    1198,
                    1223
                ],
                "mean": [
                    1200
                ],
                "median": [
                    1225
                ],
                "np.sqrt": [
                    1248,
                    1295
                ],
                "self.var": [
                    1248
                ],
                "ddof": [
                    1248,
                    1295,
                    1268,
                    1270,
                    1273
                ],
                "var": [
                    1270
                ],
                "x.var": [
                    1273
                ],
                "self._python_agg_general": [
                    1275
                ],
                "self.std": [
                    1295
                ],
                "self.count": [
                    1295
                ],
                "self.grouper.size": [
                    1308
                ],
                "self.obj.name": [
                    1311
                ],
                "self._reindex_output": [
                    1312,
                    1765
                ],
                "_local_template": [
                    1328,
                    1348
                ],
                "alias": [
                    1355
                ],
                "npfunc": [
                    1356,
                    1373
                ],
                "self.aggregate": [
                    1373
                ],
                "set_function_name": [
                    1376
                ],
                "cls": [
                    1376,
                    1409,
                    1410,
                    1408,
                    1411,
                    1412,
                    1407
                ],
                "x.to_numpy": [
                    1396,
                    1382
                ],
                "notna": [
                    1384,
                    1397
                ],
                "np.nan": [
                    1386,
                    1815,
                    1399
                ],
                "x.apply": [
                    1403,
                    1390
                ],
                "first": [
                    1392,
                    1390
                ],
                "last": [
                    1403,
                    1405
                ],
                "cls.sum": [
                    1407
                ],
                "groupby_function": [
                    1408,
                    1409,
                    1410,
                    1411,
                    1412,
                    1407
                ],
                "np.sum": [
                    1407
                ],
                "cls.prod": [
                    1408
                ],
                "np.prod": [
                    1408
                ],
                "cls.min": [
                    1409
                ],
                "np.min": [
                    1409
                ],
                "cls.max": [
                    1410
                ],
                "np.max": [
                    1410
                ],
                "cls.first": [
                    1411
                ],
                "first_compat": [
                    1411
                ],
                "cls.last": [
                    1412
                ],
                "last_compat": [
                    1412
                ],
                "self._apply_to_column_groupbys": [
                    1427
                ],
                "x._cython_agg_general": [
                    1427
                ],
                "x.describe": [
                    1432
                ],
                "result.unstack": [
                    1435
                ],
                "doc": [
                    1429,
                    2518
                ],
                "DataFrame.describe": [
                    1429
                ],
                "get_resampler_for_grouping": [
                    1545
                ],
                "rule": [
                    1545
                ],
                "RollingGroupby": [
                    1555
                ],
                "ExpandingGroupby": [
                    1566
                ],
                "limit": [
                    1601,
                    2347,
                    2354,
                    2355,
                    1652,
                    1592,
                    1593,
                    1626
                ],
                "direction": [
                    1600
                ],
                "self._fill": [
                    1626,
                    1652
                ],
                "ffill": [
                    1628
                ],
                "pad": [
                    1628
                ],
                "bfill": [
                    1654
                ],
                "backfill": [
                    1654
                ],
                "valid_containers": [
                    1769,
                    1740,
                    1732,
                    1733
                ],
                "nth_values": [
                    1739,
                    1741,
                    1743
                ],
                "nth_array": [
                    1746,
                    1747,
                    1743
                ],
                "mask_left": [
                    1746,
                    1748
                ],
                "np.in1d": [
                    1746,
                    1747
                ],
                "self._cumcount_array": [
                    2061,
                    1746,
                    1747,
                    2391,
                    2425
                ],
                "mask_right": [
                    1747,
                    1748
                ],
                "result_index": [
                    1760,
                    1762,
                    1763,
                    1759
                ],
                "out.index": [
                    1760
                ],
                "CategoricalIndex": [
                    1762,
                    2467
                ],
                "out.reindex": [
                    1763
                ],
                "out.sort_index": [
                    1766
                ],
                "max_len": [
                    1811,
                    1782
                ],
                "dropped": [
                    1792,
                    1801,
                    1809,
                    1783,
                    1818
                ],
                "self.obj.dropna": [
                    1783
                ],
                "self.grouper.axis": [
                    1791
                ],
                "axis.isin": [
                    1792
                ],
                "dropped.index": [
                    1792
                ],
                "grb": [
                    1809,
                    1810
                ],
                "dropped.groupby": [
                    1809
                ],
                "sizes": [
                    1810,
                    1811
                ],
                "grb.size": [
                    1810
                ],
                "grb.nth": [
                    1810
                ],
                "mask.any": [
                    1814
                ],
                "result.loc": [
                    1815
                ],
                "is_integer_dtype": [
                    1882,
                    1870
                ],
                "is_datetime64_dtype": [
                    1872
                ],
                "np.asarray": [
                    1874
                ],
                "np.float": [
                    1874
                ],
                "interpolation": [
                    1912,
                    1899,
                    1883
                ],
                "is_scalar": [
                    1889
                ],
                "q": [
                    1889,
                    1898,
                    1937,
                    1914,
                    1916
                ],
                "np.float64": [
                    1908,
                    1895
                ],
                "pre_processor": [
                    1896,
                    1909
                ],
                "post_processor": [
                    1897,
                    1910
                ],
                "results": [
                    1916,
                    1902
                ],
                "qi": [
                    1914,
                    1911
                ],
                "order": [
                    1922,
                    1931,
                    1934
                ],
                "result.index.nlevels": [
                    1922
                ],
                "index_names": [
                    1928,
                    1925,
                    1934
                ],
                "result.index.names": [
                    1928,
                    1925,
                    1934
                ],
                "result.reorder_levels": [
                    1931
                ],
                "T.flatten": [
                    1937
                ],
                "reshape": [
                    1937
                ],
                "self.ngroups": [
                    1937,
                    2004
                ],
                "cumcounts": [
                    2061,
                    2062
                ],
                "na_option": [
                    2100,
                    2108
                ],
                "self._cython_transform": [
                    2158,
                    2127,
                    2103,
                    2173,
                    2143
                ],
                "method": [
                    2106
                ],
                "pct": [
                    2109
                ],
                "nv.validate_groupby_func": [
                    2139,
                    2123
                ],
                "nv": [
                    2139,
                    2123
                ],
                "x.cumprod": [
                    2125
                ],
                "x.cumsum": [
                    2141
                ],
                "np.minimum.accumulate": [
                    2156
                ],
                "np.minimum": [
                    2156
                ],
                "np.maximum.accumulate": [
                    2171
                ],
                "np.maximum": [
                    2171
                ],
                "result_is_index": [
                    2275,
                    2228
                ],
                "aggregate": [
                    2251,
                    2228,
                    2284
                ],
                "post_processing": [
                    2278,
                    2230,
                    2279
                ],
                "pre_processing": [
                    2231,
                    2262,
                    2263,
                    2233,
                    2234
                ],
                "needs_values": [
                    2260,
                    2236
                ],
                "labels": [
                    2257,
                    2243
                ],
                "grouper.group_info": [
                    2243
                ],
                "base_func": [
                    2257,
                    2245
                ],
                "libgroupby": [
                    2245
                ],
                "result_sz": [
                    2256,
                    2252,
                    2254
                ],
                "np.zeros": [
                    2256
                ],
                "cython_dtype": [
                    2256
                ],
                "partial": [
                    2264,
                    2257,
                    2268,
                    2271
                ],
                "inferences": [
                    2258,
                    2279,
                    2263
                ],
                "needs_mask": [
                    2266
                ],
                "view": [
                    2267
                ],
                "isna": [
                    2320,
                    2267
                ],
                "needs_ngroups": [
                    2270
                ],
                "algorithms.take_nd": [
                    2276
                ],
                "freq": [
                    2342,
                    2348,
                    2320,
                    2321,
                    2357
                ],
                "fill_value": [
                    2320,
                    2321,
                    2481,
                    2505
                ],
                "x.shift": [
                    2321
                ],
                "periods": [
                    2328,
                    2321,
                    2357,
                    2345
                ],
                "x.pct_change": [
                    2344
                ],
                "fill_method": [
                    2352,
                    2353,
                    2346,
                    2355
                ],
                "filled": [
                    2355,
                    2356,
                    2358
                ],
                "fill_grp": [
                    2356,
                    2357
                ],
                "filled.groupby": [
                    2356
                ],
                "self.grouper.codes": [
                    2356
                ],
                "shifted": [
                    2357,
                    2358
                ],
                "fill_grp.shift": [
                    2357
                ],
                "self._reset_group_selection": [
                    2424,
                    2390
                ],
                "Scalar": [
                    2429
                ],
                "np.NaN": [
                    2429
                ],
                "groupings": [
                    2497,
                    2468,
                    2472,
                    2454,
                    2455,
                    2457
                ],
                "self.grouper.groupings": [
                    2454
                ],
                "ping.grouper": [
                    2467
                ],
                "ping": [
                    2472,
                    2497,
                    2467,
                    2468
                ],
                "Categorical": [
                    2467
                ],
                "levels_list": [
                    2472,
                    2474
                ],
                "ping.group_index": [
                    2472
                ],
                "sortlevel": [
                    2473
                ],
                "MultiIndex.from_product": [
                    2473
                ],
                "MultiIndex": [
                    2473
                ],
                "d": [
                    2483,
                    2478
                ],
                "self.obj._get_axis_name": [
                    2479
                ],
                "output.reindex": [
                    2483
                ],
                "in_axis_grps": [
                    2496,
                    2499
                ],
                "i": [
                    2497
                ],
                "ping.name": [
                    2497
                ],
                "ping.in_axis": [
                    2497
                ],
                "g_nums": [
                    2499,
                    2510
                ],
                "g_names": [
                    2499,
                    2501
                ],
                "output.drop": [
                    2501
                ],
                "reindex": [
                    2504
                ],
                "output.set_index": [
                    2504
                ],
                "output.reset_index": [
                    2512,
                    2510
                ],
                "GroupBy._add_numeric_operations": [
                    2515
                ],
                "GroupBy": [
                    2515,
                    2533,
                    2518,
                    2535
                ],
                "klass": [
                    2543,
                    2539,
                    2547,
                    2535
                ],
                "SeriesGroupBy": [
                    2539
                ],
                "DataFrameGroupBy": [
                    2543
                ],
                "by": [
                    2549
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_31/pandas/tests/groupby/test_function.py",
                "test_function": "test_groupby_quantile_nullable_array",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n        pd.array([True, False, None] * 2, dtype=\"boolean\"),\n    ],\n)\n@pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\ndef test_groupby_quantile_nullable_array(values, q):\n    # https://github.com/pandas-dev/pandas/issues/33136\n    df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n    result = df.groupby(\"a\")[\"b\"].quantile(q)\n\n    if isinstance(q, list):\n        idx = pd.MultiIndex.from_product(([\"x\", \"y\"], q), names=[\"a\", None])\n        true_quantiles = [0.0, 0.5, 1.0]\n    else:\n        idx = pd.Index([\"x\", \"y\"], name=\"a\")\n        true_quantiles = [0.5]\n\n    expected = pd.Series(true_quantiles * 2, index=idx, name=\"b\")\n    tm.assert_series_equal(result, expected)",
                "test_error": "TypeError: No matching signature found",
                "full_test_error": "values = <IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64\nq = 0.5\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n            pd.array([True, False, None] * 2, dtype=\"boolean\"),\n        ],\n    )\n    @pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\n    def test_groupby_quantile_nullable_array(values, q):\n        # https://github.com/pandas-dev/pandas/issues/33136\n        df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n>       result = df.groupby(\"a\")[\"b\"].quantile(q)\n\npandas/tests/groupby/test_function.py:1533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1890: in quantile\n    return self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,\nE   TypeError: No matching signature found\n\npandas/_libs/groupby.pyx:719: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1890: in quantile\n    return self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,\nE   TypeError: No matching signature found\n\npandas/_libs/groupby.pyx:719: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [pd.array([1, 0, None] * 2, dtype='Int64'), pd.array([True, False, None] * 2, dtype='boolean')])",
                    "pytest.mark.parametrize('q', [0.5, [0.0, 0.5, 1.0]])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_31/pandas/tests/groupby/test_function.py",
                "test_function": "test_groupby_quantile_nullable_array",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n        pd.array([True, False, None] * 2, dtype=\"boolean\"),\n    ],\n)\n@pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\ndef test_groupby_quantile_nullable_array(values, q):\n    # https://github.com/pandas-dev/pandas/issues/33136\n    df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n    result = df.groupby(\"a\")[\"b\"].quantile(q)\n\n    if isinstance(q, list):\n        idx = pd.MultiIndex.from_product(([\"x\", \"y\"], q), names=[\"a\", None])\n        true_quantiles = [0.0, 0.5, 1.0]\n    else:\n        idx = pd.Index([\"x\", \"y\"], name=\"a\")\n        true_quantiles = [0.5]\n\n    expected = pd.Series(true_quantiles * 2, index=idx, name=\"b\")\n    tm.assert_series_equal(result, expected)",
                "test_error": "TypeError: No matching signature found",
                "full_test_error": "values = <BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean\nq = 0.5\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n            pd.array([True, False, None] * 2, dtype=\"boolean\"),\n        ],\n    )\n    @pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\n    def test_groupby_quantile_nullable_array(values, q):\n        # https://github.com/pandas-dev/pandas/issues/33136\n        df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n>       result = df.groupby(\"a\")[\"b\"].quantile(q)\n\npandas/tests/groupby/test_function.py:1533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1890: in quantile\n    return self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,\nE   TypeError: No matching signature found\n\npandas/_libs/groupby.pyx:719: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1890: in quantile\n    return self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,\nE   TypeError: No matching signature found\n\npandas/_libs/groupby.pyx:719: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [pd.array([1, 0, None] * 2, dtype='Int64'), pd.array([True, False, None] * 2, dtype='boolean')])",
                    "pytest.mark.parametrize('q', [0.5, [0.0, 0.5, 1.0]])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_31/pandas/tests/groupby/test_function.py",
                "test_function": "test_groupby_quantile_nullable_array",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n        pd.array([True, False, None] * 2, dtype=\"boolean\"),\n    ],\n)\n@pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\ndef test_groupby_quantile_nullable_array(values, q):\n    # https://github.com/pandas-dev/pandas/issues/33136\n    df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n    result = df.groupby(\"a\")[\"b\"].quantile(q)\n\n    if isinstance(q, list):\n        idx = pd.MultiIndex.from_product(([\"x\", \"y\"], q), names=[\"a\", None])\n        true_quantiles = [0.0, 0.5, 1.0]\n    else:\n        idx = pd.Index([\"x\", \"y\"], name=\"a\")\n        true_quantiles = [0.5]\n\n    expected = pd.Series(true_quantiles * 2, index=idx, name=\"b\")\n    tm.assert_series_equal(result, expected)",
                "test_error": "TypeError: No matching signature found",
                "full_test_error": "values = <IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64\nq = [0.0, 0.5, 1.0]\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n            pd.array([True, False, None] * 2, dtype=\"boolean\"),\n        ],\n    )\n    @pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\n    def test_groupby_quantile_nullable_array(values, q):\n        # https://github.com/pandas-dev/pandas/issues/33136\n        df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n>       result = df.groupby(\"a\")[\"b\"].quantile(q)\n\npandas/tests/groupby/test_function.py:1533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1902: in quantile\n    results = [\npandas/core/groupby/groupby.py:1903: in <listcomp>\n    self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,\nE   TypeError: No matching signature found\n\npandas/_libs/groupby.pyx:719: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1902: in quantile\n    results = [\npandas/core/groupby/groupby.py:1903: in <listcomp>\n    self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,\nE   TypeError: No matching signature found\n\npandas/_libs/groupby.pyx:719: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [pd.array([1, 0, None] * 2, dtype='Int64'), pd.array([True, False, None] * 2, dtype='boolean')])",
                    "pytest.mark.parametrize('q', [0.5, [0.0, 0.5, 1.0]])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_31/pandas/tests/groupby/test_function.py",
                "test_function": "test_groupby_quantile_nullable_array",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n        pd.array([True, False, None] * 2, dtype=\"boolean\"),\n    ],\n)\n@pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\ndef test_groupby_quantile_nullable_array(values, q):\n    # https://github.com/pandas-dev/pandas/issues/33136\n    df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n    result = df.groupby(\"a\")[\"b\"].quantile(q)\n\n    if isinstance(q, list):\n        idx = pd.MultiIndex.from_product(([\"x\", \"y\"], q), names=[\"a\", None])\n        true_quantiles = [0.0, 0.5, 1.0]\n    else:\n        idx = pd.Index([\"x\", \"y\"], name=\"a\")\n        true_quantiles = [0.5]\n\n    expected = pd.Series(true_quantiles * 2, index=idx, name=\"b\")\n    tm.assert_series_equal(result, expected)",
                "test_error": "TypeError: No matching signature found",
                "full_test_error": "values = <BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean\nq = [0.0, 0.5, 1.0]\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n            pd.array([True, False, None] * 2, dtype=\"boolean\"),\n        ],\n    )\n    @pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\n    def test_groupby_quantile_nullable_array(values, q):\n        # https://github.com/pandas-dev/pandas/issues/33136\n        df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n>       result = df.groupby(\"a\")[\"b\"].quantile(q)\n\npandas/tests/groupby/test_function.py:1533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1902: in quantile\n    results = [\npandas/core/groupby/groupby.py:1903: in <listcomp>\n    self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,\nE   TypeError: No matching signature found\n\npandas/_libs/groupby.pyx:719: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1902: in quantile\n    results = [\npandas/core/groupby/groupby.py:1903: in <listcomp>\n    self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,\nE   TypeError: No matching signature found\n\npandas/_libs/groupby.pyx:719: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [pd.array([1, 0, None] * 2, dtype='Int64'), pd.array([True, False, None] * 2, dtype='boolean')])",
                    "pytest.mark.parametrize('q', [0.5, [0.0, 0.5, 1.0]])"
                ]
            }
        ]
    }
}