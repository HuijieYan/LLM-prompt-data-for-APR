{
    "pandas:144": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_144/pandas/plotting/_matplotlib/core.py": {
            "buggy_functions": [
                {
                    "function_name": "_decorate_ticks",
                    "function_code": "def _decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge):\n    ax.set_xlim((start_edge, end_edge))\n    ax.set_xticks(self.tick_pos)\n    ax.set_xticklabels(ticklabels)\n    if name is not None and self.use_index:\n        ax.set_xlabel(name)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1436,
                    "end_line": 1441,
                    "variables": {
                        "ax.set_xlim": [
                            1437
                        ],
                        "ax": [
                            1441,
                            1437,
                            1438,
                            1439
                        ],
                        "start_edge": [
                            1437
                        ],
                        "end_edge": [
                            1437
                        ],
                        "ax.set_xticks": [
                            1438
                        ],
                        "self.tick_pos": [
                            1438
                        ],
                        "self": [
                            1440,
                            1438
                        ],
                        "ax.set_xticklabels": [
                            1439
                        ],
                        "ticklabels": [
                            1439
                        ],
                        "name": [
                            1440,
                            1441
                        ],
                        "self.use_index": [
                            1440
                        ],
                        "ax.set_xlabel": [
                            1441
                        ]
                    },
                    "filtered_variables": {
                        "ax.set_xlim": [
                            1437
                        ],
                        "ax": [
                            1441,
                            1437,
                            1438,
                            1439
                        ],
                        "start_edge": [
                            1437
                        ],
                        "end_edge": [
                            1437
                        ],
                        "ax.set_xticks": [
                            1438
                        ],
                        "self.tick_pos": [
                            1438
                        ],
                        "self": [
                            1440,
                            1438
                        ],
                        "ax.set_xticklabels": [
                            1439
                        ],
                        "ticklabels": [
                            1439
                        ],
                        "name": [
                            1440,
                            1441
                        ],
                        "self.use_index": [
                            1440
                        ],
                        "ax.set_xlabel": [
                            1441
                        ]
                    },
                    "diff_line_number": 1438,
                    "class_data": {
                        "signature": "class BarPlot(MPLPlot)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, data, **kwargs):\n    self._is_series = isinstance(data, ABCSeries)\n    self.bar_width = kwargs.pop('width', 0.5)\n    pos = kwargs.pop('position', 0.5)\n    kwargs.setdefault('align', 'center')\n    self.tick_pos = np.arange(len(data))\n    self.bottom = kwargs.pop('bottom', 0)\n    self.left = kwargs.pop('left', 0)\n    self.log = kwargs.pop('log', False)\n    MPLPlot.__init__(self, data, **kwargs)\n    if self.stacked or self.subplots:\n        self.tickoffset = self.bar_width * pos\n        if kwargs['align'] == 'edge':\n            self.lim_offset = self.bar_width / 2\n        else:\n            self.lim_offset = 0\n    elif kwargs['align'] == 'edge':\n        w = self.bar_width / self.nseries\n        self.tickoffset = self.bar_width * (pos - 0.5) + w * 0.5\n        self.lim_offset = w * 0.5\n    else:\n        self.tickoffset = self.bar_width * pos\n        self.lim_offset = 0\n    self.ax_pos = self.tick_pos - self.tickoffset",
                            "def _args_adjust(self):\n    if is_list_like(self.bottom):\n        self.bottom = np.array(self.bottom)\n    if is_list_like(self.left):\n        self.left = np.array(self.left)",
                            "@classmethod\ndef _plot(cls, ax, x, y, w, start=0, log=False, **kwds):\n    return ax.bar(x, y, w, bottom=start, log=log, **kwds)",
                            "@property\ndef _start_base(self):\n    return self.bottom",
                            "def _make_plot(self):\n    import matplotlib as mpl\n    colors = self._get_colors()\n    ncolors = len(colors)\n    pos_prior = neg_prior = np.zeros(len(self.data))\n    K = self.nseries\n    for (i, (label, y)) in enumerate(self._iter_data(fillna=0)):\n        ax = self._get_ax(i)\n        kwds = self.kwds.copy()\n        if self._is_series:\n            kwds['color'] = colors\n        else:\n            kwds['color'] = colors[i % ncolors]\n        errors = self._get_errorbars(label=label, index=i)\n        kwds = dict(kwds, **errors)\n        label = pprint_thing(label)\n        if ('yerr' in kwds or 'xerr' in kwds) and kwds.get('ecolor') is None:\n            kwds['ecolor'] = mpl.rcParams['xtick.color']\n        start = 0\n        if self.log and (y >= 1).all():\n            start = 1\n        start = start + self._start_base\n        if self.subplots:\n            w = self.bar_width / 2\n            rect = self._plot(ax, self.ax_pos + w, y, self.bar_width, start=start, label=label, log=self.log, **kwds)\n            ax.set_title(label)\n        elif self.stacked:\n            mask = y > 0\n            start = np.where(mask, pos_prior, neg_prior) + self._start_base\n            w = self.bar_width / 2\n            rect = self._plot(ax, self.ax_pos + w, y, self.bar_width, start=start, label=label, log=self.log, **kwds)\n            pos_prior = pos_prior + np.where(mask, y, 0)\n            neg_prior = neg_prior + np.where(mask, 0, y)\n        else:\n            w = self.bar_width / K\n            rect = self._plot(ax, self.ax_pos + (i + 0.5) * w, y, w, start=start, label=label, log=self.log, **kwds)\n        self._add_legend_handle(rect, label, index=i)",
                            "def _post_plot_logic(self, ax, data):\n    if self.use_index:\n        str_index = [pprint_thing(key) for key in data.index]\n    else:\n        str_index = [pprint_thing(key) for key in range(data.shape[0])]\n    name = self._get_index_name()\n    s_edge = self.ax_pos[0] - 0.25 + self.lim_offset\n    e_edge = self.ax_pos[-1] + 0.25 + self.bar_width + self.lim_offset\n    self._decorate_ticks(ax, name, str_index, s_edge, e_edge)",
                            "def _decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge):\n    ax.set_xlim((start_edge, end_edge))\n    ax.set_xticks(self.tick_pos)\n    ax.set_xticklabels(ticklabels)\n    if name is not None and self.use_index:\n        ax.set_xlabel(name)"
                        ],
                        "constructor_variables": [
                            "self._is_series = isinstance(data, ABCSeries)",
                            "self.bar_width = kwargs.pop('width', 0.5)",
                            "self.tick_pos = np.arange(len(data))",
                            "self.bottom = kwargs.pop('bottom', 0)",
                            "self.left = kwargs.pop('left', 0)",
                            "self.log = kwargs.pop('log', False)",
                            "self.tickoffset = self.bar_width * pos",
                            "self.lim_offset = self.bar_width / 2",
                            "self.lim_offset = 0",
                            "self.tickoffset = self.bar_width * (pos - 0.5) + w * 0.5",
                            "self.lim_offset = w * 0.5",
                            "self.tickoffset = self.bar_width * pos",
                            "self.lim_offset = 0",
                            "self.ax_pos = self.tick_pos - self.tickoffset"
                        ],
                        "class_level_variables": [
                            "_kind = 'bar'",
                            "_default_rot = 90",
                            "orientation = 'vertical'"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, data, **kwargs)",
                            "_args_adjust(self)",
                            "_plot(cls, ax, x, y, w, start=0, log=False, **kwds)",
                            "_start_base(self)",
                            "_make_plot(self)",
                            "_post_plot_logic(self, ax, data)",
                            "_decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge)"
                        ],
                        "class_level_variable_names": [
                            "_kind",
                            "_default_rot",
                            "orientation"
                        ],
                        "constructor_variable_names": [
                            "tickoffset",
                            "w",
                            "lim_offset",
                            "ax_pos",
                            "bar_width",
                            "_is_series",
                            "log",
                            "tick_pos",
                            "left",
                            "pos",
                            "bottom"
                        ]
                    },
                    "used_imports": [],
                    "variable_values": [
                        [
                            {
                                "ax.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "start_edge": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "end_edge": {
                                    "variable_value": "9.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "ax.set_xticks": {
                                    "variable_value": "<bound method _AxesBase.set_xticks of <matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.tick_pos": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.plotting._matplotlib.core.BarPlot object at 0x7f4029ff77c0>",
                                    "variable_type": "BarPlot",
                                    "variable_shape": null
                                },
                                "ax.set_xticklabels": {
                                    "variable_value": "<bound method _AxesBase.set_xticklabels of <matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ticklabels": {
                                    "variable_value": "['P00', 'P01', 'P02', 'P03', 'P04', 'P05', 'P06', 'P07', 'P08', 'P09']",
                                    "variable_type": "list",
                                    "variable_shape": "10"
                                },
                                "name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.use_index": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ax.set_xlabel": {
                                    "variable_value": "<bound method Axes.set_xlabel of <matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "ax.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "start_edge": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "end_edge": {
                                    "variable_value": "9.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "ax.set_xticks": {
                                    "variable_value": "<bound method _AxesBase.set_xticks of <matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.tick_pos": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.plotting._matplotlib.core.BarPlot object at 0x7f4029ff77c0>",
                                    "variable_type": "BarPlot",
                                    "variable_shape": null
                                },
                                "ax.set_xticklabels": {
                                    "variable_value": "<bound method _AxesBase.set_xticklabels of <matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ticklabels": {
                                    "variable_value": "['P00', 'P01', 'P02', 'P03', 'P04', 'P05', 'P06', 'P07', 'P08', 'P09']",
                                    "variable_type": "list",
                                    "variable_shape": "10"
                                },
                                "name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.use_index": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ax.set_xlabel": {
                                    "variable_value": "<bound method Axes.set_xlabel of <matplotlib.axes._subplots.AxesSubplot object at 0x7f4029fae160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "ax.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "start_edge": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "end_edge": {
                                    "variable_value": "9.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self.xticks": {
                                    "variable_value": "range(0, 11, 2)",
                                    "variable_type": "range",
                                    "variable_shape": "6"
                                },
                                "self": {
                                    "variable_value": "<pandas.plotting._matplotlib.core.BarPlot object at 0x7f6cce6ad040>",
                                    "variable_type": "BarPlot",
                                    "variable_shape": null
                                },
                                "ax.set_xticks": {
                                    "variable_value": "<bound method _AxesBase.set_xticks of <matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tick_pos": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "ax.set_xticklabels": {
                                    "variable_value": "<bound method _AxesBase.set_xticklabels of <matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ticklabels": {
                                    "variable_value": "['P00', 'P01', 'P02', 'P03', 'P04', 'P05', 'P06', 'P07', 'P08', 'P09']",
                                    "variable_type": "list",
                                    "variable_shape": "10"
                                },
                                "name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.use_index": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ax.set_xlabel": {
                                    "variable_value": "<bound method Axes.set_xlabel of <matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "ax.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "start_edge": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "end_edge": {
                                    "variable_value": "9.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self.xticks": {
                                    "variable_value": "range(0, 11, 2)",
                                    "variable_type": "range",
                                    "variable_shape": "6"
                                },
                                "self": {
                                    "variable_value": "<pandas.plotting._matplotlib.core.BarPlot object at 0x7f6cce6ad040>",
                                    "variable_type": "BarPlot",
                                    "variable_shape": null
                                },
                                "ax.set_xticks": {
                                    "variable_value": "<bound method _AxesBase.set_xticks of <matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tick_pos": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "ax.set_xticklabels": {
                                    "variable_value": "<bound method _AxesBase.set_xticklabels of <matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ticklabels": {
                                    "variable_value": "['P00', 'P01', 'P02', 'P03', 'P04', 'P05', 'P06', 'P07', 'P08', 'P09']",
                                    "variable_type": "list",
                                    "variable_shape": "10"
                                },
                                "name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.use_index": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ax.set_xlabel": {
                                    "variable_value": "<bound method Axes.set_xlabel of <matplotlib.axes._subplots.AxesSubplot object at 0x7f6cce74d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@property\ndef _kind(self):\n    \"\"\"Specify kind str. Must be overridden in child class\"\"\"\n    raise NotImplementedError",
                "def __init__(\n    self,\n    data,\n    kind=None,\n    by=None,\n    subplots=False,\n    sharex=None,\n    sharey=False,\n    use_index=True,\n    figsize=None,\n    grid=None,\n    legend=True,\n    rot=None,\n    ax=None,\n    fig=None,\n    title=None,\n    xlim=None,\n    ylim=None,\n    xticks=None,\n    yticks=None,\n    sort_columns=False,\n    fontsize=None,\n    secondary_y=False,\n    colormap=None,\n    table=False,\n    layout=None,\n    include_bool=False,\n    **kwds\n):\n\n    import matplotlib.pyplot as plt\n\n    converter._WARN = False  # no warning for pandas plots\n    self.data = data\n    self.by = by\n\n    self.kind = kind\n\n    self.sort_columns = sort_columns\n\n    self.subplots = subplots\n\n    if sharex is None:\n        if ax is None:\n            self.sharex = True\n        else:\n            # if we get an axis, the users should do the visibility\n            # setting...\n            self.sharex = False\n    else:\n        self.sharex = sharex\n\n    self.sharey = sharey\n    self.figsize = figsize\n    self.layout = layout\n\n    self.xticks = xticks\n    self.yticks = yticks\n    self.xlim = xlim\n    self.ylim = ylim\n    self.title = title\n    self.use_index = use_index\n\n    self.fontsize = fontsize\n\n    if rot is not None:\n        self.rot = rot\n        # need to know for format_date_labels since it's rotated to 30 by\n        # default\n        self._rot_set = True\n    else:\n        self._rot_set = False\n        self.rot = self._default_rot\n\n    if grid is None:\n        grid = False if secondary_y else plt.rcParams[\"axes.grid\"]\n\n    self.grid = grid\n    self.legend = legend\n    self.legend_handles = []\n    self.legend_labels = []\n\n    for attr in self._pop_attributes:\n        value = kwds.pop(attr, self._attr_defaults.get(attr, None))\n        setattr(self, attr, value)\n\n    self.ax = ax\n    self.fig = fig\n    self.axes = None\n\n    # parse errorbar input if given\n    xerr = kwds.pop(\"xerr\", None)\n    yerr = kwds.pop(\"yerr\", None)\n    self.errors = {\n        kw: self._parse_errorbars(kw, err)\n        for kw, err in zip([\"xerr\", \"yerr\"], [xerr, yerr])\n    }\n\n    if not isinstance(secondary_y, (bool, tuple, list, np.ndarray, ABCIndexClass)):\n        secondary_y = [secondary_y]\n    self.secondary_y = secondary_y\n\n    # ugly TypeError if user passes matplotlib's `cmap` name.\n    # Probably better to accept either.\n    if \"cmap\" in kwds and colormap:\n        raise TypeError(\"Only specify one of `cmap` and `colormap`.\")\n    elif \"cmap\" in kwds:\n        self.colormap = kwds.pop(\"cmap\")\n    else:\n        self.colormap = colormap\n\n    self.table = table\n    self.include_bool = include_bool\n\n    self.kwds = kwds\n\n    self._validate_color_args()",
                "def _validate_color_args(self):\n    if \"color\" not in self.kwds and \"colors\" in self.kwds:\n        warnings.warn(\n            (\n                \"'colors' is being deprecated. Please use 'color'\"\n                \"instead of 'colors'\"\n            )\n        )\n        colors = self.kwds.pop(\"colors\")\n        self.kwds[\"color\"] = colors\n\n    if (\n        \"color\" in self.kwds\n        and self.nseries == 1\n        and not is_list_like(self.kwds[\"color\"])\n    ):\n        # support series.plot(color='green')\n        self.kwds[\"color\"] = [self.kwds[\"color\"]]\n\n    if (\n        \"color\" in self.kwds\n        and isinstance(self.kwds[\"color\"], tuple)\n        and self.nseries == 1\n        and len(self.kwds[\"color\"]) in (3, 4)\n    ):\n        # support RGB and RGBA tuples in series plot\n        self.kwds[\"color\"] = [self.kwds[\"color\"]]\n\n    if (\n        \"color\" in self.kwds or \"colors\" in self.kwds\n    ) and self.colormap is not None:\n        warnings.warn(\n            \"'color' and 'colormap' cannot be used \" \"simultaneously. Using 'color'\"\n        )\n\n    if \"color\" in self.kwds and self.style is not None:\n        if is_list_like(self.style):\n            styles = self.style\n        else:\n            styles = [self.style]\n        # need only a single match\n        for s in styles:\n            if re.match(\"^[a-z]+?\", s) is not None:\n                raise ValueError(\n                    \"Cannot pass 'style' string with a color \"\n                    \"symbol and 'color' keyword argument. Please\"\n                    \" use one or the other or pass 'style' \"\n                    \"without a color symbol\"\n                )",
                "def _iter_data(self, data=None, keep_index=False, fillna=None):\n    if data is None:\n        data = self.data\n    if fillna is not None:\n        data = data.fillna(fillna)\n\n    # TODO: unused?\n    # if self.sort_columns:\n    #     columns = com.try_sort(data.columns)\n    # else:\n    #     columns = data.columns\n\n    for col, values in data.items():\n        if keep_index is True:\n            yield col, values\n        else:\n            yield col, values.values",
                "@property\ndef nseries(self):\n    if self.data.ndim == 1:\n        return 1\n    else:\n        return self.data.shape[1]",
                "def draw(self):\n    self.plt.draw_if_interactive()",
                "def generate(self):\n    self._args_adjust()\n    self._compute_plot_data()\n    self._setup_subplots()\n    self._make_plot()\n    self._add_table()\n    self._make_legend()\n    self._adorn_subplots()\n\n    for ax in self.axes:\n        self._post_plot_logic_common(ax, self.data)\n        self._post_plot_logic(ax, self.data)",
                "def _args_adjust(self):\n    pass",
                "def _has_plotted_object(self, ax):\n    \"\"\"check whether ax has data\"\"\"\n    return len(ax.lines) != 0 or len(ax.artists) != 0 or len(ax.containers) != 0",
                "def _maybe_right_yaxis(self, ax, axes_num):\n    if not self.on_right(axes_num):\n        # secondary axes may be passed via ax kw\n        return self._get_ax_layer(ax)\n\n    if hasattr(ax, \"right_ax\"):\n        # if it has right_ax proparty, ``ax`` must be left axes\n        return ax.right_ax\n    elif hasattr(ax, \"left_ax\"):\n        # if it has left_ax proparty, ``ax`` must be right axes\n        return ax\n    else:\n        # otherwise, create twin axes\n        orig_ax, new_ax = ax, ax.twinx()\n        # TODO: use Matplotlib public API when available\n        new_ax._get_lines = orig_ax._get_lines\n        new_ax._get_patches_for_fill = orig_ax._get_patches_for_fill\n        orig_ax.right_ax, new_ax.left_ax = new_ax, orig_ax\n\n        if not self._has_plotted_object(orig_ax):  # no data on left y\n            orig_ax.get_yaxis().set_visible(False)\n\n        if self.logy is True or self.loglog is True:\n            new_ax.set_yscale(\"log\")\n        elif self.logy == \"sym\" or self.loglog == \"sym\":\n            new_ax.set_yscale(\"symlog\")\n        return new_ax",
                "def _setup_subplots(self):\n    if self.subplots:\n        fig, axes = _subplots(\n            naxes=self.nseries,\n            sharex=self.sharex,\n            sharey=self.sharey,\n            figsize=self.figsize,\n            ax=self.ax,\n            layout=self.layout,\n            layout_type=self._layout_type,\n        )\n    else:\n        if self.ax is None:\n            fig = self.plt.figure(figsize=self.figsize)\n            axes = fig.add_subplot(111)\n        else:\n            fig = self.ax.get_figure()\n            if self.figsize is not None:\n                fig.set_size_inches(self.figsize)\n            axes = self.ax\n\n    axes = _flatten(axes)\n\n    valid_log = {False, True, \"sym\", None}\n    input_log = {self.logx, self.logy, self.loglog}\n    if input_log - valid_log:\n        invalid_log = next(iter((input_log - valid_log)))\n        raise ValueError(\n            \"Boolean, None and 'sym' are valid options,\"\n            \" '{}' is given.\".format(invalid_log)\n        )\n\n    if self.logx is True or self.loglog is True:\n        [a.set_xscale(\"log\") for a in axes]\n    elif self.logx == \"sym\" or self.loglog == \"sym\":\n        [a.set_xscale(\"symlog\") for a in axes]\n\n    if self.logy is True or self.loglog is True:\n        [a.set_yscale(\"log\") for a in axes]\n    elif self.logy == \"sym\" or self.loglog == \"sym\":\n        [a.set_yscale(\"symlog\") for a in axes]\n\n    self.fig = fig\n    self.axes = axes",
                "@property\ndef result(self):\n    \"\"\"\n    Return result axes\n    \"\"\"\n    if self.subplots:\n        if self.layout is not None and not is_list_like(self.ax):\n            return self.axes.reshape(*self.layout)\n        else:\n            return self.axes\n    else:\n        sec_true = isinstance(self.secondary_y, bool) and self.secondary_y\n        all_sec = (\n            is_list_like(self.secondary_y) and len(self.secondary_y) == self.nseries\n        )\n        if sec_true or all_sec:\n            # if all data is plotted on secondary, return right axes\n            return self._get_ax_layer(self.axes[0], primary=False)\n        else:\n            return self.axes[0]",
                "def _compute_plot_data(self):\n    data = self.data\n\n    if isinstance(data, ABCSeries):\n        label = self.label\n        if label is None and data.name is None:\n            label = \"None\"\n        data = data.to_frame(name=label)\n\n    # GH16953, _convert is needed as fallback, for ``Series``\n    # with ``dtype == object``\n    data = data._convert(datetime=True, timedelta=True)\n    include_type = [np.number, \"datetime\", \"datetimetz\", \"timedelta\"]\n\n    # GH23719, allow plotting boolean\n    if self.include_bool is True:\n        include_type.append(np.bool_)\n\n    # GH22799, exclude datatime-like type for boxplot\n    exclude_type = None\n    if self._kind == \"box\":\n        # TODO: change after solving issue 27881\n        include_type = [np.number]\n        exclude_type = [\"timedelta\"]\n\n    numeric_data = data.select_dtypes(include=include_type, exclude=exclude_type)\n\n    try:\n        is_empty = numeric_data.columns.empty\n    except AttributeError:\n        is_empty = not len(numeric_data)\n\n    # no non-numeric frames or series allowed\n    if is_empty:\n        raise TypeError(\"no numeric data to plot\")\n\n    # GH25587: cast ExtensionArray of pandas (IntegerArray, etc.) to\n    # np.ndarray before plot.\n    numeric_data = numeric_data.copy()\n    for col in numeric_data:\n        numeric_data[col] = np.asarray(numeric_data[col])\n\n    self.data = numeric_data",
                "def _make_plot(self):\n    raise AbstractMethodError(self)",
                "def _add_table(self):\n    if self.table is False:\n        return\n    elif self.table is True:\n        data = self.data.transpose()\n    else:\n        data = self.table\n    ax = self._get_ax(0)\n    table(ax, data)",
                "def _post_plot_logic_common(self, ax, data):\n    \"\"\"Common post process for each axes\"\"\"\n\n    if self.orientation == \"vertical\" or self.orientation is None:\n        self._apply_axis_properties(ax.xaxis, rot=self.rot, fontsize=self.fontsize)\n        self._apply_axis_properties(ax.yaxis, fontsize=self.fontsize)\n\n        if hasattr(ax, \"right_ax\"):\n            self._apply_axis_properties(ax.right_ax.yaxis, fontsize=self.fontsize)\n\n    elif self.orientation == \"horizontal\":\n        self._apply_axis_properties(ax.yaxis, rot=self.rot, fontsize=self.fontsize)\n        self._apply_axis_properties(ax.xaxis, fontsize=self.fontsize)\n\n        if hasattr(ax, \"right_ax\"):\n            self._apply_axis_properties(ax.right_ax.yaxis, fontsize=self.fontsize)\n    else:  # pragma no cover\n        raise ValueError",
                "def _post_plot_logic(self, ax, data):\n    \"\"\"Post process for each axes. Overridden in child classes\"\"\"\n    pass",
                "def _adorn_subplots(self):\n    \"\"\"Common post process unrelated to data\"\"\"\n    if len(self.axes) > 0:\n        all_axes = self._get_subplots()\n        nrows, ncols = self._get_axes_layout()\n        _handle_shared_axes(\n            axarr=all_axes,\n            nplots=len(all_axes),\n            naxes=nrows * ncols,\n            nrows=nrows,\n            ncols=ncols,\n            sharex=self.sharex,\n            sharey=self.sharey,\n        )\n\n    for ax in self.axes:\n        if self.yticks is not None:\n            ax.set_yticks(self.yticks)\n\n        if self.xticks is not None:\n            ax.set_xticks(self.xticks)\n\n        if self.ylim is not None:\n            ax.set_ylim(self.ylim)\n\n        if self.xlim is not None:\n            ax.set_xlim(self.xlim)\n\n        ax.grid(self.grid)\n\n    if self.title:\n        if self.subplots:\n            if is_list_like(self.title):\n                if len(self.title) != self.nseries:\n                    msg = (\n                        \"The length of `title` must equal the number \"\n                        \"of columns if using `title` of type `list` \"\n                        \"and `subplots=True`.\\n\"\n                        \"length of title = {}\\n\"\n                        \"number of columns = {}\"\n                    ).format(len(self.title), self.nseries)\n                    raise ValueError(msg)\n\n                for (ax, title) in zip(self.axes, self.title):\n                    ax.set_title(title)\n            else:\n                self.fig.suptitle(self.title)\n        else:\n            if is_list_like(self.title):\n                msg = (\n                    \"Using `title` of type `list` is not supported \"\n                    \"unless `subplots=True` is passed\"\n                )\n                raise ValueError(msg)\n            self.axes[0].set_title(self.title)",
                "def _apply_axis_properties(self, axis, rot=None, fontsize=None):\n    \"\"\" Tick creation within matplotlib is reasonably expensive and is\n        internally deferred until accessed as Ticks are created/destroyed\n        multiple times per draw. It's therefore beneficial for us to avoid\n        accessing unless we will act on the Tick.\n    \"\"\"\n\n    if rot is not None or fontsize is not None:\n        # rot=0 is a valid setting, hence the explicit None check\n        labels = axis.get_majorticklabels() + axis.get_minorticklabels()\n        for label in labels:\n            if rot is not None:\n                label.set_rotation(rot)\n            if fontsize is not None:\n                label.set_fontsize(fontsize)",
                "@property\ndef legend_title(self):\n    if not isinstance(self.data.columns, ABCMultiIndex):\n        name = self.data.columns.name\n        if name is not None:\n            name = pprint_thing(name)\n        return name\n    else:\n        stringified = map(pprint_thing, self.data.columns.names)\n        return \",\".join(stringified)",
                "def _add_legend_handle(self, handle, label, index=None):\n    if label is not None:\n        if self.mark_right and index is not None:\n            if self.on_right(index):\n                label = label + \" (right)\"\n        self.legend_handles.append(handle)\n        self.legend_labels.append(label)",
                "def _make_legend(self):\n    ax, leg, handle = self._get_ax_legend_handle(self.axes[0])\n\n    handles = []\n    labels = []\n    title = \"\"\n\n    if not self.subplots:\n        if leg is not None:\n            title = leg.get_title().get_text()\n            # Replace leg.LegendHandles because it misses marker info\n            handles.extend(handle)\n            labels = [x.get_text() for x in leg.get_texts()]\n\n        if self.legend:\n            if self.legend == \"reverse\":\n                self.legend_handles = reversed(self.legend_handles)\n                self.legend_labels = reversed(self.legend_labels)\n\n            handles += self.legend_handles\n            labels += self.legend_labels\n\n            if self.legend_title is not None:\n                title = self.legend_title\n\n        if len(handles) > 0:\n            ax.legend(handles, labels, loc=\"best\", title=title)\n\n    elif self.subplots and self.legend:\n        for ax in self.axes:\n            if ax.get_visible():\n                ax.legend(loc=\"best\")",
                "def _get_ax_legend_handle(self, ax):\n    \"\"\"\n    Take in axes and return ax, legend and handle under different scenarios\n    \"\"\"\n    leg = ax.get_legend()\n\n    # Get handle from axes\n    handle, _ = ax.get_legend_handles_labels()\n    other_ax = getattr(ax, \"left_ax\", None) or getattr(ax, \"right_ax\", None)\n    other_leg = None\n    if other_ax is not None:\n        other_leg = other_ax.get_legend()\n    if leg is None and other_leg is not None:\n        leg = other_leg\n        ax = other_ax\n    return ax, leg, handle",
                "@cache_readonly\ndef plt(self):\n    import matplotlib.pyplot as plt\n\n    return plt",
                "def _get_xticks(self, convert_period=False):\n    index = self.data.index\n    is_datetype = index.inferred_type in (\"datetime\", \"date\", \"datetime64\", \"time\")\n\n    if self.use_index:\n        if convert_period and isinstance(index, ABCPeriodIndex):\n            self.data = self.data.reindex(index=index.sort_values())\n            x = self.data.index.to_timestamp()._mpl_repr()\n        elif index.is_numeric():\n            \"\"\"\n            Matplotlib supports numeric values or datetime objects as\n            xaxis values. Taking LBYL approach here, by the time\n            matplotlib raises exception when using non numeric/datetime\n            values for xaxis, several actions are already taken by plt.\n            \"\"\"\n            x = index._mpl_repr()\n        elif is_datetype:\n            self.data = self.data[notna(self.data.index)]\n            self.data = self.data.sort_index()\n            x = self.data.index._mpl_repr()\n        else:\n            self._need_to_set_index = True\n            x = list(range(len(index)))\n    else:\n        x = list(range(len(index)))\n\n    return x",
                "@classmethod\ndef _plot(cls, ax, x, y, style=None, is_errorbar=False, **kwds):\n    mask = isna(y)\n    if mask.any():\n        y = np.ma.array(y)\n        y = np.ma.masked_where(mask, y)\n\n    if isinstance(x, ABCIndexClass):\n        x = x._mpl_repr()\n\n    if is_errorbar:\n        if \"xerr\" in kwds:\n            kwds[\"xerr\"] = np.array(kwds.get(\"xerr\"))\n        if \"yerr\" in kwds:\n            kwds[\"yerr\"] = np.array(kwds.get(\"yerr\"))\n        return ax.errorbar(x, y, **kwds)\n    else:\n        # prevent style kwarg from going to errorbar, where it is\n        # unsupported\n        if style is not None:\n            args = (x, y, style)\n        else:\n            args = (x, y)\n        return ax.plot(*args, **kwds)",
                "def _get_index_name(self):\n    if isinstance(self.data.index, ABCMultiIndex):\n        name = self.data.index.names\n        if com.any_not_none(*name):\n            name = \",\".join(pprint_thing(x) for x in name)\n        else:\n            name = None\n    else:\n        name = self.data.index.name\n        if name is not None:\n            name = pprint_thing(name)\n\n    return name",
                "@classmethod\ndef _get_ax_layer(cls, ax, primary=True):\n    \"\"\"get left (primary) or right (secondary) axes\"\"\"\n    if primary:\n        return getattr(ax, \"left_ax\", ax)\n    else:\n        return getattr(ax, \"right_ax\", ax)",
                "def _get_ax(self, i):\n    # get the twinx ax if appropriate\n    if self.subplots:\n        ax = self.axes[i]\n        ax = self._maybe_right_yaxis(ax, i)\n        self.axes[i] = ax\n    else:\n        ax = self.axes[0]\n        ax = self._maybe_right_yaxis(ax, i)\n\n    ax.get_yaxis().set_visible(True)\n    return ax",
                "@classmethod\ndef get_default_ax(cls, ax):\n    import matplotlib.pyplot as plt\n\n    if ax is None and len(plt.get_fignums()) > 0:\n        with plt.rc_context():\n            ax = plt.gca()\n        ax = cls._get_ax_layer(ax)",
                "def on_right(self, i):\n    if isinstance(self.secondary_y, bool):\n        return self.secondary_y\n\n    if isinstance(self.secondary_y, (tuple, list, np.ndarray, ABCIndexClass)):\n        return self.data.columns[i] in self.secondary_y",
                "def _apply_style_colors(self, colors, kwds, col_num, label):\n    \"\"\"\n    Manage style and color based on column number and its label.\n    Returns tuple of appropriate style and kwds which \"color\" may be added.\n    \"\"\"\n    style = None\n    if self.style is not None:\n        if isinstance(self.style, list):\n            try:\n                style = self.style[col_num]\n            except IndexError:\n                pass\n        elif isinstance(self.style, dict):\n            style = self.style.get(label, style)\n        else:\n            style = self.style\n\n    has_color = \"color\" in kwds or self.colormap is not None\n    nocolor_style = style is None or re.match(\"[a-z]+\", style) is None\n    if (has_color or self.subplots) and nocolor_style:\n        kwds[\"color\"] = colors[col_num % len(colors)]\n    return style, kwds",
                "def _get_colors(self, num_colors=None, color_kwds=\"color\"):\n    if num_colors is None:\n        num_colors = self.nseries\n\n    return _get_standard_colors(\n        num_colors=num_colors,\n        colormap=self.colormap,\n        color=self.kwds.get(color_kwds),\n    )",
                "def _parse_errorbars(self, label, err):\n    \"\"\"\n    Look for error keyword arguments and return the actual errorbar data\n    or return the error DataFrame/dict\n\n    Error bars can be specified in several ways:\n        Series: the user provides a pandas.Series object of the same\n                length as the data\n        ndarray: provides a np.ndarray of the same length as the data\n        DataFrame/dict: error values are paired with keys matching the\n                key in the plotted DataFrame\n        str: the name of the column within the plotted DataFrame\n    \"\"\"\n\n    if err is None:\n        return None\n\n    def match_labels(data, e):\n        e = e.reindex(data.index)\n        return e\n\n    # key-matched DataFrame\n    if isinstance(err, ABCDataFrame):\n\n        err = match_labels(self.data, err)\n    # key-matched dict\n    elif isinstance(err, dict):\n        pass\n\n    # Series of error values\n    elif isinstance(err, ABCSeries):\n        # broadcast error series across data\n        err = match_labels(self.data, err)\n        err = np.atleast_2d(err)\n        err = np.tile(err, (self.nseries, 1))\n\n    # errors are a column in the dataframe\n    elif isinstance(err, str):\n        evalues = self.data[err].values\n        self.data = self.data[self.data.columns.drop(err)]\n        err = np.atleast_2d(evalues)\n        err = np.tile(err, (self.nseries, 1))\n\n    elif is_list_like(err):\n        if is_iterator(err):\n            err = np.atleast_2d(list(err))\n        else:\n            # raw error values\n            err = np.atleast_2d(err)\n\n        err_shape = err.shape\n\n        # asymmetrical error bars\n        if err.ndim == 3:\n            if (\n                (err_shape[0] != self.nseries)\n                or (err_shape[1] != 2)\n                or (err_shape[2] != len(self.data))\n            ):\n                msg = (\n                    \"Asymmetrical error bars should be provided \"\n                    + \"with the shape (%u, 2, %u)\" % (self.nseries, len(self.data))\n                )\n                raise ValueError(msg)\n\n        # broadcast errors to each data series\n        if len(err) == 1:\n            err = np.tile(err, (self.nseries, 1))\n\n    elif is_number(err):\n        err = np.tile([err], (self.nseries, len(self.data)))\n\n    else:\n        msg = \"No valid {label} detected\".format(label=label)\n        raise ValueError(msg)\n\n    return err",
                "def _get_errorbars(self, label=None, index=None, xerr=True, yerr=True):\n    errors = {}\n\n    for kw, flag in zip([\"xerr\", \"yerr\"], [xerr, yerr]):\n        if flag:\n            err = self.errors[kw]\n            # user provided label-matched dataframe of errors\n            if isinstance(err, (ABCDataFrame, dict)):\n                if label is not None and label in err.keys():\n                    err = err[label]\n                else:\n                    err = None\n            elif index is not None and err is not None:\n                err = err[index]\n\n            if err is not None:\n                errors[kw] = err\n    return errors",
                "def _get_subplots(self):\n    from matplotlib.axes import Subplot\n\n    return [\n        ax for ax in self.axes[0].get_figure().get_axes() if isinstance(ax, Subplot)\n    ]",
                "def _get_axes_layout(self):\n    axes = self._get_subplots()\n    x_set = set()\n    y_set = set()\n    for ax in axes:\n        # check axes coordinates to estimate layout\n        points = ax.get_position().get_points()\n        x_set.add(points[0][0])\n        y_set.add(points[0][1])\n    return (len(y_set), len(x_set))",
                "def __init__(self, data, x, y, **kwargs):\n    MPLPlot.__init__(self, data, **kwargs)\n    if x is None or y is None:\n        raise ValueError(self._kind + \" requires an x and y column\")\n    if is_integer(x) and not self.data.columns.holds_integer():\n        x = self.data.columns[x]\n    if is_integer(y) and not self.data.columns.holds_integer():\n        y = self.data.columns[y]\n    if len(self.data[x]._get_numeric_data()) == 0:\n        raise ValueError(self._kind + \" requires x column to be numeric\")\n    if len(self.data[y]._get_numeric_data()) == 0:\n        raise ValueError(self._kind + \" requires y column to be numeric\")\n\n    self.x = x\n    self.y = y",
                "@property\ndef nseries(self):\n    return 1",
                "def _post_plot_logic(self, ax, data):\n    x, y = self.x, self.y\n    ax.set_ylabel(pprint_thing(y))\n    ax.set_xlabel(pprint_thing(x))",
                "def _plot_colorbar(self, ax, **kwds):\n    # Addresses issues #10611 and #10678:\n    # When plotting scatterplots and hexbinplots in IPython\n    # inline backend the colorbar axis height tends not to\n    # exactly match the parent axis height.\n    # The difference is due to small fractional differences\n    # in floating points with similar representation.\n    # To deal with this, this method forces the colorbar\n    # height to take the height of the parent axes.\n    # For a more detailed description of the issue\n    # see the following link:\n    # https://github.com/ipython/ipython/issues/11215\n    img = ax.collections[0]\n    cbar = self.fig.colorbar(img, ax=ax, **kwds)\n\n    if _mpl_ge_3_0_0():\n        # The workaround below is no longer necessary.\n        return\n\n    points = ax.get_position().get_points()\n    cbar_points = cbar.ax.get_position().get_points()\n\n    cbar.ax.set_position(\n        [\n            cbar_points[0, 0],\n            points[0, 1],\n            cbar_points[1, 0] - cbar_points[0, 0],\n            points[1, 1] - points[0, 1],\n        ]\n    )",
                "def __init__(self, data, x, y, s=None, c=None, **kwargs):\n    if s is None:\n        # hide the matplotlib default for size, in case we want to change\n        # the handling of this argument later\n        s = 20\n    super().__init__(data, x, y, s=s, **kwargs)\n    if is_integer(c) and not self.data.columns.holds_integer():\n        c = self.data.columns[c]\n    self.c = c",
                "def _make_plot(self):\n    x, y, c, data = self.x, self.y, self.c, self.data\n    ax = self.axes[0]\n\n    c_is_column = is_hashable(c) and c in self.data.columns\n\n    # plot a colorbar only if a colormap is provided or necessary\n    cb = self.kwds.pop(\"colorbar\", self.colormap or c_is_column)\n\n    # pandas uses colormap, matplotlib uses cmap.\n    cmap = self.colormap or \"Greys\"\n    cmap = self.plt.cm.get_cmap(cmap)\n    color = self.kwds.pop(\"color\", None)\n    if c is not None and color is not None:\n        raise TypeError(\"Specify exactly one of `c` and `color`\")\n    elif c is None and color is None:\n        c_values = self.plt.rcParams[\"patch.facecolor\"]\n    elif color is not None:\n        c_values = color\n    elif c_is_column:\n        c_values = self.data[c].values\n    else:\n        c_values = c\n\n    if self.legend and hasattr(self, \"label\"):\n        label = self.label\n    else:\n        label = None\n    scatter = ax.scatter(\n        data[x].values,\n        data[y].values,\n        c=c_values,\n        label=label,\n        cmap=cmap,\n        **self.kwds\n    )\n    if cb:\n        cbar_label = c if c_is_column else \"\"\n        self._plot_colorbar(ax, label=cbar_label)\n\n    if label is not None:\n        self._add_legend_handle(scatter, label)\n    else:\n        self.legend = False\n\n    errors_x = self._get_errorbars(label=x, index=0, yerr=False)\n    errors_y = self._get_errorbars(label=y, index=0, xerr=False)\n    if len(errors_x) > 0 or len(errors_y) > 0:\n        err_kwds = dict(errors_x, **errors_y)\n        err_kwds[\"ecolor\"] = scatter.get_facecolor()[0]\n        ax.errorbar(data[x].values, data[y].values, linestyle=\"none\", **err_kwds)",
                "def __init__(self, data, x, y, C=None, **kwargs):\n    super().__init__(data, x, y, **kwargs)\n    if is_integer(C) and not self.data.columns.holds_integer():\n        C = self.data.columns[C]\n    self.C = C",
                "def _make_plot(self):\n    x, y, data, C = self.x, self.y, self.data, self.C\n    ax = self.axes[0]\n    # pandas uses colormap, matplotlib uses cmap.\n    cmap = self.colormap or \"BuGn\"\n    cmap = self.plt.cm.get_cmap(cmap)\n    cb = self.kwds.pop(\"colorbar\", True)\n\n    if C is None:\n        c_values = None\n    else:\n        c_values = data[C].values\n\n    ax.hexbin(data[x].values, data[y].values, C=c_values, cmap=cmap, **self.kwds)\n    if cb:\n        self._plot_colorbar(ax)",
                "def _make_legend(self):\n    pass",
                "def __init__(self, data, **kwargs):\n    from pandas.plotting import plot_params\n\n    MPLPlot.__init__(self, data, **kwargs)\n    if self.stacked:\n        self.data = self.data.fillna(value=0)\n    self.x_compat = plot_params[\"x_compat\"]\n    if \"x_compat\" in self.kwds:\n        self.x_compat = bool(self.kwds.pop(\"x_compat\"))",
                "def _is_ts_plot(self):\n    # this is slightly deceptive\n    return not self.x_compat and self.use_index and self._use_dynamic_x()",
                "def _use_dynamic_x(self):\n    from pandas.plotting._matplotlib.timeseries import _use_dynamic_x\n\n    return _use_dynamic_x(self._get_ax(0), self.data)",
                "def _make_plot(self):\n    if self._is_ts_plot():\n        from pandas.plotting._matplotlib.timeseries import _maybe_convert_index\n\n        data = _maybe_convert_index(self._get_ax(0), self.data)\n\n        x = data.index  # dummy, not used\n        plotf = self._ts_plot\n        it = self._iter_data(data=data, keep_index=True)\n    else:\n        x = self._get_xticks(convert_period=True)\n        plotf = self._plot\n        it = self._iter_data()\n\n    stacking_id = self._get_stacking_id()\n    is_errorbar = com.any_not_none(*self.errors.values())\n\n    colors = self._get_colors()\n    for i, (label, y) in enumerate(it):\n        ax = self._get_ax(i)\n        kwds = self.kwds.copy()\n        style, kwds = self._apply_style_colors(colors, kwds, i, label)\n\n        errors = self._get_errorbars(label=label, index=i)\n        kwds = dict(kwds, **errors)\n\n        label = pprint_thing(label)  # .encode('utf-8')\n        kwds[\"label\"] = label\n\n        newlines = plotf(\n            ax,\n            x,\n            y,\n            style=style,\n            column_num=i,\n            stacking_id=stacking_id,\n            is_errorbar=is_errorbar,\n            **kwds\n        )\n        self._add_legend_handle(newlines[0], label, index=i)\n\n        if self._is_ts_plot():\n\n            # reset of xlim should be used for ts data\n            # TODO: GH28021, should find a way to change view limit on xaxis\n            lines = _get_all_lines(ax)\n            left, right = _get_xlim(lines)\n            ax.set_xlim(left, right)",
                "@classmethod\ndef _plot(cls, ax, x, y, style=None, column_num=None, stacking_id=None, **kwds):\n    # column_num is used to get the target column from protf in line and\n    # area plots\n    if column_num == 0:\n        cls._initialize_stacker(ax, stacking_id, len(y))\n    y_values = cls._get_stacked_values(ax, stacking_id, y, kwds[\"label\"])\n    lines = MPLPlot._plot(ax, x, y_values, style=style, **kwds)\n    cls._update_stacker(ax, stacking_id, y)\n    return lines",
                "@classmethod\ndef _ts_plot(cls, ax, x, data, style=None, **kwds):\n    from pandas.plotting._matplotlib.timeseries import (\n        _maybe_resample,\n        _decorate_axes,\n        format_dateaxis,\n    )\n\n    # accept x to be consistent with normal plot func,\n    # x is not passed to tsplot as it uses data.index as x coordinate\n    # column_num must be in kwds for stacking purpose\n    freq, data = _maybe_resample(data, ax, kwds)\n\n    # Set ax with freq info\n    _decorate_axes(ax, freq, kwds)\n    # digging deeper\n    if hasattr(ax, \"left_ax\"):\n        _decorate_axes(ax.left_ax, freq, kwds)\n    if hasattr(ax, \"right_ax\"):\n        _decorate_axes(ax.right_ax, freq, kwds)\n    ax._plot_data.append((data, cls._kind, kwds))\n\n    lines = cls._plot(ax, data.index, data.values, style=style, **kwds)\n    # set date formatter, locators and rescale limits\n    format_dateaxis(ax, ax.freq, data.index)\n    return lines",
                "def _get_stacking_id(self):\n    if self.stacked:\n        return id(self.data)\n    else:\n        return None",
                "@classmethod\ndef _initialize_stacker(cls, ax, stacking_id, n):\n    if stacking_id is None:\n        return\n    if not hasattr(ax, \"_stacker_pos_prior\"):\n        ax._stacker_pos_prior = {}\n    if not hasattr(ax, \"_stacker_neg_prior\"):\n        ax._stacker_neg_prior = {}\n    ax._stacker_pos_prior[stacking_id] = np.zeros(n)\n    ax._stacker_neg_prior[stacking_id] = np.zeros(n)",
                "@classmethod\ndef _get_stacked_values(cls, ax, stacking_id, values, label):\n    if stacking_id is None:\n        return values\n    if not hasattr(ax, \"_stacker_pos_prior\"):\n        # stacker may not be initialized for subplots\n        cls._initialize_stacker(ax, stacking_id, len(values))\n\n    if (values >= 0).all():\n        return ax._stacker_pos_prior[stacking_id] + values\n    elif (values <= 0).all():\n        return ax._stacker_neg_prior[stacking_id] + values\n\n    raise ValueError(\n        \"When stacked is True, each column must be either \"\n        \"all positive or negative.\"\n        \"{0} contains both positive and negative values\".format(label)\n    )",
                "@classmethod\ndef _update_stacker(cls, ax, stacking_id, values):\n    if stacking_id is None:\n        return\n    if (values >= 0).all():\n        ax._stacker_pos_prior[stacking_id] += values\n    elif (values <= 0).all():\n        ax._stacker_neg_prior[stacking_id] += values",
                "def _post_plot_logic(self, ax, data):\n    from matplotlib.ticker import FixedLocator\n\n    def get_label(i):\n        try:\n            return pprint_thing(data.index[i])\n        except Exception:\n            return \"\"\n\n    if self._need_to_set_index:\n        xticks = ax.get_xticks()\n        xticklabels = [get_label(x) for x in xticks]\n        ax.set_xticklabels(xticklabels)\n        ax.xaxis.set_major_locator(FixedLocator(xticks))\n\n    condition = (\n        not self._use_dynamic_x()\n        and data.index.is_all_dates\n        and not self.subplots\n        or (self.subplots and self.sharex)\n    )\n\n    index_name = self._get_index_name()\n\n    if condition:\n        # irregular TS rotated 30 deg. by default\n        # probably a better place to check / set this.\n        if not self._rot_set:\n            self.rot = 30\n        format_date_labels(ax, rot=self.rot)\n\n    if index_name is not None and self.use_index:\n        ax.set_xlabel(index_name)",
                "def __init__(self, data, **kwargs):\n    kwargs.setdefault(\"stacked\", True)\n    data = data.fillna(value=0)\n    LinePlot.__init__(self, data, **kwargs)\n\n    if not self.stacked:\n        # use smaller alpha to distinguish overlap\n        self.kwds.setdefault(\"alpha\", 0.5)\n\n    if self.logy or self.loglog:\n        raise ValueError(\"Log-y scales are not supported in area plot\")",
                "@classmethod\ndef _plot(\n    cls,\n    ax,\n    x,\n    y,\n    style=None,\n    column_num=None,\n    stacking_id=None,\n    is_errorbar=False,\n    **kwds\n):\n\n    if column_num == 0:\n        cls._initialize_stacker(ax, stacking_id, len(y))\n    y_values = cls._get_stacked_values(ax, stacking_id, y, kwds[\"label\"])\n\n    # need to remove label, because subplots uses mpl legend as it is\n    line_kwds = kwds.copy()\n    line_kwds.pop(\"label\")\n    lines = MPLPlot._plot(ax, x, y_values, style=style, **line_kwds)\n\n    # get data from the line to get coordinates for fill_between\n    xdata, y_values = lines[0].get_data(orig=False)\n\n    # unable to use ``_get_stacked_values`` here to get starting point\n    if stacking_id is None:\n        start = np.zeros(len(y))\n    elif (y >= 0).all():\n        start = ax._stacker_pos_prior[stacking_id]\n    elif (y <= 0).all():\n        start = ax._stacker_neg_prior[stacking_id]\n    else:\n        start = np.zeros(len(y))\n\n    if \"color\" not in kwds:\n        kwds[\"color\"] = lines[0].get_color()\n\n    rect = ax.fill_between(xdata, start, y_values, **kwds)\n    cls._update_stacker(ax, stacking_id, y)\n\n    # LinePlot expects list of artists\n    res = [rect]\n    return res",
                "def _post_plot_logic(self, ax, data):\n    LinePlot._post_plot_logic(self, ax, data)\n\n    if self.ylim is None:\n        if (data >= 0).all().all():\n            ax.set_ylim(0, None)\n        elif (data <= 0).all().all():\n            ax.set_ylim(None, 0)",
                "def __init__(self, data, **kwargs):\n    # we have to treat a series differently than a\n    # 1-column DataFrame w.r.t. color handling\n    self._is_series = isinstance(data, ABCSeries)\n    self.bar_width = kwargs.pop(\"width\", 0.5)\n    pos = kwargs.pop(\"position\", 0.5)\n    kwargs.setdefault(\"align\", \"center\")\n    self.tick_pos = np.arange(len(data))\n\n    self.bottom = kwargs.pop(\"bottom\", 0)\n    self.left = kwargs.pop(\"left\", 0)\n\n    self.log = kwargs.pop(\"log\", False)\n    MPLPlot.__init__(self, data, **kwargs)\n\n    if self.stacked or self.subplots:\n        self.tickoffset = self.bar_width * pos\n        if kwargs[\"align\"] == \"edge\":\n            self.lim_offset = self.bar_width / 2\n        else:\n            self.lim_offset = 0\n    else:\n        if kwargs[\"align\"] == \"edge\":\n            w = self.bar_width / self.nseries\n            self.tickoffset = self.bar_width * (pos - 0.5) + w * 0.5\n            self.lim_offset = w * 0.5\n        else:\n            self.tickoffset = self.bar_width * pos\n            self.lim_offset = 0\n\n    self.ax_pos = self.tick_pos - self.tickoffset",
                "def _args_adjust(self):\n    if is_list_like(self.bottom):\n        self.bottom = np.array(self.bottom)\n    if is_list_like(self.left):\n        self.left = np.array(self.left)",
                "@classmethod\ndef _plot(cls, ax, x, y, w, start=0, log=False, **kwds):\n    return ax.bar(x, y, w, bottom=start, log=log, **kwds)",
                "@property\ndef _start_base(self):\n    return self.bottom",
                "def _make_plot(self):\n    import matplotlib as mpl\n\n    colors = self._get_colors()\n    ncolors = len(colors)\n\n    pos_prior = neg_prior = np.zeros(len(self.data))\n    K = self.nseries\n\n    for i, (label, y) in enumerate(self._iter_data(fillna=0)):\n        ax = self._get_ax(i)\n        kwds = self.kwds.copy()\n        if self._is_series:\n            kwds[\"color\"] = colors\n        else:\n            kwds[\"color\"] = colors[i % ncolors]\n\n        errors = self._get_errorbars(label=label, index=i)\n        kwds = dict(kwds, **errors)\n\n        label = pprint_thing(label)\n\n        if ((\"yerr\" in kwds) or (\"xerr\" in kwds)) and (kwds.get(\"ecolor\") is None):\n            kwds[\"ecolor\"] = mpl.rcParams[\"xtick.color\"]\n\n        start = 0\n        if self.log and (y >= 1).all():\n            start = 1\n        start = start + self._start_base\n\n        if self.subplots:\n            w = self.bar_width / 2\n            rect = self._plot(\n                ax,\n                self.ax_pos + w,\n                y,\n                self.bar_width,\n                start=start,\n                label=label,\n                log=self.log,\n                **kwds\n            )\n            ax.set_title(label)\n        elif self.stacked:\n            mask = y > 0\n            start = np.where(mask, pos_prior, neg_prior) + self._start_base\n            w = self.bar_width / 2\n            rect = self._plot(\n                ax,\n                self.ax_pos + w,\n                y,\n                self.bar_width,\n                start=start,\n                label=label,\n                log=self.log,\n                **kwds\n            )\n            pos_prior = pos_prior + np.where(mask, y, 0)\n            neg_prior = neg_prior + np.where(mask, 0, y)\n        else:\n            w = self.bar_width / K\n            rect = self._plot(\n                ax,\n                self.ax_pos + (i + 0.5) * w,\n                y,\n                w,\n                start=start,\n                label=label,\n                log=self.log,\n                **kwds\n            )\n        self._add_legend_handle(rect, label, index=i)",
                "def _post_plot_logic(self, ax, data):\n    if self.use_index:\n        str_index = [pprint_thing(key) for key in data.index]\n    else:\n        str_index = [pprint_thing(key) for key in range(data.shape[0])]\n    name = self._get_index_name()\n\n    s_edge = self.ax_pos[0] - 0.25 + self.lim_offset\n    e_edge = self.ax_pos[-1] + 0.25 + self.bar_width + self.lim_offset\n\n    self._decorate_ticks(ax, name, str_index, s_edge, e_edge)",
                "def _decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge):\n    ax.set_xlim((start_edge, end_edge))\n    ax.set_xticks(self.tick_pos)\n    ax.set_xticklabels(ticklabels)\n    if name is not None and self.use_index:\n        ax.set_xlabel(name)",
                "@property\ndef _start_base(self):\n    return self.left",
                "@classmethod\ndef _plot(cls, ax, x, y, w, start=0, log=False, **kwds):\n    return ax.barh(x, y, w, left=start, log=log, **kwds)",
                "def _decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge):\n    # horizontal bars\n    ax.set_ylim((start_edge, end_edge))\n    ax.set_yticks(self.tick_pos)\n    ax.set_yticklabels(ticklabels)\n    if name is not None and self.use_index:\n        ax.set_ylabel(name)",
                "def __init__(self, data, kind=None, **kwargs):\n    data = data.fillna(value=0)\n    if (data < 0).any().any():\n        raise ValueError(\"{0} doesn't allow negative values\".format(kind))\n    MPLPlot.__init__(self, data, kind=kind, **kwargs)",
                "def _args_adjust(self):\n    self.grid = False\n    self.logy = False\n    self.logx = False\n    self.loglog = False",
                "def _validate_color_args(self):\n    pass",
                "def _make_plot(self):\n    colors = self._get_colors(num_colors=len(self.data), color_kwds=\"colors\")\n    self.kwds.setdefault(\"colors\", colors)\n\n    for i, (label, y) in enumerate(self._iter_data()):\n        ax = self._get_ax(i)\n        if label is not None:\n            label = pprint_thing(label)\n            ax.set_ylabel(label)\n\n        kwds = self.kwds.copy()\n\n        def blank_labeler(label, value):\n            if value == 0:\n                return \"\"\n            else:\n                return label\n\n        idx = [pprint_thing(v) for v in self.data.index]\n        labels = kwds.pop(\"labels\", idx)\n        # labels is used for each wedge's labels\n        # Blank out labels for values of 0 so they don't overlap\n        # with nonzero wedges\n        if labels is not None:\n            blabels = [blank_labeler(l, value) for l, value in zip(labels, y)]\n        else:\n            blabels = None\n        results = ax.pie(y, labels=blabels, **kwds)\n\n        if kwds.get(\"autopct\", None) is not None:\n            patches, texts, autotexts = results\n        else:\n            patches, texts = results\n            autotexts = []\n\n        if self.fontsize is not None:\n            for t in texts + autotexts:\n                t.set_fontsize(self.fontsize)\n\n        # leglabels is used for legend labels\n        leglabels = labels if labels is not None else idx\n        for p, l in zip(patches, leglabels):\n            self._add_legend_handle(p, l)",
                "def match_labels(data, e):\n    e = e.reindex(data.index)\n    return e",
                "def get_label(i):\n    try:\n        return pprint_thing(data.index[i])\n    except Exception:\n        return \"\"",
                "def blank_labeler(label, value):\n    if value == 0:\n        return \"\"\n    else:\n        return label"
            ],
            "inscope_function_signatures": [
                "_kind(self)",
                "__init__(self, data, kind=None, by=None, subplots=False, sharex=None, sharey=False, use_index=True, figsize=None, grid=None, legend=True, rot=None, ax=None, fig=None, title=None, xlim=None, ylim=None, xticks=None, yticks=None, sort_columns=False, fontsize=None, secondary_y=False, colormap=None, table=False, layout=None, include_bool=False, **kwds)",
                "_validate_color_args(self)",
                "_iter_data(self, data=None, keep_index=False, fillna=None)",
                "nseries(self)",
                "draw(self)",
                "generate(self)",
                "_args_adjust(self)",
                "_has_plotted_object(self, ax)",
                "_maybe_right_yaxis(self, ax, axes_num)",
                "_setup_subplots(self)",
                "result(self)",
                "_compute_plot_data(self)",
                "_make_plot(self)",
                "_add_table(self)",
                "_post_plot_logic_common(self, ax, data)",
                "_post_plot_logic(self, ax, data)",
                "_adorn_subplots(self)",
                "_apply_axis_properties(self, axis, rot=None, fontsize=None)",
                "legend_title(self)",
                "_add_legend_handle(self, handle, label, index=None)",
                "_make_legend(self)",
                "_get_ax_legend_handle(self, ax)",
                "plt(self)",
                "_get_xticks(self, convert_period=False)",
                "_plot(cls, ax, x, y, style=None, is_errorbar=False, **kwds)",
                "_get_index_name(self)",
                "_get_ax_layer(cls, ax, primary=True)",
                "_get_ax(self, i)",
                "get_default_ax(cls, ax)",
                "on_right(self, i)",
                "_apply_style_colors(self, colors, kwds, col_num, label)",
                "_get_colors(self, num_colors=None, color_kwds='color')",
                "_parse_errorbars(self, label, err)",
                "_get_errorbars(self, label=None, index=None, xerr=True, yerr=True)",
                "_get_subplots(self)",
                "_get_axes_layout(self)",
                "__init__(self, data, x, y, **kwargs)",
                "nseries(self)",
                "_post_plot_logic(self, ax, data)",
                "_plot_colorbar(self, ax, **kwds)",
                "__init__(self, data, x, y, s=None, c=None, **kwargs)",
                "_make_plot(self)",
                "__init__(self, data, x, y, C=None, **kwargs)",
                "_make_plot(self)",
                "_make_legend(self)",
                "__init__(self, data, **kwargs)",
                "_is_ts_plot(self)",
                "_use_dynamic_x(self)",
                "_make_plot(self)",
                "_plot(cls, ax, x, y, style=None, column_num=None, stacking_id=None, **kwds)",
                "_ts_plot(cls, ax, x, data, style=None, **kwds)",
                "_get_stacking_id(self)",
                "_initialize_stacker(cls, ax, stacking_id, n)",
                "_get_stacked_values(cls, ax, stacking_id, values, label)",
                "_update_stacker(cls, ax, stacking_id, values)",
                "_post_plot_logic(self, ax, data)",
                "__init__(self, data, **kwargs)",
                "_plot(cls, ax, x, y, style=None, column_num=None, stacking_id=None, is_errorbar=False, **kwds)",
                "_post_plot_logic(self, ax, data)",
                "__init__(self, data, **kwargs)",
                "_args_adjust(self)",
                "_plot(cls, ax, x, y, w, start=0, log=False, **kwds)",
                "_start_base(self)",
                "_make_plot(self)",
                "_post_plot_logic(self, ax, data)",
                "_decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge)",
                "_start_base(self)",
                "_plot(cls, ax, x, y, w, start=0, log=False, **kwds)",
                "_decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge)",
                "__init__(self, data, kind=None, **kwargs)",
                "_args_adjust(self)",
                "_validate_color_args(self)",
                "_make_plot(self)",
                "match_labels(data, e)",
                "get_label(i)",
                "blank_labeler(label, value)"
            ],
            "variables_in_file": {
                "get_option": [
                    44
                ],
                "converter.register": [
                    45
                ],
                "converter": [
                    115,
                    45
                ],
                "NotImplementedError": [
                    61
                ],
                "property": [
                    545,
                    898,
                    1347,
                    1449,
                    269,
                    372,
                    58
                ],
                "_layout_type": [
                    880,
                    1468,
                    63
                ],
                "_default_rot": [
                    64,
                    1041,
                    1446,
                    1302
                ],
                "orientation": [
                    65,
                    1042,
                    1447,
                    1303
                ],
                "_pop_attributes": [
                    66
                ],
                "_attr_defaults": [
                    75
                ],
                "converter._WARN": [
                    115
                ],
                "self.data": [
                    640,
                    641,
                    1152,
                    1019,
                    394,
                    271,
                    783,
                    274,
                    791,
                    1049,
                    797,
                    798,
                    289,
                    290,
                    547,
                    548,
                    676,
                    677,
                    1061,
                    553,
                    683,
                    1067,
                    816,
                    435,
                    820,
                    952,
                    953,
                    444,
                    829,
                    957,
                    960,
                    1357,
                    1486,
                    976,
                    724,
                    1503,
                    623,
                    887,
                    1015,
                    116,
                    628,
                    629,
                    886,
                    888,
                    889,
                    890,
                    1014,
                    892,
                    253,
                    639
                ],
                "self": [
                    116,
                    117,
                    119,
                    121,
                    123,
                    127,
                    131,
                    133,
                    135,
                    136,
                    137,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    146,
                    149,
                    152,
                    154,
                    155,
                    160,
                    161,
                    162,
                    163,
                    165,
                    166,
                    167,
                    169,
                    170,
                    171,
                    176,
                    177,
                    183,
                    190,
                    192,
                    194,
                    195,
                    197,
                    199,
                    202,
                    209,
                    210,
                    213,
                    214,
                    215,
                    218,
                    221,
                    222,
                    223,
                    224,
                    227,
                    230,
                    231,
                    236,
                    237,
                    238,
                    240,
                    253,
                    271,
                    274,
                    277,
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    288,
                    289,
                    290,
                    300,
                    302,
                    318,
                    321,
                    323,
                    328,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    339,
                    340,
                    343,
                    344,
                    345,
                    346,
                    351,
                    359,
                    361,
                    364,
                    366,
                    369,
                    370,
                    377,
                    378,
                    379,
                    381,
                    383,
                    385,
                    389,
                    391,
                    394,
                    397,
                    408,
                    413,
                    435,
                    438,
                    441,
                    443,
                    444,
                    446,
                    447,
                    453,
                    454,
                    455,
                    458,
                    460,
                    461,
                    462,
                    465,
                    475,
                    476,
                    477,
                    484,
                    485,
                    488,
                    489,
                    490,
                    492,
                    493,
                    495,
                    496,
                    498,
                    499,
                    501,
                    503,
                    504,
                    505,
                    506,
                    513,
                    516,
                    519,
                    521,
                    527,
                    547,
                    548,
                    553,
                    558,
                    559,
                    561,
                    562,
                    565,
                    571,
                    578,
                    579,
                    580,
                    581,
                    583,
                    584,
                    586,
                    587,
                    592,
                    593,
                    623,
                    626,
                    628,
                    629,
                    639,
                    640,
                    641,
                    643,
                    676,
                    677,
                    683,
                    699,
                    700,
                    701,
                    702,
                    704,
                    705,
                    720,
                    721,
                    723,
                    724,
                    732,
                    733,
                    735,
                    738,
                    739,
                    741,
                    743,
                    745,
                    751,
                    755,
                    756,
                    783,
                    791,
                    793,
                    797,
                    798,
                    800,
                    814,
                    816,
                    820,
                    826,
                    829,
                    842,
                    860,
                    864,
                    883,
                    885,
                    886,
                    887,
                    888,
                    889,
                    890,
                    891,
                    892,
                    893,
                    895,
                    896,
                    903,
                    920,
                    952,
                    953,
                    954,
                    957,
                    958,
                    960,
                    963,
                    966,
                    967,
                    968,
                    972,
                    976,
                    980,
                    981,
                    990,
                    994,
                    997,
                    999,
                    1001,
                    1002,
                    1014,
                    1015,
                    1016,
                    1019,
                    1020,
                    1022,
                    1023,
                    1024,
                    1031,
                    1033,
                    1047,
                    1048,
                    1049,
                    1050,
                    1051,
                    1052,
                    1056,
                    1061,
                    1064,
                    1067,
                    1070,
                    1071,
                    1073,
                    1074,
                    1075,
                    1077,
                    1078,
                    1080,
                    1082,
                    1083,
                    1084,
                    1086,
                    1102,
                    1104,
                    1151,
                    1152,
                    1204,
                    1211,
                    1213,
                    1214,
                    1217,
                    1222,
                    1223,
                    1224,
                    1226,
                    1236,
                    1238,
                    1240,
                    1242,
                    1291,
                    1293,
                    1308,
                    1309,
                    1312,
                    1314,
                    1315,
                    1317,
                    1318,
                    1320,
                    1321,
                    1323,
                    1325,
                    1328,
                    1329,
                    1330,
                    1332,
                    1333,
                    1335,
                    1338,
                    1339,
                    1340,
                    1341,
                    1349,
                    1354,
                    1357,
                    1358,
                    1360,
                    1361,
                    1362,
                    1363,
                    1368,
                    1377,
                    1379,
                    1381,
                    1382,
                    1383,
                    1385,
                    1387,
                    1390,
                    1394,
                    1396,
                    1397,
                    1398,
                    1400,
                    1402,
                    1405,
                    1411,
                    1412,
                    1414,
                    1419,
                    1422,
                    1425,
                    1429,
                    1431,
                    1432,
                    1434,
                    1438,
                    1440,
                    1451,
                    1460,
                    1462,
                    1474,
                    1477,
                    1478,
                    1479,
                    1480,
                    1486,
                    1487,
                    1489,
                    1490,
                    1495,
                    1503,
                    1520,
                    1522,
                    1527
                ],
                "data": [
                    1029,
                    263,
                    1031,
                    777,
                    394,
                    1147,
                    396,
                    1291,
                    398,
                    1294,
                    400,
                    1296,
                    1426,
                    404,
                    1428,
                    1047,
                    1308,
                    1312,
                    418,
                    1318,
                    1067,
                    1069,
                    1071,
                    1200,
                    951,
                    444,
                    957,
                    446,
                    1212,
                    448,
                    1471,
                    1472,
                    1474,
                    1235,
                    1236,
                    985,
                    986,
                    1006,
                    1134,
                    883,
                    116,
                    1013,
                    1143,
                    1145,
                    1019,
                    252,
                    253,
                    255
                ],
                "self.by": [
                    117
                ],
                "by": [
                    117
                ],
                "self.kind": [
                    119
                ],
                "kind": [
                    1473,
                    1474,
                    119
                ],
                "self.sort_columns": [
                    121
                ],
                "sort_columns": [
                    121
                ],
                "self.subplots": [
                    1381,
                    328,
                    745,
                    1320,
                    592,
                    1213,
                    504,
                    377,
                    123,
                    1214,
                    699,
                    571
                ],
                "subplots": [
                    123
                ],
                "sharex": [
                    125,
                    133
                ],
                "ax": [
                    516,
                    517,
                    1031,
                    1033,
                    565,
                    1082,
                    1093,
                    590,
                    593,
                    594,
                    595,
                    1108,
                    1110,
                    601,
                    604,
                    605,
                    1117,
                    1118,
                    1119,
                    1120,
                    611,
                    612,
                    1134,
                    1137,
                    1139,
                    1140,
                    1141,
                    1142,
                    1143,
                    1145,
                    1147,
                    126,
                    1160,
                    1161,
                    1162,
                    1163,
                    1164,
                    1165,
                    1171,
                    1173,
                    1176,
                    665,
                    1178,
                    673,
                    1191,
                    169,
                    1193,
                    693,
                    1205,
                    695,
                    1207,
                    1208,
                    700,
                    701,
                    702,
                    704,
                    705,
                    707,
                    708,
                    1224,
                    714,
                    1227,
                    716,
                    717,
                    1259,
                    1260,
                    1265,
                    1274,
                    1276,
                    1283,
                    1284,
                    1291,
                    1295,
                    1297,
                    288,
                    289,
                    290,
                    297,
                    302,
                    304,
                    306,
                    307,
                    309,
                    312,
                    1345,
                    1361,
                    860,
                    867,
                    869,
                    1384,
                    1393,
                    1399,
                    1413,
                    904,
                    905,
                    919,
                    920,
                    1434,
                    1437,
                    926,
                    1438,
                    1439,
                    1441,
                    1455,
                    1459,
                    1460,
                    1461,
                    1463,
                    958,
                    447,
                    448,
                    454,
                    455,
                    457,
                    458,
                    461,
                    462,
                    464,
                    465,
                    1490,
                    1493,
                    984,
                    994,
                    488,
                    1512,
                    490,
                    493,
                    1006,
                    496,
                    499,
                    501,
                    1020
                ],
                "self.sharex": [
                    131,
                    484,
                    133,
                    331,
                    1214,
                    127
                ],
                "self.sharey": [
                    332,
                    485,
                    135
                ],
                "sharey": [
                    135
                ],
                "self.figsize": [
                    136,
                    333,
                    340,
                    344,
                    345
                ],
                "figsize": [
                    136
                ],
                "self.layout": [
                    137,
                    378,
                    379,
                    335
                ],
                "layout": [
                    137
                ],
                "self.xticks": [
                    139,
                    492,
                    493
                ],
                "xticks": [
                    1208,
                    139,
                    1205,
                    1206
                ],
                "self.yticks": [
                    489,
                    490,
                    140
                ],
                "yticks": [
                    140
                ],
                "self.xlim": [
                    498,
                    499,
                    141
                ],
                "xlim": [
                    141
                ],
                "self.ylim": [
                    496,
                    1293,
                    142,
                    495
                ],
                "ylim": [
                    142
                ],
                "self.title": [
                    513,
                    516,
                    519,
                    521,
                    143,
                    527,
                    503,
                    505,
                    506
                ],
                "title": [
                    516,
                    517,
                    587,
                    590,
                    143,
                    569,
                    573
                ],
                "self.use_index": [
                    1056,
                    1440,
                    1226,
                    144,
                    1425,
                    626,
                    1462
                ],
                "use_index": [
                    144
                ],
                "self.fontsize": [
                    454,
                    455,
                    458,
                    461,
                    462,
                    1520,
                    465,
                    146,
                    1522
                ],
                "fontsize": [
                    536,
                    146,
                    542,
                    543
                ],
                "rot": [
                    148,
                    149,
                    536,
                    540,
                    541
                ],
                "self.rot": [
                    454,
                    1223,
                    1224,
                    461,
                    149,
                    155
                ],
                "self._rot_set": [
                    152,
                    154,
                    1222
                ],
                "self._default_rot": [
                    155
                ],
                "grid": [
                    160,
                    157,
                    158
                ],
                "secondary_y": [
                    182,
                    181,
                    158,
                    183
                ],
                "plt.rcParams": [
                    158
                ],
                "plt": [
                    714,
                    618,
                    715,
                    716,
                    158
                ],
                "self.grid": [
                    160,
                    1477,
                    501
                ],
                "self.legend": [
                    161,
                    578,
                    579,
                    999,
                    592,
                    980
                ],
                "legend": [
                    161
                ],
                "self.legend_handles": [
                    561,
                    162,
                    580,
                    583
                ],
                "self.legend_labels": [
                    584,
                    562,
                    163,
                    581
                ],
                "attr": [
                    165,
                    166,
                    167
                ],
                "self._pop_attributes": [
                    165
                ],
                "value": [
                    1498,
                    1509,
                    166,
                    167
                ],
                "kwds.pop": [
                    1504,
                    166,
                    174,
                    175,
                    190
                ],
                "kwds": [
                    1280,
                    1281,
                    1283,
                    1420,
                    661,
                    662,
                    663,
                    664,
                    665,
                    920,
                    673,
                    166,
                    174,
                    175,
                    1455,
                    1083,
                    187,
                    1084,
                    189,
                    190,
                    1087,
                    1345,
                    1090,
                    197,
                    1100,
                    1362,
                    1364,
                    1366,
                    1495,
                    1369,
                    1373,
                    1118,
                    1119,
                    1374,
                    1504,
                    743,
                    1512,
                    746,
                    747,
                    1260,
                    1514,
                    1134,
                    1263,
                    1391,
                    1137,
                    1140,
                    1142,
                    1143,
                    1145,
                    1406
                ],
                "self._attr_defaults.get": [
                    166
                ],
                "self._attr_defaults": [
                    166
                ],
                "setattr": [
                    167
                ],
                "self.ax": [
                    169,
                    334,
                    378,
                    339,
                    343,
                    346
                ],
                "self.fig": [
                    920,
                    369,
                    170,
                    519
                ],
                "fig": [
                    329,
                    170,
                    369,
                    340,
                    341,
                    343,
                    345
                ],
                "self.axes": [
                    516,
                    389,
                    391,
                    527,
                    288,
                    171,
                    565,
                    700,
                    958,
                    702,
                    704,
                    593,
                    475,
                    860,
                    488,
                    370,
                    379,
                    1020,
                    381
                ],
                "xerr": [
                    840,
                    178,
                    174
                ],
                "yerr": [
                    840,
                    178,
                    175
                ],
                "self.errors": [
                    176,
                    842,
                    1078
                ],
                "kw": [
                    840,
                    842,
                    177,
                    178,
                    853
                ],
                "self._parse_errorbars": [
                    177
                ],
                "err": [
                    773,
                    781,
                    783,
                    785,
                    789,
                    791,
                    792,
                    793,
                    796,
                    797,
                    798,
                    799,
                    800,
                    802,
                    803,
                    804,
                    807,
                    809,
                    812,
                    177,
                    178,
                    825,
                    826,
                    828,
                    829,
                    835,
                    842,
                    844,
                    845,
                    846,
                    848,
                    849,
                    850,
                    852,
                    853
                ],
                "zip": [
                    516,
                    1509,
                    840,
                    178,
                    1526
                ],
                "isinstance": [
                    396,
                    781,
                    657,
                    785,
                    789,
                    1308,
                    796,
                    547,
                    676,
                    181,
                    844,
                    720,
                    723,
                    860,
                    733,
                    222,
                    738,
                    627,
                    383
                ],
                "bool": [
                    720,
                    1052,
                    181,
                    383
                ],
                "tuple": [
                    723,
                    181,
                    222
                ],
                "list": [
                    644,
                    804,
                    646,
                    723,
                    181,
                    733
                ],
                "np.ndarray": [
                    723,
                    181
                ],
                "np": [
                    1408,
                    1409,
                    1164,
                    1165,
                    654,
                    655,
                    405,
                    662,
                    792,
                    664,
                    409,
                    793,
                    799,
                    800,
                    415,
                    1312,
                    804,
                    807,
                    433,
                    181,
                    826,
                    1339,
                    829,
                    1341,
                    1357,
                    723,
                    1396,
                    1272,
                    1278
                ],
                "ABCIndexClass": [
                    657,
                    723,
                    181
                ],
                "self.secondary_y": [
                    385,
                    720,
                    721,
                    723,
                    724,
                    183,
                    383
                ],
                "colormap": [
                    192,
                    187
                ],
                "TypeError": [
                    970,
                    427,
                    188
                ],
                "self.colormap": [
                    192,
                    963,
                    966,
                    743,
                    231,
                    755,
                    1022,
                    190
                ],
                "self.table": [
                    441,
                    194,
                    443,
                    446
                ],
                "table": [
                    448,
                    194
                ],
                "self.include_bool": [
                    408,
                    195
                ],
                "include_bool": [
                    195
                ],
                "self.kwds": [
                    1024,
                    1031,
                    1051,
                    1052,
                    1083,
                    963,
                    197,
                    968,
                    202,
                    1487,
                    209,
                    210,
                    1362,
                    213,
                    215,
                    1240,
                    1495,
                    218,
                    221,
                    990,
                    222,
                    224,
                    227,
                    230,
                    236,
                    756
                ],
                "self._validate_color_args": [
                    199
                ],
                "warnings.warn": [
                    232,
                    203
                ],
                "warnings": [
                    232,
                    203
                ],
                "colors": [
                    746,
                    1354,
                    1355,
                    1486,
                    1487,
                    209,
                    210,
                    1364,
                    1366,
                    1080,
                    1084
                ],
                "self.kwds.pop": [
                    1024,
                    963,
                    968,
                    209,
                    1052
                ],
                "self.nseries": [
                    800,
                    385,
                    513,
                    330,
                    814,
                    751,
                    1328,
                    1358,
                    820,
                    214,
                    793,
                    506,
                    826,
                    829,
                    223
                ],
                "is_list_like": [
                    385,
                    802,
                    521,
                    1338,
                    237,
                    215,
                    505,
                    378,
                    1340
                ],
                "len": [
                    385,
                    513,
                    644,
                    646,
                    1173,
                    1278,
                    1312,
                    423,
                    297,
                    816,
                    820,
                    825,
                    829,
                    714,
                    1355,
                    589,
                    1357,
                    1486,
                    475,
                    1117,
                    224,
                    480,
                    872,
                    746,
                    1003,
                    1259,
                    1272,
                    506,
                    892,
                    890
                ],
                "self.style": [
                    738,
                    739,
                    741,
                    236,
                    237,
                    238,
                    240,
                    732,
                    733,
                    735
                ],
                "styles": [
                    240,
                    242,
                    238
                ],
                "s": [
                    242,
                    243,
                    947,
                    950,
                    951
                ],
                "re.match": [
                    744,
                    243
                ],
                "re": [
                    744,
                    243
                ],
                "ValueError": [
                    833,
                    514,
                    354,
                    1473,
                    526,
                    1243,
                    467,
                    244,
                    885,
                    822,
                    891,
                    1180,
                    893
                ],
                "fillna": [
                    254,
                    255
                ],
                "data.fillna": [
                    1471,
                    1235,
                    255
                ],
                "col": [
                    263,
                    265,
                    267,
                    432,
                    433
                ],
                "values": [
                    1029,
                    263,
                    1031,
                    265,
                    267,
                    1170,
                    1173,
                    1175,
                    1176,
                    1177,
                    1178,
                    797,
                    1190,
                    1191,
                    1192,
                    1193,
                    976,
                    985,
                    986,
                    1006
                ],
                "data.items": [
                    263
                ],
                "keep_index": [
                    264
                ],
                "values.values": [
                    267
                ],
                "self.data.ndim": [
                    271
                ],
                "self.data.shape": [
                    274
                ],
                "self.plt.draw_if_interactive": [
                    277
                ],
                "self.plt": [
                    967,
                    972,
                    340,
                    277,
                    1023
                ],
                "self._args_adjust": [
                    280
                ],
                "self._compute_plot_data": [
                    281
                ],
                "self._setup_subplots": [
                    282
                ],
                "self._make_plot": [
                    283
                ],
                "self._add_table": [
                    284
                ],
                "self._make_legend": [
                    285
                ],
                "self._adorn_subplots": [
                    286
                ],
                "self._post_plot_logic_common": [
                    289
                ],
                "self._post_plot_logic": [
                    290
                ],
                "ax.lines": [
                    297
                ],
                "ax.artists": [
                    297
                ],
                "ax.containers": [
                    297
                ],
                "self.on_right": [
                    300,
                    559
                ],
                "axes_num": [
                    300
                ],
                "self._get_ax_layer": [
                    389,
                    302
                ],
                "hasattr": [
                    1160,
                    457,
                    1162,
                    304,
                    464,
                    307,
                    980,
                    1139,
                    1141,
                    1171
                ],
                "ax.right_ax": [
                    458,
                    306,
                    465,
                    1142
                ],
                "orig_ax": [
                    312,
                    314,
                    315,
                    316,
                    318,
                    319
                ],
                "new_ax": [
                    322,
                    324,
                    325,
                    312,
                    314,
                    315,
                    316
                ],
                "ax.twinx": [
                    312
                ],
                "new_ax._get_lines": [
                    314
                ],
                "orig_ax._get_lines": [
                    314
                ],
                "new_ax._get_patches_for_fill": [
                    315
                ],
                "orig_ax._get_patches_for_fill": [
                    315
                ],
                "orig_ax.right_ax": [
                    316
                ],
                "new_ax.left_ax": [
                    316
                ],
                "self._has_plotted_object": [
                    318
                ],
                "set_visible": [
                    707,
                    319
                ],
                "orig_ax.get_yaxis": [
                    319
                ],
                "self.logy": [
                    321,
                    323,
                    1478,
                    364,
                    366,
                    1242,
                    351
                ],
                "self.loglog": [
                    321,
                    323,
                    359,
                    1480,
                    361,
                    364,
                    366,
                    1242,
                    351
                ],
                "new_ax.set_yscale": [
                    322,
                    324
                ],
                "axes": [
                    864,
                    867,
                    360,
                    329,
                    362,
                    365,
                    367,
                    370,
                    341,
                    346,
                    348
                ],
                "_subplots": [
                    329
                ],
                "self._layout_type": [
                    336
                ],
                "self.plt.figure": [
                    340
                ],
                "fig.add_subplot": [
                    341
                ],
                "self.ax.get_figure": [
                    343
                ],
                "fig.set_size_inches": [
                    345
                ],
                "_flatten": [
                    348
                ],
                "valid_log": [
                    352,
                    353,
                    350
                ],
                "input_log": [
                    352,
                    353,
                    351
                ],
                "self.logx": [
                    361,
                    1479,
                    359,
                    351
                ],
                "invalid_log": [
                    353,
                    356
                ],
                "next": [
                    353
                ],
                "iter": [
                    353
                ],
                "format": [
                    832,
                    1473,
                    355,
                    507,
                    1181
                ],
                "a.set_xscale": [
                    360,
                    362
                ],
                "a": [
                    360,
                    362,
                    365,
                    367
                ],
                "a.set_yscale": [
                    365,
                    367
                ],
                "self.axes.reshape": [
                    379
                ],
                "sec_true": [
                    387,
                    383
                ],
                "all_sec": [
                    384,
                    387
                ],
                "ABCSeries": [
                    1308,
                    396,
                    789
                ],
                "label": [
                    1418,
                    397,
                    398,
                    399,
                    400,
                    1422,
                    539,
                    541,
                    543,
                    1183,
                    557,
                    560,
                    562,
                    1081,
                    1084,
                    1086,
                    832,
                    1089,
                    1090,
                    845,
                    846,
                    1102,
                    1360,
                    1489,
                    1491,
                    1492,
                    981,
                    1493,
                    983,
                    1368,
                    1371,
                    988,
                    1501,
                    739,
                    996,
                    997,
                    1389,
                    1393,
                    1404
                ],
                "self.label": [
                    981,
                    397
                ],
                "data.name": [
                    398
                ],
                "data.to_frame": [
                    400
                ],
                "data._convert": [
                    404
                ],
                "include_type": [
                    409,
                    418,
                    405,
                    415
                ],
                "np.number": [
                    405,
                    415
                ],
                "include_type.append": [
                    409
                ],
                "np.bool_": [
                    409
                ],
                "exclude_type": [
                    416,
                    418,
                    412
                ],
                "self._kind": [
                    893,
                    885,
                    891,
                    413
                ],
                "numeric_data": [
                    418,
                    421,
                    423,
                    431,
                    432,
                    433,
                    435
                ],
                "data.select_dtypes": [
                    418
                ],
                "is_empty": [
                    426,
                    421,
                    423
                ],
                "numeric_data.columns.empty": [
                    421
                ],
                "numeric_data.columns": [
                    421
                ],
                "AttributeError": [
                    422
                ],
                "numeric_data.copy": [
                    431
                ],
                "np.asarray": [
                    433
                ],
                "AbstractMethodError": [
                    438
                ],
                "self.data.transpose": [
                    444
                ],
                "self._get_ax": [
                    1061,
                    1067,
                    1361,
                    1490,
                    1082,
                    447
                ],
                "self.orientation": [
                    460,
                    453
                ],
                "self._apply_axis_properties": [
                    454,
                    455,
                    458,
                    461,
                    462,
                    465
                ],
                "ax.xaxis": [
                    1208,
                    462,
                    454
                ],
                "ax.yaxis": [
                    461,
                    455
                ],
                "ax.right_ax.yaxis": [
                    465,
                    458
                ],
                "all_axes": [
                    480,
                    476,
                    479
                ],
                "self._get_subplots": [
                    864,
                    476
                ],
                "nrows": [
                    481,
                    482,
                    477
                ],
                "ncols": [
                    481,
                    483,
                    477
                ],
                "self._get_axes_layout": [
                    477
                ],
                "_handle_shared_axes": [
                    478
                ],
                "ax.set_yticks": [
                    490,
                    1460
                ],
                "ax.set_xticks": [
                    493,
                    1438
                ],
                "ax.set_ylim": [
                    496,
                    1297,
                    1459,
                    1295
                ],
                "ax.set_xlim": [
                    499,
                    1437,
                    1110
                ],
                "ax.grid": [
                    501
                ],
                "msg": [
                    832,
                    833,
                    514,
                    522,
                    526,
                    818,
                    822,
                    507
                ],
                "ax.set_title": [
                    1393,
                    517
                ],
                "self.fig.suptitle": [
                    519
                ],
                "set_title": [
                    527
                ],
                "labels": [
                    576,
                    1504,
                    1508,
                    1509,
                    584,
                    590,
                    1525,
                    568,
                    538,
                    539
                ],
                "axis.get_majorticklabels": [
                    538
                ],
                "axis": [
                    538
                ],
                "axis.get_minorticklabels": [
                    538
                ],
                "label.set_rotation": [
                    541
                ],
                "label.set_fontsize": [
                    543
                ],
                "self.data.columns": [
                    960,
                    547,
                    548,
                    553,
                    1015,
                    724,
                    886,
                    887,
                    888,
                    889,
                    952,
                    953,
                    1014,
                    798
                ],
                "ABCMultiIndex": [
                    547,
                    676
                ],
                "name": [
                    1440,
                    1441,
                    548,
                    677,
                    549,
                    550,
                    551,
                    678,
                    679,
                    681,
                    683,
                    684,
                    685,
                    687,
                    1429,
                    1462,
                    1463,
                    1434
                ],
                "self.data.columns.name": [
                    548
                ],
                "pprint_thing": [
                    1089,
                    550,
                    679,
                    904,
                    553,
                    905,
                    685,
                    1200,
                    1426,
                    1428,
                    1492,
                    1371,
                    1503
                ],
                "stringified": [
                    553,
                    554
                ],
                "map": [
                    553
                ],
                "self.data.columns.names": [
                    553
                ],
                "join": [
                    554,
                    679
                ],
                "self.mark_right": [
                    558
                ],
                "index": [
                    644,
                    646,
                    558,
                    623,
                    624,
                    559,
                    849,
                    627,
                    628,
                    850,
                    630,
                    637
                ],
                "self.legend_handles.append": [
                    561
                ],
                "handle": [
                    612,
                    561,
                    565,
                    604,
                    575
                ],
                "self.legend_labels.append": [
                    562
                ],
                "leg": [
                    576,
                    609,
                    610,
                    612,
                    565,
                    601,
                    572,
                    573
                ],
                "self._get_ax_legend_handle": [
                    565
                ],
                "handles": [
                    583,
                    589,
                    590,
                    567,
                    575
                ],
                "get_text": [
                    573
                ],
                "leg.get_title": [
                    573
                ],
                "handles.extend": [
                    575
                ],
                "x.get_text": [
                    576
                ],
                "x": [
                    641,
                    644,
                    646,
                    903,
                    648,
                    905,
                    1031,
                    657,
                    658,
                    665,
                    670,
                    672,
                    679,
                    1069,
                    1455,
                    1073,
                    1206,
                    951,
                    957,
                    576,
                    1345,
                    1094,
                    985,
                    1119,
                    1001,
                    1006,
                    1265,
                    884,
                    629,
                    886,
                    887,
                    1013,
                    890,
                    1019,
                    637,
                    895
                ],
                "leg.get_texts": [
                    576
                ],
                "reversed": [
                    580,
                    581
                ],
                "self.legend_title": [
                    586,
                    587
                ],
                "ax.legend": [
                    595,
                    590
                ],
                "ax.get_visible": [
                    594
                ],
                "ax.get_legend": [
                    601
                ],
                "_": [
                    604
                ],
                "ax.get_legend_handles_labels": [
                    604
                ],
                "other_ax": [
                    608,
                    611,
                    605,
                    607
                ],
                "getattr": [
                    695,
                    605,
                    693
                ],
                "other_leg": [
                    608,
                    609,
                    610,
                    606
                ],
                "other_ax.get_legend": [
                    608
                ],
                "cache_readonly": [
                    614
                ],
                "_need_to_set_index": [
                    620
                ],
                "self.data.index": [
                    641,
                    676,
                    677,
                    1503,
                    683,
                    623,
                    629,
                    639
                ],
                "is_datetype": [
                    624,
                    638
                ],
                "index.inferred_type": [
                    624
                ],
                "convert_period": [
                    627
                ],
                "ABCPeriodIndex": [
                    627
                ],
                "self.data.reindex": [
                    628
                ],
                "index.sort_values": [
                    628
                ],
                "_mpl_repr": [
                    629
                ],
                "self.data.index.to_timestamp": [
                    629
                ],
                "index.is_numeric": [
                    630
                ],
                "index._mpl_repr": [
                    637
                ],
                "notna": [
                    639
                ],
                "self.data.sort_index": [
                    640
                ],
                "self.data.index._mpl_repr": [
                    641
                ],
                "self._need_to_set_index": [
                    643,
                    1204
                ],
                "range": [
                    1428,
                    644,
                    646
                ],
                "mask": [
                    1408,
                    1409,
                    652,
                    653,
                    655,
                    1395,
                    1396
                ],
                "isna": [
                    652
                ],
                "y": [
                    896,
                    1272,
                    1408,
                    1409,
                    1284,
                    1273,
                    903,
                    904,
                    1031,
                    1401,
                    1415,
                    652,
                    654,
                    655,
                    1275,
                    665,
                    670,
                    672,
                    1455,
                    951,
                    1081,
                    957,
                    1345,
                    1095,
                    1360,
                    1489,
                    986,
                    1117,
                    1118,
                    1120,
                    1377,
                    1509,
                    1512,
                    1002,
                    1259,
                    1260,
                    1386,
                    1006,
                    1395,
                    884,
                    1013,
                    888,
                    889,
                    1019,
                    892,
                    1278
                ],
                "mask.any": [
                    653
                ],
                "np.ma.array": [
                    654
                ],
                "np.ma": [
                    654,
                    655
                ],
                "np.ma.masked_where": [
                    655
                ],
                "x._mpl_repr": [
                    658
                ],
                "is_errorbar": [
                    1099,
                    660,
                    1078
                ],
                "np.array": [
                    664,
                    1339,
                    1341,
                    662
                ],
                "kwds.get": [
                    664,
                    1514,
                    1373,
                    662
                ],
                "ax.errorbar": [
                    665,
                    1006
                ],
                "style": [
                    739,
                    741,
                    744,
                    1096,
                    747,
                    1265,
                    1119,
                    1145,
                    731,
                    1084,
                    669,
                    670,
                    735
                ],
                "args": [
                    672,
                    673,
                    670
                ],
                "ax.plot": [
                    673
                ],
                "classmethod": [
                    1186,
                    1123,
                    1156,
                    710,
                    650,
                    1453,
                    1167,
                    689,
                    1112,
                    1245,
                    1343
                ],
                "self.data.index.names": [
                    677
                ],
                "com.any_not_none": [
                    1078,
                    678
                ],
                "com": [
                    1078,
                    678
                ],
                "self.data.index.name": [
                    683
                ],
                "primary": [
                    692
                ],
                "i": [
                    1414,
                    1422,
                    1200,
                    1081,
                    1082,
                    1084,
                    700,
                    1086,
                    701,
                    702,
                    705,
                    1097,
                    1102,
                    1360,
                    1361,
                    1489,
                    1490,
                    724,
                    1366,
                    1368
                ],
                "self._maybe_right_yaxis": [
                    705,
                    701
                ],
                "ax.get_yaxis": [
                    707
                ],
                "plt.get_fignums": [
                    714
                ],
                "plt.rc_context": [
                    715
                ],
                "plt.gca": [
                    716
                ],
                "cls._get_ax_layer": [
                    717
                ],
                "cls": [
                    1120,
                    1284,
                    1259,
                    1260,
                    717,
                    1173,
                    1143,
                    1145,
                    1117,
                    1118
                ],
                "col_num": [
                    746,
                    735
                ],
                "IndexError": [
                    736
                ],
                "dict": [
                    738,
                    844,
                    1004,
                    785,
                    1369,
                    1087
                ],
                "self.style.get": [
                    739
                ],
                "has_color": [
                    745,
                    743
                ],
                "nocolor_style": [
                    744,
                    745
                ],
                "num_colors": [
                    754,
                    750,
                    751
                ],
                "_get_standard_colors": [
                    753
                ],
                "self.kwds.get": [
                    756
                ],
                "color_kwds": [
                    756
                ],
                "e": [
                    777,
                    778
                ],
                "e.reindex": [
                    777
                ],
                "data.index": [
                    777,
                    1069,
                    1200,
                    1426,
                    1145,
                    1147,
                    1212
                ],
                "ABCDataFrame": [
                    844,
                    781
                ],
                "match_labels": [
                    791,
                    783
                ],
                "np.atleast_2d": [
                    792,
                    804,
                    807,
                    799
                ],
                "np.tile": [
                    800,
                    793,
                    826,
                    829
                ],
                "str": [
                    796
                ],
                "evalues": [
                    797,
                    799
                ],
                "self.data.columns.drop": [
                    798
                ],
                "is_iterator": [
                    803
                ],
                "err_shape": [
                    816,
                    809,
                    814,
                    815
                ],
                "err.shape": [
                    809
                ],
                "err.ndim": [
                    812
                ],
                "is_number": [
                    828
                ],
                "errors": [
                    838,
                    853,
                    854,
                    1368,
                    1369,
                    1086,
                    1087
                ],
                "flag": [
                    840,
                    841
                ],
                "err.keys": [
                    845
                ],
                "get_axes": [
                    860
                ],
                "get_figure": [
                    860
                ],
                "Subplot": [
                    860
                ],
                "x_set": [
                    872,
                    865,
                    870
                ],
                "set": [
                    865,
                    866
                ],
                "y_set": [
                    872,
                    866,
                    871
                ],
                "points": [
                    932,
                    869,
                    870,
                    871,
                    934,
                    926
                ],
                "get_points": [
                    869,
                    926,
                    927
                ],
                "ax.get_position": [
                    869,
                    926
                ],
                "x_set.add": [
                    870
                ],
                "y_set.add": [
                    871
                ],
                "MPLPlot": [
                    1474,
                    1318,
                    875,
                    1039,
                    1265,
                    883,
                    1300,
                    1047,
                    1466,
                    1119
                ],
                "MPLPlot.__init__": [
                    1474,
                    883,
                    1318,
                    1047
                ],
                "kwargs": [
                    1314,
                    1315,
                    1474,
                    1317,
                    1318,
                    1322,
                    1327,
                    951,
                    1234,
                    883,
                    1236,
                    1013,
                    1047,
                    1309,
                    1310,
                    1311
                ],
                "is_integer": [
                    888,
                    1014,
                    886,
                    952
                ],
                "self.data.columns.holds_integer": [
                    888,
                    1014,
                    886,
                    952
                ],
                "_get_numeric_data": [
                    890,
                    892
                ],
                "self.x": [
                    903,
                    1019,
                    957,
                    895
                ],
                "self.y": [
                    896,
                    1019,
                    957,
                    903
                ],
                "ax.set_ylabel": [
                    904,
                    1493,
                    1463
                ],
                "ax.set_xlabel": [
                    905,
                    1227,
                    1441
                ],
                "img": [
                    920,
                    919
                ],
                "ax.collections": [
                    919
                ],
                "cbar": [
                    920,
                    929,
                    927
                ],
                "self.fig.colorbar": [
                    920
                ],
                "_mpl_ge_3_0_0": [
                    922
                ],
                "cbar_points": [
                    931,
                    933,
                    927
                ],
                "cbar.ax.get_position": [
                    927
                ],
                "cbar.ax": [
                    929,
                    927
                ],
                "cbar.ax.set_position": [
                    929
                ],
                "PlanePlot": [
                    1009,
                    943
                ],
                "_kind": [
                    1445,
                    1231,
                    944,
                    1040,
                    1010,
                    1301,
                    1467
                ],
                "__init__": [
                    1013,
                    951
                ],
                "super": [
                    1013,
                    951
                ],
                "c": [
                    960,
                    993,
                    969,
                    971,
                    976,
                    978,
                    952,
                    953,
                    954,
                    957
                ],
                "self.c": [
                    954,
                    957
                ],
                "c_is_column": [
                    960,
                    993,
                    963,
                    975
                ],
                "is_hashable": [
                    960
                ],
                "cb": [
                    992,
                    1024,
                    963,
                    1032
                ],
                "cmap": [
                    966,
                    967,
                    1031,
                    989,
                    1022,
                    1023
                ],
                "self.plt.cm.get_cmap": [
                    1023,
                    967
                ],
                "self.plt.cm": [
                    1023,
                    967
                ],
                "color": [
                    968,
                    969,
                    971,
                    973,
                    974
                ],
                "c_values": [
                    1027,
                    1029,
                    1031,
                    972,
                    974,
                    976,
                    978,
                    987
                ],
                "self.plt.rcParams": [
                    972
                ],
                "scatter": [
                    984,
                    1005,
                    997
                ],
                "ax.scatter": [
                    984
                ],
                "cbar_label": [
                    993,
                    994
                ],
                "self._plot_colorbar": [
                    1033,
                    994
                ],
                "self._add_legend_handle": [
                    1422,
                    997,
                    1102,
                    1527
                ],
                "errors_x": [
                    1001,
                    1003,
                    1004
                ],
                "self._get_errorbars": [
                    1368,
                    1001,
                    1002,
                    1086
                ],
                "errors_y": [
                    1002,
                    1003,
                    1004
                ],
                "err_kwds": [
                    1004,
                    1005,
                    1006
                ],
                "scatter.get_facecolor": [
                    1005
                ],
                "C": [
                    1026,
                    1029,
                    1014,
                    1015,
                    1016,
                    1019
                ],
                "self.C": [
                    1016,
                    1019
                ],
                "ax.hexbin": [
                    1031
                ],
                "self.stacked": [
                    1320,
                    1394,
                    1238,
                    1048,
                    1151
                ],
                "self.data.fillna": [
                    1049
                ],
                "self.x_compat": [
                    1056,
                    1050,
                    1052
                ],
                "plot_params": [
                    1050
                ],
                "self._use_dynamic_x": [
                    1056,
                    1211
                ],
                "_use_dynamic_x": [
                    1061
                ],
                "self._is_ts_plot": [
                    1064,
                    1104
                ],
                "_maybe_convert_index": [
                    1067
                ],
                "plotf": [
                    1074,
                    1092,
                    1070
                ],
                "self._ts_plot": [
                    1070
                ],
                "it": [
                    1081,
                    1075,
                    1071
                ],
                "self._iter_data": [
                    1360,
                    1489,
                    1075,
                    1071
                ],
                "self._get_xticks": [
                    1073
                ],
                "self._plot": [
                    1074,
                    1412,
                    1398,
                    1383
                ],
                "stacking_id": [
                    1284,
                    1158,
                    1164,
                    1165,
                    1169,
                    1173,
                    1176,
                    1178,
                    1188,
                    1191,
                    1193,
                    1077,
                    1098,
                    1117,
                    1118,
                    1120,
                    1259,
                    1260,
                    1271,
                    1274,
                    1276
                ],
                "self._get_stacking_id": [
                    1077
                ],
                "self.errors.values": [
                    1078
                ],
                "self._get_colors": [
                    1080,
                    1354,
                    1486
                ],
                "enumerate": [
                    1360,
                    1081,
                    1489
                ],
                "self.kwds.copy": [
                    1362,
                    1083,
                    1495
                ],
                "self._apply_style_colors": [
                    1084
                ],
                "newlines": [
                    1092,
                    1102
                ],
                "lines": [
                    1121,
                    1281,
                    1265,
                    1108,
                    1109,
                    1268,
                    1145,
                    1148,
                    1119
                ],
                "_get_all_lines": [
                    1108
                ],
                "left": [
                    1109,
                    1110
                ],
                "right": [
                    1109,
                    1110
                ],
                "_get_xlim": [
                    1109
                ],
                "column_num": [
                    1258,
                    1116
                ],
                "cls._initialize_stacker": [
                    1259,
                    1117,
                    1173
                ],
                "y_values": [
                    1283,
                    1260,
                    1265,
                    1268,
                    1118,
                    1119
                ],
                "cls._get_stacked_values": [
                    1260,
                    1118
                ],
                "MPLPlot._plot": [
                    1265,
                    1119
                ],
                "cls._update_stacker": [
                    1120,
                    1284
                ],
                "freq": [
                    1137,
                    1142,
                    1140,
                    1134
                ],
                "_maybe_resample": [
                    1134
                ],
                "_decorate_axes": [
                    1137,
                    1140,
                    1142
                ],
                "ax.left_ax": [
                    1140
                ],
                "ax._plot_data.append": [
                    1143
                ],
                "ax._plot_data": [
                    1143
                ],
                "cls._kind": [
                    1143
                ],
                "cls._plot": [
                    1145
                ],
                "data.values": [
                    1145
                ],
                "format_dateaxis": [
                    1147
                ],
                "ax.freq": [
                    1147
                ],
                "id": [
                    1152
                ],
                "ax._stacker_pos_prior": [
                    1191,
                    1161,
                    1164,
                    1176,
                    1274
                ],
                "ax._stacker_neg_prior": [
                    1193,
                    1163,
                    1165,
                    1178,
                    1276
                ],
                "np.zeros": [
                    1164,
                    1165,
                    1357,
                    1272,
                    1278
                ],
                "n": [
                    1164,
                    1165
                ],
                "all": [
                    1377,
                    1273,
                    1190,
                    1192,
                    1294,
                    1296,
                    1175,
                    1177,
                    1275
                ],
                "Exception": [
                    1201
                ],
                "ax.get_xticks": [
                    1205
                ],
                "xticklabels": [
                    1206,
                    1207
                ],
                "get_label": [
                    1206
                ],
                "ax.set_xticklabels": [
                    1439,
                    1207
                ],
                "ax.xaxis.set_major_locator": [
                    1208
                ],
                "FixedLocator": [
                    1208
                ],
                "condition": [
                    1210,
                    1219
                ],
                "data.index.is_all_dates": [
                    1212
                ],
                "index_name": [
                    1217,
                    1226,
                    1227
                ],
                "self._get_index_name": [
                    1217,
                    1429
                ],
                "format_date_labels": [
                    1224
                ],
                "LinePlot": [
                    1291,
                    1236,
                    1230
                ],
                "kwargs.setdefault": [
                    1234,
                    1311
                ],
                "LinePlot.__init__": [
                    1236
                ],
                "self.kwds.setdefault": [
                    1240,
                    1487
                ],
                "line_kwds": [
                    1264,
                    1265,
                    1263
                ],
                "kwds.copy": [
                    1263
                ],
                "line_kwds.pop": [
                    1264
                ],
                "xdata": [
                    1283,
                    1268
                ],
                "get_data": [
                    1268
                ],
                "start": [
                    1376,
                    1345,
                    1378,
                    1283,
                    1379,
                    1417,
                    1388,
                    1455,
                    1396,
                    1272,
                    1274,
                    1403,
                    1276,
                    1278
                ],
                "get_color": [
                    1281
                ],
                "rect": [
                    1283,
                    1412,
                    1383,
                    1287,
                    1422,
                    1398
                ],
                "ax.fill_between": [
                    1283
                ],
                "res": [
                    1288,
                    1287
                ],
                "LinePlot._post_plot_logic": [
                    1291
                ],
                "self._is_series": [
                    1363,
                    1308
                ],
                "self.bar_width": [
                    1411,
                    1382,
                    1321,
                    1323,
                    1387,
                    1328,
                    1329,
                    1332,
                    1397,
                    1432,
                    1402,
                    1309
                ],
                "kwargs.pop": [
                    1314,
                    1315,
                    1317,
                    1309,
                    1310
                ],
                "pos": [
                    1321,
                    1332,
                    1310,
                    1329
                ],
                "self.tick_pos": [
                    1312,
                    1460,
                    1438,
                    1335
                ],
                "np.arange": [
                    1312
                ],
                "self.bottom": [
                    1314,
                    1339,
                    1338,
                    1349
                ],
                "self.left": [
                    1451,
                    1315,
                    1340,
                    1341
                ],
                "self.log": [
                    1377,
                    1317,
                    1419,
                    1390,
                    1405
                ],
                "self.tickoffset": [
                    1321,
                    1332,
                    1335,
                    1329
                ],
                "self.lim_offset": [
                    1323,
                    1325,
                    1330,
                    1333,
                    1431,
                    1432
                ],
                "w": [
                    1345,
                    1411,
                    1382,
                    1414,
                    1416,
                    1385,
                    1455,
                    1328,
                    1329,
                    1330,
                    1397,
                    1400
                ],
                "self.ax_pos": [
                    1432,
                    1414,
                    1385,
                    1431,
                    1400,
                    1335
                ],
                "ax.bar": [
                    1345
                ],
                "log": [
                    1345,
                    1455
                ],
                "ncolors": [
                    1355,
                    1366
                ],
                "pos_prior": [
                    1408,
                    1396,
                    1357
                ],
                "neg_prior": [
                    1409,
                    1396,
                    1357
                ],
                "K": [
                    1411,
                    1358
                ],
                "mpl.rcParams": [
                    1374
                ],
                "mpl": [
                    1374
                ],
                "self._start_base": [
                    1379,
                    1396
                ],
                "np.where": [
                    1408,
                    1409,
                    1396
                ],
                "str_index": [
                    1426,
                    1428,
                    1434
                ],
                "key": [
                    1426,
                    1428
                ],
                "data.shape": [
                    1428
                ],
                "s_edge": [
                    1434,
                    1431
                ],
                "e_edge": [
                    1432,
                    1434
                ],
                "self._decorate_ticks": [
                    1434
                ],
                "start_edge": [
                    1459,
                    1437
                ],
                "end_edge": [
                    1459,
                    1437
                ],
                "ticklabels": [
                    1461,
                    1439
                ],
                "BarPlot": [
                    1444
                ],
                "ax.barh": [
                    1455
                ],
                "ax.set_yticklabels": [
                    1461
                ],
                "any": [
                    1472
                ],
                "idx": [
                    1504,
                    1525,
                    1503
                ],
                "v": [
                    1503
                ],
                "blabels": [
                    1512,
                    1509,
                    1511
                ],
                "blank_labeler": [
                    1509
                ],
                "l": [
                    1509,
                    1526,
                    1527
                ],
                "results": [
                    1512,
                    1515,
                    1517
                ],
                "ax.pie": [
                    1512
                ],
                "patches": [
                    1515,
                    1517,
                    1526
                ],
                "texts": [
                    1521,
                    1515,
                    1517
                ],
                "autotexts": [
                    1521,
                    1515,
                    1518
                ],
                "t": [
                    1521,
                    1522
                ],
                "t.set_fontsize": [
                    1522
                ],
                "leglabels": [
                    1525,
                    1526
                ],
                "p": [
                    1526,
                    1527
                ]
            },
            "filtered_variables_in_file": {
                "get_option": [
                    44
                ],
                "converter.register": [
                    45
                ],
                "converter": [
                    115,
                    45
                ],
                "_layout_type": [
                    880,
                    1468,
                    63
                ],
                "_default_rot": [
                    64,
                    1041,
                    1446,
                    1302
                ],
                "orientation": [
                    65,
                    1042,
                    1447,
                    1303
                ],
                "_pop_attributes": [
                    66
                ],
                "_attr_defaults": [
                    75
                ],
                "converter._WARN": [
                    115
                ],
                "self.data": [
                    640,
                    641,
                    1152,
                    1019,
                    394,
                    271,
                    783,
                    274,
                    791,
                    1049,
                    797,
                    798,
                    289,
                    290,
                    547,
                    548,
                    676,
                    677,
                    1061,
                    553,
                    683,
                    1067,
                    816,
                    435,
                    820,
                    952,
                    953,
                    444,
                    829,
                    957,
                    960,
                    1357,
                    1486,
                    976,
                    724,
                    1503,
                    623,
                    887,
                    1015,
                    116,
                    628,
                    629,
                    886,
                    888,
                    889,
                    890,
                    1014,
                    892,
                    253,
                    639
                ],
                "self": [
                    116,
                    117,
                    119,
                    121,
                    123,
                    127,
                    131,
                    133,
                    135,
                    136,
                    137,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    146,
                    149,
                    152,
                    154,
                    155,
                    160,
                    161,
                    162,
                    163,
                    165,
                    166,
                    167,
                    169,
                    170,
                    171,
                    176,
                    177,
                    183,
                    190,
                    192,
                    194,
                    195,
                    197,
                    199,
                    202,
                    209,
                    210,
                    213,
                    214,
                    215,
                    218,
                    221,
                    222,
                    223,
                    224,
                    227,
                    230,
                    231,
                    236,
                    237,
                    238,
                    240,
                    253,
                    271,
                    274,
                    277,
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    288,
                    289,
                    290,
                    300,
                    302,
                    318,
                    321,
                    323,
                    328,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    339,
                    340,
                    343,
                    344,
                    345,
                    346,
                    351,
                    359,
                    361,
                    364,
                    366,
                    369,
                    370,
                    377,
                    378,
                    379,
                    381,
                    383,
                    385,
                    389,
                    391,
                    394,
                    397,
                    408,
                    413,
                    435,
                    438,
                    441,
                    443,
                    444,
                    446,
                    447,
                    453,
                    454,
                    455,
                    458,
                    460,
                    461,
                    462,
                    465,
                    475,
                    476,
                    477,
                    484,
                    485,
                    488,
                    489,
                    490,
                    492,
                    493,
                    495,
                    496,
                    498,
                    499,
                    501,
                    503,
                    504,
                    505,
                    506,
                    513,
                    516,
                    519,
                    521,
                    527,
                    547,
                    548,
                    553,
                    558,
                    559,
                    561,
                    562,
                    565,
                    571,
                    578,
                    579,
                    580,
                    581,
                    583,
                    584,
                    586,
                    587,
                    592,
                    593,
                    623,
                    626,
                    628,
                    629,
                    639,
                    640,
                    641,
                    643,
                    676,
                    677,
                    683,
                    699,
                    700,
                    701,
                    702,
                    704,
                    705,
                    720,
                    721,
                    723,
                    724,
                    732,
                    733,
                    735,
                    738,
                    739,
                    741,
                    743,
                    745,
                    751,
                    755,
                    756,
                    783,
                    791,
                    793,
                    797,
                    798,
                    800,
                    814,
                    816,
                    820,
                    826,
                    829,
                    842,
                    860,
                    864,
                    883,
                    885,
                    886,
                    887,
                    888,
                    889,
                    890,
                    891,
                    892,
                    893,
                    895,
                    896,
                    903,
                    920,
                    952,
                    953,
                    954,
                    957,
                    958,
                    960,
                    963,
                    966,
                    967,
                    968,
                    972,
                    976,
                    980,
                    981,
                    990,
                    994,
                    997,
                    999,
                    1001,
                    1002,
                    1014,
                    1015,
                    1016,
                    1019,
                    1020,
                    1022,
                    1023,
                    1024,
                    1031,
                    1033,
                    1047,
                    1048,
                    1049,
                    1050,
                    1051,
                    1052,
                    1056,
                    1061,
                    1064,
                    1067,
                    1070,
                    1071,
                    1073,
                    1074,
                    1075,
                    1077,
                    1078,
                    1080,
                    1082,
                    1083,
                    1084,
                    1086,
                    1102,
                    1104,
                    1151,
                    1152,
                    1204,
                    1211,
                    1213,
                    1214,
                    1217,
                    1222,
                    1223,
                    1224,
                    1226,
                    1236,
                    1238,
                    1240,
                    1242,
                    1291,
                    1293,
                    1308,
                    1309,
                    1312,
                    1314,
                    1315,
                    1317,
                    1318,
                    1320,
                    1321,
                    1323,
                    1325,
                    1328,
                    1329,
                    1330,
                    1332,
                    1333,
                    1335,
                    1338,
                    1339,
                    1340,
                    1341,
                    1349,
                    1354,
                    1357,
                    1358,
                    1360,
                    1361,
                    1362,
                    1363,
                    1368,
                    1377,
                    1379,
                    1381,
                    1382,
                    1383,
                    1385,
                    1387,
                    1390,
                    1394,
                    1396,
                    1397,
                    1398,
                    1400,
                    1402,
                    1405,
                    1411,
                    1412,
                    1414,
                    1419,
                    1422,
                    1425,
                    1429,
                    1431,
                    1432,
                    1434,
                    1438,
                    1440,
                    1451,
                    1460,
                    1462,
                    1474,
                    1477,
                    1478,
                    1479,
                    1480,
                    1486,
                    1487,
                    1489,
                    1490,
                    1495,
                    1503,
                    1520,
                    1522,
                    1527
                ],
                "data": [
                    1029,
                    263,
                    1031,
                    777,
                    394,
                    1147,
                    396,
                    1291,
                    398,
                    1294,
                    400,
                    1296,
                    1426,
                    404,
                    1428,
                    1047,
                    1308,
                    1312,
                    418,
                    1318,
                    1067,
                    1069,
                    1071,
                    1200,
                    951,
                    444,
                    957,
                    446,
                    1212,
                    448,
                    1471,
                    1472,
                    1474,
                    1235,
                    1236,
                    985,
                    986,
                    1006,
                    1134,
                    883,
                    116,
                    1013,
                    1143,
                    1145,
                    1019,
                    252,
                    253,
                    255
                ],
                "self.by": [
                    117
                ],
                "by": [
                    117
                ],
                "self.kind": [
                    119
                ],
                "kind": [
                    1473,
                    1474,
                    119
                ],
                "self.sort_columns": [
                    121
                ],
                "sort_columns": [
                    121
                ],
                "self.subplots": [
                    1381,
                    328,
                    745,
                    1320,
                    592,
                    1213,
                    504,
                    377,
                    123,
                    1214,
                    699,
                    571
                ],
                "subplots": [
                    123
                ],
                "sharex": [
                    125,
                    133
                ],
                "ax": [
                    516,
                    517,
                    1031,
                    1033,
                    565,
                    1082,
                    1093,
                    590,
                    593,
                    594,
                    595,
                    1108,
                    1110,
                    601,
                    604,
                    605,
                    1117,
                    1118,
                    1119,
                    1120,
                    611,
                    612,
                    1134,
                    1137,
                    1139,
                    1140,
                    1141,
                    1142,
                    1143,
                    1145,
                    1147,
                    126,
                    1160,
                    1161,
                    1162,
                    1163,
                    1164,
                    1165,
                    1171,
                    1173,
                    1176,
                    665,
                    1178,
                    673,
                    1191,
                    169,
                    1193,
                    693,
                    1205,
                    695,
                    1207,
                    1208,
                    700,
                    701,
                    702,
                    704,
                    705,
                    707,
                    708,
                    1224,
                    714,
                    1227,
                    716,
                    717,
                    1259,
                    1260,
                    1265,
                    1274,
                    1276,
                    1283,
                    1284,
                    1291,
                    1295,
                    1297,
                    288,
                    289,
                    290,
                    297,
                    302,
                    304,
                    306,
                    307,
                    309,
                    312,
                    1345,
                    1361,
                    860,
                    867,
                    869,
                    1384,
                    1393,
                    1399,
                    1413,
                    904,
                    905,
                    919,
                    920,
                    1434,
                    1437,
                    926,
                    1438,
                    1439,
                    1441,
                    1455,
                    1459,
                    1460,
                    1461,
                    1463,
                    958,
                    447,
                    448,
                    454,
                    455,
                    457,
                    458,
                    461,
                    462,
                    464,
                    465,
                    1490,
                    1493,
                    984,
                    994,
                    488,
                    1512,
                    490,
                    493,
                    1006,
                    496,
                    499,
                    501,
                    1020
                ],
                "self.sharex": [
                    131,
                    484,
                    133,
                    331,
                    1214,
                    127
                ],
                "self.sharey": [
                    332,
                    485,
                    135
                ],
                "sharey": [
                    135
                ],
                "self.figsize": [
                    136,
                    333,
                    340,
                    344,
                    345
                ],
                "figsize": [
                    136
                ],
                "self.layout": [
                    137,
                    378,
                    379,
                    335
                ],
                "layout": [
                    137
                ],
                "self.xticks": [
                    139,
                    492,
                    493
                ],
                "xticks": [
                    1208,
                    139,
                    1205,
                    1206
                ],
                "self.yticks": [
                    489,
                    490,
                    140
                ],
                "yticks": [
                    140
                ],
                "self.xlim": [
                    498,
                    499,
                    141
                ],
                "xlim": [
                    141
                ],
                "self.ylim": [
                    496,
                    1293,
                    142,
                    495
                ],
                "ylim": [
                    142
                ],
                "self.title": [
                    513,
                    516,
                    519,
                    521,
                    143,
                    527,
                    503,
                    505,
                    506
                ],
                "title": [
                    516,
                    517,
                    587,
                    590,
                    143,
                    569,
                    573
                ],
                "self.use_index": [
                    1056,
                    1440,
                    1226,
                    144,
                    1425,
                    626,
                    1462
                ],
                "use_index": [
                    144
                ],
                "self.fontsize": [
                    454,
                    455,
                    458,
                    461,
                    462,
                    1520,
                    465,
                    146,
                    1522
                ],
                "fontsize": [
                    536,
                    146,
                    542,
                    543
                ],
                "rot": [
                    148,
                    149,
                    536,
                    540,
                    541
                ],
                "self.rot": [
                    454,
                    1223,
                    1224,
                    461,
                    149,
                    155
                ],
                "self._rot_set": [
                    152,
                    154,
                    1222
                ],
                "self._default_rot": [
                    155
                ],
                "grid": [
                    160,
                    157,
                    158
                ],
                "secondary_y": [
                    182,
                    181,
                    158,
                    183
                ],
                "plt.rcParams": [
                    158
                ],
                "plt": [
                    714,
                    618,
                    715,
                    716,
                    158
                ],
                "self.grid": [
                    160,
                    1477,
                    501
                ],
                "self.legend": [
                    161,
                    578,
                    579,
                    999,
                    592,
                    980
                ],
                "legend": [
                    161
                ],
                "self.legend_handles": [
                    561,
                    162,
                    580,
                    583
                ],
                "self.legend_labels": [
                    584,
                    562,
                    163,
                    581
                ],
                "attr": [
                    165,
                    166,
                    167
                ],
                "self._pop_attributes": [
                    165
                ],
                "value": [
                    1498,
                    1509,
                    166,
                    167
                ],
                "kwds.pop": [
                    1504,
                    166,
                    174,
                    175,
                    190
                ],
                "kwds": [
                    1280,
                    1281,
                    1283,
                    1420,
                    661,
                    662,
                    663,
                    664,
                    665,
                    920,
                    673,
                    166,
                    174,
                    175,
                    1455,
                    1083,
                    187,
                    1084,
                    189,
                    190,
                    1087,
                    1345,
                    1090,
                    197,
                    1100,
                    1362,
                    1364,
                    1366,
                    1495,
                    1369,
                    1373,
                    1118,
                    1119,
                    1374,
                    1504,
                    743,
                    1512,
                    746,
                    747,
                    1260,
                    1514,
                    1134,
                    1263,
                    1391,
                    1137,
                    1140,
                    1142,
                    1143,
                    1145,
                    1406
                ],
                "self._attr_defaults.get": [
                    166
                ],
                "self._attr_defaults": [
                    166
                ],
                "self.ax": [
                    169,
                    334,
                    378,
                    339,
                    343,
                    346
                ],
                "self.fig": [
                    920,
                    369,
                    170,
                    519
                ],
                "fig": [
                    329,
                    170,
                    369,
                    340,
                    341,
                    343,
                    345
                ],
                "self.axes": [
                    516,
                    389,
                    391,
                    527,
                    288,
                    171,
                    565,
                    700,
                    958,
                    702,
                    704,
                    593,
                    475,
                    860,
                    488,
                    370,
                    379,
                    1020,
                    381
                ],
                "xerr": [
                    840,
                    178,
                    174
                ],
                "yerr": [
                    840,
                    178,
                    175
                ],
                "self.errors": [
                    176,
                    842,
                    1078
                ],
                "kw": [
                    840,
                    842,
                    177,
                    178,
                    853
                ],
                "self._parse_errorbars": [
                    177
                ],
                "err": [
                    773,
                    781,
                    783,
                    785,
                    789,
                    791,
                    792,
                    793,
                    796,
                    797,
                    798,
                    799,
                    800,
                    802,
                    803,
                    804,
                    807,
                    809,
                    812,
                    177,
                    178,
                    825,
                    826,
                    828,
                    829,
                    835,
                    842,
                    844,
                    845,
                    846,
                    848,
                    849,
                    850,
                    852,
                    853
                ],
                "np.ndarray": [
                    723,
                    181
                ],
                "np": [
                    1408,
                    1409,
                    1164,
                    1165,
                    654,
                    655,
                    405,
                    662,
                    792,
                    664,
                    409,
                    793,
                    799,
                    800,
                    415,
                    1312,
                    804,
                    807,
                    433,
                    181,
                    826,
                    1339,
                    829,
                    1341,
                    1357,
                    723,
                    1396,
                    1272,
                    1278
                ],
                "ABCIndexClass": [
                    657,
                    723,
                    181
                ],
                "self.secondary_y": [
                    385,
                    720,
                    721,
                    723,
                    724,
                    183,
                    383
                ],
                "colormap": [
                    192,
                    187
                ],
                "self.colormap": [
                    192,
                    963,
                    966,
                    743,
                    231,
                    755,
                    1022,
                    190
                ],
                "self.table": [
                    441,
                    194,
                    443,
                    446
                ],
                "table": [
                    448,
                    194
                ],
                "self.include_bool": [
                    408,
                    195
                ],
                "include_bool": [
                    195
                ],
                "self.kwds": [
                    1024,
                    1031,
                    1051,
                    1052,
                    1083,
                    963,
                    197,
                    968,
                    202,
                    1487,
                    209,
                    210,
                    1362,
                    213,
                    215,
                    1240,
                    1495,
                    218,
                    221,
                    990,
                    222,
                    224,
                    227,
                    230,
                    236,
                    756
                ],
                "self._validate_color_args": [
                    199
                ],
                "warnings.warn": [
                    232,
                    203
                ],
                "warnings": [
                    232,
                    203
                ],
                "colors": [
                    746,
                    1354,
                    1355,
                    1486,
                    1487,
                    209,
                    210,
                    1364,
                    1366,
                    1080,
                    1084
                ],
                "self.kwds.pop": [
                    1024,
                    963,
                    968,
                    209,
                    1052
                ],
                "self.nseries": [
                    800,
                    385,
                    513,
                    330,
                    814,
                    751,
                    1328,
                    1358,
                    820,
                    214,
                    793,
                    506,
                    826,
                    829,
                    223
                ],
                "is_list_like": [
                    385,
                    802,
                    521,
                    1338,
                    237,
                    215,
                    505,
                    378,
                    1340
                ],
                "self.style": [
                    738,
                    739,
                    741,
                    236,
                    237,
                    238,
                    240,
                    732,
                    733,
                    735
                ],
                "styles": [
                    240,
                    242,
                    238
                ],
                "s": [
                    242,
                    243,
                    947,
                    950,
                    951
                ],
                "re.match": [
                    744,
                    243
                ],
                "re": [
                    744,
                    243
                ],
                "fillna": [
                    254,
                    255
                ],
                "data.fillna": [
                    1471,
                    1235,
                    255
                ],
                "col": [
                    263,
                    265,
                    267,
                    432,
                    433
                ],
                "values": [
                    1029,
                    263,
                    1031,
                    265,
                    267,
                    1170,
                    1173,
                    1175,
                    1176,
                    1177,
                    1178,
                    797,
                    1190,
                    1191,
                    1192,
                    1193,
                    976,
                    985,
                    986,
                    1006
                ],
                "data.items": [
                    263
                ],
                "keep_index": [
                    264
                ],
                "values.values": [
                    267
                ],
                "self.data.ndim": [
                    271
                ],
                "self.data.shape": [
                    274
                ],
                "self.plt.draw_if_interactive": [
                    277
                ],
                "self.plt": [
                    967,
                    972,
                    340,
                    277,
                    1023
                ],
                "self._args_adjust": [
                    280
                ],
                "self._compute_plot_data": [
                    281
                ],
                "self._setup_subplots": [
                    282
                ],
                "self._make_plot": [
                    283
                ],
                "self._add_table": [
                    284
                ],
                "self._make_legend": [
                    285
                ],
                "self._adorn_subplots": [
                    286
                ],
                "self._post_plot_logic_common": [
                    289
                ],
                "self._post_plot_logic": [
                    290
                ],
                "ax.lines": [
                    297
                ],
                "ax.artists": [
                    297
                ],
                "ax.containers": [
                    297
                ],
                "self.on_right": [
                    300,
                    559
                ],
                "axes_num": [
                    300
                ],
                "self._get_ax_layer": [
                    389,
                    302
                ],
                "ax.right_ax": [
                    458,
                    306,
                    465,
                    1142
                ],
                "orig_ax": [
                    312,
                    314,
                    315,
                    316,
                    318,
                    319
                ],
                "new_ax": [
                    322,
                    324,
                    325,
                    312,
                    314,
                    315,
                    316
                ],
                "ax.twinx": [
                    312
                ],
                "new_ax._get_lines": [
                    314
                ],
                "orig_ax._get_lines": [
                    314
                ],
                "new_ax._get_patches_for_fill": [
                    315
                ],
                "orig_ax._get_patches_for_fill": [
                    315
                ],
                "orig_ax.right_ax": [
                    316
                ],
                "new_ax.left_ax": [
                    316
                ],
                "self._has_plotted_object": [
                    318
                ],
                "set_visible": [
                    707,
                    319
                ],
                "orig_ax.get_yaxis": [
                    319
                ],
                "self.logy": [
                    321,
                    323,
                    1478,
                    364,
                    366,
                    1242,
                    351
                ],
                "self.loglog": [
                    321,
                    323,
                    359,
                    1480,
                    361,
                    364,
                    366,
                    1242,
                    351
                ],
                "new_ax.set_yscale": [
                    322,
                    324
                ],
                "axes": [
                    864,
                    867,
                    360,
                    329,
                    362,
                    365,
                    367,
                    370,
                    341,
                    346,
                    348
                ],
                "_subplots": [
                    329
                ],
                "self._layout_type": [
                    336
                ],
                "self.plt.figure": [
                    340
                ],
                "fig.add_subplot": [
                    341
                ],
                "self.ax.get_figure": [
                    343
                ],
                "fig.set_size_inches": [
                    345
                ],
                "_flatten": [
                    348
                ],
                "valid_log": [
                    352,
                    353,
                    350
                ],
                "input_log": [
                    352,
                    353,
                    351
                ],
                "self.logx": [
                    361,
                    1479,
                    359,
                    351
                ],
                "invalid_log": [
                    353,
                    356
                ],
                "a.set_xscale": [
                    360,
                    362
                ],
                "a": [
                    360,
                    362,
                    365,
                    367
                ],
                "a.set_yscale": [
                    365,
                    367
                ],
                "self.axes.reshape": [
                    379
                ],
                "sec_true": [
                    387,
                    383
                ],
                "all_sec": [
                    384,
                    387
                ],
                "ABCSeries": [
                    1308,
                    396,
                    789
                ],
                "label": [
                    1418,
                    397,
                    398,
                    399,
                    400,
                    1422,
                    539,
                    541,
                    543,
                    1183,
                    557,
                    560,
                    562,
                    1081,
                    1084,
                    1086,
                    832,
                    1089,
                    1090,
                    845,
                    846,
                    1102,
                    1360,
                    1489,
                    1491,
                    1492,
                    981,
                    1493,
                    983,
                    1368,
                    1371,
                    988,
                    1501,
                    739,
                    996,
                    997,
                    1389,
                    1393,
                    1404
                ],
                "self.label": [
                    981,
                    397
                ],
                "data.name": [
                    398
                ],
                "data.to_frame": [
                    400
                ],
                "data._convert": [
                    404
                ],
                "include_type": [
                    409,
                    418,
                    405,
                    415
                ],
                "np.number": [
                    405,
                    415
                ],
                "include_type.append": [
                    409
                ],
                "np.bool_": [
                    409
                ],
                "exclude_type": [
                    416,
                    418,
                    412
                ],
                "self._kind": [
                    893,
                    885,
                    891,
                    413
                ],
                "numeric_data": [
                    418,
                    421,
                    423,
                    431,
                    432,
                    433,
                    435
                ],
                "data.select_dtypes": [
                    418
                ],
                "is_empty": [
                    426,
                    421,
                    423
                ],
                "numeric_data.columns.empty": [
                    421
                ],
                "numeric_data.columns": [
                    421
                ],
                "numeric_data.copy": [
                    431
                ],
                "np.asarray": [
                    433
                ],
                "AbstractMethodError": [
                    438
                ],
                "self.data.transpose": [
                    444
                ],
                "self._get_ax": [
                    1061,
                    1067,
                    1361,
                    1490,
                    1082,
                    447
                ],
                "self.orientation": [
                    460,
                    453
                ],
                "self._apply_axis_properties": [
                    454,
                    455,
                    458,
                    461,
                    462,
                    465
                ],
                "ax.xaxis": [
                    1208,
                    462,
                    454
                ],
                "ax.yaxis": [
                    461,
                    455
                ],
                "ax.right_ax.yaxis": [
                    465,
                    458
                ],
                "all_axes": [
                    480,
                    476,
                    479
                ],
                "self._get_subplots": [
                    864,
                    476
                ],
                "nrows": [
                    481,
                    482,
                    477
                ],
                "ncols": [
                    481,
                    483,
                    477
                ],
                "self._get_axes_layout": [
                    477
                ],
                "_handle_shared_axes": [
                    478
                ],
                "ax.set_yticks": [
                    490,
                    1460
                ],
                "ax.set_xticks": [
                    493,
                    1438
                ],
                "ax.set_ylim": [
                    496,
                    1297,
                    1459,
                    1295
                ],
                "ax.set_xlim": [
                    499,
                    1437,
                    1110
                ],
                "ax.grid": [
                    501
                ],
                "msg": [
                    832,
                    833,
                    514,
                    522,
                    526,
                    818,
                    822,
                    507
                ],
                "ax.set_title": [
                    1393,
                    517
                ],
                "self.fig.suptitle": [
                    519
                ],
                "set_title": [
                    527
                ],
                "labels": [
                    576,
                    1504,
                    1508,
                    1509,
                    584,
                    590,
                    1525,
                    568,
                    538,
                    539
                ],
                "axis.get_majorticklabels": [
                    538
                ],
                "axis": [
                    538
                ],
                "axis.get_minorticklabels": [
                    538
                ],
                "label.set_rotation": [
                    541
                ],
                "label.set_fontsize": [
                    543
                ],
                "self.data.columns": [
                    960,
                    547,
                    548,
                    553,
                    1015,
                    724,
                    886,
                    887,
                    888,
                    889,
                    952,
                    953,
                    1014,
                    798
                ],
                "ABCMultiIndex": [
                    547,
                    676
                ],
                "name": [
                    1440,
                    1441,
                    548,
                    677,
                    549,
                    550,
                    551,
                    678,
                    679,
                    681,
                    683,
                    684,
                    685,
                    687,
                    1429,
                    1462,
                    1463,
                    1434
                ],
                "self.data.columns.name": [
                    548
                ],
                "pprint_thing": [
                    1089,
                    550,
                    679,
                    904,
                    553,
                    905,
                    685,
                    1200,
                    1426,
                    1428,
                    1492,
                    1371,
                    1503
                ],
                "stringified": [
                    553,
                    554
                ],
                "self.data.columns.names": [
                    553
                ],
                "join": [
                    554,
                    679
                ],
                "self.mark_right": [
                    558
                ],
                "index": [
                    644,
                    646,
                    558,
                    623,
                    624,
                    559,
                    849,
                    627,
                    628,
                    850,
                    630,
                    637
                ],
                "self.legend_handles.append": [
                    561
                ],
                "handle": [
                    612,
                    561,
                    565,
                    604,
                    575
                ],
                "self.legend_labels.append": [
                    562
                ],
                "leg": [
                    576,
                    609,
                    610,
                    612,
                    565,
                    601,
                    572,
                    573
                ],
                "self._get_ax_legend_handle": [
                    565
                ],
                "handles": [
                    583,
                    589,
                    590,
                    567,
                    575
                ],
                "get_text": [
                    573
                ],
                "leg.get_title": [
                    573
                ],
                "handles.extend": [
                    575
                ],
                "x.get_text": [
                    576
                ],
                "x": [
                    641,
                    644,
                    646,
                    903,
                    648,
                    905,
                    1031,
                    657,
                    658,
                    665,
                    670,
                    672,
                    679,
                    1069,
                    1455,
                    1073,
                    1206,
                    951,
                    957,
                    576,
                    1345,
                    1094,
                    985,
                    1119,
                    1001,
                    1006,
                    1265,
                    884,
                    629,
                    886,
                    887,
                    1013,
                    890,
                    1019,
                    637,
                    895
                ],
                "leg.get_texts": [
                    576
                ],
                "self.legend_title": [
                    586,
                    587
                ],
                "ax.legend": [
                    595,
                    590
                ],
                "ax.get_visible": [
                    594
                ],
                "ax.get_legend": [
                    601
                ],
                "_": [
                    604
                ],
                "ax.get_legend_handles_labels": [
                    604
                ],
                "other_ax": [
                    608,
                    611,
                    605,
                    607
                ],
                "other_leg": [
                    608,
                    609,
                    610,
                    606
                ],
                "other_ax.get_legend": [
                    608
                ],
                "cache_readonly": [
                    614
                ],
                "_need_to_set_index": [
                    620
                ],
                "self.data.index": [
                    641,
                    676,
                    677,
                    1503,
                    683,
                    623,
                    629,
                    639
                ],
                "is_datetype": [
                    624,
                    638
                ],
                "index.inferred_type": [
                    624
                ],
                "convert_period": [
                    627
                ],
                "ABCPeriodIndex": [
                    627
                ],
                "self.data.reindex": [
                    628
                ],
                "index.sort_values": [
                    628
                ],
                "_mpl_repr": [
                    629
                ],
                "self.data.index.to_timestamp": [
                    629
                ],
                "index.is_numeric": [
                    630
                ],
                "index._mpl_repr": [
                    637
                ],
                "notna": [
                    639
                ],
                "self.data.sort_index": [
                    640
                ],
                "self.data.index._mpl_repr": [
                    641
                ],
                "self._need_to_set_index": [
                    643,
                    1204
                ],
                "mask": [
                    1408,
                    1409,
                    652,
                    653,
                    655,
                    1395,
                    1396
                ],
                "isna": [
                    652
                ],
                "y": [
                    896,
                    1272,
                    1408,
                    1409,
                    1284,
                    1273,
                    903,
                    904,
                    1031,
                    1401,
                    1415,
                    652,
                    654,
                    655,
                    1275,
                    665,
                    670,
                    672,
                    1455,
                    951,
                    1081,
                    957,
                    1345,
                    1095,
                    1360,
                    1489,
                    986,
                    1117,
                    1118,
                    1120,
                    1377,
                    1509,
                    1512,
                    1002,
                    1259,
                    1260,
                    1386,
                    1006,
                    1395,
                    884,
                    1013,
                    888,
                    889,
                    1019,
                    892,
                    1278
                ],
                "mask.any": [
                    653
                ],
                "np.ma.array": [
                    654
                ],
                "np.ma": [
                    654,
                    655
                ],
                "np.ma.masked_where": [
                    655
                ],
                "x._mpl_repr": [
                    658
                ],
                "is_errorbar": [
                    1099,
                    660,
                    1078
                ],
                "np.array": [
                    664,
                    1339,
                    1341,
                    662
                ],
                "kwds.get": [
                    664,
                    1514,
                    1373,
                    662
                ],
                "ax.errorbar": [
                    665,
                    1006
                ],
                "style": [
                    739,
                    741,
                    744,
                    1096,
                    747,
                    1265,
                    1119,
                    1145,
                    731,
                    1084,
                    669,
                    670,
                    735
                ],
                "args": [
                    672,
                    673,
                    670
                ],
                "ax.plot": [
                    673
                ],
                "self.data.index.names": [
                    677
                ],
                "com.any_not_none": [
                    1078,
                    678
                ],
                "com": [
                    1078,
                    678
                ],
                "self.data.index.name": [
                    683
                ],
                "primary": [
                    692
                ],
                "i": [
                    1414,
                    1422,
                    1200,
                    1081,
                    1082,
                    1084,
                    700,
                    1086,
                    701,
                    702,
                    705,
                    1097,
                    1102,
                    1360,
                    1361,
                    1489,
                    1490,
                    724,
                    1366,
                    1368
                ],
                "self._maybe_right_yaxis": [
                    705,
                    701
                ],
                "ax.get_yaxis": [
                    707
                ],
                "plt.get_fignums": [
                    714
                ],
                "plt.rc_context": [
                    715
                ],
                "plt.gca": [
                    716
                ],
                "cls._get_ax_layer": [
                    717
                ],
                "cls": [
                    1120,
                    1284,
                    1259,
                    1260,
                    717,
                    1173,
                    1143,
                    1145,
                    1117,
                    1118
                ],
                "col_num": [
                    746,
                    735
                ],
                "self.style.get": [
                    739
                ],
                "has_color": [
                    745,
                    743
                ],
                "nocolor_style": [
                    744,
                    745
                ],
                "num_colors": [
                    754,
                    750,
                    751
                ],
                "_get_standard_colors": [
                    753
                ],
                "self.kwds.get": [
                    756
                ],
                "color_kwds": [
                    756
                ],
                "e": [
                    777,
                    778
                ],
                "e.reindex": [
                    777
                ],
                "data.index": [
                    777,
                    1069,
                    1200,
                    1426,
                    1145,
                    1147,
                    1212
                ],
                "ABCDataFrame": [
                    844,
                    781
                ],
                "match_labels": [
                    791,
                    783
                ],
                "np.atleast_2d": [
                    792,
                    804,
                    807,
                    799
                ],
                "np.tile": [
                    800,
                    793,
                    826,
                    829
                ],
                "evalues": [
                    797,
                    799
                ],
                "self.data.columns.drop": [
                    798
                ],
                "is_iterator": [
                    803
                ],
                "err_shape": [
                    816,
                    809,
                    814,
                    815
                ],
                "err.shape": [
                    809
                ],
                "err.ndim": [
                    812
                ],
                "is_number": [
                    828
                ],
                "errors": [
                    838,
                    853,
                    854,
                    1368,
                    1369,
                    1086,
                    1087
                ],
                "flag": [
                    840,
                    841
                ],
                "err.keys": [
                    845
                ],
                "get_axes": [
                    860
                ],
                "get_figure": [
                    860
                ],
                "Subplot": [
                    860
                ],
                "x_set": [
                    872,
                    865,
                    870
                ],
                "y_set": [
                    872,
                    866,
                    871
                ],
                "points": [
                    932,
                    869,
                    870,
                    871,
                    934,
                    926
                ],
                "get_points": [
                    869,
                    926,
                    927
                ],
                "ax.get_position": [
                    869,
                    926
                ],
                "x_set.add": [
                    870
                ],
                "y_set.add": [
                    871
                ],
                "MPLPlot": [
                    1474,
                    1318,
                    875,
                    1039,
                    1265,
                    883,
                    1300,
                    1047,
                    1466,
                    1119
                ],
                "MPLPlot.__init__": [
                    1474,
                    883,
                    1318,
                    1047
                ],
                "kwargs": [
                    1314,
                    1315,
                    1474,
                    1317,
                    1318,
                    1322,
                    1327,
                    951,
                    1234,
                    883,
                    1236,
                    1013,
                    1047,
                    1309,
                    1310,
                    1311
                ],
                "is_integer": [
                    888,
                    1014,
                    886,
                    952
                ],
                "self.data.columns.holds_integer": [
                    888,
                    1014,
                    886,
                    952
                ],
                "_get_numeric_data": [
                    890,
                    892
                ],
                "self.x": [
                    903,
                    1019,
                    957,
                    895
                ],
                "self.y": [
                    896,
                    1019,
                    957,
                    903
                ],
                "ax.set_ylabel": [
                    904,
                    1493,
                    1463
                ],
                "ax.set_xlabel": [
                    905,
                    1227,
                    1441
                ],
                "img": [
                    920,
                    919
                ],
                "ax.collections": [
                    919
                ],
                "cbar": [
                    920,
                    929,
                    927
                ],
                "self.fig.colorbar": [
                    920
                ],
                "_mpl_ge_3_0_0": [
                    922
                ],
                "cbar_points": [
                    931,
                    933,
                    927
                ],
                "cbar.ax.get_position": [
                    927
                ],
                "cbar.ax": [
                    929,
                    927
                ],
                "cbar.ax.set_position": [
                    929
                ],
                "PlanePlot": [
                    1009,
                    943
                ],
                "_kind": [
                    1445,
                    1231,
                    944,
                    1040,
                    1010,
                    1301,
                    1467
                ],
                "__init__": [
                    1013,
                    951
                ],
                "c": [
                    960,
                    993,
                    969,
                    971,
                    976,
                    978,
                    952,
                    953,
                    954,
                    957
                ],
                "self.c": [
                    954,
                    957
                ],
                "c_is_column": [
                    960,
                    993,
                    963,
                    975
                ],
                "is_hashable": [
                    960
                ],
                "cb": [
                    992,
                    1024,
                    963,
                    1032
                ],
                "cmap": [
                    966,
                    967,
                    1031,
                    989,
                    1022,
                    1023
                ],
                "self.plt.cm.get_cmap": [
                    1023,
                    967
                ],
                "self.plt.cm": [
                    1023,
                    967
                ],
                "color": [
                    968,
                    969,
                    971,
                    973,
                    974
                ],
                "c_values": [
                    1027,
                    1029,
                    1031,
                    972,
                    974,
                    976,
                    978,
                    987
                ],
                "self.plt.rcParams": [
                    972
                ],
                "scatter": [
                    984,
                    1005,
                    997
                ],
                "ax.scatter": [
                    984
                ],
                "cbar_label": [
                    993,
                    994
                ],
                "self._plot_colorbar": [
                    1033,
                    994
                ],
                "self._add_legend_handle": [
                    1422,
                    997,
                    1102,
                    1527
                ],
                "errors_x": [
                    1001,
                    1003,
                    1004
                ],
                "self._get_errorbars": [
                    1368,
                    1001,
                    1002,
                    1086
                ],
                "errors_y": [
                    1002,
                    1003,
                    1004
                ],
                "err_kwds": [
                    1004,
                    1005,
                    1006
                ],
                "scatter.get_facecolor": [
                    1005
                ],
                "C": [
                    1026,
                    1029,
                    1014,
                    1015,
                    1016,
                    1019
                ],
                "self.C": [
                    1016,
                    1019
                ],
                "ax.hexbin": [
                    1031
                ],
                "self.stacked": [
                    1320,
                    1394,
                    1238,
                    1048,
                    1151
                ],
                "self.data.fillna": [
                    1049
                ],
                "self.x_compat": [
                    1056,
                    1050,
                    1052
                ],
                "plot_params": [
                    1050
                ],
                "self._use_dynamic_x": [
                    1056,
                    1211
                ],
                "_use_dynamic_x": [
                    1061
                ],
                "self._is_ts_plot": [
                    1064,
                    1104
                ],
                "_maybe_convert_index": [
                    1067
                ],
                "plotf": [
                    1074,
                    1092,
                    1070
                ],
                "self._ts_plot": [
                    1070
                ],
                "it": [
                    1081,
                    1075,
                    1071
                ],
                "self._iter_data": [
                    1360,
                    1489,
                    1075,
                    1071
                ],
                "self._get_xticks": [
                    1073
                ],
                "self._plot": [
                    1074,
                    1412,
                    1398,
                    1383
                ],
                "stacking_id": [
                    1284,
                    1158,
                    1164,
                    1165,
                    1169,
                    1173,
                    1176,
                    1178,
                    1188,
                    1191,
                    1193,
                    1077,
                    1098,
                    1117,
                    1118,
                    1120,
                    1259,
                    1260,
                    1271,
                    1274,
                    1276
                ],
                "self._get_stacking_id": [
                    1077
                ],
                "self.errors.values": [
                    1078
                ],
                "self._get_colors": [
                    1080,
                    1354,
                    1486
                ],
                "self.kwds.copy": [
                    1362,
                    1083,
                    1495
                ],
                "self._apply_style_colors": [
                    1084
                ],
                "newlines": [
                    1092,
                    1102
                ],
                "lines": [
                    1121,
                    1281,
                    1265,
                    1108,
                    1109,
                    1268,
                    1145,
                    1148,
                    1119
                ],
                "_get_all_lines": [
                    1108
                ],
                "left": [
                    1109,
                    1110
                ],
                "right": [
                    1109,
                    1110
                ],
                "_get_xlim": [
                    1109
                ],
                "column_num": [
                    1258,
                    1116
                ],
                "cls._initialize_stacker": [
                    1259,
                    1117,
                    1173
                ],
                "y_values": [
                    1283,
                    1260,
                    1265,
                    1268,
                    1118,
                    1119
                ],
                "cls._get_stacked_values": [
                    1260,
                    1118
                ],
                "MPLPlot._plot": [
                    1265,
                    1119
                ],
                "cls._update_stacker": [
                    1120,
                    1284
                ],
                "freq": [
                    1137,
                    1142,
                    1140,
                    1134
                ],
                "_maybe_resample": [
                    1134
                ],
                "_decorate_axes": [
                    1137,
                    1140,
                    1142
                ],
                "ax.left_ax": [
                    1140
                ],
                "ax._plot_data.append": [
                    1143
                ],
                "ax._plot_data": [
                    1143
                ],
                "cls._kind": [
                    1143
                ],
                "cls._plot": [
                    1145
                ],
                "data.values": [
                    1145
                ],
                "format_dateaxis": [
                    1147
                ],
                "ax.freq": [
                    1147
                ],
                "ax._stacker_pos_prior": [
                    1191,
                    1161,
                    1164,
                    1176,
                    1274
                ],
                "ax._stacker_neg_prior": [
                    1193,
                    1163,
                    1165,
                    1178,
                    1276
                ],
                "np.zeros": [
                    1164,
                    1165,
                    1357,
                    1272,
                    1278
                ],
                "n": [
                    1164,
                    1165
                ],
                "ax.get_xticks": [
                    1205
                ],
                "xticklabels": [
                    1206,
                    1207
                ],
                "get_label": [
                    1206
                ],
                "ax.set_xticklabels": [
                    1439,
                    1207
                ],
                "ax.xaxis.set_major_locator": [
                    1208
                ],
                "FixedLocator": [
                    1208
                ],
                "condition": [
                    1210,
                    1219
                ],
                "data.index.is_all_dates": [
                    1212
                ],
                "index_name": [
                    1217,
                    1226,
                    1227
                ],
                "self._get_index_name": [
                    1217,
                    1429
                ],
                "format_date_labels": [
                    1224
                ],
                "LinePlot": [
                    1291,
                    1236,
                    1230
                ],
                "kwargs.setdefault": [
                    1234,
                    1311
                ],
                "LinePlot.__init__": [
                    1236
                ],
                "self.kwds.setdefault": [
                    1240,
                    1487
                ],
                "line_kwds": [
                    1264,
                    1265,
                    1263
                ],
                "kwds.copy": [
                    1263
                ],
                "line_kwds.pop": [
                    1264
                ],
                "xdata": [
                    1283,
                    1268
                ],
                "get_data": [
                    1268
                ],
                "start": [
                    1376,
                    1345,
                    1378,
                    1283,
                    1379,
                    1417,
                    1388,
                    1455,
                    1396,
                    1272,
                    1274,
                    1403,
                    1276,
                    1278
                ],
                "get_color": [
                    1281
                ],
                "rect": [
                    1283,
                    1412,
                    1383,
                    1287,
                    1422,
                    1398
                ],
                "ax.fill_between": [
                    1283
                ],
                "res": [
                    1288,
                    1287
                ],
                "LinePlot._post_plot_logic": [
                    1291
                ],
                "self._is_series": [
                    1363,
                    1308
                ],
                "self.bar_width": [
                    1411,
                    1382,
                    1321,
                    1323,
                    1387,
                    1328,
                    1329,
                    1332,
                    1397,
                    1432,
                    1402,
                    1309
                ],
                "kwargs.pop": [
                    1314,
                    1315,
                    1317,
                    1309,
                    1310
                ],
                "pos": [
                    1321,
                    1332,
                    1310,
                    1329
                ],
                "self.tick_pos": [
                    1312,
                    1460,
                    1438,
                    1335
                ],
                "np.arange": [
                    1312
                ],
                "self.bottom": [
                    1314,
                    1339,
                    1338,
                    1349
                ],
                "self.left": [
                    1451,
                    1315,
                    1340,
                    1341
                ],
                "self.log": [
                    1377,
                    1317,
                    1419,
                    1390,
                    1405
                ],
                "self.tickoffset": [
                    1321,
                    1332,
                    1335,
                    1329
                ],
                "self.lim_offset": [
                    1323,
                    1325,
                    1330,
                    1333,
                    1431,
                    1432
                ],
                "w": [
                    1345,
                    1411,
                    1382,
                    1414,
                    1416,
                    1385,
                    1455,
                    1328,
                    1329,
                    1330,
                    1397,
                    1400
                ],
                "self.ax_pos": [
                    1432,
                    1414,
                    1385,
                    1431,
                    1400,
                    1335
                ],
                "ax.bar": [
                    1345
                ],
                "log": [
                    1345,
                    1455
                ],
                "ncolors": [
                    1355,
                    1366
                ],
                "pos_prior": [
                    1408,
                    1396,
                    1357
                ],
                "neg_prior": [
                    1409,
                    1396,
                    1357
                ],
                "K": [
                    1411,
                    1358
                ],
                "mpl.rcParams": [
                    1374
                ],
                "mpl": [
                    1374
                ],
                "self._start_base": [
                    1379,
                    1396
                ],
                "np.where": [
                    1408,
                    1409,
                    1396
                ],
                "str_index": [
                    1426,
                    1428,
                    1434
                ],
                "key": [
                    1426,
                    1428
                ],
                "data.shape": [
                    1428
                ],
                "s_edge": [
                    1434,
                    1431
                ],
                "e_edge": [
                    1432,
                    1434
                ],
                "self._decorate_ticks": [
                    1434
                ],
                "start_edge": [
                    1459,
                    1437
                ],
                "end_edge": [
                    1459,
                    1437
                ],
                "ticklabels": [
                    1461,
                    1439
                ],
                "BarPlot": [
                    1444
                ],
                "ax.barh": [
                    1455
                ],
                "ax.set_yticklabels": [
                    1461
                ],
                "idx": [
                    1504,
                    1525,
                    1503
                ],
                "v": [
                    1503
                ],
                "blabels": [
                    1512,
                    1509,
                    1511
                ],
                "blank_labeler": [
                    1509
                ],
                "l": [
                    1509,
                    1526,
                    1527
                ],
                "results": [
                    1512,
                    1515,
                    1517
                ],
                "ax.pie": [
                    1512
                ],
                "patches": [
                    1515,
                    1517,
                    1526
                ],
                "texts": [
                    1521,
                    1515,
                    1517
                ],
                "autotexts": [
                    1521,
                    1515,
                    1518
                ],
                "t": [
                    1521,
                    1522
                ],
                "t.set_fontsize": [
                    1522
                ],
                "leglabels": [
                    1525,
                    1526
                ],
                "p": [
                    1526,
                    1527
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_144/pandas/tests/plotting/test_series.py",
                "test_function": "test_xtick_barPlot",
                "test_function_code": "    def test_xtick_barPlot(self):\n        # GH28172\n        s = pd.Series(range(10), index=[\"P{i:02d}\".format(i=i) for i in range(10)])\n        ax = s.plot.bar(xticks=range(0, 11, 2))\n        exp = np.array(list(range(0, 11, 2)))\n        tm.assert_numpy_array_equal(exp, ax.get_xticks())",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (6,) [right]: (10,)",
                "full_test_error": "self = <pandas.tests.plotting.test_series.TestSeriesPlots object at 0x7f7609d4bac0>\n\n    def test_xtick_barPlot(self):\n        # GH28172\n        s = pd.Series(range(10), index=[\"P{i:02d}\".format(i=i) for i in range(10)])\n        ax = s.plot.bar(xticks=range(0, 11, 2))\n        exp = np.array(list(range(0, 11, 2)))\n>       tm.assert_numpy_array_equal(exp, ax.get_xticks())\n\npandas/tests/plotting/test_series.py:879: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([ 0,  2,  4,  6,  8, 10])\nright = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (6,)\nE               [right]: (10,)\n\npandas/util/testing.py:988: AssertionError",
                "traceback": "left = array([ 0,  2,  4,  6,  8, 10])\nright = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (6,)\nE               [right]: (10,)\n\npandas/util/testing.py:988: AssertionError",
                "test_function_decorators": []
            }
        ]
    }
}