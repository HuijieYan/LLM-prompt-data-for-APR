{
    "1.1.1": "    def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\"):\n        \n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise', \"\n                \"'NaT', 'shift_forward', 'shift_backward' or \"\n                \"a timedelta object\"\n            )\n\n        if self.tz is not None:\n            if tz is None:\n                new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n            else:\n                raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n        else:\n            tz = timezones.maybe_get_tz(tz)\n            # Convert to UTC\n\n            new_dates = conversion.tz_localize_to_utc(\n                self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n            )\n        new_dates = new_dates.view(DT64NS_DTYPE)\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(new_dates, dtype=dtype, freq=self.freq)\n",
    "1.1.2": "Localize tz-naive Datetime Array/Index to tz-aware\nDatetime Array/Index.\n\nThis method takes a time zone (tz) naive Datetime Array/Index object\nand makes this time zone aware. It does not move the time to another\ntime zone.\nTime zone localization helps to switch from time zone aware to time\nzone unaware objects.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone to convert timestamps to. Passing ``None`` will\n    remove the time zone information preserving local time.\nambiguous : 'infer', 'NaT', bool array, default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from\n    03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n    00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n    `ambiguous` parameter dictates how ambiguous times should be\n    handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False signifies a\n      non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times.\n\nnonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times.\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSame type as self\n    Array/Index converted to the specified time zone.\n\nRaises\n------\nTypeError\n    If the Datetime Array/Index is tz-aware and tz is not None.\n\nSee Also\n--------\nDatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n    one time zone to another.\n\nExamples\n--------\n>>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n>>> tz_naive\nDatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n               '2018-03-03 09:00:00'],\n              dtype='datetime64[ns]', freq='D')\n\nLocalize DatetimeIndex in US/Eastern time zone:\n\n>>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n>>> tz_aware\nDatetimeIndex(['2018-03-01 09:00:00-05:00',\n               '2018-03-02 09:00:00-05:00',\n               '2018-03-03 09:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')\n\nWith the ``tz=None``, we can remove the time zone information\nwhile keeping the local time (not converted to UTC):\n\n>>> tz_aware.tz_localize(None)\nDatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n               '2018-03-03 09:00:00'],\n              dtype='datetime64[ns]', freq='D')\n\nBe careful with DST changes. When there is sequential data, pandas can\ninfer the DST time:\n\n>>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n...                               '2018-10-28 02:00:00',\n...                               '2018-10-28 02:30:00',\n...                               '2018-10-28 02:00:00',\n...                               '2018-10-28 02:30:00',\n...                               '2018-10-28 03:00:00',\n...                               '2018-10-28 03:30:00']))\n>>> s.dt.tz_localize('CET', ambiguous='infer')\n0   2018-10-28 01:30:00+02:00\n1   2018-10-28 02:00:00+02:00\n2   2018-10-28 02:30:00+02:00\n3   2018-10-28 02:00:00+01:00\n4   2018-10-28 02:30:00+01:00\n5   2018-10-28 03:00:00+01:00\n6   2018-10-28 03:30:00+01:00\ndtype: datetime64[ns, CET]\n\nIn some cases, inferring the DST is impossible. In such cases, you can\npass an ndarray to the ambiguous parameter to set the DST explicitly\n\n>>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n...                               '2018-10-28 02:36:00',\n...                               '2018-10-28 03:46:00']))\n>>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n0   2018-10-28 01:20:00+02:00\n1   2018-10-28 02:36:00+02:00\n2   2018-10-28 03:46:00+01:00\ndtype: datetime64[ns, CET]\n\nIf the DST transition causes nonexistent times, you can shift these\ndates forward or backwards with a timedelta object or `'shift_forward'`\nor `'shift_backwards'`.\n\n>>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n...                               '2015-03-29 03:30:00']))\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n0   2015-03-29 03:00:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, Europe/Warsaw]\n\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n0   2015-03-29 01:59:59.999999999+01:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, Europe/Warsaw]\n\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n0   2015-03-29 03:30:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, Europe/Warsaw]",
    "1.2.1": "class DatetimeArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps, dtl.DatelikeOps)",
    "1.2.2": "Pandas ExtensionArray for tz-naive or tz-aware datetime data.\n\n.. versionadded:: 0.24.0\n\n.. warning::\n\n   DatetimeArray is currently experimental, and its API may change\n   without warning. In particular, :attr:`DatetimeArray.dtype` is\n   expected to change to always be an instance of an ``ExtensionDtype``\n   subclass.\n\nParameters\n----------\nvalues : Series, Index, DatetimeArray, ndarray\n    The datetime data.\n\n    For DatetimeArray `values` (or a Series or Index boxing one),\n    `dtype` and `freq` will be extracted from `values`.\n\ndtype : numpy.dtype or DatetimeTZDtype\n    Note that the only NumPy dtype allowed is 'datetime64[ns]'.\nfreq : str or Offset, optional\n    The frequency.\ncopy : bool, default False\n    Whether to copy the underlying array of values.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone",
    "1.2.3": [
        "_simple_new(cls, values, freq=None, dtype=DT64NS_DTYPE)",
        "dtype(self) -> Union[np.dtype, DatetimeTZDtype]",
        "tz(self)",
        "tz(self, value)",
        "tz_convert(self, tz)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/arrays/datetimes.py",
    "1.3.2": [
        "tz_to_dtype(tz)",
        "_simple_new(cls, values, freq=None, dtype=DT64NS_DTYPE)",
        "dtype(self) -> Union[np.dtype, DatetimeTZDtype]",
        "tz(self)",
        "tz(self, value)",
        "tz_convert(self, tz)"
    ],
    "1.4.1": [
        "def test_tz_localize_invalidates_freq():\n    # we only preserve freq in unambiguous cases\n\n    # if localized to US/Eastern, this crosses a DST transition\n    dti = date_range(\"2014-03-08 23:00\", \"2014-03-09 09:00\", freq=\"H\")\n    assert dti.freq == \"H\"\n\n    result = dti.tz_localize(None)  # no-op\n    assert result.freq == \"H\"\n\n    result = dti.tz_localize(\"UTC\")  # unambiguous freq preservation\n    assert result.freq == \"H\"\n\n    result = dti.tz_localize(\"US/Eastern\", nonexistent=\"shift_forward\")\n    assert result.freq is None\n    assert result.inferred_freq is None  # i.e. we are not _too_ strict here\n\n    # Case where we _can_ keep freq because we're length==1\n    dti2 = dti[:1]\n    result = dti2.tz_localize(\"US/Eastern\")\n    assert result.freq == \"H\""
    ],
    "1.4.2": [
        "pandas/tests/indexes/datetimes/test_timezones.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert <Hour> is None\nE        +  where <Hour> = DatetimeIndex(['2014-03-08 23:00:00-05:00', '2014-03-09 00:00:00-05:00',\\n               '2014-03-09 01:00:00-05:00', '...:00:00-04:00',\\n               '2014-03-09 09:00:00-04:00'],\\n              dtype='datetime64[ns, US/Eastern]', freq='H').freq"
        ]
    ],
    "2.1.2": [
        [
            "def test_tz_localize_invalidates_freq():\n        # we only preserve freq in unambiguous cases\n    \n        # if localized to US/Eastern, this crosses a DST transition\n        dti = date_range(\"2014-03-08 23:00\", \"2014-03-09 09:00\", freq=\"H\")\n        assert dti.freq == \"H\"\n    \n        result = dti.tz_localize(None)  # no-op\n        assert result.freq == \"H\"\n    \n        result = dti.tz_localize(\"UTC\")  # unambiguous freq preservation\n        assert result.freq == \"H\"\n    \n        result = dti.tz_localize(\"US/Eastern\", nonexistent=\"shift_forward\")\n>       assert result.freq is None",
            "\npandas/tests/indexes/datetimes/test_timezones.py:1180: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "nonexistent": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self": {
                    "value": "<DatetimeArray>\n['2014-03-08 23:00:00', '2014-03-09 00:00:00', '2014-03-09 01:00:00',\n '2014-03-09 02:00:00', '2014-03-09 03:00:00', '2014-03-09 04:00:00',\n '2014-03-09 05:00:00', '2014-03-09 06:00:00', '2014-03-09 07:00:00',\n '2014-03-09 08:00:00', '2014-03-09 09:00:00']\nLength: 11, dtype: datetime64[ns]",
                    "shape": "(11,)",
                    "omitted": false
                },
                "self.asi8": {
                    "value": "array([1394319600000000000, 1394323200000000000, 1394326800000000000,\n       1394330400000000000, 1394334000000000000, 1394337600000000000,\n       1394341200000000000, 1394344800000000000, 1394348400000000000,\n       1394352000000000000, 1394355600000000000])",
                    "shape": "(11,)",
                    "omitted": false
                },
                "ambiguous": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self.freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "nonexistent_options": {
                    "value": "('raise', 'NaT', 'shift_forward', 'shift_backward')",
                    "shape": "4",
                    "omitted": false
                },
                "new_dates": {
                    "value": "array(['2014-03-08T23:00:00.000000000', '2014-03-09T00:00:00.000000000',\n       '2014-03-09T01:00:00.000000000', '2014-03-09T02:00:00.000000000',\n       '2014-03-09T03:00:00.000000000', '2014-03-09T04:00:00.000000000',\n       '2014-03-09T05:00:00.000000000', '2014-03-09T06:00:00.000000000',\n       '2014-03-09T07:00:00.000000000', '2014-03-09T08:00:00.000000000',\n       '2014-03-09T09:00:00.000000000'], dtype='datetime64[ns]')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "dtype": {
                    "value": "dtype('<M8[ns]')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "nonexistent": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self": {
                    "value": "<DatetimeArray>\n['2014-03-08 23:00:00', '2014-03-09 00:00:00', '2014-03-09 01:00:00',\n '2014-03-09 02:00:00', '2014-03-09 03:00:00', '2014-03-09 04:00:00',\n '2014-03-09 05:00:00', '2014-03-09 06:00:00', '2014-03-09 07:00:00',\n '2014-03-09 08:00:00', '2014-03-09 09:00:00']\nLength: 11, dtype: datetime64[ns]",
                    "shape": "(11,)",
                    "omitted": false
                },
                "tz": {
                    "value": "'UTC'",
                    "shape": "3",
                    "omitted": false
                },
                "self.asi8": {
                    "value": "array([1394319600000000000, 1394323200000000000, 1394326800000000000,\n       1394330400000000000, 1394334000000000000, 1394337600000000000,\n       1394341200000000000, 1394344800000000000, 1394348400000000000,\n       1394352000000000000, 1394355600000000000])",
                    "shape": "(11,)",
                    "omitted": false
                },
                "ambiguous": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self.freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "nonexistent_options": {
                    "value": "('raise', 'NaT', 'shift_forward', 'shift_backward')",
                    "shape": "4",
                    "omitted": false
                },
                "tz": {
                    "value": "<UTC>",
                    "shape": null,
                    "omitted": false
                },
                "new_dates": {
                    "value": "array(['2014-03-08T23:00:00.000000000', '2014-03-09T00:00:00.000000000',\n       '2014-03-09T01:00:00.000000000', '2014-03-09T02:00:00.000000000',\n       '2014-03-09T03:00:00.000000000', '2014-03-09T04:00:00.000000000',\n       '2014-03-09T05:00:00.000000000', '2014-03-09T06:00:00.000000000',\n       '2014-03-09T07:00:00.000000000', '2014-03-09T08:00:00.000000000',\n       '2014-03-09T09:00:00.000000000'], dtype='datetime64[ns]')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "dtype": {
                    "value": "datetime64[ns, UTC]",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "nonexistent": {
                    "value": "'shift_forward'",
                    "shape": "13",
                    "omitted": false
                },
                "self": {
                    "value": "<DatetimeArray>\n['2014-03-08 23:00:00', '2014-03-09 00:00:00', '2014-03-09 01:00:00',\n '2014-03-09 02:00:00', '2014-03-09 03:00:00', '2014-03-09 04:00:00',\n '2014-03-09 05:00:00', '2014-03-09 06:00:00', '2014-03-09 07:00:00',\n '2014-03-09 08:00:00', '2014-03-09 09:00:00']\nLength: 11, dtype: datetime64[ns]",
                    "shape": "(11,)",
                    "omitted": false
                },
                "tz": {
                    "value": "'US/Eastern'",
                    "shape": "10",
                    "omitted": false
                },
                "self.asi8": {
                    "value": "array([1394319600000000000, 1394323200000000000, 1394326800000000000,\n       1394330400000000000, 1394334000000000000, 1394337600000000000,\n       1394341200000000000, 1394344800000000000, 1394348400000000000,\n       1394352000000000000, 1394355600000000000])",
                    "shape": "(11,)",
                    "omitted": false
                },
                "ambiguous": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self.freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "nonexistent_options": {
                    "value": "('raise', 'NaT', 'shift_forward', 'shift_backward')",
                    "shape": "4",
                    "omitted": false
                },
                "tz": {
                    "value": "<DstTzInfo 'US/Eastern' LMT-1 day, 19:04:00 STD>",
                    "shape": null,
                    "omitted": false
                },
                "new_dates": {
                    "value": "array(['2014-03-09T04:00:00.000000000', '2014-03-09T05:00:00.000000000',\n       '2014-03-09T06:00:00.000000000', '2014-03-09T07:00:00.000000000',\n       '2014-03-09T07:00:00.000000000', '2014-03-09T08:00:00.000000000',\n       '2014-03-09T09:00:00.000000000', '2014-03-09T10:00:00.000000000',\n       '2014-03-09T11:00:00.000000000', '2014-03-09T12:00:00.000000000',\n       '2014-03-09T13:00:00.000000000'], dtype='datetime64[ns]')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "dtype": {
                    "value": "datetime64[ns, US/Eastern]",
                    "shape": "()",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "nonexistent": "str",
                "self": "DatetimeArray",
                "self.asi8": "ndarray",
                "ambiguous": "str",
                "self.freq": "Hour"
            },
            {
                "nonexistent_options": "tuple",
                "new_dates": "ndarray",
                "dtype": "dtype"
            }
        ],
        [
            {
                "nonexistent": "str",
                "self": "DatetimeArray",
                "tz": "str",
                "self.asi8": "ndarray",
                "ambiguous": "str",
                "self.freq": "Hour"
            },
            {
                "nonexistent_options": "tuple",
                "tz": "UTC",
                "new_dates": "ndarray",
                "dtype": "DatetimeTZDtype"
            }
        ],
        [
            {
                "nonexistent": "str",
                "self": "DatetimeArray",
                "tz": "str",
                "self.asi8": "ndarray",
                "ambiguous": "str",
                "self.freq": "Hour"
            },
            {
                "nonexistent_options": "tuple",
                "tz": "US/Eastern",
                "new_dates": "ndarray",
                "dtype": "DatetimeTZDtype"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "nonexistent": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self": {
                    "value": "<DatetimeArray>\n['2014-03-08 23:00:00', '2014-03-09 00:00:00', '2014-03-09 01:00:00',\n '2014-03-09 02:00:00', '2014-03-09 03:00:00', '2014-03-09 04:00:00',\n '2014-03-09 05:00:00', '2014-03-09 06:00:00', '2014-03-09 07:00:00',\n '2014-03-09 08:00:00', '2014-03-09 09:00:00']\nLength: 11, dtype: datetime64[ns]",
                    "shape": "(11,)",
                    "omitted": false
                },
                "self.asi8": {
                    "value": "array([1394319600000000000, 1394323200000000000, 1394326800000000000,\n       1394330400000000000, 1394334000000000000, 1394337600000000000,\n       1394341200000000000, 1394344800000000000, 1394348400000000000,\n       1394352000000000000, 1394355600000000000])",
                    "shape": "(11,)",
                    "omitted": false
                },
                "ambiguous": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self.freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "nonexistent_options": {
                    "value": "('raise', 'NaT', 'shift_forward', 'shift_backward')",
                    "shape": "4",
                    "omitted": false
                },
                "new_dates": {
                    "value": "array(['2014-03-08T23:00:00.000000000', '2014-03-09T00:00:00.000000000',\n       '2014-03-09T01:00:00.000000000', '2014-03-09T02:00:00.000000000',\n       '2014-03-09T03:00:00.000000000', '2014-03-09T04:00:00.000000000',\n       '2014-03-09T05:00:00.000000000', '2014-03-09T06:00:00.000000000',\n       '2014-03-09T07:00:00.000000000', '2014-03-09T08:00:00.000000000',\n       '2014-03-09T09:00:00.000000000'], dtype='datetime64[ns]')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "dtype": {
                    "value": "dtype('<M8[ns]')",
                    "shape": "()",
                    "omitted": false
                },
                "freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "nonexistent": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self": {
                    "value": "<DatetimeArray>\n['2014-03-08 23:00:00', '2014-03-09 00:00:00', '2014-03-09 01:00:00',\n '2014-03-09 02:00:00', '2014-03-09 03:00:00', '2014-03-09 04:00:00',\n '2014-03-09 05:00:00', '2014-03-09 06:00:00', '2014-03-09 07:00:00',\n '2014-03-09 08:00:00', '2014-03-09 09:00:00']\nLength: 11, dtype: datetime64[ns]",
                    "shape": "(11,)",
                    "omitted": false
                },
                "tz": {
                    "value": "'UTC'",
                    "shape": "3",
                    "omitted": false
                },
                "self.asi8": {
                    "value": "array([1394319600000000000, 1394323200000000000, 1394326800000000000,\n       1394330400000000000, 1394334000000000000, 1394337600000000000,\n       1394341200000000000, 1394344800000000000, 1394348400000000000,\n       1394352000000000000, 1394355600000000000])",
                    "shape": "(11,)",
                    "omitted": false
                },
                "ambiguous": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self.freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "nonexistent_options": {
                    "value": "('raise', 'NaT', 'shift_forward', 'shift_backward')",
                    "shape": "4",
                    "omitted": false
                },
                "tz": {
                    "value": "<UTC>",
                    "shape": null,
                    "omitted": false
                },
                "new_dates": {
                    "value": "array(['2014-03-08T23:00:00.000000000', '2014-03-09T00:00:00.000000000',\n       '2014-03-09T01:00:00.000000000', '2014-03-09T02:00:00.000000000',\n       '2014-03-09T03:00:00.000000000', '2014-03-09T04:00:00.000000000',\n       '2014-03-09T05:00:00.000000000', '2014-03-09T06:00:00.000000000',\n       '2014-03-09T07:00:00.000000000', '2014-03-09T08:00:00.000000000',\n       '2014-03-09T09:00:00.000000000'], dtype='datetime64[ns]')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "dtype": {
                    "value": "datetime64[ns, UTC]",
                    "shape": "()",
                    "omitted": false
                },
                "freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "nonexistent": {
                    "value": "'shift_forward'",
                    "shape": "13",
                    "omitted": false
                },
                "self": {
                    "value": "<DatetimeArray>\n['2014-03-08 23:00:00', '2014-03-09 00:00:00', '2014-03-09 01:00:00',\n '2014-03-09 02:00:00', '2014-03-09 03:00:00', '2014-03-09 04:00:00',\n '2014-03-09 05:00:00', '2014-03-09 06:00:00', '2014-03-09 07:00:00',\n '2014-03-09 08:00:00', '2014-03-09 09:00:00']\nLength: 11, dtype: datetime64[ns]",
                    "shape": "(11,)",
                    "omitted": false
                },
                "tz": {
                    "value": "'US/Eastern'",
                    "shape": "10",
                    "omitted": false
                },
                "self.asi8": {
                    "value": "array([1394319600000000000, 1394323200000000000, 1394326800000000000,\n       1394330400000000000, 1394334000000000000, 1394337600000000000,\n       1394341200000000000, 1394344800000000000, 1394348400000000000,\n       1394352000000000000, 1394355600000000000])",
                    "shape": "(11,)",
                    "omitted": false
                },
                "ambiguous": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self.freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "nonexistent_options": {
                    "value": "('raise', 'NaT', 'shift_forward', 'shift_backward')",
                    "shape": "4",
                    "omitted": false
                },
                "tz": {
                    "value": "<DstTzInfo 'US/Eastern' LMT-1 day, 19:04:00 STD>",
                    "shape": null,
                    "omitted": false
                },
                "new_dates": {
                    "value": "array(['2014-03-09T04:00:00.000000000', '2014-03-09T05:00:00.000000000',\n       '2014-03-09T06:00:00.000000000', '2014-03-09T07:00:00.000000000',\n       '2014-03-09T07:00:00.000000000', '2014-03-09T08:00:00.000000000',\n       '2014-03-09T09:00:00.000000000', '2014-03-09T10:00:00.000000000',\n       '2014-03-09T11:00:00.000000000', '2014-03-09T12:00:00.000000000',\n       '2014-03-09T13:00:00.000000000'], dtype='datetime64[ns]')",
                    "shape": "(11,)",
                    "omitted": false
                },
                "dtype": {
                    "value": "datetime64[ns, US/Eastern]",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "nonexistent": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self": {
                    "value": "<DatetimeArray>\n['2014-03-08 23:00:00']\nLength: 1, dtype: datetime64[ns]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "tz": {
                    "value": "'US/Eastern'",
                    "shape": "10",
                    "omitted": false
                },
                "self.asi8": {
                    "value": "array([1394319600000000000])",
                    "shape": "(1,)",
                    "omitted": false
                },
                "ambiguous": {
                    "value": "'raise'",
                    "shape": "5",
                    "omitted": false
                },
                "self.freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "nonexistent_options": {
                    "value": "('raise', 'NaT', 'shift_forward', 'shift_backward')",
                    "shape": "4",
                    "omitted": false
                },
                "tz": {
                    "value": "<DstTzInfo 'US/Eastern' LMT-1 day, 19:04:00 STD>",
                    "shape": null,
                    "omitted": false
                },
                "new_dates": {
                    "value": "array(['2014-03-09T04:00:00.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "dtype": {
                    "value": "datetime64[ns, US/Eastern]",
                    "shape": "()",
                    "omitted": false
                },
                "freq": {
                    "value": "<Hour>",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "nonexistent": "str",
                "self": "DatetimeArray",
                "self.asi8": "ndarray",
                "ambiguous": "str",
                "self.freq": "Hour"
            },
            {
                "nonexistent_options": "tuple",
                "new_dates": "ndarray",
                "dtype": "dtype",
                "freq": "Hour"
            }
        ],
        [
            {
                "nonexistent": "str",
                "self": "DatetimeArray",
                "tz": "str",
                "self.asi8": "ndarray",
                "ambiguous": "str",
                "self.freq": "Hour"
            },
            {
                "nonexistent_options": "tuple",
                "tz": "UTC",
                "new_dates": "ndarray",
                "dtype": "DatetimeTZDtype",
                "freq": "Hour"
            }
        ],
        [
            {
                "nonexistent": "str",
                "self": "DatetimeArray",
                "tz": "str",
                "self.asi8": "ndarray",
                "ambiguous": "str",
                "self.freq": "Hour"
            },
            {
                "nonexistent_options": "tuple",
                "tz": "US/Eastern",
                "new_dates": "ndarray",
                "dtype": "DatetimeTZDtype"
            }
        ],
        [
            {
                "nonexistent": "str",
                "self": "DatetimeArray",
                "tz": "str",
                "self.asi8": "ndarray",
                "ambiguous": "str",
                "self.freq": "Hour"
            },
            {
                "nonexistent_options": "tuple",
                "tz": "US/Eastern",
                "new_dates": "ndarray",
                "dtype": "DatetimeTZDtype",
                "freq": "Hour"
            }
        ]
    ],
    "3.1.1": [
        "tz_localize creates freq inconsistency on time offset change\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nimport pandas as pd\n\nindex = pd.date_range(\"2019-3-31\", freq=\"30T\", periods=10, tz=\"Europe/London\")\nprint(index)  # this has a freq\nprint(index.freq)\nprint(index.tz_localize(None))  # this shouldn't have it anymore, but it does\nprint(index.tz_localize(None).freq)\nProblem description\ntz_localize(None) doesn't check if the frequency is still consistent with the new localized index. In the case of Daylight Saving Time switch, the frequency of the index should become None (since duplicated/missing timestamps are created).\n\nExpected Output\nAchievable with:\n\nnew_index = index.tz_localize(None)\nnew_index.freq = new_index.inferred_freq  # drop frequency if not inferrable\nprint(new_index)  # this is correct\nprint(new_index.freq)\n"
    ]
}