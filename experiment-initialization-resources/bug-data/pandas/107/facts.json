{
    "1.1.1": "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n    \n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            other = Series(other)\n        if other.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True\"\n                \" or if the Series has a name\"\n            )\n\n        if other.name is None:\n            index = None\n        else:\n            # other must have the same index name as self, otherwise\n            # index name will be reset\n            index = Index([other.name], name=self.index.name)\n\n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = other.reindex(combined_columns, copy=False)\n        other = DataFrame(\n            other.values.reshape((1, len(other))),\n            index=index,\n            columns=combined_columns,\n        )\n        other = other._convert(datetime=True, timedelta=True)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list):\n        if not other:\n            pass\n        elif not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.reindex(columns=self.columns)\n\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, (list, tuple)):\n        to_concat = [self] + other\n    else:\n        to_concat = [self, other]\n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )\n",
    "1.1.2": "Append rows of `other` to the end of caller, returning a new object.\n\nColumns in `other` that are not in the caller are added as new columns.\n\nParameters\n----------\nother : DataFrame or Series/dict-like object, or list of these\n    The data to append.\nignore_index : bool, default False\n    If True, do not use the index labels.\nverify_integrity : bool, default False\n    If True, raise ValueError on creating index with duplicates.\nsort : bool, default False\n    Sort columns if the columns of `self` and `other` are not aligned.\n\n    .. versionadded:: 0.23.0\n    .. versionchanged:: 1.0.0\n\n        Changed to not sort by default.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nconcat : General function to concatenate DataFrame or Series objects.\n\nNotes\n-----\nIf a list of dict/series is passed and the keys are all contained in\nthe DataFrame's index, the order of the columns in the resulting\nDataFrame will be unchanged.\n\nIteratively appending rows to a DataFrame can be more computationally\nintensive than a single concatenate. A better solution is to append\nthose rows to a list and then concatenate the list with the original\nDataFrame all at once.\n\nExamples\n--------\n\n>>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n>>> df\n   A  B\n0  1  2\n1  3  4\n>>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n>>> df.append(df2)\n   A  B\n0  1  2\n1  3  4\n0  5  6\n1  7  8\n\nWith `ignore_index` set to True:\n\n>>> df.append(df2, ignore_index=True)\n   A  B\n0  1  2\n1  3  4\n2  5  6\n3  7  8\n\nThe following, while not recommended methods for generating DataFrames,\nshow two ways to generate a DataFrame from multiple data sources.\n\nLess efficient:\n\n>>> df = pd.DataFrame(columns=['A'])\n>>> for i in range(5):\n...     df = df.append({'A': i}, ignore_index=True)\n>>> df\n   A\n0  0\n1  1\n2  2\n3  3\n4  4\n\nMore efficient:\n\n>>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n...           ignore_index=True)\n   A\n0  0\n1  1\n2  2\n3  3\n4  4",
    "1.2.1": "class DataFrame(NDFrame)",
    "1.2.2": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       for Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input.\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv\nread_table\nread_clipboard\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9",
    "1.2.3": [
        "reindex(self, *args, **kwargs)",
        "append(self, other, ignore_index=False, verify_integrity=False, sort=False)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/frame.py",
    "1.3.2": [
        "reindex(self, *args, **kwargs)",
        "append(self, other, ignore_index=False, verify_integrity=False, sort=False)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py",
        "pandas/tests/frame/test_combine_concat.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(60)]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, US/Eastern]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, US/Eastern]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, Asia/Tokyo]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, Asia/Tokyo]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzutc()]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzutc()]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzlocal()]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzlocal()]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(300)]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(300)]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(-300)]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(-300)]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC+01:00]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC+01:00]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, foo]"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, foo]"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dbd0f70>\ntz_naive_fixture = None, timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dce99d0>\ntz_naive_fixture = 'UTC', timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11de49760>\ntz_naive_fixture = 'UTC', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dd82070>\ntz_naive_fixture = 'US/Eastern', timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11df27130>\ntz_naive_fixture = 'US/Eastern', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dcfbc40>\ntz_naive_fixture = 'Asia/Tokyo', timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11df27760>\ntz_naive_fixture = 'Asia/Tokyo', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc59220>\ntz_naive_fixture = 'dateutil/US/Pacific', timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11df27d90>\ntz_naive_fixture = 'dateutil/US/Pacific', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dd75c70>\ntz_naive_fixture = 'dateutil/Asia/Singapore'\ntimestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11ddd2bb0>\ntz_naive_fixture = 'dateutil/Asia/Singapore', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11de349d0>\ntz_naive_fixture = tzutc(), timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dbd0cd0>\ntz_naive_fixture = tzutc(), timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dcfbd00>\ntz_naive_fixture = tzlocal(), timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11de345b0>\ntz_naive_fixture = tzlocal(), timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11de494f0>\ntz_naive_fixture = pytz.FixedOffset(300), timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc93040>\ntz_naive_fixture = pytz.FixedOffset(300), timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11df27820>\ntz_naive_fixture = <UTC>, timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dec41c0>\ntz_naive_fixture = <UTC>, timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dd67a90>\ntz_naive_fixture = pytz.FixedOffset(-300)\ntimestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc401c0>\ntz_naive_fixture = pytz.FixedOffset(-300), timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dd82c40>\ntz_naive_fixture = datetime.timezone.utc, timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc599d0>\ntz_naive_fixture = datetime.timezone.utc, timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc40dc0>\ntz_naive_fixture = datetime.timezone(datetime.timedelta(seconds=3600))\ntimestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc651c0>\ntz_naive_fixture = datetime.timezone(datetime.timedelta(seconds=3600))\ntimestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc35310>\ntz_naive_fixture = datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')\ntimestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc9a520>\ntz_naive_fixture = datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')\ntimestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_combine_concat.py:300: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(60)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+01:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57\nName: 0, dtype: datetime64[ns]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                    0\n0 2019-07-19 07:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T07:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 07:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T07:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                    0\n0 2019-07-19 07:04:57,                     0\n0 2019-07-19 07:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 06:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 06:04:57+00:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T07:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 07:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T07:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+00:00,                     0\n0 2019-07-19 07:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 02:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 02:04:57-04:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 02:04:57-04:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57-04:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T11:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 11:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T11:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57-04:00,                     0\n0 2019-07-19 11:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 15:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 15:04:57+09:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 15:04:57+09:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+09:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-18T22:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-18 22:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-18T22:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+09:00,                     0\n0 2019-07-18 22:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-18 23:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-18 23:04:57-07:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-18 23:04:57-07:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57-07:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T14:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 14:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T14:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57-07:00,                     0\n0 2019-07-19 14:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 14:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 14:04:57+08:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 14:04:57+08:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+08:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-18T23:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-18 23:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-18T23:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+08:00,                     0\n0 2019-07-18 23:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 06:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 06:04:57+00:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T07:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 07:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T07:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+00:00,                     0\n0 2019-07-19 07:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+01:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 11:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 11:04:57+05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 11:04:57+05:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T02:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 02:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T02:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+05:00,                     0\n0 2019-07-19 02:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 01:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 01:04:57-05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 01:04:57-05:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57-05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T12:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 12:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T12:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57-05:00,                     0\n0 2019-07-19 12:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+01:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 05:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 05:04:57-01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 06:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 05:04:57-01:00,                     0\n0 2019-07-19 06:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57-01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array(['2019-07-19T08:04:57.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 08:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.values": {
                    "value": "array([['2019-07-19T08:04:57.000000000']], dtype='datetime64[ns]')",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57-01:00,                     0\n0 2019-07-19 08:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "other.values": "ndarray",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "other.values": "ndarray",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(60)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57+01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+01:00,                           0\n0 2019-07-19 07:04:57+01:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57\nName: 0, dtype: datetime64[ns]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                    0\n0 2019-07-19 07:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                    0\n0 2019-07-19 07:04:57",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                    0\n0 2019-07-19 07:04:57,                     0\n0 2019-07-19 07:04:57]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 06:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 06:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 06:04:57+00:00,                           0\n0 2019-07-19 06:04:57+00:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+00:00,                           0\n0 2019-07-19 07:04:57+00:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 02:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 02:04:57-04:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 02:04:57-04:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 02:04:57-04:00,                           0\n0 2019-07-19 02:04:57-04:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57-04:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57-04:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57-04:00,                           0\n0 2019-07-19 07:04:57-04:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 15:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 15:04:57+09:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 15:04:57+09:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 15:04:57+09:00,                           0\n0 2019-07-19 15:04:57+09:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+09:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57+09:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+09:00,                           0\n0 2019-07-19 07:04:57+09:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-18 23:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-18 23:04:57-07:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-18 23:04:57-07:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-18 23:04:57-07:00,                           0\n0 2019-07-18 23:04:57-07:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57-07:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57-07:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57-07:00,                           0\n0 2019-07-19 07:04:57-07:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 14:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 14:04:57+08:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 14:04:57+08:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 14:04:57+08:00,                           0\n0 2019-07-19 14:04:57+08:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+08:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57+08:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+08:00,                           0\n0 2019-07-19 07:04:57+08:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 06:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 06:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 06:04:57+00:00,                           0\n0 2019-07-19 06:04:57+00:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57+00:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+00:00,                           0\n0 2019-07-19 07:04:57+00:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57+01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+01:00,                           0\n0 2019-07-19 07:04:57+01:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 11:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 11:04:57+05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 11:04:57+05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 11:04:57+05:00,                           0\n0 2019-07-19 11:04:57+05:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57+05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+05:00,                           0\n0 2019-07-19 07:04:57+05:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 01:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 01:04:57-05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 01:04:57-05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 01:04:57-05:00,                           0\n0 2019-07-19 01:04:57-05:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57-05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57-05:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57-05:00,                           0\n0 2019-07-19 07:04:57-05:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57+01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57+01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57+01:00,                           0\n0 2019-07-19 07:04:57+01:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 05:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 05:04:57-01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 05:04:57-01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 05:04:57-01:00,                           0\n0 2019-07-19 05:04:57-01:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "0   2019-07-19 07:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "other.name": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "ignore_index": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self": {
                    "value": "                          0\n0 2019-07-19 07:04:57-01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "other.index": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "verify_integrity": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "other": {
                    "value": "                          0\n0 2019-07-19 07:04:57-01:00",
                    "shape": "(1, 1)",
                    "omitted": false
                },
                "index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "idx_diff": {
                    "value": "Int64Index([], dtype='int64')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "other.index": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "combined_columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "index.names": {
                    "value": "FrozenList([None])",
                    "shape": "1",
                    "omitted": false
                },
                "other.columns": {
                    "value": "Int64Index([0], dtype='int64')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "to_concat": {
                    "value": "[                          0\n0 2019-07-19 07:04:57-01:00,                           0\n0 2019-07-19 07:04:57-01:00]",
                    "shape": "2",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "Series",
                "other.name": "int",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "other.index": "RangeIndex",
                "self.columns": "RangeIndex",
                "verify_integrity": "bool",
                "sort": "bool"
            },
            {
                "other": "DataFrame",
                "index": "Int64Index",
                "idx_diff": "Int64Index",
                "other.index": "Int64Index",
                "combined_columns": "Int64Index",
                "index.names": "FrozenList",
                "other.columns": "Int64Index",
                "to_concat": "list"
            }
        ]
    ],
    "3.1.1": [
        "Appending to DataFrame removes the timezone-awareness\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nimport pytz\n\nimport pandas as pd\n\ndf = pd.DataFrame(\n    {\"a\": [pd.Timestamp(\"2019-07-19 07:04:57+0100\", tz=pytz.FixedOffset(60))]}\n)\ndf.append(df.iloc[0])\nProblem description\nThis returns:\n\n|    | a                         |\n|---:|:--------------------------|\n|  0 | 2019-07-19 07:04:57+01:00 |\n|  0 | 2019-07-19 06:04:57       |\nHowever, I was expecting\n\n|    | a                         |\n|---:|:--------------------------|\n|  0 | 2019-07-19 07:04:57+01:00 |\n|  0 | 2019-07-19 07:04:57+01:00 |\nwhich indeed is what happens if I instead write\n\ndf.append(df)\n"
    ]
}