{
    "pandas:135": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_135/pandas/core/groupby/ops.py": {
            "buggy_functions": [
                {
                    "function_name": "agg_series",
                    "function_code": "def agg_series(self, obj, func):\n    try:\n        return self._aggregate_series_fast(obj, func)\n    except AssertionError:\n        raise\n    except ValueError as err:\n        if \"No result.\" in str(err):\n            # raised in libreduction\n            pass\n        elif \"Function does not reduce\" in str(err):\n            # raised in libreduction\n            pass\n        else:\n            raise\n        return self._aggregate_series_pure_python(obj, func)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 661,
                    "end_line": 675,
                    "variables": {
                        "self._aggregate_series_fast": [
                            663
                        ],
                        "self": [
                            675,
                            663
                        ],
                        "obj": [
                            675,
                            663
                        ],
                        "func": [
                            675,
                            663
                        ],
                        "AssertionError": [
                            664
                        ],
                        "ValueError": [
                            666
                        ],
                        "str": [
                            667,
                            670
                        ],
                        "err": [
                            667,
                            670
                        ],
                        "self._aggregate_series_pure_python": [
                            675
                        ]
                    },
                    "filtered_variables": {
                        "self._aggregate_series_fast": [
                            663
                        ],
                        "self": [
                            675,
                            663
                        ],
                        "obj": [
                            675,
                            663
                        ],
                        "func": [
                            675,
                            663
                        ],
                        "err": [
                            667,
                            670
                        ],
                        "self._aggregate_series_pure_python": [
                            675
                        ]
                    },
                    "diff_line_number": 675,
                    "class_data": {
                        "signature": "class BaseGrouper()",
                        "docstring": "This is an internal Grouper class, which actually holds\nthe generated groups\n\nParameters\n----------\naxis : int\n    the axis to group\ngroupings : array of grouping\n    all the grouping instances to handle in this grouper\n    for example for grouper list to groupby, need to pass the list\nsort : boolean, default True\n    whether this grouper will give sorted result or not\ngroup_keys : boolean, default True\nmutated : boolean, default False\nindexer : intp array, optional\n    the indexer created by Grouper\n    some groupers (TimeGrouper) will sort its axis and its\n    group_info is also sorted, so need the indexer to reorder",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, axis, groupings, sort=True, group_keys=True, mutated=False, indexer=None):\n    self._filter_empty_groups = self.compressed = len(groupings) != 1\n    self.axis = axis\n    self.groupings = groupings\n    self.sort = sort\n    self.group_keys = group_keys\n    self.mutated = mutated\n    self.indexer = indexer",
                            "@property\ndef shape(self):\n    return tuple((ping.ngroups for ping in self.groupings))",
                            "def __iter__(self):\n    return iter(self.indices)",
                            "@property\ndef nkeys(self):\n    return len(self.groupings)",
                            "def get_iterator(self, data, axis=0):\n    \"\"\"\n    Groupby iterator\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    splitter = self._get_splitter(data, axis=axis)\n    keys = self._get_group_keys()\n    for (key, (i, group)) in zip(keys, splitter):\n        yield (key, group)",
                            "def _get_splitter(self, data, axis=0):\n    (comp_ids, _, ngroups) = self.group_info\n    return get_splitter(data, comp_ids, ngroups, axis=axis)",
                            "def _get_grouper(self):\n    \"\"\"\n    We are a grouper as part of another's groupings.\n\n    We have a specific method of grouping, so cannot\n    convert to a Index for our grouper.\n    \"\"\"\n    return self.groupings[0].grouper",
                            "def _get_group_keys(self):\n    if len(self.groupings) == 1:\n        return self.levels[0]\n    else:\n        (comp_ids, _, ngroups) = self.group_info\n        return get_flattened_iterator(comp_ids, ngroups, self.levels, self.labels)",
                            "def apply(self, f, data, axis=0):\n    mutated = self.mutated\n    splitter = self._get_splitter(data, axis=axis)\n    group_keys = self._get_group_keys()\n    result_values = None\n    f_name = com.get_callable_name(f)\n    if f_name not in base.plotting_methods and hasattr(splitter, 'fast_apply') and (axis == 0):\n        try:\n            (result_values, mutated) = splitter.fast_apply(f, group_keys)\n            if len(result_values) == len(group_keys):\n                return (group_keys, result_values, mutated)\n        except libreduction.InvalidApply:\n            pass\n        except TypeError as err:\n            if 'Cannot convert' in str(err):\n                pass\n            else:\n                raise\n    for (key, (i, group)) in zip(group_keys, splitter):\n        object.__setattr__(group, 'name', key)\n        if result_values is None:\n            result_values = []\n        elif i == 0:\n            continue\n        group_axes = _get_axes(group)\n        res = f(group)\n        if not _is_indexed_like(res, group_axes):\n            mutated = True\n        result_values.append(res)\n    return (group_keys, result_values, mutated)",
                            "@cache_readonly\ndef indices(self):\n    \"\"\" dict {group name -> group indices} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].indices\n    else:\n        label_list = [ping.labels for ping in self.groupings]\n        keys = [com.values_from_object(ping.group_index) for ping in self.groupings]\n        return get_indexer_dict(label_list, keys)",
                            "@property\ndef labels(self):\n    return [ping.labels for ping in self.groupings]",
                            "@property\ndef levels(self):\n    return [ping.group_index for ping in self.groupings]",
                            "@property\ndef names(self):\n    return [ping.name for ping in self.groupings]",
                            "def size(self):\n    \"\"\"\n    Compute group sizes\n\n    \"\"\"\n    (ids, _, ngroup) = self.group_info\n    ids = ensure_platform_int(ids)\n    if ngroup:\n        out = np.bincount(ids[ids != -1], minlength=ngroup)\n    else:\n        out = []\n    return Series(out, index=self.result_index, dtype='int64')",
                            "@cache_readonly\ndef groups(self):\n    \"\"\" dict {group name -> group labels} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].groups\n    else:\n        to_groupby = zip(*(ping.grouper for ping in self.groupings))\n        to_groupby = Index(to_groupby)\n        return self.axis.groupby(to_groupby)",
                            "@cache_readonly\ndef is_monotonic(self):\n    return Index(self.group_info[0]).is_monotonic",
                            "@cache_readonly\ndef group_info(self):\n    (comp_ids, obs_group_ids) = self._get_compressed_labels()\n    ngroups = len(obs_group_ids)\n    comp_ids = ensure_int64(comp_ids)\n    return (comp_ids, obs_group_ids, ngroups)",
                            "@cache_readonly\ndef label_info(self):\n    (labels, _, _) = self.group_info\n    if self.indexer is not None:\n        sorter = np.lexsort((labels, self.indexer))\n        labels = labels[sorter]\n    return labels",
                            "def _get_compressed_labels(self):\n    all_labels = [ping.labels for ping in self.groupings]\n    if len(all_labels) > 1:\n        group_index = get_group_index(all_labels, self.shape, sort=True, xnull=True)\n        return compress_group_index(group_index, sort=self.sort)\n    ping = self.groupings[0]\n    return (ping.labels, np.arange(len(ping.group_index)))",
                            "@cache_readonly\ndef ngroups(self):\n    return len(self.result_index)",
                            "@property\ndef recons_labels(self):\n    (comp_ids, obs_ids, _) = self.group_info\n    labels = (ping.labels for ping in self.groupings)\n    return decons_obs_group_ids(comp_ids, obs_ids, self.shape, labels, xnull=True)",
                            "@cache_readonly\ndef result_index(self):\n    if not self.compressed and len(self.groupings) == 1:\n        return self.groupings[0].result_index.rename(self.names[0])\n    codes = self.recons_labels\n    levels = [ping.result_index for ping in self.groupings]\n    result = MultiIndex(levels=levels, codes=codes, verify_integrity=False, names=self.names)\n    return result",
                            "def get_group_levels(self):\n    if not self.compressed and len(self.groupings) == 1:\n        return [self.groupings[0].result_index]\n    name_list = []\n    for (ping, labels) in zip(self.groupings, self.recons_labels):\n        labels = ensure_platform_int(labels)\n        levels = ping.result_index.take(labels)\n        name_list.append(levels)\n    return name_list",
                            "def _is_builtin_func(self, arg):\n    \"\"\"\n    if we define an builtin function for this argument, return it,\n    otherwise return the arg\n    \"\"\"\n    return SelectionMixin._builtin_table.get(arg, arg)",
                            "def _get_cython_function(self, kind, how, values, is_numeric):\n    dtype_str = values.dtype.name\n\n    def get_func(fname):\n        f = getattr(libgroupby, fname, None)\n        if f is not None and is_numeric:\n            return f\n        for dt in [dtype_str, 'object']:\n            f2 = getattr(libgroupby, '{fname}_{dtype_str}'.format(fname=fname, dtype_str=dt), None)\n            if f2 is not None:\n                return f2\n        if hasattr(f, '__signatures__'):\n            if dtype_str == 'object' and 'object' not in f.__signatures__:\n                return None\n        return f\n    ftype = self._cython_functions[kind][how]\n    if isinstance(ftype, dict):\n        func = afunc = get_func(ftype['name'])\n        f = ftype.get('f')\n        if f is not None:\n\n            def wrapper(*args, **kwargs):\n                return f(afunc, *args, **kwargs)\n            func = wrapper\n    else:\n        func = get_func(ftype)\n    if func is None:\n        raise NotImplementedError('function is not implemented for this dtype: [how->{how},dtype->{dtype_str}]'.format(how=how, dtype_str=dtype_str))\n    return func",
                            "def _cython_operation(self, kind, values, how, axis, min_count=-1, **kwargs):\n    assert kind in ['transform', 'aggregate']\n    orig_values = values\n    if is_categorical_dtype(values) or is_sparse(values):\n        raise NotImplementedError('{} dtype not supported'.format(values.dtype))\n    elif is_datetime64_any_dtype(values):\n        if how in ['add', 'prod', 'cumsum', 'cumprod']:\n            raise NotImplementedError('datetime64 type does not support {} operations'.format(how))\n    elif is_timedelta64_dtype(values):\n        if how in ['prod', 'cumprod']:\n            raise NotImplementedError('timedelta64 type does not support {} operations'.format(how))\n    if is_datetime64tz_dtype(values.dtype):\n        values = values.view('M8[ns]')\n    is_datetimelike = needs_i8_conversion(values.dtype)\n    is_numeric = is_numeric_dtype(values.dtype)\n    if is_datetimelike:\n        values = values.view('int64')\n        is_numeric = True\n    elif is_bool_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values):\n        if (values == iNaT).any():\n            values = ensure_float64(values)\n        else:\n            values = ensure_int_or_float(values)\n    elif is_numeric and (not is_complex_dtype(values)):\n        values = ensure_float64(values)\n    else:\n        values = values.astype(object)\n    arity = self._cython_arity.get(how, 1)\n    vdim = values.ndim\n    swapped = False\n    if vdim == 1:\n        values = values[:, None]\n        out_shape = (self.ngroups, arity)\n    else:\n        if axis > 0:\n            swapped = True\n            assert axis == 1, axis\n            values = values.T\n        if arity > 1:\n            raise NotImplementedError(\"arity of more than 1 is not supported for the 'how' argument\")\n        out_shape = (self.ngroups,) + values.shape[1:]\n    try:\n        func = self._get_cython_function(kind, how, values, is_numeric)\n    except NotImplementedError:\n        if is_numeric:\n            try:\n                values = ensure_float64(values)\n            except TypeError:\n                if lib.infer_dtype(values, skipna=False) == 'complex':\n                    values = values.astype(complex)\n                else:\n                    raise\n            func = self._get_cython_function(kind, how, values, is_numeric)\n        else:\n            raise\n    if how == 'rank':\n        out_dtype = 'float'\n    elif is_numeric:\n        out_dtype = '{kind}{itemsize}'.format(kind=values.dtype.kind, itemsize=values.dtype.itemsize)\n    else:\n        out_dtype = 'object'\n    (labels, _, _) = self.group_info\n    if kind == 'aggregate':\n        result = _maybe_fill(np.empty(out_shape, dtype=out_dtype), fill_value=np.nan)\n        counts = np.zeros(self.ngroups, dtype=np.int64)\n        result = self._aggregate(result, counts, values, labels, func, is_numeric, is_datetimelike, min_count)\n    elif kind == 'transform':\n        result = _maybe_fill(np.empty_like(values, dtype=out_dtype), fill_value=np.nan)\n        result = self._transform(result, values, labels, func, is_numeric, is_datetimelike, **kwargs)\n    if is_integer_dtype(result) and (not is_datetimelike):\n        mask = result == iNaT\n        if mask.any():\n            result = result.astype('float64')\n            result[mask] = np.nan\n    if kind == 'aggregate' and self._filter_empty_groups and (not counts.all()):\n        assert result.ndim != 2\n        result = result[counts > 0]\n    if vdim == 1 and arity == 1:\n        result = result[:, 0]\n    if how in self._name_functions:\n        names = self._name_functions[how]()\n    else:\n        names = None\n    if swapped:\n        result = result.swapaxes(0, axis)\n    if is_datetime64tz_dtype(orig_values.dtype):\n        result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\n    elif is_datetimelike and kind == 'aggregate':\n        result = result.astype(orig_values.dtype)\n    return (result, names)",
                            "def aggregate(self, values, how, axis=0, min_count=-1):\n    return self._cython_operation('aggregate', values, how, axis, min_count=min_count)",
                            "def transform(self, values, how, axis=0, **kwargs):\n    return self._cython_operation('transform', values, how, axis, **kwargs)",
                            "def _aggregate(self, result, counts, values, comp_ids, agg_func, is_numeric, is_datetimelike, min_count=-1):\n    if values.ndim > 2:\n        raise NotImplementedError('number of dimensions is currently limited to 2')\n    else:\n        agg_func(result, counts, values, comp_ids, min_count)\n    return result",
                            "def _transform(self, result, values, comp_ids, transform_func, is_numeric, is_datetimelike, **kwargs):\n    (comp_ids, _, ngroups) = self.group_info\n    if values.ndim > 2:\n        raise NotImplementedError('number of dimensions is currently limited to 2')\n    else:\n        transform_func(result, values, comp_ids, ngroups, is_datetimelike, **kwargs)\n    return result",
                            "def agg_series(self, obj, func):\n    try:\n        return self._aggregate_series_fast(obj, func)\n    except AssertionError:\n        raise\n    except ValueError as err:\n        if 'No result.' in str(err):\n            pass\n        elif 'Function does not reduce' in str(err):\n            pass\n        else:\n            raise\n        return self._aggregate_series_pure_python(obj, func)",
                            "def _aggregate_series_fast(self, obj, func):\n    func = self._is_builtin_func(func)\n    if obj.index._has_complex_internals:\n        raise TypeError('Incompatible index for Cython grouper')\n    (group_index, _, ngroups) = self.group_info\n    dummy = obj._get_values(slice(None, 0))\n    indexer = get_group_index_sorter(group_index, ngroups)\n    obj = obj.take(indexer)\n    group_index = algorithms.take_nd(group_index, indexer, allow_fill=False)\n    grouper = libreduction.SeriesGrouper(obj, func, group_index, ngroups, dummy)\n    (result, counts) = grouper.get_result()\n    return (result, counts)",
                            "def _aggregate_series_pure_python(self, obj, func):\n    (group_index, _, ngroups) = self.group_info\n    counts = np.zeros(ngroups, dtype=int)\n    result = None\n    splitter = get_splitter(obj, group_index, ngroups, axis=self.axis)\n    for (label, group) in splitter:\n        res = func(group)\n        if result is None:\n            if isinstance(res, (Series, Index, np.ndarray)):\n                raise ValueError('Function does not reduce')\n            result = np.empty(ngroups, dtype='O')\n        counts[label] = group.shape[0]\n        result[label] = res\n    result = lib.maybe_convert_objects(result, try_float=0)\n    return (result, counts)",
                            "def wrapper(*args, **kwargs):\n    return f(afunc, *args, **kwargs)"
                        ],
                        "constructor_variables": [
                            "self._filter_empty_groups = self.compressed = len(groupings) != 1",
                            "self._filter_empty_groups = self.compressed = len(groupings) != 1",
                            "self.axis = axis",
                            "self.groupings = groupings",
                            "self.sort = sort",
                            "self.group_keys = group_keys",
                            "self.mutated = mutated",
                            "self.indexer = indexer"
                        ],
                        "class_level_variables": [
                            "_cython_functions = {'aggregate': {'add': 'group_add', 'prod': 'group_prod', 'min': 'group_min', 'max': 'group_max', 'mean': 'group_mean', 'median': {'name': 'group_median'}, 'var': 'group_var', 'first': {'name': 'group_nth', 'f': lambda func, a, b, c, d, e: func(a, b, c, d, 1, -1)}, 'last': 'group_last', 'ohlc': 'group_ohlc'}, 'transform': {'cumprod': 'group_cumprod', 'cumsum': 'group_cumsum', 'cummin': 'group_cummin', 'cummax': 'group_cummax', 'rank': {'name': 'group_rank', 'f': lambda func, a, b, c, d, e, **kwargs: func(a, b, c, e, kwargs.get('ties_method', 'average'), kwargs.get('ascending', True), kwargs.get('pct', False), kwargs.get('na_option', 'keep'))}}}",
                            "_cython_arity = {'ohlc': 4}",
                            "_name_functions = {'ohlc': lambda *args: ['open', 'high', 'low', 'close']}"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, axis, groupings, sort=True, group_keys=True, mutated=False, indexer=None)",
                            "shape(self)",
                            "__iter__(self)",
                            "nkeys(self)",
                            "get_iterator(self, data, axis=0)",
                            "_get_splitter(self, data, axis=0)",
                            "_get_grouper(self)",
                            "_get_group_keys(self)",
                            "apply(self, f, data, axis=0)",
                            "indices(self)",
                            "labels(self)",
                            "levels(self)",
                            "names(self)",
                            "size(self)",
                            "groups(self)",
                            "is_monotonic(self)",
                            "group_info(self)",
                            "label_info(self)",
                            "_get_compressed_labels(self)",
                            "ngroups(self)",
                            "recons_labels(self)",
                            "result_index(self)",
                            "get_group_levels(self)",
                            "_is_builtin_func(self, arg)",
                            "_get_cython_function(self, kind, how, values, is_numeric)",
                            "_cython_operation(self, kind, values, how, axis, min_count=-1, **kwargs)",
                            "aggregate(self, values, how, axis=0, min_count=-1)",
                            "transform(self, values, how, axis=0, **kwargs)",
                            "_aggregate(self, result, counts, values, comp_ids, agg_func, is_numeric, is_datetimelike, min_count=-1)",
                            "_transform(self, result, values, comp_ids, transform_func, is_numeric, is_datetimelike, **kwargs)",
                            "agg_series(self, obj, func)",
                            "_aggregate_series_fast(self, obj, func)",
                            "_aggregate_series_pure_python(self, obj, func)",
                            "wrapper(*args, **kwargs)"
                        ],
                        "class_level_variable_names": [
                            "_cython_functions",
                            "_cython_arity",
                            "_name_functions"
                        ],
                        "constructor_variable_names": [
                            "sort",
                            "compressed",
                            "indexer",
                            "group_keys",
                            "_filter_empty_groups",
                            "groupings",
                            "axis",
                            "mutated"
                        ]
                    },
                    "used_imports": [],
                    "variable_values": [
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7fa989fa79d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7fa989fa79d0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.36865861812735822855557898947154171...\n1    Decimal: 0.45211647880342942240616821436560712...\n2    Decimal: 0.71203041290145607788986126251984387...\n3    Decimal: 0.02813206665340139966957622164045460...\n4    Decimal: 0.08420106765050106023551279577077366...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7fa98a58eb80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7fa989fa79d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7fa989fa79d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7fa989fa79d0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.36865861812735822855557898947154171...\n1    Decimal: 0.45211647880342942240616821436560712...\n2    Decimal: 0.71203041290145607788986126251984387...\n3    Decimal: 0.02813206665340139966957622164045460...\n4    Decimal: 0.08420106765050106023551279577077366...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7fa98a58eb80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7fa989fa79d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7fa989f9ee50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7fa989f9ee50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.58223606461168375680870212818263098...\n1    Decimal: 0.84840779638095220605009671999141573...\n2    Decimal: 0.69579005526197723607850775806582532...\n3    Decimal: 0.55248362591544331046122806583298370...\n4    Decimal: 0.44705510519926416890257314662449061...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7fa989f96ee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7fa989f9ee50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7fa989f9ee50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7fa989f9ee50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.58223606461168375680870212818263098...\n1    Decimal: 0.84840779638095220605009671999141573...\n2    Decimal: 0.69579005526197723607850775806582532...\n3    Decimal: 0.55248362591544331046122806583298370...\n4    Decimal: 0.44705510519926416890257314662449061...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7fa989f96ee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7fa989f9ee50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2fcb700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2fcb700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2fcb700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2fcb700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd08b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2, 2)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2, 2)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2, 2)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2, 2)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2f86a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2, 2)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2fcb700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2, 2)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2fcb700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2, 2)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2fcb700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2, 2)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2fcb700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fd0880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    0\n1    1\n2    0\n3    1\n4    1\nName: id2, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    0\n1    1\n2    0\n3    1\n4    1\nName: id2, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd328eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ee2b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2eef550>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2eef550>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2eef550>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\nName: decimals, dtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2eef550>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2ff0eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\ndtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2f66790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\ndtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2f66790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\ndtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2f66790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._aggregate_series_fast": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_fast of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "obj": {
                                    "variable_value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\ndtype: decimal",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "func": {
                                    "variable_value": "<function _GroupBy._python_agg_general.<locals>.<lambda> at 0x7f4cd2f66790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._aggregate_series_pure_python": {
                                    "variable_value": "<bound method BaseGrouper._aggregate_series_pure_python of <pandas.core.groupby.ops.BaseGrouper object at 0x7f4cd2fae5b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def generate_bins_generic(values, binner, closed):\n    \"\"\"\n    Generate bin edge offsets and bin labels for one array using another array\n    which has bin edge values. Both arrays must be sorted.\n\n    Parameters\n    ----------\n    values : array of values\n    binner : a comparable array of values representing bins into which to bin\n        the first array. Note, 'values' end-points must fall within 'binner'\n        end-points.\n    closed : which end of bin is closed; left (default), right\n\n    Returns\n    -------\n    bins : array of offsets (into 'values' argument) of bins.\n        Zero and last edge are excluded in result, so for instance the first\n        bin is values[0:bin[0]] and the last is values[bin[-1]:]\n    \"\"\"\n    lenidx = len(values)\n    lenbin = len(binner)\n\n    if lenidx <= 0 or lenbin <= 0:\n        raise ValueError(\"Invalid length for values or for binner\")\n\n    # check binner fits data\n    if values[0] < binner[0]:\n        raise ValueError(\"Values falls before first bin\")\n\n    if values[lenidx - 1] > binner[lenbin - 1]:\n        raise ValueError(\"Values falls after last bin\")\n\n    bins = np.empty(lenbin - 1, dtype=np.int64)\n\n    j = 0  # index into values\n    bc = 0  # bin count\n\n    # linear scan, presume nothing about values/binner except that it fits ok\n    for i in range(0, lenbin - 1):\n        r_bin = binner[i + 1]\n\n        # count values in current bin, advance to next bin\n        while j < lenidx and (\n            values[j] < r_bin or (closed == \"right\" and values[j] == r_bin)\n        ):\n            j += 1\n\n        bins[bc] = j\n        bc += 1\n\n    return bins",
                        "signature": "generate_bins_generic(values, binner, closed)"
                    },
                    {
                        "code": "def _get_axes(group):\n    if isinstance(group, Series):\n        return [group.index]\n    else:\n        return group.axes",
                        "signature": "_get_axes(group)"
                    },
                    {
                        "code": "def _is_indexed_like(obj, axes):\n    if isinstance(obj, Series):\n        if len(axes) > 1:\n            return False\n        return obj.index.equals(axes[0])\n    elif isinstance(obj, DataFrame):\n        return obj.index.equals(axes[0])\n\n    return False",
                        "signature": "_is_indexed_like(obj, axes)"
                    },
                    {
                        "code": "def get_splitter(data, *args, **kwargs):\n    if isinstance(data, Series):\n        klass = SeriesSplitter\n    elif isinstance(data, DataFrame):\n        klass = FrameSplitter\n\n    return klass(data, *args, **kwargs)",
                        "signature": "get_splitter(data, *args, **kwargs)"
                    },
                    {
                        "code": "def wrapper(*args, **kwargs):\n    return f(afunc, *args, **kwargs)",
                        "signature": "wrapper(*args, **kwargs)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class BaseGrouper:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self, axis, groupings, sort=True, group_keys=True, mutated=False, indexer=None\n):\n    self._filter_empty_groups = self.compressed = len(groupings) != 1\n    self.axis = axis\n    self.groupings = groupings\n    self.sort = sort\n    self.group_keys = group_keys\n    self.mutated = mutated\n    self.indexer = indexer",
                                "signature": "__init__(self, axis, groupings, sort=True, group_keys=True, mutated=False, indexer=None)"
                            },
                            {
                                "code": "@property\ndef shape(self):\n    return tuple(ping.ngroups for ping in self.groupings)",
                                "signature": "shape(self)"
                            },
                            {
                                "code": "def __iter__(self):\n    return iter(self.indices)",
                                "signature": "__iter__(self)"
                            },
                            {
                                "code": "@property\ndef nkeys(self):\n    return len(self.groupings)",
                                "signature": "nkeys(self)"
                            },
                            {
                                "code": "def get_iterator(self, data, axis=0):\n    \"\"\"\n    Groupby iterator\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    splitter = self._get_splitter(data, axis=axis)\n    keys = self._get_group_keys()\n    for key, (i, group) in zip(keys, splitter):\n        yield key, group",
                                "signature": "get_iterator(self, data, axis=0)"
                            },
                            {
                                "code": "def _get_splitter(self, data, axis=0):\n    comp_ids, _, ngroups = self.group_info\n    return get_splitter(data, comp_ids, ngroups, axis=axis)",
                                "signature": "_get_splitter(self, data, axis=0)"
                            },
                            {
                                "code": "def _get_grouper(self):\n    \"\"\"\n    We are a grouper as part of another's groupings.\n\n    We have a specific method of grouping, so cannot\n    convert to a Index for our grouper.\n    \"\"\"\n    return self.groupings[0].grouper",
                                "signature": "_get_grouper(self)"
                            },
                            {
                                "code": "def _get_group_keys(self):\n    if len(self.groupings) == 1:\n        return self.levels[0]\n    else:\n        comp_ids, _, ngroups = self.group_info\n\n        # provide \"flattened\" iterator for multi-group setting\n        return get_flattened_iterator(comp_ids, ngroups, self.levels, self.labels)",
                                "signature": "_get_group_keys(self)"
                            },
                            {
                                "code": "def apply(self, f, data, axis=0):\n    mutated = self.mutated\n    splitter = self._get_splitter(data, axis=axis)\n    group_keys = self._get_group_keys()\n    result_values = None\n\n    # oh boy\n    f_name = com.get_callable_name(f)\n    if (\n        f_name not in base.plotting_methods\n        and hasattr(splitter, \"fast_apply\")\n        and axis == 0\n    ):\n        try:\n            result_values, mutated = splitter.fast_apply(f, group_keys)\n\n            # If the fast apply path could be used we can return here.\n            # Otherwise we need to fall back to the slow implementation.\n            if len(result_values) == len(group_keys):\n                return group_keys, result_values, mutated\n\n        except libreduction.InvalidApply:\n            # Cannot fast apply on MultiIndex (_has_complex_internals).\n            # This Exception is also raised if `f` triggers an exception\n            # but it is preferable to raise the exception in Python.\n            pass\n        except TypeError as err:\n            if \"Cannot convert\" in str(err):\n                # via apply_frame_axis0 if we pass a non-ndarray\n                pass\n            else:\n                raise\n\n    for key, (i, group) in zip(group_keys, splitter):\n        object.__setattr__(group, \"name\", key)\n\n        # result_values is None if fast apply path wasn't taken\n        # or fast apply aborted with an unexpected exception.\n        # In either case, initialize the result list and perform\n        # the slow iteration.\n        if result_values is None:\n            result_values = []\n\n        # If result_values is not None we're in the case that the\n        # fast apply loop was broken prematurely but we have\n        # already the result for the first group which we can reuse.\n        elif i == 0:\n            continue\n\n        # group might be modified\n        group_axes = _get_axes(group)\n        res = f(group)\n        if not _is_indexed_like(res, group_axes):\n            mutated = True\n        result_values.append(res)\n\n    return group_keys, result_values, mutated",
                                "signature": "apply(self, f, data, axis=0)"
                            },
                            {
                                "code": "@cache_readonly\ndef indices(self):\n    \"\"\" dict {group name -> group indices} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].indices\n    else:\n        label_list = [ping.labels for ping in self.groupings]\n        keys = [com.values_from_object(ping.group_index) for ping in self.groupings]\n        return get_indexer_dict(label_list, keys)",
                                "signature": "indices(self)"
                            },
                            {
                                "code": "@property\ndef labels(self):\n    return [ping.labels for ping in self.groupings]",
                                "signature": "labels(self)"
                            },
                            {
                                "code": "@property\ndef levels(self):\n    return [ping.group_index for ping in self.groupings]",
                                "signature": "levels(self)"
                            },
                            {
                                "code": "@property\ndef names(self):\n    return [ping.name for ping in self.groupings]",
                                "signature": "names(self)"
                            },
                            {
                                "code": "def size(self):\n    \"\"\"\n    Compute group sizes\n\n    \"\"\"\n    ids, _, ngroup = self.group_info\n    ids = ensure_platform_int(ids)\n    if ngroup:\n        out = np.bincount(ids[ids != -1], minlength=ngroup)\n    else:\n        out = []\n    return Series(out, index=self.result_index, dtype=\"int64\")",
                                "signature": "size(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef groups(self):\n    \"\"\" dict {group name -> group labels} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].groups\n    else:\n        to_groupby = zip(*(ping.grouper for ping in self.groupings))\n        to_groupby = Index(to_groupby)\n        return self.axis.groupby(to_groupby)",
                                "signature": "groups(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef is_monotonic(self):\n    # return if my group orderings are monotonic\n    return Index(self.group_info[0]).is_monotonic",
                                "signature": "is_monotonic(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef group_info(self):\n    comp_ids, obs_group_ids = self._get_compressed_labels()\n\n    ngroups = len(obs_group_ids)\n    comp_ids = ensure_int64(comp_ids)\n    return comp_ids, obs_group_ids, ngroups",
                                "signature": "group_info(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef label_info(self):\n    # return the labels of items in original grouped axis\n    labels, _, _ = self.group_info\n    if self.indexer is not None:\n        sorter = np.lexsort((labels, self.indexer))\n        labels = labels[sorter]\n    return labels",
                                "signature": "label_info(self)"
                            },
                            {
                                "code": "def _get_compressed_labels(self):\n    all_labels = [ping.labels for ping in self.groupings]\n    if len(all_labels) > 1:\n        group_index = get_group_index(all_labels, self.shape, sort=True, xnull=True)\n        return compress_group_index(group_index, sort=self.sort)\n\n    ping = self.groupings[0]\n    return ping.labels, np.arange(len(ping.group_index))",
                                "signature": "_get_compressed_labels(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef ngroups(self):\n    return len(self.result_index)",
                                "signature": "ngroups(self)"
                            },
                            {
                                "code": "@property\ndef recons_labels(self):\n    comp_ids, obs_ids, _ = self.group_info\n    labels = (ping.labels for ping in self.groupings)\n    return decons_obs_group_ids(comp_ids, obs_ids, self.shape, labels, xnull=True)",
                                "signature": "recons_labels(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef result_index(self):\n    if not self.compressed and len(self.groupings) == 1:\n        return self.groupings[0].result_index.rename(self.names[0])\n\n    codes = self.recons_labels\n    levels = [ping.result_index for ping in self.groupings]\n    result = MultiIndex(\n        levels=levels, codes=codes, verify_integrity=False, names=self.names\n    )\n    return result",
                                "signature": "result_index(self)"
                            },
                            {
                                "code": "def get_group_levels(self):\n    if not self.compressed and len(self.groupings) == 1:\n        return [self.groupings[0].result_index]\n\n    name_list = []\n    for ping, labels in zip(self.groupings, self.recons_labels):\n        labels = ensure_platform_int(labels)\n        levels = ping.result_index.take(labels)\n\n        name_list.append(levels)\n\n    return name_list",
                                "signature": "get_group_levels(self)"
                            },
                            {
                                "code": "def _is_builtin_func(self, arg):\n    \"\"\"\n    if we define an builtin function for this argument, return it,\n    otherwise return the arg\n    \"\"\"\n    return SelectionMixin._builtin_table.get(arg, arg)",
                                "signature": "_is_builtin_func(self, arg)"
                            },
                            {
                                "code": "def _get_cython_function(self, kind, how, values, is_numeric):\n\n    dtype_str = values.dtype.name\n\n    def get_func(fname):\n        # see if there is a fused-type version of function\n        # only valid for numeric\n        f = getattr(libgroupby, fname, None)\n        if f is not None and is_numeric:\n            return f\n\n        # otherwise find dtype-specific version, falling back to object\n        for dt in [dtype_str, \"object\"]:\n            f2 = getattr(\n                libgroupby,\n                \"{fname}_{dtype_str}\".format(fname=fname, dtype_str=dt),\n                None,\n            )\n            if f2 is not None:\n                return f2\n\n        if hasattr(f, \"__signatures__\"):\n            # inspect what fused types are implemented\n            if dtype_str == \"object\" and \"object\" not in f.__signatures__:\n                # return None so we get a NotImplementedError below\n                #  instead of a TypeError at runtime\n                return None\n        return f\n\n    ftype = self._cython_functions[kind][how]\n\n    if isinstance(ftype, dict):\n        func = afunc = get_func(ftype[\"name\"])\n\n        # a sub-function\n        f = ftype.get(\"f\")\n        if f is not None:\n\n            def wrapper(*args, **kwargs):\n                return f(afunc, *args, **kwargs)\n\n            # need to curry our sub-function\n            func = wrapper\n\n    else:\n        func = get_func(ftype)\n\n    if func is None:\n        raise NotImplementedError(\n            \"function is not implemented for this dtype: \"\n            \"[how->{how},dtype->{dtype_str}]\".format(how=how, dtype_str=dtype_str)\n        )\n\n    return func",
                                "signature": "_get_cython_function(self, kind, how, values, is_numeric)"
                            },
                            {
                                "code": "def _cython_operation(self, kind, values, how, axis, min_count=-1, **kwargs):\n    assert kind in [\"transform\", \"aggregate\"]\n    orig_values = values\n\n    # can we do this operation with our cython functions\n    # if not raise NotImplementedError\n\n    # we raise NotImplemented if this is an invalid operation\n    # entirely, e.g. adding datetimes\n\n    # categoricals are only 1d, so we\n    # are not setup for dim transforming\n    if is_categorical_dtype(values) or is_sparse(values):\n        raise NotImplementedError(\"{} dtype not supported\".format(values.dtype))\n    elif is_datetime64_any_dtype(values):\n        if how in [\"add\", \"prod\", \"cumsum\", \"cumprod\"]:\n            raise NotImplementedError(\n                \"datetime64 type does not support {} operations\".format(how)\n            )\n    elif is_timedelta64_dtype(values):\n        if how in [\"prod\", \"cumprod\"]:\n            raise NotImplementedError(\n                \"timedelta64 type does not support {} operations\".format(how)\n            )\n\n    if is_datetime64tz_dtype(values.dtype):\n        # Cast to naive; we'll cast back at the end of the function\n        # TODO: possible need to reshape?  kludge can be avoided when\n        #  2D EA is allowed.\n        values = values.view(\"M8[ns]\")\n\n    is_datetimelike = needs_i8_conversion(values.dtype)\n    is_numeric = is_numeric_dtype(values.dtype)\n\n    if is_datetimelike:\n        values = values.view(\"int64\")\n        is_numeric = True\n    elif is_bool_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values):\n        # we use iNaT for the missing value on ints\n        # so pre-convert to guard this condition\n        if (values == iNaT).any():\n            values = ensure_float64(values)\n        else:\n            values = ensure_int_or_float(values)\n    elif is_numeric and not is_complex_dtype(values):\n        values = ensure_float64(values)\n    else:\n        values = values.astype(object)\n\n    arity = self._cython_arity.get(how, 1)\n\n    vdim = values.ndim\n    swapped = False\n    if vdim == 1:\n        values = values[:, None]\n        out_shape = (self.ngroups, arity)\n    else:\n        if axis > 0:\n            swapped = True\n            assert axis == 1, axis\n            values = values.T\n        if arity > 1:\n            raise NotImplementedError(\n                \"arity of more than 1 is not supported for the 'how' argument\"\n            )\n        out_shape = (self.ngroups,) + values.shape[1:]\n\n    try:\n        func = self._get_cython_function(kind, how, values, is_numeric)\n    except NotImplementedError:\n        if is_numeric:\n            try:\n                values = ensure_float64(values)\n            except TypeError:\n                if lib.infer_dtype(values, skipna=False) == \"complex\":\n                    values = values.astype(complex)\n                else:\n                    raise\n            func = self._get_cython_function(kind, how, values, is_numeric)\n        else:\n            raise\n\n    if how == \"rank\":\n        out_dtype = \"float\"\n    else:\n        if is_numeric:\n            out_dtype = \"{kind}{itemsize}\".format(\n                kind=values.dtype.kind, itemsize=values.dtype.itemsize\n            )\n        else:\n            out_dtype = \"object\"\n\n    labels, _, _ = self.group_info\n\n    if kind == \"aggregate\":\n        result = _maybe_fill(\n            np.empty(out_shape, dtype=out_dtype), fill_value=np.nan\n        )\n        counts = np.zeros(self.ngroups, dtype=np.int64)\n        result = self._aggregate(\n            result,\n            counts,\n            values,\n            labels,\n            func,\n            is_numeric,\n            is_datetimelike,\n            min_count,\n        )\n    elif kind == \"transform\":\n        result = _maybe_fill(\n            np.empty_like(values, dtype=out_dtype), fill_value=np.nan\n        )\n\n        # TODO: min_count\n        result = self._transform(\n            result, values, labels, func, is_numeric, is_datetimelike, **kwargs\n        )\n\n    if is_integer_dtype(result) and not is_datetimelike:\n        mask = result == iNaT\n        if mask.any():\n            result = result.astype(\"float64\")\n            result[mask] = np.nan\n\n    if kind == \"aggregate\" and self._filter_empty_groups and not counts.all():\n        assert result.ndim != 2\n        result = result[counts > 0]\n\n    if vdim == 1 and arity == 1:\n        result = result[:, 0]\n\n    if how in self._name_functions:\n        # TODO\n        names = self._name_functions[how]()\n    else:\n        names = None\n\n    if swapped:\n        result = result.swapaxes(0, axis)\n\n    if is_datetime64tz_dtype(orig_values.dtype):\n        result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\n    elif is_datetimelike and kind == \"aggregate\":\n        result = result.astype(orig_values.dtype)\n\n    return result, names",
                                "signature": "_cython_operation(self, kind, values, how, axis, min_count=-1, **kwargs)"
                            },
                            {
                                "code": "def aggregate(self, values, how, axis=0, min_count=-1):\n    return self._cython_operation(\n        \"aggregate\", values, how, axis, min_count=min_count\n    )",
                                "signature": "aggregate(self, values, how, axis=0, min_count=-1)"
                            },
                            {
                                "code": "def transform(self, values, how, axis=0, **kwargs):\n    return self._cython_operation(\"transform\", values, how, axis, **kwargs)",
                                "signature": "transform(self, values, how, axis=0, **kwargs)"
                            },
                            {
                                "code": "def _aggregate(\n    self,\n    result,\n    counts,\n    values,\n    comp_ids,\n    agg_func,\n    is_numeric,\n    is_datetimelike,\n    min_count=-1,\n):\n    if values.ndim > 2:\n        # punting for now\n        raise NotImplementedError(\"number of dimensions is currently limited to 2\")\n    else:\n        agg_func(result, counts, values, comp_ids, min_count)\n\n    return result",
                                "signature": "_aggregate(self, result, counts, values, comp_ids, agg_func, is_numeric, is_datetimelike, min_count=-1)"
                            },
                            {
                                "code": "def _transform(\n    self,\n    result,\n    values,\n    comp_ids,\n    transform_func,\n    is_numeric,\n    is_datetimelike,\n    **kwargs\n):\n\n    comp_ids, _, ngroups = self.group_info\n    if values.ndim > 2:\n        # punting for now\n        raise NotImplementedError(\"number of dimensions is currently limited to 2\")\n    else:\n        transform_func(result, values, comp_ids, ngroups, is_datetimelike, **kwargs)\n\n    return result",
                                "signature": "_transform(self, result, values, comp_ids, transform_func, is_numeric, is_datetimelike, **kwargs)"
                            },
                            {
                                "code": "def agg_series(self, obj, func):\n    try:\n        return self._aggregate_series_fast(obj, func)\n    except AssertionError:\n        raise\n    except ValueError as err:\n        if \"No result.\" in str(err):\n            # raised in libreduction\n            pass\n        elif \"Function does not reduce\" in str(err):\n            # raised in libreduction\n            pass\n        else:\n            raise\n        return self._aggregate_series_pure_python(obj, func)",
                                "signature": "agg_series(self, obj, func)"
                            },
                            {
                                "code": "def _aggregate_series_fast(self, obj, func):\n    func = self._is_builtin_func(func)\n\n    if obj.index._has_complex_internals:\n        raise TypeError(\"Incompatible index for Cython grouper\")\n\n    group_index, _, ngroups = self.group_info\n\n    # avoids object / Series creation overhead\n    dummy = obj._get_values(slice(None, 0))\n    indexer = get_group_index_sorter(group_index, ngroups)\n    obj = obj.take(indexer)\n    group_index = algorithms.take_nd(group_index, indexer, allow_fill=False)\n    grouper = libreduction.SeriesGrouper(obj, func, group_index, ngroups, dummy)\n    result, counts = grouper.get_result()\n    return result, counts",
                                "signature": "_aggregate_series_fast(self, obj, func)"
                            },
                            {
                                "code": "def _aggregate_series_pure_python(self, obj, func):\n\n    group_index, _, ngroups = self.group_info\n\n    counts = np.zeros(ngroups, dtype=int)\n    result = None\n\n    splitter = get_splitter(obj, group_index, ngroups, axis=self.axis)\n\n    for label, group in splitter:\n        res = func(group)\n        if result is None:\n            if isinstance(res, (Series, Index, np.ndarray)):\n                raise ValueError(\"Function does not reduce\")\n            result = np.empty(ngroups, dtype=\"O\")\n\n        counts[label] = group.shape[0]\n        result[label] = res\n\n    result = lib.maybe_convert_objects(result, try_float=0)\n    return result, counts",
                                "signature": "_aggregate_series_pure_python(self, obj, func)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class BinGrouper:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self, bins, binlabels, filter_empty=False, mutated=False, indexer=None\n):\n    self.bins = ensure_int64(bins)\n    self.binlabels = ensure_index(binlabels)\n    self._filter_empty_groups = filter_empty\n    self.mutated = mutated\n    self.indexer = indexer",
                                "signature": "__init__(self, bins, binlabels, filter_empty=False, mutated=False, indexer=None)"
                            },
                            {
                                "code": "@cache_readonly\ndef groups(self):\n    \"\"\" dict {group name -> group labels} \"\"\"\n\n    # this is mainly for compat\n    # GH 3881\n    result = {\n        key: value\n        for key, value in zip(self.binlabels, self.bins)\n        if key is not NaT\n    }\n    return result",
                                "signature": "groups(self)"
                            },
                            {
                                "code": "@property\ndef nkeys(self):\n    return 1",
                                "signature": "nkeys(self)"
                            },
                            {
                                "code": "def _get_grouper(self):\n    \"\"\"\n    We are a grouper as part of another's groupings.\n\n    We have a specific method of grouping, so cannot\n    convert to a Index for our grouper.\n    \"\"\"\n    return self",
                                "signature": "_get_grouper(self)"
                            },
                            {
                                "code": "def get_iterator(self, data, axis=0):\n    \"\"\"\n    Groupby iterator\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    if isinstance(data, NDFrame):\n        slicer = lambda start, edge: data._slice(slice(start, edge), axis=axis)\n        length = len(data.axes[axis])\n    else:\n        slicer = lambda start, edge: data[slice(start, edge)]\n        length = len(data)\n\n    start = 0\n    for edge, label in zip(self.bins, self.binlabels):\n        if label is not NaT:\n            yield label, slicer(start, edge)\n        start = edge\n\n    if start < length:\n        yield self.binlabels[-1], slicer(start, None)",
                                "signature": "get_iterator(self, data, axis=0)"
                            },
                            {
                                "code": "@cache_readonly\ndef indices(self):\n    indices = collections.defaultdict(list)\n\n    i = 0\n    for label, bin in zip(self.binlabels, self.bins):\n        if i < bin:\n            if label is not NaT:\n                indices[label] = list(range(i, bin))\n            i = bin\n    return indices",
                                "signature": "indices(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef group_info(self):\n    ngroups = self.ngroups\n    obs_group_ids = np.arange(ngroups)\n    rep = np.diff(np.r_[0, self.bins])\n\n    rep = ensure_platform_int(rep)\n    if ngroups == len(self.bins):\n        comp_ids = np.repeat(np.arange(ngroups), rep)\n    else:\n        comp_ids = np.repeat(np.r_[-1, np.arange(ngroups)], rep)\n\n    return (\n        comp_ids.astype(\"int64\", copy=False),\n        obs_group_ids.astype(\"int64\", copy=False),\n        ngroups,\n    )",
                                "signature": "group_info(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef result_index(self):\n    if len(self.binlabels) != 0 and isna(self.binlabels[0]):\n        return self.binlabels[1:]\n\n    return self.binlabels",
                                "signature": "result_index(self)"
                            },
                            {
                                "code": "@property\ndef levels(self):\n    return [self.binlabels]",
                                "signature": "levels(self)"
                            },
                            {
                                "code": "@property\ndef names(self):\n    return [self.binlabels.name]",
                                "signature": "names(self)"
                            },
                            {
                                "code": "@property\ndef groupings(self):\n    from pandas.core.groupby.grouper import Grouping\n\n    return [\n        Grouping(lvl, lvl, in_axis=False, level=None, name=name)\n        for lvl, name in zip(self.levels, self.names)\n    ]",
                                "signature": "groupings(self)"
                            },
                            {
                                "code": "def agg_series(self, obj, func):\n    dummy = obj[:0]\n    grouper = libreduction.SeriesBinGrouper(obj, func, self.bins, dummy)\n    return grouper.get_result()",
                                "signature": "agg_series(self, obj, func)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class DataSplitter:",
                        "functions": [
                            {
                                "code": "def __init__(self, data, labels, ngroups, axis=0):\n    self.data = data\n    self.labels = ensure_int64(labels)\n    self.ngroups = ngroups\n\n    self.axis = axis",
                                "signature": "__init__(self, data, labels, ngroups, axis=0)"
                            },
                            {
                                "code": "@cache_readonly\ndef slabels(self):\n    # Sorted labels\n    return algorithms.take_nd(self.labels, self.sort_idx, allow_fill=False)",
                                "signature": "slabels(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef sort_idx(self):\n    # Counting sort indexer\n    return get_group_index_sorter(self.labels, self.ngroups)",
                                "signature": "sort_idx(self)"
                            },
                            {
                                "code": "def __iter__(self):\n    sdata = self._get_sorted_data()\n\n    if self.ngroups == 0:\n        # we are inside a generator, rather than raise StopIteration\n        # we merely return signal the end\n        return\n\n    starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n    for i, (start, end) in enumerate(zip(starts, ends)):\n        # Since I'm now compressing the group ids, it's now not \"possible\"\n        # to produce empty slices because such groups would not be observed\n        # in the data\n        # if start >= end:\n        #     raise AssertionError('Start %s must be less than end %s'\n        #                          % (str(start), str(end)))\n        yield i, self._chop(sdata, slice(start, end))",
                                "signature": "__iter__(self)"
                            },
                            {
                                "code": "def _get_sorted_data(self):\n    return self.data.take(self.sort_idx, axis=self.axis)",
                                "signature": "_get_sorted_data(self)"
                            },
                            {
                                "code": "def _chop(self, sdata, slice_obj):\n    raise AbstractMethodError(self)",
                                "signature": "_chop(self, sdata, slice_obj)"
                            },
                            {
                                "code": "def apply(self, f):\n    raise AbstractMethodError(self)",
                                "signature": "apply(self, f)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class SeriesSplitter:",
                        "functions": [
                            {
                                "code": "def _chop(self, sdata, slice_obj):\n    return sdata._get_values(slice_obj)",
                                "signature": "_chop(self, sdata, slice_obj)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class FrameSplitter:",
                        "functions": [
                            {
                                "code": "def fast_apply(self, f, names):\n    # must return keys::list, values::list, mutated::bool\n    starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n    sdata = self._get_sorted_data()\n    return libreduction.apply_frame_axis0(sdata, f, names, starts, ends)",
                                "signature": "fast_apply(self, f, names)"
                            },
                            {
                                "code": "def _chop(self, sdata, slice_obj):\n    if self.axis == 0:\n        return sdata.iloc[slice_obj]\n    else:\n        return sdata._slice(slice_obj, axis=1)",
                                "signature": "_chop(self, sdata, slice_obj)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "lenidx": [
                    97,
                    74,
                    84,
                    77
                ],
                "len": [
                    134,
                    151,
                    793,
                    796,
                    285,
                    301,
                    181,
                    826,
                    316,
                    321,
                    325,
                    839,
                    74,
                    75,
                    207,
                    335,
                    346,
                    876,
                    250
                ],
                "values": [
                    513,
                    517,
                    637,
                    520,
                    653,
                    526,
                    657,
                    531,
                    534,
                    538,
                    411,
                    540,
                    541,
                    544,
                    553,
                    568,
                    577,
                    582,
                    74,
                    81,
                    466,
                    84,
                    476,
                    477,
                    478,
                    98,
                    483,
                    616,
                    489,
                    620,
                    493,
                    495,
                    496,
                    499,
                    501,
                    502,
                    503,
                    633,
                    506,
                    507,
                    509,
                    510,
                    511
                ],
                "lenbin": [
                    75,
                    77,
                    84,
                    87,
                    93
                ],
                "binner": [
                    81,
                    75,
                    84,
                    94
                ],
                "ValueError": [
                    707,
                    78,
                    82,
                    85,
                    666
                ],
                "bins": [
                    105,
                    750,
                    102,
                    87
                ],
                "np.empty": [
                    562,
                    708,
                    87
                ],
                "np": [
                    608,
                    321,
                    577,
                    706,
                    708,
                    589,
                    823,
                    562,
                    564,
                    277,
                    310,
                    87,
                    822,
                    698,
                    827,
                    829
                ],
                "np.int64": [
                    608,
                    564,
                    87
                ],
                "j": [
                    97,
                    98,
                    100,
                    102,
                    89
                ],
                "bc": [
                    90,
                    102,
                    103
                ],
                "i": [
                    164,
                    235,
                    811,
                    813,
                    815,
                    816,
                    917,
                    94,
                    924,
                    93,
                    222
                ],
                "range": [
                    93,
                    815
                ],
                "r_bin": [
                    98,
                    94
                ],
                "closed": [
                    98
                ],
                "self._filter_empty_groups": [
                    752,
                    134,
                    591
                ],
                "self": [
                    515,
                    521,
                    531,
                    534,
                    544,
                    558,
                    564,
                    565,
                    581,
                    591,
                    598,
                    600,
                    615,
                    620,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    652,
                    144,
                    147,
                    151,
                    663,
                    162,
                    163,
                    675,
                    678,
                    168,
                    683,
                    178,
                    181,
                    182,
                    696,
                    184,
                    187,
                    701,
                    190,
                    191,
                    192,
                    750,
                    751,
                    752,
                    753,
                    754,
                    250,
                    251,
                    764,
                    253,
                    254,
                    259,
                    263,
                    267,
                    780,
                    274,
                    280,
                    285,
                    286,
                    799,
                    288,
                    290,
                    805,
                    295,
                    299,
                    812,
                    308,
                    309,
                    310,
                    821,
                    823,
                    826,
                    315,
                    317,
                    318,
                    320,
                    325,
                    839,
                    840,
                    329,
                    330,
                    331,
                    842,
                    846,
                    335,
                    336,
                    338,
                    339,
                    850,
                    341,
                    346,
                    347,
                    858,
                    350,
                    863,
                    891,
                    892,
                    893,
                    895,
                    900,
                    905,
                    908,
                    910,
                    915,
                    924,
                    927,
                    930,
                    933,
                    944,
                    946,
                    438,
                    950
                ],
                "self.compressed": [
                    346,
                    134,
                    335
                ],
                "groupings": [
                    136,
                    134
                ],
                "self.axis": [
                    290,
                    135,
                    950,
                    895,
                    701,
                    927
                ],
                "axis": [
                    162,
                    135,
                    200,
                    169,
                    616,
                    523,
                    620,
                    525,
                    895,
                    792,
                    793,
                    605,
                    191
                ],
                "self.groupings": [
                    259,
                    263,
                    136,
                    267,
                    144,
                    151,
                    285,
                    286,
                    288,
                    178,
                    181,
                    315,
                    320,
                    330,
                    335,
                    336,
                    339,
                    346,
                    347,
                    350,
                    250,
                    251,
                    253,
                    254
                ],
                "self.sort": [
                    137,
                    318
                ],
                "sort": [
                    137
                ],
                "self.group_keys": [
                    138
                ],
                "group_keys": [
                    192,
                    138,
                    203,
                    207,
                    208,
                    245,
                    222
                ],
                "self.mutated": [
                    753,
                    139,
                    190
                ],
                "mutated": [
                    139,
                    203,
                    208,
                    753,
                    242,
                    245,
                    190
                ],
                "self.indexer": [
                    754,
                    140,
                    309,
                    310
                ],
                "indexer": [
                    140,
                    687,
                    688,
                    689,
                    754
                ],
                "tuple": [
                    144
                ],
                "ping.ngroups": [
                    144
                ],
                "ping": [
                    288,
                    320,
                    321,
                    259,
                    350,
                    352,
                    263,
                    330,
                    267,
                    144,
                    339,
                    315,
                    253,
                    254
                ],
                "property": [
                    257,
                    769,
                    261,
                    327,
                    265,
                    844,
                    142,
                    848,
                    852,
                    149
                ],
                "iter": [
                    147
                ],
                "self.indices": [
                    147
                ],
                "splitter": [
                    162,
                    164,
                    199,
                    203,
                    703,
                    701,
                    222,
                    191
                ],
                "self._get_splitter": [
                    162,
                    191
                ],
                "data": [
                    162,
                    891,
                    962,
                    169,
                    791,
                    792,
                    793,
                    795,
                    796,
                    957,
                    959,
                    191
                ],
                "keys": [
                    163,
                    164,
                    254,
                    255
                ],
                "self._get_group_keys": [
                    192,
                    163
                ],
                "key": [
                    164,
                    165,
                    763,
                    764,
                    765,
                    222,
                    223
                ],
                "group": [
                    704,
                    164,
                    165,
                    710,
                    868,
                    869,
                    871,
                    239,
                    240,
                    703,
                    222,
                    223
                ],
                "zip": [
                    288,
                    164,
                    812,
                    917,
                    858,
                    764,
                    222,
                    350,
                    799
                ],
                "comp_ids": [
                    832,
                    827,
                    168,
                    169,
                    329,
                    299,
                    331,
                    652,
                    302,
                    303,
                    829,
                    657,
                    184,
                    187,
                    637
                ],
                "_": [
                    168,
                    329,
                    683,
                    652,
                    558,
                    696,
                    274,
                    308,
                    184
                ],
                "ngroups": [
                    652,
                    657,
                    168,
                    169,
                    683,
                    301,
                    303,
                    687,
                    690,
                    821,
                    822,
                    696,
                    184,
                    698,
                    827,
                    187,
                    826,
                    701,
                    829,
                    834,
                    708,
                    893
                ],
                "self.group_info": [
                    295,
                    168,
                    329,
                    683,
                    652,
                    558,
                    696,
                    274,
                    308,
                    184
                ],
                "get_splitter": [
                    169,
                    701
                ],
                "grouper": [
                    864,
                    690,
                    178,
                    691,
                    863
                ],
                "self.levels": [
                    858,
                    187,
                    182
                ],
                "get_flattened_iterator": [
                    187
                ],
                "self.labels": [
                    900,
                    905,
                    187,
                    892
                ],
                "result_values": [
                    193,
                    229,
                    230,
                    203,
                    207,
                    208,
                    243,
                    245
                ],
                "f_name": [
                    196,
                    198
                ],
                "com.get_callable_name": [
                    196
                ],
                "com": [
                    196,
                    254
                ],
                "f": [
                    416,
                    417,
                    418,
                    448,
                    196,
                    203,
                    430,
                    240,
                    432,
                    947,
                    436,
                    444,
                    445
                ],
                "base.plotting_methods": [
                    198
                ],
                "base": [
                    198
                ],
                "hasattr": [
                    430,
                    199
                ],
                "splitter.fast_apply": [
                    203
                ],
                "libreduction.InvalidApply": [
                    210
                ],
                "libreduction": [
                    690,
                    210,
                    947,
                    863
                ],
                "TypeError": [
                    681,
                    539,
                    215
                ],
                "str": [
                    216,
                    667,
                    670
                ],
                "err": [
                    216,
                    667,
                    670
                ],
                "object.__setattr__": [
                    223
                ],
                "object": [
                    513,
                    223
                ],
                "group_axes": [
                    241,
                    239
                ],
                "_get_axes": [
                    239
                ],
                "res": [
                    704,
                    706,
                    711,
                    240,
                    241,
                    243
                ],
                "_is_indexed_like": [
                    241
                ],
                "result_values.append": [
                    243
                ],
                "indices": [
                    809,
                    251,
                    817,
                    815
                ],
                "label_list": [
                    253,
                    255
                ],
                "ping.labels": [
                    321,
                    259,
                    330,
                    315,
                    253
                ],
                "com.values_from_object": [
                    254
                ],
                "ping.group_index": [
                    321,
                    254,
                    263
                ],
                "get_indexer_dict": [
                    255
                ],
                "cache_readonly": [
                    897,
                    323,
                    292,
                    837,
                    902,
                    807,
                    297,
                    333,
                    305,
                    819,
                    756,
                    247,
                    282
                ],
                "ping.name": [
                    267
                ],
                "ids": [
                    274,
                    275,
                    277
                ],
                "ngroup": [
                    274,
                    276,
                    277
                ],
                "ensure_platform_int": [
                    825,
                    275,
                    351
                ],
                "out": [
                    280,
                    277,
                    279
                ],
                "np.bincount": [
                    277
                ],
                "Series": [
                    706,
                    868,
                    875,
                    280,
                    957
                ],
                "self.result_index": [
                    280,
                    325
                ],
                "groups": [
                    286
                ],
                "to_groupby": [
                    288,
                    289,
                    290
                ],
                "ping.grouper": [
                    288
                ],
                "Index": [
                    289,
                    706,
                    295
                ],
                "self.axis.groupby": [
                    290
                ],
                "is_monotonic": [
                    295
                ],
                "obs_group_ids": [
                    833,
                    299,
                    301,
                    303,
                    822
                ],
                "self._get_compressed_labels": [
                    299
                ],
                "ensure_int64": [
                    892,
                    302,
                    750
                ],
                "labels": [
                    352,
                    582,
                    330,
                    331,
                    558,
                    308,
                    310,
                    311,
                    312,
                    569,
                    892,
                    350,
                    351
                ],
                "sorter": [
                    310,
                    311
                ],
                "np.lexsort": [
                    310
                ],
                "all_labels": [
                    315,
                    316,
                    317
                ],
                "group_index": [
                    701,
                    683,
                    687,
                    689,
                    690,
                    696,
                    317,
                    318
                ],
                "get_group_index": [
                    317
                ],
                "self.shape": [
                    331,
                    317
                ],
                "compress_group_index": [
                    318
                ],
                "np.arange": [
                    321,
                    827,
                    829,
                    822
                ],
                "obs_ids": [
                    329,
                    331
                ],
                "decons_obs_group_ids": [
                    331
                ],
                "result_index.rename": [
                    336
                ],
                "result_index": [
                    336,
                    347
                ],
                "self.names": [
                    336,
                    858,
                    341
                ],
                "codes": [
                    338,
                    341
                ],
                "self.recons_labels": [
                    338,
                    350
                ],
                "levels": [
                    352,
                    354,
                    339,
                    341
                ],
                "ping.result_index": [
                    352,
                    339
                ],
                "result": [
                    657,
                    659,
                    767,
                    561,
                    691,
                    692,
                    565,
                    566,
                    699,
                    576,
                    705,
                    708,
                    581,
                    582,
                    711,
                    585,
                    586,
                    713,
                    588,
                    589,
                    714,
                    592,
                    593,
                    340,
                    596,
                    343,
                    605,
                    608,
                    610,
                    612,
                    762,
                    637,
                    639
                ],
                "MultiIndex": [
                    340
                ],
                "name_list": [
                    354,
                    356,
                    349
                ],
                "ping.result_index.take": [
                    352
                ],
                "name_list.append": [
                    354
                ],
                "_cython_functions": [
                    361
                ],
                "func": [
                    384,
                    544,
                    704,
                    451,
                    675,
                    454,
                    582,
                    456,
                    678,
                    462,
                    690,
                    372,
                    534,
                    663,
                    441,
                    570,
                    863
                ],
                "a": [
                    385,
                    372
                ],
                "b": [
                    386,
                    372
                ],
                "c": [
                    387,
                    372
                ],
                "d": [
                    372
                ],
                "e": [
                    388
                ],
                "kwargs.get": [
                    392,
                    389,
                    390,
                    391
                ],
                "kwargs": [
                    448,
                    962,
                    389,
                    390,
                    391,
                    392,
                    582,
                    620,
                    657
                ],
                "_cython_arity": [
                    398
                ],
                "_name_functions": [
                    400
                ],
                "SelectionMixin._builtin_table.get": [
                    407
                ],
                "SelectionMixin._builtin_table": [
                    407
                ],
                "SelectionMixin": [
                    407
                ],
                "arg": [
                    407
                ],
                "dtype_str": [
                    432,
                    411,
                    421,
                    459
                ],
                "values.dtype.name": [
                    411
                ],
                "values.dtype": [
                    489,
                    553,
                    495,
                    496,
                    501,
                    411,
                    477
                ],
                "getattr": [
                    416,
                    422
                ],
                "libgroupby": [
                    416,
                    423
                ],
                "fname": [
                    416,
                    424
                ],
                "is_numeric": [
                    544,
                    417,
                    582,
                    551,
                    496,
                    500,
                    534,
                    536,
                    571,
                    510
                ],
                "dt": [
                    424,
                    421
                ],
                "f2": [
                    427,
                    428,
                    422
                ],
                "format": [
                    481,
                    486,
                    424,
                    552,
                    458,
                    477
                ],
                "f.__signatures__": [
                    432
                ],
                "ftype": [
                    454,
                    438,
                    440,
                    441,
                    444
                ],
                "self._cython_functions": [
                    438
                ],
                "kind": [
                    544,
                    609,
                    591,
                    560,
                    465,
                    438,
                    534,
                    575
                ],
                "how": [
                    544,
                    481,
                    515,
                    484,
                    548,
                    486,
                    616,
                    459,
                    600,
                    620,
                    438,
                    534,
                    598,
                    479
                ],
                "isinstance": [
                    706,
                    868,
                    875,
                    879,
                    791,
                    440,
                    957,
                    959
                ],
                "dict": [
                    440
                ],
                "afunc": [
                    448,
                    441
                ],
                "get_func": [
                    441,
                    454
                ],
                "ftype.get": [
                    444
                ],
                "args": [
                    448,
                    962
                ],
                "wrapper": [
                    451
                ],
                "NotImplementedError": [
                    480,
                    485,
                    457,
                    655,
                    528,
                    535,
                    635,
                    477
                ],
                "orig_values": [
                    608,
                    466,
                    610,
                    607
                ],
                "is_categorical_dtype": [
                    476
                ],
                "is_sparse": [
                    476
                ],
                "is_datetime64_any_dtype": [
                    478
                ],
                "is_timedelta64_dtype": [
                    483
                ],
                "is_datetime64tz_dtype": [
                    489,
                    607
                ],
                "values.view": [
                    499,
                    493
                ],
                "is_datetimelike": [
                    609,
                    582,
                    585,
                    495,
                    657,
                    498,
                    572
                ],
                "needs_i8_conversion": [
                    495
                ],
                "is_numeric_dtype": [
                    496
                ],
                "is_bool_dtype": [
                    501
                ],
                "ensure_float64": [
                    538,
                    507,
                    502,
                    511
                ],
                "is_integer_dtype": [
                    585,
                    503
                ],
                "any": [
                    506
                ],
                "iNaT": [
                    506,
                    586
                ],
                "ensure_int_or_float": [
                    509
                ],
                "is_complex_dtype": [
                    510
                ],
                "values.astype": [
                    513,
                    541
                ],
                "arity": [
                    521,
                    595,
                    515,
                    527
                ],
                "self._cython_arity.get": [
                    515
                ],
                "self._cython_arity": [
                    515
                ],
                "vdim": [
                    595,
                    517,
                    519
                ],
                "values.ndim": [
                    633,
                    517,
                    653
                ],
                "swapped": [
                    524,
                    518,
                    604
                ],
                "out_shape": [
                    521,
                    562,
                    531
                ],
                "self.ngroups": [
                    521,
                    905,
                    910,
                    944,
                    531,
                    564,
                    821,
                    915,
                    893
                ],
                "values.T": [
                    526
                ],
                "values.shape": [
                    531
                ],
                "self._get_cython_function": [
                    544,
                    534
                ],
                "lib.infer_dtype": [
                    540
                ],
                "lib": [
                    944,
                    713,
                    915,
                    540
                ],
                "complex": [
                    541
                ],
                "out_dtype": [
                    577,
                    549,
                    552,
                    556,
                    562
                ],
                "values.dtype.kind": [
                    553
                ],
                "values.dtype.itemsize": [
                    553
                ],
                "_maybe_fill": [
                    576,
                    561
                ],
                "np.nan": [
                    577,
                    562,
                    589
                ],
                "counts": [
                    710,
                    714,
                    591,
                    593,
                    691,
                    564,
                    692,
                    567,
                    698,
                    637
                ],
                "np.zeros": [
                    698,
                    564
                ],
                "self._aggregate": [
                    565
                ],
                "min_count": [
                    616,
                    637,
                    573
                ],
                "np.empty_like": [
                    577
                ],
                "self._transform": [
                    581
                ],
                "mask": [
                    586,
                    587,
                    589
                ],
                "mask.any": [
                    587
                ],
                "result.astype": [
                    608,
                    610,
                    588
                ],
                "counts.all": [
                    591
                ],
                "result.ndim": [
                    592
                ],
                "self._name_functions": [
                    600,
                    598
                ],
                "names": [
                    600,
                    602,
                    947,
                    612
                ],
                "result.swapaxes": [
                    605
                ],
                "orig_values.dtype": [
                    608,
                    610,
                    607
                ],
                "type": [
                    608
                ],
                "self._cython_operation": [
                    620,
                    615
                ],
                "agg_func": [
                    637
                ],
                "transform_func": [
                    657
                ],
                "self._aggregate_series_fast": [
                    663
                ],
                "obj": [
                    675,
                    680,
                    875,
                    686,
                    878,
                    688,
                    879,
                    690,
                    880,
                    663,
                    701,
                    862,
                    863
                ],
                "AssertionError": [
                    664
                ],
                "self._aggregate_series_pure_python": [
                    675
                ],
                "self._is_builtin_func": [
                    678
                ],
                "obj.index._has_complex_internals": [
                    680
                ],
                "obj.index": [
                    680,
                    880,
                    878
                ],
                "dummy": [
                    862,
                    690,
                    686,
                    863
                ],
                "obj._get_values": [
                    686
                ],
                "slice": [
                    792,
                    795,
                    924,
                    686
                ],
                "get_group_index_sorter": [
                    905,
                    687
                ],
                "obj.take": [
                    688
                ],
                "algorithms.take_nd": [
                    689,
                    900
                ],
                "algorithms": [
                    689,
                    900
                ],
                "libreduction.SeriesGrouper": [
                    690
                ],
                "grouper.get_result": [
                    864,
                    691
                ],
                "int": [
                    698
                ],
                "label": [
                    800,
                    801,
                    710,
                    711,
                    812,
                    814,
                    815,
                    703,
                    799
                ],
                "np.ndarray": [
                    706
                ],
                "group.shape": [
                    710
                ],
                "lib.maybe_convert_objects": [
                    713
                ],
                "BaseGrouper": [
                    717
                ],
                "self.bins": [
                    812,
                    750,
                    863,
                    823,
                    826,
                    764,
                    799
                ],
                "self.binlabels": [
                    805,
                    839,
                    840,
                    842,
                    812,
                    846,
                    751,
                    850,
                    764,
                    799
                ],
                "ensure_index": [
                    751
                ],
                "binlabels": [
                    751
                ],
                "filter_empty": [
                    752
                ],
                "value": [
                    763,
                    764
                ],
                "NaT": [
                    800,
                    765,
                    814
                ],
                "NDFrame": [
                    791
                ],
                "slicer": [
                    792,
                    801,
                    795,
                    805
                ],
                "data._slice": [
                    792
                ],
                "start": [
                    801,
                    802,
                    804,
                    805,
                    917,
                    792,
                    795,
                    924,
                    798
                ],
                "edge": [
                    801,
                    802,
                    792,
                    795,
                    799
                ],
                "length": [
                    793,
                    796,
                    804
                ],
                "data.axes": [
                    793
                ],
                "collections.defaultdict": [
                    809
                ],
                "collections": [
                    809
                ],
                "list": [
                    809,
                    815
                ],
                "bin": [
                    816,
                    812,
                    813,
                    815
                ],
                "rep": [
                    825,
                    827,
                    829,
                    823
                ],
                "np.diff": [
                    823
                ],
                "np.r_": [
                    829,
                    823
                ],
                "np.repeat": [
                    827,
                    829
                ],
                "comp_ids.astype": [
                    832
                ],
                "obs_group_ids.astype": [
                    833
                ],
                "isna": [
                    839
                ],
                "self.binlabels.name": [
                    850
                ],
                "Grouping": [
                    857
                ],
                "lvl": [
                    857,
                    858
                ],
                "name": [
                    857,
                    858
                ],
                "libreduction.SeriesBinGrouper": [
                    863
                ],
                "group.index": [
                    869
                ],
                "group.axes": [
                    871
                ],
                "axes": [
                    880,
                    876,
                    878
                ],
                "obj.index.equals": [
                    880,
                    878
                ],
                "DataFrame": [
                    959,
                    879
                ],
                "self.data": [
                    891,
                    927
                ],
                "self.sort_idx": [
                    900,
                    927
                ],
                "sdata": [
                    938,
                    908,
                    946,
                    947,
                    951,
                    953,
                    924
                ],
                "self._get_sorted_data": [
                    946,
                    908
                ],
                "starts": [
                    944,
                    947,
                    915,
                    917
                ],
                "ends": [
                    944,
                    947,
                    915,
                    917
                ],
                "lib.generate_slices": [
                    944,
                    915
                ],
                "self.slabels": [
                    944,
                    915
                ],
                "end": [
                    924,
                    917
                ],
                "enumerate": [
                    917
                ],
                "self._chop": [
                    924
                ],
                "self.data.take": [
                    927
                ],
                "AbstractMethodError": [
                    930,
                    933
                ],
                "DataSplitter": [
                    936,
                    941
                ],
                "sdata._get_values": [
                    938
                ],
                "slice_obj": [
                    953,
                    938,
                    951
                ],
                "libreduction.apply_frame_axis0": [
                    947
                ],
                "sdata.iloc": [
                    951
                ],
                "sdata._slice": [
                    953
                ],
                "klass": [
                    960,
                    962,
                    958
                ],
                "SeriesSplitter": [
                    958
                ],
                "FrameSplitter": [
                    960
                ]
            },
            "filtered_variables_in_file": {
                "lenidx": [
                    97,
                    74,
                    84,
                    77
                ],
                "values": [
                    513,
                    517,
                    637,
                    520,
                    653,
                    526,
                    657,
                    531,
                    534,
                    538,
                    411,
                    540,
                    541,
                    544,
                    553,
                    568,
                    577,
                    582,
                    74,
                    81,
                    466,
                    84,
                    476,
                    477,
                    478,
                    98,
                    483,
                    616,
                    489,
                    620,
                    493,
                    495,
                    496,
                    499,
                    501,
                    502,
                    503,
                    633,
                    506,
                    507,
                    509,
                    510,
                    511
                ],
                "lenbin": [
                    75,
                    77,
                    84,
                    87,
                    93
                ],
                "binner": [
                    81,
                    75,
                    84,
                    94
                ],
                "bins": [
                    105,
                    750,
                    102,
                    87
                ],
                "np.empty": [
                    562,
                    708,
                    87
                ],
                "np": [
                    608,
                    321,
                    577,
                    706,
                    708,
                    589,
                    823,
                    562,
                    564,
                    277,
                    310,
                    87,
                    822,
                    698,
                    827,
                    829
                ],
                "np.int64": [
                    608,
                    564,
                    87
                ],
                "j": [
                    97,
                    98,
                    100,
                    102,
                    89
                ],
                "bc": [
                    90,
                    102,
                    103
                ],
                "i": [
                    164,
                    235,
                    811,
                    813,
                    815,
                    816,
                    917,
                    94,
                    924,
                    93,
                    222
                ],
                "r_bin": [
                    98,
                    94
                ],
                "closed": [
                    98
                ],
                "self._filter_empty_groups": [
                    752,
                    134,
                    591
                ],
                "self": [
                    515,
                    521,
                    531,
                    534,
                    544,
                    558,
                    564,
                    565,
                    581,
                    591,
                    598,
                    600,
                    615,
                    620,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    652,
                    144,
                    147,
                    151,
                    663,
                    162,
                    163,
                    675,
                    678,
                    168,
                    683,
                    178,
                    181,
                    182,
                    696,
                    184,
                    187,
                    701,
                    190,
                    191,
                    192,
                    750,
                    751,
                    752,
                    753,
                    754,
                    250,
                    251,
                    764,
                    253,
                    254,
                    259,
                    263,
                    267,
                    780,
                    274,
                    280,
                    285,
                    286,
                    799,
                    288,
                    290,
                    805,
                    295,
                    299,
                    812,
                    308,
                    309,
                    310,
                    821,
                    823,
                    826,
                    315,
                    317,
                    318,
                    320,
                    325,
                    839,
                    840,
                    329,
                    330,
                    331,
                    842,
                    846,
                    335,
                    336,
                    338,
                    339,
                    850,
                    341,
                    346,
                    347,
                    858,
                    350,
                    863,
                    891,
                    892,
                    893,
                    895,
                    900,
                    905,
                    908,
                    910,
                    915,
                    924,
                    927,
                    930,
                    933,
                    944,
                    946,
                    438,
                    950
                ],
                "self.compressed": [
                    346,
                    134,
                    335
                ],
                "groupings": [
                    136,
                    134
                ],
                "self.axis": [
                    290,
                    135,
                    950,
                    895,
                    701,
                    927
                ],
                "axis": [
                    162,
                    135,
                    200,
                    169,
                    616,
                    523,
                    620,
                    525,
                    895,
                    792,
                    793,
                    605,
                    191
                ],
                "self.groupings": [
                    259,
                    263,
                    136,
                    267,
                    144,
                    151,
                    285,
                    286,
                    288,
                    178,
                    181,
                    315,
                    320,
                    330,
                    335,
                    336,
                    339,
                    346,
                    347,
                    350,
                    250,
                    251,
                    253,
                    254
                ],
                "self.sort": [
                    137,
                    318
                ],
                "sort": [
                    137
                ],
                "self.group_keys": [
                    138
                ],
                "group_keys": [
                    192,
                    138,
                    203,
                    207,
                    208,
                    245,
                    222
                ],
                "self.mutated": [
                    753,
                    139,
                    190
                ],
                "mutated": [
                    139,
                    203,
                    208,
                    753,
                    242,
                    245,
                    190
                ],
                "self.indexer": [
                    754,
                    140,
                    309,
                    310
                ],
                "indexer": [
                    140,
                    687,
                    688,
                    689,
                    754
                ],
                "ping.ngroups": [
                    144
                ],
                "ping": [
                    288,
                    320,
                    321,
                    259,
                    350,
                    352,
                    263,
                    330,
                    267,
                    144,
                    339,
                    315,
                    253,
                    254
                ],
                "self.indices": [
                    147
                ],
                "splitter": [
                    162,
                    164,
                    199,
                    203,
                    703,
                    701,
                    222,
                    191
                ],
                "self._get_splitter": [
                    162,
                    191
                ],
                "data": [
                    162,
                    891,
                    962,
                    169,
                    791,
                    792,
                    793,
                    795,
                    796,
                    957,
                    959,
                    191
                ],
                "keys": [
                    163,
                    164,
                    254,
                    255
                ],
                "self._get_group_keys": [
                    192,
                    163
                ],
                "key": [
                    164,
                    165,
                    763,
                    764,
                    765,
                    222,
                    223
                ],
                "group": [
                    704,
                    164,
                    165,
                    710,
                    868,
                    869,
                    871,
                    239,
                    240,
                    703,
                    222,
                    223
                ],
                "comp_ids": [
                    832,
                    827,
                    168,
                    169,
                    329,
                    299,
                    331,
                    652,
                    302,
                    303,
                    829,
                    657,
                    184,
                    187,
                    637
                ],
                "_": [
                    168,
                    329,
                    683,
                    652,
                    558,
                    696,
                    274,
                    308,
                    184
                ],
                "ngroups": [
                    652,
                    657,
                    168,
                    169,
                    683,
                    301,
                    303,
                    687,
                    690,
                    821,
                    822,
                    696,
                    184,
                    698,
                    827,
                    187,
                    826,
                    701,
                    829,
                    834,
                    708,
                    893
                ],
                "self.group_info": [
                    295,
                    168,
                    329,
                    683,
                    652,
                    558,
                    696,
                    274,
                    308,
                    184
                ],
                "get_splitter": [
                    169,
                    701
                ],
                "grouper": [
                    864,
                    690,
                    178,
                    691,
                    863
                ],
                "self.levels": [
                    858,
                    187,
                    182
                ],
                "get_flattened_iterator": [
                    187
                ],
                "self.labels": [
                    900,
                    905,
                    187,
                    892
                ],
                "result_values": [
                    193,
                    229,
                    230,
                    203,
                    207,
                    208,
                    243,
                    245
                ],
                "f_name": [
                    196,
                    198
                ],
                "com.get_callable_name": [
                    196
                ],
                "com": [
                    196,
                    254
                ],
                "f": [
                    416,
                    417,
                    418,
                    448,
                    196,
                    203,
                    430,
                    240,
                    432,
                    947,
                    436,
                    444,
                    445
                ],
                "base.plotting_methods": [
                    198
                ],
                "base": [
                    198
                ],
                "splitter.fast_apply": [
                    203
                ],
                "libreduction.InvalidApply": [
                    210
                ],
                "libreduction": [
                    690,
                    210,
                    947,
                    863
                ],
                "err": [
                    216,
                    667,
                    670
                ],
                "object.__setattr__": [
                    223
                ],
                "group_axes": [
                    241,
                    239
                ],
                "_get_axes": [
                    239
                ],
                "res": [
                    704,
                    706,
                    711,
                    240,
                    241,
                    243
                ],
                "_is_indexed_like": [
                    241
                ],
                "result_values.append": [
                    243
                ],
                "indices": [
                    809,
                    251,
                    817,
                    815
                ],
                "label_list": [
                    253,
                    255
                ],
                "ping.labels": [
                    321,
                    259,
                    330,
                    315,
                    253
                ],
                "com.values_from_object": [
                    254
                ],
                "ping.group_index": [
                    321,
                    254,
                    263
                ],
                "get_indexer_dict": [
                    255
                ],
                "cache_readonly": [
                    897,
                    323,
                    292,
                    837,
                    902,
                    807,
                    297,
                    333,
                    305,
                    819,
                    756,
                    247,
                    282
                ],
                "ping.name": [
                    267
                ],
                "ids": [
                    274,
                    275,
                    277
                ],
                "ngroup": [
                    274,
                    276,
                    277
                ],
                "ensure_platform_int": [
                    825,
                    275,
                    351
                ],
                "out": [
                    280,
                    277,
                    279
                ],
                "np.bincount": [
                    277
                ],
                "Series": [
                    706,
                    868,
                    875,
                    280,
                    957
                ],
                "self.result_index": [
                    280,
                    325
                ],
                "groups": [
                    286
                ],
                "to_groupby": [
                    288,
                    289,
                    290
                ],
                "ping.grouper": [
                    288
                ],
                "Index": [
                    289,
                    706,
                    295
                ],
                "self.axis.groupby": [
                    290
                ],
                "is_monotonic": [
                    295
                ],
                "obs_group_ids": [
                    833,
                    299,
                    301,
                    303,
                    822
                ],
                "self._get_compressed_labels": [
                    299
                ],
                "ensure_int64": [
                    892,
                    302,
                    750
                ],
                "labels": [
                    352,
                    582,
                    330,
                    331,
                    558,
                    308,
                    310,
                    311,
                    312,
                    569,
                    892,
                    350,
                    351
                ],
                "sorter": [
                    310,
                    311
                ],
                "np.lexsort": [
                    310
                ],
                "all_labels": [
                    315,
                    316,
                    317
                ],
                "group_index": [
                    701,
                    683,
                    687,
                    689,
                    690,
                    696,
                    317,
                    318
                ],
                "get_group_index": [
                    317
                ],
                "self.shape": [
                    331,
                    317
                ],
                "compress_group_index": [
                    318
                ],
                "np.arange": [
                    321,
                    827,
                    829,
                    822
                ],
                "obs_ids": [
                    329,
                    331
                ],
                "decons_obs_group_ids": [
                    331
                ],
                "result_index.rename": [
                    336
                ],
                "result_index": [
                    336,
                    347
                ],
                "self.names": [
                    336,
                    858,
                    341
                ],
                "codes": [
                    338,
                    341
                ],
                "self.recons_labels": [
                    338,
                    350
                ],
                "levels": [
                    352,
                    354,
                    339,
                    341
                ],
                "ping.result_index": [
                    352,
                    339
                ],
                "result": [
                    657,
                    659,
                    767,
                    561,
                    691,
                    692,
                    565,
                    566,
                    699,
                    576,
                    705,
                    708,
                    581,
                    582,
                    711,
                    585,
                    586,
                    713,
                    588,
                    589,
                    714,
                    592,
                    593,
                    340,
                    596,
                    343,
                    605,
                    608,
                    610,
                    612,
                    762,
                    637,
                    639
                ],
                "MultiIndex": [
                    340
                ],
                "name_list": [
                    354,
                    356,
                    349
                ],
                "ping.result_index.take": [
                    352
                ],
                "name_list.append": [
                    354
                ],
                "_cython_functions": [
                    361
                ],
                "func": [
                    384,
                    544,
                    704,
                    451,
                    675,
                    454,
                    582,
                    456,
                    678,
                    462,
                    690,
                    372,
                    534,
                    663,
                    441,
                    570,
                    863
                ],
                "a": [
                    385,
                    372
                ],
                "b": [
                    386,
                    372
                ],
                "c": [
                    387,
                    372
                ],
                "d": [
                    372
                ],
                "e": [
                    388
                ],
                "kwargs.get": [
                    392,
                    389,
                    390,
                    391
                ],
                "kwargs": [
                    448,
                    962,
                    389,
                    390,
                    391,
                    392,
                    582,
                    620,
                    657
                ],
                "_cython_arity": [
                    398
                ],
                "_name_functions": [
                    400
                ],
                "SelectionMixin._builtin_table.get": [
                    407
                ],
                "SelectionMixin._builtin_table": [
                    407
                ],
                "SelectionMixin": [
                    407
                ],
                "arg": [
                    407
                ],
                "dtype_str": [
                    432,
                    411,
                    421,
                    459
                ],
                "values.dtype.name": [
                    411
                ],
                "values.dtype": [
                    489,
                    553,
                    495,
                    496,
                    501,
                    411,
                    477
                ],
                "libgroupby": [
                    416,
                    423
                ],
                "fname": [
                    416,
                    424
                ],
                "is_numeric": [
                    544,
                    417,
                    582,
                    551,
                    496,
                    500,
                    534,
                    536,
                    571,
                    510
                ],
                "dt": [
                    424,
                    421
                ],
                "f2": [
                    427,
                    428,
                    422
                ],
                "f.__signatures__": [
                    432
                ],
                "ftype": [
                    454,
                    438,
                    440,
                    441,
                    444
                ],
                "self._cython_functions": [
                    438
                ],
                "kind": [
                    544,
                    609,
                    591,
                    560,
                    465,
                    438,
                    534,
                    575
                ],
                "how": [
                    544,
                    481,
                    515,
                    484,
                    548,
                    486,
                    616,
                    459,
                    600,
                    620,
                    438,
                    534,
                    598,
                    479
                ],
                "afunc": [
                    448,
                    441
                ],
                "get_func": [
                    441,
                    454
                ],
                "ftype.get": [
                    444
                ],
                "args": [
                    448,
                    962
                ],
                "wrapper": [
                    451
                ],
                "orig_values": [
                    608,
                    466,
                    610,
                    607
                ],
                "is_categorical_dtype": [
                    476
                ],
                "is_sparse": [
                    476
                ],
                "is_datetime64_any_dtype": [
                    478
                ],
                "is_timedelta64_dtype": [
                    483
                ],
                "is_datetime64tz_dtype": [
                    489,
                    607
                ],
                "values.view": [
                    499,
                    493
                ],
                "is_datetimelike": [
                    609,
                    582,
                    585,
                    495,
                    657,
                    498,
                    572
                ],
                "needs_i8_conversion": [
                    495
                ],
                "is_numeric_dtype": [
                    496
                ],
                "is_bool_dtype": [
                    501
                ],
                "ensure_float64": [
                    538,
                    507,
                    502,
                    511
                ],
                "is_integer_dtype": [
                    585,
                    503
                ],
                "iNaT": [
                    506,
                    586
                ],
                "ensure_int_or_float": [
                    509
                ],
                "is_complex_dtype": [
                    510
                ],
                "values.astype": [
                    513,
                    541
                ],
                "arity": [
                    521,
                    595,
                    515,
                    527
                ],
                "self._cython_arity.get": [
                    515
                ],
                "self._cython_arity": [
                    515
                ],
                "vdim": [
                    595,
                    517,
                    519
                ],
                "values.ndim": [
                    633,
                    517,
                    653
                ],
                "swapped": [
                    524,
                    518,
                    604
                ],
                "out_shape": [
                    521,
                    562,
                    531
                ],
                "self.ngroups": [
                    521,
                    905,
                    910,
                    944,
                    531,
                    564,
                    821,
                    915,
                    893
                ],
                "values.T": [
                    526
                ],
                "values.shape": [
                    531
                ],
                "self._get_cython_function": [
                    544,
                    534
                ],
                "lib.infer_dtype": [
                    540
                ],
                "lib": [
                    944,
                    713,
                    915,
                    540
                ],
                "out_dtype": [
                    577,
                    549,
                    552,
                    556,
                    562
                ],
                "values.dtype.kind": [
                    553
                ],
                "values.dtype.itemsize": [
                    553
                ],
                "_maybe_fill": [
                    576,
                    561
                ],
                "np.nan": [
                    577,
                    562,
                    589
                ],
                "counts": [
                    710,
                    714,
                    591,
                    593,
                    691,
                    564,
                    692,
                    567,
                    698,
                    637
                ],
                "np.zeros": [
                    698,
                    564
                ],
                "self._aggregate": [
                    565
                ],
                "min_count": [
                    616,
                    637,
                    573
                ],
                "np.empty_like": [
                    577
                ],
                "self._transform": [
                    581
                ],
                "mask": [
                    586,
                    587,
                    589
                ],
                "mask.any": [
                    587
                ],
                "result.astype": [
                    608,
                    610,
                    588
                ],
                "counts.all": [
                    591
                ],
                "result.ndim": [
                    592
                ],
                "self._name_functions": [
                    600,
                    598
                ],
                "names": [
                    600,
                    602,
                    947,
                    612
                ],
                "result.swapaxes": [
                    605
                ],
                "orig_values.dtype": [
                    608,
                    610,
                    607
                ],
                "self._cython_operation": [
                    620,
                    615
                ],
                "agg_func": [
                    637
                ],
                "transform_func": [
                    657
                ],
                "self._aggregate_series_fast": [
                    663
                ],
                "obj": [
                    675,
                    680,
                    875,
                    686,
                    878,
                    688,
                    879,
                    690,
                    880,
                    663,
                    701,
                    862,
                    863
                ],
                "self._aggregate_series_pure_python": [
                    675
                ],
                "self._is_builtin_func": [
                    678
                ],
                "obj.index._has_complex_internals": [
                    680
                ],
                "obj.index": [
                    680,
                    880,
                    878
                ],
                "dummy": [
                    862,
                    690,
                    686,
                    863
                ],
                "obj._get_values": [
                    686
                ],
                "get_group_index_sorter": [
                    905,
                    687
                ],
                "obj.take": [
                    688
                ],
                "algorithms.take_nd": [
                    689,
                    900
                ],
                "algorithms": [
                    689,
                    900
                ],
                "libreduction.SeriesGrouper": [
                    690
                ],
                "grouper.get_result": [
                    864,
                    691
                ],
                "label": [
                    800,
                    801,
                    710,
                    711,
                    812,
                    814,
                    815,
                    703,
                    799
                ],
                "np.ndarray": [
                    706
                ],
                "group.shape": [
                    710
                ],
                "lib.maybe_convert_objects": [
                    713
                ],
                "BaseGrouper": [
                    717
                ],
                "self.bins": [
                    812,
                    750,
                    863,
                    823,
                    826,
                    764,
                    799
                ],
                "self.binlabels": [
                    805,
                    839,
                    840,
                    842,
                    812,
                    846,
                    751,
                    850,
                    764,
                    799
                ],
                "ensure_index": [
                    751
                ],
                "binlabels": [
                    751
                ],
                "filter_empty": [
                    752
                ],
                "value": [
                    763,
                    764
                ],
                "NaT": [
                    800,
                    765,
                    814
                ],
                "NDFrame": [
                    791
                ],
                "slicer": [
                    792,
                    801,
                    795,
                    805
                ],
                "data._slice": [
                    792
                ],
                "start": [
                    801,
                    802,
                    804,
                    805,
                    917,
                    792,
                    795,
                    924,
                    798
                ],
                "edge": [
                    801,
                    802,
                    792,
                    795,
                    799
                ],
                "length": [
                    793,
                    796,
                    804
                ],
                "data.axes": [
                    793
                ],
                "collections.defaultdict": [
                    809
                ],
                "collections": [
                    809
                ],
                "rep": [
                    825,
                    827,
                    829,
                    823
                ],
                "np.diff": [
                    823
                ],
                "np.r_": [
                    829,
                    823
                ],
                "np.repeat": [
                    827,
                    829
                ],
                "comp_ids.astype": [
                    832
                ],
                "obs_group_ids.astype": [
                    833
                ],
                "isna": [
                    839
                ],
                "self.binlabels.name": [
                    850
                ],
                "Grouping": [
                    857
                ],
                "lvl": [
                    857,
                    858
                ],
                "name": [
                    857,
                    858
                ],
                "libreduction.SeriesBinGrouper": [
                    863
                ],
                "group.index": [
                    869
                ],
                "group.axes": [
                    871
                ],
                "axes": [
                    880,
                    876,
                    878
                ],
                "obj.index.equals": [
                    880,
                    878
                ],
                "DataFrame": [
                    959,
                    879
                ],
                "self.data": [
                    891,
                    927
                ],
                "self.sort_idx": [
                    900,
                    927
                ],
                "sdata": [
                    938,
                    908,
                    946,
                    947,
                    951,
                    953,
                    924
                ],
                "self._get_sorted_data": [
                    946,
                    908
                ],
                "starts": [
                    944,
                    947,
                    915,
                    917
                ],
                "ends": [
                    944,
                    947,
                    915,
                    917
                ],
                "lib.generate_slices": [
                    944,
                    915
                ],
                "self.slabels": [
                    944,
                    915
                ],
                "end": [
                    924,
                    917
                ],
                "self._chop": [
                    924
                ],
                "self.data.take": [
                    927
                ],
                "AbstractMethodError": [
                    930,
                    933
                ],
                "DataSplitter": [
                    936,
                    941
                ],
                "sdata._get_values": [
                    938
                ],
                "slice_obj": [
                    953,
                    938,
                    951
                ],
                "libreduction.apply_frame_axis0": [
                    947
                ],
                "sdata.iloc": [
                    951
                ],
                "sdata._slice": [
                    953
                ],
                "klass": [
                    960,
                    962,
                    958
                ],
                "SeriesSplitter": [
                    958
                ],
                "FrameSplitter": [
                    960
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_135/pandas/tests/extension/decimal/test_decimal.py",
                "test_function": "test_groupby_agg",
                "test_function_code": "def test_groupby_agg():\n    # Ensure that the result of agg is inferred to be decimal dtype\n    # https://github.com/pandas-dev/pandas/issues/29141\n\n    data = make_data()[:5]\n    df = pd.DataFrame(\n        {\"id1\": [0, 0, 0, 1, 1], \"id2\": [0, 1, 0, 1, 1], \"decimals\": DecimalArray(data)}\n    )\n\n    # single key, selected column\n    expected = pd.Series(to_decimal([data[0], data[3]]))\n    result = df.groupby(\"id1\")[\"decimals\"].agg(lambda x: x.iloc[0])\n    tm.assert_series_equal(result, expected, check_names=False)\n    result = df[\"decimals\"].groupby(df[\"id1\"]).agg(lambda x: x.iloc[0])\n    tm.assert_series_equal(result, expected, check_names=False)\n\n    # multiple keys, selected column\n    expected = pd.Series(\n        to_decimal([data[0], data[1], data[3]]),\n        index=pd.MultiIndex.from_tuples([(0, 0), (0, 1), (1, 1)]),\n    )\n    result = df.groupby([\"id1\", \"id2\"])[\"decimals\"].agg(lambda x: x.iloc[0])\n    tm.assert_series_equal(result, expected, check_names=False)\n    result = df[\"decimals\"].groupby([df[\"id1\"], df[\"id2\"]]).agg(lambda x: x.iloc[0])\n    tm.assert_series_equal(result, expected, check_names=False)\n\n    # multiple columns\n    expected = pd.DataFrame({\"id2\": [0, 1], \"decimals\": to_decimal([data[0], data[3]])})\n    result = df.groupby(\"id1\").agg(lambda x: x.iloc[0])\n    tm.assert_frame_equal(result, expected, check_names=False)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: decimal",
                "full_test_error": "def test_groupby_agg():\n        # Ensure that the result of agg is inferred to be decimal dtype\n        # https://github.com/pandas-dev/pandas/issues/29141\n    \n        data = make_data()[:5]\n        df = pd.DataFrame(\n            {\"id1\": [0, 0, 0, 1, 1], \"id2\": [0, 1, 0, 1, 1], \"decimals\": DecimalArray(data)}\n        )\n    \n        # single key, selected column\n        expected = pd.Series(to_decimal([data[0], data[3]]))\n        result = df.groupby(\"id1\")[\"decimals\"].agg(lambda x: x.iloc[0])\n>       tm.assert_series_equal(result, expected, check_names=False)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: decimal\n\npandas/tests/extension/decimal/test_decimal.py:443: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_135/pandas/tests/extension/decimal/test_decimal.py",
                "test_function": "test_groupby_agg_ea_method",
                "test_function_code": "def test_groupby_agg_ea_method(monkeypatch):\n    # Ensure that the result of agg is inferred to be decimal dtype\n    # https://github.com/pandas-dev/pandas/issues/29141\n\n    def DecimalArray__my_sum(self):\n        return np.sum(np.array(self))\n\n    monkeypatch.setattr(DecimalArray, \"my_sum\", DecimalArray__my_sum, raising=False)\n\n    data = make_data()[:5]\n    df = pd.DataFrame({\"id\": [0, 0, 0, 1, 1], \"decimals\": DecimalArray(data)})\n    expected = pd.Series(to_decimal([data[0] + data[1] + data[2], data[3] + data[4]]))\n\n    result = df.groupby(\"id\")[\"decimals\"].agg(lambda x: x.values.my_sum())\n    tm.assert_series_equal(result, expected, check_names=False)\n    s = pd.Series(DecimalArray(data))\n    result = s.groupby(np.array([0, 0, 0, 1, 1])).agg(lambda x: x.values.my_sum())\n    tm.assert_series_equal(result, expected, check_names=False)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: decimal",
                "full_test_error": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f9c4f6e3940>\n\n    def test_groupby_agg_ea_method(monkeypatch):\n        # Ensure that the result of agg is inferred to be decimal dtype\n        # https://github.com/pandas-dev/pandas/issues/29141\n    \n        def DecimalArray__my_sum(self):\n            return np.sum(np.array(self))\n    \n        monkeypatch.setattr(DecimalArray, \"my_sum\", DecimalArray__my_sum, raising=False)\n    \n        data = make_data()[:5]\n        df = pd.DataFrame({\"id\": [0, 0, 0, 1, 1], \"decimals\": DecimalArray(data)})\n        expected = pd.Series(to_decimal([data[0] + data[1] + data[2], data[3] + data[4]]))\n    \n        result = df.groupby(\"id\")[\"decimals\"].agg(lambda x: x.values.my_sum())\n>       tm.assert_series_equal(result, expected, check_names=False)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: decimal\n\npandas/tests/extension/decimal/test_decimal.py:477: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}