{
    "1.1.1": "def agg_series(self, obj, func):\n    try:\n        return self._aggregate_series_fast(obj, func)\n    except AssertionError:\n        raise\n    except ValueError as err:\n        if \"No result.\" in str(err):\n            # raised in libreduction\n            pass\n        elif \"Function does not reduce\" in str(err):\n            # raised in libreduction\n            pass\n        else:\n            raise\n        return self._aggregate_series_pure_python(obj, func)\n",
    "1.1.2": null,
    "1.2.1": "pandas/core/groupby/ops.py",
    "1.2.2": null,
    "1.3.1": "class BaseGrouper()",
    "1.3.2": "This is an internal Grouper class, which actually holds\nthe generated groups\n\nParameters\n----------\naxis : int\n    the axis to group\ngroupings : array of grouping\n    all the grouping instances to handle in this grouper\n    for example for grouper list to groupby, need to pass the list\nsort : boolean, default True\n    whether this grouper will give sorted result or not\ngroup_keys : boolean, default True\nmutated : boolean, default False\nindexer : intp array, optional\n    the indexer created by Grouper\n    some groupers (TimeGrouper) will sort its axis and its\n    group_info is also sorted, so need the indexer to reorder",
    "1.4.1": [
        "_aggregate_series_fast(self, obj, func)",
        "_aggregate_series_pure_python(self, obj, func)"
    ],
    "1.4.2": null,
    "1.5.1": [
        "def test_groupby_agg():\n    # Ensure that the result of agg is inferred to be decimal dtype\n    # https://github.com/pandas-dev/pandas/issues/29141\n\n    data = make_data()[:5]\n    df = pd.DataFrame(\n        {\"id1\": [0, 0, 0, 1, 1], \"id2\": [0, 1, 0, 1, 1], \"decimals\": DecimalArray(data)}\n    )\n\n    # single key, selected column\n    expected = pd.Series(to_decimal([data[0], data[3]]))\n    result = df.groupby(\"id1\")[\"decimals\"].agg(lambda x: x.iloc[0])\n    tm.assert_series_equal(result, expected, check_names=False)\n    result = df[\"decimals\"].groupby(df[\"id1\"]).agg(lambda x: x.iloc[0])\n    tm.assert_series_equal(result, expected, check_names=False)\n\n    # multiple keys, selected column\n    expected = pd.Series(\n        to_decimal([data[0], data[1], data[3]]),\n        index=pd.MultiIndex.from_tuples([(0, 0), (0, 1), (1, 1)]),\n    )\n    result = df.groupby([\"id1\", \"id2\"])[\"decimals\"].agg(lambda x: x.iloc[0])\n    tm.assert_series_equal(result, expected, check_names=False)\n    result = df[\"decimals\"].groupby([df[\"id1\"], df[\"id2\"]]).agg(lambda x: x.iloc[0])\n    tm.assert_series_equal(result, expected, check_names=False)\n\n    # multiple columns\n    expected = pd.DataFrame({\"id2\": [0, 1], \"decimals\": to_decimal([data[0], data[3]])})\n    result = df.groupby(\"id1\").agg(lambda x: x.iloc[0])\n    tm.assert_frame_equal(result, expected, check_names=False)",
        "def test_groupby_agg_ea_method(monkeypatch):\n    # Ensure that the result of agg is inferred to be decimal dtype\n    # https://github.com/pandas-dev/pandas/issues/29141\n\n    def DecimalArray__my_sum(self):\n        return np.sum(np.array(self))\n\n    monkeypatch.setattr(DecimalArray, \"my_sum\", DecimalArray__my_sum, raising=False)\n\n    data = make_data()[:5]\n    df = pd.DataFrame({\"id\": [0, 0, 0, 1, 1], \"decimals\": DecimalArray(data)})\n    expected = pd.Series(to_decimal([data[0] + data[1] + data[2], data[3] + data[4]]))\n\n    result = df.groupby(\"id\")[\"decimals\"].agg(lambda x: x.values.my_sum())\n    tm.assert_series_equal(result, expected, check_names=False)\n    s = pd.Series(DecimalArray(data))\n    result = s.groupby(np.array([0, 0, 0, 1, 1])).agg(lambda x: x.values.my_sum())\n    tm.assert_series_equal(result, expected, check_names=False)"
    ],
    "1.5.2": [
        "pandas/tests/extension/decimal/test_decimal.py",
        "pandas/tests/extension/decimal/test_decimal.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: decimal"
        ],
        [
            "E       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: decimal"
        ]
    ],
    "2.1.2": [
        [
            "def test_groupby_agg():\n        # Ensure that the result of agg is inferred to be decimal dtype\n        # https://github.com/pandas-dev/pandas/issues/29141\n    \n        data = make_data()[:5]\n        df = pd.DataFrame(\n            {\"id1\": [0, 0, 0, 1, 1], \"id2\": [0, 1, 0, 1, 1], \"decimals\": DecimalArray(data)}\n        )\n    \n        # single key, selected column\n        expected = pd.Series(to_decimal([data[0], data[3]]))\n        result = df.groupby(\"id1\")[\"decimals\"].agg(lambda x: x.iloc[0])\n>       tm.assert_series_equal(result, expected, check_names=False)",
            "\npandas/tests/extension/decimal/test_decimal.py:443: AssertionError"
        ],
        [
            "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f9c4f6e3940>\n\n    def test_groupby_agg_ea_method(monkeypatch):\n        # Ensure that the result of agg is inferred to be decimal dtype\n        # https://github.com/pandas-dev/pandas/issues/29141\n    \n        def DecimalArray__my_sum(self):\n            return np.sum(np.array(self))\n    \n        monkeypatch.setattr(DecimalArray, \"my_sum\", DecimalArray__my_sum, raising=False)\n    \n        data = make_data()[:5]\n        df = pd.DataFrame({\"id\": [0, 0, 0, 1, 1], \"decimals\": DecimalArray(data)})\n        expected = pd.Series(to_decimal([data[0] + data[1] + data[2], data[3] + data[4]]))\n    \n        result = df.groupby(\"id\")[\"decimals\"].agg(lambda x: x.values.my_sum())\n>       tm.assert_series_equal(result, expected, check_names=False)",
            "\npandas/tests/extension/decimal/test_decimal.py:477: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "obj": {
                    "value": "0    Decimal: 0.36865861812735822855557898947154171...\n1    Decimal: 0.45211647880342942240616821436560712...\n2    Decimal: 0.71203041290145607788986126251984387...\n3    Decimal: 0.02813206665340139966957622164045460...\n4    Decimal: 0.08420106765050106023551279577077366...\nName: decimals, dtype: decimal",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "obj": {
                    "value": "0    Decimal: 0.58223606461168375680870212818263098...\n1    Decimal: 0.84840779638095220605009671999141573...\n2    Decimal: 0.69579005526197723607850775806582532...\n3    Decimal: 0.55248362591544331046122806583298370...\n4    Decimal: 0.44705510519926416890257314662449061...\nName: decimals, dtype: decimal",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.2.2": [
        [
            {
                "obj": "Series"
            },
            {}
        ],
        [
            {
                "obj": "Series"
            },
            {}
        ]
    ],
    "2.3.1": [
        [
            {
                "obj": {
                    "value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "obj": {
                    "value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "obj": {
                    "value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "obj": {
                    "value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "obj": {
                    "value": "0    0\n1    1\n2    0\n3    1\n4    1\nName: id2, dtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "obj": {
                    "value": "0    Decimal: 0.59236945778721339372907550568925216...\n1    Decimal: 0.32259218077936147039963543647900223...\n2    Decimal: 0.18779813972100312113866493746172636...\n3    Decimal: 0.58572979143429104720297573294374160...\n4    Decimal: 0.22772530003240387674878775214892812...\nName: decimals, dtype: decimal",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "obj": {
                    "value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\nName: decimals, dtype: decimal",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "obj": {
                    "value": "0    Decimal: 0.97120993441564795745080118649639189...\n1    Decimal: 0.30136010711833616237953492600354366...\n2    Decimal: 0.70989308140490292586832765664439648...\n3    Decimal: 0.47065016374098433971084887161850929...\n4    Decimal: 0.63328781992688476520925178192555904...\ndtype: decimal",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.3.2": [
        [
            {
                "obj": "Series"
            },
            {}
        ],
        [
            {
                "obj": "Series"
            },
            {}
        ],
        [
            {
                "obj": "Series"
            },
            {}
        ],
        [
            {
                "obj": "Series"
            },
            {}
        ],
        [
            {
                "obj": "Series"
            },
            {}
        ],
        [
            {
                "obj": "Series"
            },
            {}
        ],
        [
            {
                "obj": "Series"
            },
            {}
        ],
        [
            {
                "obj": "Series"
            },
            {}
        ]
    ],
    "3.1.1": [
        "BUG: regression on master in groupby agg with ExtensionArray\n"
    ],
    "3.1.2": [
        "Example that I could make with DecimalArray:\n\nIn [1]: from pandas.tests.extension.decimal import DecimalArray, make_data \n\nIn [2]: df = pd.DataFrame({'id': [0,0,0,1,1], 'decimals': DecimalArray(make_data()[:5])}) \n\nIn [3]: df.groupby('id')['decimals'].agg(lambda x: x.iloc[0]) \nOut[8]: \nid\n0      0.831922765262135044395108707249164581298828125\n1    0.40839445887803604851029604105860926210880279...\ndtype: object\nOn master of a few days ago, the above returned 'decimal' dtype instead of object dtype.\n\nFound this in the geopandas test suite, as there it creates invalid output and then an error in a follow-up operation (https://travis-ci.org/geopandas/geopandas/jobs/600859374)\n\nThis seems to be caused by #29088, and specifically the change in agg_series: https://github.com/pandas-dev/pandas/pull/29088/files#diff-8c0985a9fca770c2028bed688dfc043fR653-R666\nThe self._aggregate_series_fast is giving a \"AttributeError: 'DecimalArray' object has no attribute 'flags'\" error if the series is backed by an EA, and the AttributeError is no longer catched.\n\ncc @jbrockmendel\n"
    ]
}