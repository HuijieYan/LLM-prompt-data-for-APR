{
    "pandas:138": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_138/pandas/core/reshape/tile.py": {
            "buggy_functions": [
                {
                    "function_name": "_coerce_to_type",
                    "function_code": "def _coerce_to_type(x):\n    \"\"\"\n    if the passed data is of datetime/timedelta type,\n    this method converts it to numeric so that cut method can\n    handle it\n    \"\"\"\n    dtype = None\n\n    if is_datetime64tz_dtype(x):\n        dtype = x.dtype\n    elif is_datetime64_dtype(x):\n        x = to_datetime(x)\n        dtype = np.dtype(\"datetime64[ns]\")\n    elif is_timedelta64_dtype(x):\n        x = to_timedelta(x)\n        dtype = np.dtype(\"timedelta64[ns]\")\n\n    if dtype is not None:\n        # GH 19768: force NaT to NaN during integer conversion\n        x = np.where(x.notna(), x.view(np.int64), np.nan)\n\n    return x, dtype\n",
                    "decorators": [],
                    "docstring": "if the passed data is of datetime/timedelta type,\nthis method converts it to numeric so that cut method can\nhandle it",
                    "start_line": 424,
                    "end_line": 445,
                    "variables": {
                        "dtype": [
                            430,
                            433,
                            436,
                            439,
                            441,
                            445
                        ],
                        "is_datetime64tz_dtype": [
                            432
                        ],
                        "x": [
                            432,
                            433,
                            434,
                            435,
                            437,
                            438,
                            443,
                            445
                        ],
                        "x.dtype": [
                            433
                        ],
                        "is_datetime64_dtype": [
                            434
                        ],
                        "to_datetime": [
                            435
                        ],
                        "np.dtype": [
                            436,
                            439
                        ],
                        "np": [
                            443,
                            436,
                            439
                        ],
                        "is_timedelta64_dtype": [
                            437
                        ],
                        "to_timedelta": [
                            438
                        ],
                        "np.where": [
                            443
                        ],
                        "x.notna": [
                            443
                        ],
                        "x.view": [
                            443
                        ],
                        "np.int64": [
                            443
                        ],
                        "np.nan": [
                            443
                        ]
                    },
                    "filtered_variables": {
                        "dtype": [
                            430,
                            433,
                            436,
                            439,
                            441,
                            445
                        ],
                        "is_datetime64tz_dtype": [
                            432
                        ],
                        "x": [
                            432,
                            433,
                            434,
                            435,
                            437,
                            438,
                            443,
                            445
                        ],
                        "x.dtype": [
                            433
                        ],
                        "is_datetime64_dtype": [
                            434
                        ],
                        "to_datetime": [
                            435
                        ],
                        "np.dtype": [
                            436,
                            439
                        ],
                        "np": [
                            443,
                            436,
                            439
                        ],
                        "is_timedelta64_dtype": [
                            437
                        ],
                        "to_timedelta": [
                            438
                        ],
                        "np.where": [
                            443
                        ],
                        "x.notna": [
                            443
                        ],
                        "x.view": [
                            443
                        ],
                        "np.int64": [
                            443
                        ],
                        "np.nan": [
                            443
                        ]
                    },
                    "diff_line_number": 426,
                    "class_data": null,
                    "used_imports": [
                        "import numpy as np",
                        "from pandas.core.dtypes.common import _NS_DTYPE, ensure_int64, is_categorical_dtype, is_datetime64_dtype, is_datetime64tz_dtype, is_datetime_or_timedelta_dtype, is_integer, is_scalar, is_timedelta64_dtype",
                        "from pandas import Categorical, Index, Interval, IntervalIndex, Series, to_datetime, to_timedelta"
                    ],
                    "variable_values": [
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58bcc60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58bcc60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58bce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58bce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e54c4b70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e54c4b70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e54c4df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e54c4df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58cce90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e4bfb030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e4bfb030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58ed030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7ff9e58ed030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     False\n1      True\n2      True\n3     False\n4      True\n5     False\n6      True\n7      True\n8     False\n9      True\n10    False\n11     True\n12     True\n13    False\n14     True\n15    False\n16     True\n17     True\n18    False\n19     True\n20    False\n21     True\n22     True\n23    False\n24     True\n25    False\n26     True\n27     True\n28    False\n29     True\n30    False\n31     True\n32     True\n33    False\n34     True\n35    False\n36     True\n37     True\n38    False\n39     True\n40    False\n41     True\n42     True\n43    False\n44     True\n45    False\n46     True\n47     True\n48    False\n49     True\ndtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "<bound method Series.notna of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<bound method Series.view of 0     0\n1     1\n2     1\n3     0\n4     1\n5     0\n6     1\n7     1\n8     0\n9     1\n10    0\n11    1\n12    1\n13    0\n14    1\n15    0\n16    1\n17    1\n18    0\n19    1\n20    0\n21    1\n22    1\n23    0\n24    1\n25    0\n26    1\n27    1\n28    0\n29    1\n30    0\n31    1\n32    1\n33    0\n34    1\n35    0\n36    1\n37    1\n38    0\n39    1\n40    0\n41    1\n42    1\n43    0\n44    1\n45    0\n46    1\n47    1\n48    0\n49    1\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb81795ee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb81795ee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb81795ee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb81795ee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb81795300>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb81795300>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb81795c10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb81795c10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb81795c60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb81795c60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb81795c60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb81795c60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb81795bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb81795bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb817e0440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb817e0440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb817e0c10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb817e0c10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb817e0c10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb817e0c10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb817e0ee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb817e0ee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb817e0350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb817e0350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb817ec940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb817ec940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb817ec940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb817ec940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([False,  True,  True, False,  True, False,  True,  True, False,\n        True, False,  True,  True, False,  True, False,  True,  True,\n       False,  True, False,  True,  True, False,  True, False,  True,\n        True, False,  True, False,  True,  True, False,  True, False,\n        True,  True, False,  True, False,  True,  True, False,  True,\n       False,  True,  True, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('bool')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb817e0f30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb817e0f30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(50,)"
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7feb817ec8a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.notna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x7feb817ec8a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from pandas.core.dtypes.common import (\n    _NS_DTYPE,\n    ensure_int64,\n    is_categorical_dtype,\n    is_datetime64_dtype,\n    is_datetime64tz_dtype,\n    is_datetime_or_timedelta_dtype,\n    is_integer,\n    is_scalar,\n    is_timedelta64_dtype,\n)",
                    "start_line": 11,
                    "end_line": 21
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def cut(\n    x,\n    bins,\n    right=True,\n    labels=None,\n    retbins=False,\n    precision=3,\n    include_lowest=False,\n    duplicates=\"raise\",\n):\n    \"\"\"\n    Bin values into discrete intervals.\n\n    Use `cut` when you need to segment and sort data values into bins. This\n    function is also useful for going from a continuous variable to a\n    categorical variable. For example, `cut` could convert ages to groups of\n    age ranges. Supports binning into an equal number of bins, or a\n    pre-specified array of bins.\n\n    Parameters\n    ----------\n    x : array-like\n        The input array to be binned. Must be 1-dimensional.\n    bins : int, sequence of scalars, or IntervalIndex\n        The criteria to bin by.\n\n        * int : Defines the number of equal-width bins in the range of `x`. The\n          range of `x` is extended by .1% on each side to include the minimum\n          and maximum values of `x`.\n        * sequence of scalars : Defines the bin edges allowing for non-uniform\n          width. No extension of the range of `x` is done.\n        * IntervalIndex : Defines the exact bins to be used. Note that\n          IntervalIndex for `bins` must be non-overlapping.\n\n    right : bool, default True\n        Indicates whether `bins` includes the rightmost edge or not. If\n        ``right == True`` (the default), then the `bins` ``[1, 2, 3, 4]``\n        indicate (1,2], (2,3], (3,4]. This argument is ignored when\n        `bins` is an IntervalIndex.\n    labels : array or bool, optional\n        Specifies the labels for the returned bins. Must be the same length as\n        the resulting bins. If False, returns only integer indicators of the\n        bins. This affects the type of the output container (see below).\n        This argument is ignored when `bins` is an IntervalIndex.\n    retbins : bool, default False\n        Whether to return the bins or not. Useful when bins is provided\n        as a scalar.\n    precision : int, default 3\n        The precision at which to store and display the bins labels.\n    include_lowest : bool, default False\n        Whether the first interval should be left-inclusive or not.\n    duplicates : {default 'raise', 'drop'}, optional\n        If bin edges are not unique, raise ValueError or drop non-uniques.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    out : Categorical, Series, or ndarray\n        An array-like object representing the respective bin for each value\n        of `x`. The type depends on the value of `labels`.\n\n        * True (default) : returns a Series for Series `x` or a\n          Categorical for all other inputs. The values stored within\n          are Interval dtype.\n\n        * sequence of scalars : returns a Series for Series `x` or a\n          Categorical for all other inputs. The values stored within\n          are whatever the type in the sequence is.\n\n        * False : returns an ndarray of integers.\n\n    bins : numpy.ndarray or IntervalIndex.\n        The computed or specified bins. Only returned when `retbins=True`.\n        For scalar or sequence `bins`, this is an ndarray with the computed\n        bins. If set `duplicates=drop`, `bins` will drop non-unique bin. For\n        an IntervalIndex `bins`, this is equal to `bins`.\n\n    See Also\n    --------\n    qcut : Discretize variable into equal-sized buckets based on rank\n        or based on sample quantiles.\n    Categorical : Array type for storing data that come from a\n        fixed set of values.\n    Series : One-dimensional array with axis labels (including time series).\n    IntervalIndex : Immutable Index implementing an ordered, sliceable set.\n\n    Notes\n    -----\n    Any NA values will be NA in the result. Out of bounds values will be NA in\n    the resulting Series or Categorical object.\n\n    Examples\n    --------\n    Discretize into three equal-sized bins.\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3)\n    ... # doctest: +ELLIPSIS\n    [(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\n    Categories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3, retbins=True)\n    ... # doctest: +ELLIPSIS\n    ([(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\n    Categories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...\n    array([0.994, 3.   , 5.   , 7.   ]))\n\n    Discovers the same bins, but assign them specific labels. Notice that\n    the returned Categorical's categories are `labels` and is ordered.\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]),\n    ...        3, labels=[\"bad\", \"medium\", \"good\"])\n    [bad, good, medium, medium, good, bad]\n    Categories (3, object): [bad < medium < good]\n\n    ``labels=False`` implies you just want the bins back.\n\n    >>> pd.cut([0, 1, 1, 2], bins=4, labels=False)\n    array([0, 1, 1, 3])\n\n    Passing a Series as an input returns a Series with categorical dtype:\n\n    >>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n    ...               index=['a', 'b', 'c', 'd', 'e'])\n    >>> pd.cut(s, 3)\n    ... # doctest: +ELLIPSIS\n    a    (1.992, 4.667]\n    b    (1.992, 4.667]\n    c    (4.667, 7.333]\n    d     (7.333, 10.0]\n    e     (7.333, 10.0]\n    dtype: category\n    Categories (3, interval[float64]): [(1.992, 4.667] < (4.667, ...\n\n    Passing a Series as an input returns a Series with mapping value.\n    It is used to map numerically to intervals based on bins.\n\n    >>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n    ...               index=['a', 'b', 'c', 'd', 'e'])\n    >>> pd.cut(s, [0, 2, 4, 6, 8, 10], labels=False, retbins=True, right=False)\n    ... # doctest: +ELLIPSIS\n    (a    0.0\n     b    1.0\n     c    2.0\n     d    3.0\n     e    4.0\n     dtype: float64, array([0, 2, 4, 6, 8]))\n\n    Use `drop` optional when bins is not unique\n\n    >>> pd.cut(s, [0, 2, 4, 6, 10, 10], labels=False, retbins=True,\n    ...        right=False, duplicates='drop')\n    ... # doctest: +ELLIPSIS\n    (a    0.0\n     b    1.0\n     c    2.0\n     d    3.0\n     e    3.0\n     dtype: float64, array([0, 2, 4, 6, 8]))\n\n    Passing an IntervalIndex for `bins` results in those categories exactly.\n    Notice that values not covered by the IntervalIndex are set to NaN. 0\n    is to the left of the first bin (which is closed on the right), and 1.5\n    falls between two bins.\n\n    >>> bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])\n    >>> pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)\n    [NaN, (0, 1], NaN, (2, 3], (4, 5]]\n    Categories (3, interval[int64]): [(0, 1] < (2, 3] < (4, 5]]\n    \"\"\"\n    # NOTE: this binning code is changed a bit from histogram for var(x) == 0\n\n    # for handling the cut for datetime and timedelta objects\n    x_is_series, series_index, name, x = _preprocess_for_cut(x)\n    x, dtype = _coerce_to_type(x)\n\n    if not np.iterable(bins):\n        if is_scalar(bins) and bins < 1:\n            raise ValueError(\"`bins` should be a positive integer.\")\n\n        try:  # for array-like\n            sz = x.size\n        except AttributeError:\n            x = np.asarray(x)\n            sz = x.size\n\n        if sz == 0:\n            raise ValueError(\"Cannot cut empty array\")\n\n        rng = (nanops.nanmin(x), nanops.nanmax(x))\n        mn, mx = [mi + 0.0 for mi in rng]\n\n        if np.isinf(mn) or np.isinf(mx):\n            # GH 24314\n            raise ValueError(\n                \"cannot specify integer `bins` when input data contains infinity\"\n            )\n        elif mn == mx:  # adjust end points before binning\n            mn -= 0.001 * abs(mn) if mn != 0 else 0.001\n            mx += 0.001 * abs(mx) if mx != 0 else 0.001\n            bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n        else:  # adjust end points after binning\n            bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n            adj = (mx - mn) * 0.001  # 0.1% of the range\n            if right:\n                bins[0] -= adj\n            else:\n                bins[-1] += adj\n\n    elif isinstance(bins, IntervalIndex):\n        if bins.is_overlapping:\n            raise ValueError(\"Overlapping IntervalIndex is not accepted.\")\n\n    else:\n        if is_datetime64tz_dtype(bins):\n            bins = np.asarray(bins, dtype=_NS_DTYPE)\n        else:\n            bins = np.asarray(bins)\n        bins = _convert_bin_to_numeric_type(bins, dtype)\n\n        # GH 26045: cast to float64 to avoid an overflow\n        if (np.diff(bins.astype(\"float64\")) < 0).any():\n            raise ValueError(\"bins must increase monotonically.\")\n\n    fac, bins = _bins_to_cuts(\n        x,\n        bins,\n        right=right,\n        labels=labels,\n        precision=precision,\n        include_lowest=include_lowest,\n        dtype=dtype,\n        duplicates=duplicates,\n    )\n\n    return _postprocess_for_cut(\n        fac, bins, retbins, x_is_series, series_index, name, dtype\n    )",
                        "signature": "cut(x, bins, right=True, labels=None, retbins=False, precision=3, include_lowest=False, duplicates='raise')"
                    },
                    {
                        "code": "def qcut(x, q, labels=None, retbins=False, precision=3, duplicates=\"raise\"):\n    \"\"\"\n    Quantile-based discretization function. Discretize variable into\n    equal-sized buckets based on rank or based on sample quantiles. For example\n    1000 values for 10 quantiles would produce a Categorical object indicating\n    quantile membership for each data point.\n\n    Parameters\n    ----------\n    x : 1d ndarray or Series\n    q : integer or array of quantiles\n        Number of quantiles. 10 for deciles, 4 for quartiles, etc. Alternately\n        array of quantiles, e.g. [0, .25, .5, .75, 1.] for quartiles\n    labels : array or boolean, default None\n        Used as labels for the resulting bins. Must be of the same length as\n        the resulting bins. If False, return only integer indicators of the\n        bins.\n    retbins : bool, optional\n        Whether to return the (bins, labels) or not. Can be useful if bins\n        is given as a scalar.\n    precision : int, optional\n        The precision at which to store and display the bins labels\n    duplicates : {default 'raise', 'drop'}, optional\n        If bin edges are not unique, raise ValueError or drop non-uniques.\n\n        .. versionadded:: 0.20.0\n\n    Returns\n    -------\n    out : Categorical or Series or array of integers if labels is False\n        The return type (Categorical or Series) depends on the input: a Series\n        of type category if input is a Series else Categorical. Bins are\n        represented as categories when categorical data is returned.\n    bins : ndarray of floats\n        Returned only if `retbins` is True.\n\n    Notes\n    -----\n    Out of bounds values will be NA in the resulting Categorical object\n\n    Examples\n    --------\n    >>> pd.qcut(range(5), 4)\n    ... # doctest: +ELLIPSIS\n    [(-0.001, 1.0], (-0.001, 1.0], (1.0, 2.0], (2.0, 3.0], (3.0, 4.0]]\n    Categories (4, interval[float64]): [(-0.001, 1.0] < (1.0, 2.0] ...\n\n    >>> pd.qcut(range(5), 3, labels=[\"good\", \"medium\", \"bad\"])\n    ... # doctest: +SKIP\n    [good, good, medium, bad, bad]\n    Categories (3, object): [good < medium < bad]\n\n    >>> pd.qcut(range(5), 4, labels=False)\n    array([0, 0, 1, 2, 3])\n    \"\"\"\n    x_is_series, series_index, name, x = _preprocess_for_cut(x)\n\n    x, dtype = _coerce_to_type(x)\n\n    if is_integer(q):\n        quantiles = np.linspace(0, 1, q + 1)\n    else:\n        quantiles = q\n    bins = algos.quantile(x, quantiles)\n    fac, bins = _bins_to_cuts(\n        x,\n        bins,\n        labels=labels,\n        precision=precision,\n        include_lowest=True,\n        dtype=dtype,\n        duplicates=duplicates,\n    )\n\n    return _postprocess_for_cut(\n        fac, bins, retbins, x_is_series, series_index, name, dtype\n    )",
                        "signature": "qcut(x, q, labels=None, retbins=False, precision=3, duplicates='raise')"
                    },
                    {
                        "code": "def _bins_to_cuts(\n    x,\n    bins,\n    right=True,\n    labels=None,\n    precision=3,\n    include_lowest=False,\n    dtype=None,\n    duplicates=\"raise\",\n):\n\n    if duplicates not in [\"raise\", \"drop\"]:\n        raise ValueError(\n            \"invalid value for 'duplicates' parameter, \"\n            \"valid options are: raise, drop\"\n        )\n\n    if isinstance(bins, IntervalIndex):\n        # we have a fast-path here\n        ids = bins.get_indexer(x)\n        result = Categorical.from_codes(ids, categories=bins, ordered=True)\n        return result, bins\n\n    unique_bins = algos.unique(bins)\n    if len(unique_bins) < len(bins) and len(bins) != 2:\n        if duplicates == \"raise\":\n            raise ValueError(\n                \"Bin edges must be unique: {bins!r}.\\nYou \"\n                \"can drop duplicate edges by setting \"\n                \"the 'duplicates' kwarg\".format(bins=bins)\n            )\n        else:\n            bins = unique_bins\n\n    side = \"left\" if right else \"right\"\n    ids = ensure_int64(bins.searchsorted(x, side=side))\n\n    if include_lowest:\n        ids[x == bins[0]] = 1\n\n    na_mask = isna(x) | (ids == len(bins)) | (ids == 0)\n    has_nas = na_mask.any()\n\n    if labels is not False:\n        if labels is None:\n            labels = _format_labels(\n                bins, precision, right=right, include_lowest=include_lowest, dtype=dtype\n            )\n        else:\n            if len(labels) != len(bins) - 1:\n                raise ValueError(\n                    \"Bin labels must be one fewer than the number of bin edges\"\n                )\n        if not is_categorical_dtype(labels):\n            labels = Categorical(labels, categories=labels, ordered=True)\n\n        np.putmask(ids, na_mask, 0)\n        result = algos.take_nd(labels, ids - 1)\n\n    else:\n        result = ids - 1\n        if has_nas:\n            result = result.astype(np.float64)\n            np.putmask(result, na_mask, np.nan)\n\n    return result, bins",
                        "signature": "_bins_to_cuts(x, bins, right=True, labels=None, precision=3, include_lowest=False, dtype=None, duplicates='raise')"
                    },
                    {
                        "code": "def _coerce_to_type(x):\n    \"\"\"\n    if the passed data is of datetime/timedelta type,\n    this method converts it to numeric so that cut method can\n    handle it\n    \"\"\"\n    dtype = None\n\n    if is_datetime64tz_dtype(x):\n        dtype = x.dtype\n    elif is_datetime64_dtype(x):\n        x = to_datetime(x)\n        dtype = np.dtype(\"datetime64[ns]\")\n    elif is_timedelta64_dtype(x):\n        x = to_timedelta(x)\n        dtype = np.dtype(\"timedelta64[ns]\")\n\n    if dtype is not None:\n        # GH 19768: force NaT to NaN during integer conversion\n        x = np.where(x.notna(), x.view(np.int64), np.nan)\n\n    return x, dtype",
                        "signature": "_coerce_to_type(x)"
                    },
                    {
                        "code": "def _convert_bin_to_numeric_type(bins, dtype):\n    \"\"\"\n    if the passed bin is of datetime/timedelta type,\n    this method converts it to integer\n\n    Parameters\n    ----------\n    bins : list-like of bins\n    dtype : dtype of data\n\n    Raises\n    ------\n    ValueError if bins are not of a compat dtype to dtype\n    \"\"\"\n    bins_dtype = infer_dtype(bins, skipna=False)\n    if is_timedelta64_dtype(dtype):\n        if bins_dtype in [\"timedelta\", \"timedelta64\"]:\n            bins = to_timedelta(bins).view(np.int64)\n        else:\n            raise ValueError(\"bins must be of timedelta64 dtype\")\n    elif is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype):\n        if bins_dtype in [\"datetime\", \"datetime64\"]:\n            bins = to_datetime(bins).view(np.int64)\n        else:\n            raise ValueError(\"bins must be of datetime64 dtype\")\n\n    return bins",
                        "signature": "_convert_bin_to_numeric_type(bins, dtype)"
                    },
                    {
                        "code": "def _convert_bin_to_datelike_type(bins, dtype):\n    \"\"\"\n    Convert bins to a DatetimeIndex or TimedeltaIndex if the original dtype is\n    datelike\n\n    Parameters\n    ----------\n    bins : list-like of bins\n    dtype : dtype of data\n\n    Returns\n    -------\n    bins : Array-like of bins, DatetimeIndex or TimedeltaIndex if dtype is\n           datelike\n    \"\"\"\n    if is_datetime64tz_dtype(dtype):\n        bins = to_datetime(bins.astype(np.int64), utc=True).tz_convert(dtype.tz)\n    elif is_datetime_or_timedelta_dtype(dtype):\n        bins = Index(bins.astype(np.int64), dtype=dtype)\n    return bins",
                        "signature": "_convert_bin_to_datelike_type(bins, dtype)"
                    },
                    {
                        "code": "def _format_labels(bins, precision, right=True, include_lowest=False, dtype=None):\n    \"\"\" based on the dtype, return our labels \"\"\"\n\n    closed = \"right\" if right else \"left\"\n\n    if is_datetime64tz_dtype(dtype):\n        formatter = partial(Timestamp, tz=dtype.tz)\n        adjust = lambda x: x - Timedelta(\"1ns\")\n    elif is_datetime64_dtype(dtype):\n        formatter = Timestamp\n        adjust = lambda x: x - Timedelta(\"1ns\")\n    elif is_timedelta64_dtype(dtype):\n        formatter = Timedelta\n        adjust = lambda x: x - Timedelta(\"1ns\")\n    else:\n        precision = _infer_precision(precision, bins)\n        formatter = lambda x: _round_frac(x, precision)\n        adjust = lambda x: x - 10 ** (-precision)\n\n    breaks = [formatter(b) for b in bins]\n    labels = IntervalIndex.from_breaks(breaks, closed=closed)\n\n    if right and include_lowest:\n        # we will adjust the left hand side by precision to\n        # account that we are all right closed\n        v = adjust(labels[0].left)\n\n        i = IntervalIndex([Interval(v, labels[0].right, closed=\"right\")])\n        labels = i.append(labels[1:])\n\n    return labels",
                        "signature": "_format_labels(bins, precision, right=True, include_lowest=False, dtype=None)"
                    },
                    {
                        "code": "def _preprocess_for_cut(x):\n    \"\"\"\n    handles preprocessing for cut where we convert passed\n    input to array, strip the index information and store it\n    separately\n    \"\"\"\n    x_is_series = isinstance(x, Series)\n    series_index = None\n    name = None\n\n    if x_is_series:\n        series_index = x.index\n        name = x.name\n\n    # Check that the passed array is a Pandas or Numpy object\n    # We don't want to strip away a Pandas data-type here (e.g. datetimetz)\n    ndim = getattr(x, \"ndim\", None)\n    if ndim is None:\n        x = np.asarray(x)\n    if x.ndim != 1:\n        raise ValueError(\"Input array must be 1 dimensional\")\n\n    return x_is_series, series_index, name, x",
                        "signature": "_preprocess_for_cut(x)"
                    },
                    {
                        "code": "def _postprocess_for_cut(fac, bins, retbins, x_is_series, series_index, name, dtype):\n    \"\"\"\n    handles post processing for the cut method where\n    we combine the index information if the originally passed\n    datatype was a series\n    \"\"\"\n    if x_is_series:\n        fac = Series(fac, index=series_index, name=name)\n\n    if not retbins:\n        return fac\n\n    bins = _convert_bin_to_datelike_type(bins, dtype)\n\n    return fac, bins",
                        "signature": "_postprocess_for_cut(fac, bins, retbins, x_is_series, series_index, name, dtype)"
                    },
                    {
                        "code": "def _round_frac(x, precision):\n    \"\"\"\n    Round the fractional part of the given number\n    \"\"\"\n    if not np.isfinite(x) or x == 0:\n        return x\n    else:\n        frac, whole = np.modf(x)\n        if whole == 0:\n            digits = -int(np.floor(np.log10(abs(frac)))) - 1 + precision\n        else:\n            digits = precision\n        return np.around(x, digits)",
                        "signature": "_round_frac(x, precision)"
                    },
                    {
                        "code": "def _infer_precision(base_precision, bins):\n    \"\"\"Infer an appropriate precision for _round_frac\n    \"\"\"\n    for precision in range(base_precision, 20):\n        levels = [_round_frac(b, precision) for b in bins]\n        if algos.unique(levels).size == bins.size:\n            return precision\n    return base_precision  # default",
                        "signature": "_infer_precision(base_precision, bins)"
                    }
                ],
                "file_scope_classes": []
            },
            "variables_in_file": {
                "x_is_series": [
                    352,
                    554,
                    332,
                    273,
                    210,
                    563,
                    538,
                    542
                ],
                "series_index": [
                    352,
                    554,
                    332,
                    273,
                    210,
                    564,
                    539,
                    543
                ],
                "name": [
                    352,
                    544,
                    554,
                    332,
                    273,
                    210,
                    564,
                    540
                ],
                "x": [
                    512,
                    515,
                    516,
                    262,
                    391,
                    394,
                    396,
                    538,
                    543,
                    544,
                    548,
                    550,
                    551,
                    554,
                    432,
                    433,
                    434,
                    435,
                    437,
                    438,
                    443,
                    445,
                    578,
                    579,
                    581,
                    586,
                    332,
                    334,
                    210,
                    211,
                    340,
                    342,
                    218,
                    220,
                    221,
                    226,
                    375,
                    506,
                    509
                ],
                "_preprocess_for_cut": [
                    210,
                    332
                ],
                "dtype": [
                    268,
                    273,
                    402,
                    430,
                    433,
                    436,
                    439,
                    441,
                    569,
                    445,
                    334,
                    463,
                    211,
                    468,
                    347,
                    352,
                    492,
                    493,
                    494,
                    495,
                    504,
                    505,
                    507,
                    510,
                    255
                ],
                "_coerce_to_type": [
                    211,
                    334
                ],
                "np.iterable": [
                    213
                ],
                "np": [
                    258,
                    412,
                    418,
                    419,
                    550,
                    436,
                    439,
                    443,
                    578,
                    581,
                    583,
                    586,
                    337,
                    465,
                    213,
                    470,
                    220,
                    229,
                    237,
                    493,
                    239,
                    495,
                    252,
                    254
                ],
                "bins": [
                    385,
                    258,
                    514,
                    388,
                    261,
                    518,
                    263,
                    391,
                    394,
                    396,
                    273,
                    402,
                    405,
                    421,
                    569,
                    571,
                    462,
                    465,
                    593,
                    594,
                    340,
                    213,
                    214,
                    341,
                    343,
                    380,
                    470,
                    474,
                    375,
                    352,
                    237,
                    493,
                    239,
                    495,
                    496,
                    242,
                    379,
                    244,
                    373,
                    246,
                    247,
                    376,
                    377,
                    251,
                    252,
                    254,
                    255
                ],
                "is_scalar": [
                    214
                ],
                "ValueError": [
                    224,
                    259,
                    231,
                    472,
                    552,
                    368,
                    467,
                    406,
                    215,
                    248,
                    382
                ],
                "sz": [
                    218,
                    221,
                    223
                ],
                "x.size": [
                    218,
                    221
                ],
                "AttributeError": [
                    219
                ],
                "np.asarray": [
                    550,
                    220,
                    252,
                    254
                ],
                "rng": [
                    226,
                    227
                ],
                "nanops.nanmin": [
                    226
                ],
                "nanops": [
                    226
                ],
                "nanops.nanmax": [
                    226
                ],
                "mn": [
                    227,
                    229,
                    234,
                    235,
                    237,
                    239,
                    240
                ],
                "mx": [
                    227,
                    229,
                    234,
                    236,
                    237,
                    239,
                    240
                ],
                "mi": [
                    227
                ],
                "np.isinf": [
                    229
                ],
                "abs": [
                    235,
                    236,
                    583
                ],
                "np.linspace": [
                    337,
                    237,
                    239
                ],
                "adj": [
                    240,
                    242,
                    244
                ],
                "right": [
                    390,
                    264,
                    521,
                    526,
                    241,
                    402,
                    502
                ],
                "isinstance": [
                    538,
                    373,
                    246
                ],
                "IntervalIndex": [
                    526,
                    373,
                    246,
                    519
                ],
                "bins.is_overlapping": [
                    247
                ],
                "is_datetime64tz_dtype": [
                    492,
                    432,
                    468,
                    504,
                    251
                ],
                "_NS_DTYPE": [
                    252
                ],
                "_convert_bin_to_numeric_type": [
                    255
                ],
                "any": [
                    258
                ],
                "np.diff": [
                    258
                ],
                "bins.astype": [
                    258,
                    493,
                    495
                ],
                "fac": [
                    352,
                    261,
                    273,
                    564,
                    341,
                    567,
                    571
                ],
                "_bins_to_cuts": [
                    341,
                    261
                ],
                "labels": [
                    519,
                    265,
                    524,
                    526,
                    399,
                    400,
                    401,
                    527,
                    529,
                    405,
                    344,
                    409,
                    410,
                    413
                ],
                "precision": [
                    514,
                    515,
                    516,
                    583,
                    585,
                    266,
                    592,
                    593,
                    402,
                    595,
                    345
                ],
                "include_lowest": [
                    393,
                    402,
                    267,
                    521
                ],
                "duplicates": [
                    381,
                    348,
                    269,
                    367
                ],
                "_postprocess_for_cut": [
                    272,
                    351
                ],
                "retbins": [
                    352,
                    273,
                    566
                ],
                "is_integer": [
                    336
                ],
                "q": [
                    336,
                    337,
                    339
                ],
                "quantiles": [
                    337,
                    339,
                    340
                ],
                "algos.quantile": [
                    340
                ],
                "algos": [
                    594,
                    379,
                    340,
                    413
                ],
                "ids": [
                    416,
                    391,
                    394,
                    396,
                    375,
                    376,
                    412,
                    413
                ],
                "bins.get_indexer": [
                    375
                ],
                "result": [
                    416,
                    418,
                    419,
                    421,
                    376,
                    377,
                    413
                ],
                "Categorical.from_codes": [
                    376
                ],
                "Categorical": [
                    376,
                    410
                ],
                "unique_bins": [
                    388,
                    379,
                    380
                ],
                "algos.unique": [
                    594,
                    379
                ],
                "len": [
                    396,
                    380,
                    405
                ],
                "format": [
                    383
                ],
                "side": [
                    390,
                    391
                ],
                "ensure_int64": [
                    391
                ],
                "bins.searchsorted": [
                    391
                ],
                "na_mask": [
                    412,
                    419,
                    396,
                    397
                ],
                "isna": [
                    396
                ],
                "has_nas": [
                    417,
                    397
                ],
                "na_mask.any": [
                    397
                ],
                "_format_labels": [
                    401
                ],
                "is_categorical_dtype": [
                    409
                ],
                "np.putmask": [
                    419,
                    412
                ],
                "algos.take_nd": [
                    413
                ],
                "result.astype": [
                    418
                ],
                "np.float64": [
                    418
                ],
                "np.nan": [
                    419,
                    443
                ],
                "x.dtype": [
                    433
                ],
                "is_datetime64_dtype": [
                    434,
                    507,
                    468
                ],
                "to_datetime": [
                    435,
                    493,
                    470
                ],
                "np.dtype": [
                    436,
                    439
                ],
                "is_timedelta64_dtype": [
                    437,
                    510,
                    463
                ],
                "to_timedelta": [
                    465,
                    438
                ],
                "np.where": [
                    443
                ],
                "x.notna": [
                    443
                ],
                "x.view": [
                    443
                ],
                "np.int64": [
                    493,
                    495,
                    465,
                    470,
                    443
                ],
                "bins_dtype": [
                    464,
                    469,
                    462
                ],
                "infer_dtype": [
                    462
                ],
                "view": [
                    465,
                    470
                ],
                "tz_convert": [
                    493
                ],
                "dtype.tz": [
                    505,
                    493
                ],
                "is_datetime_or_timedelta_dtype": [
                    494
                ],
                "Index": [
                    495
                ],
                "closed": [
                    502,
                    519
                ],
                "formatter": [
                    515,
                    518,
                    505,
                    508,
                    511
                ],
                "partial": [
                    505
                ],
                "Timestamp": [
                    505,
                    508
                ],
                "adjust": [
                    512,
                    516,
                    524,
                    506,
                    509
                ],
                "Timedelta": [
                    512,
                    506,
                    509,
                    511
                ],
                "_infer_precision": [
                    514
                ],
                "_round_frac": [
                    593,
                    515
                ],
                "breaks": [
                    518,
                    519
                ],
                "b": [
                    593,
                    518
                ],
                "IntervalIndex.from_breaks": [
                    519
                ],
                "v": [
                    524,
                    526
                ],
                "left": [
                    524
                ],
                "i": [
                    526,
                    527
                ],
                "Interval": [
                    526
                ],
                "i.append": [
                    527
                ],
                "Series": [
                    538,
                    564
                ],
                "x.index": [
                    543
                ],
                "x.name": [
                    544
                ],
                "ndim": [
                    548,
                    549
                ],
                "getattr": [
                    548
                ],
                "x.ndim": [
                    551
                ],
                "_convert_bin_to_datelike_type": [
                    569
                ],
                "np.isfinite": [
                    578
                ],
                "frac": [
                    581,
                    583
                ],
                "whole": [
                    581,
                    582
                ],
                "np.modf": [
                    581
                ],
                "digits": [
                    585,
                    586,
                    583
                ],
                "int": [
                    583
                ],
                "np.floor": [
                    583
                ],
                "np.log10": [
                    583
                ],
                "np.around": [
                    586
                ],
                "range": [
                    592
                ],
                "base_precision": [
                    592,
                    596
                ],
                "levels": [
                    593,
                    594
                ],
                "size": [
                    594
                ],
                "bins.size": [
                    594
                ]
            },
            "filtered_variables_in_file": {
                "x_is_series": [
                    352,
                    554,
                    332,
                    273,
                    210,
                    563,
                    538,
                    542
                ],
                "series_index": [
                    352,
                    554,
                    332,
                    273,
                    210,
                    564,
                    539,
                    543
                ],
                "name": [
                    352,
                    544,
                    554,
                    332,
                    273,
                    210,
                    564,
                    540
                ],
                "x": [
                    512,
                    515,
                    516,
                    262,
                    391,
                    394,
                    396,
                    538,
                    543,
                    544,
                    548,
                    550,
                    551,
                    554,
                    432,
                    433,
                    434,
                    435,
                    437,
                    438,
                    443,
                    445,
                    578,
                    579,
                    581,
                    586,
                    332,
                    334,
                    210,
                    211,
                    340,
                    342,
                    218,
                    220,
                    221,
                    226,
                    375,
                    506,
                    509
                ],
                "_preprocess_for_cut": [
                    210,
                    332
                ],
                "dtype": [
                    268,
                    273,
                    402,
                    430,
                    433,
                    436,
                    439,
                    441,
                    569,
                    445,
                    334,
                    463,
                    211,
                    468,
                    347,
                    352,
                    492,
                    493,
                    494,
                    495,
                    504,
                    505,
                    507,
                    510,
                    255
                ],
                "_coerce_to_type": [
                    211,
                    334
                ],
                "np.iterable": [
                    213
                ],
                "np": [
                    258,
                    412,
                    418,
                    419,
                    550,
                    436,
                    439,
                    443,
                    578,
                    581,
                    583,
                    586,
                    337,
                    465,
                    213,
                    470,
                    220,
                    229,
                    237,
                    493,
                    239,
                    495,
                    252,
                    254
                ],
                "bins": [
                    385,
                    258,
                    514,
                    388,
                    261,
                    518,
                    263,
                    391,
                    394,
                    396,
                    273,
                    402,
                    405,
                    421,
                    569,
                    571,
                    462,
                    465,
                    593,
                    594,
                    340,
                    213,
                    214,
                    341,
                    343,
                    380,
                    470,
                    474,
                    375,
                    352,
                    237,
                    493,
                    239,
                    495,
                    496,
                    242,
                    379,
                    244,
                    373,
                    246,
                    247,
                    376,
                    377,
                    251,
                    252,
                    254,
                    255
                ],
                "is_scalar": [
                    214
                ],
                "sz": [
                    218,
                    221,
                    223
                ],
                "x.size": [
                    218,
                    221
                ],
                "np.asarray": [
                    550,
                    220,
                    252,
                    254
                ],
                "rng": [
                    226,
                    227
                ],
                "nanops.nanmin": [
                    226
                ],
                "nanops": [
                    226
                ],
                "nanops.nanmax": [
                    226
                ],
                "mn": [
                    227,
                    229,
                    234,
                    235,
                    237,
                    239,
                    240
                ],
                "mx": [
                    227,
                    229,
                    234,
                    236,
                    237,
                    239,
                    240
                ],
                "mi": [
                    227
                ],
                "np.isinf": [
                    229
                ],
                "np.linspace": [
                    337,
                    237,
                    239
                ],
                "adj": [
                    240,
                    242,
                    244
                ],
                "right": [
                    390,
                    264,
                    521,
                    526,
                    241,
                    402,
                    502
                ],
                "IntervalIndex": [
                    526,
                    373,
                    246,
                    519
                ],
                "bins.is_overlapping": [
                    247
                ],
                "is_datetime64tz_dtype": [
                    492,
                    432,
                    468,
                    504,
                    251
                ],
                "_NS_DTYPE": [
                    252
                ],
                "_convert_bin_to_numeric_type": [
                    255
                ],
                "np.diff": [
                    258
                ],
                "bins.astype": [
                    258,
                    493,
                    495
                ],
                "fac": [
                    352,
                    261,
                    273,
                    564,
                    341,
                    567,
                    571
                ],
                "_bins_to_cuts": [
                    341,
                    261
                ],
                "labels": [
                    519,
                    265,
                    524,
                    526,
                    399,
                    400,
                    401,
                    527,
                    529,
                    405,
                    344,
                    409,
                    410,
                    413
                ],
                "precision": [
                    514,
                    515,
                    516,
                    583,
                    585,
                    266,
                    592,
                    593,
                    402,
                    595,
                    345
                ],
                "include_lowest": [
                    393,
                    402,
                    267,
                    521
                ],
                "duplicates": [
                    381,
                    348,
                    269,
                    367
                ],
                "_postprocess_for_cut": [
                    272,
                    351
                ],
                "retbins": [
                    352,
                    273,
                    566
                ],
                "is_integer": [
                    336
                ],
                "q": [
                    336,
                    337,
                    339
                ],
                "quantiles": [
                    337,
                    339,
                    340
                ],
                "algos.quantile": [
                    340
                ],
                "algos": [
                    594,
                    379,
                    340,
                    413
                ],
                "ids": [
                    416,
                    391,
                    394,
                    396,
                    375,
                    376,
                    412,
                    413
                ],
                "bins.get_indexer": [
                    375
                ],
                "result": [
                    416,
                    418,
                    419,
                    421,
                    376,
                    377,
                    413
                ],
                "Categorical.from_codes": [
                    376
                ],
                "Categorical": [
                    376,
                    410
                ],
                "unique_bins": [
                    388,
                    379,
                    380
                ],
                "algos.unique": [
                    594,
                    379
                ],
                "side": [
                    390,
                    391
                ],
                "ensure_int64": [
                    391
                ],
                "bins.searchsorted": [
                    391
                ],
                "na_mask": [
                    412,
                    419,
                    396,
                    397
                ],
                "isna": [
                    396
                ],
                "has_nas": [
                    417,
                    397
                ],
                "na_mask.any": [
                    397
                ],
                "_format_labels": [
                    401
                ],
                "is_categorical_dtype": [
                    409
                ],
                "np.putmask": [
                    419,
                    412
                ],
                "algos.take_nd": [
                    413
                ],
                "result.astype": [
                    418
                ],
                "np.float64": [
                    418
                ],
                "np.nan": [
                    419,
                    443
                ],
                "x.dtype": [
                    433
                ],
                "is_datetime64_dtype": [
                    434,
                    507,
                    468
                ],
                "to_datetime": [
                    435,
                    493,
                    470
                ],
                "np.dtype": [
                    436,
                    439
                ],
                "is_timedelta64_dtype": [
                    437,
                    510,
                    463
                ],
                "to_timedelta": [
                    465,
                    438
                ],
                "np.where": [
                    443
                ],
                "x.notna": [
                    443
                ],
                "x.view": [
                    443
                ],
                "np.int64": [
                    493,
                    495,
                    465,
                    470,
                    443
                ],
                "bins_dtype": [
                    464,
                    469,
                    462
                ],
                "infer_dtype": [
                    462
                ],
                "view": [
                    465,
                    470
                ],
                "tz_convert": [
                    493
                ],
                "dtype.tz": [
                    505,
                    493
                ],
                "is_datetime_or_timedelta_dtype": [
                    494
                ],
                "Index": [
                    495
                ],
                "closed": [
                    502,
                    519
                ],
                "formatter": [
                    515,
                    518,
                    505,
                    508,
                    511
                ],
                "partial": [
                    505
                ],
                "Timestamp": [
                    505,
                    508
                ],
                "adjust": [
                    512,
                    516,
                    524,
                    506,
                    509
                ],
                "Timedelta": [
                    512,
                    506,
                    509,
                    511
                ],
                "_infer_precision": [
                    514
                ],
                "_round_frac": [
                    593,
                    515
                ],
                "breaks": [
                    518,
                    519
                ],
                "b": [
                    593,
                    518
                ],
                "IntervalIndex.from_breaks": [
                    519
                ],
                "v": [
                    524,
                    526
                ],
                "left": [
                    524
                ],
                "i": [
                    526,
                    527
                ],
                "Interval": [
                    526
                ],
                "i.append": [
                    527
                ],
                "Series": [
                    538,
                    564
                ],
                "x.index": [
                    543
                ],
                "x.name": [
                    544
                ],
                "ndim": [
                    548,
                    549
                ],
                "x.ndim": [
                    551
                ],
                "_convert_bin_to_datelike_type": [
                    569
                ],
                "np.isfinite": [
                    578
                ],
                "frac": [
                    581,
                    583
                ],
                "whole": [
                    581,
                    582
                ],
                "np.modf": [
                    581
                ],
                "digits": [
                    585,
                    586,
                    583
                ],
                "np.floor": [
                    583
                ],
                "np.log10": [
                    583
                ],
                "np.around": [
                    586
                ],
                "base_precision": [
                    592,
                    596
                ],
                "levels": [
                    593,
                    594
                ],
                "size": [
                    594
                ],
                "bins.size": [
                    594
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_138/pandas/tests/reshape/test_qcut.py",
                "test_function": "test_qcut_bool_coercion_to_int",
                "test_function_code": "@pytest.mark.parametrize(\"bins\", [6, 7])\n@pytest.mark.parametrize(\n    \"box, compare\",\n    [\n        (Series, tm.assert_series_equal),\n        (np.array, tm.assert_categorical_equal),\n        (list, tm.assert_equal),\n    ],\n)\ndef test_qcut_bool_coercion_to_int(bins, box, compare):\n    # issue 20303\n    data_expected = box([0, 1, 1, 0, 1] * 10)\n    data_result = box([False, True, True, False, True] * 10)\n    expected = qcut(data_expected, bins, duplicates=\"drop\")\n    result = qcut(data_result, bins, duplicates=\"drop\")\n    compare(result, expected)",
                "test_error": "TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.",
                "full_test_error": "bins = 6, box = <class 'pandas.core.series.Series'>\ncompare = <function assert_series_equal at 0x7eff8a78ba60>\n\n    @pytest.mark.parametrize(\"bins\", [6, 7])\n    @pytest.mark.parametrize(\n        \"box, compare\",\n        [\n            (Series, tm.assert_series_equal),\n            (np.array, tm.assert_categorical_equal),\n            (list, tm.assert_equal),\n        ],\n    )\n    def test_qcut_bool_coercion_to_int(bins, box, compare):\n        # issue 20303\n        data_expected = box([0, 1, 1, 0, 1] * 10)\n        data_result = box([False, True, True, False, True] * 10)\n        expected = qcut(data_expected, bins, duplicates=\"drop\")\n>       result = qcut(data_result, bins, duplicates=\"drop\")\n\npandas/tests/reshape/test_qcut.py:255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = False, b = False, fraction = 0.16666666666666607\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "traceback": "pandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = False, b = False, fraction = 0.16666666666666607\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('bins', [6, 7])",
                    "pytest.mark.parametrize('box, compare', [(Series, tm.assert_series_equal), (np.array, tm.assert_categorical_equal), (list, tm.assert_equal)])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_138/pandas/tests/reshape/test_qcut.py",
                "test_function": "test_qcut_bool_coercion_to_int",
                "test_function_code": "@pytest.mark.parametrize(\"bins\", [6, 7])\n@pytest.mark.parametrize(\n    \"box, compare\",\n    [\n        (Series, tm.assert_series_equal),\n        (np.array, tm.assert_categorical_equal),\n        (list, tm.assert_equal),\n    ],\n)\ndef test_qcut_bool_coercion_to_int(bins, box, compare):\n    # issue 20303\n    data_expected = box([0, 1, 1, 0, 1] * 10)\n    data_result = box([False, True, True, False, True] * 10)\n    expected = qcut(data_expected, bins, duplicates=\"drop\")\n    result = qcut(data_result, bins, duplicates=\"drop\")\n    compare(result, expected)",
                "test_error": "TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.",
                "full_test_error": "bins = 7, box = <class 'pandas.core.series.Series'>\ncompare = <function assert_series_equal at 0x7eff8a78ba60>\n\n    @pytest.mark.parametrize(\"bins\", [6, 7])\n    @pytest.mark.parametrize(\n        \"box, compare\",\n        [\n            (Series, tm.assert_series_equal),\n            (np.array, tm.assert_categorical_equal),\n            (list, tm.assert_equal),\n        ],\n    )\n    def test_qcut_bool_coercion_to_int(bins, box, compare):\n        # issue 20303\n        data_expected = box([0, 1, 1, 0, 1] * 10)\n        data_result = box([False, True, True, False, True] * 10)\n        expected = qcut(data_expected, bins, duplicates=\"drop\")\n>       result = qcut(data_result, bins, duplicates=\"drop\")\n\npandas/tests/reshape/test_qcut.py:255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = True, b = True, fraction = 0.9999999999999929\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "traceback": "pandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = True, b = True, fraction = 0.9999999999999929\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('bins', [6, 7])",
                    "pytest.mark.parametrize('box, compare', [(Series, tm.assert_series_equal), (np.array, tm.assert_categorical_equal), (list, tm.assert_equal)])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_138/pandas/tests/reshape/test_qcut.py",
                "test_function": "test_qcut_bool_coercion_to_int",
                "test_function_code": "@pytest.mark.parametrize(\"bins\", [6, 7])\n@pytest.mark.parametrize(\n    \"box, compare\",\n    [\n        (Series, tm.assert_series_equal),\n        (np.array, tm.assert_categorical_equal),\n        (list, tm.assert_equal),\n    ],\n)\ndef test_qcut_bool_coercion_to_int(bins, box, compare):\n    # issue 20303\n    data_expected = box([0, 1, 1, 0, 1] * 10)\n    data_result = box([False, True, True, False, True] * 10)\n    expected = qcut(data_expected, bins, duplicates=\"drop\")\n    result = qcut(data_result, bins, duplicates=\"drop\")\n    compare(result, expected)",
                "test_error": "TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.",
                "full_test_error": "bins = 6, box = <built-in function array>\ncompare = <function assert_categorical_equal at 0x7eff8a78b5e0>\n\n    @pytest.mark.parametrize(\"bins\", [6, 7])\n    @pytest.mark.parametrize(\n        \"box, compare\",\n        [\n            (Series, tm.assert_series_equal),\n            (np.array, tm.assert_categorical_equal),\n            (list, tm.assert_equal),\n        ],\n    )\n    def test_qcut_bool_coercion_to_int(bins, box, compare):\n        # issue 20303\n        data_expected = box([0, 1, 1, 0, 1] * 10)\n        data_result = box([False, True, True, False, True] * 10)\n        expected = qcut(data_expected, bins, duplicates=\"drop\")\n>       result = qcut(data_result, bins, duplicates=\"drop\")\n\npandas/tests/reshape/test_qcut.py:255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = False, b = False, fraction = 0.16666666666666607\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "traceback": "pandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = False, b = False, fraction = 0.16666666666666607\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('bins', [6, 7])",
                    "pytest.mark.parametrize('box, compare', [(Series, tm.assert_series_equal), (np.array, tm.assert_categorical_equal), (list, tm.assert_equal)])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_138/pandas/tests/reshape/test_qcut.py",
                "test_function": "test_qcut_bool_coercion_to_int",
                "test_function_code": "@pytest.mark.parametrize(\"bins\", [6, 7])\n@pytest.mark.parametrize(\n    \"box, compare\",\n    [\n        (Series, tm.assert_series_equal),\n        (np.array, tm.assert_categorical_equal),\n        (list, tm.assert_equal),\n    ],\n)\ndef test_qcut_bool_coercion_to_int(bins, box, compare):\n    # issue 20303\n    data_expected = box([0, 1, 1, 0, 1] * 10)\n    data_result = box([False, True, True, False, True] * 10)\n    expected = qcut(data_expected, bins, duplicates=\"drop\")\n    result = qcut(data_result, bins, duplicates=\"drop\")\n    compare(result, expected)",
                "test_error": "TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.",
                "full_test_error": "bins = 7, box = <built-in function array>\ncompare = <function assert_categorical_equal at 0x7eff8a78b5e0>\n\n    @pytest.mark.parametrize(\"bins\", [6, 7])\n    @pytest.mark.parametrize(\n        \"box, compare\",\n        [\n            (Series, tm.assert_series_equal),\n            (np.array, tm.assert_categorical_equal),\n            (list, tm.assert_equal),\n        ],\n    )\n    def test_qcut_bool_coercion_to_int(bins, box, compare):\n        # issue 20303\n        data_expected = box([0, 1, 1, 0, 1] * 10)\n        data_result = box([False, True, True, False, True] * 10)\n        expected = qcut(data_expected, bins, duplicates=\"drop\")\n>       result = qcut(data_result, bins, duplicates=\"drop\")\n\npandas/tests/reshape/test_qcut.py:255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = True, b = True, fraction = 0.9999999999999929\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "traceback": "pandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = True, b = True, fraction = 0.9999999999999929\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('bins', [6, 7])",
                    "pytest.mark.parametrize('box, compare', [(Series, tm.assert_series_equal), (np.array, tm.assert_categorical_equal), (list, tm.assert_equal)])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_138/pandas/tests/reshape/test_qcut.py",
                "test_function": "test_qcut_bool_coercion_to_int",
                "test_function_code": "@pytest.mark.parametrize(\"bins\", [6, 7])\n@pytest.mark.parametrize(\n    \"box, compare\",\n    [\n        (Series, tm.assert_series_equal),\n        (np.array, tm.assert_categorical_equal),\n        (list, tm.assert_equal),\n    ],\n)\ndef test_qcut_bool_coercion_to_int(bins, box, compare):\n    # issue 20303\n    data_expected = box([0, 1, 1, 0, 1] * 10)\n    data_result = box([False, True, True, False, True] * 10)\n    expected = qcut(data_expected, bins, duplicates=\"drop\")\n    result = qcut(data_result, bins, duplicates=\"drop\")\n    compare(result, expected)",
                "test_error": "TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.",
                "full_test_error": "bins = 6, box = <class 'list'>\ncompare = <function assert_equal at 0x7eff8a78bb80>\n\n    @pytest.mark.parametrize(\"bins\", [6, 7])\n    @pytest.mark.parametrize(\n        \"box, compare\",\n        [\n            (Series, tm.assert_series_equal),\n            (np.array, tm.assert_categorical_equal),\n            (list, tm.assert_equal),\n        ],\n    )\n    def test_qcut_bool_coercion_to_int(bins, box, compare):\n        # issue 20303\n        data_expected = box([0, 1, 1, 0, 1] * 10)\n        data_result = box([False, True, True, False, True] * 10)\n        expected = qcut(data_expected, bins, duplicates=\"drop\")\n>       result = qcut(data_result, bins, duplicates=\"drop\")\n\npandas/tests/reshape/test_qcut.py:255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = False, b = False, fraction = 0.16666666666666607\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "traceback": "pandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = False, b = False, fraction = 0.16666666666666607\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('bins', [6, 7])",
                    "pytest.mark.parametrize('box, compare', [(Series, tm.assert_series_equal), (np.array, tm.assert_categorical_equal), (list, tm.assert_equal)])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_138/pandas/tests/reshape/test_qcut.py",
                "test_function": "test_qcut_bool_coercion_to_int",
                "test_function_code": "@pytest.mark.parametrize(\"bins\", [6, 7])\n@pytest.mark.parametrize(\n    \"box, compare\",\n    [\n        (Series, tm.assert_series_equal),\n        (np.array, tm.assert_categorical_equal),\n        (list, tm.assert_equal),\n    ],\n)\ndef test_qcut_bool_coercion_to_int(bins, box, compare):\n    # issue 20303\n    data_expected = box([0, 1, 1, 0, 1] * 10)\n    data_result = box([False, True, True, False, True] * 10)\n    expected = qcut(data_expected, bins, duplicates=\"drop\")\n    result = qcut(data_result, bins, duplicates=\"drop\")\n    compare(result, expected)",
                "test_error": "TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.",
                "full_test_error": "bins = 7, box = <class 'list'>\ncompare = <function assert_equal at 0x7eff8a78bb80>\n\n    @pytest.mark.parametrize(\"bins\", [6, 7])\n    @pytest.mark.parametrize(\n        \"box, compare\",\n        [\n            (Series, tm.assert_series_equal),\n            (np.array, tm.assert_categorical_equal),\n            (list, tm.assert_equal),\n        ],\n    )\n    def test_qcut_bool_coercion_to_int(bins, box, compare):\n        # issue 20303\n        data_expected = box([0, 1, 1, 0, 1] * 10)\n        data_result = box([False, True, True, False, True] * 10)\n        expected = qcut(data_expected, bins, duplicates=\"drop\")\n>       result = qcut(data_result, bins, duplicates=\"drop\")\n\npandas/tests/reshape/test_qcut.py:255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = True, b = True, fraction = 0.9999999999999929\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "traceback": "pandas/core/reshape/tile.py:340: in qcut\n    bins = algos.quantile(x, quantiles)\npandas/core/algorithms.py:1096: in quantile\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1096: in <listcomp>\n    result = [_get_score(x) for x in q]\npandas/core/algorithms.py:1079: in _get_score\n    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = True, b = True, fraction = 0.9999999999999929\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n>       return a + (b - a) * fraction\nE       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\n\npandas/core/algorithms.py:1068: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('bins', [6, 7])",
                    "pytest.mark.parametrize('box, compare', [(Series, tm.assert_series_equal), (np.array, tm.assert_categorical_equal), (list, tm.assert_equal)])"
                ]
            }
        ]
    }
}