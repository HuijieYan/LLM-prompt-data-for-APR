{
    "1.1.1": "def _period_array_cmp(cls, op):\n    \n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n        ordinal_op = getattr(self.asi8, opname)\n\n        if isinstance(other, str):\n            try:\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # string that can't be parsed as Period\n                return invalid_comparison(self, other, op)\n        elif isinstance(other, int):\n            # TODO: sure we want to allow this?  we dont for DTA/TDA\n            #  2 tests rely on this\n            other = Period(other, freq=self.freq)\n            result = ordinal_op(other.ordinal)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n            other_i8 = self._unbox_scalar(other)\n\n            result = op(self.view(\"i8\"), other_i8)\n            if isna(other):\n                result.fill(nat_result)\n\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            if isinstance(other, list):\n                # TODO: could use pd.Index to do inference?\n                other = np.array(other)\n\n            if not isinstance(other, (np.ndarray, cls)):\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n\n            elif not cls._is_recognized_dtype(other.dtype):\n                # e.g. is_timedelta64_dtype(other)\n                return invalid_comparison(self, other, op)\n\n            else:\n                assert isinstance(other, cls), type(other)\n\n                self._check_compatible_with(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result\n\n    return compat.set_function_name(wrapper, opname, cls)\n",
    "1.1.2": "Wrap comparison operations to convert Period-like to PeriodDtype",
    "1.2.1": "pandas/core/arrays/period.py",
    "1.2.2": "import numpy as np\nfrom pandas._libs.tslibs import NaT, NaTType, frequencies as libfrequencies, iNaT, period as libperiod\nfrom pandas._libs.tslibs.period import DIFFERENT_FREQ, IncompatibleFrequency, Period, get_period_field_arr, period_asfreq_arr\nimport pandas.compat as compat\nfrom pandas.core.dtypes.common import _TD_DTYPE, ensure_object, is_datetime64_dtype, is_float_dtype, is_list_like, is_object_dtype, is_period_dtype, pandas_dtype\nfrom pandas.core.dtypes.missing import isna, notna\nfrom pandas.core import ops\nfrom pandas.core.ops.common import unpack_zerodim_and_defer\nfrom pandas.core.ops.invalid import invalid_comparison",
    "1.3.1": null,
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": null,
    "1.5.1": [
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            2017,\n            [2017, 2017, 2017],\n            np.array([2017, 2017, 2017]),\n            np.array([2017, 2017, 2017], dtype=object),\n            pd.Index([2017, 2017, 2017]),\n        ],\n    )\n    def test_eq_integer_disallowed(self, other):\n        # match Period semantics by not treating integers as Periods\n\n        idx = PeriodIndex([\"2017\", \"2017\", \"2018\"], freq=\"D\")\n        expected = np.array([False, False, False])\n        result = idx == other\n\n        tm.assert_numpy_array_equal(result, expected)\n\n        with pytest.raises(TypeError):\n            idx < other\n        with pytest.raises(TypeError):\n            idx > other\n        with pytest.raises(TypeError):\n            idx <= other\n        with pytest.raises(TypeError):\n            idx >= other"
    ],
    "1.5.2": [
        "pandas/tests/arithmetic/test_period.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: numpy array are different\nE           \nE           numpy array values are different (66.66667 %)\nE           [left]:  [True, True, False]\nE           [right]: [False, False, False]"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons object at 0x7fd4427048b0>\nother = 2017\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            2017,\n            [2017, 2017, 2017],\n            np.array([2017, 2017, 2017]),\n            np.array([2017, 2017, 2017], dtype=object),\n            pd.Index([2017, 2017, 2017]),\n        ],\n    )\n    def test_eq_integer_disallowed(self, other):\n        # match Period semantics by not treating integers as Periods\n    \n        idx = PeriodIndex([\"2017\", \"2017\", \"2018\"], freq=\"D\")\n        expected = np.array([False, False, False])\n        result = idx == other\n    \n>       tm.assert_numpy_array_equal(result, expected)\n\npandas/tests/arithmetic/test_period.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([ True,  True, False]), right = array([False, False, False])\nerr_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n>           raise_assert_detail(obj, msg, left, right)",
            "\npandas/_testing.py:979: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "op.__name__": {
                    "value": "'eq'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function eq>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__eq__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'ne'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function ne>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__ne__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'lt'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function lt>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__lt__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'gt'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function gt>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__gt__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'le'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function le>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__le__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'ge'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function ge>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__ge__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "op.__name__": {
                    "value": "'eq'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function eq>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__eq__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'ne'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function ne>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__ne__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'lt'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function lt>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__lt__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'gt'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function gt>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__gt__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'le'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function le>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__le__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "op.__name__": {
                    "value": "'ge'",
                    "shape": "2",
                    "omitted": false
                },
                "op": {
                    "value": "<built-in function ge>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "opname": {
                    "value": "'__ge__'",
                    "shape": "6",
                    "omitted": false
                },
                "nat_result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ],
        [
            {
                "op.__name__": "str",
                "op": "builtin_function_or_method"
            },
            {
                "opname": "str",
                "nat_result": "bool"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}