{
    "1.1.1": "def _get_series_list(self, others):\n    \n    from pandas import Series, DataFrame\n\n    # self._orig is either Series or Index\n    idx = self._orig if isinstance(self._orig, ABCIndexClass) else self._orig.index\n\n    # Generally speaking, all objects without an index inherit the index\n    # `idx` of the calling Series/Index - i.e. must have matching length.\n    # Objects with an index (i.e. Series/Index/DataFrame) keep their own.\n    if isinstance(others, ABCSeries):\n        return [others]\n    elif isinstance(others, ABCIndexClass):\n        return [Series(others._values, index=others)]\n    elif isinstance(others, ABCDataFrame):\n        return [others[x] for x in others]\n    elif isinstance(others, np.ndarray) and others.ndim == 2:\n        others = DataFrame(others, index=idx)\n        return [others[x] for x in others]\n    elif is_list_like(others, allow_sets=False):\n        others = list(others)  # ensure iterators do not get read twice etc\n\n        # in case of list-like `others`, all elements must be\n        # either Series/Index/np.ndarray (1-dim)...\n        if all(\n            isinstance(x, (ABCSeries, ABCIndexClass))\n            or (isinstance(x, np.ndarray) and x.ndim == 1)\n            for x in others\n        ):\n            los = []\n            while others:  # iterate through list and append each element\n                los = los + self._get_series_list(others.pop(0))\n            return los\n        # ... or just strings\n        elif all(not is_list_like(x) for x in others):\n            return [Series(others, index=idx)]\n    raise TypeError(\n        \"others must be Series, Index, DataFrame, np.ndarrary \"\n        \"or list-like (either containing only strings or \"\n        \"containing only objects of type Series/Index/\"\n        \"np.ndarray[1-dim])\"\n    )\n",
    "1.1.2": "Auxiliary function for :meth:`str.cat`. Turn potentially mixed input\ninto a list of Series (elements without an index must match the length\nof the calling Series/Index).\n\nParameters\n----------\nothers : Series, DataFrame, np.ndarray, list-like or list-like of\n    Objects that are either Series, Index or np.ndarray (1-dim).\n\nReturns\n-------\nlist of Series\n    Others transformed into list of Series.",
    "1.2.1": "class StringMethods(NoNewAttributesMixin)",
    "1.2.2": "Vectorized string functions for Series and Index. NAs stay NA unless\nhandled otherwise by a particular method. Patterned after Python's string\nmethods, with some inspiration from R's stringr package.\n\nExamples\n--------\n>>> s = pd.Series([\"A_Str_Series\"])\n>>> s\n0    A_Str_Series\ndtype: object\n\n>>> s.str.split(\"_\")\n0    [A, Str, Series]\ndtype: object\n\n>>> s.str.replace(\"_\", \"\")\n0    AStrSeries\ndtype: object",
    "1.2.3": [
        "_get_series_list(self, others)",
        "index(self, sub, start=0, end=None)"
    ],
    "1.3.1": "pandas/core/strings.py",
    "1.3.2": [
        "_get_series_list(self, others)",
        "index(self, sub, start=0, end=None)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize(\"klass\", [tuple, list, np.array, pd.Series, pd.Index])\ndef test_cat_different_classes(klass):\n    # https://github.com/pandas-dev/pandas/issues/33425\n    s = pd.Series([\"a\", \"b\", \"c\"])\n    result = s.str.cat(klass([\"x\", \"y\", \"z\"]))\n    expected = pd.Series([\"ax\", \"by\", \"cz\"])\n    tm.assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/test_strings.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: Series.index are different\nE           \nE           Series.index classes are not equivalent\nE           [left]:  Index([0, 1, 2], dtype='object')\nE           [right]: RangeIndex(start=0, stop=3, step=1)"
        ]
    ],
    "2.1.2": [
        [
            "klass = <class 'pandas.core.indexes.base.Index'>\n\n    @pytest.mark.parametrize(\"klass\", [tuple, list, np.array, pd.Series, pd.Index])\n    def test_cat_different_classes(klass):\n        # https://github.com/pandas-dev/pandas/issues/33425\n        s = pd.Series([\"a\", \"b\", \"c\"])\n        result = s.str.cat(klass([\"x\", \"y\", \"z\"]))\n        expected = pd.Series([\"ax\", \"by\", \"cz\"])\n>       tm.assert_series_equal(result, expected)\n\npandas/tests/test_strings.py:3635: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nl = Index([0, 1, 2], dtype='object'), r = RangeIndex(start=0, stop=3, step=1)\nobj = 'Series.index'\n\n    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n>           assert_class_equal(l, r, exact=exact, obj=obj)",
            "\npandas/_testing.py:607: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "('x', 'y', 'z')",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "['x', 'y', 'z']",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "['x', 'y', 'z']",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "array(['x', 'y', 'z'], dtype='<U1')",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others.ndim": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "['x', 'y', 'z']",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "0    x\n1    y\n2    z\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others._values": {
                    "value": "array(['x', 'y', 'z'], dtype=object)",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others.ndim": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "Index(['x', 'y', 'z'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others._values": {
                    "value": "array(['x', 'y', 'z'], dtype=object)",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others.ndim": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self._orig": "Series",
                "others": "tuple"
            },
            {
                "idx": "RangeIndex",
                "others": "list"
            }
        ],
        [
            {
                "self._orig": "Series",
                "others": "list"
            },
            {
                "idx": "RangeIndex"
            }
        ],
        [
            {
                "self._orig": "Series",
                "others": "ndarray",
                "others.ndim": "int"
            },
            {
                "idx": "RangeIndex",
                "others": "list"
            }
        ],
        [
            {
                "self._orig": "Series",
                "others": "Series",
                "others._values": "ndarray",
                "others.ndim": "int"
            },
            {
                "idx": "RangeIndex"
            }
        ],
        [
            {
                "self._orig": "Series",
                "others": "Index",
                "others._values": "ndarray",
                "others.ndim": "int"
            },
            {
                "idx": "RangeIndex"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "('x', 'y', 'z')",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "['x', 'y', 'z']",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "['x', 'y', 'z']",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "array(['x', 'y', 'z'], dtype='<U1')",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others.ndim": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "['x', 'y', 'z']",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "0    x\n1    y\n2    z\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others._values": {
                    "value": "array(['x', 'y', 'z'], dtype=object)",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others.ndim": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self._orig": {
                    "value": "0    a\n1    b\n2    c\ndtype: object",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others": {
                    "value": "Index(['x', 'y', 'z'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others._values": {
                    "value": "array(['x', 'y', 'z'], dtype=object)",
                    "shape": "(3,)",
                    "omitted": false
                },
                "others.ndim": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "idx": {
                    "value": "RangeIndex(start=0, stop=3, step=1)",
                    "shape": "(3,)",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self._orig": "Series",
                "others": "tuple"
            },
            {
                "idx": "RangeIndex",
                "others": "list"
            }
        ],
        [
            {
                "self._orig": "Series",
                "others": "list"
            },
            {
                "idx": "RangeIndex"
            }
        ],
        [
            {
                "self._orig": "Series",
                "others": "ndarray",
                "others.ndim": "int"
            },
            {
                "idx": "RangeIndex",
                "others": "list"
            }
        ],
        [
            {
                "self._orig": "Series",
                "others": "Series",
                "others._values": "ndarray",
                "others.ndim": "int"
            },
            {
                "idx": "RangeIndex"
            }
        ],
        [
            {
                "self._orig": "Series",
                "others": "Index",
                "others._values": "ndarray",
                "others.ndim": "int"
            },
            {
                "idx": "RangeIndex"
            }
        ]
    ],
    "3.1.1": [
        "BUG: str.cat produces NaNs when others is an Index\n"
    ],
    "3.1.2": [
        " I have checked that this issue has not already been reported.\n\n I have confirmed this bug exists on the latest version of pandas.\n\n (optional) I have confirmed this bug exists on the master branch of pandas.\n\nCode Sample, a copy-pastable example\nimport pandas as pd\nprint(pd.__version__)\n\nsr = pd.Series(['a','b','c','d','e'])\nothers = pd.Index(['a','b','c','d','e'])\n\nresult = sr.str.cat(others=others)\nprint(result)\n\n1.0.3\n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: object\nProblem description\nThe result should be the same as when others is a list or numpy array with the same values. The result is correct for pandas < 1.0.\n\nExpected Output\n0    aa\n1    bb\n2    cc\n3    dd\n4    ee\ndtype: object\n"
    ],
    "used_imports": "import numpy as np\nfrom pandas.core.dtypes.common import ensure_object, is_bool_dtype, is_categorical_dtype, is_extension_array_dtype, is_integer, is_integer_dtype, is_list_like, is_object_dtype, is_re, is_scalar, is_string_dtype\nfrom pandas.core.dtypes.generic import ABCDataFrame, ABCIndexClass, ABCMultiIndex, ABCSeries\nfrom pandas import DataFrame\nfrom pandas import DataFrame\nfrom pandas import Index, Series, MultiIndex\nfrom pandas import Series, DataFrame\nfrom pandas import Index, Series, concat"
}