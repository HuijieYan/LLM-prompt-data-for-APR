{
    "pandas:151": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_151/pandas/core/arrays/numpy_.py": {
            "buggy_functions": [
                {
                    "function_name": "__setitem__",
                    "function_code": "def __setitem__(self, key, value):\n    value = extract_array(value, extract_numpy=True)\n\n    if not lib.is_scalar(key) and is_list_like(key):\n        key = np.asarray(key)\n\n    if not lib.is_scalar(value):\n        value = np.asarray(value)\n\n    values = self._ndarray\n    t = np.result_type(value, values)\n    if t != self._ndarray.dtype:\n        values = values.astype(t, casting=\"safe\")\n        values[key] = value\n        self._dtype = PandasDtype(t)\n        self._ndarray = values\n    else:\n        self._ndarray[key] = value\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 229,
                    "end_line": 246,
                    "variables": {
                        "value": [
                            230,
                            235,
                            236,
                            239,
                            242,
                            246
                        ],
                        "extract_array": [
                            230
                        ],
                        "lib.is_scalar": [
                            232,
                            235
                        ],
                        "lib": [
                            232,
                            235
                        ],
                        "key": [
                            232,
                            233,
                            242,
                            246
                        ],
                        "is_list_like": [
                            232
                        ],
                        "np.asarray": [
                            233,
                            236
                        ],
                        "np": [
                            233,
                            236,
                            239
                        ],
                        "values": [
                            238,
                            239,
                            241,
                            242,
                            244
                        ],
                        "self._ndarray": [
                            240,
                            244,
                            238,
                            246
                        ],
                        "self": [
                            238,
                            240,
                            243,
                            244,
                            246
                        ],
                        "t": [
                            240,
                            241,
                            243,
                            239
                        ],
                        "np.result_type": [
                            239
                        ],
                        "self._ndarray.dtype": [
                            240
                        ],
                        "values.astype": [
                            241
                        ],
                        "self._dtype": [
                            243
                        ],
                        "PandasDtype": [
                            243
                        ]
                    },
                    "filtered_variables": {
                        "value": [
                            230,
                            235,
                            236,
                            239,
                            242,
                            246
                        ],
                        "extract_array": [
                            230
                        ],
                        "lib.is_scalar": [
                            232,
                            235
                        ],
                        "lib": [
                            232,
                            235
                        ],
                        "key": [
                            232,
                            233,
                            242,
                            246
                        ],
                        "is_list_like": [
                            232
                        ],
                        "np.asarray": [
                            233,
                            236
                        ],
                        "np": [
                            233,
                            236,
                            239
                        ],
                        "values": [
                            238,
                            239,
                            241,
                            242,
                            244
                        ],
                        "self._ndarray": [
                            240,
                            244,
                            238,
                            246
                        ],
                        "self": [
                            238,
                            240,
                            243,
                            244,
                            246
                        ],
                        "t": [
                            240,
                            241,
                            243,
                            239
                        ],
                        "np.result_type": [
                            239
                        ],
                        "self._ndarray.dtype": [
                            240
                        ],
                        "values.astype": [
                            241
                        ],
                        "self._dtype": [
                            243
                        ],
                        "PandasDtype": [
                            243
                        ]
                    },
                    "diff_line_number": 238,
                    "class_data": {
                        "signature": "class PandasArray(ExtensionArray, ExtensionOpsMixin, NDArrayOperatorsMixin)",
                        "docstring": "A pandas ExtensionArray for NumPy data.\n\n.. versionadded:: 0.24.0\n\nThis is mostly for internal compatibility, and is not especially\nuseful on its own.\n\nParameters\n----------\nvalues : ndarray\n    The NumPy ndarray to wrap. Must be 1-dimensional.\ncopy : bool, default False\n    Whether to copy `values`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, values, copy=False):\n    if isinstance(values, type(self)):\n        values = values._ndarray\n    if not isinstance(values, np.ndarray):\n        raise ValueError(\"'values' must be a NumPy array, not {typ}\".format(typ=type(values).__name__))\n    if values.ndim != 1:\n        raise ValueError('PandasArray must be 1-dimensional.')\n    if copy:\n        values = values.copy()\n    self._ndarray = values\n    self._dtype = PandasDtype(values.dtype)",
                            "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype._dtype\n    result = np.asarray(scalars, dtype=dtype)\n    if copy and result is scalars:\n        result = result.copy()\n    return cls(result)",
                            "@classmethod\ndef _from_factorized(cls, values, original):\n    return cls(values)",
                            "@classmethod\ndef _concat_same_type(cls, to_concat):\n    return cls(np.concatenate(to_concat))",
                            "@property\ndef dtype(self):\n    return self._dtype",
                            "def __array__(self, dtype=None):\n    return np.asarray(self._ndarray, dtype=dtype)",
                            "def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n    out = kwargs.get('out', ())\n    for x in inputs + out:\n        if not isinstance(x, self._HANDLED_TYPES + (PandasArray,)):\n            return NotImplemented\n    inputs = tuple((x._ndarray if isinstance(x, PandasArray) else x for x in inputs))\n    if out:\n        kwargs['out'] = tuple((x._ndarray if isinstance(x, PandasArray) else x for x in out))\n    result = getattr(ufunc, method)(*inputs, **kwargs)\n    if type(result) is tuple and len(result):\n        if not lib.is_scalar(result[0]):\n            return tuple((type(self)(x) for x in result))\n        else:\n            return result\n    elif method == 'at':\n        return None\n    else:\n        if not lib.is_scalar(result):\n            result = type(self)(result)\n        return result",
                            "def __getitem__(self, item):\n    if isinstance(item, type(self)):\n        item = item._ndarray\n    result = self._ndarray[item]\n    if not lib.is_scalar(item):\n        result = type(self)(result)\n    return result",
                            "def __setitem__(self, key, value):\n    value = extract_array(value, extract_numpy=True)\n    if not lib.is_scalar(key) and is_list_like(key):\n        key = np.asarray(key)\n    if not lib.is_scalar(value):\n        value = np.asarray(value)\n    values = self._ndarray\n    t = np.result_type(value, values)\n    if t != self._ndarray.dtype:\n        values = values.astype(t, casting='safe')\n        values[key] = value\n        self._dtype = PandasDtype(t)\n        self._ndarray = values\n    else:\n        self._ndarray[key] = value",
                            "def __len__(self) -> int:\n    return len(self._ndarray)",
                            "@property\ndef nbytes(self) -> int:\n    return self._ndarray.nbytes",
                            "def isna(self):\n    return isna(self._ndarray)",
                            "def fillna(self, value=None, method=None, limit=None):\n    (value, method) = validate_fillna_kwargs(value, method)\n    mask = self.isna()\n    if is_array_like(value):\n        if len(value) != len(self):\n            raise ValueError(\"Length of 'value' does not match. Got ({})  expected {}\".format(len(value), len(self)))\n        value = value[mask]\n    if mask.any():\n        if method is not None:\n            func = pad_1d if method == 'pad' else backfill_1d\n            new_values = func(self._ndarray, limit=limit, mask=mask)\n            new_values = self._from_sequence(new_values, dtype=self.dtype)\n        else:\n            new_values = self.copy()\n            new_values[mask] = value\n    else:\n        new_values = self.copy()\n    return new_values",
                            "def take(self, indices, allow_fill=False, fill_value=None):\n    result = take(self._ndarray, indices, allow_fill=allow_fill, fill_value=fill_value)\n    return type(self)(result)",
                            "def copy(self):\n    return type(self)(self._ndarray.copy())",
                            "def _values_for_argsort(self):\n    return self._ndarray",
                            "def _values_for_factorize(self):\n    return (self._ndarray, -1)",
                            "def unique(self):\n    return type(self)(unique(self._ndarray))",
                            "def _reduce(self, name, skipna=True, **kwargs):\n    meth = getattr(self, name, None)\n    if meth:\n        return meth(skipna=skipna, **kwargs)\n    else:\n        msg = \"'{}' does not implement reduction '{}'\"\n        raise TypeError(msg.format(type(self).__name__, name))",
                            "def any(self, axis=None, out=None, keepdims=False, skipna=True):\n    nv.validate_any((), dict(out=out, keepdims=keepdims))\n    return nanops.nanany(self._ndarray, axis=axis, skipna=skipna)",
                            "def all(self, axis=None, out=None, keepdims=False, skipna=True):\n    nv.validate_all((), dict(out=out, keepdims=keepdims))\n    return nanops.nanall(self._ndarray, axis=axis, skipna=skipna)",
                            "def min(self, axis=None, out=None, keepdims=False, skipna=True):\n    nv.validate_min((), dict(out=out, keepdims=keepdims))\n    return nanops.nanmin(self._ndarray, axis=axis, skipna=skipna)",
                            "def max(self, axis=None, out=None, keepdims=False, skipna=True):\n    nv.validate_max((), dict(out=out, keepdims=keepdims))\n    return nanops.nanmax(self._ndarray, axis=axis, skipna=skipna)",
                            "def sum(self, axis=None, dtype=None, out=None, keepdims=False, initial=None, skipna=True, min_count=0):\n    nv.validate_sum((), dict(dtype=dtype, out=out, keepdims=keepdims, initial=initial))\n    return nanops.nansum(self._ndarray, axis=axis, skipna=skipna, min_count=min_count)",
                            "def prod(self, axis=None, dtype=None, out=None, keepdims=False, initial=None, skipna=True, min_count=0):\n    nv.validate_prod((), dict(dtype=dtype, out=out, keepdims=keepdims, initial=initial))\n    return nanops.nanprod(self._ndarray, axis=axis, skipna=skipna, min_count=min_count)",
                            "def mean(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True):\n    nv.validate_mean((), dict(dtype=dtype, out=out, keepdims=keepdims))\n    return nanops.nanmean(self._ndarray, axis=axis, skipna=skipna)",
                            "def median(self, axis=None, out=None, overwrite_input=False, keepdims=False, skipna=True):\n    nv.validate_median((), dict(out=out, overwrite_input=overwrite_input, keepdims=keepdims))\n    return nanops.nanmedian(self._ndarray, axis=axis, skipna=skipna)",
                            "def std(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func((), dict(dtype=dtype, out=out, keepdims=keepdims), fname='std')\n    return nanops.nanstd(self._ndarray, axis=axis, skipna=skipna, ddof=ddof)",
                            "def var(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func((), dict(dtype=dtype, out=out, keepdims=keepdims), fname='var')\n    return nanops.nanvar(self._ndarray, axis=axis, skipna=skipna, ddof=ddof)",
                            "def sem(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func((), dict(dtype=dtype, out=out, keepdims=keepdims), fname='sem')\n    return nanops.nansem(self._ndarray, axis=axis, skipna=skipna, ddof=ddof)",
                            "def kurt(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func((), dict(dtype=dtype, out=out, keepdims=keepdims), fname='kurt')\n    return nanops.nankurt(self._ndarray, axis=axis, skipna=skipna)",
                            "def skew(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func((), dict(dtype=dtype, out=out, keepdims=keepdims), fname='skew')\n    return nanops.nanskew(self._ndarray, axis=axis, skipna=skipna)",
                            "def to_numpy(self, dtype=None, copy=False):\n    \"\"\"\n    Convert the PandasArray to a :class:`numpy.ndarray`.\n\n    By default, this requires no coercion or copying of data.\n\n    Parameters\n    ----------\n    dtype : numpy.dtype\n        The NumPy dtype to pass to :func:`numpy.asarray`.\n    copy : bool, default False\n        Whether to copy the underlying data.\n\n    Returns\n    -------\n    ndarray\n    \"\"\"\n    result = np.asarray(self._ndarray, dtype=dtype)\n    if copy and result is self._ndarray:\n        result = result.copy()\n    return result",
                            "@Appender(ExtensionArray.searchsorted.__doc__)\ndef searchsorted(self, value, side='left', sorter=None):\n    return searchsorted(self.to_numpy(), value, side=side, sorter=sorter)",
                            "def __invert__(self):\n    return type(self)(~self._ndarray)",
                            "@classmethod\ndef _create_arithmetic_method(cls, op):\n\n    def arithmetic_method(self, other):\n        if isinstance(other, (ABCIndexClass, ABCSeries)):\n            return NotImplemented\n        elif isinstance(other, cls):\n            other = other._ndarray\n        with np.errstate(all='ignore'):\n            result = op(self._ndarray, other)\n        if op is divmod:\n            (a, b) = result\n            return (cls(a), cls(b))\n        return cls(result)\n    return compat.set_function_name(arithmetic_method, '__{}__'.format(op.__name__), cls)"
                        ],
                        "constructor_variables": [
                            "self._ndarray = values",
                            "self._dtype = PandasDtype(values.dtype)"
                        ],
                        "class_level_variables": [
                            "_typ = 'npy_extension'",
                            "__array_priority__ = 1000",
                            "_HANDLED_TYPES = (np.ndarray, numbers.Number)",
                            "_create_comparison_method = _create_arithmetic_method"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values, copy=False)",
                            "_from_sequence(cls, scalars, dtype=None, copy=False)",
                            "_from_factorized(cls, values, original)",
                            "_concat_same_type(cls, to_concat)",
                            "dtype(self)",
                            "__array__(self, dtype=None)",
                            "__array_ufunc__(self, ufunc, method, *inputs, **kwargs)",
                            "__getitem__(self, item)",
                            "__setitem__(self, key, value)",
                            "__len__(self) -> int",
                            "nbytes(self) -> int",
                            "isna(self)",
                            "fillna(self, value=None, method=None, limit=None)",
                            "take(self, indices, allow_fill=False, fill_value=None)",
                            "copy(self)",
                            "_values_for_argsort(self)",
                            "_values_for_factorize(self)",
                            "unique(self)",
                            "_reduce(self, name, skipna=True, **kwargs)",
                            "any(self, axis=None, out=None, keepdims=False, skipna=True)",
                            "all(self, axis=None, out=None, keepdims=False, skipna=True)",
                            "min(self, axis=None, out=None, keepdims=False, skipna=True)",
                            "max(self, axis=None, out=None, keepdims=False, skipna=True)",
                            "sum(self, axis=None, dtype=None, out=None, keepdims=False, initial=None, skipna=True, min_count=0)",
                            "prod(self, axis=None, dtype=None, out=None, keepdims=False, initial=None, skipna=True, min_count=0)",
                            "mean(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True)",
                            "median(self, axis=None, out=None, overwrite_input=False, keepdims=False, skipna=True)",
                            "std(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True)",
                            "var(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True)",
                            "sem(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True)",
                            "kurt(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True)",
                            "skew(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True)",
                            "to_numpy(self, dtype=None, copy=False)",
                            "searchsorted(self, value, side='left', sorter=None)",
                            "__invert__(self)",
                            "_create_arithmetic_method(cls, op)"
                        ],
                        "class_level_variable_names": [
                            "_typ",
                            "__array_priority__",
                            "_HANDLED_TYPES",
                            "_create_comparison_method"
                        ],
                        "constructor_variable_names": [
                            "_dtype",
                            "values",
                            "_ndarray"
                        ]
                    },
                    "used_imports": [
                        "import numpy as np",
                        "from pandas._libs import lib",
                        "from pandas.core.dtypes.inference import is_array_like, is_list_like",
                        "from pandas.core.construction import extract_array"
                    ],
                    "variable_values": [
                        [
                            {
                                "value": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "extract_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ndarray": {
                                    "variable_value": "array([1, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<PandasArray>\n[1, 2, 3]\nLength: 3, dtype: int64",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "(3,)"
                                },
                                "t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.result_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ndarray.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._dtype": {
                                    "variable_value": "PandasDtype('int64')",
                                    "variable_type": "PandasDtype",
                                    "variable_shape": null
                                },
                                "PandasDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "value": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "extract_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([b'a', b'2', b'3'], dtype='",
                                    "variable_type": "ndarray",
                                    "variable_shape": "S21')"
                                },
                                "self._ndarray": {
                                    "variable_value": "array([b'a', b'2', b'3'], dtype='",
                                    "variable_type": "ndarray",
                                    "variable_shape": "S21')"
                                },
                                "self": {
                                    "variable_value": "<PandasArray>\n[b'a', b'2', b'3']\nLength: 3, dtype: bytes168",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "(3,)"
                                },
                                "t": {
                                    "variable_value": "dtype('S21')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "np.result_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ndarray.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x7f6cbd046a80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._dtype": {
                                    "variable_value": "PandasDtype('bytes168')",
                                    "variable_type": "PandasDtype",
                                    "variable_shape": null
                                },
                                "PandasDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "value": {
                                    "variable_value": "'t'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "extract_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ndarray.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._ndarray": {
                                    "variable_value": "array(['a', 'b', 'c'], dtype='<U1')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<PandasArray>\n['a', 'b', 'c']\nLength: 3, dtype: str32",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "(3,)"
                                }
                            },
                            {
                                "value": {
                                    "variable_value": "array('t', dtype='<U1')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "()"
                                },
                                "extract_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ndarray.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._ndarray": {
                                    "variable_value": "array(['t', 'b', 'c'], dtype='<U1')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<PandasArray>\n['t', 'b', 'c']\nLength: 3, dtype: str32",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "(3,)"
                                }
                            }
                        ],
                        [
                            {
                                "value": {
                                    "variable_value": "'t'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "extract_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ndarray.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._ndarray": {
                                    "variable_value": "array(['a', 'b', 'c'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<PandasArray>\n['a', 'b', 'c']\nLength: 3, dtype: object",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "(3,)"
                                }
                            },
                            {
                                "value": {
                                    "variable_value": "array('t', dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "()"
                                },
                                "extract_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ndarray.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._ndarray": {
                                    "variable_value": "array([array('t', dtype=object), 'b', 'c'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<PandasArray>\n[array('t', dtype=object), 'b', 'c']\nLength: 3, dtype: object",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "(3,)"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [],
                "file_scope_classes": [
                    {
                        "class_declaration": "class PandasDtype:",
                        "functions": [
                            {
                                "code": "def __init__(self, dtype):\n    dtype = np.dtype(dtype)\n    self._dtype = dtype\n    self._name = dtype.name\n    self._type = dtype.type",
                                "signature": "__init__(self, dtype)"
                            },
                            {
                                "code": "def __repr__(self):\n    return \"PandasDtype({!r})\".format(self.name)",
                                "signature": "__repr__(self)"
                            },
                            {
                                "code": "@property\ndef numpy_dtype(self):\n    \"\"\"The NumPy dtype this PandasDtype wraps.\"\"\"\n    return self._dtype",
                                "signature": "numpy_dtype(self)"
                            },
                            {
                                "code": "@property\ndef name(self):\n    return self._name",
                                "signature": "name(self)"
                            },
                            {
                                "code": "@property\ndef type(self):\n    return self._type",
                                "signature": "type(self)"
                            },
                            {
                                "code": "@property\ndef _is_numeric(self):\n    # exclude object, str, unicode, void.\n    return self.kind in set(\"biufc\")",
                                "signature": "_is_numeric(self)"
                            },
                            {
                                "code": "@property\ndef _is_boolean(self):\n    return self.kind == \"b\"",
                                "signature": "_is_boolean(self)"
                            },
                            {
                                "code": "@classmethod\ndef construct_from_string(cls, string):\n    return cls(np.dtype(string))",
                                "signature": "construct_from_string(cls, string)"
                            },
                            {
                                "code": "def construct_array_type(cls):\n    return PandasArray",
                                "signature": "construct_array_type(cls)"
                            },
                            {
                                "code": "@property\ndef kind(self):\n    return self._dtype.kind",
                                "signature": "kind(self)"
                            },
                            {
                                "code": "@property\ndef itemsize(self):\n    \"\"\"The element size of this data-type object.\"\"\"\n    return self._dtype.itemsize",
                                "signature": "itemsize(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class PandasArray:",
                        "functions": [
                            {
                                "code": "def __init__(self, values, copy=False):\n    if isinstance(values, type(self)):\n        values = values._ndarray\n    if not isinstance(values, np.ndarray):\n        raise ValueError(\n            \"'values' must be a NumPy array, not {typ}\".format(\n                typ=type(values).__name__\n            )\n        )\n\n    if values.ndim != 1:\n        raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n    if copy:\n        values = values.copy()\n\n    self._ndarray = values\n    self._dtype = PandasDtype(values.dtype)",
                                "signature": "__init__(self, values, copy=False)"
                            },
                            {
                                "code": "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype._dtype\n\n    result = np.asarray(scalars, dtype=dtype)\n    if copy and result is scalars:\n        result = result.copy()\n    return cls(result)",
                                "signature": "_from_sequence(cls, scalars, dtype=None, copy=False)"
                            },
                            {
                                "code": "@classmethod\ndef _from_factorized(cls, values, original):\n    return cls(values)",
                                "signature": "_from_factorized(cls, values, original)"
                            },
                            {
                                "code": "@classmethod\ndef _concat_same_type(cls, to_concat):\n    return cls(np.concatenate(to_concat))",
                                "signature": "_concat_same_type(cls, to_concat)"
                            },
                            {
                                "code": "@property\ndef dtype(self):\n    return self._dtype",
                                "signature": "dtype(self)"
                            },
                            {
                                "code": "def __array__(self, dtype=None):\n    return np.asarray(self._ndarray, dtype=dtype)",
                                "signature": "__array__(self, dtype=None)"
                            },
                            {
                                "code": "def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n    # Lightly modified version of\n    # https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/\\\n    # numpy.lib.mixins.NDArrayOperatorsMixin.html\n    # The primary modification is not boxing scalar return values\n    # in PandasArray, since pandas' ExtensionArrays are 1-d.\n    out = kwargs.get(\"out\", ())\n    for x in inputs + out:\n        # Only support operations with instances of _HANDLED_TYPES.\n        # Use PandasArray instead of type(self) for isinstance to\n        # allow subclasses that don't override __array_ufunc__ to\n        # handle PandasArray objects.\n        if not isinstance(x, self._HANDLED_TYPES + (PandasArray,)):\n            return NotImplemented\n\n    # Defer to the implementation of the ufunc on unwrapped values.\n    inputs = tuple(x._ndarray if isinstance(x, PandasArray) else x for x in inputs)\n    if out:\n        kwargs[\"out\"] = tuple(\n            x._ndarray if isinstance(x, PandasArray) else x for x in out\n        )\n    result = getattr(ufunc, method)(*inputs, **kwargs)\n\n    if type(result) is tuple and len(result):\n        # multiple return values\n        if not lib.is_scalar(result[0]):\n            # re-box array-like results\n            return tuple(type(self)(x) for x in result)\n        else:\n            # but not scalar reductions\n            return result\n    elif method == \"at\":\n        # no return value\n        return None\n    else:\n        # one return value\n        if not lib.is_scalar(result):\n            # re-box array-like results, but not scalar reductions\n            result = type(self)(result)\n        return result",
                                "signature": "__array_ufunc__(self, ufunc, method, *inputs, **kwargs)"
                            },
                            {
                                "code": "def __getitem__(self, item):\n    if isinstance(item, type(self)):\n        item = item._ndarray\n\n    result = self._ndarray[item]\n    if not lib.is_scalar(item):\n        result = type(self)(result)\n    return result",
                                "signature": "__getitem__(self, item)"
                            },
                            {
                                "code": "def __setitem__(self, key, value):\n    value = extract_array(value, extract_numpy=True)\n\n    if not lib.is_scalar(key) and is_list_like(key):\n        key = np.asarray(key)\n\n    if not lib.is_scalar(value):\n        value = np.asarray(value)\n\n    values = self._ndarray\n    t = np.result_type(value, values)\n    if t != self._ndarray.dtype:\n        values = values.astype(t, casting=\"safe\")\n        values[key] = value\n        self._dtype = PandasDtype(t)\n        self._ndarray = values\n    else:\n        self._ndarray[key] = value",
                                "signature": "__setitem__(self, key, value)"
                            },
                            {
                                "code": "def __len__(self) -> int:\n    return len(self._ndarray)",
                                "signature": "__len__(self) -> int"
                            },
                            {
                                "code": "@property\ndef nbytes(self) -> int:\n    return self._ndarray.nbytes",
                                "signature": "nbytes(self) -> int"
                            },
                            {
                                "code": "def isna(self):\n    return isna(self._ndarray)",
                                "signature": "isna(self)"
                            },
                            {
                                "code": "def fillna(self, value=None, method=None, limit=None):\n    # TODO(_values_for_fillna): remove this\n    value, method = validate_fillna_kwargs(value, method)\n\n    mask = self.isna()\n\n    if is_array_like(value):\n        if len(value) != len(self):\n            raise ValueError(\n                \"Length of 'value' does not match. Got ({}) \"\n                \" expected {}\".format(len(value), len(self))\n            )\n        value = value[mask]\n\n    if mask.any():\n        if method is not None:\n            func = pad_1d if method == \"pad\" else backfill_1d\n            new_values = func(self._ndarray, limit=limit, mask=mask)\n            new_values = self._from_sequence(new_values, dtype=self.dtype)\n        else:\n            # fill with value\n            new_values = self.copy()\n            new_values[mask] = value\n    else:\n        new_values = self.copy()\n    return new_values",
                                "signature": "fillna(self, value=None, method=None, limit=None)"
                            },
                            {
                                "code": "def take(self, indices, allow_fill=False, fill_value=None):\n    result = take(\n        self._ndarray, indices, allow_fill=allow_fill, fill_value=fill_value\n    )\n    return type(self)(result)",
                                "signature": "take(self, indices, allow_fill=False, fill_value=None)"
                            },
                            {
                                "code": "def copy(self):\n    return type(self)(self._ndarray.copy())",
                                "signature": "copy(self)"
                            },
                            {
                                "code": "def _values_for_argsort(self):\n    return self._ndarray",
                                "signature": "_values_for_argsort(self)"
                            },
                            {
                                "code": "def _values_for_factorize(self):\n    return self._ndarray, -1",
                                "signature": "_values_for_factorize(self)"
                            },
                            {
                                "code": "def unique(self):\n    return type(self)(unique(self._ndarray))",
                                "signature": "unique(self)"
                            },
                            {
                                "code": "def _reduce(self, name, skipna=True, **kwargs):\n    meth = getattr(self, name, None)\n    if meth:\n        return meth(skipna=skipna, **kwargs)\n    else:\n        msg = \"'{}' does not implement reduction '{}'\"\n        raise TypeError(msg.format(type(self).__name__, name))",
                                "signature": "_reduce(self, name, skipna=True, **kwargs)"
                            },
                            {
                                "code": "def any(self, axis=None, out=None, keepdims=False, skipna=True):\n    nv.validate_any((), dict(out=out, keepdims=keepdims))\n    return nanops.nanany(self._ndarray, axis=axis, skipna=skipna)",
                                "signature": "any(self, axis=None, out=None, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def all(self, axis=None, out=None, keepdims=False, skipna=True):\n    nv.validate_all((), dict(out=out, keepdims=keepdims))\n    return nanops.nanall(self._ndarray, axis=axis, skipna=skipna)",
                                "signature": "all(self, axis=None, out=None, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def min(self, axis=None, out=None, keepdims=False, skipna=True):\n    nv.validate_min((), dict(out=out, keepdims=keepdims))\n    return nanops.nanmin(self._ndarray, axis=axis, skipna=skipna)",
                                "signature": "min(self, axis=None, out=None, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def max(self, axis=None, out=None, keepdims=False, skipna=True):\n    nv.validate_max((), dict(out=out, keepdims=keepdims))\n    return nanops.nanmax(self._ndarray, axis=axis, skipna=skipna)",
                                "signature": "max(self, axis=None, out=None, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def sum(\n    self,\n    axis=None,\n    dtype=None,\n    out=None,\n    keepdims=False,\n    initial=None,\n    skipna=True,\n    min_count=0,\n):\n    nv.validate_sum(\n        (), dict(dtype=dtype, out=out, keepdims=keepdims, initial=initial)\n    )\n    return nanops.nansum(\n        self._ndarray, axis=axis, skipna=skipna, min_count=min_count\n    )",
                                "signature": "sum(self, axis=None, dtype=None, out=None, keepdims=False, initial=None, skipna=True, min_count=0)"
                            },
                            {
                                "code": "def prod(\n    self,\n    axis=None,\n    dtype=None,\n    out=None,\n    keepdims=False,\n    initial=None,\n    skipna=True,\n    min_count=0,\n):\n    nv.validate_prod(\n        (), dict(dtype=dtype, out=out, keepdims=keepdims, initial=initial)\n    )\n    return nanops.nanprod(\n        self._ndarray, axis=axis, skipna=skipna, min_count=min_count\n    )",
                                "signature": "prod(self, axis=None, dtype=None, out=None, keepdims=False, initial=None, skipna=True, min_count=0)"
                            },
                            {
                                "code": "def mean(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True):\n    nv.validate_mean((), dict(dtype=dtype, out=out, keepdims=keepdims))\n    return nanops.nanmean(self._ndarray, axis=axis, skipna=skipna)",
                                "signature": "mean(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def median(\n    self, axis=None, out=None, overwrite_input=False, keepdims=False, skipna=True\n):\n    nv.validate_median(\n        (), dict(out=out, overwrite_input=overwrite_input, keepdims=keepdims)\n    )\n    return nanops.nanmedian(self._ndarray, axis=axis, skipna=skipna)",
                                "signature": "median(self, axis=None, out=None, overwrite_input=False, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def std(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func(\n        (), dict(dtype=dtype, out=out, keepdims=keepdims), fname=\"std\"\n    )\n    return nanops.nanstd(self._ndarray, axis=axis, skipna=skipna, ddof=ddof)",
                                "signature": "std(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def var(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func(\n        (), dict(dtype=dtype, out=out, keepdims=keepdims), fname=\"var\"\n    )\n    return nanops.nanvar(self._ndarray, axis=axis, skipna=skipna, ddof=ddof)",
                                "signature": "var(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def sem(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func(\n        (), dict(dtype=dtype, out=out, keepdims=keepdims), fname=\"sem\"\n    )\n    return nanops.nansem(self._ndarray, axis=axis, skipna=skipna, ddof=ddof)",
                                "signature": "sem(self, axis=None, dtype=None, out=None, ddof=1, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def kurt(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func(\n        (), dict(dtype=dtype, out=out, keepdims=keepdims), fname=\"kurt\"\n    )\n    return nanops.nankurt(self._ndarray, axis=axis, skipna=skipna)",
                                "signature": "kurt(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def skew(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True):\n    nv.validate_stat_ddof_func(\n        (), dict(dtype=dtype, out=out, keepdims=keepdims), fname=\"skew\"\n    )\n    return nanops.nanskew(self._ndarray, axis=axis, skipna=skipna)",
                                "signature": "skew(self, axis=None, dtype=None, out=None, keepdims=False, skipna=True)"
                            },
                            {
                                "code": "def to_numpy(self, dtype=None, copy=False):\n    \"\"\"\n    Convert the PandasArray to a :class:`numpy.ndarray`.\n\n    By default, this requires no coercion or copying of data.\n\n    Parameters\n    ----------\n    dtype : numpy.dtype\n        The NumPy dtype to pass to :func:`numpy.asarray`.\n    copy : bool, default False\n        Whether to copy the underlying data.\n\n    Returns\n    -------\n    ndarray\n    \"\"\"\n    result = np.asarray(self._ndarray, dtype=dtype)\n    if copy and result is self._ndarray:\n        result = result.copy()\n\n    return result",
                                "signature": "to_numpy(self, dtype=None, copy=False)"
                            },
                            {
                                "code": "@Appender(ExtensionArray.searchsorted.__doc__)\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    return searchsorted(self.to_numpy(), value, side=side, sorter=sorter)",
                                "signature": "searchsorted(self, value, side='left', sorter=None)"
                            },
                            {
                                "code": "def __invert__(self):\n    return type(self)(~self._ndarray)",
                                "signature": "__invert__(self)"
                            },
                            {
                                "code": "@classmethod\ndef _create_arithmetic_method(cls, op):\n    def arithmetic_method(self, other):\n        if isinstance(other, (ABCIndexClass, ABCSeries)):\n            return NotImplemented\n\n        elif isinstance(other, cls):\n            other = other._ndarray\n\n        with np.errstate(all=\"ignore\"):\n            result = op(self._ndarray, other)\n\n        if op is divmod:\n            a, b = result\n            return cls(a), cls(b)\n\n        return cls(result)\n\n    return compat.set_function_name(\n        arithmetic_method, \"__{}__\".format(op.__name__), cls\n    )",
                                "signature": "_create_arithmetic_method(cls, op)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "ExtensionDtype": [
                    25
                ],
                "_metadata": [
                    39
                ],
                "dtype": [
                    384,
                    358,
                    390,
                    425,
                    42,
                    43,
                    44,
                    45,
                    172,
                    365,
                    396,
                    145,
                    146,
                    402,
                    148,
                    341,
                    378
                ],
                "np.dtype": [
                    42,
                    74
                ],
                "np": [
                    450,
                    233,
                    42,
                    74,
                    172,
                    236,
                    174,
                    239,
                    425,
                    148,
                    127,
                    159
                ],
                "self._dtype": [
                    166,
                    43,
                    141,
                    81,
                    243,
                    53,
                    86
                ],
                "self": [
                    256,
                    386,
                    262,
                    392,
                    265,
                    140,
                    141,
                    268,
                    398,
                    275,
                    276,
                    404,
                    279,
                    282,
                    287,
                    289,
                    292,
                    166,
                    295,
                    425,
                    298,
                    43,
                    44,
                    45,
                    172,
                    301,
                    48,
                    426,
                    433,
                    307,
                    53,
                    439,
                    312,
                    57,
                    188,
                    61,
                    316,
                    320,
                    66,
                    451,
                    324,
                    70,
                    328,
                    203,
                    81,
                    86,
                    214,
                    344,
                    221,
                    253,
                    224,
                    226,
                    361,
                    238,
                    366,
                    240,
                    243,
                    244,
                    246,
                    374,
                    249,
                    380,
                    125
                ],
                "self._name": [
                    57,
                    44
                ],
                "dtype.name": [
                    44
                ],
                "self._type": [
                    61,
                    45
                ],
                "dtype.type": [
                    45
                ],
                "format": [
                    48,
                    129,
                    267,
                    460
                ],
                "self.name": [
                    48
                ],
                "property": [
                    68,
                    164,
                    79,
                    251,
                    50,
                    83,
                    55,
                    59,
                    63
                ],
                "self.kind": [
                    66,
                    70
                ],
                "set": [
                    66
                ],
                "cls": [
                    455,
                    447,
                    74,
                    457,
                    460,
                    151,
                    155,
                    159
                ],
                "string": [
                    74
                ],
                "classmethod": [
                    72,
                    441,
                    143,
                    153,
                    157
                ],
                "PandasArray": [
                    192,
                    195,
                    77,
                    466,
                    467,
                    188
                ],
                "self._dtype.kind": [
                    81
                ],
                "self._dtype.itemsize": [
                    86
                ],
                "ExtensionArray": [
                    89,
                    431
                ],
                "ExtensionOpsMixin": [
                    89
                ],
                "NDArrayOperatorsMixin": [
                    89
                ],
                "_typ": [
                    118
                ],
                "__array_priority__": [
                    119
                ],
                "isinstance": [
                    192,
                    195,
                    447,
                    145,
                    221,
                    444,
                    188,
                    125,
                    127
                ],
                "values": [
                    130,
                    134,
                    138,
                    140,
                    141,
                    238,
                    239,
                    241,
                    242,
                    244,
                    155,
                    125,
                    126,
                    127
                ],
                "type": [
                    289,
                    130,
                    226,
                    292,
                    312,
                    199,
                    203,
                    301,
                    214,
                    439,
                    221,
                    125
                ],
                "values._ndarray": [
                    126
                ],
                "np.ndarray": [
                    174,
                    127
                ],
                "ValueError": [
                    128,
                    266,
                    135
                ],
                "__name__": [
                    312,
                    130
                ],
                "values.ndim": [
                    134
                ],
                "copy": [
                    137,
                    426,
                    149
                ],
                "values.copy": [
                    138
                ],
                "self._ndarray": [
                    256,
                    386,
                    392,
                    140,
                    398,
                    275,
                    404,
                    287,
                    292,
                    295,
                    425,
                    298,
                    426,
                    172,
                    301,
                    439,
                    316,
                    320,
                    451,
                    324,
                    328,
                    344,
                    224,
                    361,
                    238,
                    366,
                    240,
                    244,
                    246,
                    374,
                    249,
                    380,
                    253
                ],
                "PandasDtype": [
                    145,
                    243,
                    141
                ],
                "values.dtype": [
                    141
                ],
                "dtype._dtype": [
                    146
                ],
                "result": [
                    148,
                    149,
                    150,
                    151,
                    286,
                    289,
                    425,
                    426,
                    427,
                    429,
                    451,
                    197,
                    454,
                    199,
                    201,
                    457,
                    203,
                    206,
                    212,
                    214,
                    215,
                    224,
                    226,
                    227
                ],
                "np.asarray": [
                    233,
                    425,
                    172,
                    236,
                    148
                ],
                "scalars": [
                    148,
                    149
                ],
                "result.copy": [
                    427,
                    150
                ],
                "np.concatenate": [
                    159
                ],
                "to_concat": [
                    159
                ],
                "_HANDLED_TYPES": [
                    174
                ],
                "numbers.Number": [
                    174
                ],
                "numbers": [
                    174
                ],
                "out": [
                    384,
                    193,
                    195,
                    323,
                    358,
                    327,
                    390,
                    396,
                    365,
                    402,
                    372,
                    341,
                    182,
                    183,
                    378,
                    315,
                    319
                ],
                "kwargs.get": [
                    182
                ],
                "kwargs": [
                    194,
                    309,
                    197,
                    182
                ],
                "x": [
                    192,
                    195,
                    203,
                    183,
                    188
                ],
                "inputs": [
                    192,
                    197,
                    183
                ],
                "self._HANDLED_TYPES": [
                    188
                ],
                "NotImplemented": [
                    189,
                    445
                ],
                "tuple": [
                    192,
                    194,
                    203,
                    199
                ],
                "x._ndarray": [
                    192,
                    195
                ],
                "getattr": [
                    307,
                    197
                ],
                "ufunc": [
                    197
                ],
                "method": [
                    260,
                    197,
                    207,
                    273,
                    274
                ],
                "len": [
                    249,
                    268,
                    265,
                    199
                ],
                "lib.is_scalar": [
                    225,
                    232,
                    201,
                    235,
                    212
                ],
                "lib": [
                    225,
                    232,
                    201,
                    235,
                    212
                ],
                "item": [
                    224,
                    225,
                    221,
                    222
                ],
                "item._ndarray": [
                    222
                ],
                "value": [
                    260,
                    230,
                    264,
                    265,
                    235,
                    236,
                    268,
                    270,
                    239,
                    433,
                    242,
                    246,
                    280
                ],
                "extract_array": [
                    230
                ],
                "key": [
                    232,
                    233,
                    242,
                    246
                ],
                "is_list_like": [
                    232
                ],
                "t": [
                    240,
                    241,
                    243,
                    239
                ],
                "np.result_type": [
                    239
                ],
                "self._ndarray.dtype": [
                    240
                ],
                "values.astype": [
                    241
                ],
                "int": [
                    248,
                    252
                ],
                "self._ndarray.nbytes": [
                    253
                ],
                "isna": [
                    256
                ],
                "validate_fillna_kwargs": [
                    260
                ],
                "mask": [
                    262,
                    270,
                    272,
                    275,
                    280
                ],
                "self.isna": [
                    262
                ],
                "is_array_like": [
                    264
                ],
                "mask.any": [
                    272
                ],
                "func": [
                    274,
                    275
                ],
                "pad_1d": [
                    274
                ],
                "backfill_1d": [
                    274
                ],
                "new_values": [
                    275,
                    276,
                    279,
                    280,
                    282,
                    283
                ],
                "limit": [
                    275
                ],
                "self._from_sequence": [
                    276
                ],
                "self.dtype": [
                    276
                ],
                "self.copy": [
                    282,
                    279
                ],
                "take": [
                    286
                ],
                "indices": [
                    287
                ],
                "allow_fill": [
                    287
                ],
                "fill_value": [
                    287
                ],
                "self._ndarray.copy": [
                    292
                ],
                "unique": [
                    301
                ],
                "meth": [
                    307,
                    308,
                    309
                ],
                "name": [
                    312,
                    307
                ],
                "skipna": [
                    320,
                    386,
                    324,
                    328,
                    361,
                    392,
                    366,
                    398,
                    404,
                    309,
                    374,
                    344,
                    380,
                    316
                ],
                "msg": [
                    312,
                    311
                ],
                "TypeError": [
                    312
                ],
                "msg.format": [
                    312
                ],
                "nv.validate_any": [
                    315
                ],
                "nv": [
                    323,
                    357,
                    389,
                    327,
                    383,
                    395,
                    365,
                    401,
                    371,
                    340,
                    377,
                    315,
                    319
                ],
                "dict": [
                    384,
                    323,
                    358,
                    327,
                    390,
                    396,
                    365,
                    402,
                    372,
                    341,
                    378,
                    315,
                    319
                ],
                "keepdims": [
                    384,
                    323,
                    358,
                    327,
                    390,
                    396,
                    365,
                    402,
                    372,
                    341,
                    378,
                    315,
                    319
                ],
                "nanops.nanany": [
                    316
                ],
                "nanops": [
                    320,
                    386,
                    324,
                    328,
                    360,
                    392,
                    366,
                    398,
                    404,
                    374,
                    343,
                    380,
                    316
                ],
                "axis": [
                    320,
                    386,
                    324,
                    328,
                    361,
                    392,
                    366,
                    398,
                    404,
                    374,
                    344,
                    380,
                    316
                ],
                "nv.validate_all": [
                    319
                ],
                "nanops.nanall": [
                    320
                ],
                "nv.validate_min": [
                    323
                ],
                "nanops.nanmin": [
                    324
                ],
                "nv.validate_max": [
                    327
                ],
                "nanops.nanmax": [
                    328
                ],
                "nv.validate_sum": [
                    340
                ],
                "initial": [
                    341,
                    358
                ],
                "nanops.nansum": [
                    343
                ],
                "min_count": [
                    344,
                    361
                ],
                "nv.validate_prod": [
                    357
                ],
                "nanops.nanprod": [
                    360
                ],
                "nv.validate_mean": [
                    365
                ],
                "nanops.nanmean": [
                    366
                ],
                "nv.validate_median": [
                    371
                ],
                "overwrite_input": [
                    372
                ],
                "nanops.nanmedian": [
                    374
                ],
                "nv.validate_stat_ddof_func": [
                    389,
                    395,
                    401,
                    377,
                    383
                ],
                "nanops.nanstd": [
                    380
                ],
                "ddof": [
                    392,
                    386,
                    380
                ],
                "nanops.nanvar": [
                    386
                ],
                "nanops.nansem": [
                    392
                ],
                "nanops.nankurt": [
                    398
                ],
                "nanops.nanskew": [
                    404
                ],
                "searchsorted": [
                    433
                ],
                "self.to_numpy": [
                    433
                ],
                "side": [
                    433
                ],
                "sorter": [
                    433
                ],
                "Appender": [
                    431
                ],
                "ExtensionArray.searchsorted.__doc__": [
                    431
                ],
                "ExtensionArray.searchsorted": [
                    431
                ],
                "other": [
                    448,
                    451,
                    444,
                    447
                ],
                "ABCIndexClass": [
                    444
                ],
                "ABCSeries": [
                    444
                ],
                "other._ndarray": [
                    448
                ],
                "np.errstate": [
                    450
                ],
                "op": [
                    451,
                    460,
                    453
                ],
                "divmod": [
                    453
                ],
                "a": [
                    454,
                    455
                ],
                "b": [
                    454,
                    455
                ],
                "compat.set_function_name": [
                    459
                ],
                "compat": [
                    459
                ],
                "arithmetic_method": [
                    460
                ],
                "op.__name__": [
                    460
                ],
                "_create_comparison_method": [
                    463
                ],
                "_create_arithmetic_method": [
                    463
                ],
                "PandasArray._add_arithmetic_ops": [
                    466
                ],
                "PandasArray._add_comparison_ops": [
                    467
                ]
            },
            "filtered_variables_in_file": {
                "ExtensionDtype": [
                    25
                ],
                "_metadata": [
                    39
                ],
                "dtype": [
                    384,
                    358,
                    390,
                    425,
                    42,
                    43,
                    44,
                    45,
                    172,
                    365,
                    396,
                    145,
                    146,
                    402,
                    148,
                    341,
                    378
                ],
                "np.dtype": [
                    42,
                    74
                ],
                "np": [
                    450,
                    233,
                    42,
                    74,
                    172,
                    236,
                    174,
                    239,
                    425,
                    148,
                    127,
                    159
                ],
                "self._dtype": [
                    166,
                    43,
                    141,
                    81,
                    243,
                    53,
                    86
                ],
                "self": [
                    256,
                    386,
                    262,
                    392,
                    265,
                    140,
                    141,
                    268,
                    398,
                    275,
                    276,
                    404,
                    279,
                    282,
                    287,
                    289,
                    292,
                    166,
                    295,
                    425,
                    298,
                    43,
                    44,
                    45,
                    172,
                    301,
                    48,
                    426,
                    433,
                    307,
                    53,
                    439,
                    312,
                    57,
                    188,
                    61,
                    316,
                    320,
                    66,
                    451,
                    324,
                    70,
                    328,
                    203,
                    81,
                    86,
                    214,
                    344,
                    221,
                    253,
                    224,
                    226,
                    361,
                    238,
                    366,
                    240,
                    243,
                    244,
                    246,
                    374,
                    249,
                    380,
                    125
                ],
                "self._name": [
                    57,
                    44
                ],
                "dtype.name": [
                    44
                ],
                "self._type": [
                    61,
                    45
                ],
                "dtype.type": [
                    45
                ],
                "self.name": [
                    48
                ],
                "self.kind": [
                    66,
                    70
                ],
                "cls": [
                    455,
                    447,
                    74,
                    457,
                    460,
                    151,
                    155,
                    159
                ],
                "string": [
                    74
                ],
                "PandasArray": [
                    192,
                    195,
                    77,
                    466,
                    467,
                    188
                ],
                "self._dtype.kind": [
                    81
                ],
                "self._dtype.itemsize": [
                    86
                ],
                "ExtensionArray": [
                    89,
                    431
                ],
                "ExtensionOpsMixin": [
                    89
                ],
                "NDArrayOperatorsMixin": [
                    89
                ],
                "_typ": [
                    118
                ],
                "__array_priority__": [
                    119
                ],
                "values": [
                    130,
                    134,
                    138,
                    140,
                    141,
                    238,
                    239,
                    241,
                    242,
                    244,
                    155,
                    125,
                    126,
                    127
                ],
                "values._ndarray": [
                    126
                ],
                "np.ndarray": [
                    174,
                    127
                ],
                "values.ndim": [
                    134
                ],
                "copy": [
                    137,
                    426,
                    149
                ],
                "values.copy": [
                    138
                ],
                "self._ndarray": [
                    256,
                    386,
                    392,
                    140,
                    398,
                    275,
                    404,
                    287,
                    292,
                    295,
                    425,
                    298,
                    426,
                    172,
                    301,
                    439,
                    316,
                    320,
                    451,
                    324,
                    328,
                    344,
                    224,
                    361,
                    238,
                    366,
                    240,
                    244,
                    246,
                    374,
                    249,
                    380,
                    253
                ],
                "PandasDtype": [
                    145,
                    243,
                    141
                ],
                "values.dtype": [
                    141
                ],
                "dtype._dtype": [
                    146
                ],
                "result": [
                    148,
                    149,
                    150,
                    151,
                    286,
                    289,
                    425,
                    426,
                    427,
                    429,
                    451,
                    197,
                    454,
                    199,
                    201,
                    457,
                    203,
                    206,
                    212,
                    214,
                    215,
                    224,
                    226,
                    227
                ],
                "np.asarray": [
                    233,
                    425,
                    172,
                    236,
                    148
                ],
                "scalars": [
                    148,
                    149
                ],
                "result.copy": [
                    427,
                    150
                ],
                "np.concatenate": [
                    159
                ],
                "to_concat": [
                    159
                ],
                "_HANDLED_TYPES": [
                    174
                ],
                "numbers.Number": [
                    174
                ],
                "numbers": [
                    174
                ],
                "out": [
                    384,
                    193,
                    195,
                    323,
                    358,
                    327,
                    390,
                    396,
                    365,
                    402,
                    372,
                    341,
                    182,
                    183,
                    378,
                    315,
                    319
                ],
                "kwargs.get": [
                    182
                ],
                "kwargs": [
                    194,
                    309,
                    197,
                    182
                ],
                "x": [
                    192,
                    195,
                    203,
                    183,
                    188
                ],
                "inputs": [
                    192,
                    197,
                    183
                ],
                "self._HANDLED_TYPES": [
                    188
                ],
                "x._ndarray": [
                    192,
                    195
                ],
                "ufunc": [
                    197
                ],
                "method": [
                    260,
                    197,
                    207,
                    273,
                    274
                ],
                "lib.is_scalar": [
                    225,
                    232,
                    201,
                    235,
                    212
                ],
                "lib": [
                    225,
                    232,
                    201,
                    235,
                    212
                ],
                "item": [
                    224,
                    225,
                    221,
                    222
                ],
                "item._ndarray": [
                    222
                ],
                "value": [
                    260,
                    230,
                    264,
                    265,
                    235,
                    236,
                    268,
                    270,
                    239,
                    433,
                    242,
                    246,
                    280
                ],
                "extract_array": [
                    230
                ],
                "key": [
                    232,
                    233,
                    242,
                    246
                ],
                "is_list_like": [
                    232
                ],
                "t": [
                    240,
                    241,
                    243,
                    239
                ],
                "np.result_type": [
                    239
                ],
                "self._ndarray.dtype": [
                    240
                ],
                "values.astype": [
                    241
                ],
                "self._ndarray.nbytes": [
                    253
                ],
                "isna": [
                    256
                ],
                "validate_fillna_kwargs": [
                    260
                ],
                "mask": [
                    262,
                    270,
                    272,
                    275,
                    280
                ],
                "self.isna": [
                    262
                ],
                "is_array_like": [
                    264
                ],
                "mask.any": [
                    272
                ],
                "func": [
                    274,
                    275
                ],
                "pad_1d": [
                    274
                ],
                "backfill_1d": [
                    274
                ],
                "new_values": [
                    275,
                    276,
                    279,
                    280,
                    282,
                    283
                ],
                "limit": [
                    275
                ],
                "self._from_sequence": [
                    276
                ],
                "self.dtype": [
                    276
                ],
                "self.copy": [
                    282,
                    279
                ],
                "take": [
                    286
                ],
                "indices": [
                    287
                ],
                "allow_fill": [
                    287
                ],
                "fill_value": [
                    287
                ],
                "self._ndarray.copy": [
                    292
                ],
                "unique": [
                    301
                ],
                "meth": [
                    307,
                    308,
                    309
                ],
                "name": [
                    312,
                    307
                ],
                "skipna": [
                    320,
                    386,
                    324,
                    328,
                    361,
                    392,
                    366,
                    398,
                    404,
                    309,
                    374,
                    344,
                    380,
                    316
                ],
                "msg": [
                    312,
                    311
                ],
                "msg.format": [
                    312
                ],
                "nv.validate_any": [
                    315
                ],
                "nv": [
                    323,
                    357,
                    389,
                    327,
                    383,
                    395,
                    365,
                    401,
                    371,
                    340,
                    377,
                    315,
                    319
                ],
                "keepdims": [
                    384,
                    323,
                    358,
                    327,
                    390,
                    396,
                    365,
                    402,
                    372,
                    341,
                    378,
                    315,
                    319
                ],
                "nanops.nanany": [
                    316
                ],
                "nanops": [
                    320,
                    386,
                    324,
                    328,
                    360,
                    392,
                    366,
                    398,
                    404,
                    374,
                    343,
                    380,
                    316
                ],
                "axis": [
                    320,
                    386,
                    324,
                    328,
                    361,
                    392,
                    366,
                    398,
                    404,
                    374,
                    344,
                    380,
                    316
                ],
                "nv.validate_all": [
                    319
                ],
                "nanops.nanall": [
                    320
                ],
                "nv.validate_min": [
                    323
                ],
                "nanops.nanmin": [
                    324
                ],
                "nv.validate_max": [
                    327
                ],
                "nanops.nanmax": [
                    328
                ],
                "nv.validate_sum": [
                    340
                ],
                "initial": [
                    341,
                    358
                ],
                "nanops.nansum": [
                    343
                ],
                "min_count": [
                    344,
                    361
                ],
                "nv.validate_prod": [
                    357
                ],
                "nanops.nanprod": [
                    360
                ],
                "nv.validate_mean": [
                    365
                ],
                "nanops.nanmean": [
                    366
                ],
                "nv.validate_median": [
                    371
                ],
                "overwrite_input": [
                    372
                ],
                "nanops.nanmedian": [
                    374
                ],
                "nv.validate_stat_ddof_func": [
                    389,
                    395,
                    401,
                    377,
                    383
                ],
                "nanops.nanstd": [
                    380
                ],
                "ddof": [
                    392,
                    386,
                    380
                ],
                "nanops.nanvar": [
                    386
                ],
                "nanops.nansem": [
                    392
                ],
                "nanops.nankurt": [
                    398
                ],
                "nanops.nanskew": [
                    404
                ],
                "searchsorted": [
                    433
                ],
                "self.to_numpy": [
                    433
                ],
                "side": [
                    433
                ],
                "sorter": [
                    433
                ],
                "Appender": [
                    431
                ],
                "ExtensionArray.searchsorted.__doc__": [
                    431
                ],
                "ExtensionArray.searchsorted": [
                    431
                ],
                "other": [
                    448,
                    451,
                    444,
                    447
                ],
                "ABCIndexClass": [
                    444
                ],
                "ABCSeries": [
                    444
                ],
                "other._ndarray": [
                    448
                ],
                "np.errstate": [
                    450
                ],
                "op": [
                    451,
                    460,
                    453
                ],
                "a": [
                    454,
                    455
                ],
                "b": [
                    454,
                    455
                ],
                "compat.set_function_name": [
                    459
                ],
                "compat": [
                    459
                ],
                "arithmetic_method": [
                    460
                ],
                "op.__name__": [
                    460
                ],
                "_create_comparison_method": [
                    463
                ],
                "_create_arithmetic_method": [
                    463
                ],
                "PandasArray._add_arithmetic_ops": [
                    466
                ],
                "PandasArray._add_comparison_ops": [
                    467
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_151/pandas/tests/arrays/test_numpy.py",
                "test_function": "test_setitem_object_typecode",
                "test_function_code": "@pytest.mark.parametrize(\"dtype\", [None, object])\ndef test_setitem_object_typecode(dtype):\n    arr = PandasArray(np.array([\"a\", \"b\", \"c\"], dtype=dtype))\n    arr[0] = \"t\"\n    expected = PandasArray(np.array([\"t\", \"b\", \"c\"], dtype=dtype))\n    tm.assert_extension_array_equal(arr, expected)",
                "test_error": "TypeError: data type \"t\" not understood",
                "full_test_error": "dtype = None\n\n    @pytest.mark.parametrize(\"dtype\", [None, object])\n    def test_setitem_object_typecode(dtype):\n        arr = PandasArray(np.array([\"a\", \"b\", \"c\"], dtype=dtype))\n>       arr[0] = \"t\"\n\npandas/tests/arrays/test_numpy.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/arrays/numpy_.py:239: in __setitem__\n    t = np.result_type(value, values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ('t', array(['a', 'b', 'c'], dtype='<U1')), kwargs = {}\nrelevant_args = ('t', array(['a', 'b', 'c'], dtype='<U1'))\n\n>   ???\nE   TypeError: data type \"t\" not understood\n\n<__array_function__ internals>:5: TypeError",
                "traceback": "pandas/core/arrays/numpy_.py:239: in __setitem__\n    t = np.result_type(value, values)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ('t', array(['a', 'b', 'c'], dtype='<U1')), kwargs = {}\nrelevant_args = ('t', array(['a', 'b', 'c'], dtype='<U1'))\n\n>   ???\nE   TypeError: data type \"t\" not understood\n\n<__array_function__ internals>:5: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('dtype', [None, object])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_151/pandas/tests/arrays/test_numpy.py",
                "test_function": "test_setitem_object_typecode",
                "test_function_code": "@pytest.mark.parametrize(\"dtype\", [None, object])\ndef test_setitem_object_typecode(dtype):\n    arr = PandasArray(np.array([\"a\", \"b\", \"c\"], dtype=dtype))\n    arr[0] = \"t\"\n    expected = PandasArray(np.array([\"t\", \"b\", \"c\"], dtype=dtype))\n    tm.assert_extension_array_equal(arr, expected)",
                "test_error": "TypeError: data type \"t\" not understood",
                "full_test_error": "dtype = <class 'object'>\n\n    @pytest.mark.parametrize(\"dtype\", [None, object])\n    def test_setitem_object_typecode(dtype):\n        arr = PandasArray(np.array([\"a\", \"b\", \"c\"], dtype=dtype))\n>       arr[0] = \"t\"\n\npandas/tests/arrays/test_numpy.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/arrays/numpy_.py:239: in __setitem__\n    t = np.result_type(value, values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ('t', array(['a', 'b', 'c'], dtype=object)), kwargs = {}\nrelevant_args = ('t', array(['a', 'b', 'c'], dtype=object))\n\n>   ???\nE   TypeError: data type \"t\" not understood\n\n<__array_function__ internals>:5: TypeError",
                "traceback": "pandas/core/arrays/numpy_.py:239: in __setitem__\n    t = np.result_type(value, values)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ('t', array(['a', 'b', 'c'], dtype=object)), kwargs = {}\nrelevant_args = ('t', array(['a', 'b', 'c'], dtype=object))\n\n>   ???\nE   TypeError: data type \"t\" not understood\n\n<__array_function__ internals>:5: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('dtype', [None, object])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_151/pandas/tests/arrays/test_numpy.py",
                "test_function": "test_setitem_no_coercion",
                "test_function_code": "def test_setitem_no_coercion():\n    # https://github.com/pandas-dev/pandas/issues/28150\n    arr = PandasArray(np.array([1, 2, 3]))\n    with pytest.raises(ValueError, match=\"int\"):\n        arr[0] = \"a\"",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "def test_setitem_no_coercion():\n        # https://github.com/pandas-dev/pandas/issues/28150\n        arr = PandasArray(np.array([1, 2, 3]))\n        with pytest.raises(ValueError, match=\"int\"):\n>           arr[0] = \"a\"\nE           Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/arrays/test_numpy.py:228: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}