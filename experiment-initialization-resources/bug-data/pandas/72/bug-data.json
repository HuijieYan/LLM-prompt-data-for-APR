{
    "pandas:72": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_72/pandas/core/internals/blocks.py": {
            "buggy_functions": [
                {
                    "function_name": "setitem",
                    "function_code": "def setitem(self, indexer, value):\n    \"\"\"\n    Set the value inplace, returning a a maybe different typed block.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    transpose = self.ndim == 2\n\n    # coerce None values, if appropriate\n    if value is None:\n        if self.is_numeric:\n            value = np.nan\n\n    # coerce if block dtype can store value\n    values = self.values\n    if self._can_hold_element(value):\n        # We only get here for non-Extension Blocks, so _try_coerce_args\n        #  is only relevant for DatetimeBlock and TimedeltaBlock\n        if lib.is_scalar(value):\n            value = convert_scalar(values, value)\n\n    else:\n        # current dtype cannot store value, coerce to common dtype\n        find_dtype = False\n\n        if hasattr(value, \"dtype\"):\n            dtype = value.dtype\n            find_dtype = True\n\n        elif lib.is_scalar(value) and not isna(value):\n            dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n            find_dtype = True\n\n        if find_dtype:\n            dtype = find_common_type([values.dtype, dtype])\n            if not is_dtype_equal(self.dtype, dtype):\n                b = self.astype(dtype)\n                return b.setitem(indexer, value)\n\n    # value must be storeable at this moment\n    if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n        # We need to be careful not to allow through strings that\n        #  can be parsed to EADtypes\n        arr_value = value\n    else:\n        arr_value = np.array(value)\n\n    # cast the values to a type that can hold nan (if necessary)\n    if not self._can_hold_element(value):\n        dtype, _ = maybe_promote(arr_value.dtype)\n        values = values.astype(dtype)\n\n    if transpose:\n        values = values.T\n\n    # length checking\n    check_setitem_lengths(indexer, value, values)\n\n    if is_empty_indexer(indexer, arr_value):\n        # GH#8669 empty indexers\n        pass\n\n    elif is_scalar_indexer(indexer, arr_value):\n        # setting a single element for each dim and with a rhs that could\n        #  be e.g. a list; see GH#6043\n        values[indexer] = value\n\n    # if we are an exact match (ex-broadcasting),\n    # then use the resultant dtype\n    elif (\n        len(arr_value.shape)\n        and arr_value.shape[0] == values.shape[0]\n        and arr_value.size == values.size\n    ):\n        values[indexer] = value\n        try:\n            values = values.astype(arr_value.dtype)\n        except ValueError:\n            pass\n\n    # set\n    else:\n        values[indexer] = value\n\n    if transpose:\n        values = values.T\n    block = self.make_block(values)\n    return block\n",
                    "decorators": [],
                    "docstring": "Set the value inplace, returning a a maybe different typed block.\n\nParameters\n----------\nindexer : tuple, list-like, array-like, slice\n    The subset of self.values to set\nvalue : object\n    The value being set\n\nReturns\n-------\nBlock\n\nNotes\n-----\n`indexer` is a direct slice/positional indexer. `value` must\nbe a compatible shape.",
                    "start_line": 808,
                    "end_line": 909,
                    "variables": {
                        "transpose": [
                            874,
                            828,
                            906
                        ],
                        "self.ndim": [
                            828
                        ],
                        "self": [
                            832,
                            836,
                            837,
                            870,
                            908,
                            857,
                            858,
                            828
                        ],
                        "value": [
                            896,
                            833,
                            865,
                            867,
                            837,
                            870,
                            840,
                            841,
                            904,
                            878,
                            847,
                            848,
                            851,
                            852,
                            887,
                            859,
                            862,
                            831
                        ],
                        "self.is_numeric": [
                            832
                        ],
                        "np.nan": [
                            833
                        ],
                        "np": [
                            833,
                            867
                        ],
                        "values": [
                            896,
                            898,
                            836,
                            872,
                            841,
                            904,
                            875,
                            907,
                            908,
                            878,
                            887,
                            856,
                            893,
                            894
                        ],
                        "self.values": [
                            836
                        ],
                        "self._can_hold_element": [
                            837,
                            870
                        ],
                        "lib.is_scalar": [
                            840,
                            851
                        ],
                        "lib": [
                            840,
                            851
                        ],
                        "convert_scalar": [
                            841
                        ],
                        "find_dtype": [
                            849,
                            853,
                            845,
                            855
                        ],
                        "hasattr": [
                            847
                        ],
                        "dtype": [
                            871,
                            872,
                            848,
                            852,
                            856,
                            857,
                            858
                        ],
                        "value.dtype": [
                            848
                        ],
                        "isna": [
                            851
                        ],
                        "_": [
                            852,
                            871
                        ],
                        "infer_dtype_from_scalar": [
                            852
                        ],
                        "find_common_type": [
                            856
                        ],
                        "values.dtype": [
                            856
                        ],
                        "is_dtype_equal": [
                            857
                        ],
                        "self.dtype": [
                            857
                        ],
                        "b": [
                            858,
                            859
                        ],
                        "self.astype": [
                            858
                        ],
                        "b.setitem": [
                            859
                        ],
                        "indexer": [
                            896,
                            904,
                            878,
                            880,
                            884,
                            887,
                            859
                        ],
                        "is_extension_array_dtype": [
                            862
                        ],
                        "getattr": [
                            862
                        ],
                        "arr_value": [
                            865,
                            898,
                            867,
                            871,
                            880,
                            884,
                            892,
                            893,
                            894
                        ],
                        "np.array": [
                            867
                        ],
                        "maybe_promote": [
                            871
                        ],
                        "arr_value.dtype": [
                            898,
                            871
                        ],
                        "values.astype": [
                            872,
                            898
                        ],
                        "values.T": [
                            875,
                            907
                        ],
                        "check_setitem_lengths": [
                            878
                        ],
                        "is_empty_indexer": [
                            880
                        ],
                        "is_scalar_indexer": [
                            884
                        ],
                        "len": [
                            892
                        ],
                        "arr_value.shape": [
                            892,
                            893
                        ],
                        "values.shape": [
                            893
                        ],
                        "arr_value.size": [
                            894
                        ],
                        "values.size": [
                            894
                        ],
                        "ValueError": [
                            899
                        ],
                        "block": [
                            908,
                            909
                        ],
                        "self.make_block": [
                            908
                        ]
                    },
                    "filtered_variables": {
                        "transpose": [
                            874,
                            828,
                            906
                        ],
                        "self.ndim": [
                            828
                        ],
                        "self": [
                            832,
                            836,
                            837,
                            870,
                            908,
                            857,
                            858,
                            828
                        ],
                        "value": [
                            896,
                            833,
                            865,
                            867,
                            837,
                            870,
                            840,
                            841,
                            904,
                            878,
                            847,
                            848,
                            851,
                            852,
                            887,
                            859,
                            862,
                            831
                        ],
                        "self.is_numeric": [
                            832
                        ],
                        "np.nan": [
                            833
                        ],
                        "np": [
                            833,
                            867
                        ],
                        "values": [
                            896,
                            898,
                            836,
                            872,
                            841,
                            904,
                            875,
                            907,
                            908,
                            878,
                            887,
                            856,
                            893,
                            894
                        ],
                        "self.values": [
                            836
                        ],
                        "self._can_hold_element": [
                            837,
                            870
                        ],
                        "lib.is_scalar": [
                            840,
                            851
                        ],
                        "lib": [
                            840,
                            851
                        ],
                        "convert_scalar": [
                            841
                        ],
                        "find_dtype": [
                            849,
                            853,
                            845,
                            855
                        ],
                        "dtype": [
                            871,
                            872,
                            848,
                            852,
                            856,
                            857,
                            858
                        ],
                        "value.dtype": [
                            848
                        ],
                        "isna": [
                            851
                        ],
                        "_": [
                            852,
                            871
                        ],
                        "infer_dtype_from_scalar": [
                            852
                        ],
                        "find_common_type": [
                            856
                        ],
                        "values.dtype": [
                            856
                        ],
                        "is_dtype_equal": [
                            857
                        ],
                        "self.dtype": [
                            857
                        ],
                        "b": [
                            858,
                            859
                        ],
                        "self.astype": [
                            858
                        ],
                        "b.setitem": [
                            859
                        ],
                        "indexer": [
                            896,
                            904,
                            878,
                            880,
                            884,
                            887,
                            859
                        ],
                        "is_extension_array_dtype": [
                            862
                        ],
                        "arr_value": [
                            865,
                            898,
                            867,
                            871,
                            880,
                            884,
                            892,
                            893,
                            894
                        ],
                        "np.array": [
                            867
                        ],
                        "maybe_promote": [
                            871
                        ],
                        "arr_value.dtype": [
                            898,
                            871
                        ],
                        "values.astype": [
                            872,
                            898
                        ],
                        "values.T": [
                            875,
                            907
                        ],
                        "check_setitem_lengths": [
                            878
                        ],
                        "is_empty_indexer": [
                            880
                        ],
                        "is_scalar_indexer": [
                            884
                        ],
                        "arr_value.shape": [
                            892,
                            893
                        ],
                        "values.shape": [
                            893
                        ],
                        "arr_value.size": [
                            894
                        ],
                        "values.size": [
                            894
                        ],
                        "block": [
                            908,
                            909
                        ],
                        "self.make_block": [
                            908
                        ]
                    },
                    "diff_line_number": 879,
                    "class_data": {
                        "signature": "class Block(PandasObject)",
                        "docstring": "Canonical n-dimensional unit of homogeneous dtype contained in a pandas\ndata structure\n\nIndex-ignorant; let the container take care of that",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, values, placement, ndim=None):\n    self.ndim = self._check_ndim(values, ndim)\n    self.mgr_locs = placement\n    self.values = values\n    if self._validate_ndim and self.ndim and (len(self.mgr_locs) != len(self.values)):\n        raise ValueError(f'Wrong number of items passed {len(self.values)}, placement implies {len(self.mgr_locs)}')",
                            "def _check_ndim(self, values, ndim):\n    \"\"\"\n    ndim inference and validation.\n\n    Infers ndim from 'values' if not provided to __init__.\n    Validates that values.ndim and ndim are consistent if and only if\n    the class variable '_validate_ndim' is True.\n\n    Parameters\n    ----------\n    values : array-like\n    ndim : int or None\n\n    Returns\n    -------\n    ndim : int\n\n    Raises\n    ------\n    ValueError : the number of dimensions do not match\n    \"\"\"\n    if ndim is None:\n        ndim = values.ndim\n    if self._validate_ndim and values.ndim != ndim:\n        raise ValueError(f'Wrong number of dimensions. values.ndim != ndim [{values.ndim} != {ndim}]')\n    return ndim",
                            "@property\ndef _holder(self):\n    \"\"\"The array-like that can hold the underlying values.\n\n    None for 'Block', overridden by subclasses that don't\n    use an ndarray.\n    \"\"\"\n    return None",
                            "@property\ndef _consolidate_key(self):\n    return (self._can_consolidate, self.dtype.name)",
                            "@property\ndef _is_single_block(self):\n    return self.ndim == 1",
                            "@property\ndef is_view(self):\n    \"\"\" return a boolean if I am possibly a view \"\"\"\n    return self.values.base is not None",
                            "@property\ndef is_datelike(self):\n    \"\"\" return True if I am a non-datelike \"\"\"\n    return self.is_datetime or self.is_timedelta",
                            "def is_categorical_astype(self, dtype):\n    \"\"\"\n    validate that we have a astypeable to categorical,\n    returns a boolean if we are a categorical\n    \"\"\"\n    if dtype is Categorical or dtype is CategoricalDtype:\n        raise TypeError(f'invalid type {dtype} for astype')\n    elif is_categorical_dtype(dtype):\n        return True\n    return False",
                            "def external_values(self):\n    \"\"\"\n    The array that Series.values returns (public attribute).\n\n    This has some historical constraints, and is overridden in block\n    subclasses to return the correct array (e.g. period returns\n    object ndarray and datetimetz a datetime64[ns] ndarray instead of\n    proper extension array).\n    \"\"\"\n    return self.values",
                            "def internal_values(self):\n    \"\"\"\n    The array that Series._values returns (internal values).\n    \"\"\"\n    return self.values",
                            "def array_values(self) -> ExtensionArray:\n    \"\"\"\n    The array that Series.array returns. Always an ExtensionArray.\n    \"\"\"\n    return PandasArray(self.values)",
                            "def get_values(self, dtype=None):\n    \"\"\"\n    return an internal format, currently just the ndarray\n    this is often overridden to handle to_dense like operations\n    \"\"\"\n    if is_object_dtype(dtype):\n        return self.values.astype(object)\n    return self.values",
                            "def get_block_values(self, dtype=None):\n    \"\"\"\n    This is used in the JSON C code\n    \"\"\"\n    return self.get_values(dtype=dtype)",
                            "def to_dense(self):\n    return self.values.view()",
                            "@property\ndef fill_value(self):\n    return np.nan",
                            "@property\ndef mgr_locs(self):\n    return self._mgr_locs",
                            "@mgr_locs.setter\ndef mgr_locs(self, new_mgr_locs):\n    if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n        new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n    self._mgr_locs = new_mgr_locs",
                            "@property\ndef array_dtype(self):\n    \"\"\" the dtype to return if I want to construct this block as an\n    array\n    \"\"\"\n    return self.dtype",
                            "def make_block(self, values, placement=None) -> 'Block':\n    \"\"\"\n    Create a new block, with type inference propagate any values that are\n    not specified\n    \"\"\"\n    if placement is None:\n        placement = self.mgr_locs\n    return make_block(values, placement=placement, ndim=self.ndim)",
                            "def make_block_same_class(self, values, placement=None, ndim=None):\n    \"\"\" Wrap given values in a block of same type as self. \"\"\"\n    if placement is None:\n        placement = self.mgr_locs\n    if ndim is None:\n        ndim = self.ndim\n    return make_block(values, placement=placement, ndim=ndim, klass=type(self))",
                            "def __repr__(self) -> str:\n    name = type(self).__name__\n    if self._is_single_block:\n        result = f'{name}: {len(self)} dtype: {self.dtype}'\n    else:\n        shape = ' x '.join((pprint_thing(s) for s in self.shape))\n        result = f'{name}: {pprint_thing(self.mgr_locs.indexer)}, {shape}, dtype: {self.dtype}'\n    return result",
                            "def __len__(self) -> int:\n    return len(self.values)",
                            "def __getstate__(self):\n    return (self.mgr_locs.indexer, self.values)",
                            "def __setstate__(self, state):\n    self.mgr_locs = libinternals.BlockPlacement(state[0])\n    self.values = state[1]\n    self.ndim = self.values.ndim",
                            "def _slice(self, slicer):\n    \"\"\" return a slice of my values \"\"\"\n    return self.values[slicer]",
                            "def getitem_block(self, slicer, new_mgr_locs=None):\n    \"\"\"\n    Perform __getitem__-like, return result as block.\n\n    As of now, only supports slices that preserve dimensionality.\n    \"\"\"\n    if new_mgr_locs is None:\n        if isinstance(slicer, tuple):\n            axis0_slicer = slicer[0]\n        else:\n            axis0_slicer = slicer\n        new_mgr_locs = self.mgr_locs[axis0_slicer]\n    new_values = self._slice(slicer)\n    if self._validate_ndim and new_values.ndim != self.ndim:\n        raise ValueError('Only same dim slicing is allowed')\n    return self.make_block_same_class(new_values, new_mgr_locs)",
                            "@property\ndef shape(self):\n    return self.values.shape",
                            "@property\ndef dtype(self):\n    return self.values.dtype",
                            "@property\ndef ftype(self):\n    if getattr(self.values, '_pandas_ftype', False):\n        dtype = self.dtype.subtype\n    else:\n        dtype = self.dtype\n    return f'{dtype}:{self._ftype}'",
                            "def merge(self, other):\n    return _merge_blocks([self, other])",
                            "def concat_same_type(self, to_concat, placement=None):\n    \"\"\"\n    Concatenate list of single blocks of the same type.\n    \"\"\"\n    values = self._concatenator([blk.values for blk in to_concat], axis=self.ndim - 1)\n    return self.make_block_same_class(values, placement=placement or slice(0, len(values), 1))",
                            "def iget(self, i):\n    return self.values[i]",
                            "def set(self, locs, values):\n    \"\"\"\n    Modify Block in-place with new item value\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.values[locs] = values",
                            "def delete(self, loc):\n    \"\"\"\n    Delete given loc(-s) from block in-place.\n    \"\"\"\n    self.values = np.delete(self.values, loc, 0)\n    self.mgr_locs = self.mgr_locs.delete(loc)",
                            "def apply(self, func, **kwargs) -> List['Block']:\n    \"\"\" apply the function to my values; return a block if we are not\n    one\n    \"\"\"\n    with np.errstate(all='ignore'):\n        result = func(self.values, **kwargs)\n    return self._split_op_result(result)",
                            "def _split_op_result(self, result) -> List['Block']:\n    if is_extension_array_dtype(result) and result.ndim > 1:\n        nbs = []\n        for i, loc in enumerate(self.mgr_locs):\n            vals = result[i]\n            nv = _block_shape(vals, ndim=self.ndim)\n            block = self.make_block(values=nv, placement=[loc])\n            nbs.append(block)\n        return nbs\n    if not isinstance(result, Block):\n        result = self.make_block(values=_block_shape(result, ndim=self.ndim))\n    return [result]",
                            "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    \"\"\" fillna on the block with the value. If we fail, then convert to\n    ObjectBlock and try again\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    mask = isna(self.values)\n    if limit is not None:\n        limit = libalgos._validate_limit(None, limit=limit)\n        mask[mask.cumsum(self.ndim - 1) > limit] = False\n    if not self._can_hold_na:\n        if inplace:\n            return self\n        else:\n            return self.copy()\n    if self._can_hold_element(value):\n        blocks = self.putmask(mask, value, inplace=inplace)\n        return self._maybe_downcast(blocks, downcast)\n    if not mask.any():\n        return self if inplace else self.copy()\n\n    def f(mask, val, idx):\n        block = self.coerce_to_target_dtype(value)\n        if idx is not None:\n            block = block.getitem_block(slice(idx, idx + 1))\n        return block.fillna(value, limit=limit, inplace=inplace, downcast=None)\n    return self.split_and_operate(None, f, inplace)",
                            "def split_and_operate(self, mask, f, inplace: bool):\n    \"\"\"\n    split the block per-column, and apply the callable f\n    per-column, return a new block for each. Handle\n    masking which will not change a block unless needed.\n\n    Parameters\n    ----------\n    mask : 2-d boolean mask\n    f : callable accepting (1d-mask, 1d values, indexer)\n    inplace : boolean\n\n    Returns\n    -------\n    list of blocks\n    \"\"\"\n    if mask is None:\n        mask = np.broadcast_to(True, shape=self.shape)\n    new_values = self.values\n\n    def make_a_block(nv, ref_loc):\n        if isinstance(nv, list):\n            assert len(nv) == 1, nv\n            assert isinstance(nv[0], Block)\n            block = nv[0]\n        else:\n            nv = _block_shape(nv, ndim=self.ndim)\n            block = self.make_block(values=nv, placement=ref_loc)\n        return block\n    if self.ndim == 1:\n        if mask.any():\n            nv = f(mask, new_values, None)\n        else:\n            nv = new_values if inplace else new_values.copy()\n        block = make_a_block(nv, self.mgr_locs)\n        return [block]\n    new_blocks = []\n    for i, ref_loc in enumerate(self.mgr_locs):\n        m = mask[i]\n        v = new_values[i]\n        if m.any():\n            nv = f(m, v, i)\n        else:\n            nv = v if inplace else v.copy()\n        block = make_a_block(nv, [ref_loc])\n        new_blocks.append(block)\n    return new_blocks",
                            "def _maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']:\n    if downcast is None and (self.is_float or self.is_timedelta or self.is_datetime):\n        return blocks\n    return _extend_blocks([b.downcast(downcast) for b in blocks])",
                            "def downcast(self, dtypes=None):\n    \"\"\" try to downcast each item to the dict of dtypes if present \"\"\"\n    if dtypes is False:\n        return self\n    values = self.values\n    if self._is_single_block:\n        if dtypes is None:\n            dtypes = 'infer'\n        nv = maybe_downcast_to_dtype(values, dtypes)\n        return self.make_block(nv)\n    if dtypes is None:\n        return self\n    if not (dtypes == 'infer' or isinstance(dtypes, dict)):\n        raise ValueError(\"downcast must have a dictionary or 'infer' as its argument\")\n    elif dtypes != 'infer':\n        raise AssertionError('dtypes as dict is not supported yet')\n\n    def f(mask, val, idx):\n        val = maybe_downcast_to_dtype(val, dtype='infer')\n        return val\n    return self.split_and_operate(None, f, False)",
                            "def astype(self, dtype, copy: bool=False, errors: str='raise'):\n    \"\"\"\n    Coerce to the new dtype.\n\n    Parameters\n    ----------\n    dtype : str, dtype convertible\n    copy : bool, default False\n        copy if indicated\n    errors : str, {'raise', 'ignore'}, default 'ignore'\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object\n\n    Returns\n    -------\n    Block\n    \"\"\"\n    errors_legal_values = ('raise', 'ignore')\n    if errors not in errors_legal_values:\n        invalid_arg = f\"Expected value of kwarg 'errors' to be one of {list(errors_legal_values)}. Supplied value is '{errors}'\"\n        raise ValueError(invalid_arg)\n    if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n        msg = f\"Expected an instance of {dtype.__name__}, but got the class instead. Try instantiating 'dtype'.\"\n        raise TypeError(msg)\n    if self.is_categorical_astype(dtype):\n        if is_categorical_dtype(self.values):\n            return self.make_block(self.values.astype(dtype, copy=copy))\n        return self.make_block(Categorical(self.values, dtype=dtype))\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(self.dtype, dtype):\n        if copy:\n            return self.copy()\n        return self\n    if self.is_extension:\n        values = self.values.astype(dtype)\n    else:\n        if issubclass(dtype.type, str):\n            if self.is_datelike:\n                values = self.to_native_types()\n            else:\n                values = self.get_values()\n        else:\n            values = self.get_values(dtype=dtype)\n        vals1d = values.ravel()\n        try:\n            values = astype_nansafe(vals1d, dtype, copy=True)\n        except (ValueError, TypeError):\n            if errors == 'raise':\n                raise\n            newb = self.copy() if copy else self\n            return newb\n    if isinstance(values, np.ndarray):\n        values = values.reshape(self.shape)\n    newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n    if newb.is_numeric and self.is_numeric:\n        if newb.shape != self.shape:\n            raise TypeError(f'cannot set astype for copy = [{copy}] for dtype ({self.dtype.name} [{self.shape}]) to different shape ({newb.dtype.name} [{newb.shape}])')\n    return newb",
                            "def convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False):\n    \"\"\" attempt to coerce any object types to better types return a copy\n    of the block (if copy = True) by definition we are not an ObjectBlock\n    here!\n    \"\"\"\n    return self.copy() if copy else self",
                            "def _can_hold_element(self, element: Any) -> bool:\n    \"\"\" require the same dtype as ourselves \"\"\"\n    dtype = self.values.dtype.type\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, dtype)\n    return isinstance(element, dtype)",
                            "def to_native_types(self, slicer=None, na_rep='nan', quoting=None, **kwargs):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n    values = self.get_values()\n    if slicer is not None:\n        values = values[:, slicer]\n    mask = isna(values)\n    itemsize = writers.word_len(na_rep)\n    if not self.is_object and (not quoting) and itemsize:\n        values = values.astype(f'<U{itemsize}')\n    else:\n        values = np.array(values, dtype='object')\n    values[mask] = na_rep\n    return values",
                            "def copy(self, deep=True):\n    \"\"\" copy constructor \"\"\"\n    values = self.values\n    if deep:\n        values = values.copy()\n    return self.make_block_same_class(values, ndim=self.ndim)",
                            "def replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True):\n    \"\"\"replace the to_replace value with value, possible to create new\n    blocks here this is just a call to putmask. regex is not used here.\n    It is used in ObjectBlocks.  It is here for API compatibility.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    original_to_replace = to_replace\n    if not self._can_hold_element(to_replace):\n        if not isinstance(to_replace, list):\n            if inplace:\n                return [self]\n            return [self.copy()]\n        to_replace = [x for x in to_replace if self._can_hold_element(x)]\n        if not len(to_replace):\n            if inplace:\n                return [self]\n            return [self.copy()]\n        if len(to_replace) == 1:\n            return self.replace(to_replace[0], value, inplace=inplace, filter=filter, regex=regex, convert=convert)\n        if is_object_dtype(self):\n            raise AssertionError\n        block = self.astype(object)\n        return block.replace(to_replace=to_replace, value=value, inplace=inplace, filter=filter, regex=regex, convert=convert)\n    values = self.values\n    if lib.is_scalar(to_replace) and isinstance(values, np.ndarray):\n        to_replace = convert_scalar(values, to_replace)\n    mask = missing.mask_missing(values, to_replace)\n    if filter is not None:\n        filtered_out = ~self.mgr_locs.isin(filter)\n        mask[filtered_out.nonzero()[0]] = False\n    if not mask.any():\n        if inplace:\n            return [self]\n        return [self.copy()]\n    try:\n        blocks = self.putmask(mask, value, inplace=inplace)\n    except (TypeError, ValueError):\n        if is_object_dtype(self):\n            raise\n        assert not self._can_hold_element(value), value\n        block = self.astype(object)\n        return block.replace(to_replace=original_to_replace, value=value, inplace=inplace, filter=filter, regex=regex, convert=convert)\n    if convert:\n        blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n    return blocks",
                            "def _replace_single(self, *args, **kwargs):\n    \"\"\" no-op on a non-ObjectBlock \"\"\"\n    return self if kwargs['inplace'] else self.copy()",
                            "def setitem(self, indexer, value):\n    \"\"\"\n    Set the value inplace, returning a a maybe different typed block.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    transpose = self.ndim == 2\n    if value is None:\n        if self.is_numeric:\n            value = np.nan\n    values = self.values\n    if self._can_hold_element(value):\n        if lib.is_scalar(value):\n            value = convert_scalar(values, value)\n    else:\n        find_dtype = False\n        if hasattr(value, 'dtype'):\n            dtype = value.dtype\n            find_dtype = True\n        elif lib.is_scalar(value) and (not isna(value)):\n            dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n            find_dtype = True\n        if find_dtype:\n            dtype = find_common_type([values.dtype, dtype])\n            if not is_dtype_equal(self.dtype, dtype):\n                b = self.astype(dtype)\n                return b.setitem(indexer, value)\n    if is_extension_array_dtype(getattr(value, 'dtype', None)):\n        arr_value = value\n    else:\n        arr_value = np.array(value)\n    if not self._can_hold_element(value):\n        dtype, _ = maybe_promote(arr_value.dtype)\n        values = values.astype(dtype)\n    if transpose:\n        values = values.T\n    check_setitem_lengths(indexer, value, values)\n    if is_empty_indexer(indexer, arr_value):\n        pass\n    elif is_scalar_indexer(indexer, arr_value):\n        values[indexer] = value\n    elif len(arr_value.shape) and arr_value.shape[0] == values.shape[0] and (arr_value.size == values.size):\n        values[indexer] = value\n        try:\n            values = values.astype(arr_value.dtype)\n        except ValueError:\n            pass\n    else:\n        values[indexer] = value\n    if transpose:\n        values = values.T\n    block = self.make_block(values)\n    return block",
                            "def putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False):\n    \"\"\" putmask the data to the block; it is possible that we may create a\n    new dtype of block\n\n    return the resulting block(s)\n\n    Parameters\n    ----------\n    mask  : the condition to respect\n    new : a ndarray/object\n    align : boolean, perform alignment on other/cond, default is True\n    inplace : perform inplace modification, default is False\n    axis : int\n    transpose : boolean\n        Set to True if self is stored with axes reversed\n\n    Returns\n    -------\n    a list of new blocks, the result of the putmask\n    \"\"\"\n    new_values = self.values if inplace else self.values.copy()\n    new = getattr(new, 'values', new)\n    mask = getattr(mask, 'values', mask)\n    if not is_list_like(new) and isna(new) and (not self.is_object):\n        new = self.fill_value\n    if self._can_hold_element(new):\n        if lib.is_scalar(new):\n            new = convert_scalar(new_values, new)\n        if transpose:\n            new_values = new_values.T\n        if getattr(new, 'ndim', 0) >= 1:\n            if self.ndim - 1 == new.ndim and axis == 1:\n                new = np.repeat(new, new_values.shape[-1]).reshape(self.shape)\n            new = new.astype(new_values.dtype)\n        if is_list_like(new) and np.any(mask[mask]) and (getattr(new, 'ndim', 1) == 1):\n            if mask[mask].shape[-1] == len(new):\n                np.place(new_values, mask, new)\n            elif mask.shape[-1] == len(new) or len(new) == 1:\n                np.putmask(new_values, mask, new)\n            else:\n                raise ValueError('cannot assign mismatch length to masked array')\n        else:\n            np.putmask(new_values, mask, new)\n    elif mask.any():\n        if transpose:\n            mask = mask.T\n            if isinstance(new, np.ndarray):\n                new = new.T\n            axis = new_values.ndim - axis - 1\n        if getattr(new, 'ndim', 0) >= 1:\n            if self.ndim - 1 == new.ndim:\n                new_shape = list(new.shape)\n                new_shape.insert(axis, 1)\n                new = new.reshape(tuple(new_shape))\n\n        def f(mask, val, idx):\n            if idx is None:\n                n = new\n            else:\n                if isinstance(new, np.ndarray):\n                    n = np.squeeze(new[idx % new.shape[0]])\n                else:\n                    n = np.array(new)\n                dtype, _ = maybe_promote(n.dtype)\n                n = n.astype(dtype)\n            nv = _putmask_smart(val, mask, n)\n            return nv\n        new_blocks = self.split_and_operate(mask, f, inplace)\n        return new_blocks\n    if inplace:\n        return [self]\n    if transpose:\n        new_values = new_values.T\n    return [self.make_block(new_values)]",
                            "def coerce_to_target_dtype(self, other):\n    \"\"\"\n    coerce the current block to a dtype compat for other\n    we will return a block, possibly object, and not raise\n\n    we can also safely try to coerce to the same dtype\n    and will receive the same block\n    \"\"\"\n    dtype, _ = infer_dtype_from(other, pandas_dtype=True)\n    if is_dtype_equal(self.dtype, dtype):\n        return self\n    if self.is_bool or is_object_dtype(dtype) or is_bool_dtype(dtype):\n        return self.astype(object)\n    elif (self.is_float or self.is_complex) and (is_integer_dtype(dtype) or is_float_dtype(dtype)):\n        return self\n    elif self.is_datetime or is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype):\n        if not ((is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype)) and self.is_datetime):\n            return self.astype(object)\n        mytz = getattr(self.dtype, 'tz', None)\n        othertz = getattr(dtype, 'tz', None)\n        if not tz_compare(mytz, othertz):\n            return self.astype(object)\n        raise AssertionError(f'possible recursion in coerce_to_target_dtype: {self} {other}')\n    elif self.is_timedelta or is_timedelta64_dtype(dtype):\n        if not (is_timedelta64_dtype(dtype) and self.is_timedelta):\n            return self.astype(object)\n        raise AssertionError(f'possible recursion in coerce_to_target_dtype: {self} {other}')\n    try:\n        return self.astype(dtype)\n    except (ValueError, TypeError, OverflowError):\n        return self.astype(object)",
                            "def interpolate(self, method='pad', axis=0, index=None, values=None, inplace=False, limit=None, limit_direction='forward', limit_area=None, fill_value=None, coerce=False, downcast=None, **kwargs):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n\n    def check_int_bool(self, inplace):\n        if (self.is_bool or self.is_integer) and (not self.is_timedelta):\n            if inplace:\n                return self\n            else:\n                return self.copy()\n    try:\n        m = missing.clean_fill_method(method)\n    except ValueError:\n        m = None\n    if m is not None:\n        r = check_int_bool(self, inplace)\n        if r is not None:\n            return r\n        return self._interpolate_with_fill(method=m, axis=axis, inplace=inplace, limit=limit, fill_value=fill_value, coerce=coerce, downcast=downcast)\n    m = missing.clean_interp_method(method, **kwargs)\n    r = check_int_bool(self, inplace)\n    if r is not None:\n        return r\n    return self._interpolate(method=m, index=index, values=values, axis=axis, limit=limit, limit_direction=limit_direction, limit_area=limit_area, fill_value=fill_value, inplace=inplace, downcast=downcast, **kwargs)",
                            "def _interpolate_with_fill(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, coerce=False, downcast=None):\n    \"\"\" fillna but using the interpolate machinery \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if coerce:\n        if not self._can_hold_na:\n            if inplace:\n                return [self]\n            else:\n                return [self.copy()]\n    values = self.values if inplace else self.values.copy()\n    fill_value = convert_scalar(self.values, fill_value)\n    values = missing.interpolate_2d(values, method=method, axis=axis, limit=limit, fill_value=fill_value, dtype=self.dtype)\n    blocks = [self.make_block_same_class(values, ndim=self.ndim)]\n    return self._maybe_downcast(blocks, downcast)",
                            "def _interpolate(self, method=None, index=None, values=None, fill_value=None, axis=0, limit=None, limit_direction='forward', limit_area=None, inplace=False, downcast=None, **kwargs):\n    \"\"\" interpolate using scipy wrappers \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    data = self.values if inplace else self.values.copy()\n    if not self.is_float:\n        if not self.is_integer:\n            return self\n        data = data.astype(np.float64)\n    if fill_value is None:\n        fill_value = self.fill_value\n    if method in ('krogh', 'piecewise_polynomial', 'pchip'):\n        if not index.is_monotonic:\n            raise ValueError(f'{method} interpolation requires that the index be monotonic.')\n\n    def func(x):\n        return missing.interpolate_1d(index, x, method=method, limit=limit, limit_direction=limit_direction, limit_area=limit_area, fill_value=fill_value, bounds_error=False, **kwargs)\n    interp_values = np.apply_along_axis(func, axis, data)\n    blocks = [self.make_block_same_class(interp_values)]\n    return self._maybe_downcast(blocks, downcast)",
                            "def take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None):\n    \"\"\"\n    Take values according to indexer and return them as a block.bb\n\n    \"\"\"\n    values = self.values\n    if fill_tuple is None:\n        fill_value = self.fill_value\n        allow_fill = False\n    else:\n        fill_value = fill_tuple[0]\n        allow_fill = True\n    new_values = algos.take_nd(values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value)\n    assert not (axis == 0 and new_mgr_locs is None)\n    if new_mgr_locs is None:\n        new_mgr_locs = self.mgr_locs\n    if not is_dtype_equal(new_values.dtype, self.dtype):\n        return self.make_block(new_values, new_mgr_locs)\n    else:\n        return self.make_block_same_class(new_values, new_mgr_locs)",
                            "def diff(self, n: int, axis: int=1) -> List['Block']:\n    \"\"\" return block for the diff of the values \"\"\"\n    new_values = algos.diff(self.values, n, axis=axis, stacklevel=7)\n    new_values = _block_shape(new_values, ndim=self.ndim)\n    return [self.make_block(values=new_values)]",
                            "def shift(self, periods, axis=0, fill_value=None):\n    \"\"\" shift the block by periods, possibly upcast \"\"\"\n    new_values, fill_value = maybe_upcast(self.values, fill_value)\n    f_ordered = new_values.flags.f_contiguous\n    if f_ordered:\n        new_values = new_values.T\n        axis = new_values.ndim - axis - 1\n    if np.prod(new_values.shape):\n        new_values = np.roll(new_values, ensure_platform_int(periods), axis=axis)\n    axis_indexer = [slice(None)] * self.ndim\n    if periods > 0:\n        axis_indexer[axis] = slice(None, periods)\n    else:\n        axis_indexer[axis] = slice(periods, None)\n    new_values[tuple(axis_indexer)] = fill_value\n    if f_ordered:\n        new_values = new_values.T\n    return [self.make_block(new_values)]",
                            "def where(self, other, cond, align=True, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']:\n    \"\"\"\n    evaluate the block; return result block(s) from the result\n\n    Parameters\n    ----------\n    other : a ndarray/object\n    cond  : the condition to respect\n    align : boolean, perform alignment on other/cond\n    errors : str, {'raise', 'ignore'}, default 'raise'\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object\n    axis : int\n\n    Returns\n    -------\n    a new block(s), the result of the func\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n    assert errors in ['raise', 'ignore']\n    transpose = self.ndim == 2\n    values = self.values\n    orig_other = other\n    if transpose:\n        values = values.T\n    other = getattr(other, '_values', getattr(other, 'values', other))\n    cond = getattr(cond, 'values', cond)\n    if getattr(other, 'ndim', 0) >= 1:\n        if values.ndim - 1 == other.ndim and axis == 1:\n            other = other.reshape(tuple(other.shape + (1,)))\n        elif transpose and values.ndim == self.ndim - 1:\n            cond = cond.T\n    if not hasattr(cond, 'shape'):\n        raise ValueError('where must have a condition that is ndarray like')\n\n    def func(cond, values, other):\n        if not ((self.is_integer or self.is_bool) and lib.is_float(other) and np.isnan(other)):\n            if not self._can_hold_element(other):\n                raise TypeError\n            if lib.is_scalar(other) and isinstance(values, np.ndarray):\n                other = convert_scalar(values, other)\n        fastres = expressions.where(cond, values, other)\n        return fastres\n    if cond.ravel().all():\n        result = values\n    else:\n        try:\n            result = func(cond, values, other)\n        except TypeError:\n            block = self.coerce_to_target_dtype(other)\n            blocks = block.where(orig_other, cond, align=align, errors=errors, try_cast=try_cast, axis=axis)\n            return self._maybe_downcast(blocks, 'infer')\n    if self._can_hold_na or self.ndim == 1:\n        if transpose:\n            result = result.T\n        return [self.make_block(result)]\n    axis = cond.ndim - 1\n    cond = cond.swapaxes(axis, 0)\n    mask = np.array([cond[i].all() for i in range(cond.shape[0])], dtype=bool)\n    result_blocks = []\n    for m in [mask, ~mask]:\n        if m.any():\n            taken = result.take(m.nonzero()[0], axis=axis)\n            r = maybe_downcast_numeric(taken, self.dtype)\n            nb = self.make_block(r.T, placement=self.mgr_locs[m])\n            result_blocks.append(nb)\n    return result_blocks",
                            "def equals(self, other) -> bool:\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    return array_equivalent(self.values, other.values)",
                            "def _unstack(self, unstacker_func, new_columns, n_rows, fill_value):\n    \"\"\"Return a list of unstacked blocks of self\n\n    Parameters\n    ----------\n    unstacker_func : callable\n        Partially applied unstacker.\n    new_columns : Index\n        All columns of the unstacked BlockManager.\n    n_rows : int\n        Only used in ExtensionBlock._unstack\n    fill_value : int\n        Only used in ExtensionBlock._unstack\n\n    Returns\n    -------\n    blocks : list of Block\n        New blocks of unstacked values.\n    mask : array_like of bool\n        The mask of columns of `blocks` we should keep.\n    \"\"\"\n    unstacker = unstacker_func(self.values.T)\n    new_items = unstacker.get_new_columns()\n    new_placement = new_columns.get_indexer(new_items)\n    new_values, mask = unstacker.get_new_values()\n    mask = mask.any(0)\n    new_values = new_values.T[mask]\n    new_placement = new_placement[mask]\n    blocks = [make_block(new_values, placement=new_placement)]\n    return (blocks, mask)",
                            "def quantile(self, qs, interpolation='linear', axis=0):\n    \"\"\"\n    compute the quantiles of the\n\n    Parameters\n    ----------\n    qs: a scalar or list of the quantiles to be computed\n    interpolation: type of interpolation, default 'linear'\n    axis: axis to compute, default 0\n\n    Returns\n    -------\n    Block\n    \"\"\"\n    assert self.ndim == 2\n    values = self.get_values()\n    is_empty = values.shape[axis] == 0\n    orig_scalar = not is_list_like(qs)\n    if orig_scalar:\n        qs = [qs]\n    if is_empty:\n        result = np.repeat(np.array([self.fill_value] * len(qs)), len(values)).reshape(len(values), len(qs))\n    else:\n        mask = np.asarray(isna(values))\n        result = nanpercentile(values, np.array(qs) * 100, axis=axis, na_value=self.fill_value, mask=mask, ndim=values.ndim, interpolation=interpolation)\n        result = np.array(result, copy=False)\n        result = result.T\n    if orig_scalar and (not lib.is_scalar(result)):\n        assert result.shape[-1] == 1, result.shape\n        result = result[..., 0]\n        result = lib.item_from_zerodim(result)\n    ndim = np.ndim(result)\n    return make_block(result, placement=np.arange(len(result)), ndim=ndim)",
                            "def _replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None):\n    \"\"\"\n    Replace value corresponding to the given boolean array with another\n    value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    A new block if there is anything to replace or the original block.\n    \"\"\"\n    if mask.any():\n        if not regex:\n            self = self.coerce_to_target_dtype(value)\n            return self.putmask(mask, value, inplace=inplace)\n        else:\n            return self._replace_single(to_replace, value, inplace=inplace, regex=regex, convert=convert, mask=mask)\n    return self",
                            "def f(mask, val, idx):\n    block = self.coerce_to_target_dtype(value)\n    if idx is not None:\n        block = block.getitem_block(slice(idx, idx + 1))\n    return block.fillna(value, limit=limit, inplace=inplace, downcast=None)",
                            "def make_a_block(nv, ref_loc):\n    if isinstance(nv, list):\n        assert len(nv) == 1, nv\n        assert isinstance(nv[0], Block)\n        block = nv[0]\n    else:\n        nv = _block_shape(nv, ndim=self.ndim)\n        block = self.make_block(values=nv, placement=ref_loc)\n    return block",
                            "def f(mask, val, idx):\n    val = maybe_downcast_to_dtype(val, dtype='infer')\n    return val",
                            "def check_int_bool(self, inplace):\n    if (self.is_bool or self.is_integer) and (not self.is_timedelta):\n        if inplace:\n            return self\n        else:\n            return self.copy()",
                            "def func(x):\n    return missing.interpolate_1d(index, x, method=method, limit=limit, limit_direction=limit_direction, limit_area=limit_area, fill_value=fill_value, bounds_error=False, **kwargs)",
                            "def func(cond, values, other):\n    if not ((self.is_integer or self.is_bool) and lib.is_float(other) and np.isnan(other)):\n        if not self._can_hold_element(other):\n            raise TypeError\n        if lib.is_scalar(other) and isinstance(values, np.ndarray):\n            other = convert_scalar(values, other)\n    fastres = expressions.where(cond, values, other)\n    return fastres",
                            "def f(mask, val, idx):\n    if idx is None:\n        n = new\n    else:\n        if isinstance(new, np.ndarray):\n            n = np.squeeze(new[idx % new.shape[0]])\n        else:\n            n = np.array(new)\n        dtype, _ = maybe_promote(n.dtype)\n        n = n.astype(dtype)\n    nv = _putmask_smart(val, mask, n)\n    return nv"
                        ],
                        "constructor_variables": [
                            "mgr_locs",
                            "values",
                            "ndim"
                        ],
                        "class_level_variables": [
                            "__slots__",
                            "is_numeric",
                            "is_float",
                            "is_integer",
                            "is_complex",
                            "is_datetime",
                            "is_datetimetz",
                            "is_timedelta",
                            "is_bool",
                            "is_object",
                            "is_categorical",
                            "is_extension",
                            "_can_hold_na",
                            "_can_consolidate",
                            "_verify_integrity",
                            "_validate_ndim",
                            "_ftype",
                            "_concatenator"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values, placement, ndim=None)",
                            "_check_ndim(self, values, ndim)",
                            "_holder(self)",
                            "_consolidate_key(self)",
                            "_is_single_block(self)",
                            "is_view(self)",
                            "is_datelike(self)",
                            "is_categorical_astype(self, dtype)",
                            "external_values(self)",
                            "internal_values(self)",
                            "array_values(self) -> ExtensionArray",
                            "get_values(self, dtype=None)",
                            "get_block_values(self, dtype=None)",
                            "to_dense(self)",
                            "fill_value(self)",
                            "mgr_locs(self)",
                            "mgr_locs(self, new_mgr_locs)",
                            "array_dtype(self)",
                            "make_block(self, values, placement=None) -> 'Block'",
                            "make_block_same_class(self, values, placement=None, ndim=None)",
                            "__repr__(self) -> str",
                            "__len__(self) -> int",
                            "__getstate__(self)",
                            "__setstate__(self, state)",
                            "_slice(self, slicer)",
                            "getitem_block(self, slicer, new_mgr_locs=None)",
                            "shape(self)",
                            "dtype(self)",
                            "ftype(self)",
                            "merge(self, other)",
                            "concat_same_type(self, to_concat, placement=None)",
                            "iget(self, i)",
                            "set(self, locs, values)",
                            "delete(self, loc)",
                            "apply(self, func, **kwargs) -> List['Block']",
                            "_split_op_result(self, result) -> List['Block']",
                            "fillna(self, value, limit=None, inplace=False, downcast=None)",
                            "split_and_operate(self, mask, f, inplace: bool)",
                            "_maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']",
                            "downcast(self, dtypes=None)",
                            "astype(self, dtype, copy: bool=False, errors: str='raise')",
                            "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
                            "_can_hold_element(self, element: Any) -> bool",
                            "to_native_types(self, slicer=None, na_rep='nan', quoting=None, **kwargs)",
                            "copy(self, deep=True)",
                            "replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
                            "_replace_single(self, *args, **kwargs)",
                            "setitem(self, indexer, value)",
                            "putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False)",
                            "coerce_to_target_dtype(self, other)",
                            "interpolate(self, method='pad', axis=0, index=None, values=None, inplace=False, limit=None, limit_direction='forward', limit_area=None, fill_value=None, coerce=False, downcast=None, **kwargs)",
                            "_interpolate_with_fill(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, coerce=False, downcast=None)",
                            "_interpolate(self, method=None, index=None, values=None, fill_value=None, axis=0, limit=None, limit_direction='forward', limit_area=None, inplace=False, downcast=None, **kwargs)",
                            "take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None)",
                            "diff(self, n: int, axis: int=1) -> List['Block']",
                            "shift(self, periods, axis=0, fill_value=None)",
                            "where(self, other, cond, align=True, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']",
                            "equals(self, other) -> bool",
                            "_unstack(self, unstacker_func, new_columns, n_rows, fill_value)",
                            "quantile(self, qs, interpolation='linear', axis=0)",
                            "_replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None)",
                            "f(mask, val, idx)",
                            "make_a_block(nv, ref_loc)",
                            "f(mask, val, idx)",
                            "check_int_bool(self, inplace)",
                            "func(x)",
                            "func(cond, values, other)",
                            "f(mask, val, idx)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: 1 dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "(1,)"
                                },
                                "value": {
                                    "variable_value": "[a]\nCategories (3, object): [a, b, c]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(1,)"
                                },
                                "self.is_numeric": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array(['a'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self._can_hold_element": {
                                    "variable_value": "<bound method ObjectBlock._can_hold_element of ObjectBlock: 1 dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "infer_dtype_from_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_common_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.astype": {
                                    "variable_value": "<bound method Block.astype of ObjectBlock: 1 dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.setitem": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": "slice(None, None, None)",
                                    "variable_type": "slice",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_promote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_setitem_lengths": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_empty_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ObjectBlock: 1 dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: 1 dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "(1,)"
                                },
                                "value": {
                                    "variable_value": "[a]\nCategories (3, object): [a, b, c]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(1,)"
                                },
                                "self.is_numeric": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array(['a'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self._can_hold_element": {
                                    "variable_value": "<bound method ObjectBlock._can_hold_element of ObjectBlock: 1 dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "infer_dtype_from_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_common_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.astype": {
                                    "variable_value": "<bound method Block.astype of ObjectBlock: 1 dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.setitem": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": "slice(None, None, None)",
                                    "variable_type": "slice",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_promote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_setitem_lengths": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exact_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_empty_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ObjectBlock: 1 dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "transpose": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: 1 dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "(1,)"
                                },
                                "value": {
                                    "variable_value": "[a]\nCategories (3, object): [a, b, c]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(1,)"
                                },
                                "self.is_numeric": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array(['a'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self.values": {
                                    "variable_value": "array(['a'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self._can_hold_element": {
                                    "variable_value": "<bound method ObjectBlock._can_hold_element of ObjectBlock: 1 dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "infer_dtype_from_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_common_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.astype": {
                                    "variable_value": "<bound method Block.astype of ObjectBlock: 1 dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.setitem": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": "slice(None, None, None)",
                                    "variable_type": "slice",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value": {
                                    "variable_value": "[a]\nCategories (3, object): [a, b, c]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(1,)"
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_promote": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_value.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "values.astype": {
                                    "variable_value": "<built-in method astype of numpy.ndarray object at 0x11cd62030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "values.T": {
                                    "variable_value": "array(['a'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "check_setitem_lengths": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exact_match": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "arr_value.shape": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "values.shape": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "arr_value.size": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "is_empty_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ObjectBlock: 1 dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical(values):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
                "def make_block(values, placement, klass=None, ndim=None, dtype=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
                "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, given the result \"\"\"\n\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    else:\n        assert isinstance(result, Block), type(result)\n        blocks.append(result)\n    return blocks",
                "def _block_shape(values, ndim=1, shape=None):\n    \"\"\" guarantee the shape of the values to be at least 1 d \"\"\"\n    if values.ndim < ndim:\n        if shape is None:\n            shape = values.shape\n        if not is_extension_array_dtype(values):\n            # TODO: https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for \"2D\" ExtensionArrays\n            # We can't, and don't need to, reshape.\n            values = values.reshape(tuple((1,) + shape))\n    return values",
                "def _merge_blocks(blocks, dtype=None, _can_consolidate=True):\n\n    if len(blocks) == 1:\n        return blocks[0]\n\n    if _can_consolidate:\n\n        if dtype is None:\n            if len({b.dtype for b in blocks}) != 1:\n                raise AssertionError(\"_merge_blocks are invalid!\")\n\n        # FIXME: optimization potential in case all mgrs contain slices and\n        # combination of those slices is a slice, too.\n        new_mgr_locs = np.concatenate([b.mgr_locs.as_array for b in blocks])\n        new_values = np.vstack([b.values for b in blocks])\n\n        argsort = np.argsort(new_mgr_locs)\n        new_values = new_values[argsort]\n        new_mgr_locs = new_mgr_locs[argsort]\n\n        return make_block(new_values, placement=new_mgr_locs)\n\n    # no merge\n    return blocks",
                "def _safe_reshape(arr, new_shape):\n    \"\"\"\n    If possible, reshape `arr` to have shape `new_shape`,\n    with a couple of exceptions (see gh-13012):\n\n    1) If `arr` is a ExtensionArray or Index, `arr` will be\n       returned as is.\n    2) If `arr` is a Series, the `_values` attribute will\n       be reshaped and returned.\n\n    Parameters\n    ----------\n    arr : array-like, object to be reshaped\n    new_shape : int or tuple of ints, the new shape\n    \"\"\"\n    if isinstance(arr, ABCSeries):\n        arr = arr._values\n    if not isinstance(arr, ABCExtensionArray):\n        arr = arr.reshape(new_shape)\n    return arr",
                "def _putmask_smart(v, mask, n):\n    \"\"\"\n    Return a new ndarray, try to preserve dtype if possible.\n\n    Parameters\n    ----------\n    v : `values`, updated in-place (array like)\n    mask : np.ndarray\n        Applies to both sides (array like).\n    n : `new values` either scalar or an array like aligned with `values`\n\n    Returns\n    -------\n    values : ndarray with updated values\n        this *may* be a copy of the original\n\n    See Also\n    --------\n    ndarray.putmask\n    \"\"\"\n\n    # we cannot use np.asarray() here as we cannot have conversions\n    # that numpy does when numeric are mixed with strings\n\n    # n should be the length of the mask or a scalar here\n    if not is_list_like(n):\n        n = np.repeat(n, len(mask))\n\n    # see if we are only masking values that if putted\n    # will work in the current dtype\n    try:\n        nn = n[mask]\n    except TypeError:\n        # TypeError: only integer scalar arrays can be converted to a scalar index\n        pass\n    else:\n        # make sure that we have a nullable type\n        # if we have nulls\n        if not _isna_compat(v, nn[0]):\n            pass\n        elif not (is_float_dtype(nn.dtype) or is_integer_dtype(nn.dtype)):\n            # only compare integers/floats\n            pass\n        elif not (is_float_dtype(v.dtype) or is_integer_dtype(v.dtype)):\n            # only compare integers/floats\n            pass\n        else:\n\n            # we ignore ComplexWarning here\n            with warnings.catch_warnings(record=True):\n                warnings.simplefilter(\"ignore\", np.ComplexWarning)\n                nn_at = nn.astype(v.dtype)\n\n            comp = nn == nn_at\n            if is_list_like(comp) and comp.all():\n                nv = v.copy()\n                nv[mask] = nn_at\n                return nv\n\n    n = np.asarray(n)\n\n    def _putmask_preserve(nv, n):\n        try:\n            nv[mask] = n[mask]\n        except (IndexError, ValueError):\n            nv[mask] = n\n        return nv\n\n    # preserves dtype if possible\n    if v.dtype.kind == n.dtype.kind:\n        return _putmask_preserve(v, n)\n\n    # change the dtype if needed\n    dtype, _ = maybe_promote(n.dtype)\n\n    if is_extension_array_dtype(v.dtype) and is_object_dtype(dtype):\n        v = v._internal_get_values(dtype)\n    else:\n        v = v.astype(dtype)\n\n    return _putmask_preserve(v, n)",
                "def __init__(self, values, placement, ndim=None):\n    self.ndim = self._check_ndim(values, ndim)\n    self.mgr_locs = placement\n    self.values = values\n\n    if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n        raise ValueError(\n            f\"Wrong number of items passed {len(self.values)}, \"\n            f\"placement implies {len(self.mgr_locs)}\"\n        )",
                "def _check_ndim(self, values, ndim):\n    \"\"\"\n    ndim inference and validation.\n\n    Infers ndim from 'values' if not provided to __init__.\n    Validates that values.ndim and ndim are consistent if and only if\n    the class variable '_validate_ndim' is True.\n\n    Parameters\n    ----------\n    values : array-like\n    ndim : int or None\n\n    Returns\n    -------\n    ndim : int\n\n    Raises\n    ------\n    ValueError : the number of dimensions do not match\n    \"\"\"\n    if ndim is None:\n        ndim = values.ndim\n\n    if self._validate_ndim and values.ndim != ndim:\n        raise ValueError(\n            \"Wrong number of dimensions. \"\n            f\"values.ndim != ndim [{values.ndim} != {ndim}]\"\n        )\n    return ndim",
                "@property\ndef _holder(self):\n    \"\"\"The array-like that can hold the underlying values.\n\n    None for 'Block', overridden by subclasses that don't\n    use an ndarray.\n    \"\"\"\n    return None",
                "@property\ndef _consolidate_key(self):\n    return (self._can_consolidate, self.dtype.name)",
                "@property\ndef _is_single_block(self):\n    return self.ndim == 1",
                "@property\ndef is_view(self):\n    \"\"\" return a boolean if I am possibly a view \"\"\"\n    return self.values.base is not None",
                "@property\ndef is_datelike(self):\n    \"\"\" return True if I am a non-datelike \"\"\"\n    return self.is_datetime or self.is_timedelta",
                "def is_categorical_astype(self, dtype):\n    \"\"\"\n    validate that we have a astypeable to categorical,\n    returns a boolean if we are a categorical\n    \"\"\"\n    if dtype is Categorical or dtype is CategoricalDtype:\n        # this is a pd.Categorical, but is not\n        # a valid type for astypeing\n        raise TypeError(f\"invalid type {dtype} for astype\")\n\n    elif is_categorical_dtype(dtype):\n        return True\n\n    return False",
                "def external_values(self):\n    \"\"\"\n    The array that Series.values returns (public attribute).\n\n    This has some historical constraints, and is overridden in block\n    subclasses to return the correct array (e.g. period returns\n    object ndarray and datetimetz a datetime64[ns] ndarray instead of\n    proper extension array).\n    \"\"\"\n    return self.values",
                "def internal_values(self):\n    \"\"\"\n    The array that Series._values returns (internal values).\n    \"\"\"\n    return self.values",
                "def array_values(self) -> ExtensionArray:\n    \"\"\"\n    The array that Series.array returns. Always an ExtensionArray.\n    \"\"\"\n    return PandasArray(self.values)",
                "def get_values(self, dtype=None):\n    \"\"\"\n    return an internal format, currently just the ndarray\n    this is often overridden to handle to_dense like operations\n    \"\"\"\n    if is_object_dtype(dtype):\n        return self.values.astype(object)\n    return self.values",
                "def get_block_values(self, dtype=None):\n    \"\"\"\n    This is used in the JSON C code\n    \"\"\"\n    return self.get_values(dtype=dtype)",
                "def to_dense(self):\n    return self.values.view()",
                "@property\ndef fill_value(self):\n    return np.nan",
                "@property\ndef mgr_locs(self):\n    return self._mgr_locs",
                "@mgr_locs.setter\ndef mgr_locs(self, new_mgr_locs):\n    if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n        new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n    self._mgr_locs = new_mgr_locs",
                "@property\ndef array_dtype(self):\n    \"\"\" the dtype to return if I want to construct this block as an\n    array\n    \"\"\"\n    return self.dtype",
                "def make_block(self, values, placement=None) -> \"Block\":\n    \"\"\"\n    Create a new block, with type inference propagate any values that are\n    not specified\n    \"\"\"\n    if placement is None:\n        placement = self.mgr_locs\n\n    return make_block(values, placement=placement, ndim=self.ndim)",
                "def make_block_same_class(self, values, placement=None, ndim=None):\n    \"\"\" Wrap given values in a block of same type as self. \"\"\"\n    if placement is None:\n        placement = self.mgr_locs\n    if ndim is None:\n        ndim = self.ndim\n    return make_block(values, placement=placement, ndim=ndim, klass=type(self))",
                "def __repr__(self) -> str:\n    # don't want to print out all of the items here\n    name = type(self).__name__\n    if self._is_single_block:\n\n        result = f\"{name}: {len(self)} dtype: {self.dtype}\"\n\n    else:\n\n        shape = \" x \".join(pprint_thing(s) for s in self.shape)\n        result = (\n            f\"{name}: {pprint_thing(self.mgr_locs.indexer)}, \"\n            f\"{shape}, dtype: {self.dtype}\"\n        )\n\n    return result",
                "def __len__(self) -> int:\n    return len(self.values)",
                "def __getstate__(self):\n    return self.mgr_locs.indexer, self.values",
                "def __setstate__(self, state):\n    self.mgr_locs = libinternals.BlockPlacement(state[0])\n    self.values = state[1]\n    self.ndim = self.values.ndim",
                "def _slice(self, slicer):\n    \"\"\" return a slice of my values \"\"\"\n    return self.values[slicer]",
                "def getitem_block(self, slicer, new_mgr_locs=None):\n    \"\"\"\n    Perform __getitem__-like, return result as block.\n\n    As of now, only supports slices that preserve dimensionality.\n    \"\"\"\n    if new_mgr_locs is None:\n        if isinstance(slicer, tuple):\n            axis0_slicer = slicer[0]\n        else:\n            axis0_slicer = slicer\n        new_mgr_locs = self.mgr_locs[axis0_slicer]\n\n    new_values = self._slice(slicer)\n\n    if self._validate_ndim and new_values.ndim != self.ndim:\n        raise ValueError(\"Only same dim slicing is allowed\")\n\n    return self.make_block_same_class(new_values, new_mgr_locs)",
                "@property\ndef shape(self):\n    return self.values.shape",
                "@property\ndef dtype(self):\n    return self.values.dtype",
                "@property\ndef ftype(self):\n    if getattr(self.values, \"_pandas_ftype\", False):\n        dtype = self.dtype.subtype\n    else:\n        dtype = self.dtype\n    return f\"{dtype}:{self._ftype}\"",
                "def merge(self, other):\n    return _merge_blocks([self, other])",
                "def concat_same_type(self, to_concat, placement=None):\n    \"\"\"\n    Concatenate list of single blocks of the same type.\n    \"\"\"\n    values = self._concatenator(\n        [blk.values for blk in to_concat], axis=self.ndim - 1\n    )\n    return self.make_block_same_class(\n        values, placement=placement or slice(0, len(values), 1)\n    )",
                "def iget(self, i):\n    return self.values[i]",
                "def set(self, locs, values):\n    \"\"\"\n    Modify Block in-place with new item value\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.values[locs] = values",
                "def delete(self, loc):\n    \"\"\"\n    Delete given loc(-s) from block in-place.\n    \"\"\"\n    self.values = np.delete(self.values, loc, 0)\n    self.mgr_locs = self.mgr_locs.delete(loc)",
                "def apply(self, func, **kwargs) -> List[\"Block\"]:\n    \"\"\" apply the function to my values; return a block if we are not\n    one\n    \"\"\"\n    with np.errstate(all=\"ignore\"):\n        result = func(self.values, **kwargs)\n\n    return self._split_op_result(result)",
                "def _split_op_result(self, result) -> List[\"Block\"]:\n    # See also: split_and_operate\n    if is_extension_array_dtype(result) and result.ndim > 1:\n        # if we get a 2D ExtensionArray, we need to split it into 1D pieces\n        nbs = []\n        for i, loc in enumerate(self.mgr_locs):\n            vals = result[i]\n            nv = _block_shape(vals, ndim=self.ndim)\n            block = self.make_block(values=nv, placement=[loc])\n            nbs.append(block)\n        return nbs\n\n    if not isinstance(result, Block):\n        result = self.make_block(values=_block_shape(result, ndim=self.ndim))\n\n    return [result]",
                "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    \"\"\" fillna on the block with the value. If we fail, then convert to\n    ObjectBlock and try again\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    mask = isna(self.values)\n    if limit is not None:\n        limit = libalgos._validate_limit(None, limit=limit)\n        mask[mask.cumsum(self.ndim - 1) > limit] = False\n\n    if not self._can_hold_na:\n        if inplace:\n            return self\n        else:\n            return self.copy()\n\n    if self._can_hold_element(value):\n        # equivalent: _try_coerce_args(value) would not raise\n        blocks = self.putmask(mask, value, inplace=inplace)\n        return self._maybe_downcast(blocks, downcast)\n\n    # we can't process the value, but nothing to do\n    if not mask.any():\n        return self if inplace else self.copy()\n\n    # operate column-by-column\n    def f(mask, val, idx):\n        block = self.coerce_to_target_dtype(value)\n\n        # slice out our block\n        if idx is not None:\n            # i.e. self.ndim == 2\n            block = block.getitem_block(slice(idx, idx + 1))\n        return block.fillna(value, limit=limit, inplace=inplace, downcast=None)\n\n    return self.split_and_operate(None, f, inplace)",
                "def split_and_operate(self, mask, f, inplace: bool):\n    \"\"\"\n    split the block per-column, and apply the callable f\n    per-column, return a new block for each. Handle\n    masking which will not change a block unless needed.\n\n    Parameters\n    ----------\n    mask : 2-d boolean mask\n    f : callable accepting (1d-mask, 1d values, indexer)\n    inplace : boolean\n\n    Returns\n    -------\n    list of blocks\n    \"\"\"\n\n    if mask is None:\n        mask = np.broadcast_to(True, shape=self.shape)\n\n    new_values = self.values\n\n    def make_a_block(nv, ref_loc):\n        if isinstance(nv, list):\n            assert len(nv) == 1, nv\n            assert isinstance(nv[0], Block)\n            block = nv[0]\n        else:\n            # Put back the dimension that was taken from it and make\n            # a block out of the result.\n            nv = _block_shape(nv, ndim=self.ndim)\n            block = self.make_block(values=nv, placement=ref_loc)\n        return block\n\n    # ndim == 1\n    if self.ndim == 1:\n        if mask.any():\n            nv = f(mask, new_values, None)\n        else:\n            nv = new_values if inplace else new_values.copy()\n        block = make_a_block(nv, self.mgr_locs)\n        return [block]\n\n    # ndim > 1\n    new_blocks = []\n    for i, ref_loc in enumerate(self.mgr_locs):\n        m = mask[i]\n        v = new_values[i]\n\n        # need a new block\n        if m.any():\n            nv = f(m, v, i)\n        else:\n            nv = v if inplace else v.copy()\n\n        block = make_a_block(nv, [ref_loc])\n        new_blocks.append(block)\n\n    return new_blocks",
                "def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n    # no need to downcast our float\n    # unless indicated\n    if downcast is None and (\n        self.is_float or self.is_timedelta or self.is_datetime\n    ):\n        return blocks\n\n    return _extend_blocks([b.downcast(downcast) for b in blocks])",
                "def downcast(self, dtypes=None):\n    \"\"\" try to downcast each item to the dict of dtypes if present \"\"\"\n\n    # turn it off completely\n    if dtypes is False:\n        return self\n\n    values = self.values\n\n    # single block handling\n    if self._is_single_block:\n\n        # try to cast all non-floats here\n        if dtypes is None:\n            dtypes = \"infer\"\n\n        nv = maybe_downcast_to_dtype(values, dtypes)\n        return self.make_block(nv)\n\n    # ndim > 1\n    if dtypes is None:\n        return self\n\n    if not (dtypes == \"infer\" or isinstance(dtypes, dict)):\n        raise ValueError(\n            \"downcast must have a dictionary or 'infer' as its argument\"\n        )\n    elif dtypes != \"infer\":\n        raise AssertionError(\"dtypes as dict is not supported yet\")\n\n    # operate column-by-column\n    # this is expensive as it splits the blocks items-by-item\n    def f(mask, val, idx):\n        val = maybe_downcast_to_dtype(val, dtype=\"infer\")\n        return val\n\n    return self.split_and_operate(None, f, False)",
                "def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n    \"\"\"\n    Coerce to the new dtype.\n\n    Parameters\n    ----------\n    dtype : str, dtype convertible\n    copy : bool, default False\n        copy if indicated\n    errors : str, {'raise', 'ignore'}, default 'ignore'\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object\n\n    Returns\n    -------\n    Block\n    \"\"\"\n    errors_legal_values = (\"raise\", \"ignore\")\n\n    if errors not in errors_legal_values:\n        invalid_arg = (\n            \"Expected value of kwarg 'errors' to be one of \"\n            f\"{list(errors_legal_values)}. Supplied value is '{errors}'\"\n        )\n        raise ValueError(invalid_arg)\n\n    if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n        msg = (\n            f\"Expected an instance of {dtype.__name__}, \"\n            \"but got the class instead. Try instantiating 'dtype'.\"\n        )\n        raise TypeError(msg)\n\n    # may need to convert to categorical\n    if self.is_categorical_astype(dtype):\n\n        if is_categorical_dtype(self.values):\n            # GH 10696/18593: update an existing categorical efficiently\n            return self.make_block(self.values.astype(dtype, copy=copy))\n\n        return self.make_block(Categorical(self.values, dtype=dtype))\n\n    dtype = pandas_dtype(dtype)\n\n    # astype processing\n    if is_dtype_equal(self.dtype, dtype):\n        if copy:\n            return self.copy()\n        return self\n\n    # force the copy here\n    if self.is_extension:\n        # TODO: Should we try/except this astype?\n        values = self.values.astype(dtype)\n    else:\n        if issubclass(dtype.type, str):\n\n            # use native type formatting for datetime/tz/timedelta\n            if self.is_datelike:\n                values = self.to_native_types()\n\n            # astype formatting\n            else:\n                values = self.get_values()\n\n        else:\n            values = self.get_values(dtype=dtype)\n\n        # _astype_nansafe works fine with 1-d only\n        vals1d = values.ravel()\n        try:\n            values = astype_nansafe(vals1d, dtype, copy=True)\n        except (ValueError, TypeError):\n            # e.g. astype_nansafe can fail on object-dtype of strings\n            #  trying to convert to float\n            if errors == \"raise\":\n                raise\n            newb = self.copy() if copy else self\n            return newb\n\n    # TODO(extension)\n    # should we make this attribute?\n    if isinstance(values, np.ndarray):\n        values = values.reshape(self.shape)\n\n    newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n\n    if newb.is_numeric and self.is_numeric:\n        if newb.shape != self.shape:\n            raise TypeError(\n                f\"cannot set astype for copy = [{copy}] for dtype \"\n                f\"({self.dtype.name} [{self.shape}]) to different shape \"\n                f\"({newb.dtype.name} [{newb.shape}])\"\n            )\n    return newb",
                "def convert(\n    self,\n    copy: bool = True,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n):\n    \"\"\" attempt to coerce any object types to better types return a copy\n    of the block (if copy = True) by definition we are not an ObjectBlock\n    here!\n    \"\"\"\n\n    return self.copy() if copy else self",
                "def _can_hold_element(self, element: Any) -> bool:\n    \"\"\" require the same dtype as ourselves \"\"\"\n    dtype = self.values.dtype.type\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, dtype)\n    return isinstance(element, dtype)",
                "def to_native_types(self, slicer=None, na_rep=\"nan\", quoting=None, **kwargs):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n    values = self.get_values()\n\n    if slicer is not None:\n        values = values[:, slicer]\n    mask = isna(values)\n    itemsize = writers.word_len(na_rep)\n\n    if not self.is_object and not quoting and itemsize:\n        values = values.astype(f\"<U{itemsize}\")\n    else:\n        values = np.array(values, dtype=\"object\")\n\n    values[mask] = na_rep\n    return values",
                "def copy(self, deep=True):\n    \"\"\" copy constructor \"\"\"\n    values = self.values\n    if deep:\n        values = values.copy()\n    return self.make_block_same_class(values, ndim=self.ndim)",
                "def replace(\n    self, to_replace, value, inplace=False, filter=None, regex=False, convert=True\n):\n    \"\"\"replace the to_replace value with value, possible to create new\n    blocks here this is just a call to putmask. regex is not used here.\n    It is used in ObjectBlocks.  It is here for API compatibility.\n    \"\"\"\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    original_to_replace = to_replace\n\n    # If we cannot replace with own dtype, convert to ObjectBlock and\n    # retry\n    if not self._can_hold_element(to_replace):\n        if not isinstance(to_replace, list):\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        to_replace = [x for x in to_replace if self._can_hold_element(x)]\n        if not len(to_replace):\n            # GH#28084 avoid costly checks since we can infer\n            #  that there is nothing to replace in this block\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        if len(to_replace) == 1:\n            # _can_hold_element checks have reduced this back to the\n            #  scalar case and we can avoid a costly object cast\n            return self.replace(\n                to_replace[0],\n                value,\n                inplace=inplace,\n                filter=filter,\n                regex=regex,\n                convert=convert,\n            )\n\n        # GH 22083, TypeError or ValueError occurred within error handling\n        # causes infinite loop. Cast and retry only if not objectblock.\n        if is_object_dtype(self):\n            raise AssertionError\n\n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            filter=filter,\n            regex=regex,\n            convert=convert,\n        )\n\n    values = self.values\n    if lib.is_scalar(to_replace) and isinstance(values, np.ndarray):\n        # The only non-DatetimeLike class that also has a non-trivial\n        #  try_coerce_args is ObjectBlock, but that overrides replace,\n        #  so does not get here.\n        to_replace = convert_scalar(values, to_replace)\n\n    mask = missing.mask_missing(values, to_replace)\n    if filter is not None:\n        filtered_out = ~self.mgr_locs.isin(filter)\n        mask[filtered_out.nonzero()[0]] = False\n\n    if not mask.any():\n        if inplace:\n            return [self]\n        return [self.copy()]\n\n    try:\n        blocks = self.putmask(mask, value, inplace=inplace)\n        # Note: it is _not_ the case that self._can_hold_element(value)\n        #  is always true at this point.  In particular, that can fail\n        #  for:\n        #   \"2u\" with bool-dtype, float-dtype\n        #   0.5 with int64-dtype\n        #   np.nan with int64-dtype\n    except (TypeError, ValueError):\n        # GH 22083, TypeError or ValueError occurred within error handling\n        # causes infinite loop. Cast and retry only if not objectblock.\n        if is_object_dtype(self):\n            raise\n\n        assert not self._can_hold_element(value), value\n\n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=original_to_replace,\n            value=value,\n            inplace=inplace,\n            filter=filter,\n            regex=regex,\n            convert=convert,\n        )\n    if convert:\n        blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n    return blocks",
                "def _replace_single(self, *args, **kwargs):\n    \"\"\" no-op on a non-ObjectBlock \"\"\"\n    return self if kwargs[\"inplace\"] else self.copy()",
                "def setitem(self, indexer, value):\n    \"\"\"\n    Set the value inplace, returning a a maybe different typed block.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    transpose = self.ndim == 2\n\n    # coerce None values, if appropriate\n    if value is None:\n        if self.is_numeric:\n            value = np.nan\n\n    # coerce if block dtype can store value\n    values = self.values\n    if self._can_hold_element(value):\n        # We only get here for non-Extension Blocks, so _try_coerce_args\n        #  is only relevant for DatetimeBlock and TimedeltaBlock\n        if lib.is_scalar(value):\n            value = convert_scalar(values, value)\n\n    else:\n        # current dtype cannot store value, coerce to common dtype\n        find_dtype = False\n\n        if hasattr(value, \"dtype\"):\n            dtype = value.dtype\n            find_dtype = True\n\n        elif lib.is_scalar(value) and not isna(value):\n            dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n            find_dtype = True\n\n        if find_dtype:\n            dtype = find_common_type([values.dtype, dtype])\n            if not is_dtype_equal(self.dtype, dtype):\n                b = self.astype(dtype)\n                return b.setitem(indexer, value)\n\n    # value must be storeable at this moment\n    if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n        # We need to be careful not to allow through strings that\n        #  can be parsed to EADtypes\n        arr_value = value\n    else:\n        arr_value = np.array(value)\n\n    # cast the values to a type that can hold nan (if necessary)\n    if not self._can_hold_element(value):\n        dtype, _ = maybe_promote(arr_value.dtype)\n        values = values.astype(dtype)\n\n    if transpose:\n        values = values.T\n\n    # length checking\n    check_setitem_lengths(indexer, value, values)\n\n    if is_empty_indexer(indexer, arr_value):\n        # GH#8669 empty indexers\n        pass\n\n    elif is_scalar_indexer(indexer, arr_value):\n        # setting a single element for each dim and with a rhs that could\n        #  be e.g. a list; see GH#6043\n        values[indexer] = value\n\n    # if we are an exact match (ex-broadcasting),\n    # then use the resultant dtype\n    elif (\n        len(arr_value.shape)\n        and arr_value.shape[0] == values.shape[0]\n        and arr_value.size == values.size\n    ):\n        values[indexer] = value\n        try:\n            values = values.astype(arr_value.dtype)\n        except ValueError:\n            pass\n\n    # set\n    else:\n        values[indexer] = value\n\n    if transpose:\n        values = values.T\n    block = self.make_block(values)\n    return block",
                "def putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False):\n    \"\"\" putmask the data to the block; it is possible that we may create a\n    new dtype of block\n\n    return the resulting block(s)\n\n    Parameters\n    ----------\n    mask  : the condition to respect\n    new : a ndarray/object\n    align : boolean, perform alignment on other/cond, default is True\n    inplace : perform inplace modification, default is False\n    axis : int\n    transpose : boolean\n        Set to True if self is stored with axes reversed\n\n    Returns\n    -------\n    a list of new blocks, the result of the putmask\n    \"\"\"\n\n    new_values = self.values if inplace else self.values.copy()\n\n    new = getattr(new, \"values\", new)\n    mask = getattr(mask, \"values\", mask)\n\n    # if we are passed a scalar None, convert it here\n    if not is_list_like(new) and isna(new) and not self.is_object:\n        # FIXME: make sure we have compatible NA\n        new = self.fill_value\n\n    if self._can_hold_element(new):\n        # We only get here for non-Extension Blocks, so _try_coerce_args\n        #  is only relevant for DatetimeBlock and TimedeltaBlock\n        if lib.is_scalar(new):\n            new = convert_scalar(new_values, new)\n\n        if transpose:\n            new_values = new_values.T\n\n        # If the default repeat behavior in np.putmask would go in the\n        # wrong direction, then explicitly repeat and reshape new instead\n        if getattr(new, \"ndim\", 0) >= 1:\n            if self.ndim - 1 == new.ndim and axis == 1:\n                new = np.repeat(new, new_values.shape[-1]).reshape(self.shape)\n            new = new.astype(new_values.dtype)\n\n        # we require exact matches between the len of the\n        # values we are setting (or is compat). np.putmask\n        # doesn't check this and will simply truncate / pad\n        # the output, but we want sane error messages\n        #\n        # TODO: this prob needs some better checking\n        # for 2D cases\n        if (\n            is_list_like(new)\n            and np.any(mask[mask])\n            and getattr(new, \"ndim\", 1) == 1\n        ):\n            if mask[mask].shape[-1] == len(new):\n                # GH 30567\n                # If length of ``new`` is less than the length of ``new_values``,\n                # `np.putmask` would first repeat the ``new`` array and then\n                # assign the masked values hence produces incorrect result.\n                # `np.place` on the other hand uses the ``new`` values at it is\n                # to place in the masked locations of ``new_values``\n                np.place(new_values, mask, new)\n            elif mask.shape[-1] == len(new) or len(new) == 1:\n                np.putmask(new_values, mask, new)\n            else:\n                raise ValueError(\"cannot assign mismatch length to masked array\")\n        else:\n            np.putmask(new_values, mask, new)\n\n    # maybe upcast me\n    elif mask.any():\n        if transpose:\n            mask = mask.T\n            if isinstance(new, np.ndarray):\n                new = new.T\n            axis = new_values.ndim - axis - 1\n\n        # Pseudo-broadcast\n        if getattr(new, \"ndim\", 0) >= 1:\n            if self.ndim - 1 == new.ndim:\n                new_shape = list(new.shape)\n                new_shape.insert(axis, 1)\n                new = new.reshape(tuple(new_shape))\n\n        # operate column-by-column\n        def f(mask, val, idx):\n\n            if idx is None:\n                # ndim==1 case.\n                n = new\n            else:\n\n                if isinstance(new, np.ndarray):\n                    n = np.squeeze(new[idx % new.shape[0]])\n                else:\n                    n = np.array(new)\n\n                # type of the new block\n                dtype, _ = maybe_promote(n.dtype)\n\n                # we need to explicitly astype here to make a copy\n                n = n.astype(dtype)\n\n            nv = _putmask_smart(val, mask, n)\n            return nv\n\n        new_blocks = self.split_and_operate(mask, f, inplace)\n        return new_blocks\n\n    if inplace:\n        return [self]\n\n    if transpose:\n        new_values = new_values.T\n\n    return [self.make_block(new_values)]",
                "def coerce_to_target_dtype(self, other):\n    \"\"\"\n    coerce the current block to a dtype compat for other\n    we will return a block, possibly object, and not raise\n\n    we can also safely try to coerce to the same dtype\n    and will receive the same block\n    \"\"\"\n\n    # if we cannot then coerce to object\n    dtype, _ = infer_dtype_from(other, pandas_dtype=True)\n\n    if is_dtype_equal(self.dtype, dtype):\n        return self\n\n    if self.is_bool or is_object_dtype(dtype) or is_bool_dtype(dtype):\n        # we don't upcast to bool\n        return self.astype(object)\n\n    elif (self.is_float or self.is_complex) and (\n        is_integer_dtype(dtype) or is_float_dtype(dtype)\n    ):\n        # don't coerce float/complex to int\n        return self\n\n    elif (\n        self.is_datetime\n        or is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n    ):\n\n        # not a datetime\n        if not (\n            (is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype))\n            and self.is_datetime\n        ):\n            return self.astype(object)\n\n        # don't upcast timezone with different timezone or no timezone\n        mytz = getattr(self.dtype, \"tz\", None)\n        othertz = getattr(dtype, \"tz\", None)\n\n        if not tz_compare(mytz, othertz):\n            return self.astype(object)\n\n        raise AssertionError(\n            f\"possible recursion in coerce_to_target_dtype: {self} {other}\"\n        )\n\n    elif self.is_timedelta or is_timedelta64_dtype(dtype):\n\n        # not a timedelta\n        if not (is_timedelta64_dtype(dtype) and self.is_timedelta):\n            return self.astype(object)\n\n        raise AssertionError(\n            f\"possible recursion in coerce_to_target_dtype: {self} {other}\"\n        )\n\n    try:\n        return self.astype(dtype)\n    except (ValueError, TypeError, OverflowError):\n        return self.astype(object)",
                "def interpolate(\n    self,\n    method=\"pad\",\n    axis=0,\n    index=None,\n    values=None,\n    inplace=False,\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    coerce=False,\n    downcast=None,\n    **kwargs,\n):\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    def check_int_bool(self, inplace):\n        # Only FloatBlocks will contain NaNs.\n        # timedelta subclasses IntBlock\n        if (self.is_bool or self.is_integer) and not self.is_timedelta:\n            if inplace:\n                return self\n            else:\n                return self.copy()\n\n    # a fill na type method\n    try:\n        m = missing.clean_fill_method(method)\n    except ValueError:\n        m = None\n\n    if m is not None:\n        r = check_int_bool(self, inplace)\n        if r is not None:\n            return r\n        return self._interpolate_with_fill(\n            method=m,\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            fill_value=fill_value,\n            coerce=coerce,\n            downcast=downcast,\n        )\n    # validate the interp method\n    m = missing.clean_interp_method(method, **kwargs)\n\n    r = check_int_bool(self, inplace)\n    if r is not None:\n        return r\n    return self._interpolate(\n        method=m,\n        index=index,\n        values=values,\n        axis=axis,\n        limit=limit,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        fill_value=fill_value,\n        inplace=inplace,\n        downcast=downcast,\n        **kwargs,\n    )",
                "def _interpolate_with_fill(\n    self,\n    method=\"pad\",\n    axis=0,\n    inplace=False,\n    limit=None,\n    fill_value=None,\n    coerce=False,\n    downcast=None,\n):\n    \"\"\" fillna but using the interpolate machinery \"\"\"\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # if we are coercing, then don't force the conversion\n    # if the block can't hold the type\n    if coerce:\n        if not self._can_hold_na:\n            if inplace:\n                return [self]\n            else:\n                return [self.copy()]\n\n    values = self.values if inplace else self.values.copy()\n\n    # We only get here for non-ExtensionBlock\n    fill_value = convert_scalar(self.values, fill_value)\n\n    values = missing.interpolate_2d(\n        values,\n        method=method,\n        axis=axis,\n        limit=limit,\n        fill_value=fill_value,\n        dtype=self.dtype,\n    )\n\n    blocks = [self.make_block_same_class(values, ndim=self.ndim)]\n    return self._maybe_downcast(blocks, downcast)",
                "def _interpolate(\n    self,\n    method=None,\n    index=None,\n    values=None,\n    fill_value=None,\n    axis=0,\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    inplace=False,\n    downcast=None,\n    **kwargs,\n):\n    \"\"\" interpolate using scipy wrappers \"\"\"\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    data = self.values if inplace else self.values.copy()\n\n    # only deal with floats\n    if not self.is_float:\n        if not self.is_integer:\n            return self\n        data = data.astype(np.float64)\n\n    if fill_value is None:\n        fill_value = self.fill_value\n\n    if method in (\"krogh\", \"piecewise_polynomial\", \"pchip\"):\n        if not index.is_monotonic:\n            raise ValueError(\n                f\"{method} interpolation requires that the index be monotonic.\"\n            )\n    # process 1-d slices in the axis direction\n\n    def func(x):\n\n        # process a 1-d slice, returning it\n        # should the axis argument be handled below in apply_along_axis?\n        # i.e. not an arg to missing.interpolate_1d\n        return missing.interpolate_1d(\n            index,\n            x,\n            method=method,\n            limit=limit,\n            limit_direction=limit_direction,\n            limit_area=limit_area,\n            fill_value=fill_value,\n            bounds_error=False,\n            **kwargs,\n        )\n\n    # interp each column independently\n    interp_values = np.apply_along_axis(func, axis, data)\n\n    blocks = [self.make_block_same_class(interp_values)]\n    return self._maybe_downcast(blocks, downcast)",
                "def take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None):\n    \"\"\"\n    Take values according to indexer and return them as a block.bb\n\n    \"\"\"\n\n    # algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock\n    # so need to preserve types\n    # sparse is treated like an ndarray, but needs .get_values() shaping\n\n    values = self.values\n\n    if fill_tuple is None:\n        fill_value = self.fill_value\n        allow_fill = False\n    else:\n        fill_value = fill_tuple[0]\n        allow_fill = True\n\n    new_values = algos.take_nd(\n        values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value\n    )\n\n    # Called from three places in managers, all of which satisfy\n    #  this assertion\n    assert not (axis == 0 and new_mgr_locs is None)\n    if new_mgr_locs is None:\n        new_mgr_locs = self.mgr_locs\n\n    if not is_dtype_equal(new_values.dtype, self.dtype):\n        return self.make_block(new_values, new_mgr_locs)\n    else:\n        return self.make_block_same_class(new_values, new_mgr_locs)",
                "def diff(self, n: int, axis: int = 1) -> List[\"Block\"]:\n    \"\"\" return block for the diff of the values \"\"\"\n    new_values = algos.diff(self.values, n, axis=axis, stacklevel=7)\n    # We use block_shape for ExtensionBlock subclasses, which may call here\n    # via a super.\n    new_values = _block_shape(new_values, ndim=self.ndim)\n    return [self.make_block(values=new_values)]",
                "def shift(self, periods, axis=0, fill_value=None):\n    \"\"\" shift the block by periods, possibly upcast \"\"\"\n\n    # convert integer to float if necessary. need to do a lot more than\n    # that, handle boolean etc also\n    new_values, fill_value = maybe_upcast(self.values, fill_value)\n\n    # make sure array sent to np.roll is c_contiguous\n    f_ordered = new_values.flags.f_contiguous\n    if f_ordered:\n        new_values = new_values.T\n        axis = new_values.ndim - axis - 1\n\n    if np.prod(new_values.shape):\n        new_values = np.roll(new_values, ensure_platform_int(periods), axis=axis)\n\n    axis_indexer = [slice(None)] * self.ndim\n    if periods > 0:\n        axis_indexer[axis] = slice(None, periods)\n    else:\n        axis_indexer[axis] = slice(periods, None)\n    new_values[tuple(axis_indexer)] = fill_value\n\n    # restore original order\n    if f_ordered:\n        new_values = new_values.T\n\n    return [self.make_block(new_values)]",
                "def where(\n    self,\n    other,\n    cond,\n    align=True,\n    errors=\"raise\",\n    try_cast: bool = False,\n    axis: int = 0,\n) -> List[\"Block\"]:\n    \"\"\"\n    evaluate the block; return result block(s) from the result\n\n    Parameters\n    ----------\n    other : a ndarray/object\n    cond  : the condition to respect\n    align : boolean, perform alignment on other/cond\n    errors : str, {'raise', 'ignore'}, default 'raise'\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object\n    axis : int\n\n    Returns\n    -------\n    a new block(s), the result of the func\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    assert errors in [\"raise\", \"ignore\"]\n    transpose = self.ndim == 2\n\n    values = self.values\n    orig_other = other\n    if transpose:\n        values = values.T\n\n    other = getattr(other, \"_values\", getattr(other, \"values\", other))\n    cond = getattr(cond, \"values\", cond)\n\n    # If the default broadcasting would go in the wrong direction, then\n    # explicitly reshape other instead\n    if getattr(other, \"ndim\", 0) >= 1:\n        if values.ndim - 1 == other.ndim and axis == 1:\n            other = other.reshape(tuple(other.shape + (1,)))\n        elif transpose and values.ndim == self.ndim - 1:\n            cond = cond.T\n\n    if not hasattr(cond, \"shape\"):\n        raise ValueError(\"where must have a condition that is ndarray like\")\n\n    # our where function\n    def func(cond, values, other):\n\n        if not (\n            (self.is_integer or self.is_bool)\n            and lib.is_float(other)\n            and np.isnan(other)\n        ):\n            # np.where will cast integer array to floats in this case\n            if not self._can_hold_element(other):\n                raise TypeError\n            if lib.is_scalar(other) and isinstance(values, np.ndarray):\n                other = convert_scalar(values, other)\n\n        fastres = expressions.where(cond, values, other)\n        return fastres\n\n    if cond.ravel().all():\n        result = values\n    else:\n        # see if we can operate on the entire block, or need item-by-item\n        # or if we are a single block (ndim == 1)\n        try:\n            result = func(cond, values, other)\n        except TypeError:\n\n            # we cannot coerce, return a compat dtype\n            # we are explicitly ignoring errors\n            block = self.coerce_to_target_dtype(other)\n            blocks = block.where(\n                orig_other,\n                cond,\n                align=align,\n                errors=errors,\n                try_cast=try_cast,\n                axis=axis,\n            )\n            return self._maybe_downcast(blocks, \"infer\")\n\n    if self._can_hold_na or self.ndim == 1:\n\n        if transpose:\n            result = result.T\n\n        return [self.make_block(result)]\n\n    # might need to separate out blocks\n    axis = cond.ndim - 1\n    cond = cond.swapaxes(axis, 0)\n    mask = np.array([cond[i].all() for i in range(cond.shape[0])], dtype=bool)\n\n    result_blocks = []\n    for m in [mask, ~mask]:\n        if m.any():\n            taken = result.take(m.nonzero()[0], axis=axis)\n            r = maybe_downcast_numeric(taken, self.dtype)\n            nb = self.make_block(r.T, placement=self.mgr_locs[m])\n            result_blocks.append(nb)\n\n    return result_blocks",
                "def equals(self, other) -> bool:\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    return array_equivalent(self.values, other.values)",
                "def _unstack(self, unstacker_func, new_columns, n_rows, fill_value):\n    \"\"\"Return a list of unstacked blocks of self\n\n    Parameters\n    ----------\n    unstacker_func : callable\n        Partially applied unstacker.\n    new_columns : Index\n        All columns of the unstacked BlockManager.\n    n_rows : int\n        Only used in ExtensionBlock._unstack\n    fill_value : int\n        Only used in ExtensionBlock._unstack\n\n    Returns\n    -------\n    blocks : list of Block\n        New blocks of unstacked values.\n    mask : array_like of bool\n        The mask of columns of `blocks` we should keep.\n    \"\"\"\n    unstacker = unstacker_func(self.values.T)\n    new_items = unstacker.get_new_columns()\n    new_placement = new_columns.get_indexer(new_items)\n    new_values, mask = unstacker.get_new_values()\n\n    mask = mask.any(0)\n    new_values = new_values.T[mask]\n    new_placement = new_placement[mask]\n\n    blocks = [make_block(new_values, placement=new_placement)]\n    return blocks, mask",
                "def quantile(self, qs, interpolation=\"linear\", axis=0):\n    \"\"\"\n    compute the quantiles of the\n\n    Parameters\n    ----------\n    qs: a scalar or list of the quantiles to be computed\n    interpolation: type of interpolation, default 'linear'\n    axis: axis to compute, default 0\n\n    Returns\n    -------\n    Block\n    \"\"\"\n    # We should always have ndim == 2 because Series dispatches to DataFrame\n    assert self.ndim == 2\n\n    values = self.get_values()\n\n    is_empty = values.shape[axis] == 0\n    orig_scalar = not is_list_like(qs)\n    if orig_scalar:\n        # make list-like, unpack later\n        qs = [qs]\n\n    if is_empty:\n        # create the array of na_values\n        # 2d len(values) * len(qs)\n        result = np.repeat(\n            np.array([self.fill_value] * len(qs)), len(values)\n        ).reshape(len(values), len(qs))\n    else:\n        # asarray needed for Sparse, see GH#24600\n        mask = np.asarray(isna(values))\n        result = nanpercentile(\n            values,\n            np.array(qs) * 100,\n            axis=axis,\n            na_value=self.fill_value,\n            mask=mask,\n            ndim=values.ndim,\n            interpolation=interpolation,\n        )\n\n        result = np.array(result, copy=False)\n        result = result.T\n\n    if orig_scalar and not lib.is_scalar(result):\n        # result could be scalar in case with is_empty and self.ndim == 1\n        assert result.shape[-1] == 1, result.shape\n        result = result[..., 0]\n        result = lib.item_from_zerodim(result)\n\n    ndim = np.ndim(result)\n    return make_block(result, placement=np.arange(len(result)), ndim=ndim)",
                "def _replace_coerce(\n    self, to_replace, value, inplace=True, regex=False, convert=False, mask=None\n):\n    \"\"\"\n    Replace value corresponding to the given boolean array with another\n    value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    A new block if there is anything to replace or the original block.\n    \"\"\"\n\n    if mask.any():\n        if not regex:\n            self = self.coerce_to_target_dtype(value)\n            return self.putmask(mask, value, inplace=inplace)\n        else:\n            return self._replace_single(\n                to_replace,\n                value,\n                inplace=inplace,\n                regex=regex,\n                convert=convert,\n                mask=mask,\n            )\n    return self",
                "def __init__(self, values, placement, ndim=None):\n    \"\"\"Initialize a non-consolidatable block.\n\n    'ndim' may be inferred from 'placement'.\n\n    This will call continue to call __init__ for the other base\n    classes mixed in with this Mixin.\n    \"\"\"\n    # Placement must be converted to BlockPlacement so that we can check\n    # its length\n    if not isinstance(placement, libinternals.BlockPlacement):\n        placement = libinternals.BlockPlacement(placement)\n\n    # Maybe infer ndim from placement\n    if ndim is None:\n        if len(placement) != 1:\n            ndim = 1\n        else:\n            ndim = 2\n    super().__init__(values, placement, ndim=ndim)",
                "@property\ndef shape(self):\n    if self.ndim == 1:\n        return ((len(self.values)),)\n    return (len(self.mgr_locs), len(self.values))",
                "def iget(self, col):\n\n    if self.ndim == 2 and isinstance(col, tuple):\n        col, loc = col\n        if not com.is_null_slice(col) and col != 0:\n            raise IndexError(f\"{self} only contains one item\")\n        elif isinstance(col, slice):\n            if col != slice(None):\n                raise NotImplementedError(col)\n            return self.values[[loc]]\n        return self.values[loc]\n    else:\n        if col != 0:\n            raise IndexError(f\"{self} only contains one item\")\n        return self.values",
                "def should_store(self, value):\n    return isinstance(value, self._holder)",
                "def set(self, locs, values, check=False):\n    assert locs.tolist() == [0]\n    self.values = values",
                "def putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False):\n    \"\"\"\n    putmask the data to the block; we must be a single block and not\n    generate other blocks\n\n    return the resulting block\n\n    Parameters\n    ----------\n    mask  : the condition to respect\n    new : a ndarray/object\n    align : boolean, perform alignment on other/cond, default is True\n    inplace : perform inplace modification, default is False\n\n    Returns\n    -------\n    a new block, the result of the putmask\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # use block's copy logic.\n    # .values may be an Index which does shallow copy by default\n    new_values = self.values if inplace else self.copy().values\n\n    if isinstance(new, np.ndarray) and len(new) == len(mask):\n        new = new[mask]\n\n    mask = _safe_reshape(mask, new_values.shape)\n\n    new_values[mask] = new\n    return [self.make_block(values=new_values)]",
                "def _get_unstack_items(self, unstacker, new_columns):\n    \"\"\"\n    Get the placement, values, and mask for a Block unstack.\n\n    This is shared between ObjectBlock and ExtensionBlock. They\n    differ in that ObjectBlock passes the values, while ExtensionBlock\n    passes the dummy ndarray of positions to be used by a take\n    later.\n\n    Parameters\n    ----------\n    unstacker : pandas.core.reshape.reshape._Unstacker\n    new_columns : Index\n        All columns of the unstacked BlockManager.\n\n    Returns\n    -------\n    new_placement : ndarray[int]\n        The placement of the new columns in `new_columns`.\n    new_values : Union[ndarray, ExtensionArray]\n        The first return value from _Unstacker.get_new_values.\n    mask : ndarray[bool]\n        The second return value from _Unstacker.get_new_values.\n    \"\"\"\n    # shared with ExtensionBlock\n    new_items = unstacker.get_new_columns()\n    new_placement = new_columns.get_indexer(new_items)\n    new_values, mask = unstacker.get_new_values()\n\n    mask = mask.any(0)\n    return new_placement, new_values, mask",
                "def __init__(self, values, placement, ndim=None):\n    values = self._maybe_coerce_values(values)\n    super().__init__(values, placement, ndim)",
                "def _maybe_coerce_values(self, values):\n    \"\"\"\n    Unbox to an extension array.\n\n    This will unbox an ExtensionArray stored in an Index or Series.\n    ExtensionArrays pass through. No dtype coercion is done.\n\n    Parameters\n    ----------\n    values : Index, Series, ExtensionArray\n\n    Returns\n    -------\n    ExtensionArray\n    \"\"\"\n    return extract_array(values)",
                "@property\ndef _holder(self):\n    # For extension blocks, the holder is values-dependent.\n    return type(self.values)",
                "@property\ndef fill_value(self):\n    # Used in reindex_indexer\n    return self.values.dtype.na_value",
                "@property\ndef _can_hold_na(self):\n    # The default ExtensionArray._can_hold_na is True\n    return self._holder._can_hold_na",
                "@property\ndef is_view(self):\n    \"\"\"Extension arrays are never treated as views.\"\"\"\n    return False",
                "@property\ndef is_numeric(self):\n    return self.values.dtype._is_numeric",
                "def setitem(self, indexer, value):\n    \"\"\"Set the value inplace, returning a same-typed block.\n\n    This differs from Block.setitem by not allowing setitem to change\n    the dtype of the Block.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    if isinstance(indexer, tuple):\n        # we are always 1-D\n        indexer = indexer[0]\n\n    check_setitem_lengths(indexer, value, self.values)\n    self.values[indexer] = value\n    return self",
                "def get_values(self, dtype=None):\n    # ExtensionArrays must be iterable, so this works.\n    values = np.asarray(self.values)\n    if values.ndim == self.ndim - 1:\n        values = values.reshape((1,) + values.shape)\n    return values",
                "def array_values(self) -> ExtensionArray:\n    return self.values",
                "def to_dense(self):\n    return np.asarray(self.values)",
                "def to_native_types(self, slicer=None, na_rep=\"nan\", quoting=None, **kwargs):\n    \"\"\"override to use ExtensionArray astype for the conversion\"\"\"\n    values = self.values\n    if slicer is not None:\n        values = values[slicer]\n    mask = isna(values)\n\n    values = np.asarray(values.astype(object))\n    values[mask] = na_rep\n\n    # we are expected to return a 2-d ndarray\n    return values.reshape(1, len(values))",
                "def take_nd(self, indexer, axis=0, new_mgr_locs=None, fill_tuple=None):\n    \"\"\"\n    Take values according to indexer and return them as a block.\n    \"\"\"\n    if fill_tuple is None:\n        fill_value = None\n    else:\n        fill_value = fill_tuple[0]\n\n    # axis doesn't matter; we are really a single-dim object\n    # but are passed the axis depending on the calling routing\n    # if its REALLY axis 0, then this will be a reindex and not a take\n    new_values = self.values.take(indexer, fill_value=fill_value, allow_fill=True)\n\n    # Called from three places in managers, all of which satisfy\n    #  this assertion\n    assert not (self.ndim == 1 and new_mgr_locs is None)\n    if new_mgr_locs is None:\n        new_mgr_locs = self.mgr_locs\n\n    return self.make_block_same_class(new_values, new_mgr_locs)",
                "def _can_hold_element(self, element: Any) -> bool:\n    # XXX: We may need to think about pushing this onto the array.\n    # We're doing the same as CategoricalBlock here.\n    return True",
                "def _slice(self, slicer):\n    \"\"\" return a slice of my values \"\"\"\n\n    # slice the category\n    # return same dims as we currently have\n\n    if isinstance(slicer, tuple) and len(slicer) == 2:\n        if not com.is_null_slice(slicer[0]):\n            raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n        slicer = slicer[1]\n\n    return self.values[slicer]",
                "def concat_same_type(self, to_concat, placement=None):\n    \"\"\"\n    Concatenate list of single blocks of the same type.\n    \"\"\"\n    values = self._holder._concat_same_type([blk.values for blk in to_concat])\n    placement = placement or slice(0, len(values), 1)\n    return self.make_block_same_class(values, ndim=self.ndim, placement=placement)",
                "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    values = self.values if inplace else self.values.copy()\n    values = values.fillna(value=value, limit=limit)\n    return [\n        self.make_block_same_class(\n            values=values, placement=self.mgr_locs, ndim=self.ndim\n        )\n    ]",
                "def interpolate(\n    self, method=\"pad\", axis=0, inplace=False, limit=None, fill_value=None, **kwargs\n):\n\n    values = self.values if inplace else self.values.copy()\n    return self.make_block_same_class(\n        values=values.fillna(value=fill_value, method=method, limit=limit),\n        placement=self.mgr_locs,\n    )",
                "def diff(self, n: int, axis: int = 1) -> List[\"Block\"]:\n    if axis == 1:\n        # we are by definition 1D.\n        axis = 0\n    return super().diff(n, axis)",
                "def shift(\n    self,\n    periods: int,\n    axis: libinternals.BlockPlacement = 0,\n    fill_value: Any = None,\n) -> List[\"ExtensionBlock\"]:\n    \"\"\"\n    Shift the block by `periods`.\n\n    Dispatches to underlying ExtensionArray and re-boxes in an\n    ExtensionBlock.\n    \"\"\"\n    return [\n        self.make_block_same_class(\n            self.values.shift(periods=periods, fill_value=fill_value),\n            placement=self.mgr_locs,\n            ndim=self.ndim,\n        )\n    ]",
                "def where(\n    self,\n    other,\n    cond,\n    align=True,\n    errors=\"raise\",\n    try_cast: bool = False,\n    axis: int = 0,\n) -> List[\"Block\"]:\n    if isinstance(other, ABCDataFrame):\n        # ExtensionArrays are 1-D, so if we get here then\n        # `other` should be a DataFrame with a single column.\n        assert other.shape[1] == 1\n        other = other.iloc[:, 0]\n\n    other = extract_array(other, extract_numpy=True)\n\n    if isinstance(cond, ABCDataFrame):\n        assert cond.shape[1] == 1\n        cond = cond.iloc[:, 0]\n\n    cond = extract_array(cond, extract_numpy=True)\n\n    if lib.is_scalar(other) and isna(other):\n        # The default `other` for Series / Frame is np.nan\n        # we want to replace that with the correct NA value\n        # for the type\n        other = self.dtype.na_value\n\n    if is_sparse(self.values):\n        # TODO(SparseArray.__setitem__): remove this if condition\n        # We need to re-infer the type of the data after doing the\n        # where, for cases where the subtypes don't match\n        dtype = None\n    else:\n        dtype = self.dtype\n\n    result = self.values.copy()\n    icond = ~cond\n    if lib.is_scalar(other):\n        set_other = other\n    else:\n        set_other = other[icond]\n    try:\n        result[icond] = set_other\n    except (NotImplementedError, TypeError):\n        # NotImplementedError for class not implementing `__setitem__`\n        # TypeError for SparseArray, which implements just to raise\n        # a TypeError\n        result = self._holder._from_sequence(\n            np.where(cond, self.values, other), dtype=dtype\n        )\n\n    return [self.make_block_same_class(result, placement=self.mgr_locs)]",
                "@property\ndef _ftype(self):\n    return getattr(self.values, \"_pandas_ftype\", Block._ftype)",
                "def _unstack(self, unstacker_func, new_columns, n_rows, fill_value):\n    # ExtensionArray-safe unstack.\n    # We override ObjectBlock._unstack, which unstacks directly on the\n    # values of the array. For EA-backed blocks, this would require\n    # converting to a 2-D ndarray of objects.\n    # Instead, we unstack an ndarray of integer positions, followed by\n    # a `take` on the actual values.\n    dummy_arr = np.arange(n_rows)\n    dummy_unstacker = functools.partial(unstacker_func, fill_value=-1)\n    unstacker = dummy_unstacker(dummy_arr)\n\n    new_placement, new_values, mask = self._get_unstack_items(\n        unstacker, new_columns\n    )\n\n    blocks = [\n        self.make_block_same_class(\n            self.values.take(indices, allow_fill=True, fill_value=fill_value),\n            [place],\n        )\n        for indices, place in zip(new_values.T, new_placement)\n    ]\n    return blocks, mask",
                "def external_values(self):\n    return self.values.astype(object)",
                "def equals(self, other) -> bool:\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    left, right = self.values, other.values\n    return ((left == right) | (np.isnan(left) & np.isnan(right))).all()",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, (np.floating, np.integer)) and not issubclass(\n            tipo.type, (np.datetime64, np.timedelta64)\n        )\n    return isinstance(\n        element, (float, int, np.floating, np.int_)\n    ) and not isinstance(\n        element,\n        (bool, np.bool_, datetime, timedelta, np.datetime64, np.timedelta64),\n    )",
                "def to_native_types(\n    self,\n    slicer=None,\n    na_rep=\"\",\n    float_format=None,\n    decimal=\".\",\n    quoting=None,\n    **kwargs,\n):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n\n    values = self.values\n    if slicer is not None:\n        values = values[:, slicer]\n\n    # see gh-13418: no special formatting is desired at the\n    # output (important for appropriate 'quoting' behaviour),\n    # so do not pass it through the FloatArrayFormatter\n    if float_format is None and decimal == \".\":\n        mask = isna(values)\n\n        if not quoting:\n            values = values.astype(str)\n        else:\n            values = np.array(values, dtype=\"object\")\n\n        values[mask] = na_rep\n        return values\n\n    from pandas.io.formats.format import FloatArrayFormatter\n\n    formatter = FloatArrayFormatter(\n        values,\n        na_rep=na_rep,\n        float_format=float_format,\n        decimal=decimal,\n        quoting=quoting,\n        fixed_width=False,\n    )\n    return formatter.get_result_as_array()",
                "def should_store(self, value):\n    # when inserting a column should not coerce integers to floats\n    # unnecessarily\n    return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, (np.floating, np.integer, np.complexfloating))\n    return isinstance(\n        element, (float, int, complex, np.float_, np.int_)\n    ) and not isinstance(element, (bool, np.bool_))",
                "def should_store(self, value):\n    return issubclass(value.dtype.type, np.complexfloating)",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return (\n            issubclass(tipo.type, np.integer)\n            and not issubclass(tipo.type, (np.datetime64, np.timedelta64))\n            and self.dtype.itemsize >= tipo.itemsize\n        )\n    return is_integer(element)",
                "def should_store(self, value):\n    return is_integer_dtype(value) and value.dtype == self.dtype",
                "@property\ndef _holder(self):\n    return DatetimeArray",
                "@property\ndef fill_value(self):\n    return np.datetime64(\"NaT\", \"ns\")",
                "def get_values(self, dtype=None):\n    \"\"\"\n    return object dtype as boxed values, such as Timestamps/Timedelta\n    \"\"\"\n    if is_object_dtype(dtype):\n        values = self.values.ravel()\n        result = self._holder(values).astype(object)\n        return result.reshape(self.values.shape)\n    return self.values",
                "def __init__(self, values, placement, ndim=None):\n    values = self._maybe_coerce_values(values)\n    super().__init__(values, placement=placement, ndim=ndim)",
                "@property\ndef _can_hold_na(self):\n    return True",
                "def _maybe_coerce_values(self, values):\n    \"\"\"\n    Input validation for values passed to __init__. Ensure that\n    we have datetime64ns, coercing if necessary.\n\n    Parameters\n    ----------\n    values : array-like\n        Must be convertible to datetime64\n\n    Returns\n    -------\n    values : ndarray[datetime64ns]\n\n    Overridden by DatetimeTZBlock.\n    \"\"\"\n    if values.dtype != _NS_DTYPE:\n        values = conversion.ensure_datetime64ns(values)\n\n    if isinstance(values, DatetimeArray):\n        values = values._data\n\n    assert isinstance(values, np.ndarray), type(values)\n    return values",
                "def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n    \"\"\"\n    these automatically copy, so copy=True has no effect\n    raise on an except if raise == True\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    # if we are passed a datetime64[ns, tz]\n    if is_datetime64tz_dtype(dtype):\n        values = self.values\n        if getattr(values, \"tz\", None) is None:\n            values = DatetimeArray(values).tz_localize(\"UTC\")\n        values = values.tz_convert(dtype.tz)\n        return self.make_block(values)\n\n    # delegate\n    return super().astype(dtype=dtype, copy=copy, errors=errors)",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        if self.is_datetimetz:\n            # require exact match, since non-nano does not exist\n            return is_dtype_equal(tipo, self.dtype) or is_valid_nat_for_dtype(\n                element, self.dtype\n            )\n\n        # GH#27419 if we get a non-nano datetime64 object\n        return is_datetime64_dtype(tipo)\n    elif element is NaT:\n        return True\n    elif isinstance(element, datetime):\n        if self.is_datetimetz:\n            return tz_compare(element.tzinfo, self.dtype.tz)\n        return element.tzinfo is None\n\n    return is_valid_nat_for_dtype(element, self.dtype)",
                "def to_native_types(\n    self, slicer=None, na_rep=None, date_format=None, quoting=None, **kwargs\n):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n\n    values = self.values\n    i8values = self.values.view(\"i8\")\n\n    if slicer is not None:\n        values = values[..., slicer]\n        i8values = i8values[..., slicer]\n\n    from pandas.io.formats.format import _get_format_datetime64_from_values\n\n    fmt = _get_format_datetime64_from_values(values, date_format)\n\n    result = tslib.format_array_from_datetime(\n        i8values.ravel(),\n        tz=getattr(self.values, \"tz\", None),\n        format=fmt,\n        na_rep=na_rep,\n    ).reshape(i8values.shape)\n    return np.atleast_2d(result)",
                "def should_store(self, value):\n    return (\n        issubclass(value.dtype.type, np.datetime64)\n        and not is_datetime64tz_dtype(value)\n        and not is_extension_array_dtype(value)\n    )",
                "def set(self, locs, values):\n    \"\"\"\n    Modify Block in-place with new item value\n\n    Returns\n    -------\n    None\n    \"\"\"\n    values = conversion.ensure_datetime64ns(values, copy=False)\n\n    self.values[locs] = values",
                "def external_values(self):\n    return np.asarray(self.values.astype(\"datetime64[ns]\", copy=False))",
                "def array_values(self) -> ExtensionArray:\n    return DatetimeArray._simple_new(self.values)",
                "@property\ndef _holder(self):\n    return DatetimeArray",
                "def _maybe_coerce_values(self, values):\n    \"\"\"Input validation for values passed to __init__. Ensure that\n    we have datetime64TZ, coercing if necessary.\n\n    Parameters\n    ----------\n    values : array-like\n        Must be convertible to datetime64\n\n    Returns\n    -------\n    values : DatetimeArray\n    \"\"\"\n    if not isinstance(values, self._holder):\n        values = self._holder(values)\n\n    if values.tz is None:\n        raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n    return values",
                "@property\ndef is_view(self):\n    \"\"\" return a boolean if I am possibly a view \"\"\"\n    # check the ndarray values of the DatetimeIndex values\n    return self.values._data.base is not None",
                "def get_values(self, dtype=None):\n    \"\"\"\n    Returns an ndarray of values.\n\n    Parameters\n    ----------\n    dtype : np.dtype\n        Only `object`-like dtypes are respected here (not sure\n        why).\n\n    Returns\n    -------\n    values : ndarray\n        When ``dtype=object``, then and object-dtype ndarray of\n        boxed values is returned. Otherwise, an M8[ns] ndarray\n        is returned.\n\n        DatetimeArray is always 1-d. ``get_values`` will reshape\n        the return value to be the same dimensionality as the\n        block.\n    \"\"\"\n    values = self.values\n    if is_object_dtype(dtype):\n        values = values.astype(object)\n\n    values = np.asarray(values)\n\n    if self.ndim == 2:\n        # Ensure that our shape is correct for DataFrame.\n        # ExtensionArrays are always 1-D, even in a DataFrame when\n        # the analogous NumPy-backed column would be a 2-D ndarray.\n        values = values.reshape(1, -1)\n    return values",
                "def to_dense(self):\n    # we request M8[ns] dtype here, even though it discards tzinfo,\n    # as lots of code (e.g. anything using values_from_object)\n    # expects that behavior.\n    return np.asarray(self.values, dtype=_NS_DTYPE)",
                "def _slice(self, slicer):\n    \"\"\" return a slice of my values \"\"\"\n    if isinstance(slicer, tuple):\n        col, loc = slicer\n        if not com.is_null_slice(col) and col != 0:\n            raise IndexError(f\"{self} only contains one item\")\n        return self.values[loc]\n    return self.values[slicer]",
                "def diff(self, n: int, axis: int = 0) -> List[\"Block\"]:\n    \"\"\"\n    1st discrete difference.\n\n    Parameters\n    ----------\n    n : int\n        Number of periods to diff.\n    axis : int, default 0\n        Axis to diff upon.\n\n    Returns\n    -------\n    A list with a new TimeDeltaBlock.\n\n    Notes\n    -----\n    The arguments here are mimicking shift so they are called correctly\n    by apply.\n    \"\"\"\n    if axis == 0:\n        # Cannot currently calculate diff across multiple blocks since this\n        # function is invoked via apply\n        raise NotImplementedError\n    new_values = (self.values - self.shift(n, axis=axis)[0].values).asi8\n\n    # Reshape the new_values like how algos.diff does for timedelta data\n    new_values = new_values.reshape(1, len(new_values))\n    new_values = new_values.astype(\"timedelta64[ns]\")\n    return [TimeDeltaBlock(new_values, placement=self.mgr_locs.indexer)]",
                "def concat_same_type(self, to_concat, placement=None):\n    # need to handle concat([tz1, tz2]) here, since DatetimeArray\n    # only handles cases where all the tzs are the same.\n    # Instead of placing the condition here, it could also go into the\n    # is_uniform_join_units check, but I'm not sure what is better.\n    if len({x.dtype for x in to_concat}) > 1:\n        values = concat_datetime([x.values for x in to_concat])\n        placement = placement or slice(0, len(values), 1)\n\n        if self.ndim > 1:\n            values = np.atleast_2d(values)\n        return ObjectBlock(values, ndim=self.ndim, placement=placement)\n    return super().concat_same_type(to_concat, placement)",
                "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    # We support filling a DatetimeTZ with a `value` whose timezone\n    # is different by coercing to object.\n    if self._can_hold_element(value):\n        return super().fillna(value, limit, inplace, downcast)\n\n    # different timezones, or a non-tz\n    return self.astype(object).fillna(\n        value, limit=limit, inplace=inplace, downcast=downcast\n    )",
                "def setitem(self, indexer, value):\n    # https://github.com/pandas-dev/pandas/issues/24020\n    # Need a dedicated setitem until #24020 (type promotion in setitem\n    # for extension arrays) is designed and implemented.\n    if self._can_hold_element(value) or (\n        isinstance(indexer, np.ndarray) and indexer.size == 0\n    ):\n        return super().setitem(indexer, value)\n\n    obj_vals = self.values.astype(object)\n    newb = make_block(\n        obj_vals, placement=self.mgr_locs, klass=ObjectBlock, ndim=self.ndim\n    )\n    return newb.setitem(indexer, value)",
                "def equals(self, other) -> bool:\n    # override for significant performance improvement\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    return (self.values.view(\"i8\") == other.values.view(\"i8\")).all()",
                "def quantile(self, qs, interpolation=\"linear\", axis=0):\n    naive = self.values.view(\"M8[ns]\")\n\n    # kludge for 2D block with 1D values\n    naive = naive.reshape(self.shape)\n\n    blk = self.make_block(naive)\n    res_blk = blk.quantile(qs, interpolation=interpolation, axis=axis)\n\n    # ravel is kludge for 2D block with 1D values, assumes column-like\n    aware = self._holder(res_blk.values.ravel(), dtype=self.dtype)\n    return self.make_block_same_class(aware, ndim=res_blk.ndim)",
                "def __init__(self, values, placement, ndim=None):\n    if values.dtype != _TD_DTYPE:\n        values = conversion.ensure_timedelta64ns(values)\n    if isinstance(values, TimedeltaArray):\n        values = values._data\n    assert isinstance(values, np.ndarray), type(values)\n    super().__init__(values, placement=placement, ndim=ndim)",
                "@property\ndef _holder(self):\n    return TimedeltaArray",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, np.timedelta64)\n    elif element is NaT:\n        return True\n    elif isinstance(element, (timedelta, np.timedelta64)):\n        return True\n    return is_valid_nat_for_dtype(element, self.dtype)",
                "def fillna(self, value, **kwargs):\n\n    # allow filling with integers to be\n    # interpreted as nanoseconds\n    if is_integer(value):\n        # Deprecation GH#24694, GH#19233\n        raise TypeError(\n            \"Passing integers to fillna for timedelta64[ns] dtype is no \"\n            \"longer supported.  To obtain the old behavior, pass \"\n            \"`pd.Timedelta(seconds=n)` instead.\"\n        )\n    return super().fillna(value, **kwargs)",
                "def should_store(self, value):\n    return issubclass(\n        value.dtype.type, np.timedelta64\n    ) and not is_extension_array_dtype(value)",
                "def to_native_types(self, slicer=None, na_rep=None, quoting=None, **kwargs):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n\n    values = self.values\n    if slicer is not None:\n        values = values[:, slicer]\n    mask = isna(values)\n\n    rvalues = np.empty(values.shape, dtype=object)\n    if na_rep is None:\n        na_rep = \"NaT\"\n    rvalues[mask] = na_rep\n    imask = (~mask).ravel()\n\n    # FIXME:\n    # should use the formats.format.Timedelta64Formatter here\n    # to figure what format to pass to the Timedelta\n    # e.g. to not show the decimals say\n    rvalues.flat[imask] = np.array(\n        [Timedelta(val)._repr_base(format=\"all\") for val in values.ravel()[imask]],\n        dtype=object,\n    )\n    return rvalues",
                "def external_values(self):\n    return np.asarray(self.values.astype(\"timedelta64[ns]\", copy=False))",
                "def array_values(self) -> ExtensionArray:\n    return TimedeltaArray._simple_new(self.values)",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, np.bool_)\n    return isinstance(element, (bool, np.bool_))",
                "def should_store(self, value):\n    return issubclass(value.dtype.type, np.bool_) and not is_extension_array_dtype(\n        value\n    )",
                "def replace(\n    self, to_replace, value, inplace=False, filter=None, regex=False, convert=True\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    to_replace_values = np.atleast_1d(to_replace)\n    if not np.can_cast(to_replace_values, bool):\n        return self\n    return super().replace(\n        to_replace,\n        value,\n        inplace=inplace,\n        filter=filter,\n        regex=regex,\n        convert=convert,\n    )",
                "def __init__(self, values, placement=None, ndim=2):\n    if issubclass(values.dtype.type, str):\n        values = np.array(values, dtype=object)\n\n    super().__init__(values, ndim=ndim, placement=placement)",
                "@property\ndef is_bool(self):\n    \"\"\" we can be a bool if we have only bool values but are of type\n    object\n    \"\"\"\n    return lib.is_bool_array(self.values.ravel())",
                "def convert(\n    self,\n    copy: bool = True,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n):\n    \"\"\" attempt to coerce any object types to better types return a copy of\n    the block (if copy = True) by definition we ARE an ObjectBlock!!!!!\n\n    can return multiple blocks!\n    \"\"\"\n\n    # operate column-by-column\n    def f(mask, val, idx):\n        shape = val.shape\n        values = soft_convert_objects(\n            val.ravel(),\n            datetime=datetime,\n            numeric=numeric,\n            timedelta=timedelta,\n            coerce=coerce,\n            copy=copy,\n        )\n        if isinstance(values, np.ndarray):\n            # TODO: allow EA once reshape is supported\n            values = values.reshape(shape)\n\n        values = _block_shape(values, ndim=self.ndim)\n        return values\n\n    if self.ndim == 2:\n        blocks = self.split_and_operate(None, f, False)\n    else:\n        values = f(None, self.values.ravel(), None)\n        blocks = [make_block(values, ndim=self.ndim, placement=self.mgr_locs)]\n\n    return blocks",
                "def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n    if downcast is not None:\n        return blocks\n\n    # split and convert the blocks\n    return _extend_blocks([b.convert(datetime=True, numeric=False) for b in blocks])",
                "def _can_hold_element(self, element: Any) -> bool:\n    return True",
                "def should_store(self, value):\n    return not (\n        issubclass(\n            value.dtype.type,\n            (np.integer, np.floating, np.complexfloating, np.datetime64, np.bool_),\n        )\n        or is_extension_array_dtype(value)\n    )",
                "def replace(\n    self, to_replace, value, inplace=False, filter=None, regex=False, convert=True\n):\n    to_rep_is_list = is_list_like(to_replace)\n    value_is_list = is_list_like(value)\n    both_lists = to_rep_is_list and value_is_list\n    either_list = to_rep_is_list or value_is_list\n\n    result_blocks = []\n    blocks = [self]\n\n    if not either_list and is_re(to_replace):\n        return self._replace_single(\n            to_replace,\n            value,\n            inplace=inplace,\n            filter=filter,\n            regex=True,\n            convert=convert,\n        )\n    elif not (either_list or regex):\n        return super().replace(\n            to_replace,\n            value,\n            inplace=inplace,\n            filter=filter,\n            regex=regex,\n            convert=convert,\n        )\n    elif both_lists:\n        for to_rep, v in zip(to_replace, value):\n            result_blocks = []\n            for b in blocks:\n                result = b._replace_single(\n                    to_rep,\n                    v,\n                    inplace=inplace,\n                    filter=filter,\n                    regex=regex,\n                    convert=convert,\n                )\n                result_blocks = _extend_blocks(result, result_blocks)\n            blocks = result_blocks\n        return result_blocks\n\n    elif to_rep_is_list and regex:\n        for to_rep in to_replace:\n            result_blocks = []\n            for b in blocks:\n                result = b._replace_single(\n                    to_rep,\n                    value,\n                    inplace=inplace,\n                    filter=filter,\n                    regex=regex,\n                    convert=convert,\n                )\n                result_blocks = _extend_blocks(result, result_blocks)\n            blocks = result_blocks\n        return result_blocks\n\n    return self._replace_single(\n        to_replace,\n        value,\n        inplace=inplace,\n        filter=filter,\n        convert=convert,\n        regex=regex,\n    )",
                "def _replace_single(\n    self,\n    to_replace,\n    value,\n    inplace=False,\n    filter=None,\n    regex=False,\n    convert=True,\n    mask=None,\n):\n    \"\"\"\n    Replace elements by the given value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    filter : list, optional\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    a new block, the result after replacing\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # to_replace is regex compilable\n    to_rep_re = regex and is_re_compilable(to_replace)\n\n    # regex is regex compilable\n    regex_re = is_re_compilable(regex)\n\n    # only one will survive\n    if to_rep_re and regex_re:\n        raise AssertionError(\n            \"only one of to_replace and regex can be regex compilable\"\n        )\n\n    # if regex was passed as something that can be a regex (rather than a\n    # boolean)\n    if regex_re:\n        to_replace = regex\n\n    regex = regex_re or to_rep_re\n\n    # try to get the pattern attribute (compiled re) or it's a string\n    if is_re(to_replace):\n        pattern = to_replace.pattern\n    else:\n        pattern = to_replace\n\n    # if the pattern is not empty and to_replace is either a string or a\n    # regex\n    if regex and pattern:\n        rx = re.compile(to_replace)\n    else:\n        # if the thing to replace is not a string or compiled regex call\n        # the superclass method -> to_replace is some kind of object\n        return super().replace(\n            to_replace, value, inplace=inplace, filter=filter, regex=regex\n        )\n\n    new_values = self.values if inplace else self.values.copy()\n\n    # deal with replacing values with objects (strings) that match but\n    # whose replacement is not a string (numeric, nan, object)\n    if isna(value) or not isinstance(value, str):\n\n        def re_replacer(s):\n            if is_re(rx) and isinstance(s, str):\n                return value if rx.search(s) is not None else s\n            else:\n                return s\n\n    else:\n        # value is guaranteed to be a string here, s can be either a string\n        # or null if it's null it gets returned\n        def re_replacer(s):\n            if is_re(rx) and isinstance(s, str):\n                return rx.sub(value, s)\n            else:\n                return s\n\n    f = np.vectorize(re_replacer, otypes=[self.dtype])\n\n    if filter is None:\n        filt = slice(None)\n    else:\n        filt = self.mgr_locs.isin(filter).nonzero()[0]\n\n    if mask is None:\n        new_values[filt] = f(new_values[filt])\n    else:\n        new_values[filt][mask] = f(new_values[filt][mask])\n\n    # convert\n    block = self.make_block(new_values)\n    if convert:\n        block = block.convert(numeric=False)\n    return block",
                "def _replace_coerce(\n    self, to_replace, value, inplace=True, regex=False, convert=False, mask=None\n):\n    \"\"\"\n    Replace value corresponding to the given boolean array with another\n    value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    A new block if there is anything to replace or the original block.\n    \"\"\"\n    if mask.any():\n        block = super()._replace_coerce(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n            mask=mask,\n        )\n        if convert:\n            block = [b.convert(numeric=False, copy=True) for b in block]\n        return block\n    if convert:\n        return [self.convert(numeric=False, copy=True)]\n    return self",
                "def __init__(self, values, placement, ndim=None):\n    # coerce to categorical if we can\n    values = extract_array(values)\n    assert isinstance(values, Categorical), type(values)\n    super().__init__(values, placement=placement, ndim=ndim)",
                "@property\ndef _holder(self):\n    return Categorical",
                "@property\ndef array_dtype(self):\n    \"\"\" the dtype to return if I want to construct this block as an\n    array\n    \"\"\"\n    return np.object_",
                "def to_dense(self):\n    # Categorical.get_values returns a DatetimeIndex for datetime\n    # categories, so we can't simply use `np.asarray(self.values)` like\n    # other types.\n    return self.values._internal_get_values()",
                "def to_native_types(self, slicer=None, na_rep=\"\", quoting=None, **kwargs):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n\n    values = self.values\n    if slicer is not None:\n        # Categorical is always one dimension\n        values = values[slicer]\n    mask = isna(values)\n    values = np.array(values, dtype=\"object\")\n    values[mask] = na_rep\n\n    # we are expected to return a 2-d ndarray\n    return values.reshape(1, len(values))",
                "def concat_same_type(self, to_concat, placement=None):\n    \"\"\"\n    Concatenate list of single blocks of the same type.\n\n    Note that this CategoricalBlock._concat_same_type *may* not\n    return a CategoricalBlock. When the categories in `to_concat`\n    differ, this will return an object ndarray.\n\n    If / when we decide we don't like that behavior:\n\n    1. Change Categorical._concat_same_type to use union_categoricals\n    2. Delete this method.\n    \"\"\"\n    values = self._concatenator(\n        [blk.values for blk in to_concat], axis=self.ndim - 1\n    )\n    # not using self.make_block_same_class as values can be object dtype\n    return make_block(\n        values, placement=placement or slice(0, len(values), 1), ndim=self.ndim\n    )",
                "def replace(\n    self,\n    to_replace,\n    value,\n    inplace: bool = False,\n    filter=None,\n    regex: bool = False,\n    convert: bool = True,\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    result = self if inplace else self.copy()\n    if filter is None:  # replace was called on a series\n        result.values.replace(to_replace, value, inplace=True)\n        if convert:\n            return result.convert(numeric=False, copy=not inplace)\n        else:\n            return result\n    else:  # replace was called on a DataFrame\n        if not isna(value):\n            result.values.add_categories(value, inplace=True)\n        return super(CategoricalBlock, result).replace(\n            to_replace, value, inplace, filter, regex, convert\n        )",
                "def _putmask_preserve(nv, n):\n    try:\n        nv[mask] = n[mask]\n    except (IndexError, ValueError):\n        nv[mask] = n\n    return nv",
                "def f(mask, val, idx):\n    block = self.coerce_to_target_dtype(value)\n\n    # slice out our block\n    if idx is not None:\n        # i.e. self.ndim == 2\n        block = block.getitem_block(slice(idx, idx + 1))\n    return block.fillna(value, limit=limit, inplace=inplace, downcast=None)",
                "def make_a_block(nv, ref_loc):\n    if isinstance(nv, list):\n        assert len(nv) == 1, nv\n        assert isinstance(nv[0], Block)\n        block = nv[0]\n    else:\n        # Put back the dimension that was taken from it and make\n        # a block out of the result.\n        nv = _block_shape(nv, ndim=self.ndim)\n        block = self.make_block(values=nv, placement=ref_loc)\n    return block",
                "def f(mask, val, idx):\n    val = maybe_downcast_to_dtype(val, dtype=\"infer\")\n    return val",
                "def check_int_bool(self, inplace):\n    # Only FloatBlocks will contain NaNs.\n    # timedelta subclasses IntBlock\n    if (self.is_bool or self.is_integer) and not self.is_timedelta:\n        if inplace:\n            return self\n        else:\n            return self.copy()",
                "def func(x):\n\n    # process a 1-d slice, returning it\n    # should the axis argument be handled below in apply_along_axis?\n    # i.e. not an arg to missing.interpolate_1d\n    return missing.interpolate_1d(\n        index,\n        x,\n        method=method,\n        limit=limit,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        fill_value=fill_value,\n        bounds_error=False,\n        **kwargs,\n    )",
                "def func(cond, values, other):\n\n    if not (\n        (self.is_integer or self.is_bool)\n        and lib.is_float(other)\n        and np.isnan(other)\n    ):\n        # np.where will cast integer array to floats in this case\n        if not self._can_hold_element(other):\n            raise TypeError\n        if lib.is_scalar(other) and isinstance(values, np.ndarray):\n            other = convert_scalar(values, other)\n\n    fastres = expressions.where(cond, values, other)\n    return fastres",
                "def f(mask, val, idx):\n    shape = val.shape\n    values = soft_convert_objects(\n        val.ravel(),\n        datetime=datetime,\n        numeric=numeric,\n        timedelta=timedelta,\n        coerce=coerce,\n        copy=copy,\n    )\n    if isinstance(values, np.ndarray):\n        # TODO: allow EA once reshape is supported\n        values = values.reshape(shape)\n\n    values = _block_shape(values, ndim=self.ndim)\n    return values",
                "def re_replacer(s):\n    if is_re(rx) and isinstance(s, str):\n        return value if rx.search(s) is not None else s\n    else:\n        return s",
                "def re_replacer(s):\n    if is_re(rx) and isinstance(s, str):\n        return rx.sub(value, s)\n    else:\n        return s",
                "def f(mask, val, idx):\n\n    if idx is None:\n        # ndim==1 case.\n        n = new\n    else:\n\n        if isinstance(new, np.ndarray):\n            n = np.squeeze(new[idx % new.shape[0]])\n        else:\n            n = np.array(new)\n\n        # type of the new block\n        dtype, _ = maybe_promote(n.dtype)\n\n        # we need to explicitly astype here to make a copy\n        n = n.astype(dtype)\n\n    nv = _putmask_smart(val, mask, n)\n    return nv"
            ],
            "inscope_function_signatures": [
                "get_block_type(values, dtype=None)",
                "make_block(values, placement, klass=None, ndim=None, dtype=None)",
                "_extend_blocks(result, blocks=None)",
                "_block_shape(values, ndim=1, shape=None)",
                "_merge_blocks(blocks, dtype=None, _can_consolidate=True)",
                "_safe_reshape(arr, new_shape)",
                "_putmask_smart(v, mask, n)",
                "__init__(self, values, placement, ndim=None)",
                "_check_ndim(self, values, ndim)",
                "_holder(self)",
                "_consolidate_key(self)",
                "_is_single_block(self)",
                "is_view(self)",
                "is_datelike(self)",
                "is_categorical_astype(self, dtype)",
                "external_values(self)",
                "internal_values(self)",
                "array_values(self) -> ExtensionArray",
                "get_values(self, dtype=None)",
                "get_block_values(self, dtype=None)",
                "to_dense(self)",
                "fill_value(self)",
                "mgr_locs(self)",
                "mgr_locs(self, new_mgr_locs)",
                "array_dtype(self)",
                "make_block(self, values, placement=None) -> 'Block'",
                "make_block_same_class(self, values, placement=None, ndim=None)",
                "__repr__(self) -> str",
                "__len__(self) -> int",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "_slice(self, slicer)",
                "getitem_block(self, slicer, new_mgr_locs=None)",
                "shape(self)",
                "dtype(self)",
                "ftype(self)",
                "merge(self, other)",
                "concat_same_type(self, to_concat, placement=None)",
                "iget(self, i)",
                "set(self, locs, values)",
                "delete(self, loc)",
                "apply(self, func, **kwargs) -> List['Block']",
                "_split_op_result(self, result) -> List['Block']",
                "fillna(self, value, limit=None, inplace=False, downcast=None)",
                "split_and_operate(self, mask, f, inplace: bool)",
                "_maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']",
                "downcast(self, dtypes=None)",
                "astype(self, dtype, copy: bool=False, errors: str='raise')",
                "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
                "_can_hold_element(self, element: Any) -> bool",
                "to_native_types(self, slicer=None, na_rep='nan', quoting=None, **kwargs)",
                "copy(self, deep=True)",
                "replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
                "_replace_single(self, *args, **kwargs)",
                "setitem(self, indexer, value)",
                "putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False)",
                "coerce_to_target_dtype(self, other)",
                "interpolate(self, method='pad', axis=0, index=None, values=None, inplace=False, limit=None, limit_direction='forward', limit_area=None, fill_value=None, coerce=False, downcast=None, **kwargs)",
                "_interpolate_with_fill(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, coerce=False, downcast=None)",
                "_interpolate(self, method=None, index=None, values=None, fill_value=None, axis=0, limit=None, limit_direction='forward', limit_area=None, inplace=False, downcast=None, **kwargs)",
                "take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None)",
                "diff(self, n: int, axis: int=1) -> List['Block']",
                "shift(self, periods, axis=0, fill_value=None)",
                "where(self, other, cond, align=True, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']",
                "equals(self, other) -> bool",
                "_unstack(self, unstacker_func, new_columns, n_rows, fill_value)",
                "quantile(self, qs, interpolation='linear', axis=0)",
                "_replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None)",
                "__init__(self, values, placement, ndim=None)",
                "shape(self)",
                "iget(self, col)",
                "should_store(self, value)",
                "set(self, locs, values, check=False)",
                "putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False)",
                "_get_unstack_items(self, unstacker, new_columns)",
                "__init__(self, values, placement, ndim=None)",
                "_maybe_coerce_values(self, values)",
                "_holder(self)",
                "fill_value(self)",
                "_can_hold_na(self)",
                "is_view(self)",
                "is_numeric(self)",
                "setitem(self, indexer, value)",
                "get_values(self, dtype=None)",
                "array_values(self) -> ExtensionArray",
                "to_dense(self)",
                "to_native_types(self, slicer=None, na_rep='nan', quoting=None, **kwargs)",
                "take_nd(self, indexer, axis=0, new_mgr_locs=None, fill_tuple=None)",
                "_can_hold_element(self, element: Any) -> bool",
                "_slice(self, slicer)",
                "concat_same_type(self, to_concat, placement=None)",
                "fillna(self, value, limit=None, inplace=False, downcast=None)",
                "interpolate(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, **kwargs)",
                "diff(self, n: int, axis: int=1) -> List['Block']",
                "shift(self, periods: int, axis: libinternals.BlockPlacement=0, fill_value: Any=None) -> List['ExtensionBlock']",
                "where(self, other, cond, align=True, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']",
                "_ftype(self)",
                "_unstack(self, unstacker_func, new_columns, n_rows, fill_value)",
                "external_values(self)",
                "equals(self, other) -> bool",
                "_can_hold_element(self, element: Any) -> bool",
                "to_native_types(self, slicer=None, na_rep='', float_format=None, decimal='.', quoting=None, **kwargs)",
                "should_store(self, value)",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value)",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value)",
                "_holder(self)",
                "fill_value(self)",
                "get_values(self, dtype=None)",
                "__init__(self, values, placement, ndim=None)",
                "_can_hold_na(self)",
                "_maybe_coerce_values(self, values)",
                "astype(self, dtype, copy: bool=False, errors: str='raise')",
                "_can_hold_element(self, element: Any) -> bool",
                "to_native_types(self, slicer=None, na_rep=None, date_format=None, quoting=None, **kwargs)",
                "should_store(self, value)",
                "set(self, locs, values)",
                "external_values(self)",
                "array_values(self) -> ExtensionArray",
                "_holder(self)",
                "_maybe_coerce_values(self, values)",
                "is_view(self)",
                "get_values(self, dtype=None)",
                "to_dense(self)",
                "_slice(self, slicer)",
                "diff(self, n: int, axis: int=0) -> List['Block']",
                "concat_same_type(self, to_concat, placement=None)",
                "fillna(self, value, limit=None, inplace=False, downcast=None)",
                "setitem(self, indexer, value)",
                "equals(self, other) -> bool",
                "quantile(self, qs, interpolation='linear', axis=0)",
                "__init__(self, values, placement, ndim=None)",
                "_holder(self)",
                "_can_hold_element(self, element: Any) -> bool",
                "fillna(self, value, **kwargs)",
                "should_store(self, value)",
                "to_native_types(self, slicer=None, na_rep=None, quoting=None, **kwargs)",
                "external_values(self)",
                "array_values(self) -> ExtensionArray",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value)",
                "replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
                "__init__(self, values, placement=None, ndim=2)",
                "is_bool(self)",
                "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
                "_maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value)",
                "replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
                "_replace_single(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True, mask=None)",
                "_replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None)",
                "__init__(self, values, placement, ndim=None)",
                "_holder(self)",
                "array_dtype(self)",
                "to_dense(self)",
                "to_native_types(self, slicer=None, na_rep='', quoting=None, **kwargs)",
                "concat_same_type(self, to_concat, placement=None)",
                "replace(self, to_replace, value, inplace: bool=False, filter=None, regex: bool=False, convert: bool=True)",
                "_putmask_preserve(nv, n)",
                "f(mask, val, idx)",
                "make_a_block(nv, ref_loc)",
                "f(mask, val, idx)",
                "check_int_bool(self, inplace)",
                "func(x)",
                "func(cond, values, other)",
                "f(mask, val, idx)",
                "re_replacer(s)",
                "re_replacer(s)",
                "f(mask, val, idx)"
            ],
            "variables_in_file": {
                "PandasObject": [
                    91
                ],
                "__slots__": [
                    2528,
                    2561,
                    99,
                    2022,
                    2086,
                    2862,
                    2450,
                    2006,
                    2102,
                    2012,
                    2270,
                    2143
                ],
                "is_numeric": [
                    100,
                    2453,
                    2007
                ],
                "is_float": [
                    101,
                    2023
                ],
                "is_integer": [
                    2482,
                    2114,
                    102,
                    2103
                ],
                "is_complex": [
                    2087,
                    103
                ],
                "is_datetime": [
                    104,
                    2144
                ],
                "is_datetimetz": [
                    105,
                    2271
                ],
                "is_timedelta": [
                    106,
                    2451
                ],
                "is_bool": [
                    2529,
                    107
                ],
                "is_object": [
                    2562,
                    108
                ],
                "is_categorical": [
                    109,
                    2974,
                    2863
                ],
                "is_extension": [
                    2272,
                    1713,
                    110
                ],
                "_can_hold_na": [
                    2530,
                    2563,
                    111,
                    2865,
                    2452,
                    2008,
                    2104
                ],
                "_can_consolidate": [
                    112,
                    3062,
                    1583
                ],
                "_verify_integrity": [
                    1584,
                    113,
                    2864
                ],
                "_validate_ndim": [
                    1585,
                    114
                ],
                "_ftype": [
                    115
                ],
                "_concatenator": [
                    2866,
                    116
                ],
                "staticmethod": [
                    2866,
                    116
                ],
                "np.concatenate": [
                    116,
                    3070
                ],
                "np": [
                    3073,
                    2567,
                    2062,
                    2082,
                    2603,
                    2092,
                    2094,
                    2095,
                    2098,
                    3131,
                    2110,
                    2111,
                    2633,
                    2129,
                    3155,
                    3070,
                    3071,
                    3164,
                    116,
                    1661,
                    640,
                    2176,
                    689,
                    2239,
                    2243,
                    1226,
                    2261,
                    2276,
                    1256,
                    2800,
                    245,
                    758,
                    1792,
                    1801,
                    1810,
                    2334,
                    1316,
                    1317,
                    2347,
                    833,
                    2883,
                    2899,
                    2399,
                    867,
                    1388,
                    1393,
                    2419,
                    382,
                    389,
                    2454,
                    1431,
                    2461,
                    2976,
                    1959,
                    2471,
                    2985,
                    2474,
                    2987,
                    2988,
                    2990,
                    2992,
                    2994,
                    1975,
                    955,
                    2493,
                    3007,
                    967,
                    2504,
                    977,
                    2514,
                    467,
                    979,
                    983,
                    2521,
                    989,
                    2018,
                    1509,
                    1510,
                    2535,
                    2536,
                    1514,
                    2539,
                    2028,
                    1517,
                    2029,
                    1008,
                    1009,
                    2032,
                    1011,
                    2035,
                    1525,
                    2547,
                    2548,
                    1534,
                    1535
                ],
                "self.ndim": [
                    1793,
                    643,
                    1421,
                    273,
                    401,
                    1300,
                    407,
                    280,
                    2336,
                    420,
                    1319,
                    1832,
                    175,
                    1200,
                    2607,
                    2610,
                    309,
                    2614,
                    954,
                    828,
                    700,
                    1862,
                    330,
                    1610,
                    1869,
                    1616,
                    1361,
                    1496,
                    2398,
                    479,
                    1376,
                    2400,
                    995,
                    484,
                    359,
                    2919,
                    2923,
                    1905,
                    119,
                    2425,
                    123
                ],
                "self": [
                    2049,
                    2082,
                    2112,
                    2117,
                    2136,
                    2137,
                    2138,
                    2139,
                    2147,
                    119,
                    120,
                    121,
                    123,
                    125,
                    126,
                    2188,
                    2192,
                    2200,
                    153,
                    2202,
                    2203,
                    2211,
                    2212,
                    2215,
                    171,
                    2222,
                    175,
                    2223,
                    180,
                    185,
                    2235,
                    2258,
                    211,
                    2261,
                    2264,
                    217,
                    223,
                    231,
                    232,
                    238,
                    241,
                    2295,
                    2296,
                    249,
                    256,
                    2307,
                    263,
                    271,
                    273,
                    278,
                    280,
                    281,
                    2330,
                    285,
                    286,
                    288,
                    2336,
                    292,
                    294,
                    295,
                    2347,
                    301,
                    304,
                    2354,
                    307,
                    308,
                    309,
                    2355,
                    2356,
                    313,
                    326,
                    328,
                    330,
                    333,
                    2382,
                    337,
                    2387,
                    341,
                    345,
                    346,
                    348,
                    349,
                    2398,
                    352,
                    2400,
                    358,
                    359,
                    2406,
                    361,
                    2410,
                    366,
                    2418,
                    2423,
                    376,
                    2425,
                    382,
                    383,
                    2431,
                    2433,
                    2436,
                    390,
                    2439,
                    392,
                    2441,
                    2445,
                    2446,
                    399,
                    401,
                    402,
                    407,
                    417,
                    420,
                    422,
                    424,
                    426,
                    428,
                    2476,
                    430,
                    431,
                    435,
                    439,
                    447,
                    2499,
                    467,
                    469,
                    2521,
                    2524,
                    479,
                    480,
                    484,
                    489,
                    494,
                    2549,
                    514,
                    525,
                    527,
                    2576,
                    530,
                    537,
                    541,
                    556,
                    2607,
                    2610,
                    2611,
                    2613,
                    2614,
                    592,
                    594,
                    596,
                    598,
                    2647,
                    2650,
                    603,
                    605,
                    606,
                    609,
                    611,
                    616,
                    617,
                    621,
                    624,
                    635,
                    641,
                    643,
                    645,
                    646,
                    649,
                    2699,
                    667,
                    671,
                    679,
                    686,
                    697,
                    700,
                    715,
                    718,
                    719,
                    721,
                    726,
                    727,
                    2779,
                    732,
                    743,
                    747,
                    2800,
                    757,
                    2805,
                    2813,
                    766,
                    771,
                    772,
                    775,
                    785,
                    788,
                    791,
                    806,
                    2857,
                    2858,
                    828,
                    832,
                    836,
                    837,
                    2889,
                    2894,
                    857,
                    858,
                    870,
                    2918,
                    2919,
                    2923,
                    2936,
                    908,
                    932,
                    938,
                    940,
                    942,
                    954,
                    955,
                    995,
                    1022,
                    1026,
                    1031,
                    1045,
                    1046,
                    1048,
                    1050,
                    1052,
                    1056,
                    1059,
                    1067,
                    1069,
                    1072,
                    1076,
                    1079,
                    1082,
                    1085,
                    1086,
                    1089,
                    1093,
                    1095,
                    1118,
                    1120,
                    1122,
                    1131,
                    1134,
                    1146,
                    1149,
                    1180,
                    1182,
                    1184,
                    1186,
                    1189,
                    1197,
                    1200,
                    1201,
                    1220,
                    1223,
                    1224,
                    1225,
                    1229,
                    1258,
                    1259,
                    1271,
                    1274,
                    1288,
                    1290,
                    1291,
                    1293,
                    1297,
                    1300,
                    1301,
                    1308,
                    1319,
                    1330,
                    1361,
                    1363,
                    1376,
                    1386,
                    1391,
                    1410,
                    1419,
                    1421,
                    1426,
                    1437,
                    1438,
                    1444,
                    1446,
                    1469,
                    1496,
                    1498,
                    1510,
                    1519,
                    1566,
                    1567,
                    1569,
                    1577,
                    1610,
                    1611,
                    1612,
                    1616,
                    1619,
                    1623,
                    1624,
                    1627,
                    1628,
                    1631,
                    1635,
                    1659,
                    1667,
                    1716,
                    1739,
                    1744,
                    1749,
                    1758,
                    1786,
                    1787,
                    1788,
                    1792,
                    1793,
                    1798,
                    1801,
                    1805,
                    1828,
                    1832,
                    1834,
                    1836,
                    1854,
                    1860,
                    1862,
                    1865,
                    1868,
                    1869,
                    1877,
                    1878,
                    1880,
                    1902,
                    1903,
                    1904,
                    1905,
                    1936,
                    1938,
                    1944,
                    1946,
                    1958,
                    1959,
                    1962,
                    1966,
                    1979,
                    1984,
                    1985,
                    2002,
                    2015,
                    2017
                ],
                "self._check_ndim": [
                    119
                ],
                "values": [
                    2049,
                    2051,
                    2566,
                    2567,
                    2057,
                    2569,
                    2060,
                    2062,
                    527,
                    2064,
                    2065,
                    2070,
                    536,
                    2595,
                    2603,
                    2605,
                    2607,
                    2608,
                    2613,
                    2614,
                    1606,
                    2136,
                    2137,
                    1635,
                    611,
                    2147,
                    2148,
                    617,
                    621,
                    624,
                    627,
                    629,
                    119,
                    121,
                    2170,
                    1659,
                    2171,
                    2173,
                    2174,
                    640,
                    641,
                    1152,
                    643,
                    2176,
                    2177,
                    2188,
                    2189,
                    2190,
                    2191,
                    2192,
                    151,
                    153,
                    156,
                    1186,
                    679,
                    1191,
                    1192,
                    682,
                    683,
                    2222,
                    687,
                    1200,
                    689,
                    2226,
                    691,
                    692,
                    1716,
                    1717,
                    2231,
                    697,
                    699,
                    700,
                    1734,
                    2256,
                    2258,
                    757,
                    758,
                    1271,
                    2295,
                    2296,
                    762,
                    2298,
                    764,
                    2301,
                    1792,
                    1281,
                    1793,
                    1794,
                    1795,
                    1805,
                    1807,
                    1808,
                    273,
                    1810,
                    1811,
                    1814,
                    281,
                    2330,
                    2332,
                    2334,
                    2340,
                    2341,
                    2870,
                    2871,
                    2872,
                    836,
                    1860,
                    1861,
                    1862,
                    841,
                    1865,
                    1866,
                    1869,
                    2382,
                    2894,
                    2897,
                    2898,
                    1363,
                    2899,
                    1877,
                    1366,
                    1879,
                    856,
                    2900,
                    2903,
                    2395,
                    2396,
                    1374,
                    2399,
                    1376,
                    2400,
                    358,
                    2918,
                    872,
                    362,
                    875,
                    2923,
                    878,
                    1393,
                    1394,
                    1396,
                    887,
                    1400,
                    376,
                    1405,
                    893,
                    894,
                    896,
                    898,
                    904,
                    907,
                    908,
                    2968,
                    2457,
                    2458,
                    2459,
                    2460,
                    2461,
                    2462,
                    2974,
                    2977,
                    2979,
                    2983,
                    3004,
                    3005,
                    3007,
                    2499,
                    2501,
                    2502,
                    3013,
                    2504,
                    3014,
                    3016,
                    3019,
                    3021,
                    2515,
                    1498,
                    1500,
                    1510,
                    1511,
                    3046,
                    3048,
                    1514,
                    3049,
                    1516,
                    3053,
                    3054,
                    1521
                ],
                "ndim": [
                    2569,
                    150,
                    279,
                    151,
                    281,
                    280,
                    153,
                    156,
                    2462,
                    158,
                    1717,
                    2872,
                    3006,
                    1601,
                    1603,
                    1605,
                    1606,
                    3021,
                    2148,
                    3046,
                    119,
                    1534,
                    1535
                ],
                "self.mgr_locs": [
                    643,
                    1288,
                    271,
                    399,
                    278,
                    1438,
                    294,
                    1834,
                    1962,
                    304,
                    307,
                    2614,
                    326,
                    1612,
                    1869,
                    2387,
                    1880,
                    489,
                    494,
                    1904,
                    2805,
                    120,
                    2425,
                    126,
                    123,
                    766,
                    383
                ],
                "placement": [
                    2569,
                    270,
                    271,
                    273,
                    277,
                    278,
                    281,
                    2462,
                    1717,
                    2872,
                    1597,
                    1598,
                    1602,
                    1861,
                    1606,
                    1862,
                    3021,
                    2396,
                    2400,
                    2401,
                    2148,
                    362,
                    2923,
                    120
                ],
                "self.values": [
                    2049,
                    527,
                    2576,
                    2613,
                    1611,
                    1612,
                    594,
                    596,
                    598,
                    1623,
                    1624,
                    2136,
                    2138,
                    2139,
                    1628,
                    611,
                    1635,
                    121,
                    1659,
                    123,
                    125,
                    2188,
                    671,
                    1186,
                    1189,
                    2222,
                    2223,
                    180,
                    697,
                    2235,
                    1220,
                    1739,
                    1744,
                    2258,
                    211,
                    2261,
                    2264,
                    217,
                    2779,
                    1758,
                    223,
                    231,
                    232,
                    241,
                    757,
                    1271,
                    1786,
                    1787,
                    1792,
                    2307,
                    1798,
                    1801,
                    1805,
                    1297,
                    2330,
                    1308,
                    1828,
                    2347,
                    301,
                    304,
                    2355,
                    308,
                    309,
                    2356,
                    313,
                    1854,
                    836,
                    1865,
                    2889,
                    2382,
                    2894,
                    337,
                    1363,
                    341,
                    1877,
                    345,
                    366,
                    1903,
                    2423,
                    376,
                    382,
                    2433,
                    2436,
                    390,
                    1938,
                    1946,
                    417,
                    932,
                    1446,
                    1959,
                    1966,
                    1469,
                    1985,
                    2499,
                    2002,
                    469,
                    2521,
                    2524,
                    2017
                ],
                "self._validate_ndim": [
                    153,
                    330,
                    123
                ],
                "len": [
                    1814,
                    288,
                    301,
                    1849,
                    3131,
                    1602,
                    1861,
                    970,
                    1611,
                    1612,
                    2385,
                    722,
                    978,
                    2903,
                    729,
                    473,
                    2394,
                    2396,
                    1510,
                    1511,
                    362,
                    2923,
                    3059,
                    125,
                    3065,
                    123,
                    892,
                    1661,
                    126,
                    1535
                ],
                "ValueError": [
                    544,
                    3169,
                    899,
                    1380,
                    582,
                    1094,
                    1127,
                    331,
                    782,
                    1233,
                    981,
                    630,
                    154,
                    2299,
                    124
                ],
                "values.ndim": [
                    1376,
                    1793,
                    3046,
                    1521,
                    151,
                    153,
                    156,
                    1374
                ],
                "property": [
                    258,
                    2571,
                    160,
                    2464,
                    169,
                    1964,
                    173,
                    177,
                    182,
                    2874,
                    2878,
                    1608,
                    1736,
                    2123,
                    1741,
                    335,
                    2127,
                    1746,
                    339,
                    1751,
                    343,
                    1756,
                    2150,
                    2278,
                    243,
                    247,
                    2303
                ],
                "self._can_consolidate": [
                    171
                ],
                "self.dtype.name": [
                    649,
                    171
                ],
                "self.dtype": [
                    263,
                    649,
                    1290,
                    2445,
                    1936,
                    1045,
                    1944,
                    2202,
                    2203,
                    1437,
                    288,
                    2082,
                    1444,
                    2212,
                    295,
                    2215,
                    171,
                    2476,
                    1197,
                    1072,
                    2112,
                    2117,
                    857,
                    346,
                    603,
                    348,
                    2015,
                    2800,
                    2431
                ],
                "self.values.base": [
                    180
                ],
                "self.is_datetime": [
                    185,
                    514,
                    1059,
                    1067
                ],
                "self.is_timedelta": [
                    514,
                    185,
                    1082,
                    1085,
                    1118
                ],
                "dtype": [
                    2184,
                    2187,
                    2191,
                    1043,
                    2195,
                    1045,
                    1942,
                    1048,
                    1944,
                    2968,
                    2331,
                    2969,
                    1053,
                    2971,
                    671,
                    674,
                    675,
                    1060,
                    1061,
                    2981,
                    1959,
                    1066,
                    1073,
                    2994,
                    1082,
                    1085,
                    192,
                    3009,
                    3010,
                    195,
                    197,
                    1093,
                    3013,
                    584,
                    3014,
                    586,
                    3019,
                    592,
                    848,
                    596,
                    852,
                    598,
                    2135,
                    600,
                    856,
                    346,
                    603,
                    348,
                    349,
                    857,
                    858,
                    611,
                    613,
                    230,
                    871,
                    872,
                    3178,
                    3180,
                    3181,
                    238,
                    3183,
                    624,
                    629,
                    1014,
                    3064,
                    1017
                ],
                "Categorical": [
                    192,
                    2876,
                    598,
                    2871
                ],
                "CategoricalDtype": [
                    192
                ],
                "TypeError": [
                    3137,
                    1954,
                    195,
                    1094,
                    647,
                    589,
                    782,
                    1392,
                    2484,
                    630,
                    1406
                ],
                "is_categorical_dtype": [
                    594,
                    197
                ],
                "PandasArray": [
                    223
                ],
                "ExtensionArray": [
                    219,
                    1797,
                    2523,
                    2263
                ],
                "is_object_dtype": [
                    230,
                    743,
                    3180,
                    785,
                    2135,
                    1048,
                    2331
                ],
                "self.values.astype": [
                    611,
                    231,
                    2002,
                    596,
                    2261,
                    2423,
                    2521
                ],
                "object": [
                    231,
                    1095,
                    2504,
                    2410,
                    747,
                    2567,
                    1069,
                    1810,
                    2002,
                    1076,
                    2516,
                    791,
                    2137,
                    1050,
                    2332,
                    1086,
                    2423
                ],
                "self.get_values": [
                    679,
                    621,
                    238,
                    624,
                    1498
                ],
                "self.values.view": [
                    241,
                    2433,
                    2436,
                    2223
                ],
                "np.nan": [
                    833,
                    245
                ],
                "self._mgr_locs": [
                    256,
                    249
                ],
                "isinstance": [
                    640,
                    2176,
                    1926,
                    406,
                    3098,
                    2295,
                    2459,
                    2461,
                    3100,
                    543,
                    2210,
                    675,
                    2474,
                    2603,
                    2093,
                    2095,
                    2351,
                    2173,
                    2871,
                    1849,
                    3004,
                    1597,
                    3009,
                    322,
                    716,
                    1616,
                    1620,
                    472,
                    3032,
                    474,
                    3034,
                    989,
                    1631,
                    2783,
                    3039,
                    2786,
                    2536,
                    2795,
                    2031,
                    1008,
                    1393,
                    2033,
                    2419,
                    758,
                    1782,
                    253,
                    1661,
                    1918
                ],
                "new_mgr_locs": [
                    256,
                    3073,
                    3075,
                    3077,
                    1286,
                    1287,
                    1288,
                    1291,
                    1293,
                    1832,
                    1833,
                    1834,
                    1836,
                    321,
                    326,
                    333,
                    254,
                    253,
                    3070
                ],
                "libinternals.BlockPlacement": [
                    1892,
                    307,
                    254,
                    253,
                    1597,
                    1598
                ],
                "libinternals": [
                    1892,
                    307,
                    254,
                    253,
                    1597,
                    1598
                ],
                "mgr_locs.setter": [
                    251
                ],
                "mgr_locs": [
                    251
                ],
                "make_block": [
                    643,
                    3077,
                    1478,
                    2922,
                    273,
                    2614,
                    2424,
                    281,
                    1535
                ],
                "type": [
                    2176,
                    1739,
                    2871,
                    281,
                    285,
                    2461,
                    3039
                ],
                "name": [
                    288,
                    285,
                    294
                ],
                "__name__": [
                    285
                ],
                "self._is_single_block": [
                    530,
                    286
                ],
                "result": [
                    2945,
                    2946,
                    390,
                    2695,
                    392,
                    1528,
                    396,
                    400,
                    1424,
                    1426,
                    406,
                    407,
                    409,
                    1946,
                    1436,
                    288,
                    1953,
                    293,
                    1958,
                    298,
                    1962,
                    2936,
                    2233,
                    2938,
                    2239,
                    2940,
                    2687,
                    2942,
                    3032,
                    2137,
                    2138,
                    3033,
                    3039,
                    3040,
                    1509,
                    1515,
                    2671,
                    1525,
                    1526,
                    2679,
                    1400,
                    1530,
                    1531,
                    1532,
                    1405,
                    1534,
                    1535
                ],
                "shape": [
                    2594,
                    292,
                    295,
                    3047,
                    3048,
                    970,
                    2605,
                    3053
                ],
                "join": [
                    292
                ],
                "pprint_thing": [
                    292,
                    294
                ],
                "s": [
                    2786,
                    2787,
                    292,
                    2789,
                    2795,
                    2796,
                    2798
                ],
                "self.shape": [
                    641,
                    292,
                    1444,
                    646,
                    2431,
                    2439,
                    649,
                    467,
                    955,
                    2015
                ],
                "self.mgr_locs.indexer": [
                    304,
                    2387,
                    294
                ],
                "str": [
                    2786,
                    2179,
                    613,
                    2566,
                    2795,
                    2060,
                    558,
                    283,
                    2783
                ],
                "int": [
                    1891,
                    300,
                    2094,
                    1295,
                    2032,
                    1339,
                    2358,
                    1883,
                    1916
                ],
                "state": [
                    307,
                    308
                ],
                "self.values.ndim": [
                    309
                ],
                "slicer": [
                    2050,
                    2051,
                    1806,
                    1807,
                    681,
                    682,
                    2351,
                    2352,
                    2225,
                    2226,
                    2227,
                    2356,
                    1849,
                    313,
                    1850,
                    1852,
                    1854,
                    322,
                    323,
                    2500,
                    325,
                    2501,
                    328,
                    2895,
                    2897
                ],
                "tuple": [
                    322,
                    998,
                    1324,
                    3053,
                    2351,
                    1616,
                    1782,
                    1849,
                    1375
                ],
                "axis0_slicer": [
                    323,
                    325,
                    326
                ],
                "new_values": [
                    1280,
                    1664,
                    1666,
                    1667,
                    3074,
                    1029,
                    3077,
                    1031,
                    1290,
                    1291,
                    1293,
                    1297,
                    1300,
                    1301,
                    1308,
                    1311,
                    1696,
                    1313,
                    1314,
                    1699,
                    932,
                    1316,
                    1317,
                    1828,
                    1324,
                    1836,
                    1328,
                    946,
                    1330,
                    949,
                    955,
                    956,
                    1979,
                    1472,
                    1475,
                    1988,
                    1478,
                    328,
                    330,
                    333,
                    2382,
                    977,
                    2385,
                    979,
                    2386,
                    469,
                    2387,
                    983,
                    2779,
                    991,
                    486,
                    488,
                    496,
                    2808,
                    2810,
                    1659,
                    2813,
                    3071
                ],
                "self._slice": [
                    328
                ],
                "new_values.ndim": [
                    330,
                    1314,
                    991
                ],
                "self.make_block_same_class": [
                    1984,
                    1862,
                    361,
                    1258,
                    1962,
                    1836,
                    333,
                    1293,
                    1868,
                    1200,
                    1902,
                    2446,
                    1878,
                    700
                ],
                "self.values.shape": [
                    337,
                    2138
                ],
                "self.values.dtype": [
                    1744,
                    341,
                    1758,
                    671
                ],
                "getattr": [
                    994,
                    934,
                    935,
                    968,
                    1369,
                    2189,
                    1966,
                    2235,
                    1072,
                    1073,
                    1368,
                    345,
                    953,
                    1373,
                    862
                ],
                "self.dtype.subtype": [
                    346
                ],
                "self._ftype": [
                    349
                ],
                "_merge_blocks": [
                    352
                ],
                "other": [
                    1921,
                    1410,
                    1922,
                    1924,
                    2433,
                    1932,
                    1936,
                    1043,
                    1948,
                    1949,
                    1951,
                    1444,
                    1446,
                    1959,
                    1079,
                    1089,
                    1364,
                    1368,
                    1373,
                    1374,
                    1375,
                    352,
                    2015,
                    2017,
                    1387,
                    1388,
                    1391,
                    1393,
                    1394,
                    1396,
                    1405,
                    1918,
                    2431
                ],
                "self._concatenator": [
                    2918,
                    358
                ],
                "blk.values": [
                    1860,
                    2919,
                    359
                ],
                "blk": [
                    1860,
                    2919,
                    359,
                    2441,
                    2442
                ],
                "to_concat": [
                    2401,
                    1860,
                    359,
                    2919,
                    2394,
                    2395
                ],
                "slice": [
                    1861,
                    1319,
                    1321,
                    362,
                    1323,
                    2923,
                    2803,
                    1620,
                    1621,
                    2396,
                    444
                ],
                "i": [
                    494,
                    495,
                    400,
                    366,
                    399,
                    496,
                    500,
                    1431
                ],
                "locs": [
                    376,
                    2258,
                    1634
                ],
                "np.delete": [
                    382
                ],
                "loc": [
                    399,
                    2352,
                    1617,
                    402,
                    2355,
                    1623,
                    1624,
                    382,
                    383
                ],
                "self.mgr_locs.delete": [
                    383
                ],
                "np.errstate": [
                    389
                ],
                "func": [
                    1256,
                    1405,
                    390
                ],
                "kwargs": [
                    1252,
                    806,
                    390,
                    1160,
                    1144,
                    2489
                ],
                "self._split_op_result": [
                    392
                ],
                "List": [
                    385,
                    1894,
                    394,
                    1917,
                    1295,
                    2358,
                    2618,
                    1883,
                    1340,
                    509
                ],
                "is_extension_array_dtype": [
                    2494,
                    2245,
                    2983,
                    3049,
                    2539,
                    396,
                    2635,
                    3180,
                    862
                ],
                "result.ndim": [
                    396
                ],
                "nbs": [
                    403,
                    404,
                    398
                ],
                "enumerate": [
                    494,
                    399
                ],
                "vals": [
                    400,
                    401
                ],
                "nv": [
                    401,
                    402,
                    536,
                    537,
                    3160,
                    472,
                    473,
                    474,
                    475,
                    3161,
                    3162,
                    479,
                    480,
                    3168,
                    3170,
                    3171,
                    486,
                    488,
                    489,
                    500,
                    502,
                    504,
                    1019,
                    1020
                ],
                "_block_shape": [
                    2607,
                    401,
                    1300,
                    407,
                    479
                ],
                "block": [
                    2816,
                    1410,
                    1411,
                    908,
                    909,
                    402,
                    403,
                    791,
                    792,
                    2845,
                    2854,
                    2855,
                    439,
                    444,
                    445,
                    475,
                    480,
                    481,
                    489,
                    490,
                    747,
                    748,
                    504,
                    505,
                    2813,
                    2815
                ],
                "self.make_block": [
                    480,
                    1667,
                    1031,
                    2441,
                    1291,
                    908,
                    2192,
                    402,
                    1330,
                    596,
                    1301,
                    598,
                    407,
                    1426,
                    537,
                    2813,
                    1438
                ],
                "nbs.append": [
                    403
                ],
                "Block": [
                    2560,
                    1702,
                    1966,
                    2005,
                    406,
                    474,
                    2142,
                    3039
                ],
                "inplace": [
                    1025,
                    770,
                    2690,
                    2947,
                    1158,
                    775,
                    2702,
                    1175,
                    795,
                    1181,
                    415,
                    1567,
                    801,
                    1186,
                    2848,
                    932,
                    1572,
                    423,
                    430,
                    2935,
                    435,
                    2741,
                    445,
                    447,
                    1219,
                    1220,
                    710,
                    1865,
                    717,
                    725,
                    1877,
                    2776,
                    1113,
                    2779,
                    2653,
                    735,
                    1119,
                    2662,
                    2407,
                    488,
                    1131,
                    2411,
                    751,
                    1137,
                    2546,
                    2674,
                    502,
                    1655,
                    2936,
                    2553,
                    1146,
                    1659,
                    2940,
                    1022
                ],
                "validate_bool_kwarg": [
                    1219,
                    710,
                    1655,
                    2935,
                    2546,
                    2741,
                    1175,
                    1113,
                    415
                ],
                "mask": [
                    1664,
                    769,
                    1666,
                    775,
                    2057,
                    1808,
                    2064,
                    1811,
                    1431,
                    1434,
                    1564,
                    2844,
                    1567,
                    1696,
                    417,
                    1698,
                    1699,
                    420,
                    2851,
                    935,
                    1575,
                    1662,
                    683,
                    430,
                    434,
                    691,
                    1979,
                    3131,
                    1472,
                    3136,
                    1474,
                    1475,
                    1476,
                    1990,
                    967,
                    1479,
                    2502,
                    970,
                    2507,
                    2508,
                    977,
                    466,
                    467,
                    978,
                    979,
                    2898,
                    983,
                    2900,
                    3161,
                    986,
                    988,
                    3168,
                    3170,
                    485,
                    486,
                    1514,
                    495,
                    1520,
                    2807,
                    2810,
                    1019,
                    764,
                    1661,
                    1022,
                    767
                ],
                "isna": [
                    2944,
                    417,
                    2502,
                    2057,
                    938,
                    683,
                    1514,
                    1932,
                    1808,
                    2898,
                    851,
                    2783
                ],
                "limit": [
                    418,
                    419,
                    420,
                    1154,
                    2407,
                    1866,
                    1195,
                    2411,
                    1138,
                    1879,
                    445,
                    1247
                ],
                "libalgos._validate_limit": [
                    419
                ],
                "libalgos": [
                    419
                ],
                "mask.cumsum": [
                    420
                ],
                "self._can_hold_na": [
                    1180,
                    1421,
                    422
                ],
                "self.copy": [
                    1184,
                    1122,
                    772,
                    806,
                    1659,
                    426,
                    719,
                    435,
                    727,
                    2936,
                    635,
                    667,
                    605
                ],
                "self._can_hold_element": [
                    837,
                    870,
                    2406,
                    715,
                    428,
                    942,
                    1391,
                    721,
                    2418,
                    788
                ],
                "value": [
                    896,
                    2689,
                    2944,
                    2945,
                    2947,
                    775,
                    904,
                    2701,
                    788,
                    794,
                    1566,
                    1567,
                    2847,
                    2082,
                    1571,
                    428,
                    430,
                    2098,
                    2427,
                    2482,
                    439,
                    2489,
                    445,
                    2493,
                    831,
                    2494,
                    833,
                    2938,
                    2243,
                    2244,
                    837,
                    2117,
                    2245,
                    840,
                    841,
                    1866,
                    2632,
                    2635,
                    847,
                    848,
                    2642,
                    851,
                    852,
                    2776,
                    859,
                    2652,
                    734,
                    862,
                    1631,
                    865,
                    2783,
                    867,
                    2787,
                    2661,
                    870,
                    2406,
                    2407,
                    2411,
                    2539,
                    2540,
                    750,
                    878,
                    2668,
                    2796,
                    2418,
                    2421,
                    887,
                    2552,
                    1786,
                    1787
                ],
                "blocks": [
                    1411,
                    516,
                    518,
                    775,
                    2696,
                    3080,
                    1419,
                    801,
                    802,
                    430,
                    431,
                    1200,
                    1201,
                    2611,
                    2614,
                    2616,
                    2621,
                    1983,
                    2624,
                    1478,
                    1479,
                    1990,
                    3030,
                    2647,
                    3031,
                    3070,
                    3035,
                    3037,
                    3040,
                    3041,
                    1258,
                    1259,
                    2670,
                    3059,
                    3060,
                    2680,
                    3065,
                    2686,
                    3071
                ],
                "self.putmask": [
                    1567,
                    430,
                    775
                ],
                "self._maybe_downcast": [
                    1201,
                    1259,
                    1419,
                    431
                ],
                "downcast": [
                    513,
                    518,
                    1159,
                    2407,
                    1259,
                    2411,
                    431,
                    1201,
                    1141,
                    2620
                ],
                "mask.any": [
                    769,
                    1474,
                    1698,
                    485,
                    2844,
                    434,
                    986,
                    1564
                ],
                "self.coerce_to_target_dtype": [
                    1410,
                    1566,
                    439
                ],
                "idx": [
                    1009,
                    442,
                    1003,
                    444
                ],
                "block.getitem_block": [
                    444
                ],
                "block.fillna": [
                    445
                ],
                "self.split_and_operate": [
                    2611,
                    556,
                    1022,
                    447
                ],
                "f": [
                    486,
                    556,
                    2800,
                    2611,
                    500,
                    2613,
                    2808,
                    2810,
                    1022,
                    447
                ],
                "bool": [
                    2179,
                    656,
                    657,
                    658,
                    659,
                    660,
                    2197,
                    2580,
                    1431,
                    2581,
                    2582,
                    2583,
                    2584,
                    669,
                    1443,
                    2468,
                    2089,
                    558,
                    1838,
                    2095,
                    2106,
                    1338,
                    449,
                    2626,
                    2014,
                    2532,
                    2536,
                    2025,
                    2930,
                    2035,
                    2548,
                    2932,
                    2933,
                    1915,
                    2429
                ],
                "np.broadcast_to": [
                    467
                ],
                "list": [
                    580,
                    996,
                    716,
                    3032,
                    472,
                    3034
                ],
                "ref_loc": [
                    480,
                    504,
                    494
                ],
                "new_values.copy": [
                    488
                ],
                "make_a_block": [
                    504,
                    489
                ],
                "new_blocks": [
                    493,
                    505,
                    507,
                    1022,
                    1023
                ],
                "m": [
                    1438,
                    1126,
                    1128,
                    1130,
                    495,
                    1135,
                    499,
                    500,
                    1144,
                    1434,
                    1435,
                    1436,
                    1150
                ],
                "v": [
                    3174,
                    3143,
                    3175,
                    2668,
                    3148,
                    3180,
                    3181,
                    496,
                    2673,
                    3183,
                    3185,
                    500,
                    3156,
                    502,
                    3160
                ],
                "m.any": [
                    499,
                    1435
                ],
                "v.copy": [
                    3160,
                    502
                ],
                "new_blocks.append": [
                    505
                ],
                "self.is_float": [
                    514,
                    1052,
                    1223
                ],
                "_extend_blocks": [
                    2624,
                    2695,
                    518,
                    2679
                ],
                "b.downcast": [
                    518
                ],
                "b": [
                    2624,
                    801,
                    518,
                    2854,
                    3071,
                    2670,
                    2671,
                    3070,
                    3065,
                    858,
                    859,
                    2686,
                    2687
                ],
                "dtypes": [
                    547,
                    524,
                    533,
                    534,
                    536,
                    540,
                    543
                ],
                "maybe_downcast_to_dtype": [
                    536,
                    553
                ],
                "dict": [
                    543
                ],
                "AssertionError": [
                    1088,
                    548,
                    744,
                    1078,
                    3066,
                    1851,
                    2751
                ],
                "val": [
                    2594,
                    2596,
                    553,
                    554,
                    2515,
                    1019
                ],
                "errors_legal_values": [
                    577,
                    580,
                    575
                ],
                "errors": [
                    577,
                    580,
                    1415,
                    1360,
                    2195,
                    633
                ],
                "invalid_arg": [
                    578,
                    582
                ],
                "inspect.isclass": [
                    584
                ],
                "inspect": [
                    584
                ],
                "issubclass": [
                    2566,
                    2976,
                    674,
                    2082,
                    2471,
                    2985,
                    2987,
                    2092,
                    2988,
                    2990,
                    2992,
                    2098,
                    2492,
                    2110,
                    2111,
                    2243,
                    2631,
                    584,
                    613,
                    2535,
                    2539,
                    2028
                ],
                "ExtensionDtype": [
                    584
                ],
                "msg": [
                    585,
                    589
                ],
                "dtype.__name__": [
                    586
                ],
                "self.is_categorical_astype": [
                    592
                ],
                "copy": [
                    648,
                    2601,
                    2195,
                    596,
                    635,
                    667,
                    604
                ],
                "pandas_dtype": [
                    600,
                    2184
                ],
                "is_dtype_equal": [
                    1290,
                    1045,
                    857,
                    2202,
                    603
                ],
                "self.is_extension": [
                    609
                ],
                "dtype.type": [
                    2969,
                    613
                ],
                "self.is_datelike": [
                    616
                ],
                "self.to_native_types": [
                    617
                ],
                "vals1d": [
                    627,
                    629
                ],
                "values.ravel": [
                    627,
                    2515
                ],
                "astype_nansafe": [
                    629
                ],
                "newb": [
                    643,
                    645,
                    646,
                    650,
                    652,
                    2427,
                    2424,
                    635,
                    636
                ],
                "np.ndarray": [
                    640,
                    2176,
                    1661,
                    2603,
                    1008,
                    1393,
                    2419,
                    758,
                    989,
                    2461
                ],
                "values.reshape": [
                    641,
                    1794,
                    2340,
                    2605,
                    3053,
                    1814,
                    2903
                ],
                "newb.is_numeric": [
                    645
                ],
                "self.is_numeric": [
                    832,
                    645
                ],
                "newb.shape": [
                    650,
                    646
                ],
                "newb.dtype.name": [
                    650
                ],
                "newb.dtype": [
                    650
                ],
                "Any": [
                    2626,
                    2468,
                    1893,
                    2532,
                    2025,
                    2089,
                    1838,
                    2197,
                    2106,
                    669
                ],
                "self.values.dtype.type": [
                    671
                ],
                "tipo": [
                    2198,
                    2199,
                    2202,
                    2207,
                    672,
                    673,
                    674,
                    2469,
                    2470,
                    2471,
                    2090,
                    2091,
                    2092,
                    2107,
                    2108,
                    2110,
                    2111,
                    2112,
                    2533,
                    2534,
                    2535,
                    2026,
                    2027,
                    2028,
                    2029
                ],
                "maybe_infer_dtype_type": [
                    672,
                    2469,
                    2533,
                    2026,
                    2090,
                    2198,
                    2107
                ],
                "element": [
                    2198,
                    2203,
                    672,
                    2208,
                    2210,
                    675,
                    2212,
                    2213,
                    2469,
                    2215,
                    2472,
                    2090,
                    2474,
                    2476,
                    2094,
                    2095,
                    2107,
                    2114,
                    2533,
                    2536,
                    2026,
                    2032,
                    2034
                ],
                "tipo.type": [
                    674,
                    2471,
                    2535,
                    2028,
                    2029,
                    2092,
                    2110,
                    2111
                ],
                "itemsize": [
                    684,
                    686,
                    687
                ],
                "writers.word_len": [
                    684
                ],
                "writers": [
                    684
                ],
                "na_rep": [
                    2505,
                    2506,
                    2507,
                    684,
                    2064,
                    1811,
                    691,
                    2900,
                    2071,
                    2237
                ],
                "self.is_object": [
                    938,
                    686
                ],
                "quoting": [
                    2074,
                    2059,
                    686
                ],
                "values.astype": [
                    898,
                    872,
                    2060,
                    687,
                    1810,
                    2332
                ],
                "np.array": [
                    867,
                    1510,
                    2567,
                    1517,
                    2062,
                    689,
                    2514,
                    1011,
                    2899,
                    1525,
                    1431
                ],
                "deep": [
                    698
                ],
                "values.copy": [
                    699
                ],
                "original_to_replace": [
                    793,
                    711
                ],
                "to_replace": [
                    2947,
                    2700,
                    2846,
                    1570,
                    2744,
                    2938,
                    2684,
                    2758,
                    711,
                    715,
                    716,
                    2763,
                    2764,
                    2766,
                    721,
                    722,
                    2641,
                    2771,
                    2776,
                    2649,
                    729,
                    2651,
                    733,
                    2660,
                    2668,
                    749,
                    2547,
                    758,
                    2551,
                    762,
                    764
                ],
                "x": [
                    721,
                    2394,
                    2395,
                    1245
                ],
                "self.replace": [
                    732
                ],
                "filter": [
                    736,
                    2691,
                    2947,
                    2663,
                    2654,
                    2703,
                    752,
                    2802,
                    2675,
                    2805,
                    2776,
                    2937,
                    2554,
                    796,
                    765,
                    766
                ],
                "regex": [
                    2947,
                    2692,
                    2705,
                    1565,
                    797,
                    2849,
                    1573,
                    2555,
                    2744,
                    2747,
                    2758,
                    2760,
                    2770,
                    2776,
                    737,
                    2658,
                    2664,
                    753,
                    2676,
                    2683
                ],
                "convert": [
                    800,
                    2656,
                    738,
                    2850,
                    2947,
                    2693,
                    1574,
                    2853,
                    2856,
                    2665,
                    2814,
                    2704,
                    754,
                    2677,
                    2939,
                    2556,
                    798
                ],
                "self.astype": [
                    1093,
                    1095,
                    2410,
                    747,
                    1069,
                    1076,
                    791,
                    1050,
                    858,
                    1086
                ],
                "block.replace": [
                    792,
                    748
                ],
                "lib.is_scalar": [
                    840,
                    1932,
                    945,
                    1393,
                    851,
                    758,
                    1528,
                    1948
                ],
                "lib": [
                    840,
                    1948,
                    1387,
                    1932,
                    2576,
                    945,
                    1393,
                    851,
                    758,
                    1528,
                    1532
                ],
                "convert_scalar": [
                    1189,
                    841,
                    946,
                    1394,
                    762
                ],
                "missing.mask_missing": [
                    764
                ],
                "missing": [
                    1126,
                    1191,
                    1144,
                    1243,
                    764
                ],
                "filtered_out": [
                    766,
                    767
                ],
                "self.mgr_locs.isin": [
                    2805,
                    766
                ],
                "filtered_out.nonzero": [
                    767
                ],
                "b.convert": [
                    2624,
                    801,
                    2854
                ],
                "transpose": [
                    1376,
                    1028,
                    874,
                    906,
                    1423,
                    1361,
                    948,
                    1365,
                    987,
                    828
                ],
                "find_dtype": [
                    849,
                    853,
                    845,
                    855
                ],
                "hasattr": [
                    1379,
                    847
                ],
                "value.dtype": [
                    2082,
                    2243,
                    2117,
                    2632,
                    2539,
                    848,
                    2098,
                    2493
                ],
                "_": [
                    871,
                    3178,
                    1043,
                    852,
                    1014
                ],
                "infer_dtype_from_scalar": [
                    852
                ],
                "find_common_type": [
                    856
                ],
                "values.dtype": [
                    3013,
                    2566,
                    2968,
                    856,
                    2457,
                    2170
                ],
                "b.setitem": [
                    859
                ],
                "indexer": [
                    896,
                    1281,
                    1828,
                    904,
                    878,
                    880,
                    2419,
                    884,
                    2421,
                    1782,
                    887,
                    1784,
                    2427,
                    1786,
                    859,
                    1787
                ],
                "arr_value": [
                    865,
                    898,
                    867,
                    871,
                    880,
                    884,
                    892,
                    893,
                    894
                ],
                "maybe_promote": [
                    3178,
                    1014,
                    871
                ],
                "arr_value.dtype": [
                    898,
                    871
                ],
                "values.T": [
                    875,
                    907,
                    1366
                ],
                "check_setitem_lengths": [
                    1786,
                    878
                ],
                "is_empty_indexer": [
                    880
                ],
                "is_scalar_indexer": [
                    884
                ],
                "arr_value.shape": [
                    892,
                    893
                ],
                "values.shape": [
                    1794,
                    2504,
                    3048,
                    1500,
                    893
                ],
                "arr_value.size": [
                    894
                ],
                "values.size": [
                    894
                ],
                "self.values.copy": [
                    1186,
                    1220,
                    932,
                    1865,
                    1877,
                    1946,
                    2779
                ],
                "new": [
                    1666,
                    934,
                    938,
                    940,
                    942,
                    945,
                    946,
                    953,
                    954,
                    955,
                    956,
                    966,
                    968,
                    970,
                    977,
                    978,
                    979,
                    983,
                    989,
                    990,
                    994,
                    995,
                    996,
                    998,
                    1005,
                    1008,
                    1009,
                    1011,
                    1661,
                    1662
                ],
                "is_list_like": [
                    966,
                    938,
                    2641,
                    2642,
                    3159,
                    3130,
                    1501
                ],
                "self.fill_value": [
                    1510,
                    940,
                    1229,
                    1519,
                    1274
                ],
                "new_values.T": [
                    1313,
                    1475,
                    1988,
                    1029,
                    1328,
                    949
                ],
                "new.ndim": [
                    954,
                    995
                ],
                "axis": [
                    1153,
                    1281,
                    1286,
                    1417,
                    2442,
                    1297,
                    1429,
                    1430,
                    1436,
                    1314,
                    1317,
                    1321,
                    1194,
                    1323,
                    954,
                    2378,
                    2382,
                    1500,
                    1884,
                    1374,
                    991,
                    1886,
                    1887,
                    997,
                    1256,
                    1518,
                    1136
                ],
                "reshape": [
                    2233,
                    955,
                    1509
                ],
                "np.repeat": [
                    3131,
                    955,
                    1509
                ],
                "new_values.shape": [
                    1664,
                    955,
                    1316
                ],
                "new.astype": [
                    956
                ],
                "new_values.dtype": [
                    1290,
                    956
                ],
                "np.any": [
                    967
                ],
                "np.place": [
                    977
                ],
                "mask.shape": [
                    978
                ],
                "np.putmask": [
                    979,
                    983
                ],
                "mask.T": [
                    988
                ],
                "new.T": [
                    990
                ],
                "new_shape": [
                    3101,
                    996,
                    997,
                    998
                ],
                "new.shape": [
                    1009,
                    996
                ],
                "new_shape.insert": [
                    997
                ],
                "new.reshape": [
                    998
                ],
                "n": [
                    1297,
                    3130,
                    3131,
                    3136,
                    2382,
                    3164,
                    1887,
                    3168,
                    3170,
                    3174,
                    3175,
                    3178,
                    1005,
                    1009,
                    3185,
                    1011,
                    1014,
                    1017,
                    1019
                ],
                "np.squeeze": [
                    1009
                ],
                "n.dtype": [
                    3174,
                    3178,
                    1014
                ],
                "n.astype": [
                    1017
                ],
                "_putmask_smart": [
                    1019
                ],
                "infer_dtype_from": [
                    1043
                ],
                "self.is_bool": [
                    1048,
                    1386,
                    1118
                ],
                "is_bool_dtype": [
                    1048
                ],
                "self.is_complex": [
                    1052
                ],
                "is_integer_dtype": [
                    3145,
                    2117,
                    1053,
                    3148
                ],
                "is_float_dtype": [
                    3145,
                    3148,
                    1053
                ],
                "is_datetime64_dtype": [
                    1066,
                    1060,
                    2207
                ],
                "is_datetime64tz_dtype": [
                    2977,
                    2979,
                    2244,
                    1061,
                    3016,
                    1066,
                    2187
                ],
                "mytz": [
                    1072,
                    1075
                ],
                "othertz": [
                    1073,
                    1075
                ],
                "tz_compare": [
                    1075,
                    2212
                ],
                "is_timedelta64_dtype": [
                    1082,
                    1085
                ],
                "OverflowError": [
                    1094
                ],
                "self.is_integer": [
                    1224,
                    1386,
                    1118
                ],
                "missing.clean_fill_method": [
                    1126
                ],
                "method": [
                    1126,
                    1193,
                    1231,
                    1234,
                    1879,
                    1144,
                    1246
                ],
                "r": [
                    3034,
                    3035,
                    1131,
                    1132,
                    1133,
                    3037,
                    3033,
                    1146,
                    1147,
                    1148,
                    1437,
                    1438
                ],
                "check_int_bool": [
                    1146,
                    1131
                ],
                "self._interpolate_with_fill": [
                    1134
                ],
                "fill_value": [
                    1281,
                    1157,
                    2454,
                    1308,
                    1821,
                    1823,
                    1828,
                    1189,
                    1196,
                    1324,
                    1985,
                    1228,
                    1229,
                    1879,
                    1250,
                    2276,
                    1903,
                    1139,
                    1274,
                    1277
                ],
                "coerce": [
                    2600,
                    1179,
                    1140
                ],
                "missing.clean_interp_method": [
                    1144
                ],
                "self._interpolate": [
                    1149
                ],
                "index": [
                    1232,
                    1244,
                    1151
                ],
                "limit_direction": [
                    1248,
                    1155
                ],
                "limit_area": [
                    1249,
                    1156
                ],
                "missing.interpolate_2d": [
                    1191
                ],
                "data": [
                    1256,
                    1226,
                    1220
                ],
                "data.astype": [
                    1226
                ],
                "np.float64": [
                    1226
                ],
                "index.is_monotonic": [
                    1232
                ],
                "missing.interpolate_1d": [
                    1243
                ],
                "interp_values": [
                    1256,
                    1258
                ],
                "np.apply_along_axis": [
                    1256
                ],
                "fill_tuple": [
                    1273,
                    1820,
                    1277,
                    1823
                ],
                "allow_fill": [
                    1281,
                    1275,
                    1278
                ],
                "algos.take_nd": [
                    1280
                ],
                "algos": [
                    1280,
                    1297
                ],
                "algos.diff": [
                    1297
                ],
                "maybe_upcast": [
                    1308
                ],
                "f_ordered": [
                    1312,
                    1327,
                    1311
                ],
                "new_values.flags.f_contiguous": [
                    1311
                ],
                "new_values.flags": [
                    1311
                ],
                "np.prod": [
                    1316
                ],
                "np.roll": [
                    1317
                ],
                "ensure_platform_int": [
                    1317
                ],
                "periods": [
                    1317,
                    1320,
                    1321,
                    1323,
                    1903
                ],
                "axis_indexer": [
                    1321,
                    1323,
                    1324,
                    1319
                ],
                "orig_other": [
                    1412,
                    1364
                ],
                "cond": [
                    1431,
                    1377,
                    1379,
                    1413,
                    1926,
                    1927,
                    1928,
                    1959,
                    1930,
                    1396,
                    1429,
                    1430,
                    1399,
                    1369,
                    1947,
                    1405
                ],
                "other.ndim": [
                    1374
                ],
                "other.reshape": [
                    1375
                ],
                "other.shape": [
                    1921,
                    1444,
                    1375,
                    2431,
                    2015
                ],
                "cond.T": [
                    1377
                ],
                "lib.is_float": [
                    1387
                ],
                "np.isnan": [
                    2018,
                    1388
                ],
                "fastres": [
                    1396,
                    1397
                ],
                "expressions.where": [
                    1396
                ],
                "expressions": [
                    1396
                ],
                "all": [
                    1431,
                    2433,
                    2018,
                    1399
                ],
                "cond.ravel": [
                    1399
                ],
                "block.where": [
                    1411
                ],
                "align": [
                    1414
                ],
                "try_cast": [
                    1416
                ],
                "result.T": [
                    1424,
                    1526
                ],
                "cond.ndim": [
                    1429
                ],
                "cond.swapaxes": [
                    1430
                ],
                "range": [
                    1431
                ],
                "cond.shape": [
                    1927,
                    1431
                ],
                "result_blocks": [
                    1441,
                    2695,
                    2696,
                    2697,
                    2669,
                    2681,
                    2646,
                    2679,
                    2680,
                    1433,
                    2685,
                    1439
                ],
                "taken": [
                    1436,
                    1437
                ],
                "result.take": [
                    1436
                ],
                "m.nonzero": [
                    1436
                ],
                "maybe_downcast_numeric": [
                    1437
                ],
                "nb": [
                    1438,
                    1439
                ],
                "r.T": [
                    1438
                ],
                "result_blocks.append": [
                    1439
                ],
                "other.dtype": [
                    1444,
                    2431,
                    2015
                ],
                "array_equivalent": [
                    1446
                ],
                "other.values": [
                    2017,
                    2433,
                    1446
                ],
                "unstacker": [
                    1472,
                    1696,
                    1470,
                    1977,
                    1980,
                    1469,
                    1694
                ],
                "unstacker_func": [
                    1976,
                    1469
                ],
                "self.values.T": [
                    1469
                ],
                "new_items": [
                    1695,
                    1694,
                    1470,
                    1471
                ],
                "unstacker.get_new_columns": [
                    1694,
                    1470
                ],
                "new_placement": [
                    1699,
                    1476,
                    1988,
                    1478,
                    1471,
                    1979,
                    1695
                ],
                "new_columns.get_indexer": [
                    1695,
                    1471
                ],
                "new_columns": [
                    1695,
                    1980,
                    1471
                ],
                "unstacker.get_new_values": [
                    1472,
                    1696
                ],
                "is_empty": [
                    1506,
                    1500
                ],
                "orig_scalar": [
                    1528,
                    1501,
                    1502
                ],
                "qs": [
                    1504,
                    1510,
                    1511,
                    2442,
                    1517,
                    1501
                ],
                "np.asarray": [
                    1792,
                    1801,
                    1514,
                    2347,
                    1810,
                    2261,
                    2521,
                    3164,
                    2334
                ],
                "nanpercentile": [
                    1515
                ],
                "interpolation": [
                    1522,
                    2442
                ],
                "result.shape": [
                    1530
                ],
                "lib.item_from_zerodim": [
                    1532
                ],
                "np.ndim": [
                    1534
                ],
                "np.arange": [
                    1975,
                    1535
                ],
                "self._replace_single": [
                    1569,
                    2650,
                    2699
                ],
                "__init__": [
                    2148,
                    1606,
                    2569,
                    1717,
                    2872,
                    2462
                ],
                "super": [
                    2401,
                    2946,
                    2659,
                    2148,
                    1606,
                    2407,
                    2569,
                    2775,
                    2195,
                    1717,
                    2421,
                    2550,
                    2872,
                    2489,
                    2845,
                    2462,
                    1887
                ],
                "col": [
                    1616,
                    1617,
                    1618,
                    2352,
                    1620,
                    1621,
                    1622,
                    2353,
                    1626
                ],
                "com.is_null_slice": [
                    2353,
                    1618,
                    1850
                ],
                "com": [
                    2353,
                    1618,
                    1850
                ],
                "IndexError": [
                    3169,
                    1627,
                    1619,
                    2354
                ],
                "NotImplementedError": [
                    1954,
                    2381,
                    1622
                ],
                "self._holder": [
                    1860,
                    1958,
                    2445,
                    1749,
                    2295,
                    2296,
                    2137,
                    1631
                ],
                "locs.tolist": [
                    1634
                ],
                "_safe_reshape": [
                    1664
                ],
                "NonConsolidatableMixIn": [
                    1702
                ],
                "self._maybe_coerce_values": [
                    2147,
                    1716
                ],
                "extract_array": [
                    2870,
                    1930,
                    1924,
                    1734
                ],
                "self.values.dtype.na_value": [
                    1744
                ],
                "self._holder._can_hold_na": [
                    1749
                ],
                "self.values.dtype._is_numeric": [
                    1758
                ],
                "self.values.take": [
                    1985,
                    1828
                ],
                "self._holder._concat_same_type": [
                    1860
                ],
                "values.fillna": [
                    1866,
                    1879
                ],
                "diff": [
                    1887
                ],
                "self.values.shift": [
                    1903
                ],
                "ABCDataFrame": [
                    1926,
                    1918
                ],
                "other.iloc": [
                    1922
                ],
                "cond.iloc": [
                    1928
                ],
                "self.dtype.na_value": [
                    1936
                ],
                "is_sparse": [
                    1938,
                    2971
                ],
                "icond": [
                    1953,
                    1947,
                    1951
                ],
                "set_other": [
                    1953,
                    1949,
                    1951
                ],
                "self._holder._from_sequence": [
                    1958
                ],
                "np.where": [
                    1959
                ],
                "Block._ftype": [
                    1966
                ],
                "dummy_arr": [
                    1977,
                    1975
                ],
                "n_rows": [
                    1975
                ],
                "dummy_unstacker": [
                    1976,
                    1977
                ],
                "functools.partial": [
                    1976
                ],
                "functools": [
                    1976
                ],
                "self._get_unstack_items": [
                    1979
                ],
                "indices": [
                    1985,
                    1988
                ],
                "place": [
                    1986,
                    1988
                ],
                "zip": [
                    2668,
                    1988
                ],
                "ExtensionBlock": [
                    2984,
                    1993,
                    2861,
                    2267,
                    2973
                ],
                "NumericBlock": [
                    2011,
                    2101,
                    2527
                ],
                "left": [
                    2017,
                    2018
                ],
                "right": [
                    2017,
                    2018
                ],
                "FloatOrComplexBlock": [
                    2085,
                    2021
                ],
                "np.floating": [
                    2082,
                    2633,
                    2985,
                    2028,
                    2092,
                    2032
                ],
                "np.integer": [
                    2633,
                    2988,
                    2028,
                    2092,
                    2992,
                    2110
                ],
                "np.datetime64": [
                    2976,
                    2243,
                    2276,
                    2633,
                    2029,
                    2129,
                    2035,
                    2111
                ],
                "np.timedelta64": [
                    2471,
                    2474,
                    2987,
                    2029,
                    2035,
                    2454,
                    2493,
                    2111
                ],
                "float": [
                    2032,
                    2094
                ],
                "np.int_": [
                    2032,
                    2094
                ],
                "np.bool_": [
                    2535,
                    2536,
                    2633,
                    2539,
                    2095,
                    2994,
                    2035
                ],
                "datetime": [
                    2210,
                    2035,
                    2597
                ],
                "timedelta": [
                    2474,
                    2035,
                    2599
                ],
                "float_format": [
                    2056,
                    2072
                ],
                "decimal": [
                    2056,
                    2073
                ],
                "formatter": [
                    2077,
                    2069
                ],
                "FloatArrayFormatter": [
                    2069
                ],
                "formatter.get_result_as_array": [
                    2077
                ],
                "value.dtype.type": [
                    2082,
                    2243,
                    2632,
                    2539,
                    2098,
                    2493
                ],
                "np.complexfloating": [
                    2633,
                    2098,
                    2092,
                    2990
                ],
                "complex": [
                    2094
                ],
                "np.float_": [
                    2094
                ],
                "self.dtype.itemsize": [
                    2112
                ],
                "tipo.itemsize": [
                    2112
                ],
                "DatetimeArray": [
                    2280,
                    3019,
                    2125,
                    2190,
                    2264,
                    2173
                ],
                "self.values.ravel": [
                    2136,
                    2576,
                    2613
                ],
                "astype": [
                    2137,
                    2195
                ],
                "result.reshape": [
                    2138
                ],
                "DatetimeLikeBlockMixin": [
                    2449,
                    2142
                ],
                "_NS_DTYPE": [
                    2170,
                    2347
                ],
                "conversion.ensure_datetime64ns": [
                    2256,
                    2171
                ],
                "conversion": [
                    2256,
                    2458,
                    2171
                ],
                "values._data": [
                    2460,
                    2174
                ],
                "tz_localize": [
                    2190
                ],
                "values.tz_convert": [
                    2191
                ],
                "dtype.tz": [
                    2191
                ],
                "self.is_datetimetz": [
                    2200,
                    2211
                ],
                "is_valid_nat_for_dtype": [
                    2202,
                    2476,
                    2215
                ],
                "NaT": [
                    2208,
                    2472
                ],
                "element.tzinfo": [
                    2212,
                    2213
                ],
                "self.dtype.tz": [
                    2212
                ],
                "i8values": [
                    2234,
                    2227,
                    2238,
                    2223
                ],
                "fmt": [
                    2236,
                    2231
                ],
                "_get_format_datetime64_from_values": [
                    2231
                ],
                "date_format": [
                    2231
                ],
                "tslib.format_array_from_datetime": [
                    2233
                ],
                "tslib": [
                    2233
                ],
                "i8values.ravel": [
                    2234
                ],
                "i8values.shape": [
                    2238
                ],
                "np.atleast_2d": [
                    3007,
                    2399,
                    2239
                ],
                "DatetimeArray._simple_new": [
                    2264,
                    3019
                ],
                "DatetimeBlock": [
                    2978,
                    2274,
                    2267,
                    2275
                ],
                "_can_hold_element": [
                    2274
                ],
                "DatetimeBlock._can_hold_element": [
                    2274
                ],
                "to_native_types": [
                    2275
                ],
                "DatetimeBlock.to_native_types": [
                    2275
                ],
                "values.tz": [
                    2298
                ],
                "self.values._data.base": [
                    2307
                ],
                "self.values._data": [
                    2307
                ],
                "asi8": [
                    2382
                ],
                "self.shift": [
                    2382
                ],
                "new_values.reshape": [
                    2385
                ],
                "new_values.astype": [
                    2386
                ],
                "TimeDeltaBlock": [
                    2387,
                    2989
                ],
                "x.dtype": [
                    2394
                ],
                "concat_datetime": [
                    2395
                ],
                "x.values": [
                    2395
                ],
                "ObjectBlock": [
                    2400,
                    2425,
                    2997
                ],
                "concat_same_type": [
                    2401
                ],
                "fillna": [
                    2489,
                    2410,
                    2407
                ],
                "indexer.size": [
                    2419
                ],
                "setitem": [
                    2421
                ],
                "obj_vals": [
                    2425,
                    2423
                ],
                "newb.setitem": [
                    2427
                ],
                "other.values.view": [
                    2433
                ],
                "naive": [
                    2441,
                    2436,
                    2439
                ],
                "naive.reshape": [
                    2439
                ],
                "res_blk": [
                    2442,
                    2445,
                    2446
                ],
                "blk.quantile": [
                    2442
                ],
                "aware": [
                    2445,
                    2446
                ],
                "res_blk.values.ravel": [
                    2445
                ],
                "res_blk.values": [
                    2445
                ],
                "res_blk.ndim": [
                    2446
                ],
                "IntBlock": [
                    2449,
                    2993
                ],
                "_TD_DTYPE": [
                    2457
                ],
                "conversion.ensure_timedelta64ns": [
                    2458
                ],
                "TimedeltaArray": [
                    2466,
                    2459,
                    2524
                ],
                "rvalues": [
                    2504,
                    2514,
                    2507,
                    2518
                ],
                "np.empty": [
                    2504
                ],
                "imask": [
                    2514,
                    2515,
                    2508
                ],
                "ravel": [
                    2508
                ],
                "rvalues.flat": [
                    2514
                ],
                "_repr_base": [
                    2515
                ],
                "Timedelta": [
                    2515
                ],
                "TimedeltaArray._simple_new": [
                    2524
                ],
                "to_replace_values": [
                    2547,
                    2548
                ],
                "np.atleast_1d": [
                    2547
                ],
                "np.can_cast": [
                    2548
                ],
                "replace": [
                    2946,
                    2659,
                    2550,
                    2775
                ],
                "values.dtype.type": [
                    2566
                ],
                "lib.is_bool_array": [
                    2576
                ],
                "val.shape": [
                    2594
                ],
                "soft_convert_objects": [
                    2595
                ],
                "val.ravel": [
                    2596
                ],
                "numeric": [
                    2598
                ],
                "to_rep_is_list": [
                    2641,
                    2683,
                    2643,
                    2644
                ],
                "value_is_list": [
                    2642,
                    2643,
                    2644
                ],
                "both_lists": [
                    2667,
                    2643
                ],
                "either_list": [
                    2649,
                    2658,
                    2644
                ],
                "is_re": [
                    2649,
                    2786,
                    2763,
                    2795
                ],
                "to_rep": [
                    2672,
                    2684,
                    2668,
                    2688
                ],
                "b._replace_single": [
                    2687,
                    2671
                ],
                "to_rep_re": [
                    2744,
                    2750,
                    2760
                ],
                "is_re_compilable": [
                    2744,
                    2747
                ],
                "regex_re": [
                    2760,
                    2747,
                    2757,
                    2750
                ],
                "pattern": [
                    2770,
                    2764,
                    2766
                ],
                "to_replace.pattern": [
                    2764
                ],
                "rx": [
                    2786,
                    2787,
                    2795,
                    2796,
                    2771
                ],
                "re.compile": [
                    2771
                ],
                "re": [
                    2771
                ],
                "rx.search": [
                    2787
                ],
                "rx.sub": [
                    2796
                ],
                "np.vectorize": [
                    2800
                ],
                "re_replacer": [
                    2800
                ],
                "filt": [
                    2808,
                    2810,
                    2803,
                    2805
                ],
                "nonzero": [
                    2805
                ],
                "block.convert": [
                    2815
                ],
                "_replace_coerce": [
                    2845
                ],
                "self.convert": [
                    2857
                ],
                "concat_categorical": [
                    2866
                ],
                "np.object_": [
                    2883
                ],
                "self.values._internal_get_values": [
                    2889
                ],
                "result.values.replace": [
                    2938
                ],
                "result.values": [
                    2945,
                    2938
                ],
                "result.convert": [
                    2940
                ],
                "result.values.add_categories": [
                    2945
                ],
                "CategoricalBlock": [
                    2946,
                    2975
                ],
                "vtype": [
                    2976,
                    2985,
                    2987,
                    2988,
                    2990,
                    2992,
                    2969
                ],
                "cls": [
                    2978,
                    2980,
                    2982,
                    2984,
                    2986,
                    2989,
                    2991,
                    2993,
                    2995,
                    2997,
                    2998,
                    2973,
                    2975
                ],
                "DatetimeTZBlock": [
                    3016,
                    2980
                ],
                "is_interval_dtype": [
                    2981
                ],
                "is_period_dtype": [
                    2981
                ],
                "ObjectValuesExtensionBlock": [
                    2982
                ],
                "FloatBlock": [
                    2986
                ],
                "ComplexBlock": [
                    2991
                ],
                "BoolBlock": [
                    2995
                ],
                "ABCPandasArray": [
                    3004
                ],
                "values.to_numpy": [
                    3005
                ],
                "PandasDtype": [
                    3009
                ],
                "dtype.numpy_dtype": [
                    3010
                ],
                "klass": [
                    3016,
                    3012,
                    3021,
                    3014
                ],
                "get_block_type": [
                    3014
                ],
                "blocks.extend": [
                    3035
                ],
                "blocks.append": [
                    3040,
                    3037
                ],
                "b.dtype": [
                    3065
                ],
                "b.mgr_locs.as_array": [
                    3070
                ],
                "b.mgr_locs": [
                    3070
                ],
                "np.vstack": [
                    3071
                ],
                "b.values": [
                    3071
                ],
                "argsort": [
                    3073,
                    3074,
                    3075
                ],
                "np.argsort": [
                    3073
                ],
                "arr": [
                    3098,
                    3099,
                    3100,
                    3101,
                    3102
                ],
                "ABCSeries": [
                    3098
                ],
                "arr._values": [
                    3099
                ],
                "ABCExtensionArray": [
                    3100
                ],
                "arr.reshape": [
                    3101
                ],
                "nn": [
                    3136,
                    3143,
                    3145,
                    3156,
                    3158
                ],
                "_isna_compat": [
                    3143
                ],
                "nn.dtype": [
                    3145
                ],
                "v.dtype": [
                    3180,
                    3148,
                    3174,
                    3156
                ],
                "warnings.catch_warnings": [
                    3154
                ],
                "warnings": [
                    3154,
                    3155
                ],
                "warnings.simplefilter": [
                    3155
                ],
                "np.ComplexWarning": [
                    3155
                ],
                "nn_at": [
                    3161,
                    3156,
                    3158
                ],
                "nn.astype": [
                    3156
                ],
                "comp": [
                    3158,
                    3159
                ],
                "comp.all": [
                    3159
                ],
                "v.dtype.kind": [
                    3174
                ],
                "n.dtype.kind": [
                    3174
                ],
                "_putmask_preserve": [
                    3185,
                    3175
                ],
                "v._internal_get_values": [
                    3181
                ],
                "v.astype": [
                    3183
                ]
            },
            "filtered_variables_in_file": {
                "PandasObject": [
                    91
                ],
                "__slots__": [
                    2528,
                    2561,
                    99,
                    2022,
                    2086,
                    2862,
                    2450,
                    2006,
                    2102,
                    2012,
                    2270,
                    2143
                ],
                "is_numeric": [
                    100,
                    2453,
                    2007
                ],
                "is_float": [
                    101,
                    2023
                ],
                "is_integer": [
                    2482,
                    2114,
                    102,
                    2103
                ],
                "is_complex": [
                    2087,
                    103
                ],
                "is_datetime": [
                    104,
                    2144
                ],
                "is_datetimetz": [
                    105,
                    2271
                ],
                "is_timedelta": [
                    106,
                    2451
                ],
                "is_bool": [
                    2529,
                    107
                ],
                "is_object": [
                    2562,
                    108
                ],
                "is_categorical": [
                    109,
                    2974,
                    2863
                ],
                "is_extension": [
                    2272,
                    1713,
                    110
                ],
                "_can_hold_na": [
                    2530,
                    2563,
                    111,
                    2865,
                    2452,
                    2008,
                    2104
                ],
                "_can_consolidate": [
                    112,
                    3062,
                    1583
                ],
                "_verify_integrity": [
                    1584,
                    113,
                    2864
                ],
                "_validate_ndim": [
                    1585,
                    114
                ],
                "_ftype": [
                    115
                ],
                "_concatenator": [
                    2866,
                    116
                ],
                "np.concatenate": [
                    116,
                    3070
                ],
                "np": [
                    3073,
                    2567,
                    2062,
                    2082,
                    2603,
                    2092,
                    2094,
                    2095,
                    2098,
                    3131,
                    2110,
                    2111,
                    2633,
                    2129,
                    3155,
                    3070,
                    3071,
                    3164,
                    116,
                    1661,
                    640,
                    2176,
                    689,
                    2239,
                    2243,
                    1226,
                    2261,
                    2276,
                    1256,
                    2800,
                    245,
                    758,
                    1792,
                    1801,
                    1810,
                    2334,
                    1316,
                    1317,
                    2347,
                    833,
                    2883,
                    2899,
                    2399,
                    867,
                    1388,
                    1393,
                    2419,
                    382,
                    389,
                    2454,
                    1431,
                    2461,
                    2976,
                    1959,
                    2471,
                    2985,
                    2474,
                    2987,
                    2988,
                    2990,
                    2992,
                    2994,
                    1975,
                    955,
                    2493,
                    3007,
                    967,
                    2504,
                    977,
                    2514,
                    467,
                    979,
                    983,
                    2521,
                    989,
                    2018,
                    1509,
                    1510,
                    2535,
                    2536,
                    1514,
                    2539,
                    2028,
                    1517,
                    2029,
                    1008,
                    1009,
                    2032,
                    1011,
                    2035,
                    1525,
                    2547,
                    2548,
                    1534,
                    1535
                ],
                "self.ndim": [
                    1793,
                    643,
                    1421,
                    273,
                    401,
                    1300,
                    407,
                    280,
                    2336,
                    420,
                    1319,
                    1832,
                    175,
                    1200,
                    2607,
                    2610,
                    309,
                    2614,
                    954,
                    828,
                    700,
                    1862,
                    330,
                    1610,
                    1869,
                    1616,
                    1361,
                    1496,
                    2398,
                    479,
                    1376,
                    2400,
                    995,
                    484,
                    359,
                    2919,
                    2923,
                    1905,
                    119,
                    2425,
                    123
                ],
                "self": [
                    2049,
                    2082,
                    2112,
                    2117,
                    2136,
                    2137,
                    2138,
                    2139,
                    2147,
                    119,
                    120,
                    121,
                    123,
                    125,
                    126,
                    2188,
                    2192,
                    2200,
                    153,
                    2202,
                    2203,
                    2211,
                    2212,
                    2215,
                    171,
                    2222,
                    175,
                    2223,
                    180,
                    185,
                    2235,
                    2258,
                    211,
                    2261,
                    2264,
                    217,
                    223,
                    231,
                    232,
                    238,
                    241,
                    2295,
                    2296,
                    249,
                    256,
                    2307,
                    263,
                    271,
                    273,
                    278,
                    280,
                    281,
                    2330,
                    285,
                    286,
                    288,
                    2336,
                    292,
                    294,
                    295,
                    2347,
                    301,
                    304,
                    2354,
                    307,
                    308,
                    309,
                    2355,
                    2356,
                    313,
                    326,
                    328,
                    330,
                    333,
                    2382,
                    337,
                    2387,
                    341,
                    345,
                    346,
                    348,
                    349,
                    2398,
                    352,
                    2400,
                    358,
                    359,
                    2406,
                    361,
                    2410,
                    366,
                    2418,
                    2423,
                    376,
                    2425,
                    382,
                    383,
                    2431,
                    2433,
                    2436,
                    390,
                    2439,
                    392,
                    2441,
                    2445,
                    2446,
                    399,
                    401,
                    402,
                    407,
                    417,
                    420,
                    422,
                    424,
                    426,
                    428,
                    2476,
                    430,
                    431,
                    435,
                    439,
                    447,
                    2499,
                    467,
                    469,
                    2521,
                    2524,
                    479,
                    480,
                    484,
                    489,
                    494,
                    2549,
                    514,
                    525,
                    527,
                    2576,
                    530,
                    537,
                    541,
                    556,
                    2607,
                    2610,
                    2611,
                    2613,
                    2614,
                    592,
                    594,
                    596,
                    598,
                    2647,
                    2650,
                    603,
                    605,
                    606,
                    609,
                    611,
                    616,
                    617,
                    621,
                    624,
                    635,
                    641,
                    643,
                    645,
                    646,
                    649,
                    2699,
                    667,
                    671,
                    679,
                    686,
                    697,
                    700,
                    715,
                    718,
                    719,
                    721,
                    726,
                    727,
                    2779,
                    732,
                    743,
                    747,
                    2800,
                    757,
                    2805,
                    2813,
                    766,
                    771,
                    772,
                    775,
                    785,
                    788,
                    791,
                    806,
                    2857,
                    2858,
                    828,
                    832,
                    836,
                    837,
                    2889,
                    2894,
                    857,
                    858,
                    870,
                    2918,
                    2919,
                    2923,
                    2936,
                    908,
                    932,
                    938,
                    940,
                    942,
                    954,
                    955,
                    995,
                    1022,
                    1026,
                    1031,
                    1045,
                    1046,
                    1048,
                    1050,
                    1052,
                    1056,
                    1059,
                    1067,
                    1069,
                    1072,
                    1076,
                    1079,
                    1082,
                    1085,
                    1086,
                    1089,
                    1093,
                    1095,
                    1118,
                    1120,
                    1122,
                    1131,
                    1134,
                    1146,
                    1149,
                    1180,
                    1182,
                    1184,
                    1186,
                    1189,
                    1197,
                    1200,
                    1201,
                    1220,
                    1223,
                    1224,
                    1225,
                    1229,
                    1258,
                    1259,
                    1271,
                    1274,
                    1288,
                    1290,
                    1291,
                    1293,
                    1297,
                    1300,
                    1301,
                    1308,
                    1319,
                    1330,
                    1361,
                    1363,
                    1376,
                    1386,
                    1391,
                    1410,
                    1419,
                    1421,
                    1426,
                    1437,
                    1438,
                    1444,
                    1446,
                    1469,
                    1496,
                    1498,
                    1510,
                    1519,
                    1566,
                    1567,
                    1569,
                    1577,
                    1610,
                    1611,
                    1612,
                    1616,
                    1619,
                    1623,
                    1624,
                    1627,
                    1628,
                    1631,
                    1635,
                    1659,
                    1667,
                    1716,
                    1739,
                    1744,
                    1749,
                    1758,
                    1786,
                    1787,
                    1788,
                    1792,
                    1793,
                    1798,
                    1801,
                    1805,
                    1828,
                    1832,
                    1834,
                    1836,
                    1854,
                    1860,
                    1862,
                    1865,
                    1868,
                    1869,
                    1877,
                    1878,
                    1880,
                    1902,
                    1903,
                    1904,
                    1905,
                    1936,
                    1938,
                    1944,
                    1946,
                    1958,
                    1959,
                    1962,
                    1966,
                    1979,
                    1984,
                    1985,
                    2002,
                    2015,
                    2017
                ],
                "self._check_ndim": [
                    119
                ],
                "values": [
                    2049,
                    2051,
                    2566,
                    2567,
                    2057,
                    2569,
                    2060,
                    2062,
                    527,
                    2064,
                    2065,
                    2070,
                    536,
                    2595,
                    2603,
                    2605,
                    2607,
                    2608,
                    2613,
                    2614,
                    1606,
                    2136,
                    2137,
                    1635,
                    611,
                    2147,
                    2148,
                    617,
                    621,
                    624,
                    627,
                    629,
                    119,
                    121,
                    2170,
                    1659,
                    2171,
                    2173,
                    2174,
                    640,
                    641,
                    1152,
                    643,
                    2176,
                    2177,
                    2188,
                    2189,
                    2190,
                    2191,
                    2192,
                    151,
                    153,
                    156,
                    1186,
                    679,
                    1191,
                    1192,
                    682,
                    683,
                    2222,
                    687,
                    1200,
                    689,
                    2226,
                    691,
                    692,
                    1716,
                    1717,
                    2231,
                    697,
                    699,
                    700,
                    1734,
                    2256,
                    2258,
                    757,
                    758,
                    1271,
                    2295,
                    2296,
                    762,
                    2298,
                    764,
                    2301,
                    1792,
                    1281,
                    1793,
                    1794,
                    1795,
                    1805,
                    1807,
                    1808,
                    273,
                    1810,
                    1811,
                    1814,
                    281,
                    2330,
                    2332,
                    2334,
                    2340,
                    2341,
                    2870,
                    2871,
                    2872,
                    836,
                    1860,
                    1861,
                    1862,
                    841,
                    1865,
                    1866,
                    1869,
                    2382,
                    2894,
                    2897,
                    2898,
                    1363,
                    2899,
                    1877,
                    1366,
                    1879,
                    856,
                    2900,
                    2903,
                    2395,
                    2396,
                    1374,
                    2399,
                    1376,
                    2400,
                    358,
                    2918,
                    872,
                    362,
                    875,
                    2923,
                    878,
                    1393,
                    1394,
                    1396,
                    887,
                    1400,
                    376,
                    1405,
                    893,
                    894,
                    896,
                    898,
                    904,
                    907,
                    908,
                    2968,
                    2457,
                    2458,
                    2459,
                    2460,
                    2461,
                    2462,
                    2974,
                    2977,
                    2979,
                    2983,
                    3004,
                    3005,
                    3007,
                    2499,
                    2501,
                    2502,
                    3013,
                    2504,
                    3014,
                    3016,
                    3019,
                    3021,
                    2515,
                    1498,
                    1500,
                    1510,
                    1511,
                    3046,
                    3048,
                    1514,
                    3049,
                    1516,
                    3053,
                    3054,
                    1521
                ],
                "ndim": [
                    2569,
                    150,
                    279,
                    151,
                    281,
                    280,
                    153,
                    156,
                    2462,
                    158,
                    1717,
                    2872,
                    3006,
                    1601,
                    1603,
                    1605,
                    1606,
                    3021,
                    2148,
                    3046,
                    119,
                    1534,
                    1535
                ],
                "self.mgr_locs": [
                    643,
                    1288,
                    271,
                    399,
                    278,
                    1438,
                    294,
                    1834,
                    1962,
                    304,
                    307,
                    2614,
                    326,
                    1612,
                    1869,
                    2387,
                    1880,
                    489,
                    494,
                    1904,
                    2805,
                    120,
                    2425,
                    126,
                    123,
                    766,
                    383
                ],
                "placement": [
                    2569,
                    270,
                    271,
                    273,
                    277,
                    278,
                    281,
                    2462,
                    1717,
                    2872,
                    1597,
                    1598,
                    1602,
                    1861,
                    1606,
                    1862,
                    3021,
                    2396,
                    2400,
                    2401,
                    2148,
                    362,
                    2923,
                    120
                ],
                "self.values": [
                    2049,
                    527,
                    2576,
                    2613,
                    1611,
                    1612,
                    594,
                    596,
                    598,
                    1623,
                    1624,
                    2136,
                    2138,
                    2139,
                    1628,
                    611,
                    1635,
                    121,
                    1659,
                    123,
                    125,
                    2188,
                    671,
                    1186,
                    1189,
                    2222,
                    2223,
                    180,
                    697,
                    2235,
                    1220,
                    1739,
                    1744,
                    2258,
                    211,
                    2261,
                    2264,
                    217,
                    2779,
                    1758,
                    223,
                    231,
                    232,
                    241,
                    757,
                    1271,
                    1786,
                    1787,
                    1792,
                    2307,
                    1798,
                    1801,
                    1805,
                    1297,
                    2330,
                    1308,
                    1828,
                    2347,
                    301,
                    304,
                    2355,
                    308,
                    309,
                    2356,
                    313,
                    1854,
                    836,
                    1865,
                    2889,
                    2382,
                    2894,
                    337,
                    1363,
                    341,
                    1877,
                    345,
                    366,
                    1903,
                    2423,
                    376,
                    382,
                    2433,
                    2436,
                    390,
                    1938,
                    1946,
                    417,
                    932,
                    1446,
                    1959,
                    1966,
                    1469,
                    1985,
                    2499,
                    2002,
                    469,
                    2521,
                    2524,
                    2017
                ],
                "self._validate_ndim": [
                    153,
                    330,
                    123
                ],
                "values.ndim": [
                    1376,
                    1793,
                    3046,
                    1521,
                    151,
                    153,
                    156,
                    1374
                ],
                "self._can_consolidate": [
                    171
                ],
                "self.dtype.name": [
                    649,
                    171
                ],
                "self.dtype": [
                    263,
                    649,
                    1290,
                    2445,
                    1936,
                    1045,
                    1944,
                    2202,
                    2203,
                    1437,
                    288,
                    2082,
                    1444,
                    2212,
                    295,
                    2215,
                    171,
                    2476,
                    1197,
                    1072,
                    2112,
                    2117,
                    857,
                    346,
                    603,
                    348,
                    2015,
                    2800,
                    2431
                ],
                "self.values.base": [
                    180
                ],
                "self.is_datetime": [
                    185,
                    514,
                    1059,
                    1067
                ],
                "self.is_timedelta": [
                    514,
                    185,
                    1082,
                    1085,
                    1118
                ],
                "dtype": [
                    2184,
                    2187,
                    2191,
                    1043,
                    2195,
                    1045,
                    1942,
                    1048,
                    1944,
                    2968,
                    2331,
                    2969,
                    1053,
                    2971,
                    671,
                    674,
                    675,
                    1060,
                    1061,
                    2981,
                    1959,
                    1066,
                    1073,
                    2994,
                    1082,
                    1085,
                    192,
                    3009,
                    3010,
                    195,
                    197,
                    1093,
                    3013,
                    584,
                    3014,
                    586,
                    3019,
                    592,
                    848,
                    596,
                    852,
                    598,
                    2135,
                    600,
                    856,
                    346,
                    603,
                    348,
                    349,
                    857,
                    858,
                    611,
                    613,
                    230,
                    871,
                    872,
                    3178,
                    3180,
                    3181,
                    238,
                    3183,
                    624,
                    629,
                    1014,
                    3064,
                    1017
                ],
                "Categorical": [
                    192,
                    2876,
                    598,
                    2871
                ],
                "CategoricalDtype": [
                    192
                ],
                "is_categorical_dtype": [
                    594,
                    197
                ],
                "PandasArray": [
                    223
                ],
                "ExtensionArray": [
                    219,
                    1797,
                    2523,
                    2263
                ],
                "is_object_dtype": [
                    230,
                    743,
                    3180,
                    785,
                    2135,
                    1048,
                    2331
                ],
                "self.values.astype": [
                    611,
                    231,
                    2002,
                    596,
                    2261,
                    2423,
                    2521
                ],
                "self.get_values": [
                    679,
                    621,
                    238,
                    624,
                    1498
                ],
                "self.values.view": [
                    241,
                    2433,
                    2436,
                    2223
                ],
                "np.nan": [
                    833,
                    245
                ],
                "self._mgr_locs": [
                    256,
                    249
                ],
                "new_mgr_locs": [
                    256,
                    3073,
                    3075,
                    3077,
                    1286,
                    1287,
                    1288,
                    1291,
                    1293,
                    1832,
                    1833,
                    1834,
                    1836,
                    321,
                    326,
                    333,
                    254,
                    253,
                    3070
                ],
                "libinternals.BlockPlacement": [
                    1892,
                    307,
                    254,
                    253,
                    1597,
                    1598
                ],
                "libinternals": [
                    1892,
                    307,
                    254,
                    253,
                    1597,
                    1598
                ],
                "mgr_locs.setter": [
                    251
                ],
                "mgr_locs": [
                    251
                ],
                "make_block": [
                    643,
                    3077,
                    1478,
                    2922,
                    273,
                    2614,
                    2424,
                    281,
                    1535
                ],
                "name": [
                    288,
                    285,
                    294
                ],
                "self._is_single_block": [
                    530,
                    286
                ],
                "result": [
                    2945,
                    2946,
                    390,
                    2695,
                    392,
                    1528,
                    396,
                    400,
                    1424,
                    1426,
                    406,
                    407,
                    409,
                    1946,
                    1436,
                    288,
                    1953,
                    293,
                    1958,
                    298,
                    1962,
                    2936,
                    2233,
                    2938,
                    2239,
                    2940,
                    2687,
                    2942,
                    3032,
                    2137,
                    2138,
                    3033,
                    3039,
                    3040,
                    1509,
                    1515,
                    2671,
                    1525,
                    1526,
                    2679,
                    1400,
                    1530,
                    1531,
                    1532,
                    1405,
                    1534,
                    1535
                ],
                "shape": [
                    2594,
                    292,
                    295,
                    3047,
                    3048,
                    970,
                    2605,
                    3053
                ],
                "join": [
                    292
                ],
                "pprint_thing": [
                    292,
                    294
                ],
                "s": [
                    2786,
                    2787,
                    292,
                    2789,
                    2795,
                    2796,
                    2798
                ],
                "self.shape": [
                    641,
                    292,
                    1444,
                    646,
                    2431,
                    2439,
                    649,
                    467,
                    955,
                    2015
                ],
                "self.mgr_locs.indexer": [
                    304,
                    2387,
                    294
                ],
                "state": [
                    307,
                    308
                ],
                "self.values.ndim": [
                    309
                ],
                "slicer": [
                    2050,
                    2051,
                    1806,
                    1807,
                    681,
                    682,
                    2351,
                    2352,
                    2225,
                    2226,
                    2227,
                    2356,
                    1849,
                    313,
                    1850,
                    1852,
                    1854,
                    322,
                    323,
                    2500,
                    325,
                    2501,
                    328,
                    2895,
                    2897
                ],
                "axis0_slicer": [
                    323,
                    325,
                    326
                ],
                "new_values": [
                    1280,
                    1664,
                    1666,
                    1667,
                    3074,
                    1029,
                    3077,
                    1031,
                    1290,
                    1291,
                    1293,
                    1297,
                    1300,
                    1301,
                    1308,
                    1311,
                    1696,
                    1313,
                    1314,
                    1699,
                    932,
                    1316,
                    1317,
                    1828,
                    1324,
                    1836,
                    1328,
                    946,
                    1330,
                    949,
                    955,
                    956,
                    1979,
                    1472,
                    1475,
                    1988,
                    1478,
                    328,
                    330,
                    333,
                    2382,
                    977,
                    2385,
                    979,
                    2386,
                    469,
                    2387,
                    983,
                    2779,
                    991,
                    486,
                    488,
                    496,
                    2808,
                    2810,
                    1659,
                    2813,
                    3071
                ],
                "self._slice": [
                    328
                ],
                "new_values.ndim": [
                    330,
                    1314,
                    991
                ],
                "self.make_block_same_class": [
                    1984,
                    1862,
                    361,
                    1258,
                    1962,
                    1836,
                    333,
                    1293,
                    1868,
                    1200,
                    1902,
                    2446,
                    1878,
                    700
                ],
                "self.values.shape": [
                    337,
                    2138
                ],
                "self.values.dtype": [
                    1744,
                    341,
                    1758,
                    671
                ],
                "self.dtype.subtype": [
                    346
                ],
                "self._ftype": [
                    349
                ],
                "_merge_blocks": [
                    352
                ],
                "other": [
                    1921,
                    1410,
                    1922,
                    1924,
                    2433,
                    1932,
                    1936,
                    1043,
                    1948,
                    1949,
                    1951,
                    1444,
                    1446,
                    1959,
                    1079,
                    1089,
                    1364,
                    1368,
                    1373,
                    1374,
                    1375,
                    352,
                    2015,
                    2017,
                    1387,
                    1388,
                    1391,
                    1393,
                    1394,
                    1396,
                    1405,
                    1918,
                    2431
                ],
                "self._concatenator": [
                    2918,
                    358
                ],
                "blk.values": [
                    1860,
                    2919,
                    359
                ],
                "blk": [
                    1860,
                    2919,
                    359,
                    2441,
                    2442
                ],
                "to_concat": [
                    2401,
                    1860,
                    359,
                    2919,
                    2394,
                    2395
                ],
                "i": [
                    494,
                    495,
                    400,
                    366,
                    399,
                    496,
                    500,
                    1431
                ],
                "locs": [
                    376,
                    2258,
                    1634
                ],
                "np.delete": [
                    382
                ],
                "loc": [
                    399,
                    2352,
                    1617,
                    402,
                    2355,
                    1623,
                    1624,
                    382,
                    383
                ],
                "self.mgr_locs.delete": [
                    383
                ],
                "np.errstate": [
                    389
                ],
                "func": [
                    1256,
                    1405,
                    390
                ],
                "kwargs": [
                    1252,
                    806,
                    390,
                    1160,
                    1144,
                    2489
                ],
                "self._split_op_result": [
                    392
                ],
                "List": [
                    385,
                    1894,
                    394,
                    1917,
                    1295,
                    2358,
                    2618,
                    1883,
                    1340,
                    509
                ],
                "is_extension_array_dtype": [
                    2494,
                    2245,
                    2983,
                    3049,
                    2539,
                    396,
                    2635,
                    3180,
                    862
                ],
                "result.ndim": [
                    396
                ],
                "nbs": [
                    403,
                    404,
                    398
                ],
                "vals": [
                    400,
                    401
                ],
                "nv": [
                    401,
                    402,
                    536,
                    537,
                    3160,
                    472,
                    473,
                    474,
                    475,
                    3161,
                    3162,
                    479,
                    480,
                    3168,
                    3170,
                    3171,
                    486,
                    488,
                    489,
                    500,
                    502,
                    504,
                    1019,
                    1020
                ],
                "_block_shape": [
                    2607,
                    401,
                    1300,
                    407,
                    479
                ],
                "block": [
                    2816,
                    1410,
                    1411,
                    908,
                    909,
                    402,
                    403,
                    791,
                    792,
                    2845,
                    2854,
                    2855,
                    439,
                    444,
                    445,
                    475,
                    480,
                    481,
                    489,
                    490,
                    747,
                    748,
                    504,
                    505,
                    2813,
                    2815
                ],
                "self.make_block": [
                    480,
                    1667,
                    1031,
                    2441,
                    1291,
                    908,
                    2192,
                    402,
                    1330,
                    596,
                    1301,
                    598,
                    407,
                    1426,
                    537,
                    2813,
                    1438
                ],
                "nbs.append": [
                    403
                ],
                "Block": [
                    2560,
                    1702,
                    1966,
                    2005,
                    406,
                    474,
                    2142,
                    3039
                ],
                "inplace": [
                    1025,
                    770,
                    2690,
                    2947,
                    1158,
                    775,
                    2702,
                    1175,
                    795,
                    1181,
                    415,
                    1567,
                    801,
                    1186,
                    2848,
                    932,
                    1572,
                    423,
                    430,
                    2935,
                    435,
                    2741,
                    445,
                    447,
                    1219,
                    1220,
                    710,
                    1865,
                    717,
                    725,
                    1877,
                    2776,
                    1113,
                    2779,
                    2653,
                    735,
                    1119,
                    2662,
                    2407,
                    488,
                    1131,
                    2411,
                    751,
                    1137,
                    2546,
                    2674,
                    502,
                    1655,
                    2936,
                    2553,
                    1146,
                    1659,
                    2940,
                    1022
                ],
                "validate_bool_kwarg": [
                    1219,
                    710,
                    1655,
                    2935,
                    2546,
                    2741,
                    1175,
                    1113,
                    415
                ],
                "mask": [
                    1664,
                    769,
                    1666,
                    775,
                    2057,
                    1808,
                    2064,
                    1811,
                    1431,
                    1434,
                    1564,
                    2844,
                    1567,
                    1696,
                    417,
                    1698,
                    1699,
                    420,
                    2851,
                    935,
                    1575,
                    1662,
                    683,
                    430,
                    434,
                    691,
                    1979,
                    3131,
                    1472,
                    3136,
                    1474,
                    1475,
                    1476,
                    1990,
                    967,
                    1479,
                    2502,
                    970,
                    2507,
                    2508,
                    977,
                    466,
                    467,
                    978,
                    979,
                    2898,
                    983,
                    2900,
                    3161,
                    986,
                    988,
                    3168,
                    3170,
                    485,
                    486,
                    1514,
                    495,
                    1520,
                    2807,
                    2810,
                    1019,
                    764,
                    1661,
                    1022,
                    767
                ],
                "isna": [
                    2944,
                    417,
                    2502,
                    2057,
                    938,
                    683,
                    1514,
                    1932,
                    1808,
                    2898,
                    851,
                    2783
                ],
                "limit": [
                    418,
                    419,
                    420,
                    1154,
                    2407,
                    1866,
                    1195,
                    2411,
                    1138,
                    1879,
                    445,
                    1247
                ],
                "libalgos._validate_limit": [
                    419
                ],
                "libalgos": [
                    419
                ],
                "mask.cumsum": [
                    420
                ],
                "self._can_hold_na": [
                    1180,
                    1421,
                    422
                ],
                "self.copy": [
                    1184,
                    1122,
                    772,
                    806,
                    1659,
                    426,
                    719,
                    435,
                    727,
                    2936,
                    635,
                    667,
                    605
                ],
                "self._can_hold_element": [
                    837,
                    870,
                    2406,
                    715,
                    428,
                    942,
                    1391,
                    721,
                    2418,
                    788
                ],
                "value": [
                    896,
                    2689,
                    2944,
                    2945,
                    2947,
                    775,
                    904,
                    2701,
                    788,
                    794,
                    1566,
                    1567,
                    2847,
                    2082,
                    1571,
                    428,
                    430,
                    2098,
                    2427,
                    2482,
                    439,
                    2489,
                    445,
                    2493,
                    831,
                    2494,
                    833,
                    2938,
                    2243,
                    2244,
                    837,
                    2117,
                    2245,
                    840,
                    841,
                    1866,
                    2632,
                    2635,
                    847,
                    848,
                    2642,
                    851,
                    852,
                    2776,
                    859,
                    2652,
                    734,
                    862,
                    1631,
                    865,
                    2783,
                    867,
                    2787,
                    2661,
                    870,
                    2406,
                    2407,
                    2411,
                    2539,
                    2540,
                    750,
                    878,
                    2668,
                    2796,
                    2418,
                    2421,
                    887,
                    2552,
                    1786,
                    1787
                ],
                "blocks": [
                    1411,
                    516,
                    518,
                    775,
                    2696,
                    3080,
                    1419,
                    801,
                    802,
                    430,
                    431,
                    1200,
                    1201,
                    2611,
                    2614,
                    2616,
                    2621,
                    1983,
                    2624,
                    1478,
                    1479,
                    1990,
                    3030,
                    2647,
                    3031,
                    3070,
                    3035,
                    3037,
                    3040,
                    3041,
                    1258,
                    1259,
                    2670,
                    3059,
                    3060,
                    2680,
                    3065,
                    2686,
                    3071
                ],
                "self.putmask": [
                    1567,
                    430,
                    775
                ],
                "self._maybe_downcast": [
                    1201,
                    1259,
                    1419,
                    431
                ],
                "downcast": [
                    513,
                    518,
                    1159,
                    2407,
                    1259,
                    2411,
                    431,
                    1201,
                    1141,
                    2620
                ],
                "mask.any": [
                    769,
                    1474,
                    1698,
                    485,
                    2844,
                    434,
                    986,
                    1564
                ],
                "self.coerce_to_target_dtype": [
                    1410,
                    1566,
                    439
                ],
                "idx": [
                    1009,
                    442,
                    1003,
                    444
                ],
                "block.getitem_block": [
                    444
                ],
                "block.fillna": [
                    445
                ],
                "self.split_and_operate": [
                    2611,
                    556,
                    1022,
                    447
                ],
                "f": [
                    486,
                    556,
                    2800,
                    2611,
                    500,
                    2613,
                    2808,
                    2810,
                    1022,
                    447
                ],
                "np.broadcast_to": [
                    467
                ],
                "ref_loc": [
                    480,
                    504,
                    494
                ],
                "new_values.copy": [
                    488
                ],
                "make_a_block": [
                    504,
                    489
                ],
                "new_blocks": [
                    493,
                    505,
                    507,
                    1022,
                    1023
                ],
                "m": [
                    1438,
                    1126,
                    1128,
                    1130,
                    495,
                    1135,
                    499,
                    500,
                    1144,
                    1434,
                    1435,
                    1436,
                    1150
                ],
                "v": [
                    3174,
                    3143,
                    3175,
                    2668,
                    3148,
                    3180,
                    3181,
                    496,
                    2673,
                    3183,
                    3185,
                    500,
                    3156,
                    502,
                    3160
                ],
                "m.any": [
                    499,
                    1435
                ],
                "v.copy": [
                    3160,
                    502
                ],
                "new_blocks.append": [
                    505
                ],
                "self.is_float": [
                    514,
                    1052,
                    1223
                ],
                "_extend_blocks": [
                    2624,
                    2695,
                    518,
                    2679
                ],
                "b.downcast": [
                    518
                ],
                "b": [
                    2624,
                    801,
                    518,
                    2854,
                    3071,
                    2670,
                    2671,
                    3070,
                    3065,
                    858,
                    859,
                    2686,
                    2687
                ],
                "dtypes": [
                    547,
                    524,
                    533,
                    534,
                    536,
                    540,
                    543
                ],
                "maybe_downcast_to_dtype": [
                    536,
                    553
                ],
                "val": [
                    2594,
                    2596,
                    553,
                    554,
                    2515,
                    1019
                ],
                "errors_legal_values": [
                    577,
                    580,
                    575
                ],
                "errors": [
                    577,
                    580,
                    1415,
                    1360,
                    2195,
                    633
                ],
                "invalid_arg": [
                    578,
                    582
                ],
                "inspect.isclass": [
                    584
                ],
                "inspect": [
                    584
                ],
                "ExtensionDtype": [
                    584
                ],
                "msg": [
                    585,
                    589
                ],
                "dtype.__name__": [
                    586
                ],
                "self.is_categorical_astype": [
                    592
                ],
                "copy": [
                    648,
                    2601,
                    2195,
                    596,
                    635,
                    667,
                    604
                ],
                "pandas_dtype": [
                    600,
                    2184
                ],
                "is_dtype_equal": [
                    1290,
                    1045,
                    857,
                    2202,
                    603
                ],
                "self.is_extension": [
                    609
                ],
                "dtype.type": [
                    2969,
                    613
                ],
                "self.is_datelike": [
                    616
                ],
                "self.to_native_types": [
                    617
                ],
                "vals1d": [
                    627,
                    629
                ],
                "values.ravel": [
                    627,
                    2515
                ],
                "astype_nansafe": [
                    629
                ],
                "newb": [
                    643,
                    645,
                    646,
                    650,
                    652,
                    2427,
                    2424,
                    635,
                    636
                ],
                "np.ndarray": [
                    640,
                    2176,
                    1661,
                    2603,
                    1008,
                    1393,
                    2419,
                    758,
                    989,
                    2461
                ],
                "values.reshape": [
                    641,
                    1794,
                    2340,
                    2605,
                    3053,
                    1814,
                    2903
                ],
                "newb.is_numeric": [
                    645
                ],
                "self.is_numeric": [
                    832,
                    645
                ],
                "newb.shape": [
                    650,
                    646
                ],
                "newb.dtype.name": [
                    650
                ],
                "newb.dtype": [
                    650
                ],
                "Any": [
                    2626,
                    2468,
                    1893,
                    2532,
                    2025,
                    2089,
                    1838,
                    2197,
                    2106,
                    669
                ],
                "self.values.dtype.type": [
                    671
                ],
                "tipo": [
                    2198,
                    2199,
                    2202,
                    2207,
                    672,
                    673,
                    674,
                    2469,
                    2470,
                    2471,
                    2090,
                    2091,
                    2092,
                    2107,
                    2108,
                    2110,
                    2111,
                    2112,
                    2533,
                    2534,
                    2535,
                    2026,
                    2027,
                    2028,
                    2029
                ],
                "maybe_infer_dtype_type": [
                    672,
                    2469,
                    2533,
                    2026,
                    2090,
                    2198,
                    2107
                ],
                "element": [
                    2198,
                    2203,
                    672,
                    2208,
                    2210,
                    675,
                    2212,
                    2213,
                    2469,
                    2215,
                    2472,
                    2090,
                    2474,
                    2476,
                    2094,
                    2095,
                    2107,
                    2114,
                    2533,
                    2536,
                    2026,
                    2032,
                    2034
                ],
                "tipo.type": [
                    674,
                    2471,
                    2535,
                    2028,
                    2029,
                    2092,
                    2110,
                    2111
                ],
                "itemsize": [
                    684,
                    686,
                    687
                ],
                "writers.word_len": [
                    684
                ],
                "writers": [
                    684
                ],
                "na_rep": [
                    2505,
                    2506,
                    2507,
                    684,
                    2064,
                    1811,
                    691,
                    2900,
                    2071,
                    2237
                ],
                "self.is_object": [
                    938,
                    686
                ],
                "quoting": [
                    2074,
                    2059,
                    686
                ],
                "values.astype": [
                    898,
                    872,
                    2060,
                    687,
                    1810,
                    2332
                ],
                "np.array": [
                    867,
                    1510,
                    2567,
                    1517,
                    2062,
                    689,
                    2514,
                    1011,
                    2899,
                    1525,
                    1431
                ],
                "deep": [
                    698
                ],
                "values.copy": [
                    699
                ],
                "original_to_replace": [
                    793,
                    711
                ],
                "to_replace": [
                    2947,
                    2700,
                    2846,
                    1570,
                    2744,
                    2938,
                    2684,
                    2758,
                    711,
                    715,
                    716,
                    2763,
                    2764,
                    2766,
                    721,
                    722,
                    2641,
                    2771,
                    2776,
                    2649,
                    729,
                    2651,
                    733,
                    2660,
                    2668,
                    749,
                    2547,
                    758,
                    2551,
                    762,
                    764
                ],
                "x": [
                    721,
                    2394,
                    2395,
                    1245
                ],
                "self.replace": [
                    732
                ],
                "regex": [
                    2947,
                    2692,
                    2705,
                    1565,
                    797,
                    2849,
                    1573,
                    2555,
                    2744,
                    2747,
                    2758,
                    2760,
                    2770,
                    2776,
                    737,
                    2658,
                    2664,
                    753,
                    2676,
                    2683
                ],
                "convert": [
                    800,
                    2656,
                    738,
                    2850,
                    2947,
                    2693,
                    1574,
                    2853,
                    2856,
                    2665,
                    2814,
                    2704,
                    754,
                    2677,
                    2939,
                    2556,
                    798
                ],
                "self.astype": [
                    1093,
                    1095,
                    2410,
                    747,
                    1069,
                    1076,
                    791,
                    1050,
                    858,
                    1086
                ],
                "block.replace": [
                    792,
                    748
                ],
                "lib.is_scalar": [
                    840,
                    1932,
                    945,
                    1393,
                    851,
                    758,
                    1528,
                    1948
                ],
                "lib": [
                    840,
                    1948,
                    1387,
                    1932,
                    2576,
                    945,
                    1393,
                    851,
                    758,
                    1528,
                    1532
                ],
                "convert_scalar": [
                    1189,
                    841,
                    946,
                    1394,
                    762
                ],
                "missing.mask_missing": [
                    764
                ],
                "missing": [
                    1126,
                    1191,
                    1144,
                    1243,
                    764
                ],
                "filtered_out": [
                    766,
                    767
                ],
                "self.mgr_locs.isin": [
                    2805,
                    766
                ],
                "filtered_out.nonzero": [
                    767
                ],
                "b.convert": [
                    2624,
                    801,
                    2854
                ],
                "transpose": [
                    1376,
                    1028,
                    874,
                    906,
                    1423,
                    1361,
                    948,
                    1365,
                    987,
                    828
                ],
                "find_dtype": [
                    849,
                    853,
                    845,
                    855
                ],
                "value.dtype": [
                    2082,
                    2243,
                    2117,
                    2632,
                    2539,
                    848,
                    2098,
                    2493
                ],
                "_": [
                    871,
                    3178,
                    1043,
                    852,
                    1014
                ],
                "infer_dtype_from_scalar": [
                    852
                ],
                "find_common_type": [
                    856
                ],
                "values.dtype": [
                    3013,
                    2566,
                    2968,
                    856,
                    2457,
                    2170
                ],
                "b.setitem": [
                    859
                ],
                "indexer": [
                    896,
                    1281,
                    1828,
                    904,
                    878,
                    880,
                    2419,
                    884,
                    2421,
                    1782,
                    887,
                    1784,
                    2427,
                    1786,
                    859,
                    1787
                ],
                "arr_value": [
                    865,
                    898,
                    867,
                    871,
                    880,
                    884,
                    892,
                    893,
                    894
                ],
                "maybe_promote": [
                    3178,
                    1014,
                    871
                ],
                "arr_value.dtype": [
                    898,
                    871
                ],
                "values.T": [
                    875,
                    907,
                    1366
                ],
                "check_setitem_lengths": [
                    1786,
                    878
                ],
                "is_empty_indexer": [
                    880
                ],
                "is_scalar_indexer": [
                    884
                ],
                "arr_value.shape": [
                    892,
                    893
                ],
                "values.shape": [
                    1794,
                    2504,
                    3048,
                    1500,
                    893
                ],
                "arr_value.size": [
                    894
                ],
                "values.size": [
                    894
                ],
                "self.values.copy": [
                    1186,
                    1220,
                    932,
                    1865,
                    1877,
                    1946,
                    2779
                ],
                "new": [
                    1666,
                    934,
                    938,
                    940,
                    942,
                    945,
                    946,
                    953,
                    954,
                    955,
                    956,
                    966,
                    968,
                    970,
                    977,
                    978,
                    979,
                    983,
                    989,
                    990,
                    994,
                    995,
                    996,
                    998,
                    1005,
                    1008,
                    1009,
                    1011,
                    1661,
                    1662
                ],
                "is_list_like": [
                    966,
                    938,
                    2641,
                    2642,
                    3159,
                    3130,
                    1501
                ],
                "self.fill_value": [
                    1510,
                    940,
                    1229,
                    1519,
                    1274
                ],
                "new_values.T": [
                    1313,
                    1475,
                    1988,
                    1029,
                    1328,
                    949
                ],
                "new.ndim": [
                    954,
                    995
                ],
                "axis": [
                    1153,
                    1281,
                    1286,
                    1417,
                    2442,
                    1297,
                    1429,
                    1430,
                    1436,
                    1314,
                    1317,
                    1321,
                    1194,
                    1323,
                    954,
                    2378,
                    2382,
                    1500,
                    1884,
                    1374,
                    991,
                    1886,
                    1887,
                    997,
                    1256,
                    1518,
                    1136
                ],
                "reshape": [
                    2233,
                    955,
                    1509
                ],
                "np.repeat": [
                    3131,
                    955,
                    1509
                ],
                "new_values.shape": [
                    1664,
                    955,
                    1316
                ],
                "new.astype": [
                    956
                ],
                "new_values.dtype": [
                    1290,
                    956
                ],
                "np.any": [
                    967
                ],
                "np.place": [
                    977
                ],
                "mask.shape": [
                    978
                ],
                "np.putmask": [
                    979,
                    983
                ],
                "mask.T": [
                    988
                ],
                "new.T": [
                    990
                ],
                "new_shape": [
                    3101,
                    996,
                    997,
                    998
                ],
                "new.shape": [
                    1009,
                    996
                ],
                "new_shape.insert": [
                    997
                ],
                "new.reshape": [
                    998
                ],
                "n": [
                    1297,
                    3130,
                    3131,
                    3136,
                    2382,
                    3164,
                    1887,
                    3168,
                    3170,
                    3174,
                    3175,
                    3178,
                    1005,
                    1009,
                    3185,
                    1011,
                    1014,
                    1017,
                    1019
                ],
                "np.squeeze": [
                    1009
                ],
                "n.dtype": [
                    3174,
                    3178,
                    1014
                ],
                "n.astype": [
                    1017
                ],
                "_putmask_smart": [
                    1019
                ],
                "infer_dtype_from": [
                    1043
                ],
                "self.is_bool": [
                    1048,
                    1386,
                    1118
                ],
                "is_bool_dtype": [
                    1048
                ],
                "self.is_complex": [
                    1052
                ],
                "is_integer_dtype": [
                    3145,
                    2117,
                    1053,
                    3148
                ],
                "is_float_dtype": [
                    3145,
                    3148,
                    1053
                ],
                "is_datetime64_dtype": [
                    1066,
                    1060,
                    2207
                ],
                "is_datetime64tz_dtype": [
                    2977,
                    2979,
                    2244,
                    1061,
                    3016,
                    1066,
                    2187
                ],
                "mytz": [
                    1072,
                    1075
                ],
                "othertz": [
                    1073,
                    1075
                ],
                "tz_compare": [
                    1075,
                    2212
                ],
                "is_timedelta64_dtype": [
                    1082,
                    1085
                ],
                "self.is_integer": [
                    1224,
                    1386,
                    1118
                ],
                "missing.clean_fill_method": [
                    1126
                ],
                "method": [
                    1126,
                    1193,
                    1231,
                    1234,
                    1879,
                    1144,
                    1246
                ],
                "r": [
                    3034,
                    3035,
                    1131,
                    1132,
                    1133,
                    3037,
                    3033,
                    1146,
                    1147,
                    1148,
                    1437,
                    1438
                ],
                "check_int_bool": [
                    1146,
                    1131
                ],
                "self._interpolate_with_fill": [
                    1134
                ],
                "fill_value": [
                    1281,
                    1157,
                    2454,
                    1308,
                    1821,
                    1823,
                    1828,
                    1189,
                    1196,
                    1324,
                    1985,
                    1228,
                    1229,
                    1879,
                    1250,
                    2276,
                    1903,
                    1139,
                    1274,
                    1277
                ],
                "coerce": [
                    2600,
                    1179,
                    1140
                ],
                "missing.clean_interp_method": [
                    1144
                ],
                "self._interpolate": [
                    1149
                ],
                "index": [
                    1232,
                    1244,
                    1151
                ],
                "limit_direction": [
                    1248,
                    1155
                ],
                "limit_area": [
                    1249,
                    1156
                ],
                "missing.interpolate_2d": [
                    1191
                ],
                "data": [
                    1256,
                    1226,
                    1220
                ],
                "data.astype": [
                    1226
                ],
                "np.float64": [
                    1226
                ],
                "index.is_monotonic": [
                    1232
                ],
                "missing.interpolate_1d": [
                    1243
                ],
                "interp_values": [
                    1256,
                    1258
                ],
                "np.apply_along_axis": [
                    1256
                ],
                "fill_tuple": [
                    1273,
                    1820,
                    1277,
                    1823
                ],
                "allow_fill": [
                    1281,
                    1275,
                    1278
                ],
                "algos.take_nd": [
                    1280
                ],
                "algos": [
                    1280,
                    1297
                ],
                "algos.diff": [
                    1297
                ],
                "maybe_upcast": [
                    1308
                ],
                "f_ordered": [
                    1312,
                    1327,
                    1311
                ],
                "new_values.flags.f_contiguous": [
                    1311
                ],
                "new_values.flags": [
                    1311
                ],
                "np.prod": [
                    1316
                ],
                "np.roll": [
                    1317
                ],
                "ensure_platform_int": [
                    1317
                ],
                "periods": [
                    1317,
                    1320,
                    1321,
                    1323,
                    1903
                ],
                "axis_indexer": [
                    1321,
                    1323,
                    1324,
                    1319
                ],
                "orig_other": [
                    1412,
                    1364
                ],
                "cond": [
                    1431,
                    1377,
                    1379,
                    1413,
                    1926,
                    1927,
                    1928,
                    1959,
                    1930,
                    1396,
                    1429,
                    1430,
                    1399,
                    1369,
                    1947,
                    1405
                ],
                "other.ndim": [
                    1374
                ],
                "other.reshape": [
                    1375
                ],
                "other.shape": [
                    1921,
                    1444,
                    1375,
                    2431,
                    2015
                ],
                "cond.T": [
                    1377
                ],
                "lib.is_float": [
                    1387
                ],
                "np.isnan": [
                    2018,
                    1388
                ],
                "fastres": [
                    1396,
                    1397
                ],
                "expressions.where": [
                    1396
                ],
                "expressions": [
                    1396
                ],
                "cond.ravel": [
                    1399
                ],
                "block.where": [
                    1411
                ],
                "align": [
                    1414
                ],
                "try_cast": [
                    1416
                ],
                "result.T": [
                    1424,
                    1526
                ],
                "cond.ndim": [
                    1429
                ],
                "cond.swapaxes": [
                    1430
                ],
                "cond.shape": [
                    1927,
                    1431
                ],
                "result_blocks": [
                    1441,
                    2695,
                    2696,
                    2697,
                    2669,
                    2681,
                    2646,
                    2679,
                    2680,
                    1433,
                    2685,
                    1439
                ],
                "taken": [
                    1436,
                    1437
                ],
                "result.take": [
                    1436
                ],
                "m.nonzero": [
                    1436
                ],
                "maybe_downcast_numeric": [
                    1437
                ],
                "nb": [
                    1438,
                    1439
                ],
                "r.T": [
                    1438
                ],
                "result_blocks.append": [
                    1439
                ],
                "other.dtype": [
                    1444,
                    2431,
                    2015
                ],
                "array_equivalent": [
                    1446
                ],
                "other.values": [
                    2017,
                    2433,
                    1446
                ],
                "unstacker": [
                    1472,
                    1696,
                    1470,
                    1977,
                    1980,
                    1469,
                    1694
                ],
                "unstacker_func": [
                    1976,
                    1469
                ],
                "self.values.T": [
                    1469
                ],
                "new_items": [
                    1695,
                    1694,
                    1470,
                    1471
                ],
                "unstacker.get_new_columns": [
                    1694,
                    1470
                ],
                "new_placement": [
                    1699,
                    1476,
                    1988,
                    1478,
                    1471,
                    1979,
                    1695
                ],
                "new_columns.get_indexer": [
                    1695,
                    1471
                ],
                "new_columns": [
                    1695,
                    1980,
                    1471
                ],
                "unstacker.get_new_values": [
                    1472,
                    1696
                ],
                "is_empty": [
                    1506,
                    1500
                ],
                "orig_scalar": [
                    1528,
                    1501,
                    1502
                ],
                "qs": [
                    1504,
                    1510,
                    1511,
                    2442,
                    1517,
                    1501
                ],
                "np.asarray": [
                    1792,
                    1801,
                    1514,
                    2347,
                    1810,
                    2261,
                    2521,
                    3164,
                    2334
                ],
                "nanpercentile": [
                    1515
                ],
                "interpolation": [
                    1522,
                    2442
                ],
                "result.shape": [
                    1530
                ],
                "lib.item_from_zerodim": [
                    1532
                ],
                "np.ndim": [
                    1534
                ],
                "np.arange": [
                    1975,
                    1535
                ],
                "self._replace_single": [
                    1569,
                    2650,
                    2699
                ],
                "__init__": [
                    2148,
                    1606,
                    2569,
                    1717,
                    2872,
                    2462
                ],
                "col": [
                    1616,
                    1617,
                    1618,
                    2352,
                    1620,
                    1621,
                    1622,
                    2353,
                    1626
                ],
                "com.is_null_slice": [
                    2353,
                    1618,
                    1850
                ],
                "com": [
                    2353,
                    1618,
                    1850
                ],
                "self._holder": [
                    1860,
                    1958,
                    2445,
                    1749,
                    2295,
                    2296,
                    2137,
                    1631
                ],
                "locs.tolist": [
                    1634
                ],
                "_safe_reshape": [
                    1664
                ],
                "NonConsolidatableMixIn": [
                    1702
                ],
                "self._maybe_coerce_values": [
                    2147,
                    1716
                ],
                "extract_array": [
                    2870,
                    1930,
                    1924,
                    1734
                ],
                "self.values.dtype.na_value": [
                    1744
                ],
                "self._holder._can_hold_na": [
                    1749
                ],
                "self.values.dtype._is_numeric": [
                    1758
                ],
                "self.values.take": [
                    1985,
                    1828
                ],
                "self._holder._concat_same_type": [
                    1860
                ],
                "values.fillna": [
                    1866,
                    1879
                ],
                "diff": [
                    1887
                ],
                "self.values.shift": [
                    1903
                ],
                "ABCDataFrame": [
                    1926,
                    1918
                ],
                "other.iloc": [
                    1922
                ],
                "cond.iloc": [
                    1928
                ],
                "self.dtype.na_value": [
                    1936
                ],
                "is_sparse": [
                    1938,
                    2971
                ],
                "icond": [
                    1953,
                    1947,
                    1951
                ],
                "set_other": [
                    1953,
                    1949,
                    1951
                ],
                "self._holder._from_sequence": [
                    1958
                ],
                "np.where": [
                    1959
                ],
                "Block._ftype": [
                    1966
                ],
                "dummy_arr": [
                    1977,
                    1975
                ],
                "n_rows": [
                    1975
                ],
                "dummy_unstacker": [
                    1976,
                    1977
                ],
                "functools.partial": [
                    1976
                ],
                "functools": [
                    1976
                ],
                "self._get_unstack_items": [
                    1979
                ],
                "indices": [
                    1985,
                    1988
                ],
                "place": [
                    1986,
                    1988
                ],
                "ExtensionBlock": [
                    2984,
                    1993,
                    2861,
                    2267,
                    2973
                ],
                "NumericBlock": [
                    2011,
                    2101,
                    2527
                ],
                "left": [
                    2017,
                    2018
                ],
                "right": [
                    2017,
                    2018
                ],
                "FloatOrComplexBlock": [
                    2085,
                    2021
                ],
                "np.floating": [
                    2082,
                    2633,
                    2985,
                    2028,
                    2092,
                    2032
                ],
                "np.integer": [
                    2633,
                    2988,
                    2028,
                    2092,
                    2992,
                    2110
                ],
                "np.datetime64": [
                    2976,
                    2243,
                    2276,
                    2633,
                    2029,
                    2129,
                    2035,
                    2111
                ],
                "np.timedelta64": [
                    2471,
                    2474,
                    2987,
                    2029,
                    2035,
                    2454,
                    2493,
                    2111
                ],
                "np.int_": [
                    2032,
                    2094
                ],
                "np.bool_": [
                    2535,
                    2536,
                    2633,
                    2539,
                    2095,
                    2994,
                    2035
                ],
                "datetime": [
                    2210,
                    2035,
                    2597
                ],
                "timedelta": [
                    2474,
                    2035,
                    2599
                ],
                "float_format": [
                    2056,
                    2072
                ],
                "decimal": [
                    2056,
                    2073
                ],
                "formatter": [
                    2077,
                    2069
                ],
                "FloatArrayFormatter": [
                    2069
                ],
                "formatter.get_result_as_array": [
                    2077
                ],
                "value.dtype.type": [
                    2082,
                    2243,
                    2632,
                    2539,
                    2098,
                    2493
                ],
                "np.complexfloating": [
                    2633,
                    2098,
                    2092,
                    2990
                ],
                "np.float_": [
                    2094
                ],
                "self.dtype.itemsize": [
                    2112
                ],
                "tipo.itemsize": [
                    2112
                ],
                "DatetimeArray": [
                    2280,
                    3019,
                    2125,
                    2190,
                    2264,
                    2173
                ],
                "self.values.ravel": [
                    2136,
                    2576,
                    2613
                ],
                "astype": [
                    2137,
                    2195
                ],
                "result.reshape": [
                    2138
                ],
                "DatetimeLikeBlockMixin": [
                    2449,
                    2142
                ],
                "_NS_DTYPE": [
                    2170,
                    2347
                ],
                "conversion.ensure_datetime64ns": [
                    2256,
                    2171
                ],
                "conversion": [
                    2256,
                    2458,
                    2171
                ],
                "values._data": [
                    2460,
                    2174
                ],
                "tz_localize": [
                    2190
                ],
                "values.tz_convert": [
                    2191
                ],
                "dtype.tz": [
                    2191
                ],
                "self.is_datetimetz": [
                    2200,
                    2211
                ],
                "is_valid_nat_for_dtype": [
                    2202,
                    2476,
                    2215
                ],
                "NaT": [
                    2208,
                    2472
                ],
                "element.tzinfo": [
                    2212,
                    2213
                ],
                "self.dtype.tz": [
                    2212
                ],
                "i8values": [
                    2234,
                    2227,
                    2238,
                    2223
                ],
                "fmt": [
                    2236,
                    2231
                ],
                "_get_format_datetime64_from_values": [
                    2231
                ],
                "date_format": [
                    2231
                ],
                "tslib.format_array_from_datetime": [
                    2233
                ],
                "tslib": [
                    2233
                ],
                "i8values.ravel": [
                    2234
                ],
                "i8values.shape": [
                    2238
                ],
                "np.atleast_2d": [
                    3007,
                    2399,
                    2239
                ],
                "DatetimeArray._simple_new": [
                    2264,
                    3019
                ],
                "DatetimeBlock": [
                    2978,
                    2274,
                    2267,
                    2275
                ],
                "_can_hold_element": [
                    2274
                ],
                "DatetimeBlock._can_hold_element": [
                    2274
                ],
                "to_native_types": [
                    2275
                ],
                "DatetimeBlock.to_native_types": [
                    2275
                ],
                "values.tz": [
                    2298
                ],
                "self.values._data.base": [
                    2307
                ],
                "self.values._data": [
                    2307
                ],
                "asi8": [
                    2382
                ],
                "self.shift": [
                    2382
                ],
                "new_values.reshape": [
                    2385
                ],
                "new_values.astype": [
                    2386
                ],
                "TimeDeltaBlock": [
                    2387,
                    2989
                ],
                "x.dtype": [
                    2394
                ],
                "concat_datetime": [
                    2395
                ],
                "x.values": [
                    2395
                ],
                "ObjectBlock": [
                    2400,
                    2425,
                    2997
                ],
                "concat_same_type": [
                    2401
                ],
                "fillna": [
                    2489,
                    2410,
                    2407
                ],
                "indexer.size": [
                    2419
                ],
                "setitem": [
                    2421
                ],
                "obj_vals": [
                    2425,
                    2423
                ],
                "newb.setitem": [
                    2427
                ],
                "other.values.view": [
                    2433
                ],
                "naive": [
                    2441,
                    2436,
                    2439
                ],
                "naive.reshape": [
                    2439
                ],
                "res_blk": [
                    2442,
                    2445,
                    2446
                ],
                "blk.quantile": [
                    2442
                ],
                "aware": [
                    2445,
                    2446
                ],
                "res_blk.values.ravel": [
                    2445
                ],
                "res_blk.values": [
                    2445
                ],
                "res_blk.ndim": [
                    2446
                ],
                "IntBlock": [
                    2449,
                    2993
                ],
                "_TD_DTYPE": [
                    2457
                ],
                "conversion.ensure_timedelta64ns": [
                    2458
                ],
                "TimedeltaArray": [
                    2466,
                    2459,
                    2524
                ],
                "rvalues": [
                    2504,
                    2514,
                    2507,
                    2518
                ],
                "np.empty": [
                    2504
                ],
                "imask": [
                    2514,
                    2515,
                    2508
                ],
                "ravel": [
                    2508
                ],
                "rvalues.flat": [
                    2514
                ],
                "_repr_base": [
                    2515
                ],
                "Timedelta": [
                    2515
                ],
                "TimedeltaArray._simple_new": [
                    2524
                ],
                "to_replace_values": [
                    2547,
                    2548
                ],
                "np.atleast_1d": [
                    2547
                ],
                "np.can_cast": [
                    2548
                ],
                "replace": [
                    2946,
                    2659,
                    2550,
                    2775
                ],
                "values.dtype.type": [
                    2566
                ],
                "lib.is_bool_array": [
                    2576
                ],
                "val.shape": [
                    2594
                ],
                "soft_convert_objects": [
                    2595
                ],
                "val.ravel": [
                    2596
                ],
                "numeric": [
                    2598
                ],
                "to_rep_is_list": [
                    2641,
                    2683,
                    2643,
                    2644
                ],
                "value_is_list": [
                    2642,
                    2643,
                    2644
                ],
                "both_lists": [
                    2667,
                    2643
                ],
                "either_list": [
                    2649,
                    2658,
                    2644
                ],
                "is_re": [
                    2649,
                    2786,
                    2763,
                    2795
                ],
                "to_rep": [
                    2672,
                    2684,
                    2668,
                    2688
                ],
                "b._replace_single": [
                    2687,
                    2671
                ],
                "to_rep_re": [
                    2744,
                    2750,
                    2760
                ],
                "is_re_compilable": [
                    2744,
                    2747
                ],
                "regex_re": [
                    2760,
                    2747,
                    2757,
                    2750
                ],
                "pattern": [
                    2770,
                    2764,
                    2766
                ],
                "to_replace.pattern": [
                    2764
                ],
                "rx": [
                    2786,
                    2787,
                    2795,
                    2796,
                    2771
                ],
                "re.compile": [
                    2771
                ],
                "re": [
                    2771
                ],
                "rx.search": [
                    2787
                ],
                "rx.sub": [
                    2796
                ],
                "np.vectorize": [
                    2800
                ],
                "re_replacer": [
                    2800
                ],
                "filt": [
                    2808,
                    2810,
                    2803,
                    2805
                ],
                "nonzero": [
                    2805
                ],
                "block.convert": [
                    2815
                ],
                "_replace_coerce": [
                    2845
                ],
                "self.convert": [
                    2857
                ],
                "concat_categorical": [
                    2866
                ],
                "np.object_": [
                    2883
                ],
                "self.values._internal_get_values": [
                    2889
                ],
                "result.values.replace": [
                    2938
                ],
                "result.values": [
                    2945,
                    2938
                ],
                "result.convert": [
                    2940
                ],
                "result.values.add_categories": [
                    2945
                ],
                "CategoricalBlock": [
                    2946,
                    2975
                ],
                "vtype": [
                    2976,
                    2985,
                    2987,
                    2988,
                    2990,
                    2992,
                    2969
                ],
                "cls": [
                    2978,
                    2980,
                    2982,
                    2984,
                    2986,
                    2989,
                    2991,
                    2993,
                    2995,
                    2997,
                    2998,
                    2973,
                    2975
                ],
                "DatetimeTZBlock": [
                    3016,
                    2980
                ],
                "is_interval_dtype": [
                    2981
                ],
                "is_period_dtype": [
                    2981
                ],
                "ObjectValuesExtensionBlock": [
                    2982
                ],
                "FloatBlock": [
                    2986
                ],
                "ComplexBlock": [
                    2991
                ],
                "BoolBlock": [
                    2995
                ],
                "ABCPandasArray": [
                    3004
                ],
                "values.to_numpy": [
                    3005
                ],
                "PandasDtype": [
                    3009
                ],
                "dtype.numpy_dtype": [
                    3010
                ],
                "klass": [
                    3016,
                    3012,
                    3021,
                    3014
                ],
                "get_block_type": [
                    3014
                ],
                "blocks.extend": [
                    3035
                ],
                "blocks.append": [
                    3040,
                    3037
                ],
                "b.dtype": [
                    3065
                ],
                "b.mgr_locs.as_array": [
                    3070
                ],
                "b.mgr_locs": [
                    3070
                ],
                "np.vstack": [
                    3071
                ],
                "b.values": [
                    3071
                ],
                "argsort": [
                    3073,
                    3074,
                    3075
                ],
                "np.argsort": [
                    3073
                ],
                "arr": [
                    3098,
                    3099,
                    3100,
                    3101,
                    3102
                ],
                "ABCSeries": [
                    3098
                ],
                "arr._values": [
                    3099
                ],
                "ABCExtensionArray": [
                    3100
                ],
                "arr.reshape": [
                    3101
                ],
                "nn": [
                    3136,
                    3143,
                    3145,
                    3156,
                    3158
                ],
                "_isna_compat": [
                    3143
                ],
                "nn.dtype": [
                    3145
                ],
                "v.dtype": [
                    3180,
                    3148,
                    3174,
                    3156
                ],
                "warnings.catch_warnings": [
                    3154
                ],
                "warnings": [
                    3154,
                    3155
                ],
                "warnings.simplefilter": [
                    3155
                ],
                "np.ComplexWarning": [
                    3155
                ],
                "nn_at": [
                    3161,
                    3156,
                    3158
                ],
                "nn.astype": [
                    3156
                ],
                "comp": [
                    3158,
                    3159
                ],
                "comp.all": [
                    3159
                ],
                "v.dtype.kind": [
                    3174
                ],
                "n.dtype.kind": [
                    3174
                ],
                "_putmask_preserve": [
                    3185,
                    3175
                ],
                "v._internal_get_values": [
                    3181
                ],
                "v.astype": [
                    3183
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_72/pandas/tests/frame/indexing/test_categorical.py",
                "test_function": "test_setitem_single_row_categorical",
                "test_function_code": "    def test_setitem_single_row_categorical(self):\n        # GH 25495\n        df = DataFrame({\"Alpha\": [\"a\"], \"Numeric\": [0]})\n        categories = pd.Categorical(df[\"Alpha\"], categories=[\"a\", \"b\", \"c\"])\n        df.loc[:, \"Alpha\"] = categories\n\n        result = df[\"Alpha\"]\n        expected = Series(categories, index=df.index, name=\"Alpha\")\n        tm.assert_series_equal(result, expected)",
                "test_error": "TypeError: data type not understood",
                "full_test_error": "self = <test_categorical.TestDataFrameIndexingCategorical object at 0x1138376a0>\n\n    def test_setitem_single_row_categorical(self):\n        # GH 25495\n        df = DataFrame({\"Alpha\": [\"a\"], \"Numeric\": [0]})\n        categories = pd.Categorical(df[\"Alpha\"], categories=[\"a\", \"b\", \"c\"])\n>       df.loc[:, \"Alpha\"] = categories\n\npandas/tests/frame/indexing/test_categorical.py:361: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:637: in __setitem__\n    self._setitem_with_indexer(indexer, value)\npandas/core/indexing.py:977: in _setitem_with_indexer\n    setter(labels[0], value)\npandas/core/indexing.py:927: in setter\n    s._data = s._data.setitem(indexer=pi, value=v)\npandas/core/internals/managers.py:540: in setitem\n    return self.apply(\"setitem\", **kwargs)\npandas/core/internals/managers.py:419: in apply\n    applied = getattr(b, f)(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ObjectBlock: 1 dtype: object, indexer = slice(None, None, None)\nvalue = [a]\nCategories (3, object): [a, b, c]\n\n    def setitem(self, indexer, value):\n        \"\"\"\n        Set the value inplace, returning a a maybe different typed block.\n    \n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n    \n        Returns\n        -------\n        Block\n    \n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        transpose = self.ndim == 2\n    \n        # coerce None values, if appropriate\n        if value is None:\n            if self.is_numeric:\n                value = np.nan\n    \n        # coerce if block dtype can store value\n        values = self.values\n        if self._can_hold_element(value):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(value):\n                value = convert_scalar(values, value)\n    \n        else:\n            # current dtype cannot store value, coerce to common dtype\n            find_dtype = False\n    \n            if hasattr(value, \"dtype\"):\n                dtype = value.dtype\n                find_dtype = True\n    \n            elif lib.is_scalar(value) and not isna(value):\n                dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n                find_dtype = True\n    \n            if find_dtype:\n                dtype = find_common_type([values.dtype, dtype])\n                if not is_dtype_equal(self.dtype, dtype):\n                    b = self.astype(dtype)\n                    return b.setitem(indexer, value)\n    \n        # value must be storeable at this moment\n        if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n            # We need to be careful not to allow through strings that\n            #  can be parsed to EADtypes\n            arr_value = value\n        else:\n            arr_value = np.array(value)\n    \n        # cast the values to a type that can hold nan (if necessary)\n        if not self._can_hold_element(value):\n            dtype, _ = maybe_promote(arr_value.dtype)\n            values = values.astype(dtype)\n    \n        if transpose:\n            values = values.T\n    \n        # length checking\n        check_setitem_lengths(indexer, value, values)\n    \n        if is_empty_indexer(indexer, arr_value):\n            # GH#8669 empty indexers\n            pass\n    \n        elif is_scalar_indexer(indexer, arr_value):\n            # setting a single element for each dim and with a rhs that could\n            #  be e.g. a list; see GH#6043\n            values[indexer] = value\n    \n        # if we are an exact match (ex-broadcasting),\n        # then use the resultant dtype\n        elif (\n            len(arr_value.shape)\n            and arr_value.shape[0] == values.shape[0]\n            and arr_value.size == values.size\n        ):\n            values[indexer] = value\n            try:\n>               values = values.astype(arr_value.dtype)\nE               TypeError: data type not understood\n\npandas/core/internals/blocks.py:898: TypeError",
                "traceback": "pandas/core/indexing.py:637: in __setitem__\n    self._setitem_with_indexer(indexer, value)\npandas/core/indexing.py:977: in _setitem_with_indexer\n    setter(labels[0], value)\npandas/core/indexing.py:927: in setter\n    s._data = s._data.setitem(indexer=pi, value=v)\npandas/core/internals/managers.py:540: in setitem\n    return self.apply(\"setitem\", **kwargs)\npandas/core/internals/managers.py:419: in apply\n    applied = getattr(b, f)(**kwargs)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ObjectBlock: 1 dtype: object, indexer = slice(None, None, None)\nvalue = [a]\nCategories (3, object): [a, b, c]\n\n    def setitem(self, indexer, value):\n        \"\"\"\n        Set the value inplace, returning a a maybe different typed block.\n    \n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n    \n        Returns\n        -------\n        Block\n    \n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        transpose = self.ndim == 2\n    \n        # coerce None values, if appropriate\n        if value is None:\n            if self.is_numeric:\n                value = np.nan\n    \n        # coerce if block dtype can store value\n        values = self.values\n        if self._can_hold_element(value):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(value):\n                value = convert_scalar(values, value)\n    \n        else:\n            # current dtype cannot store value, coerce to common dtype\n            find_dtype = False\n    \n            if hasattr(value, \"dtype\"):\n                dtype = value.dtype\n                find_dtype = True\n    \n            elif lib.is_scalar(value) and not isna(value):\n                dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n                find_dtype = True\n    \n            if find_dtype:\n                dtype = find_common_type([values.dtype, dtype])\n                if not is_dtype_equal(self.dtype, dtype):\n                    b = self.astype(dtype)\n                    return b.setitem(indexer, value)\n    \n        # value must be storeable at this moment\n        if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n            # We need to be careful not to allow through strings that\n            #  can be parsed to EADtypes\n            arr_value = value\n        else:\n            arr_value = np.array(value)\n    \n        # cast the values to a type that can hold nan (if necessary)\n        if not self._can_hold_element(value):\n            dtype, _ = maybe_promote(arr_value.dtype)\n            values = values.astype(dtype)\n    \n        if transpose:\n            values = values.T\n    \n        # length checking\n        check_setitem_lengths(indexer, value, values)\n    \n        if is_empty_indexer(indexer, arr_value):\n            # GH#8669 empty indexers\n            pass\n    \n        elif is_scalar_indexer(indexer, arr_value):\n            # setting a single element for each dim and with a rhs that could\n            #  be e.g. a list; see GH#6043\n            values[indexer] = value\n    \n        # if we are an exact match (ex-broadcasting),\n        # then use the resultant dtype\n        elif (\n            len(arr_value.shape)\n            and arr_value.shape[0] == values.shape[0]\n            and arr_value.size == values.size\n        ):\n            values[indexer] = value\n            try:\n>               values = values.astype(arr_value.dtype)\nE               TypeError: data type not understood\n\npandas/core/internals/blocks.py:898: TypeError",
                "test_function_decorators": []
            }
        ]
    }
}