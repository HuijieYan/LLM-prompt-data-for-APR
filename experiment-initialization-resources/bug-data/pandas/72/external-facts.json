{
    "pandas:72": {
        "github_issue_title": [
            "Unexpected dtype when using .loc to set Categorical value for column in 1-row DataFrame\n"
        ],
        "github_issue_description": [
            "Code Sample, a copy-pastable example if possible\nIn [1]: import pandas as pd\n\nIn [2]: df = pd.DataFrame({'Alpha': [u'a'], 'Numeric': [0]})\n\nIn [3]: df.loc[:,'Alpha']\nOut[3]: \n0    a\nName: Alpha, dtype: object\n\nIn [4]: codes = pd.Categorical(df['Alpha'], categories = [u'a',u'b',u'c'])\n\nIn [5]: codes\nOut[5]: \n[a]\nCategories (3, object): [a, b, c]\n\nIn [6]: df.loc[:,'Alpha'] = codes\n\nIn [7]: df.loc[:,'Alpha']\nOut[7]: \n0    a\nName: Alpha, dtype: object\nProblem description\nWhen I try to set the column of a one-row DataFrame to a pandas.core.arrays.categorical.Categorical, it is returned as a pandas.core.series.Series of dtype('O') rather than a pandas.core.series.Series of CategoricalDtype(categories=[u'a', u'b', u'c'], ordered=False). I get the latter return value when I set the column using df['Alpha'] = codes or df.Alpha = codes. I can't replicate this inconsistency with DataFrames containing more than one row.\n\nExpected Output\nOut[7]: \n0    a\nName: Alpha, dtype: category\nCategories (3, object): [a, b, c]\n"
        ]
    }
}