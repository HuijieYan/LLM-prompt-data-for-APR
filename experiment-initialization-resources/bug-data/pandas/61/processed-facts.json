{
    "1.1.1": "def _get_with(self, key):\n    # other: fancy integer or otherwise\n    if isinstance(key, slice):\n        return self._slice(key)\n    elif isinstance(key, ABCDataFrame):\n        raise TypeError(\n            \"Indexing a Series with DataFrame is not \"\n            \"supported, use the appropriate DataFrame column\"\n        )\n    elif isinstance(key, tuple):\n        try:\n            return self._get_values_tuple(key)\n        except ValueError:\n            # if we don't have a MultiIndex, we may still be able to handle\n            #  a 1-tuple.  see test_1tuple_without_multiindex\n            if len(key) == 1:\n                key = key[0]\n                if isinstance(key, slice):\n                    return self._get_values(key)\n            raise\n\n    if not isinstance(key, (list, np.ndarray, Series, Index)):\n        key = list(key)\n\n    if isinstance(key, Index):\n        key_type = key.inferred_type\n    else:\n        key_type = lib.infer_dtype(key, skipna=False)\n\n    # Note: The key_type == \"boolean\" case should be caught by the\n    #  com.is_bool_indexer check in __getitem__\n    if key_type == \"integer\":\n        if self.index.is_integer() or self.index.is_floating():\n            return self.loc[key]\n        elif isinstance(self.index, IntervalIndex):\n            indexer = self.index.get_indexer_for(key)\n            return self.iloc[indexer]\n        else:\n            return self._get_values(key)\n\n    if isinstance(key, (list, tuple)):\n        # TODO: de-dup with tuple case handled above?\n        # handle the dup indexing case GH#4246\n        if len(key) == 1 and isinstance(key[0], slice):\n            # [slice(0, 5, None)] will break if you convert to ndarray,\n            # e.g. as requested by np.median\n            # FIXME: hack\n            return self._get_values(key)\n\n        return self.loc[key]\n\n    return self.reindex(key)\n",
    "1.1.2": null,
    "1.2.1": "pandas/core/series.py",
    "1.2.2": "import numpy as np\nfrom pandas._libs import lib, properties, reshape, tslibs\nfrom pandas.core.dtypes.generic import ABCDataFrame, ABCDatetimeIndex, ABCMultiIndex, ABCPeriodIndex, ABCSeries, ABCSparseArray\nfrom pandas.core.indexes.api import Float64Index, Index, IntervalIndex, InvalidIndexError, MultiIndex, ensure_index",
    "1.3.1": "class Series(base.IndexOpsMixin, generic.NDFrame)",
    "1.3.2": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, *, **) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, argument order is maintained for Python 3.6\n       and later.\n\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If both a dict and index\n    sequence are used, the index will override the keys found in the\n    dict.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : str, optional\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data.",
    "1.4.1": [
        "_slice(self, slobj: slice, axis: int=0, kind: str='getitem') -> 'Series'",
        "_get_values_tuple(self, key)",
        "_get_values(self, indexer)",
        "reindex(self, index=None, **kwargs)"
    ],
    "1.4.2": null,
    "1.5.1": [
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]"
    ],
    "1.5.2": [
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py"
    ],
    "2.1.1": [
        [
            "EcdlEpkZEz    1",
            "EcdlEpkZEz    1",
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7ff756f65b50>\nindex = Index(['P88qpWCSpW', 'EcdlEpkZEz', 'MQ0bC3nTc7', 'n6hid94wNl', 'qVynXX6N42'], dtype='object')\nobj = P88qpWCSpW    0",
            "MQ0bC3nTc7    2\nn6hid94wNl    3\nqVynXX6N42    4\ndtype: int64\nidxr = P88qpWCSpW    0",
            "MQ0bC3nTc7    2\nn6hid94wNl    3\nqVynXX6N42    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7ff757159460>\nindex = Index(['021\u05d1\u05dc6\u05e3\u05e6\u05de\u05d9', '\u05de\u05e6\u05d54\u05e7\u05de8\u05e361', '\u05dc0\u05e38\u05d0\u05d1\u05da8\u05d86', '4\u05e2\u05e5\u05db\u05d6\u05d7\u05e0\u05dd\u05d3\u05e1', '31\u05e6\u05e5\u05d4\u05db32\u05e0\u05d3'], dtype='object')\nobj = 021\u05d1\u05dc6\u05e3\u05e6\u05de\u05d9    0\n\u05de\u05e6\u05d54\u05e7\u05de8\u05e361    1\n\u05dc0\u05e38\u05d0\u05d1\u05da8\u05d86    2\n4\u05e2\u05e5\u05db\u05d6\u05d7\u05e0\u05dd\u05d3\u05e1    3\n31\u05e6\u05e5\u05d4\u05db32\u05e0\u05d3    4\ndtype: int64\nidxr = 021\u05d1\u05dc6\u05e3\u05e6\u05de\u05d9    0\n\u05de\u05e6\u05d54\u05e7\u05de8\u05e361    1\n\u05dc0\u05e38\u05d0\u05d1\u05da8\u05d86    2\n4\u05e2\u05e5\u05db\u05d6\u05d7\u05e0\u05dd\u05d3\u05e1    3\n31\u05e6\u05e5\u05d4\u05db32\u05e0\u05d3    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7ff756f65d90>\nindex = DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n               '2000-01-07'],\n              dtype='datetime64[ns]', freq='B')\nobj = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7ff7570cc4f0>\nindex = PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n             '2000-01-07'],\n            dtype='period[B]', freq='B')\nobj = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7ff7571af130>\nindex = TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')\nobj = 1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64\nidxr = 1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7ff757137070>\nindex = Index([False, True, False, False, False], dtype='object')\nobj = False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64\nidxr = False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7ff757187550>\nindex = CategoricalIndex(['xo6H', '0Upa', 'Hmsu', 'xo6H', '0Upa'], categories=['xo6H', '0Upa', 'Hmsu'], ordered=False, dtype='category')\nobj = xo6H    0\n0Upa    1\nHmsu    2\nxo6H    3\n0Upa    4\ndtype: int64\nidxr = xo6H    0\n0Upa    1\nHmsu    2\nxo6H    3\n0Upa    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ]
    ],
    "2.2.1": [
        [
            {
                "key": {
                    "value": "array([[[2, 0],\n        [2, 2]],\n\n       [[0, 0],\n        [2, 2]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Int64Index([0, 1, 2, 3, 4], dtype='int64')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[4, 4],\n        [1, 0]],\n\n       [[2, 0],\n        [3, 2]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "-364186.078004    0\n-228750.058181    1\n-85715.528700     2\n-80499.698854     3\n 95633.356022     4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Float64Index([ -364186.0780037346, -228750.05818088824,  -85715.52870009924,\n               -80499.69885351516,   95633.35602178646],\n             dtype='float64')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 2],\n        [2, 2]],\n\n       [[3, 3],\n        [3, 4]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "l1LhtIu9zz    0\nWes3NLDQK7    1\nrQB4IX6cgD    2\nwSbtFB8shh    3\nBhIz6Xwzyb    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['l1LhtIu9zz', 'Wes3NLDQK7', 'rQB4IX6cgD', 'wSbtFB8shh', 'BhIz6Xwzyb'], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[2, 4],\n        [0, 0]],\n\n       [[0, 1],\n        [3, 3]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "\u05d2\u05e0\u05e2\u05d2\u05d3\u05de\u05d3\u05d3\u05dc\u05da    0\n\u05d6\u05d0\u05e7\u05d9\u05e2\u05d13\u05e0\u05e54    1\n\u05d7\u05e56\u05d01\u05e5\u05e9\u05e8\u05e2\u05d4    2\n4\u05d7\u05dd\u05e23\u05d8\u05dc8\u05d6\u05d0    3\n\u05d822\u05e2\u05d9\u05de\u05d9\u05e7\u05d0\u05e4    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['\u05d2\u05e0\u05e2\u05d2\u05d3\u05de\u05d3\u05d3\u05dc\u05da', '\u05d6\u05d0\u05e7\u05d9\u05e2\u05d13\u05e0\u05e54', '\u05d7\u05e56\u05d01\u05e5\u05e9\u05e8\u05e2\u05d4', '4\u05d7\u05dd\u05e23\u05d8\u05dc8\u05d6\u05d0', '\u05d822\u05e2\u05d9\u05de\u05d9\u05e7\u05d0\u05e4'], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[1, 1],\n        [2, 2]],\n\n       [[2, 3],\n        [0, 2]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n               '2000-01-07'],\n              dtype='datetime64[ns]', freq='B')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 3],\n        [0, 1]],\n\n       [[3, 0],\n        [3, 0]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n             '2000-01-07'],\n            dtype='period[B]', freq='B')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[4, 0],\n        [3, 4]],\n\n       [[4, 0],\n        [4, 0]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 2],\n        [4, 1]],\n\n       [[0, 0],\n        [1, 0]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Index([False, True, False, False, False], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[4, 2],\n        [1, 1]],\n\n       [[2, 1],\n        [3, 3]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=5, step=1)",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 2],\n        [1, 0]],\n\n       [[2, 4],\n        [3, 0]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "GML1    0\n4Q90    1\nLLwN    2\nGML1    3\n4Q90    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "CategoricalIndex(['GML1', '4Q90', 'LLwN', 'GML1', '4Q90'], categories=['GML1', '4Q90', 'LLwN'], ordered=False, dtype='category')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Int64Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Float64Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "DatetimeIndex"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "PeriodIndex"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "TimedeltaIndex"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "RangeIndex"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "CategoricalIndex"
            },
            {
                "key_type": "str"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "key": {
                    "value": "array([[[3, 0],\n        [2, 0]],\n\n       [[1, 3],\n        [1, 3]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Int64Index([0, 1, 2, 3, 4], dtype='int64')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 3],\n        [2, 2]],\n\n       [[4, 1],\n        [3, 2]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "-2047.902406    0\n-1772.602965    1\n-1007.452414    2\n 4095.993715    3\n 5084.125019    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Float64Index([ -2047.902406219898, -1772.6029654597041, -1007.4524138909225,\n                4095.993714666638,   5084.125019438894],\n             dtype='float64')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 4],\n        [4, 3]],\n\n       [[4, 4],\n        [2, 4]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "ZMzZqSEKOC    0\nWo8cxWL5T5    1\n6jlqxwloQO    2\nUqtIDnICXu    3\nbCTPNzSFAt    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['ZMzZqSEKOC', 'Wo8cxWL5T5', '6jlqxwloQO', 'UqtIDnICXu', 'bCTPNzSFAt'], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[2, 1],\n        [0, 1]],\n\n       [[4, 2],\n        [1, 1]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "\u05e2\u05d37\u05d6\u05d9\u05d5\u05e6\u05e9\u05e7\u05df    0\n\u05da17\u05e052\u05e5\u05d5\u05d58    1\n553\u05d48\u05de\u05d358\u05d6    2\n\u05dc\u05d0\u05d8\u05e1\u05d37\u05df\u05d57\u05e2    3\n\u05d29\u05dc\u05e3\u05db7\u05d9\u05e9\u05e9\u05da    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['\u05e2\u05d37\u05d6\u05d9\u05d5\u05e6\u05e9\u05e7\u05df', '\u05da17\u05e052\u05e5\u05d5\u05d58', '553\u05d48\u05de\u05d358\u05d6', '\u05dc\u05d0\u05d8\u05e1\u05d37\u05df\u05d57\u05e2', '\u05d29\u05dc\u05e3\u05db7\u05d9\u05e9\u05e9\u05da'], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 3],\n        [4, 2]],\n\n       [[4, 0],\n        [3, 2]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n               '2000-01-07'],\n              dtype='datetime64[ns]', freq='B')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 3],\n        [0, 3]],\n\n       [[2, 1],\n        [1, 0]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n             '2000-01-07'],\n            dtype='period[B]', freq='B')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 0],\n        [2, 2]],\n\n       [[3, 3],\n        [3, 2]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[1, 0],\n        [4, 3]],\n\n       [[2, 2],\n        [0, 1]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "Index([False, True, False, False, False], dtype='object')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 0],\n        [4, 3]],\n\n       [[0, 3],\n        [1, 3]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=5, step=1)",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 2],\n        [0, 1]],\n\n       [[4, 1],\n        [2, 3]]])",
                    "shape": "(2, 2, 2)",
                    "omitted": false
                },
                "self": {
                    "value": "foD2    0\nlkwo    1\ndUCX    2\nfoD2    3\nlkwo    4\ndtype: int64",
                    "shape": "(5,)",
                    "omitted": false
                },
                "self.index": {
                    "value": "CategoricalIndex(['foD2', 'lkwo', 'dUCX', 'foD2', 'lkwo'], categories=['foD2', 'lkwo', 'dUCX'], ordered=False, dtype='category')",
                    "shape": "(5,)",
                    "omitted": false
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Int64Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Float64Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "DatetimeIndex"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "PeriodIndex"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "TimedeltaIndex"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "RangeIndex"
            },
            {
                "key_type": "str"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "CategoricalIndex"
            },
            {
                "key_type": "str"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}