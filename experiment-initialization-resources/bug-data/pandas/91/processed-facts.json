{
    "1.1.1": "@Substitution(klass=\"TimedeltaIndex\")\n@Appender(_shared_docs[\"searchsorted\"])\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    if isinstance(value, (np.ndarray, Index)):\n        value = np.array(value, dtype=_TD_DTYPE, copy=False)\n    else:\n        value = Timedelta(value).asm8.view(_TD_DTYPE)\n\n    return self.values.searchsorted(value, side=side, sorter=sorter)\n",
    "1.1.2": null,
    "1.2.1": "pandas/core/indexes/timedeltas.py",
    "1.2.2": "import numpy as np\nfrom pandas._libs import NaT, Timedelta, index as libindex\nfrom pandas.util._decorators import Appender, Substitution\nfrom pandas.core.dtypes.common import _TD_DTYPE, is_float, is_integer, is_list_like, is_scalar, is_timedelta64_dtype, is_timedelta64_ns_dtype, pandas_dtype\nfrom pandas.core.base import _shared_docs\nfrom pandas.core.indexes.base import Index, _index_shared_docs, maybe_extract_name",
    "1.3.1": "@inherit_names(['_bool_ops', '_object_ops', '_field_ops', '_datetimelike_ops', '_datetimelike_methods', '_other_ops'], TimedeltaArray)\n@delegate_names(TimedeltaArray, TimedeltaDelegateMixin._delegated_properties, typ='property')\n@delegate_names(TimedeltaArray, TimedeltaDelegateMixin._delegated_methods, typ='method', overwrite=True)\nclass TimedeltaIndex(DatetimeTimedeltaMixin, dtl.TimelikeOps, TimedeltaDelegateMixin)",
    "1.3.2": "Immutable ndarray of timedelta64 data, represented internally as int64, and\nwhich can be boxed to timedelta objects.\n\nParameters\n----------\ndata  : array-like (1-dimensional), optional\n    Optional timedelta-like data to construct index with.\nunit : unit of the arg (D,h,m,s,ms,us,ns) denote the unit, optional\n    Which is an integer/float number.\nfreq : str or pandas offset object, optional\n    One of pandas date offset strings or corresponding objects. The string\n    'infer' can be passed in order to set the frequency of the index as the\n    inferred frequency upon creation.\ncopy  : bool\n    Make a copy of input ndarray.\nname : object\n    Name to be stored in the index.\n\nAttributes\n----------\ndays\nseconds\nmicroseconds\nnanoseconds\ncomponents\ninferred_freq\n\nMethods\n-------\nto_pytimedelta\nto_series\nround\nfloor\nceil\nto_frame\nmean\n\nSee Also\n--------\nIndex : The base pandas Index type.\nTimedelta : Represents a duration between two dates or times.\nDatetimeIndex : Index of datetime64 data.\nPeriodIndex : Index of Period data.\ntimedelta_range : Create a fixed-frequency TimedeltaIndex.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.",
    "1.4.1": [
        "searchsorted(self, value, side='left', sorter=None)"
    ],
    "1.4.2": [
        "searchsorted(self, value, side='left', sorter=None)"
    ],
    "1.5.1": [
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)",
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)",
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)",
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)",
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)",
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)",
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)",
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)",
        "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)"
    ],
    "1.5.2": [
        "pandas/tests/arrays/test_timedeltas.py",
        "pandas/tests/arrays/test_timedeltas.py",
        "pandas/tests/arrays/test_timedeltas.py",
        "pandas/tests/arrays/test_timedeltas.py",
        "pandas/tests/arrays/test_timedeltas.py",
        "pandas/tests/arrays/test_timedeltas.py",
        "pandas/tests/arrays/test_timedeltas.py",
        "pandas/tests/arrays/test_timedeltas.py",
        "pandas/tests/arrays/test_timedeltas.py"
    ],
    "2.1.1": [
        [
            "E           Failed: DID NOT RAISE <class 'TypeError'>"
        ],
        [
            "E           Failed: DID NOT RAISE <class 'TypeError'>"
        ],
        [
            "E           Failed: DID NOT RAISE <class 'TypeError'>"
        ],
        [
            "E   ValueError: Value must be Timedelta, string, integer, float, timedelta or convertible, not datetime64"
        ],
        [
            "E   ValueError: Value must be Timedelta, string, integer, float, timedelta or convertible, not Timestamp"
        ],
        [
            "E   ValueError: unit abbreviation w/o a number"
        ],
        [
            "E           Failed: DID NOT RAISE <class 'TypeError'>"
        ],
        [
            "E           Failed: DID NOT RAISE <class 'TypeError'>"
        ],
        [
            "E   ValueError: Value must be Timedelta, string, integer, float, timedelta or convertible, not Period"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7f24e1bb1e50>\nother = 1, index = True\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n    \n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n>           arr.searchsorted(other)",
            "\npandas/tests/arrays/test_timedeltas.py:177: Failed"
        ],
        [
            "self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7f24e1b0d5b0>\nother = 1, index = True\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n    \n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n>           arr.searchsorted(other)",
            "\npandas/tests/arrays/test_timedeltas.py:177: Failed"
        ],
        [
            "self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7f24e1b192e0>\nother = 1.0, index = True\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n    \n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n>           arr.searchsorted(other)",
            "\npandas/tests/arrays/test_timedeltas.py:177: Failed"
        ],
        [
            "self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7f24e1769820>\nother = numpy.datetime64('NaT'), index = True\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n    \n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n>           arr.searchsorted(other)\n\npandas/tests/arrays/test_timedeltas.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexes/timedeltas.py:362: in searchsorted\n    value = Timedelta(value).asm8.view(_TD_DTYPE)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise ValueError(",
            "\npandas/_libs/tslibs/timedeltas.pyx:1234: ValueError"
        ],
        [
            "self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7f24e177c610>\nother = Timestamp('2024-01-29 17:32:08.779476'), index = True\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n    \n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n>           arr.searchsorted(other)\n\npandas/tests/arrays/test_timedeltas.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexes/timedeltas.py:362: in searchsorted\n    value = Timedelta(value).asm8.view(_TD_DTYPE)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise ValueError(",
            "\npandas/_libs/tslibs/timedeltas.pyx:1234: ValueError"
        ],
        [
            "self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7f24e17c59d0>\nother = 'invalid', index = True\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n    \n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n>           arr.searchsorted(other)\n\npandas/tests/arrays/test_timedeltas.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexes/timedeltas.py:362: in searchsorted\n    value = Timedelta(value).asm8.view(_TD_DTYPE)\npandas/_libs/tslibs/timedeltas.pyx:1217: in pandas._libs.tslibs.timedeltas.Timedelta.__new__\n    value = parse_timedelta_string(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise ValueError(\"unit abbreviation w/o a number\")",
            "\npandas/_libs/tslibs/timedeltas.pyx:465: ValueError"
        ],
        [
            "self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7f24e1789550>\nother = array([              0,  86400000000000, 172800000000000, 259200000000000,\n       345600000000000, 432000000000000, 518400000000000, 604800000000000,\n       691200000000000, 777600000000000])\nindex = True\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n    \n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n>           arr.searchsorted(other)",
            "\npandas/tests/arrays/test_timedeltas.py:177: Failed"
        ],
        [
            "self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7f24e1776520>\nother = array(['1970-01-01T00:00:00.000000000', '1970-01-02T00:00:00.000000000',\n       '1970-01-03T00:00:00.000000000', '1970...:00.000000000',\n       '1970-01-09T00:00:00.000000000', '1970-01-10T00:00:00.000000000'],\n      dtype='datetime64[ns]')\nindex = True\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n    \n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n>           arr.searchsorted(other)",
            "\npandas/tests/arrays/test_timedeltas.py:177: Failed"
        ],
        [
            "self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7f24e1b199a0>\nother = Period('2024-01-29', 'D'), index = True\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            1,\n            np.int64(1),\n            1.0,\n            np.datetime64(\"NaT\"),\n            pd.Timestamp.now(),\n            \"invalid\",\n            np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9,\n            (np.arange(10) * 24 * 3600 * 10 ** 9).view(\"datetime64[ns]\"),\n            pd.Timestamp.now().to_period(\"D\"),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            True,\n            pytest.param(\n                False,\n                marks=pytest.mark.xfail(\n                    reason=\"Raises ValueError instead of TypeError\", raises=ValueError\n                ),\n            ),\n        ],\n    )\n    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n    \n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n>           arr.searchsorted(other)\n\npandas/tests/arrays/test_timedeltas.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexes/timedeltas.py:362: in searchsorted\n    value = Timedelta(value).asm8.view(_TD_DTYPE)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise ValueError(",
            "\npandas/_libs/tslibs/timedeltas.pyx:1234: ValueError"
        ]
    ],
    "2.2.1": [
        [
            {
                "value": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                },
                "self.values": {
                    "value": "array([              0,  86400000000000, 172800000000000, 259200000000000,\n       345600000000000, 432000000000000, 518400000000000, 604800000000000,\n       691200000000000, 777600000000000], dtype='timedelta64[ns]')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "self": {
                    "value": "TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days', '5 days',\n                '6 days', '7 days', '8 days', '9 days'],\n               dtype='timedelta64[ns]', freq='D')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "side": {
                    "value": "'left'",
                    "shape": "4",
                    "omitted": false
                }
            },
            {
                "value": {
                    "value": "numpy.timedelta64(1,'ns')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "value": {
                    "value": "1",
                    "shape": "()",
                    "omitted": false
                },
                "self.values": {
                    "value": "array([              0,  86400000000000, 172800000000000, 259200000000000,\n       345600000000000, 432000000000000, 518400000000000, 604800000000000,\n       691200000000000, 777600000000000], dtype='timedelta64[ns]')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "self": {
                    "value": "TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days', '5 days',\n                '6 days', '7 days', '8 days', '9 days'],\n               dtype='timedelta64[ns]', freq='D')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "side": {
                    "value": "'left'",
                    "shape": "4",
                    "omitted": false
                }
            },
            {
                "value": {
                    "value": "numpy.timedelta64(1,'ns')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "value": {
                    "value": "1.0",
                    "shape": null,
                    "omitted": false
                },
                "self.values": {
                    "value": "array([              0,  86400000000000, 172800000000000, 259200000000000,\n       345600000000000, 432000000000000, 518400000000000, 604800000000000,\n       691200000000000, 777600000000000], dtype='timedelta64[ns]')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "self": {
                    "value": "TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days', '5 days',\n                '6 days', '7 days', '8 days', '9 days'],\n               dtype='timedelta64[ns]', freq='D')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "side": {
                    "value": "'left'",
                    "shape": "4",
                    "omitted": false
                }
            },
            {
                "value": {
                    "value": "numpy.timedelta64(1,'ns')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "value": {
                    "value": "array([              0,  86400000000000, 172800000000000, 259200000000000,\n       345600000000000, 432000000000000, 518400000000000, 604800000000000,\n       691200000000000, 777600000000000])",
                    "shape": "(10,)",
                    "omitted": false
                },
                "self.values": {
                    "value": "array([              0,  86400000000000, 172800000000000, 259200000000000,\n       345600000000000, 432000000000000, 518400000000000, 604800000000000,\n       691200000000000, 777600000000000], dtype='timedelta64[ns]')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "self": {
                    "value": "TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days', '5 days',\n                '6 days', '7 days', '8 days', '9 days'],\n               dtype='timedelta64[ns]', freq='D')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "side": {
                    "value": "'left'",
                    "shape": "4",
                    "omitted": false
                }
            },
            {
                "value": {
                    "value": "array([              0,  86400000000000, 172800000000000, 259200000000000,\n       345600000000000, 432000000000000, 518400000000000, 604800000000000,\n       691200000000000, 777600000000000], dtype='timedelta64[ns]')",
                    "shape": "(10,)",
                    "omitted": false
                }
            }
        ],
        [
            {
                "value": {
                    "value": "array(['1970-01-01T00:00:00.000000000', '1970-01-02T00:00:00.000000000',\n       '1970-01-03T00:00:00.000000000', '1970-01-04T00:00:00.000000000',\n       '1970-01-05T00:00:00.000000000', '1970-01-06T00:00:00.000000000',\n       '1970-01-07T00:00:00.000000000', '1970-01-08T00:00:00.000000000',\n       '1970-01-09T00:00:00.000000000', '1970-01-10T00:00:00.000000000'],\n      dtype='datetime64[ns]')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "self.values": {
                    "value": "array([              0,  86400000000000, 172800000000000, 259200000000000,\n       345600000000000, 432000000000000, 518400000000000, 604800000000000,\n       691200000000000, 777600000000000], dtype='timedelta64[ns]')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "self": {
                    "value": "TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days', '5 days',\n                '6 days', '7 days', '8 days', '9 days'],\n               dtype='timedelta64[ns]', freq='D')",
                    "shape": "(10,)",
                    "omitted": false
                },
                "side": {
                    "value": "'left'",
                    "shape": "4",
                    "omitted": false
                }
            },
            {
                "value": {
                    "value": "array([              0,  86400000000000, 172800000000000, 259200000000000,\n       345600000000000, 432000000000000, 518400000000000, 604800000000000,\n       691200000000000, 777600000000000], dtype='timedelta64[ns]')",
                    "shape": "(10,)",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "value": "int",
                "self.values": "ndarray",
                "self": "TimedeltaIndex",
                "side": "str"
            },
            {
                "value": "timedelta64"
            }
        ],
        [
            {
                "value": "int64",
                "self.values": "ndarray",
                "self": "TimedeltaIndex",
                "side": "str"
            },
            {
                "value": "timedelta64"
            }
        ],
        [
            {
                "value": "float",
                "self.values": "ndarray",
                "self": "TimedeltaIndex",
                "side": "str"
            },
            {
                "value": "timedelta64"
            }
        ],
        [
            {
                "value": "ndarray",
                "self.values": "ndarray",
                "self": "TimedeltaIndex",
                "side": "str"
            },
            {
                "value": "ndarray"
            }
        ],
        [
            {
                "value": "ndarray",
                "self.values": "ndarray",
                "self": "TimedeltaIndex",
                "side": "str"
            },
            {
                "value": "ndarray"
            }
        ]
    ],
    "2.3.1": null,
    "2.3.2": null,
    "3.1.1": null,
    "3.1.2": null
}