{
    "pandas:128": {
        "github_issue_title": [
            "pd.read_json() doesn't use utf-8 for a default encoding\n"
        ],
        "github_issue_description": [
            "Code Sample, a copy-pastable example if possible\n# if locale.getpreferredencoding() != 'UTF-8'\nimport pandas as pd\n\nwith open('test.json', 'w', encoding='utf-8') as f:\n    f.write('{\"A\": [\"\u0410\u0411\u0412\u0413\u0414\u0430\u0431\u0432\u0433\u0434\uac00\"]}') \ndt2 = pd.read_json('test.json')\nprint(dt2)\n# if locale.getpreferredencoding() == 'UTF-8'\nimport pandas as pd\nfrom unittest import mock\n\nwith open('test.json', 'w', encoding='utf-8') as f:\n    f.write('{\"A\": [\"\u0410\u0411\u0412\u0413\u0414\u0430\u0431\u0432\u0433\u0434\uac00\"]}') \nwith mock.patch('_bootlocale.getpreferredencoding', return_value='cp949'):\n    dt2 = pd.read_json('test.json')\n    print(dt2)\nProblem description\nAccording to the docs, when encoding parameter is not given, read_json() uses utf-8 for a default encoding.\n\nHowever, when read_json() is called without encoding parameter, it calls built-in open() method to open a file and open() uses return value of locale.getpreferredencoding() to determine the encoding which can be something not utf-8 (My test environment was cp949 in Windows10/Korean).\n"
        ]
    }
}