{
    "pandas:39": {
        "github_issue_title": [
            "Strange behaviour of pd.DataFrame.drop() with inplace argument\n"
        ],
        "github_issue_description": [
            "Code Sample, a copy-pastable example if possible\n# input - 1 \ndf = pd.DataFrame({})\ndf[\"x1\"] = [1, 2, 3, 4, 5]\ndf[\"x2\"] = [0, 0, 0, 1, 1]\ndf[\"target\"] = [10, 20, 30, 40, 50]\ny = df[\"target\"]\ndf.drop(\"target\", axis=1, inplace=True)\ny = y + np.min(y)\n\n# output df (without removed target column)\n\tx1\tx2\n0\t1\t0\n1\t2\t0\n2\t3\t0\n3\t4\t1\n4\t5\t1\n\n# input - 2 \ndf = pd.DataFrame({})\ndf[\"x1\"] = [1, 2, 3, 4, 5]\ndf[\"x2\"] = [0, 0, 0, 1, 1]\ndf[\"target\"] = [10, 20, 30, 40, 50]\ny = df[\"target\"]\ndf.drop(\"target\", axis=1, inplace=True)\ny += np.min(y)\n\n# output df (with the removed target column)\n\n  | x1 | x2 | target\n-- | -- | -- | --\n0 | 1 | 0 | 20\n1 | 2 | 0 | 30\n2 | 3 | 0 | 40\n3 | 4 | 1 | 50\n4 | 5 | 1 | 60\nProblem description\nPandas return DataFrame with removed column after doing in-place operation with a column. Is it a bug or intentional behavior?\n"
        ]
    }
}