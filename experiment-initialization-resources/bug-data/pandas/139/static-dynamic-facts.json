{
    "pandas:139": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_139/pandas/core/groupby/grouper.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(\n    self,\n    index,\n    grouper=None,\n    obj=None,\n    name=None,\n    level=None,\n    sort=True,\n    observed=False,\n    in_axis=False,\n):\n\n    self.name = name\n    self.level = level\n    self.grouper = _convert_grouper(index, grouper)\n    self.all_grouper = None\n    self.index = index\n    self.sort = sort\n    self.obj = obj\n    self.observed = observed\n    self.in_axis = in_axis\n\n    # right place for this?\n    if isinstance(grouper, (Series, Index)) and name is None:\n        self.name = grouper.name\n\n    if isinstance(grouper, MultiIndex):\n        self.grouper = grouper.values\n\n    # we have a single grouper which may be a myriad of things,\n    # some of which are dependent on the passing in level\n\n    if level is not None:\n        if not isinstance(level, int):\n            if level not in index.names:\n                raise AssertionError(\"Level {} not in index\".format(level))\n            level = index.names.index(level)\n\n        if self.name is None:\n            self.name = index.names[level]\n\n        self.grouper, self._labels, self._group_index = index._get_grouper_for_level(  # noqa: E501\n            self.grouper, level\n        )\n\n    # a passed Grouper like, directly get the grouper in the same way\n    # as single grouper groupby, use the group_info to get labels\n    elif isinstance(self.grouper, Grouper):\n        # get the new grouper; we already have disambiguated\n        # what key/level refer to exactly, don't need to\n        # check again as we have by this point converted these\n        # to an actual value (rather than a pd.Grouper)\n        _, grouper, _ = self.grouper._get_grouper(self.obj, validate=False)\n        if self.name is None:\n            self.name = grouper.result_index.name\n        self.obj = self.grouper.obj\n        self.grouper = grouper._get_grouper()\n\n    else:\n        if self.grouper is None and self.name is not None:\n            self.grouper = self.obj[self.name]\n\n        elif isinstance(self.grouper, (list, tuple)):\n            self.grouper = com.asarray_tuplesafe(self.grouper)\n\n        # a passed Categorical\n        elif is_categorical_dtype(self.grouper):\n\n            self.grouper, self.all_grouper = recode_for_groupby(\n                self.grouper, self.sort, observed\n            )\n            categories = self.grouper.categories\n\n            # we make a CategoricalIndex out of the cat grouper\n            # preserving the categories / ordered attributes\n            self._labels = self.grouper.codes\n            if observed:\n                codes = algorithms.unique1d(self.grouper.codes)\n                codes = codes[codes != -1]\n                if sort or self.grouper.ordered:\n                    codes = np.sort(codes)\n            else:\n                codes = np.arange(len(categories))\n\n            self._group_index = CategoricalIndex(\n                Categorical.from_codes(\n                    codes=codes, categories=categories, ordered=self.grouper.ordered\n                )\n            )\n\n        # we are done\n        if isinstance(self.grouper, Grouping):\n            self.grouper = self.grouper.grouper\n\n        # no level passed\n        elif not isinstance(\n            self.grouper, (Series, Index, ExtensionArray, np.ndarray)\n        ):\n            if getattr(self.grouper, \"ndim\", 1) != 1:\n                t = self.name or str(type(self.grouper))\n                raise ValueError(\"Grouper for '{}' not 1-dimensional\".format(t))\n            self.grouper = self.index.map(self.grouper)\n            if not (\n                hasattr(self.grouper, \"__len__\")\n                and len(self.grouper) == len(self.index)\n            ):\n                errmsg = (\n                    \"Grouper result violates len(labels) == \"\n                    \"len(data)\\nresult: %s\" % pprint_thing(self.grouper)\n                )\n                self.grouper = None  # Try for sanity\n                raise AssertionError(errmsg)\n\n    # if we have a date/time-like grouper, make sure that we have\n    # Timestamps like\n    if getattr(self.grouper, \"dtype\", None) is not None:\n        if is_datetime64_dtype(self.grouper):\n            self.grouper = self.grouper.astype(\"datetime64[ns]\")\n        elif is_timedelta64_dtype(self.grouper):\n\n            self.grouper = self.grouper.astype(\"timedelta64[ns]\")\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 246,
                    "end_line": 366,
                    "variables": {
                        "self.name": [
                            258,
                            299,
                            300,
                            270,
                            305,
                            306,
                            345,
                            284,
                            285
                        ],
                        "self": [
                            258,
                            259,
                            260,
                            261,
                            262,
                            263,
                            264,
                            265,
                            266,
                            270,
                            273,
                            284,
                            285,
                            287,
                            288,
                            293,
                            298,
                            299,
                            300,
                            301,
                            302,
                            305,
                            306,
                            308,
                            309,
                            312,
                            314,
                            315,
                            317,
                            321,
                            323,
                            325,
                            330,
                            332,
                            337,
                            338,
                            342,
                            344,
                            345,
                            347,
                            349,
                            350,
                            354,
                            356,
                            361,
                            362,
                            363,
                            364,
                            366
                        ],
                        "name": [
                            258,
                            269
                        ],
                        "self.level": [
                            259
                        ],
                        "level": [
                            288,
                            259,
                            278,
                            279,
                            280,
                            281,
                            282,
                            285
                        ],
                        "self.grouper": [
                            260,
                            273,
                            287,
                            288,
                            293,
                            298,
                            301,
                            302,
                            305,
                            306,
                            308,
                            309,
                            312,
                            314,
                            315,
                            317,
                            321,
                            323,
                            325,
                            332,
                            337,
                            338,
                            342,
                            344,
                            345,
                            347,
                            349,
                            350,
                            354,
                            356,
                            361,
                            362,
                            363,
                            364,
                            366
                        ],
                        "_convert_grouper": [
                            260
                        ],
                        "index": [
                            260,
                            262,
                            280,
                            282,
                            285,
                            287
                        ],
                        "grouper": [
                            260,
                            298,
                            300,
                            269,
                            270,
                            302,
                            272,
                            273
                        ],
                        "self.all_grouper": [
                            314,
                            261
                        ],
                        "self.index": [
                            350,
                            347,
                            262
                        ],
                        "self.sort": [
                            315,
                            263
                        ],
                        "sort": [
                            325,
                            263
                        ],
                        "self.obj": [
                            264,
                            298,
                            306,
                            301
                        ],
                        "obj": [
                            264
                        ],
                        "self.observed": [
                            265
                        ],
                        "observed": [
                            265,
                            322,
                            315
                        ],
                        "self.in_axis": [
                            266
                        ],
                        "in_axis": [
                            266
                        ],
                        "isinstance": [
                            293,
                            269,
                            272,
                            337,
                            308,
                            341,
                            279
                        ],
                        "Series": [
                            269,
                            342
                        ],
                        "Index": [
                            269,
                            342
                        ],
                        "grouper.name": [
                            270
                        ],
                        "MultiIndex": [
                            272
                        ],
                        "grouper.values": [
                            273
                        ],
                        "int": [
                            279
                        ],
                        "index.names": [
                            280,
                            282,
                            285
                        ],
                        "AssertionError": [
                            281,
                            357
                        ],
                        "format": [
                            281,
                            346
                        ],
                        "index.names.index": [
                            282
                        ],
                        "self._labels": [
                            321,
                            287
                        ],
                        "self._group_index": [
                            330,
                            287
                        ],
                        "index._get_grouper_for_level": [
                            287
                        ],
                        "Grouper": [
                            293
                        ],
                        "_": [
                            298
                        ],
                        "self.grouper._get_grouper": [
                            298
                        ],
                        "grouper.result_index.name": [
                            300
                        ],
                        "grouper.result_index": [
                            300
                        ],
                        "self.grouper.obj": [
                            301
                        ],
                        "grouper._get_grouper": [
                            302
                        ],
                        "list": [
                            308
                        ],
                        "tuple": [
                            308
                        ],
                        "com.asarray_tuplesafe": [
                            309
                        ],
                        "com": [
                            309
                        ],
                        "is_categorical_dtype": [
                            312
                        ],
                        "recode_for_groupby": [
                            314
                        ],
                        "categories": [
                            328,
                            332,
                            317
                        ],
                        "self.grouper.categories": [
                            317
                        ],
                        "self.grouper.codes": [
                            321,
                            323
                        ],
                        "codes": [
                            323,
                            324,
                            326,
                            328,
                            332
                        ],
                        "algorithms.unique1d": [
                            323
                        ],
                        "algorithms": [
                            323
                        ],
                        "self.grouper.ordered": [
                            332,
                            325
                        ],
                        "np.sort": [
                            326
                        ],
                        "np": [
                            328,
                            342,
                            326
                        ],
                        "np.arange": [
                            328
                        ],
                        "len": [
                            328,
                            350
                        ],
                        "CategoricalIndex": [
                            330
                        ],
                        "Categorical.from_codes": [
                            331
                        ],
                        "Categorical": [
                            331
                        ],
                        "Grouping": [
                            337
                        ],
                        "self.grouper.grouper": [
                            338
                        ],
                        "ExtensionArray": [
                            342
                        ],
                        "np.ndarray": [
                            342
                        ],
                        "getattr": [
                            344,
                            361
                        ],
                        "t": [
                            345,
                            346
                        ],
                        "str": [
                            345
                        ],
                        "type": [
                            345
                        ],
                        "ValueError": [
                            346
                        ],
                        "self.index.map": [
                            347
                        ],
                        "hasattr": [
                            349
                        ],
                        "errmsg": [
                            352,
                            357
                        ],
                        "pprint_thing": [
                            354
                        ],
                        "is_datetime64_dtype": [
                            362
                        ],
                        "self.grouper.astype": [
                            363,
                            366
                        ],
                        "is_timedelta64_dtype": [
                            364
                        ]
                    },
                    "filtered_variables": {
                        "self.name": [
                            258,
                            299,
                            300,
                            270,
                            305,
                            306,
                            345,
                            284,
                            285
                        ],
                        "self": [
                            258,
                            259,
                            260,
                            261,
                            262,
                            263,
                            264,
                            265,
                            266,
                            270,
                            273,
                            284,
                            285,
                            287,
                            288,
                            293,
                            298,
                            299,
                            300,
                            301,
                            302,
                            305,
                            306,
                            308,
                            309,
                            312,
                            314,
                            315,
                            317,
                            321,
                            323,
                            325,
                            330,
                            332,
                            337,
                            338,
                            342,
                            344,
                            345,
                            347,
                            349,
                            350,
                            354,
                            356,
                            361,
                            362,
                            363,
                            364,
                            366
                        ],
                        "name": [
                            258,
                            269
                        ],
                        "self.level": [
                            259
                        ],
                        "level": [
                            288,
                            259,
                            278,
                            279,
                            280,
                            281,
                            282,
                            285
                        ],
                        "self.grouper": [
                            260,
                            273,
                            287,
                            288,
                            293,
                            298,
                            301,
                            302,
                            305,
                            306,
                            308,
                            309,
                            312,
                            314,
                            315,
                            317,
                            321,
                            323,
                            325,
                            332,
                            337,
                            338,
                            342,
                            344,
                            345,
                            347,
                            349,
                            350,
                            354,
                            356,
                            361,
                            362,
                            363,
                            364,
                            366
                        ],
                        "_convert_grouper": [
                            260
                        ],
                        "index": [
                            260,
                            262,
                            280,
                            282,
                            285,
                            287
                        ],
                        "grouper": [
                            260,
                            298,
                            300,
                            269,
                            270,
                            302,
                            272,
                            273
                        ],
                        "self.all_grouper": [
                            314,
                            261
                        ],
                        "self.index": [
                            350,
                            347,
                            262
                        ],
                        "self.sort": [
                            315,
                            263
                        ],
                        "sort": [
                            325,
                            263
                        ],
                        "self.obj": [
                            264,
                            298,
                            306,
                            301
                        ],
                        "obj": [
                            264
                        ],
                        "self.observed": [
                            265
                        ],
                        "observed": [
                            265,
                            322,
                            315
                        ],
                        "self.in_axis": [
                            266
                        ],
                        "in_axis": [
                            266
                        ],
                        "Series": [
                            269,
                            342
                        ],
                        "Index": [
                            269,
                            342
                        ],
                        "grouper.name": [
                            270
                        ],
                        "MultiIndex": [
                            272
                        ],
                        "grouper.values": [
                            273
                        ],
                        "index.names": [
                            280,
                            282,
                            285
                        ],
                        "index.names.index": [
                            282
                        ],
                        "self._labels": [
                            321,
                            287
                        ],
                        "self._group_index": [
                            330,
                            287
                        ],
                        "index._get_grouper_for_level": [
                            287
                        ],
                        "Grouper": [
                            293
                        ],
                        "_": [
                            298
                        ],
                        "self.grouper._get_grouper": [
                            298
                        ],
                        "grouper.result_index.name": [
                            300
                        ],
                        "grouper.result_index": [
                            300
                        ],
                        "self.grouper.obj": [
                            301
                        ],
                        "grouper._get_grouper": [
                            302
                        ],
                        "com.asarray_tuplesafe": [
                            309
                        ],
                        "com": [
                            309
                        ],
                        "is_categorical_dtype": [
                            312
                        ],
                        "recode_for_groupby": [
                            314
                        ],
                        "categories": [
                            328,
                            332,
                            317
                        ],
                        "self.grouper.categories": [
                            317
                        ],
                        "self.grouper.codes": [
                            321,
                            323
                        ],
                        "codes": [
                            323,
                            324,
                            326,
                            328,
                            332
                        ],
                        "algorithms.unique1d": [
                            323
                        ],
                        "algorithms": [
                            323
                        ],
                        "self.grouper.ordered": [
                            332,
                            325
                        ],
                        "np.sort": [
                            326
                        ],
                        "np": [
                            328,
                            342,
                            326
                        ],
                        "np.arange": [
                            328
                        ],
                        "CategoricalIndex": [
                            330
                        ],
                        "Categorical.from_codes": [
                            331
                        ],
                        "Categorical": [
                            331
                        ],
                        "Grouping": [
                            337
                        ],
                        "self.grouper.grouper": [
                            338
                        ],
                        "ExtensionArray": [
                            342
                        ],
                        "np.ndarray": [
                            342
                        ],
                        "t": [
                            345,
                            346
                        ],
                        "self.index.map": [
                            347
                        ],
                        "errmsg": [
                            352,
                            357
                        ],
                        "pprint_thing": [
                            354
                        ],
                        "is_datetime64_dtype": [
                            362
                        ],
                        "self.grouper.astype": [
                            363,
                            366
                        ],
                        "is_timedelta64_dtype": [
                            364
                        ]
                    },
                    "diff_line_number": 333,
                    "class_data": {
                        "signature": "class Grouping()",
                        "docstring": "Holds the grouping information for a single key\n\nParameters\n----------\nindex : Index\ngrouper :\nobj :\nname :\nlevel :\nobserved : boolean, default False\n    If we are a Categorical, use the observed values\nin_axis : if the Grouping is a column in self.obj and hence among\n    Groupby.exclusions list\n\nReturns\n-------\n**Attributes**:\n  * indices : dict of {group -> index_list}\n  * labels : ndarray, group labels\n  * ids : mapping of label -> group\n  * counts : array of group counts\n  * group_index : unique groups\n  * groups : dict of {group -> label_list}",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, index, grouper=None, obj=None, name=None, level=None, sort=True, observed=False, in_axis=False):\n    self.name = name\n    self.level = level\n    self.grouper = _convert_grouper(index, grouper)\n    self.all_grouper = None\n    self.index = index\n    self.sort = sort\n    self.obj = obj\n    self.observed = observed\n    self.in_axis = in_axis\n    if isinstance(grouper, (Series, Index)) and name is None:\n        self.name = grouper.name\n    if isinstance(grouper, MultiIndex):\n        self.grouper = grouper.values\n    if level is not None:\n        if not isinstance(level, int):\n            if level not in index.names:\n                raise AssertionError('Level {} not in index'.format(level))\n            level = index.names.index(level)\n        if self.name is None:\n            self.name = index.names[level]\n        (self.grouper, self._labels, self._group_index) = index._get_grouper_for_level(self.grouper, level)\n    elif isinstance(self.grouper, Grouper):\n        (_, grouper, _) = self.grouper._get_grouper(self.obj, validate=False)\n        if self.name is None:\n            self.name = grouper.result_index.name\n        self.obj = self.grouper.obj\n        self.grouper = grouper._get_grouper()\n    else:\n        if self.grouper is None and self.name is not None:\n            self.grouper = self.obj[self.name]\n        elif isinstance(self.grouper, (list, tuple)):\n            self.grouper = com.asarray_tuplesafe(self.grouper)\n        elif is_categorical_dtype(self.grouper):\n            (self.grouper, self.all_grouper) = recode_for_groupby(self.grouper, self.sort, observed)\n            categories = self.grouper.categories\n            self._labels = self.grouper.codes\n            if observed:\n                codes = algorithms.unique1d(self.grouper.codes)\n                codes = codes[codes != -1]\n                if sort or self.grouper.ordered:\n                    codes = np.sort(codes)\n            else:\n                codes = np.arange(len(categories))\n            self._group_index = CategoricalIndex(Categorical.from_codes(codes=codes, categories=categories, ordered=self.grouper.ordered))\n        if isinstance(self.grouper, Grouping):\n            self.grouper = self.grouper.grouper\n        elif not isinstance(self.grouper, (Series, Index, ExtensionArray, np.ndarray)):\n            if getattr(self.grouper, 'ndim', 1) != 1:\n                t = self.name or str(type(self.grouper))\n                raise ValueError(\"Grouper for '{}' not 1-dimensional\".format(t))\n            self.grouper = self.index.map(self.grouper)\n            if not (hasattr(self.grouper, '__len__') and len(self.grouper) == len(self.index)):\n                errmsg = 'Grouper result violates len(labels) == len(data)\\nresult: %s' % pprint_thing(self.grouper)\n                self.grouper = None\n                raise AssertionError(errmsg)\n    if getattr(self.grouper, 'dtype', None) is not None:\n        if is_datetime64_dtype(self.grouper):\n            self.grouper = self.grouper.astype('datetime64[ns]')\n        elif is_timedelta64_dtype(self.grouper):\n            self.grouper = self.grouper.astype('timedelta64[ns]')",
                            "def __repr__(self):\n    return 'Grouping({0})'.format(self.name)",
                            "def __iter__(self):\n    return iter(self.indices)",
                            "@property\ndef ngroups(self):\n    return len(self.group_index)",
                            "@cache_readonly\ndef indices(self):\n    if isinstance(self.grouper, BaseGrouper):\n        return self.grouper.indices\n    values = ensure_categorical(self.grouper)\n    return values._reverse_indexer()",
                            "@property\ndef labels(self):\n    if self._labels is None:\n        self._make_labels()\n    return self._labels",
                            "@cache_readonly\ndef result_index(self):\n    if self.all_grouper is not None:\n        return recode_from_groupby(self.all_grouper, self.sort, self.group_index)\n    return self.group_index",
                            "@property\ndef group_index(self):\n    if self._group_index is None:\n        self._make_labels()\n    return self._group_index",
                            "def _make_labels(self):\n    if self._labels is None or self._group_index is None:\n        if isinstance(self.grouper, BaseGrouper):\n            labels = self.grouper.label_info\n            uniques = self.grouper.result_index\n        else:\n            (labels, uniques) = algorithms.factorize(self.grouper, sort=self.sort)\n            uniques = Index(uniques, name=self.name)\n        self._labels = labels\n        self._group_index = uniques",
                            "@cache_readonly\ndef groups(self):\n    return self.index.groupby(Categorical.from_codes(self.labels, self.group_index))"
                        ],
                        "constructor_variables": [
                            "self.name = name",
                            "self.level = level",
                            "self.grouper = _convert_grouper(index, grouper)",
                            "self.all_grouper = None",
                            "self.index = index",
                            "self.sort = sort",
                            "self.obj = obj",
                            "self.observed = observed",
                            "self.in_axis = in_axis",
                            "self.name = grouper.name",
                            "self.grouper = grouper.values",
                            "self.name = index.names[level]",
                            "self.name = grouper.result_index.name",
                            "self.obj = self.grouper.obj",
                            "self.grouper = grouper._get_grouper()",
                            "self.grouper = self.obj[self.name]",
                            "self.grouper = com.asarray_tuplesafe(self.grouper)",
                            "self._labels = self.grouper.codes",
                            "self._group_index = CategoricalIndex(Categorical.from_codes(codes=codes, categories=categories, ordered=self.grouper.ordered))",
                            "self.grouper = self.grouper.grouper",
                            "self.grouper = self.index.map(self.grouper)",
                            "self.grouper = None",
                            "self.grouper = self.grouper.astype('datetime64[ns]')",
                            "self.grouper = self.grouper.astype('timedelta64[ns]')"
                        ],
                        "class_level_variables": [
                            "_labels = None",
                            "_group_index = None"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, index, grouper=None, obj=None, name=None, level=None, sort=True, observed=False, in_axis=False)",
                            "__repr__(self)",
                            "__iter__(self)",
                            "ngroups(self)",
                            "indices(self)",
                            "labels(self)",
                            "result_index(self)",
                            "group_index(self)",
                            "_make_labels(self)",
                            "groups(self)"
                        ],
                        "class_level_variable_names": [
                            "_labels",
                            "_group_index"
                        ],
                        "constructor_variable_names": [
                            "name",
                            "in_axis",
                            "grouper",
                            "observed",
                            "index",
                            "all_grouper",
                            "t",
                            "errmsg",
                            "sort",
                            "codes",
                            "categories",
                            "_labels",
                            "level",
                            "obj",
                            "_group_index"
                        ]
                    },
                    "used_imports": [
                        "import numpy as np",
                        "from pandas.core.dtypes.common import ensure_categorical, is_categorical_dtype, is_datetime64_dtype, is_hashable, is_list_like, is_scalar, is_timedelta64_dtype",
                        "import pandas.core.algorithms as algorithms",
                        "from pandas.core.arrays import Categorical, ExtensionArray",
                        "import pandas.core.common as com",
                        "from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby",
                        "from pandas.core.index import CategoricalIndex, Index, MultiIndex",
                        "from pandas.core.series import Series",
                        "from pandas.io.formats.printing import pprint_thing"
                    ],
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def _get_grouper(\n    obj: NDFrame,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n    if level is not None:\n        # TODO: These if-block and else-block are almost same.\n        # MultiIndex instance check is removable, but it seems that there are\n        # some processes only for non-MultiIndex in else-block,\n        # eg. `obj.index.name != level`. We have to consider carefully whether\n        # these are applicable for MultiIndex. Even if these are applicable,\n        # we need to check if it makes no side effect to subsequent processes\n        # on the outside of this condition.\n        # (GH 17621)\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                # Get the level values from group_axis\n                key = group_axis.get_level_values(level)\n                level = None\n\n        else:\n            # allow level to be a length-one list-like object\n            # (e.g., level=[0])\n            # GH 13901\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\n                        \"level name {} is not the name of the index\".format(level)\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n            # NOTE: `group_axis` and `group_axis.get_level_values(level)`\n            # are same in this section.\n            level = None\n            key = group_axis\n\n    # a passed-in Grouper, directly convert\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    # already have a BaseGrouper, just return it\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    # In the future, a tuple key will always mean an actual key,\n    # not an iterable of keys. In the meantime, we attempt to provide\n    # a warning. We can assume that the user wanted a list of keys when\n    # the key is not in the index. We just have to be careful with\n    # unhashable elements of `key`. Any unhashable elements implies that\n    # they wanted a list of keys.\n    # https://github.com/pandas-dev/pandas/issues/18314\n    is_tuple = isinstance(key, tuple)\n    all_hashable = is_tuple and is_hashable(key)\n\n    if is_tuple:\n        if (\n            all_hashable and key not in obj and set(key).issubset(obj)\n        ) or not all_hashable:\n            # column names ('a', 'b') -> ['a', 'b']\n            # arrays like (a, b) -> [a, b]\n            msg = (\n                \"Interpreting tuple 'by' as a list of keys, rather than \"\n                \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                \"the future, a tuple will always mean a single key.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n            key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    # what are we after, exactly?\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n    )\n\n    # is this an index replacement?\n    if (\n        not any_callable\n        and not any_arraylike\n        and not any_groupers\n        and match_axis_length\n        and level is None\n    ):\n        if isinstance(obj, DataFrame):\n            all_in_columns_index = all(\n                g in obj.columns or g in obj.index.names for g in keys\n            )\n        elif isinstance(obj, Series):\n            all_in_columns_index = all(g in obj.index.names for g in keys)\n\n        if not all_in_columns_index:\n            keys = [com.asarray_tuplesafe(keys)]\n\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n\n    groupings = []\n    exclusions = []\n\n    # if the actual grouper should be obj[key]\n    def is_in_axis(key):\n        if not _is_label_like(key):\n            items = obj._data.items\n            try:\n                items.get_loc(key)\n            except (KeyError, TypeError):\n                # TypeError shows up here if we pass e.g. Int64Index\n                return False\n\n        return True\n\n    # if the grouper is obj[name]\n    def is_in_obj(gpr):\n        if not hasattr(gpr, \"name\"):\n            return False\n        try:\n            return gpr is obj[gpr.name]\n        except (KeyError, IndexError):\n            return False\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n\n        if is_in_obj(gpr):  # df.groupby(df['name'])\n            in_axis, name = True, gpr.name\n            exclusions.append(name)\n\n        elif is_in_axis(gpr):  # df.groupby('name')\n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr, axis=axis)\n                in_axis, name, gpr = True, gpr, obj[gpr]\n                exclusions.append(name)\n            elif obj._is_level_reference(gpr, axis=axis):\n                in_axis, name, level, gpr = False, None, gpr, None\n            else:\n                raise KeyError(gpr)\n        elif isinstance(gpr, Grouper) and gpr.key is not None:\n            # Add key to exclusions\n            exclusions.append(gpr.key)\n            in_axis, name = False, None\n        else:\n            in_axis, name = False, None\n\n        if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                (\n                    \"Length of grouper ({len_gpr}) and axis ({len_axis})\"\n                    \" must be same length\".format(\n                        len_gpr=len(gpr), len_axis=obj.shape[axis]\n                    )\n                )\n            )\n\n        # create the Grouping\n        # allow us to passing the actual Grouping as the gpr\n        ping = (\n            Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n            )\n            if not isinstance(gpr, Grouping)\n            else gpr\n        )\n\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    # create the internals grouper\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
                        "signature": "_get_grouper(obj: NDFrame, key=None, axis=0, level=None, sort=True, observed=False, mutated=False, validate=True)"
                    },
                    {
                        "code": "def _is_label_like(val):\n    return isinstance(val, (str, tuple)) or (val is not None and is_scalar(val))",
                        "signature": "_is_label_like(val)"
                    },
                    {
                        "code": "def _convert_grouper(axis, grouper):\n    if isinstance(grouper, dict):\n        return grouper.get\n    elif isinstance(grouper, Series):\n        if grouper.index.equals(axis):\n            return grouper._values\n        else:\n            return grouper.reindex(axis)._values\n    elif isinstance(grouper, (list, Series, Index, np.ndarray)):\n        if len(grouper) != len(axis):\n            raise ValueError(\"Grouper and axis must be same length\")\n        return grouper\n    else:\n        return grouper",
                        "signature": "_convert_grouper(axis, grouper)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class Grouper:",
                        "functions": [
                            {
                                "code": "def __new__(cls, *args, **kwargs):\n    if kwargs.get(\"freq\") is not None:\n        from pandas.core.resample import TimeGrouper\n\n        cls = TimeGrouper\n    return super().__new__(cls)",
                                "signature": "__new__(cls, *args, **kwargs)"
                            },
                            {
                                "code": "def __init__(self, key=None, level=None, freq=None, axis=0, sort=False):\n    self.key = key\n    self.level = level\n    self.freq = freq\n    self.axis = axis\n    self.sort = sort\n\n    self.grouper = None\n    self.obj = None\n    self.indexer = None\n    self.binner = None\n    self._grouper = None",
                                "signature": "__init__(self, key=None, level=None, freq=None, axis=0, sort=False)"
                            },
                            {
                                "code": "@property\ndef ax(self):\n    return self.grouper",
                                "signature": "ax(self)"
                            },
                            {
                                "code": "def _get_grouper(self, obj, validate=True):\n    \"\"\"\n    Parameters\n    ----------\n    obj : the subject object\n    validate : boolean, default True\n        if True, validate the grouper\n\n    Returns\n    -------\n    a tuple of binner, grouper, obj (possibly sorted)\n    \"\"\"\n\n    self._set_grouper(obj)\n    self.grouper, exclusions, self.obj = _get_grouper(\n        self.obj,\n        [self.key],\n        axis=self.axis,\n        level=self.level,\n        sort=self.sort,\n        validate=validate,\n    )\n    return self.binner, self.grouper, self.obj",
                                "signature": "_get_grouper(self, obj, validate=True)"
                            },
                            {
                                "code": "def _set_grouper(self, obj, sort=False):\n    \"\"\"\n    given an object and the specifications, setup the internal grouper\n    for this particular specification\n\n    Parameters\n    ----------\n    obj : the subject object\n    sort : bool, default False\n        whether the resulting grouper should be sorted\n    \"\"\"\n\n    if self.key is not None and self.level is not None:\n        raise ValueError(\"The Grouper cannot specify both a key and a level!\")\n\n    # Keep self.grouper value before overriding\n    if self._grouper is None:\n        self._grouper = self.grouper\n\n    # the key must be a valid info item\n    if self.key is not None:\n        key = self.key\n        # The 'on' is already defined\n        if getattr(self.grouper, \"name\", None) == key and isinstance(\n            obj, ABCSeries\n        ):\n            ax = self._grouper.take(obj.index)\n        else:\n            if key not in obj._info_axis:\n                raise KeyError(\"The grouper name {0} is not found\".format(key))\n            ax = Index(obj[key], name=key)\n\n    else:\n        ax = obj._get_axis(self.axis)\n        if self.level is not None:\n            level = self.level\n\n            # if a level is given it must be a mi level or\n            # equivalent to the axis name\n            if isinstance(ax, MultiIndex):\n                level = ax._get_level_number(level)\n                ax = Index(ax._get_level_values(level), name=ax.names[level])\n\n            else:\n                if level not in (0, ax.name):\n                    raise ValueError(\"The level {0} is not valid\".format(level))\n\n    # possibly sort\n    if (self.sort or sort) and not ax.is_monotonic:\n        # use stable sort to support first, last, nth\n        indexer = self.indexer = ax.argsort(kind=\"mergesort\")\n        ax = ax.take(indexer)\n        obj = obj.take(indexer, axis=self.axis, is_copy=False)\n\n    self.obj = obj\n    self.grouper = ax\n    return self.grouper",
                                "signature": "_set_grouper(self, obj, sort=False)"
                            },
                            {
                                "code": "@property\ndef groups(self):\n    return self.grouper.groups",
                                "signature": "groups(self)"
                            },
                            {
                                "code": "def __repr__(self):\n    attrs_list = (\n        \"{}={!r}\".format(attr_name, getattr(self, attr_name))\n        for attr_name in self._attributes\n        if getattr(self, attr_name) is not None\n    )\n    attrs = \", \".join(attrs_list)\n    cls_name = self.__class__.__name__\n    return \"{}({})\".format(cls_name, attrs)",
                                "signature": "__repr__(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Grouping:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    index,\n    grouper=None,\n    obj=None,\n    name=None,\n    level=None,\n    sort=True,\n    observed=False,\n    in_axis=False,\n):\n\n    self.name = name\n    self.level = level\n    self.grouper = _convert_grouper(index, grouper)\n    self.all_grouper = None\n    self.index = index\n    self.sort = sort\n    self.obj = obj\n    self.observed = observed\n    self.in_axis = in_axis\n\n    # right place for this?\n    if isinstance(grouper, (Series, Index)) and name is None:\n        self.name = grouper.name\n\n    if isinstance(grouper, MultiIndex):\n        self.grouper = grouper.values\n\n    # we have a single grouper which may be a myriad of things,\n    # some of which are dependent on the passing in level\n\n    if level is not None:\n        if not isinstance(level, int):\n            if level not in index.names:\n                raise AssertionError(\"Level {} not in index\".format(level))\n            level = index.names.index(level)\n\n        if self.name is None:\n            self.name = index.names[level]\n\n        self.grouper, self._labels, self._group_index = index._get_grouper_for_level(  # noqa: E501\n            self.grouper, level\n        )\n\n    # a passed Grouper like, directly get the grouper in the same way\n    # as single grouper groupby, use the group_info to get labels\n    elif isinstance(self.grouper, Grouper):\n        # get the new grouper; we already have disambiguated\n        # what key/level refer to exactly, don't need to\n        # check again as we have by this point converted these\n        # to an actual value (rather than a pd.Grouper)\n        _, grouper, _ = self.grouper._get_grouper(self.obj, validate=False)\n        if self.name is None:\n            self.name = grouper.result_index.name\n        self.obj = self.grouper.obj\n        self.grouper = grouper._get_grouper()\n\n    else:\n        if self.grouper is None and self.name is not None:\n            self.grouper = self.obj[self.name]\n\n        elif isinstance(self.grouper, (list, tuple)):\n            self.grouper = com.asarray_tuplesafe(self.grouper)\n\n        # a passed Categorical\n        elif is_categorical_dtype(self.grouper):\n\n            self.grouper, self.all_grouper = recode_for_groupby(\n                self.grouper, self.sort, observed\n            )\n            categories = self.grouper.categories\n\n            # we make a CategoricalIndex out of the cat grouper\n            # preserving the categories / ordered attributes\n            self._labels = self.grouper.codes\n            if observed:\n                codes = algorithms.unique1d(self.grouper.codes)\n                codes = codes[codes != -1]\n                if sort or self.grouper.ordered:\n                    codes = np.sort(codes)\n            else:\n                codes = np.arange(len(categories))\n\n            self._group_index = CategoricalIndex(\n                Categorical.from_codes(\n                    codes=codes, categories=categories, ordered=self.grouper.ordered\n                )\n            )\n\n        # we are done\n        if isinstance(self.grouper, Grouping):\n            self.grouper = self.grouper.grouper\n\n        # no level passed\n        elif not isinstance(\n            self.grouper, (Series, Index, ExtensionArray, np.ndarray)\n        ):\n            if getattr(self.grouper, \"ndim\", 1) != 1:\n                t = self.name or str(type(self.grouper))\n                raise ValueError(\"Grouper for '{}' not 1-dimensional\".format(t))\n            self.grouper = self.index.map(self.grouper)\n            if not (\n                hasattr(self.grouper, \"__len__\")\n                and len(self.grouper) == len(self.index)\n            ):\n                errmsg = (\n                    \"Grouper result violates len(labels) == \"\n                    \"len(data)\\nresult: %s\" % pprint_thing(self.grouper)\n                )\n                self.grouper = None  # Try for sanity\n                raise AssertionError(errmsg)\n\n    # if we have a date/time-like grouper, make sure that we have\n    # Timestamps like\n    if getattr(self.grouper, \"dtype\", None) is not None:\n        if is_datetime64_dtype(self.grouper):\n            self.grouper = self.grouper.astype(\"datetime64[ns]\")\n        elif is_timedelta64_dtype(self.grouper):\n\n            self.grouper = self.grouper.astype(\"timedelta64[ns]\")",
                                "signature": "__init__(self, index, grouper=None, obj=None, name=None, level=None, sort=True, observed=False, in_axis=False)"
                            },
                            {
                                "code": "def __repr__(self):\n    return \"Grouping({0})\".format(self.name)",
                                "signature": "__repr__(self)"
                            },
                            {
                                "code": "def __iter__(self):\n    return iter(self.indices)",
                                "signature": "__iter__(self)"
                            },
                            {
                                "code": "@property\ndef ngroups(self):\n    return len(self.group_index)",
                                "signature": "ngroups(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef indices(self):\n    # we have a list of groupers\n    if isinstance(self.grouper, BaseGrouper):\n        return self.grouper.indices\n\n    values = ensure_categorical(self.grouper)\n    return values._reverse_indexer()",
                                "signature": "indices(self)"
                            },
                            {
                                "code": "@property\ndef labels(self):\n    if self._labels is None:\n        self._make_labels()\n    return self._labels",
                                "signature": "labels(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef result_index(self):\n    if self.all_grouper is not None:\n        return recode_from_groupby(self.all_grouper, self.sort, self.group_index)\n    return self.group_index",
                                "signature": "result_index(self)"
                            },
                            {
                                "code": "@property\ndef group_index(self):\n    if self._group_index is None:\n        self._make_labels()\n    return self._group_index",
                                "signature": "group_index(self)"
                            },
                            {
                                "code": "def _make_labels(self):\n    if self._labels is None or self._group_index is None:\n        # we have a list of groupers\n        if isinstance(self.grouper, BaseGrouper):\n            labels = self.grouper.label_info\n            uniques = self.grouper.result_index\n        else:\n            labels, uniques = algorithms.factorize(self.grouper, sort=self.sort)\n            uniques = Index(uniques, name=self.name)\n        self._labels = labels\n        self._group_index = uniques",
                                "signature": "_make_labels(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef groups(self):\n    return self.index.groupby(Categorical.from_codes(self.labels, self.group_index))",
                                "signature": "groups(self)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "_attributes": [
                    96
                ],
                "kwargs.get": [
                    99
                ],
                "kwargs": [
                    99
                ],
                "cls": [
                    102,
                    103
                ],
                "TimeGrouper": [
                    102
                ],
                "__new__": [
                    103
                ],
                "super": [
                    103
                ],
                "self.key": [
                    166,
                    167,
                    106,
                    138,
                    158
                ],
                "self": [
                    106,
                    107,
                    108,
                    109,
                    110,
                    112,
                    113,
                    114,
                    115,
                    116,
                    120,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    144,
                    158,
                    162,
                    163,
                    166,
                    167,
                    169,
                    172,
                    179,
                    180,
                    181,
                    194,
                    196,
                    198,
                    200,
                    201,
                    202,
                    206,
                    210,
                    211,
                    212,
                    215,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    270,
                    273,
                    284,
                    285,
                    287,
                    288,
                    293,
                    298,
                    299,
                    300,
                    301,
                    302,
                    305,
                    306,
                    308,
                    309,
                    312,
                    314,
                    315,
                    317,
                    321,
                    323,
                    325,
                    330,
                    332,
                    337,
                    338,
                    342,
                    344,
                    345,
                    347,
                    349,
                    350,
                    354,
                    356,
                    361,
                    362,
                    363,
                    364,
                    366,
                    369,
                    372,
                    379,
                    384,
                    385,
                    387,
                    392,
                    393,
                    394,
                    398,
                    399,
                    400,
                    404,
                    405,
                    406,
                    409,
                    411,
                    412,
                    413,
                    415,
                    416,
                    417,
                    418,
                    422
                ],
                "key": [
                    514,
                    515,
                    524,
                    525,
                    529,
                    539,
                    541,
                    542,
                    545,
                    167,
                    169,
                    174,
                    175,
                    176,
                    574,
                    585,
                    588,
                    474,
                    476,
                    106,
                    503,
                    506,
                    507,
                    508,
                    511
                ],
                "self.level": [
                    259,
                    107,
                    140,
                    180,
                    181,
                    158
                ],
                "level": [
                    259,
                    645,
                    278,
                    279,
                    280,
                    281,
                    282,
                    285,
                    288,
                    561,
                    181,
                    186,
                    187,
                    573,
                    190,
                    191,
                    575,
                    576,
                    578,
                    461,
                    471,
                    472,
                    474,
                    476,
                    477,
                    604,
                    483,
                    484,
                    486,
                    617,
                    107,
                    492,
                    493,
                    495,
                    497,
                    502
                ],
                "self.freq": [
                    108
                ],
                "freq": [
                    108
                ],
                "self.axis": [
                    179,
                    139,
                    109,
                    198
                ],
                "axis": [
                    674,
                    613,
                    677,
                    679,
                    616,
                    457,
                    109,
                    627,
                    632
                ],
                "self.sort": [
                    194,
                    263,
                    141,
                    110,
                    399,
                    315,
                    415
                ],
                "sort": [
                    194,
                    325,
                    646,
                    263,
                    110,
                    662
                ],
                "self.grouper": [
                    384,
                    385,
                    387,
                    260,
                    136,
                    144,
                    273,
                    411,
                    412,
                    413,
                    287,
                    288,
                    415,
                    163,
                    293,
                    169,
                    298,
                    301,
                    302,
                    305,
                    306,
                    308,
                    309,
                    312,
                    314,
                    315,
                    317,
                    321,
                    323,
                    325,
                    201,
                    202,
                    332,
                    206,
                    337,
                    338,
                    342,
                    344,
                    345,
                    347,
                    349,
                    350,
                    354,
                    356,
                    361,
                    362,
                    363,
                    364,
                    366,
                    112,
                    120
                ],
                "self.obj": [
                    136,
                    137,
                    200,
                    264,
                    298,
                    301,
                    144,
                    113,
                    306
                ],
                "self.indexer": [
                    114,
                    196
                ],
                "self.binner": [
                    144,
                    115
                ],
                "self._grouper": [
                    172,
                    162,
                    163,
                    116
                ],
                "property": [
                    390,
                    204,
                    402,
                    118,
                    377
                ],
                "self._set_grouper": [
                    135
                ],
                "obj": [
                    515,
                    643,
                    135,
                    264,
                    656,
                    529,
                    663,
                    170,
                    172,
                    174,
                    176,
                    179,
                    563,
                    565,
                    567,
                    568,
                    198,
                    200,
                    457,
                    586,
                    600,
                    611,
                    613,
                    614,
                    616,
                    493,
                    627,
                    632,
                    507,
                    509,
                    511
                ],
                "exclusions": [
                    608,
                    581,
                    615,
                    136,
                    622,
                    663
                ],
                "_get_grouper": [
                    136
                ],
                "validate": [
                    612,
                    142
                ],
                "ValueError": [
                    159,
                    488,
                    680,
                    490,
                    494,
                    657,
                    498,
                    628,
                    346,
                    191
                ],
                "getattr": [
                    169,
                    361,
                    210,
                    212,
                    344
                ],
                "isinstance": [
                    384,
                    514,
                    650,
                    524,
                    269,
                    272,
                    279,
                    411,
                    667,
                    541,
                    671,
                    673,
                    293,
                    549,
                    550,
                    552,
                    169,
                    678,
                    563,
                    308,
                    567,
                    185,
                    573,
                    337,
                    341,
                    470,
                    492,
                    620,
                    506
                ],
                "ABCSeries": [
                    170
                ],
                "ax": [
                    194,
                    196,
                    197,
                    201,
                    172,
                    176,
                    179,
                    185,
                    186,
                    187,
                    190
                ],
                "self._grouper.take": [
                    172
                ],
                "obj.index": [
                    568,
                    565,
                    172,
                    493
                ],
                "obj._info_axis": [
                    174
                ],
                "KeyError": [
                    601,
                    619,
                    589,
                    175
                ],
                "format": [
                    175,
                    495,
                    369,
                    210,
                    630,
                    216,
                    281,
                    346,
                    191
                ],
                "Index": [
                    416,
                    678,
                    552,
                    269,
                    176,
                    659,
                    342,
                    187
                ],
                "obj._get_axis": [
                    457,
                    179
                ],
                "MultiIndex": [
                    272,
                    185,
                    470
                ],
                "ax._get_level_number": [
                    186
                ],
                "ax._get_level_values": [
                    187
                ],
                "ax.names": [
                    187
                ],
                "ax.name": [
                    190
                ],
                "ax.is_monotonic": [
                    194
                ],
                "indexer": [
                    196,
                    197,
                    198
                ],
                "ax.argsort": [
                    196
                ],
                "ax.take": [
                    197
                ],
                "obj.take": [
                    198
                ],
                "self.grouper.groups": [
                    206
                ],
                "attrs_list": [
                    209,
                    214
                ],
                "attr_name": [
                    210,
                    211,
                    212
                ],
                "self._attributes": [
                    211
                ],
                "attrs": [
                    216,
                    214
                ],
                "join": [
                    214
                ],
                "cls_name": [
                    216,
                    215
                ],
                "self.__class__.__name__": [
                    215
                ],
                "self.__class__": [
                    215
                ],
                "self.name": [
                    416,
                    258,
                    299,
                    300,
                    270,
                    305,
                    306,
                    369,
                    345,
                    284,
                    285
                ],
                "name": [
                    608,
                    258,
                    644,
                    614,
                    615,
                    617,
                    269,
                    623,
                    625,
                    607
                ],
                "_convert_grouper": [
                    260
                ],
                "index": [
                    260,
                    262,
                    280,
                    282,
                    285,
                    287
                ],
                "grouper": [
                    260,
                    269,
                    270,
                    272,
                    273,
                    662,
                    663,
                    671,
                    672,
                    673,
                    674,
                    675,
                    677,
                    678,
                    679,
                    681,
                    298,
                    683,
                    300,
                    302,
                    507,
                    509,
                    511
                ],
                "self.all_grouper": [
                    314,
                    261,
                    398,
                    399
                ],
                "self.index": [
                    350,
                    347,
                    422,
                    262
                ],
                "self.observed": [
                    265
                ],
                "observed": [
                    265,
                    322,
                    315,
                    647
                ],
                "self.in_axis": [
                    266
                ],
                "in_axis": [
                    614,
                    648,
                    617,
                    266,
                    623,
                    625,
                    607
                ],
                "Series": [
                    673,
                    678,
                    552,
                    269,
                    342,
                    567
                ],
                "grouper.name": [
                    270
                ],
                "grouper.values": [
                    273
                ],
                "int": [
                    279
                ],
                "index.names": [
                    280,
                    282,
                    285
                ],
                "AssertionError": [
                    281,
                    357
                ],
                "index.names.index": [
                    282
                ],
                "self._labels": [
                    321,
                    417,
                    392,
                    394,
                    409,
                    287
                ],
                "self._group_index": [
                    418,
                    330,
                    404,
                    406,
                    409,
                    287
                ],
                "index._get_grouper_for_level": [
                    287
                ],
                "Grouper": [
                    506,
                    620,
                    293,
                    550
                ],
                "_": [
                    298
                ],
                "self.grouper._get_grouper": [
                    298
                ],
                "grouper.result_index.name": [
                    300
                ],
                "grouper.result_index": [
                    300
                ],
                "self.grouper.obj": [
                    301
                ],
                "grouper._get_grouper": [
                    302
                ],
                "list": [
                    541,
                    678,
                    552,
                    308,
                    539,
                    573
                ],
                "tuple": [
                    552,
                    524,
                    308,
                    667,
                    573
                ],
                "com.asarray_tuplesafe": [
                    571,
                    309
                ],
                "com": [
                    571,
                    309
                ],
                "is_categorical_dtype": [
                    312,
                    627
                ],
                "recode_for_groupby": [
                    314
                ],
                "categories": [
                    328,
                    332,
                    317
                ],
                "self.grouper.categories": [
                    317
                ],
                "self.grouper.codes": [
                    321,
                    323
                ],
                "codes": [
                    323,
                    324,
                    326,
                    328,
                    332
                ],
                "algorithms.unique1d": [
                    323
                ],
                "algorithms": [
                    323,
                    415
                ],
                "self.grouper.ordered": [
                    332,
                    325
                ],
                "np.sort": [
                    326
                ],
                "np": [
                    326,
                    678,
                    328,
                    552,
                    659,
                    342
                ],
                "np.arange": [
                    328
                ],
                "len": [
                    546,
                    578,
                    484,
                    679,
                    328,
                    656,
                    658,
                    627,
                    471,
                    632,
                    379,
                    350,
                    575
                ],
                "CategoricalIndex": [
                    330
                ],
                "Categorical.from_codes": [
                    331,
                    422
                ],
                "Categorical": [
                    331,
                    422
                ],
                "Grouping": [
                    640,
                    337,
                    650,
                    659
                ],
                "self.grouper.grouper": [
                    338
                ],
                "ExtensionArray": [
                    342
                ],
                "np.ndarray": [
                    552,
                    678,
                    342
                ],
                "t": [
                    345,
                    346
                ],
                "str": [
                    345,
                    667,
                    492
                ],
                "type": [
                    345
                ],
                "self.index.map": [
                    347
                ],
                "hasattr": [
                    597,
                    349
                ],
                "errmsg": [
                    352,
                    357
                ],
                "pprint_thing": [
                    354
                ],
                "is_datetime64_dtype": [
                    362
                ],
                "self.grouper.astype": [
                    363,
                    366
                ],
                "is_timedelta64_dtype": [
                    364
                ],
                "iter": [
                    372
                ],
                "self.indices": [
                    372
                ],
                "_labels": [
                    374
                ],
                "_group_index": [
                    375
                ],
                "self.group_index": [
                    400,
                    379,
                    422,
                    399
                ],
                "BaseGrouper": [
                    384,
                    514,
                    411,
                    662
                ],
                "self.grouper.indices": [
                    385
                ],
                "values": [
                    387,
                    388
                ],
                "ensure_categorical": [
                    387
                ],
                "values._reverse_indexer": [
                    388
                ],
                "cache_readonly": [
                    420,
                    396,
                    381
                ],
                "self._make_labels": [
                    393,
                    405
                ],
                "recode_from_groupby": [
                    399
                ],
                "labels": [
                    417,
                    412,
                    415
                ],
                "self.grouper.label_info": [
                    412
                ],
                "uniques": [
                    416,
                    418,
                    413,
                    415
                ],
                "self.grouper.result_index": [
                    413
                ],
                "algorithms.factorize": [
                    415
                ],
                "self.index.groupby": [
                    422
                ],
                "self.labels": [
                    422
                ],
                "NDFrame": [
                    426
                ],
                "group_axis": [
                    641,
                    546,
                    457,
                    470,
                    503,
                    662,
                    476
                ],
                "is_list_like": [
                    483,
                    471
                ],
                "is_scalar": [
                    474,
                    667
                ],
                "group_axis.get_level_values": [
                    476
                ],
                "nlevels": [
                    484,
                    485,
                    487
                ],
                "obj.index.name": [
                    493
                ],
                "binner": [
                    507
                ],
                "key._get_grouper": [
                    507
                ],
                "key.key": [
                    508,
                    511
                ],
                "is_tuple": [
                    524,
                    525,
                    527
                ],
                "all_hashable": [
                    529,
                    530,
                    525
                ],
                "is_hashable": [
                    525
                ],
                "issubset": [
                    529
                ],
                "set": [
                    529
                ],
                "msg": [
                    538,
                    533
                ],
                "warnings.warn": [
                    538
                ],
                "warnings": [
                    538
                ],
                "FutureWarning": [
                    538
                ],
                "keys": [
                    545,
                    546,
                    578,
                    549,
                    550,
                    552,
                    565,
                    568,
                    571,
                    604,
                    542,
                    575
                ],
                "match_axis_length": [
                    560,
                    546,
                    543
                ],
                "any_callable": [
                    557,
                    549
                ],
                "any": [
                    549,
                    550,
                    551
                ],
                "callable": [
                    549
                ],
                "g": [
                    549,
                    550,
                    552,
                    565,
                    568
                ],
                "dict": [
                    549,
                    671
                ],
                "any_groupers": [
                    550,
                    559
                ],
                "any_arraylike": [
                    558,
                    551
                ],
                "DataFrame": [
                    563
                ],
                "all_in_columns_index": [
                    568,
                    570,
                    564
                ],
                "all": [
                    568,
                    564
                ],
                "obj.columns": [
                    565
                ],
                "obj.index.names": [
                    568,
                    565
                ],
                "levels": [
                    576,
                    578,
                    604
                ],
                "groupings": [
                    580,
                    654,
                    656,
                    658,
                    659,
                    662
                ],
                "_is_label_like": [
                    585
                ],
                "items": [
                    586,
                    588
                ],
                "obj._data.items": [
                    586
                ],
                "obj._data": [
                    586
                ],
                "items.get_loc": [
                    588
                ],
                "TypeError": [
                    589
                ],
                "gpr": [
                    642,
                    650,
                    651,
                    597,
                    600,
                    604,
                    606,
                    607,
                    610,
                    611,
                    613,
                    614,
                    616,
                    617,
                    619,
                    620,
                    622,
                    627,
                    632
                ],
                "gpr.name": [
                    600,
                    607
                ],
                "IndexError": [
                    601
                ],
                "i": [
                    604
                ],
                "enumerate": [
                    604
                ],
                "zip": [
                    604
                ],
                "is_in_obj": [
                    606
                ],
                "exclusions.append": [
                    608,
                    622,
                    615
                ],
                "is_in_axis": [
                    610
                ],
                "obj._check_label_or_level_ambiguity": [
                    613
                ],
                "obj._is_level_reference": [
                    616
                ],
                "gpr.key": [
                    620,
                    622
                ],
                "obj.shape": [
                    632,
                    627
                ],
                "ping": [
                    654,
                    639
                ],
                "groupings.append": [
                    659,
                    654
                ],
                "np.array": [
                    659
                ],
                "np.intp": [
                    659
                ],
                "mutated": [
                    662
                ],
                "val": [
                    667
                ],
                "grouper.get": [
                    672
                ],
                "grouper.index.equals": [
                    674
                ],
                "grouper.index": [
                    674
                ],
                "grouper._values": [
                    675
                ],
                "_values": [
                    677
                ],
                "grouper.reindex": [
                    677
                ]
            },
            "filtered_variables_in_file": {
                "_attributes": [
                    96
                ],
                "kwargs.get": [
                    99
                ],
                "kwargs": [
                    99
                ],
                "cls": [
                    102,
                    103
                ],
                "TimeGrouper": [
                    102
                ],
                "__new__": [
                    103
                ],
                "self.key": [
                    166,
                    167,
                    106,
                    138,
                    158
                ],
                "self": [
                    106,
                    107,
                    108,
                    109,
                    110,
                    112,
                    113,
                    114,
                    115,
                    116,
                    120,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    144,
                    158,
                    162,
                    163,
                    166,
                    167,
                    169,
                    172,
                    179,
                    180,
                    181,
                    194,
                    196,
                    198,
                    200,
                    201,
                    202,
                    206,
                    210,
                    211,
                    212,
                    215,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    270,
                    273,
                    284,
                    285,
                    287,
                    288,
                    293,
                    298,
                    299,
                    300,
                    301,
                    302,
                    305,
                    306,
                    308,
                    309,
                    312,
                    314,
                    315,
                    317,
                    321,
                    323,
                    325,
                    330,
                    332,
                    337,
                    338,
                    342,
                    344,
                    345,
                    347,
                    349,
                    350,
                    354,
                    356,
                    361,
                    362,
                    363,
                    364,
                    366,
                    369,
                    372,
                    379,
                    384,
                    385,
                    387,
                    392,
                    393,
                    394,
                    398,
                    399,
                    400,
                    404,
                    405,
                    406,
                    409,
                    411,
                    412,
                    413,
                    415,
                    416,
                    417,
                    418,
                    422
                ],
                "key": [
                    514,
                    515,
                    524,
                    525,
                    529,
                    539,
                    541,
                    542,
                    545,
                    167,
                    169,
                    174,
                    175,
                    176,
                    574,
                    585,
                    588,
                    474,
                    476,
                    106,
                    503,
                    506,
                    507,
                    508,
                    511
                ],
                "self.level": [
                    259,
                    107,
                    140,
                    180,
                    181,
                    158
                ],
                "level": [
                    259,
                    645,
                    278,
                    279,
                    280,
                    281,
                    282,
                    285,
                    288,
                    561,
                    181,
                    186,
                    187,
                    573,
                    190,
                    191,
                    575,
                    576,
                    578,
                    461,
                    471,
                    472,
                    474,
                    476,
                    477,
                    604,
                    483,
                    484,
                    486,
                    617,
                    107,
                    492,
                    493,
                    495,
                    497,
                    502
                ],
                "self.freq": [
                    108
                ],
                "freq": [
                    108
                ],
                "self.axis": [
                    179,
                    139,
                    109,
                    198
                ],
                "axis": [
                    674,
                    613,
                    677,
                    679,
                    616,
                    457,
                    109,
                    627,
                    632
                ],
                "self.sort": [
                    194,
                    263,
                    141,
                    110,
                    399,
                    315,
                    415
                ],
                "sort": [
                    194,
                    325,
                    646,
                    263,
                    110,
                    662
                ],
                "self.grouper": [
                    384,
                    385,
                    387,
                    260,
                    136,
                    144,
                    273,
                    411,
                    412,
                    413,
                    287,
                    288,
                    415,
                    163,
                    293,
                    169,
                    298,
                    301,
                    302,
                    305,
                    306,
                    308,
                    309,
                    312,
                    314,
                    315,
                    317,
                    321,
                    323,
                    325,
                    201,
                    202,
                    332,
                    206,
                    337,
                    338,
                    342,
                    344,
                    345,
                    347,
                    349,
                    350,
                    354,
                    356,
                    361,
                    362,
                    363,
                    364,
                    366,
                    112,
                    120
                ],
                "self.obj": [
                    136,
                    137,
                    200,
                    264,
                    298,
                    301,
                    144,
                    113,
                    306
                ],
                "self.indexer": [
                    114,
                    196
                ],
                "self.binner": [
                    144,
                    115
                ],
                "self._grouper": [
                    172,
                    162,
                    163,
                    116
                ],
                "self._set_grouper": [
                    135
                ],
                "obj": [
                    515,
                    643,
                    135,
                    264,
                    656,
                    529,
                    663,
                    170,
                    172,
                    174,
                    176,
                    179,
                    563,
                    565,
                    567,
                    568,
                    198,
                    200,
                    457,
                    586,
                    600,
                    611,
                    613,
                    614,
                    616,
                    493,
                    627,
                    632,
                    507,
                    509,
                    511
                ],
                "exclusions": [
                    608,
                    581,
                    615,
                    136,
                    622,
                    663
                ],
                "_get_grouper": [
                    136
                ],
                "validate": [
                    612,
                    142
                ],
                "ABCSeries": [
                    170
                ],
                "ax": [
                    194,
                    196,
                    197,
                    201,
                    172,
                    176,
                    179,
                    185,
                    186,
                    187,
                    190
                ],
                "self._grouper.take": [
                    172
                ],
                "obj.index": [
                    568,
                    565,
                    172,
                    493
                ],
                "obj._info_axis": [
                    174
                ],
                "Index": [
                    416,
                    678,
                    552,
                    269,
                    176,
                    659,
                    342,
                    187
                ],
                "obj._get_axis": [
                    457,
                    179
                ],
                "MultiIndex": [
                    272,
                    185,
                    470
                ],
                "ax._get_level_number": [
                    186
                ],
                "ax._get_level_values": [
                    187
                ],
                "ax.names": [
                    187
                ],
                "ax.name": [
                    190
                ],
                "ax.is_monotonic": [
                    194
                ],
                "indexer": [
                    196,
                    197,
                    198
                ],
                "ax.argsort": [
                    196
                ],
                "ax.take": [
                    197
                ],
                "obj.take": [
                    198
                ],
                "self.grouper.groups": [
                    206
                ],
                "attrs_list": [
                    209,
                    214
                ],
                "attr_name": [
                    210,
                    211,
                    212
                ],
                "self._attributes": [
                    211
                ],
                "attrs": [
                    216,
                    214
                ],
                "join": [
                    214
                ],
                "cls_name": [
                    216,
                    215
                ],
                "self.__class__.__name__": [
                    215
                ],
                "self.__class__": [
                    215
                ],
                "self.name": [
                    416,
                    258,
                    299,
                    300,
                    270,
                    305,
                    306,
                    369,
                    345,
                    284,
                    285
                ],
                "name": [
                    608,
                    258,
                    644,
                    614,
                    615,
                    617,
                    269,
                    623,
                    625,
                    607
                ],
                "_convert_grouper": [
                    260
                ],
                "index": [
                    260,
                    262,
                    280,
                    282,
                    285,
                    287
                ],
                "grouper": [
                    260,
                    269,
                    270,
                    272,
                    273,
                    662,
                    663,
                    671,
                    672,
                    673,
                    674,
                    675,
                    677,
                    678,
                    679,
                    681,
                    298,
                    683,
                    300,
                    302,
                    507,
                    509,
                    511
                ],
                "self.all_grouper": [
                    314,
                    261,
                    398,
                    399
                ],
                "self.index": [
                    350,
                    347,
                    422,
                    262
                ],
                "self.observed": [
                    265
                ],
                "observed": [
                    265,
                    322,
                    315,
                    647
                ],
                "self.in_axis": [
                    266
                ],
                "in_axis": [
                    614,
                    648,
                    617,
                    266,
                    623,
                    625,
                    607
                ],
                "Series": [
                    673,
                    678,
                    552,
                    269,
                    342,
                    567
                ],
                "grouper.name": [
                    270
                ],
                "grouper.values": [
                    273
                ],
                "index.names": [
                    280,
                    282,
                    285
                ],
                "index.names.index": [
                    282
                ],
                "self._labels": [
                    321,
                    417,
                    392,
                    394,
                    409,
                    287
                ],
                "self._group_index": [
                    418,
                    330,
                    404,
                    406,
                    409,
                    287
                ],
                "index._get_grouper_for_level": [
                    287
                ],
                "Grouper": [
                    506,
                    620,
                    293,
                    550
                ],
                "_": [
                    298
                ],
                "self.grouper._get_grouper": [
                    298
                ],
                "grouper.result_index.name": [
                    300
                ],
                "grouper.result_index": [
                    300
                ],
                "self.grouper.obj": [
                    301
                ],
                "grouper._get_grouper": [
                    302
                ],
                "com.asarray_tuplesafe": [
                    571,
                    309
                ],
                "com": [
                    571,
                    309
                ],
                "is_categorical_dtype": [
                    312,
                    627
                ],
                "recode_for_groupby": [
                    314
                ],
                "categories": [
                    328,
                    332,
                    317
                ],
                "self.grouper.categories": [
                    317
                ],
                "self.grouper.codes": [
                    321,
                    323
                ],
                "codes": [
                    323,
                    324,
                    326,
                    328,
                    332
                ],
                "algorithms.unique1d": [
                    323
                ],
                "algorithms": [
                    323,
                    415
                ],
                "self.grouper.ordered": [
                    332,
                    325
                ],
                "np.sort": [
                    326
                ],
                "np": [
                    326,
                    678,
                    328,
                    552,
                    659,
                    342
                ],
                "np.arange": [
                    328
                ],
                "CategoricalIndex": [
                    330
                ],
                "Categorical.from_codes": [
                    331,
                    422
                ],
                "Categorical": [
                    331,
                    422
                ],
                "Grouping": [
                    640,
                    337,
                    650,
                    659
                ],
                "self.grouper.grouper": [
                    338
                ],
                "ExtensionArray": [
                    342
                ],
                "np.ndarray": [
                    552,
                    678,
                    342
                ],
                "t": [
                    345,
                    346
                ],
                "self.index.map": [
                    347
                ],
                "errmsg": [
                    352,
                    357
                ],
                "pprint_thing": [
                    354
                ],
                "is_datetime64_dtype": [
                    362
                ],
                "self.grouper.astype": [
                    363,
                    366
                ],
                "is_timedelta64_dtype": [
                    364
                ],
                "self.indices": [
                    372
                ],
                "_labels": [
                    374
                ],
                "_group_index": [
                    375
                ],
                "self.group_index": [
                    400,
                    379,
                    422,
                    399
                ],
                "BaseGrouper": [
                    384,
                    514,
                    411,
                    662
                ],
                "self.grouper.indices": [
                    385
                ],
                "values": [
                    387,
                    388
                ],
                "ensure_categorical": [
                    387
                ],
                "values._reverse_indexer": [
                    388
                ],
                "cache_readonly": [
                    420,
                    396,
                    381
                ],
                "self._make_labels": [
                    393,
                    405
                ],
                "recode_from_groupby": [
                    399
                ],
                "labels": [
                    417,
                    412,
                    415
                ],
                "self.grouper.label_info": [
                    412
                ],
                "uniques": [
                    416,
                    418,
                    413,
                    415
                ],
                "self.grouper.result_index": [
                    413
                ],
                "algorithms.factorize": [
                    415
                ],
                "self.index.groupby": [
                    422
                ],
                "self.labels": [
                    422
                ],
                "NDFrame": [
                    426
                ],
                "group_axis": [
                    641,
                    546,
                    457,
                    470,
                    503,
                    662,
                    476
                ],
                "is_list_like": [
                    483,
                    471
                ],
                "is_scalar": [
                    474,
                    667
                ],
                "group_axis.get_level_values": [
                    476
                ],
                "nlevels": [
                    484,
                    485,
                    487
                ],
                "obj.index.name": [
                    493
                ],
                "binner": [
                    507
                ],
                "key._get_grouper": [
                    507
                ],
                "key.key": [
                    508,
                    511
                ],
                "is_tuple": [
                    524,
                    525,
                    527
                ],
                "all_hashable": [
                    529,
                    530,
                    525
                ],
                "is_hashable": [
                    525
                ],
                "issubset": [
                    529
                ],
                "msg": [
                    538,
                    533
                ],
                "warnings.warn": [
                    538
                ],
                "warnings": [
                    538
                ],
                "keys": [
                    545,
                    546,
                    578,
                    549,
                    550,
                    552,
                    565,
                    568,
                    571,
                    604,
                    542,
                    575
                ],
                "match_axis_length": [
                    560,
                    546,
                    543
                ],
                "any_callable": [
                    557,
                    549
                ],
                "g": [
                    549,
                    550,
                    552,
                    565,
                    568
                ],
                "any_groupers": [
                    550,
                    559
                ],
                "any_arraylike": [
                    558,
                    551
                ],
                "DataFrame": [
                    563
                ],
                "all_in_columns_index": [
                    568,
                    570,
                    564
                ],
                "obj.columns": [
                    565
                ],
                "obj.index.names": [
                    568,
                    565
                ],
                "levels": [
                    576,
                    578,
                    604
                ],
                "groupings": [
                    580,
                    654,
                    656,
                    658,
                    659,
                    662
                ],
                "_is_label_like": [
                    585
                ],
                "items": [
                    586,
                    588
                ],
                "obj._data.items": [
                    586
                ],
                "obj._data": [
                    586
                ],
                "items.get_loc": [
                    588
                ],
                "gpr": [
                    642,
                    650,
                    651,
                    597,
                    600,
                    604,
                    606,
                    607,
                    610,
                    611,
                    613,
                    614,
                    616,
                    617,
                    619,
                    620,
                    622,
                    627,
                    632
                ],
                "gpr.name": [
                    600,
                    607
                ],
                "i": [
                    604
                ],
                "is_in_obj": [
                    606
                ],
                "exclusions.append": [
                    608,
                    622,
                    615
                ],
                "is_in_axis": [
                    610
                ],
                "obj._check_label_or_level_ambiguity": [
                    613
                ],
                "obj._is_level_reference": [
                    616
                ],
                "gpr.key": [
                    620,
                    622
                ],
                "obj.shape": [
                    632,
                    627
                ],
                "ping": [
                    654,
                    639
                ],
                "groupings.append": [
                    659,
                    654
                ],
                "np.array": [
                    659
                ],
                "np.intp": [
                    659
                ],
                "mutated": [
                    662
                ],
                "val": [
                    667
                ],
                "grouper.get": [
                    672
                ],
                "grouper.index.equals": [
                    674
                ],
                "grouper.index": [
                    674
                ],
                "grouper._values": [
                    675
                ],
                "_values": [
                    677
                ],
                "grouper.reindex": [
                    677
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_139/pandas/tests/groupby/test_categorical.py",
                "test_function": "test_preserve_categories",
                "test_function_code": "def test_preserve_categories():\n    # GH-13179\n    categories = list(\"abc\")\n\n    # ordered=True\n    df = DataFrame({\"A\": Categorical(list(\"ba\"), categories=categories, ordered=True)})\n    index = CategoricalIndex(categories, categories, ordered=True, name=\"A\")\n    tm.assert_index_equal(\n        df.groupby(\"A\", sort=True, observed=False).first().index, index\n    )\n    tm.assert_index_equal(\n        df.groupby(\"A\", sort=False, observed=False).first().index, index\n    )\n\n    # ordered=False\n    df = DataFrame({\"A\": Categorical(list(\"ba\"), categories=categories, ordered=False)})\n    sort_index = CategoricalIndex(categories, categories, ordered=False, name=\"A\")\n    nosort_index = CategoricalIndex(list(\"bac\"), list(\"bac\"), ordered=False, name=\"A\")\n    tm.assert_index_equal(\n        df.groupby(\"A\", sort=True, observed=False).first().index, sort_index\n    )\n    tm.assert_index_equal(\n        df.groupby(\"A\", sort=False, observed=False).first().index, nosort_index\n    )",
                "test_error": "AssertionError: Index are different  Attribute \"names\" are different [left]:  [None] [right]: ['A']",
                "full_test_error": "def test_preserve_categories():\n        # GH-13179\n        categories = list(\"abc\")\n    \n        # ordered=True\n        df = DataFrame({\"A\": Categorical(list(\"ba\"), categories=categories, ordered=True)})\n        index = CategoricalIndex(categories, categories, ordered=True, name=\"A\")\n>       tm.assert_index_equal(\n            df.groupby(\"A\", sort=True, observed=False).first().index, index\n        )\nE       AssertionError: Index are different\nE       \nE       Attribute \"names\" are different\nE       [left]:  [None]\nE       [right]: ['A']\n\npandas/tests/groupby/test_categorical.py:678: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}