{
    "1.1.1": "def register_named_middleware(\n    self, middleware, route_names, attach_to=\"request\"\n):\n    if attach_to == \"request\":\n        for _rn in route_names:\n            if _rn not in self.named_request_middleware:\n                self.named_request_middleware[_rn] = deque()\n            if middleware not in self.named_request_middleware[_rn]:\n                self.named_request_middleware[_rn].append(middleware)\n    if attach_to == \"response\":\n        for _rn in route_names:\n            if _rn not in self.named_response_middleware:\n                self.named_response_middleware[_rn] = deque()\n            if middleware not in self.named_response_middleware[_rn]:\n                self.named_response_middleware[_rn].append(middleware)\n",
    "1.1.2": null,
    "1.2.1": "class Sanic()",
    "1.2.2": null,
    "1.2.3": [
        "middleware(self, middleware_or_request)"
    ],
    "1.3.1": "sanic/app.py",
    "1.3.2": [
        "middleware(self, middleware_or_request)"
    ],
    "1.4.1": [
        "def test_bp_middleware_order(app):\n    blueprint = Blueprint(\"test_bp_middleware_order\")\n    order = list()\n    @blueprint.middleware(\"request\")\n    def mw_1(request):\n        order.append(1)\n    @blueprint.middleware(\"request\")\n    def mw_2(request):\n        order.append(2)\n    @blueprint.middleware(\"request\")\n    def mw_3(request):\n        order.append(3)\n    @blueprint.middleware(\"response\")\n    def mw_4(request, response):\n        order.append(6)\n    @blueprint.middleware(\"response\")\n    def mw_5(request, response):\n        order.append(5)\n    @blueprint.middleware(\"response\")\n    def mw_6(request, response):\n        order.append(4)\n\n    @blueprint.route(\"/\")\n    def process_response(request):\n        return text(\"OK\")\n\n    app.blueprint(blueprint)\n    order.clear()\n    request, response = app.test_client.get(\"/\")\n\n    assert response.status == 200\n    assert order == [1, 2, 3, 4, 5, 6]"
    ],
    "1.4.2": [
        "tests/test_blueprints.py"
    ],
    "2.1.1": [
        [
            "E       assert [1, 2, 3, 6, 5, 4] == [1, 2, 3, 4, 5, 6]\nE         At index 3 diff: 6 != 4\nE         Full diff:\nE         - [1, 2, 3, 6, 5, 4]\nE         ?           ^     ^\nE         + [1, 2, 3, 4, 5, 6]\nE         ?           ^     ^"
        ]
    ],
    "2.1.2": [
        [
            "app = <sanic.app.Sanic object at 0x7f88950309d0>\n\n    def test_bp_middleware_order(app):\n        blueprint = Blueprint(\"test_bp_middleware_order\")\n        order = list()\n        @blueprint.middleware(\"request\")\n        def mw_1(request):\n            order.append(1)\n        @blueprint.middleware(\"request\")\n        def mw_2(request):\n            order.append(2)\n        @blueprint.middleware(\"request\")\n        def mw_3(request):\n            order.append(3)\n        @blueprint.middleware(\"response\")\n        def mw_4(request, response):\n            order.append(6)\n        @blueprint.middleware(\"response\")\n        def mw_5(request, response):\n            order.append(5)\n        @blueprint.middleware(\"response\")\n        def mw_6(request, response):\n            order.append(4)\n    \n        @blueprint.route(\"/\")\n        def process_response(request):\n            return text(\"OK\")\n    \n        app.blueprint(blueprint)\n        order.clear()\n        request, response = app.test_client.get(\"/\")\n    \n        assert response.status == 200\n>       assert order == [1, 2, 3, 4, 5, 6]",
            "\ntests/test_blueprints.py:304: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "attach_to": {
                    "value": "'request'",
                    "shape": "7",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f0c1eb60c10>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'request'",
                    "shape": "7",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f0c1eb60c10>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f0c1eb60c10>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f0c1eb60ca0>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'request'",
                    "shape": "7",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f0c1eb60c10>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f0c1eb60ca0>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f0c1eb60c10>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f0c1eb60ca0>, <function test_bp_middleware_order.<locals>.mw_3 at 0x7f0c1eb60d30>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'response'",
                    "shape": "8",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f0c1eb60c10>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f0c1eb60ca0>, <function test_bp_middleware_order.<locals>.mw_3 at 0x7f0c1eb60d30>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_4 at 0x7f0c1eb60dc0>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'response'",
                    "shape": "8",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f0c1eb60c10>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f0c1eb60ca0>, <function test_bp_middleware_order.<locals>.mw_3 at 0x7f0c1eb60d30>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_4 at 0x7f0c1eb60dc0>])}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_4 at 0x7f0c1eb60dc0>, <function test_bp_middleware_order.<locals>.mw_5 at 0x7f0c1eb60e50>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'response'",
                    "shape": "8",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f0c1eb60c10>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f0c1eb60ca0>, <function test_bp_middleware_order.<locals>.mw_3 at 0x7f0c1eb60d30>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_4 at 0x7f0c1eb60dc0>, <function test_bp_middleware_order.<locals>.mw_5 at 0x7f0c1eb60e50>])}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_4 at 0x7f0c1eb60dc0>, <function test_bp_middleware_order.<locals>.mw_5 at 0x7f0c1eb60e50>, <function test_bp_middleware_order.<locals>.mw_6 at 0x7f0c1eb60ee0>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_request_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_request_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_request_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_response_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_response_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_response_middleware": "dict"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "attach_to": {
                    "value": "'request'",
                    "shape": "7",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f8d240bcd30>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'request'",
                    "shape": "7",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f8d240bcd30>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f8d240bcd30>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f8d240bcdc0>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'request'",
                    "shape": "7",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f8d240bcd30>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f8d240bcdc0>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f8d240bcd30>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f8d240bcdc0>, <function test_bp_middleware_order.<locals>.mw_3 at 0x7f8d240bce50>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'response'",
                    "shape": "8",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f8d240bcd30>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f8d240bcdc0>, <function test_bp_middleware_order.<locals>.mw_3 at 0x7f8d240bce50>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_4 at 0x7f8d240bcee0>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'response'",
                    "shape": "8",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f8d240bcd30>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f8d240bcdc0>, <function test_bp_middleware_order.<locals>.mw_3 at 0x7f8d240bce50>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_4 at 0x7f8d240bcee0>])}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_5 at 0x7f8d240bcf70>, <function test_bp_middleware_order.<locals>.mw_4 at 0x7f8d240bcee0>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "attach_to": {
                    "value": "'response'",
                    "shape": "8",
                    "omitted": false
                },
                "route_names": {
                    "value": "['test_bp_middleware_order.process_response']",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_request_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_1 at 0x7f8d240bcd30>, <function test_bp_middleware_order.<locals>.mw_2 at 0x7f8d240bcdc0>, <function test_bp_middleware_order.<locals>.mw_3 at 0x7f8d240bce50>])}",
                    "shape": "1",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_5 at 0x7f8d240bcf70>, <function test_bp_middleware_order.<locals>.mw_4 at 0x7f8d240bcee0>])}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "_rn": {
                    "value": "'test_bp_middleware_order.process_response'",
                    "shape": "41",
                    "omitted": false
                },
                "self.named_response_middleware": {
                    "value": "{'test_bp_middleware_order.process_response': deque([<function test_bp_middleware_order.<locals>.mw_6 at 0x7f8d243ee040>, <function test_bp_middleware_order.<locals>.mw_5 at 0x7f8d240bcf70>, <function test_bp_middleware_order.<locals>.mw_4 at 0x7f8d240bcee0>])}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_request_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_request_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_request_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_response_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_response_middleware": "dict"
            }
        ],
        [
            {
                "attach_to": "str",
                "route_names": "list",
                "self.named_request_middleware": "dict",
                "self.named_response_middleware": "dict"
            },
            {
                "_rn": "str",
                "self.named_response_middleware": "dict"
            }
        ]
    ],
    "3.1.1": [
        "\"Named Response Middleware\" executed in wrong order\n"
    ],
    "3.1.2": [
        "Describe the bug\nPR #1690 Introduced \"named response middlware\" that is, middleware which is only executed in a given request context. For example a blueprint middleware is only executed on a route which is defined in that blueprint.\nThere was a copy+paste error in the register_named_middleware function, here: https://github.com/huge-success/sanic/blob/e7001b00747b659f7042b0534802b936ee8a53e0/sanic/app.py#L656\nWhen registering a \"response\" middleware, they are supposed to be added to the left in reverse. So appendleft() should be used instead of append(). The correct behavior is seen in the normal register_middleware function.\n\nCode snippet\nSee these two examples, the first using normal middleware, and the second using named middleware:\n\nfrom sanic import Sanic\nfrom sanic.response import text\napp = Sanic(__name__)\n\n@app.middleware('request')\ndef request_middleware_1(request):\n    print('1')\n\n@app.middleware('request')\ndef request_middleware_2(request):\n    print('2')\n\n@app.middleware('request')\ndef request_middleware_3(request):\n    print('3')\n\n@app.middleware('response')\ndef resp_middleware_4(request, response):\n    print('4')\n\n@app.middleware('response')\ndef resp_middleware_5(request, response):\n    print('5')\n\n@app.middleware('response')\ndef resp_middleware_6(request, response):\n    print('6')\n\n@app.route('/')\ndef pop_handler(request):\n    return text('hello world')\n\napp.run(host=\"0.0.0.0\", port=8000, debug=True, auto_reload=False)\nvs:\n\nfrom sanic import Sanic, Blueprint\nfrom sanic.response import text\n\napp = Sanic(__name__)\nbp = Blueprint(\"bp_\"+__name__)\n\n@bp.middleware('request')\ndef request_middleware_1(request):\n    print('1')\n\n@bp.middleware('request')\ndef request_middleware_2(request):\n    print('2')\n\n@bp.middleware('request')\ndef request_middleware_3(request):\n    print('3')\n\n@bp.middleware('response')\ndef resp_middleware_4(request, response):\n    print('4')\n\n@bp.middleware('response')\ndef resp_middleware_5(request, response):\n    print('5')\n\n@bp.middleware('response')\ndef resp_middleware_6(request, response):\n    print('6')\n\n@bp.route('/')\ndef pop_handler(request):\n    return text('hello world')\n\napp.blueprint(bp, url_prefix='/bp')\n\napp.run(host=\"0.0.0.0\", port=8000, debug=True, auto_reload=False)\nExpected behavior\nSee the first snippet prints \"1 2 3 6 5 4\" (correct) but the second snippet prints \"1 2 3 4 5 6\". This should match the first.\n"
    ],
    "used_imports": "from collections import defaultdict, deque"
}