{
    "sanic:3": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/sanic_3/sanic/app.py": {
            "buggy_functions": [
                {
                    "function_name": "url_for",
                    "function_code": "def url_for(self, view_name: str, **kwargs):\n    r\"\"\"Build a URL based on a view name and the values provided.\n\n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n\n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n\n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n\n    :return: the built URL\n\n    Raises:\n        URLBuildError\n    \"\"\"\n    # find the route by the supplied view name\n    kw: Dict[str, str] = {}\n    # special static files url_for\n    if view_name == \"static\":\n        kw.update(name=kwargs.pop(\"name\", \"static\"))\n    elif view_name.endswith(\".static\"):  # blueprint.static\n        kwargs.pop(\"name\", None)\n        kw.update(name=view_name)\n\n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n\n    if view_name == \"static\" or view_name.endswith(\".static\"):\n        filename = kwargs.pop(\"filename\", None)\n        # it's static folder\n        if \"<file_uri:\" in uri:\n            folder_ = uri.split(\"<file_uri:\", 1)[0]\n            if folder_.endswith(\"/\"):\n                folder_ = folder_[:-1]\n\n            if filename.startswith(\"/\"):\n                filename = filename[1:]\n\n            uri = \"{}/{}\".format(folder_, filename)\n\n    if uri != \"/\" and uri.endswith(\"/\"):\n        uri = uri[:-1]\n\n    out = uri\n\n    # find all the parameters we will need to build in the URL\n    matched_params = re.findall(self.router.parameter_pattern, uri)\n\n    # _method is only a placeholder now, don't know how to support it\n    kwargs.pop(\"_method\", None)\n    anchor = kwargs.pop(\"_anchor\", \"\")\n    # _external need SERVER_NAME in config or pass _server arg\n    external = kwargs.pop(\"_external\", False)\n    scheme = kwargs.pop(\"_scheme\", \"\")\n    if scheme and not external:\n        raise ValueError(\"When specifying _scheme, _external must be True\")\n\n    netloc = kwargs.pop(\"_server\", None)\n    if netloc is None and external:\n        netloc = self.config.get(\"SERVER_NAME\", \"\")\n\n    if external:\n        if not scheme:\n            if \":\" in netloc[:8]:\n                scheme = netloc[:8].split(\":\", 1)[0]\n            else:\n                scheme = \"http\"\n\n        if \"://\" in netloc[:8]:\n            netloc = netloc.split(\"://\", 1)[-1]\n\n    for match in matched_params:\n        name, _type, pattern = self.router.parse_parameter_string(match)\n        # we only want to match against each individual parameter\n        specific_pattern = \"^{}$\".format(pattern)\n        supplied_param = None\n\n        if name in kwargs:\n            supplied_param = kwargs.get(name)\n            del kwargs[name]\n        else:\n            raise URLBuildError(\n                \"Required parameter `{}` was not passed to url_for\".format(\n                    name\n                )\n            )\n\n        supplied_param = str(supplied_param)\n        # determine if the parameter supplied by the caller passes the test\n        # in the URL\n        passes_pattern = re.match(specific_pattern, supplied_param)\n\n        if not passes_pattern:\n            if _type != str:\n                msg = (\n                    'Value \"{}\" for parameter `{}` does not '\n                    \"match pattern for type `{}`: {}\".format(\n                        supplied_param, name, _type.__name__, pattern\n                    )\n                )\n            else:\n                msg = (\n                    'Value \"{}\" for parameter `{}` '\n                    \"does not satisfy pattern {}\".format(\n                        supplied_param, name, pattern\n                    )\n                )\n            raise URLBuildError(msg)\n\n        # replace the parameter in the URL with the supplied value\n        replacement_regex = \"(<{}.*?>)\".format(name)\n\n        out = re.sub(replacement_regex, supplied_param, out)\n\n    # parse the remainder of the keyword arguments into a querystring\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    # scheme://netloc/path;parameters?query#fragment\n    out = urlunparse((scheme, netloc, out, \"\", query_string, anchor))\n\n    return out\n",
                    "decorators": [],
                    "docstring": "Build a URL based on a view name and the values provided.\n\nIn order to build a URL, all request parameters must be supplied as\nkeyword arguments, and each parameter must pass the test for the\nspecified parameter type. If these conditions are not met, a\n`URLBuildError` will be thrown.\n\nKeyword arguments that are not request parameters will be included in\nthe output URL's query string.\n\n:param view_name: string referencing the view name\n:param \\**kwargs: keys and values that are used to build request\n    parameters and query string arguments.\n\n:return: the built URL\n\nRaises:\n    URLBuildError",
                    "start_line": 798,
                    "end_line": 925,
                    "variables": {
                        "str": [
                            819,
                            899,
                            893,
                            798
                        ],
                        "kw": [
                            825,
                            819,
                            822,
                            827
                        ],
                        "Dict": [
                            819
                        ],
                        "view_name": [
                            833,
                            821,
                            823,
                            825,
                            827,
                            830
                        ],
                        "kw.update": [
                            825,
                            822
                        ],
                        "kwargs.pop": [
                            834,
                            856,
                            822,
                            855,
                            824,
                            858,
                            859,
                            863
                        ],
                        "kwargs": [
                            834,
                            921,
                            856,
                            883,
                            884,
                            822,
                            855,
                            824,
                            885,
                            858,
                            859,
                            863
                        ],
                        "view_name.endswith": [
                            833,
                            823
                        ],
                        "uri": [
                            836,
                            837,
                            844,
                            846,
                            847,
                            849,
                            852,
                            827,
                            828
                        ],
                        "route": [
                            827,
                            828
                        ],
                        "self.router.find_route_by_view_name": [
                            827
                        ],
                        "self.router": [
                            827,
                            852,
                            878
                        ],
                        "self": [
                            865,
                            827,
                            852,
                            878
                        ],
                        "URLBuildError": [
                            913,
                            829,
                            887
                        ],
                        "format": [
                            901,
                            844,
                            908,
                            880,
                            916,
                            888,
                            830
                        ],
                        "filename": [
                            841,
                            834,
                            844,
                            842
                        ],
                        "folder_": [
                            844,
                            837,
                            838,
                            839
                        ],
                        "uri.split": [
                            837
                        ],
                        "folder_.endswith": [
                            838
                        ],
                        "filename.startswith": [
                            841
                        ],
                        "uri.endswith": [
                            846
                        ],
                        "out": [
                            849,
                            923,
                            925,
                            918
                        ],
                        "matched_params": [
                            852,
                            877
                        ],
                        "re.findall": [
                            852
                        ],
                        "re": [
                            896,
                            852,
                            918
                        ],
                        "self.router.parameter_pattern": [
                            852
                        ],
                        "anchor": [
                            856,
                            923
                        ],
                        "external": [
                            864,
                            858,
                            867,
                            860
                        ],
                        "scheme": [
                            868,
                            923,
                            870,
                            872,
                            859,
                            860
                        ],
                        "ValueError": [
                            861
                        ],
                        "netloc": [
                            864,
                            865,
                            869,
                            870,
                            874,
                            875,
                            923,
                            863
                        ],
                        "self.config.get": [
                            865
                        ],
                        "self.config": [
                            865
                        ],
                        "split": [
                            870
                        ],
                        "netloc.split": [
                            875
                        ],
                        "match": [
                            877,
                            878
                        ],
                        "name": [
                            903,
                            878,
                            910,
                            883,
                            884,
                            885,
                            916,
                            889
                        ],
                        "_type": [
                            899,
                            878,
                            903
                        ],
                        "pattern": [
                            880,
                            910,
                            878,
                            903
                        ],
                        "self.router.parse_parameter_string": [
                            878
                        ],
                        "specific_pattern": [
                            880,
                            896
                        ],
                        "supplied_param": [
                            896,
                            903,
                            910,
                            881,
                            884,
                            918,
                            893
                        ],
                        "kwargs.get": [
                            884
                        ],
                        "passes_pattern": [
                            896,
                            898
                        ],
                        "re.match": [
                            896
                        ],
                        "msg": [
                            913,
                            907,
                            900
                        ],
                        "_type.__name__": [
                            903
                        ],
                        "replacement_regex": [
                            916,
                            918
                        ],
                        "re.sub": [
                            918
                        ],
                        "query_string": [
                            921,
                            923
                        ],
                        "urlencode": [
                            921
                        ],
                        "urlunparse": [
                            923
                        ]
                    },
                    "filtered_variables": {
                        "kw": [
                            825,
                            819,
                            822,
                            827
                        ],
                        "Dict": [
                            819
                        ],
                        "view_name": [
                            833,
                            821,
                            823,
                            825,
                            827,
                            830
                        ],
                        "kw.update": [
                            825,
                            822
                        ],
                        "kwargs.pop": [
                            834,
                            856,
                            822,
                            855,
                            824,
                            858,
                            859,
                            863
                        ],
                        "kwargs": [
                            834,
                            921,
                            856,
                            883,
                            884,
                            822,
                            855,
                            824,
                            885,
                            858,
                            859,
                            863
                        ],
                        "view_name.endswith": [
                            833,
                            823
                        ],
                        "uri": [
                            836,
                            837,
                            844,
                            846,
                            847,
                            849,
                            852,
                            827,
                            828
                        ],
                        "route": [
                            827,
                            828
                        ],
                        "self.router.find_route_by_view_name": [
                            827
                        ],
                        "self.router": [
                            827,
                            852,
                            878
                        ],
                        "self": [
                            865,
                            827,
                            852,
                            878
                        ],
                        "URLBuildError": [
                            913,
                            829,
                            887
                        ],
                        "filename": [
                            841,
                            834,
                            844,
                            842
                        ],
                        "folder_": [
                            844,
                            837,
                            838,
                            839
                        ],
                        "uri.split": [
                            837
                        ],
                        "folder_.endswith": [
                            838
                        ],
                        "filename.startswith": [
                            841
                        ],
                        "uri.endswith": [
                            846
                        ],
                        "out": [
                            849,
                            923,
                            925,
                            918
                        ],
                        "matched_params": [
                            852,
                            877
                        ],
                        "re.findall": [
                            852
                        ],
                        "re": [
                            896,
                            852,
                            918
                        ],
                        "self.router.parameter_pattern": [
                            852
                        ],
                        "anchor": [
                            856,
                            923
                        ],
                        "external": [
                            864,
                            858,
                            867,
                            860
                        ],
                        "scheme": [
                            868,
                            923,
                            870,
                            872,
                            859,
                            860
                        ],
                        "netloc": [
                            864,
                            865,
                            869,
                            870,
                            874,
                            875,
                            923,
                            863
                        ],
                        "self.config.get": [
                            865
                        ],
                        "self.config": [
                            865
                        ],
                        "split": [
                            870
                        ],
                        "netloc.split": [
                            875
                        ],
                        "match": [
                            877,
                            878
                        ],
                        "name": [
                            903,
                            878,
                            910,
                            883,
                            884,
                            885,
                            916,
                            889
                        ],
                        "_type": [
                            899,
                            878,
                            903
                        ],
                        "pattern": [
                            880,
                            910,
                            878,
                            903
                        ],
                        "self.router.parse_parameter_string": [
                            878
                        ],
                        "specific_pattern": [
                            880,
                            896
                        ],
                        "supplied_param": [
                            896,
                            903,
                            910,
                            881,
                            884,
                            918,
                            893
                        ],
                        "kwargs.get": [
                            884
                        ],
                        "passes_pattern": [
                            896,
                            898
                        ],
                        "re.match": [
                            896
                        ],
                        "msg": [
                            913,
                            907,
                            900
                        ],
                        "_type.__name__": [
                            903
                        ],
                        "replacement_regex": [
                            916,
                            918
                        ],
                        "re.sub": [
                            918
                        ],
                        "query_string": [
                            921,
                            923
                        ],
                        "urlencode": [
                            921
                        ],
                        "urlunparse": [
                            923
                        ]
                    },
                    "diff_line_number": 832,
                    "class_data": {
                        "signature": "class Sanic()",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, name=None, router=None, error_handler=None, load_env=True, request_class=None, strict_slashes=False, log_config=None, configure_logging=True):\n    if name is None:\n        warnings.warn(\"Sanic(name=None) is deprecated and None value support for `name` will be removed in the next release. Please use Sanic(name='your_application_name') instead.\", DeprecationWarning, stacklevel=2)\n        frame_records = stack()[1]\n        name = getmodulename(frame_records[1])\n    if configure_logging:\n        logging.config.dictConfig(log_config or LOGGING_CONFIG_DEFAULTS)\n    self.name = name\n    self.asgi = False\n    self.router = router or Router()\n    self.request_class = request_class\n    self.error_handler = error_handler or ErrorHandler()\n    self.config = Config(load_env=load_env)\n    self.request_middleware = deque()\n    self.response_middleware = deque()\n    self.blueprints = {}\n    self._blueprint_order = []\n    self.configure_logging = configure_logging\n    self.debug = None\n    self.sock = None\n    self.strict_slashes = strict_slashes\n    self.listeners = defaultdict(list)\n    self.is_running = False\n    self.is_request_stream = False\n    self.websocket_enabled = False\n    self.websocket_tasks = set()\n    self.named_request_middleware = {}\n    self.named_response_middleware = {}\n    self.go_fast = self.run",
                            "@property\ndef loop(self):\n    \"\"\"Synonymous with asyncio.get_event_loop().\n\n    Only supported when using the `app.run` method.\n    \"\"\"\n    if not self.is_running and self.asgi is False:\n        raise SanicException('Loop can only be retrieved after the app has started running. Not supported with `create_server` function')\n    return get_event_loop()",
                            "def add_task(self, task):\n    \"\"\"Schedule a task to run later, after the loop has started.\n    Different from asyncio.ensure_future in that it does not\n    also return a future, and the actual ensure_future call\n    is delayed until before server start.\n\n    :param task: future, couroutine or awaitable\n    \"\"\"\n    try:\n        if callable(task):\n            try:\n                self.loop.create_task(task(self))\n            except TypeError:\n                self.loop.create_task(task())\n        else:\n            self.loop.create_task(task)\n    except SanicException:\n\n        @self.listener('before_server_start')\n        def run(app, loop):\n            if callable(task):\n                try:\n                    loop.create_task(task(self))\n                except TypeError:\n                    loop.create_task(task())\n            else:\n                loop.create_task(task)",
                            "def listener(self, event):\n    \"\"\"Create a listener from a decorated function.\n\n    :param event: event to listen to\n    \"\"\"\n\n    def decorator(listener):\n        self.listeners[event].append(listener)\n        return listener\n    return decorator",
                            "def register_listener(self, listener, event):\n    \"\"\"\n    Register the listener for a given event.\n\n    :param listener: callable i.e. setup_db(app, loop)\n    :param event: when to register listener i.e. 'before_server_start'\n    :return: listener\n    \"\"\"\n    return self.listener(event)(listener)",
                            "def route(self, uri, methods=frozenset({'GET'}), host=None, strict_slashes=None, stream=False, version=None, name=None):\n    \"\"\"Decorate a function to be registered as a route\n\n    :param uri: path of the URL\n    :param methods: list or tuple of methods allowed\n    :param host:\n    :param strict_slashes:\n    :param stream:\n    :param version:\n    :param name: user defined route name for url_for\n    :return: tuple of routes, decorated function\n    \"\"\"\n    if not uri.startswith('/'):\n        uri = '/' + uri\n    if stream:\n        self.is_request_stream = True\n    if strict_slashes is None:\n        strict_slashes = self.strict_slashes\n\n    def response(handler):\n        if isinstance(handler, tuple):\n            (routes, handler) = handler\n        else:\n            routes = []\n        args = list(signature(handler).parameters.keys())\n        if not args:\n            raise ValueError('Required parameter `request` missing in the {0}() route?'.format(handler.__name__))\n        if stream:\n            handler.is_stream = stream\n        routes.extend(self.router.add(uri=uri, methods=methods, handler=handler, host=host, strict_slashes=strict_slashes, version=version, name=name))\n        return (routes, handler)\n    return response",
                            "def get(self, uri, host=None, strict_slashes=None, version=None, name=None):\n    \"\"\"\n    Add an API URL under the **GET** *HTTP* method\n\n    :param uri: URL to be tagged to **GET** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(uri, methods=frozenset({'GET'}), host=host, strict_slashes=strict_slashes, version=version, name=name)",
                            "def post(self, uri, host=None, strict_slashes=None, stream=False, version=None, name=None):\n    \"\"\"\n    Add an API URL under the **POST** *HTTP* method\n\n    :param uri: URL to be tagged to **POST** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(uri, methods=frozenset({'POST'}), host=host, strict_slashes=strict_slashes, stream=stream, version=version, name=name)",
                            "def put(self, uri, host=None, strict_slashes=None, stream=False, version=None, name=None):\n    \"\"\"\n    Add an API URL under the **PUT** *HTTP* method\n\n    :param uri: URL to be tagged to **PUT** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(uri, methods=frozenset({'PUT'}), host=host, strict_slashes=strict_slashes, stream=stream, version=version, name=name)",
                            "def head(self, uri, host=None, strict_slashes=None, version=None, name=None):\n    return self.route(uri, methods=frozenset({'HEAD'}), host=host, strict_slashes=strict_slashes, version=version, name=name)",
                            "def options(self, uri, host=None, strict_slashes=None, version=None, name=None):\n    \"\"\"\n    Add an API URL under the **OPTIONS** *HTTP* method\n\n    :param uri: URL to be tagged to **OPTIONS** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(uri, methods=frozenset({'OPTIONS'}), host=host, strict_slashes=strict_slashes, version=version, name=name)",
                            "def patch(self, uri, host=None, strict_slashes=None, stream=False, version=None, name=None):\n    \"\"\"\n    Add an API URL under the **PATCH** *HTTP* method\n\n    :param uri: URL to be tagged to **PATCH** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(uri, methods=frozenset({'PATCH'}), host=host, strict_slashes=strict_slashes, stream=stream, version=version, name=name)",
                            "def delete(self, uri, host=None, strict_slashes=None, version=None, name=None):\n    \"\"\"\n    Add an API URL under the **DELETE** *HTTP* method\n\n    :param uri: URL to be tagged to **DELETE** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(uri, methods=frozenset({'DELETE'}), host=host, strict_slashes=strict_slashes, version=version, name=name)",
                            "def add_route(self, handler, uri, methods=frozenset({'GET'}), host=None, strict_slashes=None, version=None, name=None, stream=False):\n    \"\"\"A helper method to register class instance or\n    functions as a handler to the application url\n    routes.\n\n    :param handler: function or class instance\n    :param uri: path of the URL\n    :param methods: list or tuple of methods allowed, these are overridden\n                    if using a HTTPMethodView\n    :param host:\n    :param strict_slashes:\n    :param version:\n    :param name: user defined route name for url_for\n    :param stream: boolean specifying if the handler is a stream handler\n    :return: function or class instance\n    \"\"\"\n    if hasattr(handler, 'view_class'):\n        methods = set()\n        for method in HTTP_METHODS:\n            _handler = getattr(handler.view_class, method.lower(), None)\n            if _handler:\n                methods.add(method)\n                if hasattr(_handler, 'is_stream'):\n                    stream = True\n    if isinstance(handler, CompositionView):\n        methods = handler.handlers.keys()\n        for _handler in handler.handlers.values():\n            if hasattr(_handler, 'is_stream'):\n                stream = True\n                break\n    if strict_slashes is None:\n        strict_slashes = self.strict_slashes\n    self.route(uri=uri, methods=methods, host=host, strict_slashes=strict_slashes, stream=stream, version=version, name=name)(handler)\n    return handler",
                            "def websocket(self, uri, host=None, strict_slashes=None, subprotocols=None, name=None):\n    \"\"\"\n    Decorate a function to be registered as a websocket route\n\n    :param uri: path of the URL\n    :param host: Host IP or FQDN details\n    :param strict_slashes: If the API endpoint needs to terminate\n                           with a \"/\" or not\n    :param subprotocols: optional list of str with supported subprotocols\n    :param name: A unique name assigned to the URL so that it can\n                 be used with :func:`url_for`\n    :return: tuple of routes, decorated function\n    \"\"\"\n    self.enable_websocket()\n    if not uri.startswith('/'):\n        uri = '/' + uri\n    if strict_slashes is None:\n        strict_slashes = self.strict_slashes\n\n    def response(handler):\n        if isinstance(handler, tuple):\n            (routes, handler) = handler\n        else:\n            routes = []\n\n        async def websocket_handler(request, *args, **kwargs):\n            request.app = self\n            if not getattr(handler, '__blueprintname__', False):\n                request.endpoint = handler.__name__\n            else:\n                request.endpoint = getattr(handler, '__blueprintname__', '') + handler.__name__\n                pass\n            if self.asgi:\n                ws = request.transport.get_websocket_connection()\n            else:\n                try:\n                    protocol = request.transport.get_protocol()\n                except AttributeError:\n                    protocol = request.transport._protocol\n                protocol.app = self\n                ws = await protocol.websocket_handshake(request, subprotocols)\n            fut = ensure_future(handler(request, ws, *args, **kwargs))\n            self.websocket_tasks.add(fut)\n            try:\n                await fut\n            except (CancelledError, ConnectionClosed):\n                pass\n            finally:\n                self.websocket_tasks.remove(fut)\n            await ws.close()\n        routes.extend(self.router.add(uri=uri, handler=websocket_handler, methods=frozenset({'GET'}), host=host, strict_slashes=strict_slashes, name=name))\n        return (routes, handler)\n    return response",
                            "def add_websocket_route(self, handler, uri, host=None, strict_slashes=None, subprotocols=None, name=None):\n    \"\"\"\n    A helper method to register a function as a websocket route.\n\n    :param handler: a callable function or instance of a class\n                    that can handle the websocket request\n    :param host: Host IP or FQDN details\n    :param uri: URL path that will be mapped to the websocket\n                handler\n                handler\n    :param strict_slashes: If the API endpoint needs to terminate\n            with a \"/\" or not\n    :param subprotocols: Subprotocols to be used with websocket\n            handshake\n    :param name: A unique name assigned to the URL so that it can\n            be used with :func:`url_for`\n    :return: Objected decorated by :func:`websocket`\n    \"\"\"\n    if strict_slashes is None:\n        strict_slashes = self.strict_slashes\n    return self.websocket(uri, host=host, strict_slashes=strict_slashes, subprotocols=subprotocols, name=name)(handler)",
                            "def enable_websocket(self, enable=True):\n    \"\"\"Enable or disable the support for websocket.\n\n    Websocket is enabled automatically if websocket routes are\n    added to the application.\n    \"\"\"\n    if not self.websocket_enabled:\n\n        @self.listener('before_server_stop')\n        def cancel_websocket_tasks(app, loop):\n            for task in self.websocket_tasks:\n                task.cancel()\n    self.websocket_enabled = enable",
                            "def remove_route(self, uri, clean_cache=True, host=None):\n    \"\"\"\n    This method provides the app user a mechanism by which an already\n    existing route can be removed from the :class:`Sanic` object\n\n    .. warning::\n        remove_route is deprecated in v19.06 and will be removed\n        from future versions.\n\n    :param uri: URL Path to be removed from the app\n    :param clean_cache: Instruct sanic if it needs to clean up the LRU\n        route cache\n    :param host: IP address or FQDN specific to the host\n    :return: None\n    \"\"\"\n    warnings.warn('remove_route is deprecated and will be removed from future versions.', DeprecationWarning, stacklevel=2)\n    self.router.remove(uri, clean_cache, host)",
                            "def exception(self, *exceptions):\n    \"\"\"Decorate a function to be registered as a handler for exceptions\n\n    :param exceptions: exceptions\n    :return: decorated function\n    \"\"\"\n\n    def response(handler):\n        for exception in exceptions:\n            if isinstance(exception, (tuple, list)):\n                for e in exception:\n                    self.error_handler.add(e, handler)\n            else:\n                self.error_handler.add(exception, handler)\n        return handler\n    return response",
                            "def register_middleware(self, middleware, attach_to='request'):\n    \"\"\"\n    Register an application level middleware that will be attached\n    to all the API URLs registered under this application.\n\n    This method is internally invoked by the :func:`middleware`\n    decorator provided at the app level.\n\n    :param middleware: Callback method to be attached to the\n        middleware\n    :param attach_to: The state at which the middleware needs to be\n        invoked in the lifecycle of an *HTTP Request*.\n        **request** - Invoke before the request is processed\n        **response** - Invoke before the response is returned back\n    :return: decorated method\n    \"\"\"\n    if attach_to == 'request':\n        if middleware not in self.request_middleware:\n            self.request_middleware.append(middleware)\n    if attach_to == 'response':\n        if middleware not in self.response_middleware:\n            self.response_middleware.appendleft(middleware)\n    return middleware",
                            "def register_named_middleware(self, middleware, route_names, attach_to='request'):\n    if attach_to == 'request':\n        for _rn in route_names:\n            if _rn not in self.named_request_middleware:\n                self.named_request_middleware[_rn] = deque()\n            if middleware not in self.named_request_middleware[_rn]:\n                self.named_request_middleware[_rn].append(middleware)\n    if attach_to == 'response':\n        for _rn in route_names:\n            if _rn not in self.named_response_middleware:\n                self.named_response_middleware[_rn] = deque()\n            if middleware not in self.named_response_middleware[_rn]:\n                self.named_response_middleware[_rn].append(middleware)",
                            "def middleware(self, middleware_or_request):\n    \"\"\"\n    Decorate and register middleware to be called before a request.\n    Can either be called as *@app.middleware* or\n    *@app.middleware('request')*\n\n    :param: middleware_or_request: Optional parameter to use for\n        identifying which type of middleware is being registered.\n    \"\"\"\n    if callable(middleware_or_request):\n        return self.register_middleware(middleware_or_request)\n    else:\n        return partial(self.register_middleware, attach_to=middleware_or_request)",
                            "def static(self, uri, file_or_directory, pattern='/?.+', use_modified_since=True, use_content_range=False, stream_large_files=False, name='static', host=None, strict_slashes=None, content_type=None):\n    \"\"\"\n    Register a root to serve files from. The input can either be a\n    file or a directory. This method will enable an easy and simple way\n    to setup the :class:`Route` necessary to serve the static files.\n\n    :param uri: URL path to be used for serving static content\n    :param file_or_directory: Path for the Static file/directory with\n        static files\n    :param pattern: Regex Pattern identifying the valid static files\n    :param use_modified_since: If true, send file modified time, and return\n        not modified if the browser's matches the server's\n    :param use_content_range: If true, process header for range requests\n        and sends the file part that is requested\n    :param stream_large_files: If true, use the\n        :func:`StreamingHTTPResponse.file_stream` handler rather\n        than the :func:`HTTPResponse.file` handler to send the file.\n        If this is an integer, this represents the threshold size to\n        switch to :func:`StreamingHTTPResponse.file_stream`\n    :param name: user defined name used for url_for\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param content_type: user defined content type for header\n    :return: None\n    \"\"\"\n    static_register(self, uri, file_or_directory, pattern, use_modified_since, use_content_range, stream_large_files, name, host, strict_slashes, content_type)",
                            "def blueprint(self, blueprint, **options):\n    \"\"\"Register a blueprint on the application.\n\n    :param blueprint: Blueprint object or (list, tuple) thereof\n    :param options: option dictionary with blueprint defaults\n    :return: Nothing\n    \"\"\"\n    if isinstance(blueprint, (list, tuple, BlueprintGroup)):\n        for item in blueprint:\n            self.blueprint(item, **options)\n        return\n    if blueprint.name in self.blueprints:\n        assert self.blueprints[blueprint.name] is blueprint, 'A blueprint with the name \"%s\" is already registered.  Blueprint names must be unique.' % (blueprint.name,)\n    else:\n        self.blueprints[blueprint.name] = blueprint\n        self._blueprint_order.append(blueprint)\n    blueprint.register(self, options)",
                            "def register_blueprint(self, *args, **kwargs):\n    \"\"\"\n    Proxy method provided for invoking the :func:`blueprint` method\n\n    .. note::\n        To be deprecated in 1.0. Use :func:`blueprint` instead.\n\n    :param args: Blueprint object or (list, tuple) thereof\n    :param kwargs: option dictionary with blueprint defaults\n    :return: None\n    \"\"\"\n    if self.debug:\n        warnings.simplefilter('default')\n    warnings.warn('Use of register_blueprint will be deprecated in version 1.0.  Please use the blueprint method instead', DeprecationWarning)\n    return self.blueprint(*args, **kwargs)",
                            "def url_for(self, view_name: str, **kwargs):\n    \"\"\"Build a URL based on a view name and the values provided.\n\n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n\n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n\n    :param view_name: string referencing the view name\n    :param \\\\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n\n    :return: the built URL\n\n    Raises:\n        URLBuildError\n    \"\"\"\n    kw: Dict[str, str] = {}\n    if view_name == 'static':\n        kw.update(name=kwargs.pop('name', 'static'))\n    elif view_name.endswith('.static'):\n        kwargs.pop('name', None)\n        kw.update(name=view_name)\n    (uri, route) = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError('Endpoint with name `{}` was not found'.format(view_name))\n    if view_name == 'static' or view_name.endswith('.static'):\n        filename = kwargs.pop('filename', None)\n        if '<file_uri:' in uri:\n            folder_ = uri.split('<file_uri:', 1)[0]\n            if folder_.endswith('/'):\n                folder_ = folder_[:-1]\n            if filename.startswith('/'):\n                filename = filename[1:]\n            uri = '{}/{}'.format(folder_, filename)\n    if uri != '/' and uri.endswith('/'):\n        uri = uri[:-1]\n    out = uri\n    matched_params = re.findall(self.router.parameter_pattern, uri)\n    kwargs.pop('_method', None)\n    anchor = kwargs.pop('_anchor', '')\n    external = kwargs.pop('_external', False)\n    scheme = kwargs.pop('_scheme', '')\n    if scheme and (not external):\n        raise ValueError('When specifying _scheme, _external must be True')\n    netloc = kwargs.pop('_server', None)\n    if netloc is None and external:\n        netloc = self.config.get('SERVER_NAME', '')\n    if external:\n        if not scheme:\n            if ':' in netloc[:8]:\n                scheme = netloc[:8].split(':', 1)[0]\n            else:\n                scheme = 'http'\n        if '://' in netloc[:8]:\n            netloc = netloc.split('://', 1)[-1]\n    for match in matched_params:\n        (name, _type, pattern) = self.router.parse_parameter_string(match)\n        specific_pattern = '^{}$'.format(pattern)\n        supplied_param = None\n        if name in kwargs:\n            supplied_param = kwargs.get(name)\n            del kwargs[name]\n        else:\n            raise URLBuildError('Required parameter `{}` was not passed to url_for'.format(name))\n        supplied_param = str(supplied_param)\n        passes_pattern = re.match(specific_pattern, supplied_param)\n        if not passes_pattern:\n            if _type != str:\n                msg = 'Value \"{}\" for parameter `{}` does not match pattern for type `{}`: {}'.format(supplied_param, name, _type.__name__, pattern)\n            else:\n                msg = 'Value \"{}\" for parameter `{}` does not satisfy pattern {}'.format(supplied_param, name, pattern)\n            raise URLBuildError(msg)\n        replacement_regex = '(<{}.*?>)'.format(name)\n        out = re.sub(replacement_regex, supplied_param, out)\n    query_string = urlencode(kwargs, doseq=True) if kwargs else ''\n    out = urlunparse((scheme, netloc, out, '', query_string, anchor))\n    return out",
                            "def converted_response_type(self, response):\n    \"\"\"\n    No implementation provided.\n    \"\"\"\n    pass",
                            "async def handle_request(self, request, write_callback, stream_callback):\n    \"\"\"Take a request from the HTTP Server and return a response object\n    to be sent back The HTTP Server only expects a response object, so\n    exception handling must be done here\n\n    :param request: HTTP Request object\n    :param write_callback: Synchronous response function to be\n        called with the response as the only argument\n    :param stream_callback: Coroutine that handles streaming a\n        StreamingHTTPResponse if produced by the handler.\n\n    :return: Nothing\n    \"\"\"\n    response = None\n    cancelled = False\n    name = None\n    try:\n        (handler, args, kwargs, uri, name) = self.router.get(request)\n        response = await self._run_request_middleware(request, request_name=name)\n        if not response:\n            request.uri_template = uri\n            if handler is None:\n                raise ServerError(\"'None' was returned while requesting a handler from the router\")\n            elif not getattr(handler, '__blueprintname__', False):\n                request.endpoint = self._build_endpoint_name(handler.__name__)\n            else:\n                request.endpoint = self._build_endpoint_name(getattr(handler, '__blueprintname__', ''), handler.__name__)\n            response = handler(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n    except CancelledError:\n        response = None\n        cancelled = True\n    except Exception as e:\n        try:\n            response = self.error_handler.response(request, e)\n            if isawaitable(response):\n                response = await response\n        except Exception as e:\n            if isinstance(e, SanicException):\n                response = self.error_handler.default(request=request, exception=e)\n            elif self.debug:\n                response = HTTPResponse('Error while handling error: {}\\nStack: {}'.format(e, format_exc()), status=500)\n            else:\n                response = HTTPResponse('An error occurred while handling an error', status=500)\n    finally:\n        if response is not None:\n            try:\n                response = await self._run_response_middleware(request, response, request_name=name)\n            except CancelledError:\n                response = None\n                cancelled = True\n            except BaseException:\n                error_logger.exception('Exception occurred in one of response middleware handlers')\n        if cancelled:\n            raise CancelledError()\n    if write_callback is None or isinstance(response, StreamingHTTPResponse):\n        if stream_callback:\n            await stream_callback(response)\n        else:\n            pass\n    else:\n        write_callback(response)",
                            "@property\ndef test_client(self):\n    return SanicTestClient(self)",
                            "@property\ndef asgi_client(self):\n    return SanicASGITestClient(self)",
                            "def run(self, host: Optional[str]=None, port: Optional[int]=None, debug: bool=False, ssl: Union[dict, SSLContext, None]=None, sock: Optional[socket]=None, workers: int=1, protocol: Type[Protocol]=None, backlog: int=100, stop_event: Any=None, register_sys_signals: bool=True, access_log: Optional[bool]=None, **kwargs: Any) -> None:\n    \"\"\"Run the HTTP Server and listen until keyboard interrupt or term\n    signal. On termination, drain connections before closing.\n\n    :param host: Address to host on\n    :type host: str\n    :param port: Port to host on\n    :type port: int\n    :param debug: Enables debug output (slows server)\n    :type debug: bool\n    :param ssl: SSLContext, or location of certificate and key\n                for SSL encryption of worker(s)\n    :type ssl: SSLContext or dict\n    :param sock: Socket for the server to accept connections from\n    :type sock: socket\n    :param workers: Number of processes received before it is respected\n    :type workers: int\n    :param protocol: Subclass of asyncio Protocol class\n    :type protocol: type[Protocol]\n    :param backlog: a number of unaccepted connections that the system\n                    will allow before refusing new connections\n    :type backlog: int\n    :param stop_event: event to be triggered\n                       before stopping the app - deprecated\n    :type stop_event: None\n    :param register_sys_signals: Register SIG* events\n    :type register_sys_signals: bool\n    :param access_log: Enables writing access logs (slows server)\n    :type access_log: bool\n    :return: Nothing\n    \"\"\"\n    if 'loop' in kwargs:\n        raise TypeError('loop is not a valid argument. To use an existing loop, change to create_server().\\nSee more: https://sanic.readthedocs.io/en/latest/sanic/deploying.html#asynchronous-support')\n    auto_reload = False\n    if debug and os.name == 'posix':\n        auto_reload = True\n    auto_reload = kwargs.get('auto_reload', auto_reload)\n    if sock is None:\n        (host, port) = (host or '127.0.0.1', port or 8000)\n    if protocol is None:\n        protocol = WebSocketProtocol if self.websocket_enabled else HttpProtocol\n    if stop_event is not None:\n        if debug:\n            warnings.simplefilter('default')\n        warnings.warn('stop_event will be removed from future versions.', DeprecationWarning)\n    if access_log is not None:\n        self.config.ACCESS_LOG = access_log\n    server_settings = self._helper(host=host, port=port, debug=debug, ssl=ssl, sock=sock, workers=workers, protocol=protocol, backlog=backlog, register_sys_signals=register_sys_signals, auto_reload=auto_reload)\n    try:\n        self.is_running = True\n        if workers == 1:\n            if auto_reload and os.name != 'posix':\n                raise NotImplementedError\n            if auto_reload and os.environ.get('SANIC_SERVER_RUNNING') != 'true':\n                reloader_helpers.watchdog(2)\n            else:\n                serve(**server_settings)\n        else:\n            serve_multiple(server_settings, workers)\n    except BaseException:\n        error_logger.exception('Experienced exception while trying to serve')\n        raise\n    finally:\n        self.is_running = False\n    logger.info('Server Stopped')",
                            "def stop(self):\n    \"\"\"This kills the Sanic\"\"\"\n    get_event_loop().stop()",
                            "async def create_server(self, host: Optional[str]=None, port: Optional[int]=None, debug: bool=False, ssl: Union[dict, SSLContext, None]=None, sock: Optional[socket]=None, protocol: Type[Protocol]=None, backlog: int=100, stop_event: Any=None, access_log: Optional[bool]=None, return_asyncio_server=False, asyncio_server_kwargs=None) -> Optional[AsyncioServer]:\n    \"\"\"\n    Asynchronous version of :func:`run`.\n\n    This method will take care of the operations necessary to invoke\n    the *before_start* events via :func:`trigger_events` method invocation\n    before starting the *sanic* app in Async mode.\n\n    .. note::\n        This does not support multiprocessing and is not the preferred\n        way to run a :class:`Sanic` application.\n\n    :param host: Address to host on\n    :type host: str\n    :param port: Port to host on\n    :type port: int\n    :param debug: Enables debug output (slows server)\n    :type debug: bool\n    :param ssl: SSLContext, or location of certificate and key\n                for SSL encryption of worker(s)\n    :type ssl: SSLContext or dict\n    :param sock: Socket for the server to accept connections from\n    :type sock: socket\n    :param protocol: Subclass of asyncio Protocol class\n    :type protocol: type[Protocol]\n    :param backlog: a number of unaccepted connections that the system\n                    will allow before refusing new connections\n    :type backlog: int\n    :param stop_event: event to be triggered\n                       before stopping the app - deprecated\n    :type stop_event: None\n    :param access_log: Enables writing access logs (slows server)\n    :type access_log: bool\n    :param return_asyncio_server: flag that defines whether there's a need\n                                  to return asyncio.Server or\n                                  start it serving right away\n    :type return_asyncio_server: bool\n    :param asyncio_server_kwargs: key-value arguments for\n                                  asyncio/uvloop create_server method\n    :type asyncio_server_kwargs: dict\n    :return: AsyncioServer if return_asyncio_server is true, else Nothing\n    \"\"\"\n    if sock is None:\n        (host, port) = (host or '127.0.0.1', port or 8000)\n    if protocol is None:\n        protocol = WebSocketProtocol if self.websocket_enabled else HttpProtocol\n    if stop_event is not None:\n        if debug:\n            warnings.simplefilter('default')\n        warnings.warn('stop_event will be removed from future versions.', DeprecationWarning)\n    if access_log is not None:\n        self.config.ACCESS_LOG = access_log\n    server_settings = self._helper(host=host, port=port, debug=debug, ssl=ssl, sock=sock, loop=get_event_loop(), protocol=protocol, backlog=backlog, run_async=return_asyncio_server)\n    await self.trigger_events(server_settings.get('before_start', []), server_settings.get('loop'))\n    return await serve(asyncio_server_kwargs=asyncio_server_kwargs, **server_settings)",
                            "async def trigger_events(self, events, loop):\n    \"\"\"Trigger events (functions or async)\n    :param events: one or more sync or async functions to execute\n    :param loop: event loop\n    \"\"\"\n    for event in events:\n        result = event(loop)\n        if isawaitable(result):\n            await result",
                            "async def _run_request_middleware(self, request, request_name=None):\n    named_middleware = self.named_request_middleware.get(request_name, deque())\n    applicable_middleware = self.request_middleware + named_middleware\n    if applicable_middleware:\n        for middleware in applicable_middleware:\n            response = middleware(request)\n            if isawaitable(response):\n                response = await response\n            if response:\n                return response\n    return None",
                            "async def _run_response_middleware(self, request, response, request_name=None):\n    named_middleware = self.named_response_middleware.get(request_name, deque())\n    applicable_middleware = self.response_middleware + named_middleware\n    if applicable_middleware:\n        for middleware in applicable_middleware:\n            _response = middleware(request, response)\n            if isawaitable(_response):\n                _response = await _response\n            if _response:\n                response = _response\n                break\n    return response",
                            "def _helper(self, host=None, port=None, debug=False, ssl=None, sock=None, workers=1, loop=None, protocol=HttpProtocol, backlog=100, stop_event=None, register_sys_signals=True, run_async=False, auto_reload=False):\n    \"\"\"Helper function used by `run` and `create_server`.\"\"\"\n    if isinstance(ssl, dict):\n        cert = ssl.get('cert') or ssl.get('certificate')\n        key = ssl.get('key') or ssl.get('keyfile')\n        if cert is None or key is None:\n            raise ValueError('SSLContext or certificate and key required.')\n        context = create_default_context(purpose=Purpose.CLIENT_AUTH)\n        context.load_cert_chain(cert, keyfile=key)\n        ssl = context\n    if stop_event is not None:\n        if debug:\n            warnings.simplefilter('default')\n        warnings.warn('stop_event will be removed from future versions.', DeprecationWarning)\n    if self.config.PROXIES_COUNT and self.config.PROXIES_COUNT < 0:\n        raise ValueError('PROXIES_COUNT cannot be negative. https://sanic.readthedocs.io/en/latest/sanic/config.html#proxy-configuration')\n    self.error_handler.debug = debug\n    self.debug = debug\n    server_settings = {'protocol': protocol, 'request_class': self.request_class, 'is_request_stream': self.is_request_stream, 'router': self.router, 'host': host, 'port': port, 'sock': sock, 'ssl': ssl, 'app': self, 'signal': Signal(), 'debug': debug, 'request_handler': self.handle_request, 'error_handler': self.error_handler, 'request_timeout': self.config.REQUEST_TIMEOUT, 'response_timeout': self.config.RESPONSE_TIMEOUT, 'keep_alive_timeout': self.config.KEEP_ALIVE_TIMEOUT, 'request_max_size': self.config.REQUEST_MAX_SIZE, 'request_buffer_queue_size': self.config.REQUEST_BUFFER_QUEUE_SIZE, 'keep_alive': self.config.KEEP_ALIVE, 'loop': loop, 'register_sys_signals': register_sys_signals, 'backlog': backlog, 'access_log': self.config.ACCESS_LOG, 'websocket_max_size': self.config.WEBSOCKET_MAX_SIZE, 'websocket_max_queue': self.config.WEBSOCKET_MAX_QUEUE, 'websocket_read_limit': self.config.WEBSOCKET_READ_LIMIT, 'websocket_write_limit': self.config.WEBSOCKET_WRITE_LIMIT, 'graceful_shutdown_timeout': self.config.GRACEFUL_SHUTDOWN_TIMEOUT}\n    for (event_name, settings_name, reverse) in (('before_server_start', 'before_start', False), ('after_server_start', 'after_start', False), ('before_server_stop', 'before_stop', True), ('after_server_stop', 'after_stop', True)):\n        listeners = self.listeners[event_name].copy()\n        if reverse:\n            listeners.reverse()\n        listeners = [partial(listener, self) for listener in listeners]\n        server_settings[settings_name] = listeners\n    if self.configure_logging and debug:\n        logger.setLevel(logging.DEBUG)\n    if self.config.LOGO and os.environ.get('SANIC_SERVER_RUNNING') != 'true':\n        logger.debug(self.config.LOGO if isinstance(self.config.LOGO, str) else BASE_LOGO)\n    if run_async:\n        server_settings['run_async'] = True\n    if host and port and (os.environ.get('SANIC_SERVER_RUNNING') != 'true'):\n        proto = 'http'\n        if ssl is not None:\n            proto = 'https'\n        logger.info(\"Goin' Fast @ {}://{}:{}\".format(proto, host, port))\n    return server_settings",
                            "def _build_endpoint_name(self, *parts):\n    parts = [self.name, *parts]\n    return '.'.join(parts)",
                            "async def __call__(self, scope, receive, send):\n    \"\"\"To be ASGI compliant, our instance must be a callable that accepts\n    three arguments: scope, receive, send. See the ASGI reference for more\n    details: https://asgi.readthedocs.io/en/latest/\"\"\"\n    self.asgi = True\n    asgi_app = await ASGIApp.create(self, scope, receive, send)\n    await asgi_app()",
                            "def decorator(listener):\n    self.listeners[event].append(listener)\n    return listener",
                            "def response(handler):\n    if isinstance(handler, tuple):\n        (routes, handler) = handler\n    else:\n        routes = []\n    args = list(signature(handler).parameters.keys())\n    if not args:\n        raise ValueError('Required parameter `request` missing in the {0}() route?'.format(handler.__name__))\n    if stream:\n        handler.is_stream = stream\n    routes.extend(self.router.add(uri=uri, methods=methods, handler=handler, host=host, strict_slashes=strict_slashes, version=version, name=name))\n    return (routes, handler)",
                            "def response(handler):\n    if isinstance(handler, tuple):\n        (routes, handler) = handler\n    else:\n        routes = []\n\n    async def websocket_handler(request, *args, **kwargs):\n        request.app = self\n        if not getattr(handler, '__blueprintname__', False):\n            request.endpoint = handler.__name__\n        else:\n            request.endpoint = getattr(handler, '__blueprintname__', '') + handler.__name__\n            pass\n        if self.asgi:\n            ws = request.transport.get_websocket_connection()\n        else:\n            try:\n                protocol = request.transport.get_protocol()\n            except AttributeError:\n                protocol = request.transport._protocol\n            protocol.app = self\n            ws = await protocol.websocket_handshake(request, subprotocols)\n        fut = ensure_future(handler(request, ws, *args, **kwargs))\n        self.websocket_tasks.add(fut)\n        try:\n            await fut\n        except (CancelledError, ConnectionClosed):\n            pass\n        finally:\n            self.websocket_tasks.remove(fut)\n        await ws.close()\n    routes.extend(self.router.add(uri=uri, handler=websocket_handler, methods=frozenset({'GET'}), host=host, strict_slashes=strict_slashes, name=name))\n    return (routes, handler)",
                            "def response(handler):\n    for exception in exceptions:\n        if isinstance(exception, (tuple, list)):\n            for e in exception:\n                self.error_handler.add(e, handler)\n        else:\n            self.error_handler.add(exception, handler)\n    return handler",
                            "async def websocket_handler(request, *args, **kwargs):\n    request.app = self\n    if not getattr(handler, '__blueprintname__', False):\n        request.endpoint = handler.__name__\n    else:\n        request.endpoint = getattr(handler, '__blueprintname__', '') + handler.__name__\n        pass\n    if self.asgi:\n        ws = request.transport.get_websocket_connection()\n    else:\n        try:\n            protocol = request.transport.get_protocol()\n        except AttributeError:\n            protocol = request.transport._protocol\n        protocol.app = self\n        ws = await protocol.websocket_handshake(request, subprotocols)\n    fut = ensure_future(handler(request, ws, *args, **kwargs))\n    self.websocket_tasks.add(fut)\n    try:\n        await fut\n    except (CancelledError, ConnectionClosed):\n        pass\n    finally:\n        self.websocket_tasks.remove(fut)\n    await ws.close()",
                            "@self.listener('before_server_stop')\ndef cancel_websocket_tasks(app, loop):\n    for task in self.websocket_tasks:\n        task.cancel()",
                            "@self.listener('before_server_start')\ndef run(app, loop):\n    if callable(task):\n        try:\n            loop.create_task(task(self))\n        except TypeError:\n            loop.create_task(task())\n    else:\n        loop.create_task(task)"
                        ],
                        "constructor_variables": [
                            "self.name = name",
                            "self.asgi = False",
                            "self.router = router or Router()",
                            "self.request_class = request_class",
                            "self.error_handler = error_handler or ErrorHandler()",
                            "self.config = Config(load_env=load_env)",
                            "self.request_middleware = deque()",
                            "self.response_middleware = deque()",
                            "self.blueprints = {}",
                            "self._blueprint_order = []",
                            "self.configure_logging = configure_logging",
                            "self.debug = None",
                            "self.sock = None",
                            "self.strict_slashes = strict_slashes",
                            "self.listeners = defaultdict(list)",
                            "self.is_running = False",
                            "self.is_request_stream = False",
                            "self.websocket_enabled = False",
                            "self.websocket_tasks = set()",
                            "self.named_request_middleware = {}",
                            "self.named_response_middleware = {}",
                            "self.go_fast = self.run"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, name=None, router=None, error_handler=None, load_env=True, request_class=None, strict_slashes=False, log_config=None, configure_logging=True)",
                            "loop(self)",
                            "add_task(self, task)",
                            "listener(self, event)",
                            "register_listener(self, listener, event)",
                            "route(self, uri, methods=frozenset({'GET'}), host=None, strict_slashes=None, stream=False, version=None, name=None)",
                            "get(self, uri, host=None, strict_slashes=None, version=None, name=None)",
                            "post(self, uri, host=None, strict_slashes=None, stream=False, version=None, name=None)",
                            "put(self, uri, host=None, strict_slashes=None, stream=False, version=None, name=None)",
                            "head(self, uri, host=None, strict_slashes=None, version=None, name=None)",
                            "options(self, uri, host=None, strict_slashes=None, version=None, name=None)",
                            "patch(self, uri, host=None, strict_slashes=None, stream=False, version=None, name=None)",
                            "delete(self, uri, host=None, strict_slashes=None, version=None, name=None)",
                            "add_route(self, handler, uri, methods=frozenset({'GET'}), host=None, strict_slashes=None, version=None, name=None, stream=False)",
                            "websocket(self, uri, host=None, strict_slashes=None, subprotocols=None, name=None)",
                            "add_websocket_route(self, handler, uri, host=None, strict_slashes=None, subprotocols=None, name=None)",
                            "enable_websocket(self, enable=True)",
                            "remove_route(self, uri, clean_cache=True, host=None)",
                            "exception(self, *exceptions)",
                            "register_middleware(self, middleware, attach_to='request')",
                            "register_named_middleware(self, middleware, route_names, attach_to='request')",
                            "middleware(self, middleware_or_request)",
                            "static(self, uri, file_or_directory, pattern='/?.+', use_modified_since=True, use_content_range=False, stream_large_files=False, name='static', host=None, strict_slashes=None, content_type=None)",
                            "blueprint(self, blueprint, **options)",
                            "register_blueprint(self, *args, **kwargs)",
                            "url_for(self, view_name: str, **kwargs)",
                            "converted_response_type(self, response)",
                            "handle_request(self, request, write_callback, stream_callback)",
                            "test_client(self)",
                            "asgi_client(self)",
                            "run(self, host: Optional[str]=None, port: Optional[int]=None, debug: bool=False, ssl: Union[dict, SSLContext, None]=None, sock: Optional[socket]=None, workers: int=1, protocol: Type[Protocol]=None, backlog: int=100, stop_event: Any=None, register_sys_signals: bool=True, access_log: Optional[bool]=None, **kwargs: Any) -> None",
                            "stop(self)",
                            "create_server(self, host: Optional[str]=None, port: Optional[int]=None, debug: bool=False, ssl: Union[dict, SSLContext, None]=None, sock: Optional[socket]=None, protocol: Type[Protocol]=None, backlog: int=100, stop_event: Any=None, access_log: Optional[bool]=None, return_asyncio_server=False, asyncio_server_kwargs=None) -> Optional[AsyncioServer]",
                            "trigger_events(self, events, loop)",
                            "_run_request_middleware(self, request, request_name=None)",
                            "_run_response_middleware(self, request, response, request_name=None)",
                            "_helper(self, host=None, port=None, debug=False, ssl=None, sock=None, workers=1, loop=None, protocol=HttpProtocol, backlog=100, stop_event=None, register_sys_signals=True, run_async=False, auto_reload=False)",
                            "_build_endpoint_name(self, *parts)",
                            "__call__(self, scope, receive, send)",
                            "decorator(listener)",
                            "response(handler)",
                            "response(handler)",
                            "response(handler)",
                            "websocket_handler(request, *args, **kwargs)",
                            "cancel_websocket_tasks(app, loop)",
                            "run(app, loop)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": [
                            "websocket_tasks",
                            "router",
                            "debug",
                            "frame_records",
                            "_blueprint_order",
                            "named_request_middleware",
                            "named_response_middleware",
                            "go_fast",
                            "name",
                            "listeners",
                            "response_middleware",
                            "asgi",
                            "request_class",
                            "config",
                            "is_running",
                            "configure_logging",
                            "strict_slashes",
                            "is_request_stream",
                            "error_handler",
                            "blueprints",
                            "sock",
                            "websocket_enabled",
                            "request_middleware"
                        ]
                    },
                    "used_imports": [
                        "import re",
                        "from typing import Any, Dict, Optional, Type, Union",
                        "from urllib.parse import urlencode, urlunparse",
                        "from sanic.exceptions import SanicException, ServerError, URLBuildError"
                    ],
                    "variable_values": [
                        [
                            {
                                "kw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "kw.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f7972340240>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f7975375a70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f797232ab80>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f797232a580>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f7972340240>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "kw.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7f7972340d80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f7972340240>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f7975375a70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": "'/'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "route": {
                                    "variable_value": "Route(handler=<function test_routes_with_host.<locals>.index at 0x7f79723440d0>, methods=frozenset({'GET'}), pattern=re.compile('^/$'), parameters=[], name='index', uri='/')",
                                    "variable_type": "Route",
                                    "variable_shape": "6"
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f797232ab80>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f797232a580>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f797535d730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f797535d730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": "'/'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "matched_params": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "external": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "netloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f7972340240>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "kw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostindex'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "kw.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f7972340340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f797238d1f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f797232ab80>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f797232a580>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f7972340340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostindex'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "kw.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7f7972340b80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f7972340340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f797238d1f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": "'example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "route": {
                                    "variable_value": "Route(handler=<function test_routes_with_host.<locals>.index at 0x7f79723440d0>, methods=frozenset({'GET'}), pattern=re.compile('^example.com/$'), parameters=[], name='hostindex', uri='example.com/')",
                                    "variable_type": "Route",
                                    "variable_shape": "6"
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f797232ab80>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f797232a580>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f797234b170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f797234b170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": "'example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "matched_params": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "external": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "netloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f7972340340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "kw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "kw.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f14580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a9655a70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.find": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f14580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "kw.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7f15a5f14440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f14580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a9655a70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": "'/'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "route": {
                                    "variable_value": "Route(handler=<function test_routes_with_host.<locals>.index at 0x7f15a5f29af0>, methods=frozenset({'GET'}), pattern=re.compile('^/$'), parameters=[], name='index', uri='/')",
                                    "variable_type": "Route",
                                    "variable_shape": "6"
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "uri.find": {
                                    "variable_value": "<built-in method find of str object at 0x7f15a93f1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f15a93f1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a93f1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": "'/'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "matched_params": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "external": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "netloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f14580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "kw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostindex'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "kw.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f14540>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f786b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.find": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f14540>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostindex'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "kw.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7f15a5f14980>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f14540>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f786b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": "'/'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "route": {
                                    "variable_value": "Route(handler=<function test_routes_with_host.<locals>.index at 0x7f15a5f29af0>, methods=frozenset({'GET'}), pattern=re.compile('^example.com/$'), parameters=[], name='hostindex', uri='example.com/')",
                                    "variable_type": "Route",
                                    "variable_shape": "6"
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "uri.find": {
                                    "variable_value": "<built-in method find of str object at 0x7f15a93f1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f15a93f1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a93f1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": "'/'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "matched_params": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "external": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "netloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f14540>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "kw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostpath'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "kw.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f14600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f784f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.find": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f14600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostpath'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "kw.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7f15a5f144c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f14600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f784f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": "'/path'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "route": {
                                    "variable_value": "Route(handler=<function test_routes_with_host.<locals>.index at 0x7f15a5f29af0>, methods=frozenset({'GET'}), pattern=re.compile('^path.example.com/path$'), parameters=[], name='hostpath', uri='path.example.com/path')",
                                    "variable_type": "Route",
                                    "variable_shape": "6"
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'path.example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "uri.find": {
                                    "variable_value": "<built-in method find of str object at 0x7f15a5f0aab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f15a5f0aab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f0aab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": "'/path'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "matched_params": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "external": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "netloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f14600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "kw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostindex'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "kw.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f14800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{'_external': True}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f786b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.find": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f14800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostindex'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "kw.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7f15a5f14840>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f14800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f786b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": "'/'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "route": {
                                    "variable_value": "Route(handler=<function test_routes_with_host.<locals>.index at 0x7f15a5f29af0>, methods=frozenset({'GET'}), pattern=re.compile('^example.com/$'), parameters=[], name='hostindex', uri='example.com/')",
                                    "variable_type": "Route",
                                    "variable_shape": "6"
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "uri.find": {
                                    "variable_value": "<built-in method find of str object at 0x7f15a93f1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f15a93f1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a93f1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": "'http://example.com/'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "matched_params": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "external": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "netloc": {
                                    "variable_value": "'example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f15a5f215b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f14800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "kw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostpath'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "kw.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f140c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{'_external': True}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f784f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.find": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "matched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f140c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'hostpath'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "kw.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7f15a5f14640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f15a5f140c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "view_name.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f784f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "uri": {
                                    "variable_value": "'/path'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "route": {
                                    "variable_value": "Route(handler=<function test_routes_with_host.<locals>.index at 0x7f15a5f29af0>, methods=frozenset({'GET'}), pattern=re.compile('^path.example.com/path$'), parameters=[], name='hostpath', uri='path.example.com/path')",
                                    "variable_type": "Route",
                                    "variable_shape": "6"
                                },
                                "self.router.find_route_by_view_name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.router": {
                                    "variable_value": "<sanic.router.Router object at 0x7f15a5f20e50>",
                                    "variable_type": "Router",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<sanic.app.Sanic object at 0x7f15a5f200a0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "URLBuildError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "'path.example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "uri.find": {
                                    "variable_value": "<built-in method find of str object at 0x7f15a5f2e070>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "folder_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f15a5f2e070>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "folder_.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uri.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x7f15a5f2e070>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": "'http://path.example.com/path'",
                                    "variable_type": "str",
                                    "variable_shape": "28"
                                },
                                "matched_params": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "re.findall": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parameter_pattern": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "anchor": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "external": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "netloc": {
                                    "variable_value": "'path.example.com'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "self.config.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.config": {
                                    "variable_value": "{'REQUEST_MAX_SIZE': 100000000, 'REQUEST_BUFFER_QUEUE_SIZE': 100, 'REQUEST_TIMEOUT': 60, 'RESPONSE_TIMEOUT': 60, 'KEEP_ALIVE': True, 'KEEP_ALIVE_TIMEOUT': 5, 'WEBSOCKET_MAX_SIZE': 1048576, 'WEBSOCKET_MAX_QUEUE': 32, 'WEBSOCKET_READ_LIMIT': 65536, 'WEBSOCKET_WRITE_LIMIT': 65536, 'GRACEFUL_SHUTDOWN_TIMEOUT': 15.0, 'ACCESS_LOG': True, 'FORWARDED_SECRET': None, 'REAL_IP_HEADER': None, 'PROXIES_COUNT': None, 'FORWARDED_FOR_HEADER': 'X-Forwarded-For', 'LOGO': '\\n\\n                 Sanic\\n         Build Fast. Run Fast.\\n\\n'}",
                                    "variable_type": "Config",
                                    "variable_shape": "17"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f15a5ec73f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.router.parse_parameter_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "specific_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "supplied_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f15a5f140c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "passes_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_type.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replacement_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "query_string": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(\n    self,\n    name=None,\n    router=None,\n    error_handler=None,\n    load_env=True,\n    request_class=None,\n    strict_slashes=False,\n    log_config=None,\n    configure_logging=True,\n):\n\n    # Get name from previous stack frame\n    if name is None:\n        warnings.warn(\n            \"Sanic(name=None) is deprecated and None value support \"\n            \"for `name` will be removed in the next release. \"\n            \"Please use Sanic(name='your_application_name') instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        frame_records = stack()[1]\n        name = getmodulename(frame_records[1])\n\n    # logging\n    if configure_logging:\n        logging.config.dictConfig(log_config or LOGGING_CONFIG_DEFAULTS)\n\n    self.name = name\n    self.asgi = False\n    self.router = router or Router()\n    self.request_class = request_class\n    self.error_handler = error_handler or ErrorHandler()\n    self.config = Config(load_env=load_env)\n    self.request_middleware = deque()\n    self.response_middleware = deque()\n    self.blueprints = {}\n    self._blueprint_order = []\n    self.configure_logging = configure_logging\n    self.debug = None\n    self.sock = None\n    self.strict_slashes = strict_slashes\n    self.listeners = defaultdict(list)\n    self.is_running = False\n    self.is_request_stream = False\n    self.websocket_enabled = False\n    self.websocket_tasks = set()\n    self.named_request_middleware = {}\n    self.named_response_middleware = {}\n    # Register alternative method names\n    self.go_fast = self.run",
                "@property\ndef loop(self):\n    \"\"\"Synonymous with asyncio.get_event_loop().\n\n    Only supported when using the `app.run` method.\n    \"\"\"\n    if not self.is_running and self.asgi is False:\n        raise SanicException(\n            \"Loop can only be retrieved after the app has started \"\n            \"running. Not supported with `create_server` function\"\n        )\n    return get_event_loop()",
                "def add_task(self, task):\n    \"\"\"Schedule a task to run later, after the loop has started.\n    Different from asyncio.ensure_future in that it does not\n    also return a future, and the actual ensure_future call\n    is delayed until before server start.\n\n    :param task: future, couroutine or awaitable\n    \"\"\"\n    try:\n        if callable(task):\n            try:\n                self.loop.create_task(task(self))\n            except TypeError:\n                self.loop.create_task(task())\n        else:\n            self.loop.create_task(task)\n    except SanicException:\n\n        @self.listener(\"before_server_start\")\n        def run(app, loop):\n            if callable(task):\n                try:\n                    loop.create_task(task(self))\n                except TypeError:\n                    loop.create_task(task())\n            else:\n                loop.create_task(task)",
                "def listener(self, event):\n    \"\"\"Create a listener from a decorated function.\n\n    :param event: event to listen to\n    \"\"\"\n\n    def decorator(listener):\n        self.listeners[event].append(listener)\n        return listener\n\n    return decorator",
                "def register_listener(self, listener, event):\n    \"\"\"\n    Register the listener for a given event.\n\n    :param listener: callable i.e. setup_db(app, loop)\n    :param event: when to register listener i.e. 'before_server_start'\n    :return: listener\n    \"\"\"\n\n    return self.listener(event)(listener)",
                "def route(\n    self,\n    uri,\n    methods=frozenset({\"GET\"}),\n    host=None,\n    strict_slashes=None,\n    stream=False,\n    version=None,\n    name=None,\n):\n    \"\"\"Decorate a function to be registered as a route\n\n    :param uri: path of the URL\n    :param methods: list or tuple of methods allowed\n    :param host:\n    :param strict_slashes:\n    :param stream:\n    :param version:\n    :param name: user defined route name for url_for\n    :return: tuple of routes, decorated function\n    \"\"\"\n\n    # Fix case where the user did not prefix the URL with a /\n    # and will probably get confused as to why it's not working\n    if not uri.startswith(\"/\"):\n        uri = \"/\" + uri\n\n    if stream:\n        self.is_request_stream = True\n\n    if strict_slashes is None:\n        strict_slashes = self.strict_slashes\n\n    def response(handler):\n        if isinstance(handler, tuple):\n            # if a handler fn is already wrapped in a route, the handler\n            # variable will be a tuple of (existing routes, handler fn)\n            routes, handler = handler\n        else:\n            routes = []\n        args = list(signature(handler).parameters.keys())\n\n        if not args:\n            raise ValueError(\n                \"Required parameter `request` missing \"\n                \"in the {0}() route?\".format(handler.__name__)\n            )\n\n        if stream:\n            handler.is_stream = stream\n\n        routes.extend(\n            self.router.add(\n                uri=uri,\n                methods=methods,\n                handler=handler,\n                host=host,\n                strict_slashes=strict_slashes,\n                version=version,\n                name=name,\n            )\n        )\n        return routes, handler\n\n    return response",
                "def get(\n    self, uri, host=None, strict_slashes=None, version=None, name=None\n):\n    \"\"\"\n    Add an API URL under the **GET** *HTTP* method\n\n    :param uri: URL to be tagged to **GET** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(\n        uri,\n        methods=frozenset({\"GET\"}),\n        host=host,\n        strict_slashes=strict_slashes,\n        version=version,\n        name=name,\n    )",
                "def post(\n    self,\n    uri,\n    host=None,\n    strict_slashes=None,\n    stream=False,\n    version=None,\n    name=None,\n):\n    \"\"\"\n    Add an API URL under the **POST** *HTTP* method\n\n    :param uri: URL to be tagged to **POST** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(\n        uri,\n        methods=frozenset({\"POST\"}),\n        host=host,\n        strict_slashes=strict_slashes,\n        stream=stream,\n        version=version,\n        name=name,\n    )",
                "def put(\n    self,\n    uri,\n    host=None,\n    strict_slashes=None,\n    stream=False,\n    version=None,\n    name=None,\n):\n    \"\"\"\n    Add an API URL under the **PUT** *HTTP* method\n\n    :param uri: URL to be tagged to **PUT** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(\n        uri,\n        methods=frozenset({\"PUT\"}),\n        host=host,\n        strict_slashes=strict_slashes,\n        stream=stream,\n        version=version,\n        name=name,\n    )",
                "def head(\n    self, uri, host=None, strict_slashes=None, version=None, name=None\n):\n    return self.route(\n        uri,\n        methods=frozenset({\"HEAD\"}),\n        host=host,\n        strict_slashes=strict_slashes,\n        version=version,\n        name=name,\n    )",
                "def options(\n    self, uri, host=None, strict_slashes=None, version=None, name=None\n):\n    \"\"\"\n    Add an API URL under the **OPTIONS** *HTTP* method\n\n    :param uri: URL to be tagged to **OPTIONS** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(\n        uri,\n        methods=frozenset({\"OPTIONS\"}),\n        host=host,\n        strict_slashes=strict_slashes,\n        version=version,\n        name=name,\n    )",
                "def patch(\n    self,\n    uri,\n    host=None,\n    strict_slashes=None,\n    stream=False,\n    version=None,\n    name=None,\n):\n    \"\"\"\n    Add an API URL under the **PATCH** *HTTP* method\n\n    :param uri: URL to be tagged to **PATCH** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(\n        uri,\n        methods=frozenset({\"PATCH\"}),\n        host=host,\n        strict_slashes=strict_slashes,\n        stream=stream,\n        version=version,\n        name=name,\n    )",
                "def delete(\n    self, uri, host=None, strict_slashes=None, version=None, name=None\n):\n    \"\"\"\n    Add an API URL under the **DELETE** *HTTP* method\n\n    :param uri: URL to be tagged to **DELETE** method of *HTTP*\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param version: API Version\n    :param name: Unique name that can be used to identify the Route\n    :return: Object decorated with :func:`route` method\n    \"\"\"\n    return self.route(\n        uri,\n        methods=frozenset({\"DELETE\"}),\n        host=host,\n        strict_slashes=strict_slashes,\n        version=version,\n        name=name,\n    )",
                "def add_route(\n    self,\n    handler,\n    uri,\n    methods=frozenset({\"GET\"}),\n    host=None,\n    strict_slashes=None,\n    version=None,\n    name=None,\n    stream=False,\n):\n    \"\"\"A helper method to register class instance or\n    functions as a handler to the application url\n    routes.\n\n    :param handler: function or class instance\n    :param uri: path of the URL\n    :param methods: list or tuple of methods allowed, these are overridden\n                    if using a HTTPMethodView\n    :param host:\n    :param strict_slashes:\n    :param version:\n    :param name: user defined route name for url_for\n    :param stream: boolean specifying if the handler is a stream handler\n    :return: function or class instance\n    \"\"\"\n    # Handle HTTPMethodView differently\n    if hasattr(handler, \"view_class\"):\n        methods = set()\n\n        for method in HTTP_METHODS:\n            _handler = getattr(handler.view_class, method.lower(), None)\n            if _handler:\n                methods.add(method)\n                if hasattr(_handler, \"is_stream\"):\n                    stream = True\n\n    # handle composition view differently\n    if isinstance(handler, CompositionView):\n        methods = handler.handlers.keys()\n        for _handler in handler.handlers.values():\n            if hasattr(_handler, \"is_stream\"):\n                stream = True\n                break\n\n    if strict_slashes is None:\n        strict_slashes = self.strict_slashes\n\n    self.route(\n        uri=uri,\n        methods=methods,\n        host=host,\n        strict_slashes=strict_slashes,\n        stream=stream,\n        version=version,\n        name=name,\n    )(handler)\n    return handler",
                "def websocket(\n    self, uri, host=None, strict_slashes=None, subprotocols=None, name=None\n):\n    \"\"\"\n    Decorate a function to be registered as a websocket route\n\n    :param uri: path of the URL\n    :param host: Host IP or FQDN details\n    :param strict_slashes: If the API endpoint needs to terminate\n                           with a \"/\" or not\n    :param subprotocols: optional list of str with supported subprotocols\n    :param name: A unique name assigned to the URL so that it can\n                 be used with :func:`url_for`\n    :return: tuple of routes, decorated function\n    \"\"\"\n    self.enable_websocket()\n\n    # Fix case where the user did not prefix the URL with a /\n    # and will probably get confused as to why it's not working\n    if not uri.startswith(\"/\"):\n        uri = \"/\" + uri\n\n    if strict_slashes is None:\n        strict_slashes = self.strict_slashes\n\n    def response(handler):\n        if isinstance(handler, tuple):\n            # if a handler fn is already wrapped in a route, the handler\n            # variable will be a tuple of (existing routes, handler fn)\n            routes, handler = handler\n        else:\n            routes = []\n\n        async def websocket_handler(request, *args, **kwargs):\n            request.app = self\n            if not getattr(handler, \"__blueprintname__\", False):\n                request.endpoint = handler.__name__\n            else:\n                request.endpoint = (\n                    getattr(handler, \"__blueprintname__\", \"\")\n                    + handler.__name__\n                )\n\n                pass\n\n            if self.asgi:\n                ws = request.transport.get_websocket_connection()\n            else:\n                try:\n                    protocol = request.transport.get_protocol()\n                except AttributeError:\n                    # On Python3.5 the Transport classes in asyncio do not\n                    # have a get_protocol() method as in uvloop\n                    protocol = request.transport._protocol\n                protocol.app = self\n\n                ws = await protocol.websocket_handshake(\n                    request, subprotocols\n                )\n\n            # schedule the application handler\n            # its future is kept in self.websocket_tasks in case it\n            # needs to be cancelled due to the server being stopped\n            fut = ensure_future(handler(request, ws, *args, **kwargs))\n            self.websocket_tasks.add(fut)\n            try:\n                await fut\n            except (CancelledError, ConnectionClosed):\n                pass\n            finally:\n                self.websocket_tasks.remove(fut)\n            await ws.close()\n\n        routes.extend(\n            self.router.add(\n                uri=uri,\n                handler=websocket_handler,\n                methods=frozenset({\"GET\"}),\n                host=host,\n                strict_slashes=strict_slashes,\n                name=name,\n            )\n        )\n        return routes, handler\n\n    return response",
                "def add_websocket_route(\n    self,\n    handler,\n    uri,\n    host=None,\n    strict_slashes=None,\n    subprotocols=None,\n    name=None,\n):\n    \"\"\"\n    A helper method to register a function as a websocket route.\n\n    :param handler: a callable function or instance of a class\n                    that can handle the websocket request\n    :param host: Host IP or FQDN details\n    :param uri: URL path that will be mapped to the websocket\n                handler\n                handler\n    :param strict_slashes: If the API endpoint needs to terminate\n            with a \"/\" or not\n    :param subprotocols: Subprotocols to be used with websocket\n            handshake\n    :param name: A unique name assigned to the URL so that it can\n            be used with :func:`url_for`\n    :return: Objected decorated by :func:`websocket`\n    \"\"\"\n    if strict_slashes is None:\n        strict_slashes = self.strict_slashes\n\n    return self.websocket(\n        uri,\n        host=host,\n        strict_slashes=strict_slashes,\n        subprotocols=subprotocols,\n        name=name,\n    )(handler)",
                "def enable_websocket(self, enable=True):\n    \"\"\"Enable or disable the support for websocket.\n\n    Websocket is enabled automatically if websocket routes are\n    added to the application.\n    \"\"\"\n    if not self.websocket_enabled:\n        # if the server is stopped, we want to cancel any ongoing\n        # websocket tasks, to allow the server to exit promptly\n        @self.listener(\"before_server_stop\")\n        def cancel_websocket_tasks(app, loop):\n            for task in self.websocket_tasks:\n                task.cancel()\n\n    self.websocket_enabled = enable",
                "def remove_route(self, uri, clean_cache=True, host=None):\n    \"\"\"\n    This method provides the app user a mechanism by which an already\n    existing route can be removed from the :class:`Sanic` object\n\n    .. warning::\n        remove_route is deprecated in v19.06 and will be removed\n        from future versions.\n\n    :param uri: URL Path to be removed from the app\n    :param clean_cache: Instruct sanic if it needs to clean up the LRU\n        route cache\n    :param host: IP address or FQDN specific to the host\n    :return: None\n    \"\"\"\n    warnings.warn(\n        \"remove_route is deprecated and will be removed \"\n        \"from future versions.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    self.router.remove(uri, clean_cache, host)",
                "def exception(self, *exceptions):\n    \"\"\"Decorate a function to be registered as a handler for exceptions\n\n    :param exceptions: exceptions\n    :return: decorated function\n    \"\"\"\n\n    def response(handler):\n        for exception in exceptions:\n            if isinstance(exception, (tuple, list)):\n                for e in exception:\n                    self.error_handler.add(e, handler)\n            else:\n                self.error_handler.add(exception, handler)\n        return handler\n\n    return response",
                "def register_middleware(self, middleware, attach_to=\"request\"):\n    \"\"\"\n    Register an application level middleware that will be attached\n    to all the API URLs registered under this application.\n\n    This method is internally invoked by the :func:`middleware`\n    decorator provided at the app level.\n\n    :param middleware: Callback method to be attached to the\n        middleware\n    :param attach_to: The state at which the middleware needs to be\n        invoked in the lifecycle of an *HTTP Request*.\n        **request** - Invoke before the request is processed\n        **response** - Invoke before the response is returned back\n    :return: decorated method\n    \"\"\"\n    if attach_to == \"request\":\n        if middleware not in self.request_middleware:\n            self.request_middleware.append(middleware)\n    if attach_to == \"response\":\n        if middleware not in self.response_middleware:\n            self.response_middleware.appendleft(middleware)\n    return middleware",
                "def register_named_middleware(\n    self, middleware, route_names, attach_to=\"request\"\n):\n    if attach_to == \"request\":\n        for _rn in route_names:\n            if _rn not in self.named_request_middleware:\n                self.named_request_middleware[_rn] = deque()\n            if middleware not in self.named_request_middleware[_rn]:\n                self.named_request_middleware[_rn].append(middleware)\n    if attach_to == \"response\":\n        for _rn in route_names:\n            if _rn not in self.named_response_middleware:\n                self.named_response_middleware[_rn] = deque()\n            if middleware not in self.named_response_middleware[_rn]:\n                self.named_response_middleware[_rn].append(middleware)",
                "def middleware(self, middleware_or_request):\n    \"\"\"\n    Decorate and register middleware to be called before a request.\n    Can either be called as *@app.middleware* or\n    *@app.middleware('request')*\n\n    :param: middleware_or_request: Optional parameter to use for\n        identifying which type of middleware is being registered.\n    \"\"\"\n    # Detect which way this was called, @middleware or @middleware('AT')\n    if callable(middleware_or_request):\n        return self.register_middleware(middleware_or_request)\n\n    else:\n        return partial(\n            self.register_middleware, attach_to=middleware_or_request\n        )",
                "def static(\n    self,\n    uri,\n    file_or_directory,\n    pattern=r\"/?.+\",\n    use_modified_since=True,\n    use_content_range=False,\n    stream_large_files=False,\n    name=\"static\",\n    host=None,\n    strict_slashes=None,\n    content_type=None,\n):\n    \"\"\"\n    Register a root to serve files from. The input can either be a\n    file or a directory. This method will enable an easy and simple way\n    to setup the :class:`Route` necessary to serve the static files.\n\n    :param uri: URL path to be used for serving static content\n    :param file_or_directory: Path for the Static file/directory with\n        static files\n    :param pattern: Regex Pattern identifying the valid static files\n    :param use_modified_since: If true, send file modified time, and return\n        not modified if the browser's matches the server's\n    :param use_content_range: If true, process header for range requests\n        and sends the file part that is requested\n    :param stream_large_files: If true, use the\n        :func:`StreamingHTTPResponse.file_stream` handler rather\n        than the :func:`HTTPResponse.file` handler to send the file.\n        If this is an integer, this represents the threshold size to\n        switch to :func:`StreamingHTTPResponse.file_stream`\n    :param name: user defined name used for url_for\n    :param host: Host IP or FQDN for the service to use\n    :param strict_slashes: Instruct :class:`Sanic` to check if the request\n        URLs need to terminate with a */*\n    :param content_type: user defined content type for header\n    :return: None\n    \"\"\"\n    static_register(\n        self,\n        uri,\n        file_or_directory,\n        pattern,\n        use_modified_since,\n        use_content_range,\n        stream_large_files,\n        name,\n        host,\n        strict_slashes,\n        content_type,\n    )",
                "def blueprint(self, blueprint, **options):\n    \"\"\"Register a blueprint on the application.\n\n    :param blueprint: Blueprint object or (list, tuple) thereof\n    :param options: option dictionary with blueprint defaults\n    :return: Nothing\n    \"\"\"\n    if isinstance(blueprint, (list, tuple, BlueprintGroup)):\n        for item in blueprint:\n            self.blueprint(item, **options)\n        return\n    if blueprint.name in self.blueprints:\n        assert self.blueprints[blueprint.name] is blueprint, (\n            'A blueprint with the name \"%s\" is already registered.  '\n            \"Blueprint names must be unique.\" % (blueprint.name,)\n        )\n    else:\n        self.blueprints[blueprint.name] = blueprint\n        self._blueprint_order.append(blueprint)\n    blueprint.register(self, options)",
                "def register_blueprint(self, *args, **kwargs):\n    \"\"\"\n    Proxy method provided for invoking the :func:`blueprint` method\n\n    .. note::\n        To be deprecated in 1.0. Use :func:`blueprint` instead.\n\n    :param args: Blueprint object or (list, tuple) thereof\n    :param kwargs: option dictionary with blueprint defaults\n    :return: None\n    \"\"\"\n\n    if self.debug:\n        warnings.simplefilter(\"default\")\n    warnings.warn(\n        \"Use of register_blueprint will be deprecated in \"\n        \"version 1.0.  Please use the blueprint method\"\n        \" instead\",\n        DeprecationWarning,\n    )\n    return self.blueprint(*args, **kwargs)",
                "def url_for(self, view_name: str, **kwargs):\n    r\"\"\"Build a URL based on a view name and the values provided.\n\n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n\n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n\n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n\n    :return: the built URL\n\n    Raises:\n        URLBuildError\n    \"\"\"\n    # find the route by the supplied view name\n    kw: Dict[str, str] = {}\n    # special static files url_for\n    if view_name == \"static\":\n        kw.update(name=kwargs.pop(\"name\", \"static\"))\n    elif view_name.endswith(\".static\"):  # blueprint.static\n        kwargs.pop(\"name\", None)\n        kw.update(name=view_name)\n\n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n\n    if view_name == \"static\" or view_name.endswith(\".static\"):\n        filename = kwargs.pop(\"filename\", None)\n        # it's static folder\n        if \"<file_uri:\" in uri:\n            folder_ = uri.split(\"<file_uri:\", 1)[0]\n            if folder_.endswith(\"/\"):\n                folder_ = folder_[:-1]\n\n            if filename.startswith(\"/\"):\n                filename = filename[1:]\n\n            uri = \"{}/{}\".format(folder_, filename)\n\n    if uri != \"/\" and uri.endswith(\"/\"):\n        uri = uri[:-1]\n\n    out = uri\n\n    # find all the parameters we will need to build in the URL\n    matched_params = re.findall(self.router.parameter_pattern, uri)\n\n    # _method is only a placeholder now, don't know how to support it\n    kwargs.pop(\"_method\", None)\n    anchor = kwargs.pop(\"_anchor\", \"\")\n    # _external need SERVER_NAME in config or pass _server arg\n    external = kwargs.pop(\"_external\", False)\n    scheme = kwargs.pop(\"_scheme\", \"\")\n    if scheme and not external:\n        raise ValueError(\"When specifying _scheme, _external must be True\")\n\n    netloc = kwargs.pop(\"_server\", None)\n    if netloc is None and external:\n        netloc = self.config.get(\"SERVER_NAME\", \"\")\n\n    if external:\n        if not scheme:\n            if \":\" in netloc[:8]:\n                scheme = netloc[:8].split(\":\", 1)[0]\n            else:\n                scheme = \"http\"\n\n        if \"://\" in netloc[:8]:\n            netloc = netloc.split(\"://\", 1)[-1]\n\n    for match in matched_params:\n        name, _type, pattern = self.router.parse_parameter_string(match)\n        # we only want to match against each individual parameter\n        specific_pattern = \"^{}$\".format(pattern)\n        supplied_param = None\n\n        if name in kwargs:\n            supplied_param = kwargs.get(name)\n            del kwargs[name]\n        else:\n            raise URLBuildError(\n                \"Required parameter `{}` was not passed to url_for\".format(\n                    name\n                )\n            )\n\n        supplied_param = str(supplied_param)\n        # determine if the parameter supplied by the caller passes the test\n        # in the URL\n        passes_pattern = re.match(specific_pattern, supplied_param)\n\n        if not passes_pattern:\n            if _type != str:\n                msg = (\n                    'Value \"{}\" for parameter `{}` does not '\n                    \"match pattern for type `{}`: {}\".format(\n                        supplied_param, name, _type.__name__, pattern\n                    )\n                )\n            else:\n                msg = (\n                    'Value \"{}\" for parameter `{}` '\n                    \"does not satisfy pattern {}\".format(\n                        supplied_param, name, pattern\n                    )\n                )\n            raise URLBuildError(msg)\n\n        # replace the parameter in the URL with the supplied value\n        replacement_regex = \"(<{}.*?>)\".format(name)\n\n        out = re.sub(replacement_regex, supplied_param, out)\n\n    # parse the remainder of the keyword arguments into a querystring\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    # scheme://netloc/path;parameters?query#fragment\n    out = urlunparse((scheme, netloc, out, \"\", query_string, anchor))\n\n    return out",
                "def converted_response_type(self, response):\n    \"\"\"\n    No implementation provided.\n    \"\"\"\n    pass",
                "async def handle_request(self, request, write_callback, stream_callback):\n    \"\"\"Take a request from the HTTP Server and return a response object\n    to be sent back The HTTP Server only expects a response object, so\n    exception handling must be done here\n\n    :param request: HTTP Request object\n    :param write_callback: Synchronous response function to be\n        called with the response as the only argument\n    :param stream_callback: Coroutine that handles streaming a\n        StreamingHTTPResponse if produced by the handler.\n\n    :return: Nothing\n    \"\"\"\n    # Define `response` var here to remove warnings about\n    # allocation before assignment below.\n    response = None\n    cancelled = False\n    name = None\n    try:\n        # Fetch handler from router\n        handler, args, kwargs, uri, name = self.router.get(request)\n\n        # -------------------------------------------- #\n        # Request Middleware\n        # -------------------------------------------- #\n        response = await self._run_request_middleware(\n            request, request_name=name\n        )\n        # No middleware results\n        if not response:\n            # -------------------------------------------- #\n            # Execute Handler\n            # -------------------------------------------- #\n\n            request.uri_template = uri\n            if handler is None:\n                raise ServerError(\n                    (\n                        \"'None' was returned while requesting a \"\n                        \"handler from the router\"\n                    )\n                )\n            else:\n                if not getattr(handler, \"__blueprintname__\", False):\n                    request.endpoint = self._build_endpoint_name(\n                        handler.__name__\n                    )\n                else:\n                    request.endpoint = self._build_endpoint_name(\n                        getattr(handler, \"__blueprintname__\", \"\"),\n                        handler.__name__,\n                    )\n\n            # Run response handler\n            response = handler(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n    except CancelledError:\n        # If response handler times out, the server handles the error\n        # and cancels the handle_request job.\n        # In this case, the transport is already closed and we cannot\n        # issue a response.\n        response = None\n        cancelled = True\n    except Exception as e:\n        # -------------------------------------------- #\n        # Response Generation Failed\n        # -------------------------------------------- #\n\n        try:\n            response = self.error_handler.response(request, e)\n            if isawaitable(response):\n                response = await response\n        except Exception as e:\n            if isinstance(e, SanicException):\n                response = self.error_handler.default(\n                    request=request, exception=e\n                )\n            elif self.debug:\n                response = HTTPResponse(\n                    \"Error while handling error: {}\\nStack: {}\".format(\n                        e, format_exc()\n                    ),\n                    status=500,\n                )\n            else:\n                response = HTTPResponse(\n                    \"An error occurred while handling an error\", status=500\n                )\n    finally:\n        # -------------------------------------------- #\n        # Response Middleware\n        # -------------------------------------------- #\n        # Don't run response middleware if response is None\n        if response is not None:\n            try:\n                response = await self._run_response_middleware(\n                    request, response, request_name=name\n                )\n            except CancelledError:\n                # Response middleware can timeout too, as above.\n                response = None\n                cancelled = True\n            except BaseException:\n                error_logger.exception(\n                    \"Exception occurred in one of response \"\n                    \"middleware handlers\"\n                )\n        if cancelled:\n            raise CancelledError()\n\n    # pass the response to the correct callback\n    if write_callback is None or isinstance(\n        response, StreamingHTTPResponse\n    ):\n        if stream_callback:\n            await stream_callback(response)\n        else:\n            # Should only end here IF it is an ASGI websocket.\n            # TODO:\n            # - Add exception handling\n            pass\n    else:\n        write_callback(response)",
                "@property\ndef test_client(self):\n    return SanicTestClient(self)",
                "@property\ndef asgi_client(self):\n    return SanicASGITestClient(self)",
                "def run(\n    self,\n    host: Optional[str] = None,\n    port: Optional[int] = None,\n    debug: bool = False,\n    ssl: Union[dict, SSLContext, None] = None,\n    sock: Optional[socket] = None,\n    workers: int = 1,\n    protocol: Type[Protocol] = None,\n    backlog: int = 100,\n    stop_event: Any = None,\n    register_sys_signals: bool = True,\n    access_log: Optional[bool] = None,\n    **kwargs: Any\n) -> None:\n    \"\"\"Run the HTTP Server and listen until keyboard interrupt or term\n    signal. On termination, drain connections before closing.\n\n    :param host: Address to host on\n    :type host: str\n    :param port: Port to host on\n    :type port: int\n    :param debug: Enables debug output (slows server)\n    :type debug: bool\n    :param ssl: SSLContext, or location of certificate and key\n                for SSL encryption of worker(s)\n    :type ssl: SSLContext or dict\n    :param sock: Socket for the server to accept connections from\n    :type sock: socket\n    :param workers: Number of processes received before it is respected\n    :type workers: int\n    :param protocol: Subclass of asyncio Protocol class\n    :type protocol: type[Protocol]\n    :param backlog: a number of unaccepted connections that the system\n                    will allow before refusing new connections\n    :type backlog: int\n    :param stop_event: event to be triggered\n                       before stopping the app - deprecated\n    :type stop_event: None\n    :param register_sys_signals: Register SIG* events\n    :type register_sys_signals: bool\n    :param access_log: Enables writing access logs (slows server)\n    :type access_log: bool\n    :return: Nothing\n    \"\"\"\n    if \"loop\" in kwargs:\n        raise TypeError(\n            \"loop is not a valid argument. To use an existing loop, \"\n            \"change to create_server().\\nSee more: \"\n            \"https://sanic.readthedocs.io/en/latest/sanic/deploying.html\"\n            \"#asynchronous-support\"\n        )\n\n    # Default auto_reload to false\n    auto_reload = False\n    # If debug is set, default it to true (unless on windows)\n    if debug and os.name == \"posix\":\n        auto_reload = True\n    # Allow for overriding either of the defaults\n    auto_reload = kwargs.get(\"auto_reload\", auto_reload)\n\n    if sock is None:\n        host, port = host or \"127.0.0.1\", port or 8000\n\n    if protocol is None:\n        protocol = (\n            WebSocketProtocol if self.websocket_enabled else HttpProtocol\n        )\n    if stop_event is not None:\n        if debug:\n            warnings.simplefilter(\"default\")\n        warnings.warn(\n            \"stop_event will be removed from future versions.\",\n            DeprecationWarning,\n        )\n    # if access_log is passed explicitly change config.ACCESS_LOG\n    if access_log is not None:\n        self.config.ACCESS_LOG = access_log\n\n    server_settings = self._helper(\n        host=host,\n        port=port,\n        debug=debug,\n        ssl=ssl,\n        sock=sock,\n        workers=workers,\n        protocol=protocol,\n        backlog=backlog,\n        register_sys_signals=register_sys_signals,\n        auto_reload=auto_reload,\n    )\n\n    try:\n        self.is_running = True\n        if workers == 1:\n            if auto_reload and os.name != \"posix\":\n                # This condition must be removed after implementing\n                # auto reloader for other operating systems.\n                raise NotImplementedError\n\n            if (\n                auto_reload\n                and os.environ.get(\"SANIC_SERVER_RUNNING\") != \"true\"\n            ):\n                reloader_helpers.watchdog(2)\n            else:\n                serve(**server_settings)\n        else:\n            serve_multiple(server_settings, workers)\n    except BaseException:\n        error_logger.exception(\n            \"Experienced exception while trying to serve\"\n        )\n        raise\n    finally:\n        self.is_running = False\n    logger.info(\"Server Stopped\")",
                "def stop(self):\n    \"\"\"This kills the Sanic\"\"\"\n    get_event_loop().stop()",
                "async def create_server(\n    self,\n    host: Optional[str] = None,\n    port: Optional[int] = None,\n    debug: bool = False,\n    ssl: Union[dict, SSLContext, None] = None,\n    sock: Optional[socket] = None,\n    protocol: Type[Protocol] = None,\n    backlog: int = 100,\n    stop_event: Any = None,\n    access_log: Optional[bool] = None,\n    return_asyncio_server=False,\n    asyncio_server_kwargs=None,\n) -> Optional[AsyncioServer]:\n    \"\"\"\n    Asynchronous version of :func:`run`.\n\n    This method will take care of the operations necessary to invoke\n    the *before_start* events via :func:`trigger_events` method invocation\n    before starting the *sanic* app in Async mode.\n\n    .. note::\n        This does not support multiprocessing and is not the preferred\n        way to run a :class:`Sanic` application.\n\n    :param host: Address to host on\n    :type host: str\n    :param port: Port to host on\n    :type port: int\n    :param debug: Enables debug output (slows server)\n    :type debug: bool\n    :param ssl: SSLContext, or location of certificate and key\n                for SSL encryption of worker(s)\n    :type ssl: SSLContext or dict\n    :param sock: Socket for the server to accept connections from\n    :type sock: socket\n    :param protocol: Subclass of asyncio Protocol class\n    :type protocol: type[Protocol]\n    :param backlog: a number of unaccepted connections that the system\n                    will allow before refusing new connections\n    :type backlog: int\n    :param stop_event: event to be triggered\n                       before stopping the app - deprecated\n    :type stop_event: None\n    :param access_log: Enables writing access logs (slows server)\n    :type access_log: bool\n    :param return_asyncio_server: flag that defines whether there's a need\n                                  to return asyncio.Server or\n                                  start it serving right away\n    :type return_asyncio_server: bool\n    :param asyncio_server_kwargs: key-value arguments for\n                                  asyncio/uvloop create_server method\n    :type asyncio_server_kwargs: dict\n    :return: AsyncioServer if return_asyncio_server is true, else Nothing\n    \"\"\"\n\n    if sock is None:\n        host, port = host or \"127.0.0.1\", port or 8000\n\n    if protocol is None:\n        protocol = (\n            WebSocketProtocol if self.websocket_enabled else HttpProtocol\n        )\n    if stop_event is not None:\n        if debug:\n            warnings.simplefilter(\"default\")\n        warnings.warn(\n            \"stop_event will be removed from future versions.\",\n            DeprecationWarning,\n        )\n    # if access_log is passed explicitly change config.ACCESS_LOG\n    if access_log is not None:\n        self.config.ACCESS_LOG = access_log\n\n    server_settings = self._helper(\n        host=host,\n        port=port,\n        debug=debug,\n        ssl=ssl,\n        sock=sock,\n        loop=get_event_loop(),\n        protocol=protocol,\n        backlog=backlog,\n        run_async=return_asyncio_server,\n    )\n\n    # Trigger before_start events\n    await self.trigger_events(\n        server_settings.get(\"before_start\", []),\n        server_settings.get(\"loop\"),\n    )\n\n    return await serve(\n        asyncio_server_kwargs=asyncio_server_kwargs, **server_settings\n    )",
                "async def trigger_events(self, events, loop):\n    \"\"\"Trigger events (functions or async)\n    :param events: one or more sync or async functions to execute\n    :param loop: event loop\n    \"\"\"\n    for event in events:\n        result = event(loop)\n        if isawaitable(result):\n            await result",
                "async def _run_request_middleware(self, request, request_name=None):\n    # The if improves speed.  I don't know why\n    named_middleware = self.named_request_middleware.get(\n        request_name, deque()\n    )\n    applicable_middleware = self.request_middleware + named_middleware\n    if applicable_middleware:\n        for middleware in applicable_middleware:\n            response = middleware(request)\n            if isawaitable(response):\n                response = await response\n            if response:\n                return response\n    return None",
                "async def _run_response_middleware(\n    self, request, response, request_name=None\n):\n    named_middleware = self.named_response_middleware.get(\n        request_name, deque()\n    )\n    applicable_middleware = self.response_middleware + named_middleware\n    if applicable_middleware:\n        for middleware in applicable_middleware:\n            _response = middleware(request, response)\n            if isawaitable(_response):\n                _response = await _response\n            if _response:\n                response = _response\n                break\n    return response",
                "def _helper(\n    self,\n    host=None,\n    port=None,\n    debug=False,\n    ssl=None,\n    sock=None,\n    workers=1,\n    loop=None,\n    protocol=HttpProtocol,\n    backlog=100,\n    stop_event=None,\n    register_sys_signals=True,\n    run_async=False,\n    auto_reload=False,\n):\n    \"\"\"Helper function used by `run` and `create_server`.\"\"\"\n    if isinstance(ssl, dict):\n        # try common aliaseses\n        cert = ssl.get(\"cert\") or ssl.get(\"certificate\")\n        key = ssl.get(\"key\") or ssl.get(\"keyfile\")\n        if cert is None or key is None:\n            raise ValueError(\"SSLContext or certificate and key required.\")\n        context = create_default_context(purpose=Purpose.CLIENT_AUTH)\n        context.load_cert_chain(cert, keyfile=key)\n        ssl = context\n    if stop_event is not None:\n        if debug:\n            warnings.simplefilter(\"default\")\n        warnings.warn(\n            \"stop_event will be removed from future versions.\",\n            DeprecationWarning,\n        )\n    if self.config.PROXIES_COUNT and self.config.PROXIES_COUNT < 0:\n        raise ValueError(\n            \"PROXIES_COUNT cannot be negative. \"\n            \"https://sanic.readthedocs.io/en/latest/sanic/config.html\"\n            \"#proxy-configuration\"\n        )\n\n    self.error_handler.debug = debug\n    self.debug = debug\n\n    server_settings = {\n        \"protocol\": protocol,\n        \"request_class\": self.request_class,\n        \"is_request_stream\": self.is_request_stream,\n        \"router\": self.router,\n        \"host\": host,\n        \"port\": port,\n        \"sock\": sock,\n        \"ssl\": ssl,\n        \"app\": self,\n        \"signal\": Signal(),\n        \"debug\": debug,\n        \"request_handler\": self.handle_request,\n        \"error_handler\": self.error_handler,\n        \"request_timeout\": self.config.REQUEST_TIMEOUT,\n        \"response_timeout\": self.config.RESPONSE_TIMEOUT,\n        \"keep_alive_timeout\": self.config.KEEP_ALIVE_TIMEOUT,\n        \"request_max_size\": self.config.REQUEST_MAX_SIZE,\n        \"request_buffer_queue_size\": self.config.REQUEST_BUFFER_QUEUE_SIZE,\n        \"keep_alive\": self.config.KEEP_ALIVE,\n        \"loop\": loop,\n        \"register_sys_signals\": register_sys_signals,\n        \"backlog\": backlog,\n        \"access_log\": self.config.ACCESS_LOG,\n        \"websocket_max_size\": self.config.WEBSOCKET_MAX_SIZE,\n        \"websocket_max_queue\": self.config.WEBSOCKET_MAX_QUEUE,\n        \"websocket_read_limit\": self.config.WEBSOCKET_READ_LIMIT,\n        \"websocket_write_limit\": self.config.WEBSOCKET_WRITE_LIMIT,\n        \"graceful_shutdown_timeout\": self.config.GRACEFUL_SHUTDOWN_TIMEOUT,\n    }\n\n    # -------------------------------------------- #\n    # Register start/stop events\n    # -------------------------------------------- #\n\n    for event_name, settings_name, reverse in (\n        (\"before_server_start\", \"before_start\", False),\n        (\"after_server_start\", \"after_start\", False),\n        (\"before_server_stop\", \"before_stop\", True),\n        (\"after_server_stop\", \"after_stop\", True),\n    ):\n        listeners = self.listeners[event_name].copy()\n        if reverse:\n            listeners.reverse()\n        # Prepend sanic to the arguments when listeners are triggered\n        listeners = [partial(listener, self) for listener in listeners]\n        server_settings[settings_name] = listeners\n\n    if self.configure_logging and debug:\n        logger.setLevel(logging.DEBUG)\n\n    if (\n        self.config.LOGO\n        and os.environ.get(\"SANIC_SERVER_RUNNING\") != \"true\"\n    ):\n        logger.debug(\n            self.config.LOGO\n            if isinstance(self.config.LOGO, str)\n            else BASE_LOGO\n        )\n\n    if run_async:\n        server_settings[\"run_async\"] = True\n\n    # Serve\n    if host and port and os.environ.get(\"SANIC_SERVER_RUNNING\") != \"true\":\n        proto = \"http\"\n        if ssl is not None:\n            proto = \"https\"\n        logger.info(\"Goin' Fast @ {}://{}:{}\".format(proto, host, port))\n\n    return server_settings",
                "def _build_endpoint_name(self, *parts):\n    parts = [self.name, *parts]\n    return \".\".join(parts)",
                "async def __call__(self, scope, receive, send):\n    \"\"\"To be ASGI compliant, our instance must be a callable that accepts\n    three arguments: scope, receive, send. See the ASGI reference for more\n    details: https://asgi.readthedocs.io/en/latest/\"\"\"\n    self.asgi = True\n    asgi_app = await ASGIApp.create(self, scope, receive, send)\n    await asgi_app()",
                "def decorator(listener):\n    self.listeners[event].append(listener)\n    return listener",
                "def response(handler):\n    if isinstance(handler, tuple):\n        # if a handler fn is already wrapped in a route, the handler\n        # variable will be a tuple of (existing routes, handler fn)\n        routes, handler = handler\n    else:\n        routes = []\n    args = list(signature(handler).parameters.keys())\n\n    if not args:\n        raise ValueError(\n            \"Required parameter `request` missing \"\n            \"in the {0}() route?\".format(handler.__name__)\n        )\n\n    if stream:\n        handler.is_stream = stream\n\n    routes.extend(\n        self.router.add(\n            uri=uri,\n            methods=methods,\n            handler=handler,\n            host=host,\n            strict_slashes=strict_slashes,\n            version=version,\n            name=name,\n        )\n    )\n    return routes, handler",
                "def response(handler):\n    if isinstance(handler, tuple):\n        # if a handler fn is already wrapped in a route, the handler\n        # variable will be a tuple of (existing routes, handler fn)\n        routes, handler = handler\n    else:\n        routes = []\n\n    async def websocket_handler(request, *args, **kwargs):\n        request.app = self\n        if not getattr(handler, \"__blueprintname__\", False):\n            request.endpoint = handler.__name__\n        else:\n            request.endpoint = (\n                getattr(handler, \"__blueprintname__\", \"\")\n                + handler.__name__\n            )\n\n            pass\n\n        if self.asgi:\n            ws = request.transport.get_websocket_connection()\n        else:\n            try:\n                protocol = request.transport.get_protocol()\n            except AttributeError:\n                # On Python3.5 the Transport classes in asyncio do not\n                # have a get_protocol() method as in uvloop\n                protocol = request.transport._protocol\n            protocol.app = self\n\n            ws = await protocol.websocket_handshake(\n                request, subprotocols\n            )\n\n        # schedule the application handler\n        # its future is kept in self.websocket_tasks in case it\n        # needs to be cancelled due to the server being stopped\n        fut = ensure_future(handler(request, ws, *args, **kwargs))\n        self.websocket_tasks.add(fut)\n        try:\n            await fut\n        except (CancelledError, ConnectionClosed):\n            pass\n        finally:\n            self.websocket_tasks.remove(fut)\n        await ws.close()\n\n    routes.extend(\n        self.router.add(\n            uri=uri,\n            handler=websocket_handler,\n            methods=frozenset({\"GET\"}),\n            host=host,\n            strict_slashes=strict_slashes,\n            name=name,\n        )\n    )\n    return routes, handler",
                "def response(handler):\n    for exception in exceptions:\n        if isinstance(exception, (tuple, list)):\n            for e in exception:\n                self.error_handler.add(e, handler)\n        else:\n            self.error_handler.add(exception, handler)\n    return handler",
                "async def websocket_handler(request, *args, **kwargs):\n    request.app = self\n    if not getattr(handler, \"__blueprintname__\", False):\n        request.endpoint = handler.__name__\n    else:\n        request.endpoint = (\n            getattr(handler, \"__blueprintname__\", \"\")\n            + handler.__name__\n        )\n\n        pass\n\n    if self.asgi:\n        ws = request.transport.get_websocket_connection()\n    else:\n        try:\n            protocol = request.transport.get_protocol()\n        except AttributeError:\n            # On Python3.5 the Transport classes in asyncio do not\n            # have a get_protocol() method as in uvloop\n            protocol = request.transport._protocol\n        protocol.app = self\n\n        ws = await protocol.websocket_handshake(\n            request, subprotocols\n        )\n\n    # schedule the application handler\n    # its future is kept in self.websocket_tasks in case it\n    # needs to be cancelled due to the server being stopped\n    fut = ensure_future(handler(request, ws, *args, **kwargs))\n    self.websocket_tasks.add(fut)\n    try:\n        await fut\n    except (CancelledError, ConnectionClosed):\n        pass\n    finally:\n        self.websocket_tasks.remove(fut)\n    await ws.close()",
                "@self.listener(\"before_server_stop\")\ndef cancel_websocket_tasks(app, loop):\n    for task in self.websocket_tasks:\n        task.cancel()",
                "@self.listener(\"before_server_start\")\ndef run(app, loop):\n    if callable(task):\n        try:\n            loop.create_task(task(self))\n        except TypeError:\n            loop.create_task(task())\n    else:\n        loop.create_task(task)"
            ],
            "inscope_function_signatures": [
                "__init__(self, name=None, router=None, error_handler=None, load_env=True, request_class=None, strict_slashes=False, log_config=None, configure_logging=True)",
                "loop(self)",
                "add_task(self, task)",
                "listener(self, event)",
                "register_listener(self, listener, event)",
                "route(self, uri, methods=frozenset({'GET'}), host=None, strict_slashes=None, stream=False, version=None, name=None)",
                "get(self, uri, host=None, strict_slashes=None, version=None, name=None)",
                "post(self, uri, host=None, strict_slashes=None, stream=False, version=None, name=None)",
                "put(self, uri, host=None, strict_slashes=None, stream=False, version=None, name=None)",
                "head(self, uri, host=None, strict_slashes=None, version=None, name=None)",
                "options(self, uri, host=None, strict_slashes=None, version=None, name=None)",
                "patch(self, uri, host=None, strict_slashes=None, stream=False, version=None, name=None)",
                "delete(self, uri, host=None, strict_slashes=None, version=None, name=None)",
                "add_route(self, handler, uri, methods=frozenset({'GET'}), host=None, strict_slashes=None, version=None, name=None, stream=False)",
                "websocket(self, uri, host=None, strict_slashes=None, subprotocols=None, name=None)",
                "add_websocket_route(self, handler, uri, host=None, strict_slashes=None, subprotocols=None, name=None)",
                "enable_websocket(self, enable=True)",
                "remove_route(self, uri, clean_cache=True, host=None)",
                "exception(self, *exceptions)",
                "register_middleware(self, middleware, attach_to='request')",
                "register_named_middleware(self, middleware, route_names, attach_to='request')",
                "middleware(self, middleware_or_request)",
                "static(self, uri, file_or_directory, pattern='/?.+', use_modified_since=True, use_content_range=False, stream_large_files=False, name='static', host=None, strict_slashes=None, content_type=None)",
                "blueprint(self, blueprint, **options)",
                "register_blueprint(self, *args, **kwargs)",
                "url_for(self, view_name: str, **kwargs)",
                "converted_response_type(self, response)",
                "handle_request(self, request, write_callback, stream_callback)",
                "test_client(self)",
                "asgi_client(self)",
                "run(self, host: Optional[str]=None, port: Optional[int]=None, debug: bool=False, ssl: Union[dict, SSLContext, None]=None, sock: Optional[socket]=None, workers: int=1, protocol: Type[Protocol]=None, backlog: int=100, stop_event: Any=None, register_sys_signals: bool=True, access_log: Optional[bool]=None, **kwargs: Any) -> None",
                "stop(self)",
                "create_server(self, host: Optional[str]=None, port: Optional[int]=None, debug: bool=False, ssl: Union[dict, SSLContext, None]=None, sock: Optional[socket]=None, protocol: Type[Protocol]=None, backlog: int=100, stop_event: Any=None, access_log: Optional[bool]=None, return_asyncio_server=False, asyncio_server_kwargs=None) -> Optional[AsyncioServer]",
                "trigger_events(self, events, loop)",
                "_run_request_middleware(self, request, request_name=None)",
                "_run_response_middleware(self, request, response, request_name=None)",
                "_helper(self, host=None, port=None, debug=False, ssl=None, sock=None, workers=1, loop=None, protocol=HttpProtocol, backlog=100, stop_event=None, register_sys_signals=True, run_async=False, auto_reload=False)",
                "_build_endpoint_name(self, *parts)",
                "__call__(self, scope, receive, send)",
                "decorator(listener)",
                "response(handler)",
                "response(handler)",
                "response(handler)",
                "websocket_handler(request, *args, **kwargs)",
                "cancel_websocket_tasks(app, loop)",
                "run(app, loop)"
            ],
            "variables_in_file": {
                "name": [
                    903,
                    1034,
                    398,
                    910,
                    916,
                    280,
                    541,
                    54,
                    310,
                    954,
                    957,
                    63,
                    322,
                    963,
                    69,
                    582,
                    456,
                    345,
                    222,
                    749,
                    878,
                    883,
                    884,
                    885,
                    375,
                    889,
                    250
                ],
                "warnings.warn": [
                    616,
                    1266,
                    790,
                    55,
                    1149,
                    1367
                ],
                "warnings": [
                    616,
                    1265,
                    1266,
                    789,
                    790,
                    55,
                    1366,
                    1148,
                    1149,
                    1367
                ],
                "DeprecationWarning": [
                    619,
                    1268,
                    1369,
                    794,
                    59,
                    1151
                ],
                "frame_records": [
                    62,
                    63
                ],
                "stack": [
                    62
                ],
                "getmodulename": [
                    63
                ],
                "configure_logging": [
                    66,
                    79
                ],
                "logging.config.dictConfig": [
                    67
                ],
                "logging.config": [
                    67
                ],
                "logging": [
                    67,
                    1430
                ],
                "log_config": [
                    67
                ],
                "LOGGING_CONFIG_DEFAULTS": [
                    67
                ],
                "self.name": [
                    69,
                    1455
                ],
                "self": [
                    515,
                    1033,
                    525,
                    531,
                    535,
                    1068,
                    1072,
                    575,
                    577,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    591,
                    79,
                    80,
                    594,
                    81,
                    596,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    91,
                    599,
                    99,
                    622,
                    1144,
                    121,
                    123,
                    636,
                    125,
                    638,
                    128,
                    1155,
                    132,
                    1157,
                    146,
                    1171,
                    660,
                    661,
                    663,
                    664,
                    160,
                    672,
                    673,
                    674,
                    675,
                    678,
                    679,
                    680,
                    681,
                    1193,
                    695,
                    699,
                    191,
                    194,
                    215,
                    742,
                    1261,
                    244,
                    1272,
                    1274,
                    764,
                    766,
                    767,
                    772,
                    773,
                    774,
                    1287,
                    273,
                    788,
                    796,
                    1308,
                    1311,
                    1324,
                    303,
                    1327,
                    827,
                    316,
                    339,
                    852,
                    1371,
                    865,
                    1378,
                    1379,
                    1383,
                    1384,
                    1385,
                    878,
                    1390,
                    368,
                    1393,
                    1394,
                    1395,
                    1396,
                    1397,
                    1398,
                    1399,
                    1400,
                    1404,
                    1405,
                    1406,
                    1407,
                    1408,
                    1409,
                    392,
                    1422,
                    1426,
                    1429,
                    1433,
                    1437,
                    1438,
                    1455,
                    1466,
                    1467,
                    957,
                    447,
                    449,
                    962,
                    981,
                    985,
                    476,
                    484,
                    495,
                    1007,
                    1012,
                    1015,
                    506
                ],
                "self.asgi": [
                    1466,
                    506,
                    99,
                    70
                ],
                "self.router": [
                    535,
                    71,
                    1385,
                    622,
                    878,
                    852,
                    215,
                    827,
                    957
                ],
                "router": [
                    71
                ],
                "Router": [
                    71
                ],
                "self.request_class": [
                    72,
                    1383
                ],
                "request_class": [
                    72
                ],
                "self.error_handler": [
                    1378,
                    73,
                    1007,
                    1394,
                    1012,
                    636,
                    638
                ],
                "error_handler": [
                    73
                ],
                "ErrorHandler": [
                    73
                ],
                "self.config": [
                    1408,
                    1409,
                    1272,
                    1155,
                    1433,
                    1437,
                    1438,
                    74,
                    1371,
                    865,
                    1395,
                    1396,
                    1397,
                    1398,
                    1399,
                    1400,
                    1404,
                    1405,
                    1406,
                    1407
                ],
                "Config": [
                    74
                ],
                "load_env": [
                    74
                ],
                "self.request_middleware": [
                    75,
                    660,
                    661,
                    1311
                ],
                "deque": [
                    673,
                    679,
                    75,
                    76,
                    1325,
                    1309
                ],
                "self.response_middleware": [
                    664,
                    76,
                    1327,
                    663
                ],
                "self.blueprints": [
                    772,
                    77,
                    766,
                    767
                ],
                "self._blueprint_order": [
                    773,
                    78
                ],
                "self.configure_logging": [
                    1429,
                    79
                ],
                "self.debug": [
                    80,
                    1379,
                    788,
                    1015
                ],
                "self.sock": [
                    81
                ],
                "self.strict_slashes": [
                    194,
                    484,
                    447,
                    82,
                    575
                ],
                "strict_slashes": [
                    396,
                    277,
                    540,
                    307,
                    574,
                    575,
                    320,
                    193,
                    194,
                    446,
                    447,
                    453,
                    580,
                    82,
                    343,
                    220,
                    483,
                    484,
                    751,
                    372,
                    248
                ],
                "self.listeners": [
                    146,
                    83,
                    1422
                ],
                "defaultdict": [
                    83
                ],
                "list": [
                    762,
                    634,
                    83,
                    203
                ],
                "self.is_running": [
                    1193,
                    99,
                    84,
                    1171
                ],
                "self.is_request_stream": [
                    1384,
                    85,
                    191
                ],
                "self.websocket_enabled": [
                    1261,
                    591,
                    86,
                    599,
                    1144
                ],
                "self.websocket_tasks": [
                    531,
                    596,
                    525,
                    87
                ],
                "set": [
                    429,
                    87
                ],
                "self.named_request_middleware": [
                    672,
                    673,
                    674,
                    675,
                    88,
                    1308
                ],
                "self.named_response_middleware": [
                    678,
                    679,
                    680,
                    681,
                    1324,
                    89
                ],
                "self.go_fast": [
                    91
                ],
                "self.run": [
                    91
                ],
                "SanicException": [
                    1011,
                    100,
                    126
                ],
                "get_event_loop": [
                    104,
                    1280,
                    1198
                ],
                "property": [
                    1066,
                    93,
                    1070
                ],
                "callable": [
                    130,
                    694,
                    119
                ],
                "task": [
                    130,
                    132,
                    134,
                    136,
                    596,
                    597,
                    119,
                    121,
                    123,
                    125
                ],
                "self.loop.create_task": [
                    121,
                    123,
                    125
                ],
                "self.loop": [
                    121,
                    123,
                    125
                ],
                "TypeError": [
                    122,
                    1124,
                    133
                ],
                "loop.create_task": [
                    136,
                    132,
                    134
                ],
                "loop": [
                    132,
                    134,
                    136,
                    1302,
                    1401
                ],
                "self.listener": [
                    128,
                    594,
                    160
                ],
                "append": [
                    681,
                    146,
                    675
                ],
                "event": [
                    160,
                    146,
                    1301,
                    1302
                ],
                "listener": [
                    160,
                    146,
                    147,
                    1426
                ],
                "decorator": [
                    149
                ],
                "frozenset": [
                    166,
                    394,
                    305,
                    370,
                    275,
                    341,
                    246,
                    405,
                    538,
                    318
                ],
                "uri.startswith": [
                    480,
                    187
                ],
                "uri": [
                    393,
                    274,
                    536,
                    304,
                    827,
                    828,
                    187,
                    188,
                    317,
                    957,
                    450,
                    578,
                    836,
                    837,
                    971,
                    844,
                    846,
                    847,
                    849,
                    340,
                    852,
                    216,
                    480,
                    481,
                    743,
                    622,
                    369,
                    245
                ],
                "stream": [
                    454,
                    211,
                    212,
                    308,
                    278,
                    373,
                    436,
                    443,
                    190
                ],
                "isinstance": [
                    197,
                    487,
                    1355,
                    1011,
                    634,
                    439,
                    1049,
                    762,
                    1438
                ],
                "handler": [
                    524,
                    544,
                    428,
                    432,
                    439,
                    440,
                    441,
                    957,
                    197,
                    583,
                    200,
                    457,
                    458,
                    203,
                    972,
                    208,
                    212,
                    980,
                    982,
                    218,
                    986,
                    987,
                    991,
                    225,
                    487,
                    490,
                    496,
                    497,
                    500,
                    501,
                    636,
                    638,
                    639
                ],
                "tuple": [
                    634,
                    762,
                    197,
                    487
                ],
                "routes": [
                    544,
                    225,
                    200,
                    202,
                    490,
                    492,
                    214,
                    534
                ],
                "args": [
                    203,
                    524,
                    205,
                    796,
                    957,
                    991
                ],
                "parameters.keys": [
                    203
                ],
                "parameters": [
                    203
                ],
                "signature": [
                    203
                ],
                "ValueError": [
                    1360,
                    1372,
                    861,
                    206
                ],
                "format": [
                    901,
                    1450,
                    844,
                    908,
                    207,
                    880,
                    916,
                    888,
                    1017,
                    830
                ],
                "handler.__name__": [
                    208,
                    497,
                    501,
                    982,
                    987
                ],
                "handler.is_stream": [
                    212
                ],
                "routes.extend": [
                    214,
                    534
                ],
                "self.router.add": [
                    535,
                    215
                ],
                "methods": [
                    451,
                    429,
                    434,
                    440,
                    217
                ],
                "host": [
                    1158,
                    395,
                    276,
                    539,
                    1446,
                    1450,
                    306,
                    319,
                    579,
                    452,
                    342,
                    219,
                    1257,
                    1386,
                    622,
                    750,
                    371,
                    1140,
                    247,
                    1275
                ],
                "version": [
                    321,
                    455,
                    397,
                    309,
                    374,
                    279,
                    344,
                    249,
                    221
                ],
                "response": [
                    641,
                    1031,
                    1033,
                    1034,
                    1038,
                    1050,
                    1053,
                    546,
                    1314,
                    1060,
                    1315,
                    1316,
                    1317,
                    1318,
                    1330,
                    1334,
                    952,
                    1336,
                    962,
                    966,
                    991,
                    992,
                    993,
                    227,
                    999,
                    1007,
                    1008,
                    1009,
                    1012,
                    1016,
                    1023
                ],
                "self.route": [
                    449,
                    392,
                    303,
                    368,
                    273,
                    339,
                    244,
                    316
                ],
                "hasattr": [
                    442,
                    435,
                    428
                ],
                "method": [
                    432,
                    434,
                    431
                ],
                "HTTP_METHODS": [
                    431
                ],
                "_handler": [
                    432,
                    433,
                    435,
                    441,
                    442
                ],
                "getattr": [
                    432,
                    496,
                    980,
                    500,
                    986
                ],
                "handler.view_class": [
                    432
                ],
                "method.lower": [
                    432
                ],
                "methods.add": [
                    434
                ],
                "CompositionView": [
                    439
                ],
                "handler.handlers.keys": [
                    440
                ],
                "handler.handlers": [
                    440,
                    441
                ],
                "handler.handlers.values": [
                    441
                ],
                "self.enable_websocket": [
                    476
                ],
                "request.app": [
                    495
                ],
                "request": [
                    514,
                    518,
                    1034,
                    524,
                    1314,
                    1330,
                    957,
                    963,
                    971,
                    981,
                    985,
                    991,
                    495,
                    1007,
                    497,
                    499,
                    1013,
                    507,
                    510
                ],
                "request.endpoint": [
                    497,
                    499,
                    985,
                    981
                ],
                "ws": [
                    532,
                    507,
                    524,
                    517
                ],
                "request.transport.get_websocket_connection": [
                    507
                ],
                "request.transport": [
                    514,
                    507,
                    510
                ],
                "protocol": [
                    1281,
                    514,
                    515,
                    517,
                    1382,
                    1259,
                    1164,
                    1260,
                    1142,
                    1143,
                    510
                ],
                "request.transport.get_protocol": [
                    510
                ],
                "AttributeError": [
                    511
                ],
                "request.transport._protocol": [
                    514
                ],
                "protocol.app": [
                    515
                ],
                "protocol.websocket_handshake": [
                    517
                ],
                "subprotocols": [
                    581,
                    518
                ],
                "fut": [
                    531,
                    524,
                    525,
                    527
                ],
                "ensure_future": [
                    524
                ],
                "kwargs": [
                    834,
                    921,
                    991,
                    1123,
                    524,
                    1137,
                    856,
                    883,
                    884,
                    822,
                    855,
                    824,
                    885,
                    858,
                    859,
                    796,
                    957,
                    863
                ],
                "self.websocket_tasks.add": [
                    525
                ],
                "CancelledError": [
                    528,
                    994,
                    1036,
                    1046
                ],
                "ConnectionClosed": [
                    528
                ],
                "self.websocket_tasks.remove": [
                    531
                ],
                "ws.close": [
                    532
                ],
                "websocket_handler": [
                    537
                ],
                "self.websocket": [
                    577
                ],
                "task.cancel": [
                    597
                ],
                "enable": [
                    599
                ],
                "self.router.remove": [
                    622
                ],
                "clean_cache": [
                    622
                ],
                "exception": [
                    633,
                    634,
                    635,
                    638
                ],
                "exceptions": [
                    633
                ],
                "e": [
                    1007,
                    1011,
                    1013,
                    1018,
                    635,
                    636
                ],
                "self.error_handler.add": [
                    636,
                    638
                ],
                "attach_to": [
                    670,
                    659,
                    676,
                    662
                ],
                "middleware": [
                    1313,
                    674,
                    675,
                    1314,
                    680,
                    681,
                    1329,
                    1330,
                    660,
                    661,
                    663,
                    664,
                    665
                ],
                "self.request_middleware.append": [
                    661
                ],
                "self.response_middleware.appendleft": [
                    664
                ],
                "_rn": [
                    672,
                    673,
                    674,
                    675,
                    677,
                    678,
                    679,
                    680,
                    681,
                    671
                ],
                "route_names": [
                    677,
                    671
                ],
                "middleware_or_request": [
                    699,
                    694,
                    695
                ],
                "self.register_middleware": [
                    699,
                    695
                ],
                "partial": [
                    698,
                    1426
                ],
                "static_register": [
                    741
                ],
                "file_or_directory": [
                    744
                ],
                "pattern": [
                    903,
                    745,
                    910,
                    878,
                    880
                ],
                "use_modified_since": [
                    746
                ],
                "use_content_range": [
                    747
                ],
                "stream_large_files": [
                    748
                ],
                "content_type": [
                    752
                ],
                "blueprint": [
                    769,
                    772,
                    773,
                    774,
                    762,
                    763,
                    766,
                    767
                ],
                "BlueprintGroup": [
                    762
                ],
                "item": [
                    763,
                    764
                ],
                "self.blueprint": [
                    764,
                    796
                ],
                "options": [
                    764,
                    774
                ],
                "blueprint.name": [
                    769,
                    772,
                    766,
                    767
                ],
                "self._blueprint_order.append": [
                    773
                ],
                "blueprint.register": [
                    774
                ],
                "warnings.simplefilter": [
                    1265,
                    1148,
                    789,
                    1366
                ],
                "str": [
                    899,
                    1438,
                    1202,
                    819,
                    1080,
                    893,
                    798
                ],
                "kw": [
                    825,
                    819,
                    822,
                    827
                ],
                "Dict": [
                    819
                ],
                "view_name": [
                    833,
                    821,
                    823,
                    825,
                    827,
                    830
                ],
                "kw.update": [
                    825,
                    822
                ],
                "kwargs.pop": [
                    834,
                    856,
                    822,
                    855,
                    824,
                    858,
                    859,
                    863
                ],
                "view_name.endswith": [
                    833,
                    823
                ],
                "route": [
                    827,
                    828
                ],
                "self.router.find_route_by_view_name": [
                    827
                ],
                "URLBuildError": [
                    913,
                    829,
                    887
                ],
                "filename": [
                    841,
                    834,
                    844,
                    842
                ],
                "folder_": [
                    844,
                    837,
                    838,
                    839
                ],
                "uri.split": [
                    837
                ],
                "folder_.endswith": [
                    838
                ],
                "filename.startswith": [
                    841
                ],
                "uri.endswith": [
                    846
                ],
                "out": [
                    849,
                    923,
                    925,
                    918
                ],
                "matched_params": [
                    852,
                    877
                ],
                "re.findall": [
                    852
                ],
                "re": [
                    896,
                    852,
                    918
                ],
                "self.router.parameter_pattern": [
                    852
                ],
                "anchor": [
                    856,
                    923
                ],
                "external": [
                    864,
                    858,
                    867,
                    860
                ],
                "scheme": [
                    868,
                    923,
                    870,
                    872,
                    859,
                    860
                ],
                "netloc": [
                    864,
                    865,
                    869,
                    870,
                    874,
                    875,
                    923,
                    863
                ],
                "self.config.get": [
                    865
                ],
                "split": [
                    870
                ],
                "netloc.split": [
                    875
                ],
                "match": [
                    877,
                    878
                ],
                "_type": [
                    899,
                    878,
                    903
                ],
                "self.router.parse_parameter_string": [
                    878
                ],
                "specific_pattern": [
                    880,
                    896
                ],
                "supplied_param": [
                    896,
                    903,
                    910,
                    881,
                    884,
                    918,
                    893
                ],
                "kwargs.get": [
                    1137,
                    884
                ],
                "passes_pattern": [
                    896,
                    898
                ],
                "re.match": [
                    896
                ],
                "msg": [
                    913,
                    907,
                    900
                ],
                "_type.__name__": [
                    903
                ],
                "replacement_regex": [
                    916,
                    918
                ],
                "re.sub": [
                    918
                ],
                "query_string": [
                    921,
                    923
                ],
                "urlencode": [
                    921
                ],
                "urlunparse": [
                    923
                ],
                "cancelled": [
                    1000,
                    953,
                    1045,
                    1039
                ],
                "self.router.get": [
                    957
                ],
                "self._run_request_middleware": [
                    962
                ],
                "request.uri_template": [
                    971
                ],
                "ServerError": [
                    973
                ],
                "self._build_endpoint_name": [
                    985,
                    981
                ],
                "isawaitable": [
                    992,
                    1315,
                    1008,
                    1331,
                    1303
                ],
                "Exception": [
                    1001,
                    1010
                ],
                "self.error_handler.response": [
                    1007
                ],
                "self.error_handler.default": [
                    1012
                ],
                "HTTPResponse": [
                    1016,
                    1023
                ],
                "format_exc": [
                    1018
                ],
                "self._run_response_middleware": [
                    1033
                ],
                "BaseException": [
                    1040,
                    1187
                ],
                "error_logger.exception": [
                    1041,
                    1188
                ],
                "error_logger": [
                    1041,
                    1188
                ],
                "write_callback": [
                    1049,
                    1060
                ],
                "StreamingHTTPResponse": [
                    1050
                ],
                "stream_callback": [
                    1052,
                    1053
                ],
                "SanicTestClient": [
                    1068
                ],
                "SanicASGITestClient": [
                    1072
                ],
                "Optional": [
                    1090,
                    1202,
                    1203,
                    1206,
                    1080,
                    1081,
                    1210,
                    1084,
                    1213
                ],
                "int": [
                    1203,
                    1208,
                    1081,
                    1085,
                    1087
                ],
                "bool": [
                    1089,
                    1090,
                    1082,
                    1204,
                    1210
                ],
                "Union": [
                    1083,
                    1205
                ],
                "dict": [
                    1355,
                    1083,
                    1205
                ],
                "SSLContext": [
                    1083,
                    1205
                ],
                "socket": [
                    1084,
                    1206
                ],
                "Type": [
                    1086,
                    1207
                ],
                "Protocol": [
                    1086,
                    1207
                ],
                "Any": [
                    1088,
                    1209,
                    1091
                ],
                "auto_reload": [
                    1132,
                    1167,
                    1135,
                    1137,
                    1173,
                    1179
                ],
                "debug": [
                    1378,
                    1379,
                    1160,
                    1134,
                    1264,
                    1392,
                    1365,
                    1429,
                    1147,
                    1277
                ],
                "os.name": [
                    1173,
                    1134
                ],
                "os": [
                    1446,
                    1134,
                    1173,
                    1434,
                    1180
                ],
                "sock": [
                    1256,
                    1162,
                    1388,
                    1139,
                    1279
                ],
                "port": [
                    1446,
                    1159,
                    1257,
                    1450,
                    1387,
                    1140,
                    1276
                ],
                "WebSocketProtocol": [
                    1144,
                    1261
                ],
                "HttpProtocol": [
                    1144,
                    1347,
                    1261
                ],
                "stop_event": [
                    1146,
                    1364,
                    1263
                ],
                "access_log": [
                    1272,
                    1154,
                    1155,
                    1271
                ],
                "self.config.ACCESS_LOG": [
                    1272,
                    1155,
                    1404
                ],
                "server_settings": [
                    1184,
                    1186,
                    1443,
                    1157,
                    1381,
                    1288,
                    1289,
                    1452,
                    1293,
                    1427,
                    1274
                ],
                "self._helper": [
                    1274,
                    1157
                ],
                "ssl": [
                    1448,
                    1161,
                    1355,
                    1357,
                    1358,
                    1389,
                    1363,
                    1278
                ],
                "workers": [
                    1186,
                    1163,
                    1172
                ],
                "backlog": [
                    1282,
                    1403,
                    1165
                ],
                "register_sys_signals": [
                    1402,
                    1166
                ],
                "NotImplementedError": [
                    1176
                ],
                "os.environ.get": [
                    1434,
                    1180,
                    1446
                ],
                "os.environ": [
                    1434,
                    1180,
                    1446
                ],
                "reloader_helpers.watchdog": [
                    1182
                ],
                "reloader_helpers": [
                    1182
                ],
                "serve": [
                    1184,
                    1292
                ],
                "serve_multiple": [
                    1186
                ],
                "logger.info": [
                    1450,
                    1194
                ],
                "logger": [
                    1450,
                    1194,
                    1436,
                    1430
                ],
                "stop": [
                    1198
                ],
                "return_asyncio_server": [
                    1283
                ],
                "self.trigger_events": [
                    1287
                ],
                "server_settings.get": [
                    1288,
                    1289
                ],
                "asyncio_server_kwargs": [
                    1293
                ],
                "AsyncioServer": [
                    1213
                ],
                "events": [
                    1301
                ],
                "result": [
                    1304,
                    1302,
                    1303
                ],
                "named_middleware": [
                    1308,
                    1327,
                    1324,
                    1311
                ],
                "self.named_request_middleware.get": [
                    1308
                ],
                "request_name": [
                    1325,
                    1309
                ],
                "applicable_middleware": [
                    1312,
                    1313,
                    1327,
                    1328,
                    1329,
                    1311
                ],
                "self.named_response_middleware.get": [
                    1324
                ],
                "_response": [
                    1330,
                    1331,
                    1332,
                    1333,
                    1334
                ],
                "cert": [
                    1362,
                    1357,
                    1359
                ],
                "ssl.get": [
                    1357,
                    1358
                ],
                "key": [
                    1362,
                    1358,
                    1359
                ],
                "context": [
                    1361,
                    1362,
                    1363
                ],
                "create_default_context": [
                    1361
                ],
                "Purpose.CLIENT_AUTH": [
                    1361
                ],
                "Purpose": [
                    1361
                ],
                "context.load_cert_chain": [
                    1362
                ],
                "self.config.PROXIES_COUNT": [
                    1371
                ],
                "self.error_handler.debug": [
                    1378
                ],
                "Signal": [
                    1391
                ],
                "self.handle_request": [
                    1393
                ],
                "self.config.REQUEST_TIMEOUT": [
                    1395
                ],
                "self.config.RESPONSE_TIMEOUT": [
                    1396
                ],
                "self.config.KEEP_ALIVE_TIMEOUT": [
                    1397
                ],
                "self.config.REQUEST_MAX_SIZE": [
                    1398
                ],
                "self.config.REQUEST_BUFFER_QUEUE_SIZE": [
                    1399
                ],
                "self.config.KEEP_ALIVE": [
                    1400
                ],
                "self.config.WEBSOCKET_MAX_SIZE": [
                    1405
                ],
                "self.config.WEBSOCKET_MAX_QUEUE": [
                    1406
                ],
                "self.config.WEBSOCKET_READ_LIMIT": [
                    1407
                ],
                "self.config.WEBSOCKET_WRITE_LIMIT": [
                    1408
                ],
                "self.config.GRACEFUL_SHUTDOWN_TIMEOUT": [
                    1409
                ],
                "event_name": [
                    1416,
                    1422
                ],
                "settings_name": [
                    1416,
                    1427
                ],
                "reverse": [
                    1416,
                    1423
                ],
                "listeners": [
                    1424,
                    1426,
                    1427,
                    1422
                ],
                "copy": [
                    1422
                ],
                "listeners.reverse": [
                    1424
                ],
                "logger.setLevel": [
                    1430
                ],
                "logging.DEBUG": [
                    1430
                ],
                "self.config.LOGO": [
                    1433,
                    1437,
                    1438
                ],
                "logger.debug": [
                    1436
                ],
                "BASE_LOGO": [
                    1439
                ],
                "run_async": [
                    1442
                ],
                "proto": [
                    1449,
                    1450,
                    1447
                ],
                "parts": [
                    1456,
                    1455
                ],
                "join": [
                    1456
                ],
                "asgi_app": [
                    1467,
                    1468
                ],
                "ASGIApp.create": [
                    1467
                ],
                "ASGIApp": [
                    1467
                ],
                "scope": [
                    1467
                ],
                "receive": [
                    1467
                ],
                "send": [
                    1467
                ]
            },
            "filtered_variables_in_file": {
                "name": [
                    903,
                    1034,
                    398,
                    910,
                    916,
                    280,
                    541,
                    54,
                    310,
                    954,
                    957,
                    63,
                    322,
                    963,
                    69,
                    582,
                    456,
                    345,
                    222,
                    749,
                    878,
                    883,
                    884,
                    885,
                    375,
                    889,
                    250
                ],
                "warnings.warn": [
                    616,
                    1266,
                    790,
                    55,
                    1149,
                    1367
                ],
                "warnings": [
                    616,
                    1265,
                    1266,
                    789,
                    790,
                    55,
                    1366,
                    1148,
                    1149,
                    1367
                ],
                "frame_records": [
                    62,
                    63
                ],
                "stack": [
                    62
                ],
                "getmodulename": [
                    63
                ],
                "configure_logging": [
                    66,
                    79
                ],
                "logging.config.dictConfig": [
                    67
                ],
                "logging.config": [
                    67
                ],
                "logging": [
                    67,
                    1430
                ],
                "log_config": [
                    67
                ],
                "LOGGING_CONFIG_DEFAULTS": [
                    67
                ],
                "self.name": [
                    69,
                    1455
                ],
                "self": [
                    515,
                    1033,
                    525,
                    531,
                    535,
                    1068,
                    1072,
                    575,
                    577,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    591,
                    79,
                    80,
                    594,
                    81,
                    596,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    91,
                    599,
                    99,
                    622,
                    1144,
                    121,
                    123,
                    636,
                    125,
                    638,
                    128,
                    1155,
                    132,
                    1157,
                    146,
                    1171,
                    660,
                    661,
                    663,
                    664,
                    160,
                    672,
                    673,
                    674,
                    675,
                    678,
                    679,
                    680,
                    681,
                    1193,
                    695,
                    699,
                    191,
                    194,
                    215,
                    742,
                    1261,
                    244,
                    1272,
                    1274,
                    764,
                    766,
                    767,
                    772,
                    773,
                    774,
                    1287,
                    273,
                    788,
                    796,
                    1308,
                    1311,
                    1324,
                    303,
                    1327,
                    827,
                    316,
                    339,
                    852,
                    1371,
                    865,
                    1378,
                    1379,
                    1383,
                    1384,
                    1385,
                    878,
                    1390,
                    368,
                    1393,
                    1394,
                    1395,
                    1396,
                    1397,
                    1398,
                    1399,
                    1400,
                    1404,
                    1405,
                    1406,
                    1407,
                    1408,
                    1409,
                    392,
                    1422,
                    1426,
                    1429,
                    1433,
                    1437,
                    1438,
                    1455,
                    1466,
                    1467,
                    957,
                    447,
                    449,
                    962,
                    981,
                    985,
                    476,
                    484,
                    495,
                    1007,
                    1012,
                    1015,
                    506
                ],
                "self.asgi": [
                    1466,
                    506,
                    99,
                    70
                ],
                "self.router": [
                    535,
                    71,
                    1385,
                    622,
                    878,
                    852,
                    215,
                    827,
                    957
                ],
                "router": [
                    71
                ],
                "Router": [
                    71
                ],
                "self.request_class": [
                    72,
                    1383
                ],
                "request_class": [
                    72
                ],
                "self.error_handler": [
                    1378,
                    73,
                    1007,
                    1394,
                    1012,
                    636,
                    638
                ],
                "error_handler": [
                    73
                ],
                "ErrorHandler": [
                    73
                ],
                "self.config": [
                    1408,
                    1409,
                    1272,
                    1155,
                    1433,
                    1437,
                    1438,
                    74,
                    1371,
                    865,
                    1395,
                    1396,
                    1397,
                    1398,
                    1399,
                    1400,
                    1404,
                    1405,
                    1406,
                    1407
                ],
                "Config": [
                    74
                ],
                "load_env": [
                    74
                ],
                "self.request_middleware": [
                    75,
                    660,
                    661,
                    1311
                ],
                "deque": [
                    673,
                    679,
                    75,
                    76,
                    1325,
                    1309
                ],
                "self.response_middleware": [
                    664,
                    76,
                    1327,
                    663
                ],
                "self.blueprints": [
                    772,
                    77,
                    766,
                    767
                ],
                "self._blueprint_order": [
                    773,
                    78
                ],
                "self.configure_logging": [
                    1429,
                    79
                ],
                "self.debug": [
                    80,
                    1379,
                    788,
                    1015
                ],
                "self.sock": [
                    81
                ],
                "self.strict_slashes": [
                    194,
                    484,
                    447,
                    82,
                    575
                ],
                "strict_slashes": [
                    396,
                    277,
                    540,
                    307,
                    574,
                    575,
                    320,
                    193,
                    194,
                    446,
                    447,
                    453,
                    580,
                    82,
                    343,
                    220,
                    483,
                    484,
                    751,
                    372,
                    248
                ],
                "self.listeners": [
                    146,
                    83,
                    1422
                ],
                "defaultdict": [
                    83
                ],
                "self.is_running": [
                    1193,
                    99,
                    84,
                    1171
                ],
                "self.is_request_stream": [
                    1384,
                    85,
                    191
                ],
                "self.websocket_enabled": [
                    1261,
                    591,
                    86,
                    599,
                    1144
                ],
                "self.websocket_tasks": [
                    531,
                    596,
                    525,
                    87
                ],
                "self.named_request_middleware": [
                    672,
                    673,
                    674,
                    675,
                    88,
                    1308
                ],
                "self.named_response_middleware": [
                    678,
                    679,
                    680,
                    681,
                    1324,
                    89
                ],
                "self.go_fast": [
                    91
                ],
                "self.run": [
                    91
                ],
                "SanicException": [
                    1011,
                    100,
                    126
                ],
                "get_event_loop": [
                    104,
                    1280,
                    1198
                ],
                "task": [
                    130,
                    132,
                    134,
                    136,
                    596,
                    597,
                    119,
                    121,
                    123,
                    125
                ],
                "self.loop.create_task": [
                    121,
                    123,
                    125
                ],
                "self.loop": [
                    121,
                    123,
                    125
                ],
                "loop.create_task": [
                    136,
                    132,
                    134
                ],
                "loop": [
                    132,
                    134,
                    136,
                    1302,
                    1401
                ],
                "self.listener": [
                    128,
                    594,
                    160
                ],
                "append": [
                    681,
                    146,
                    675
                ],
                "event": [
                    160,
                    146,
                    1301,
                    1302
                ],
                "listener": [
                    160,
                    146,
                    147,
                    1426
                ],
                "decorator": [
                    149
                ],
                "uri.startswith": [
                    480,
                    187
                ],
                "uri": [
                    393,
                    274,
                    536,
                    304,
                    827,
                    828,
                    187,
                    188,
                    317,
                    957,
                    450,
                    578,
                    836,
                    837,
                    971,
                    844,
                    846,
                    847,
                    849,
                    340,
                    852,
                    216,
                    480,
                    481,
                    743,
                    622,
                    369,
                    245
                ],
                "stream": [
                    454,
                    211,
                    212,
                    308,
                    278,
                    373,
                    436,
                    443,
                    190
                ],
                "handler": [
                    524,
                    544,
                    428,
                    432,
                    439,
                    440,
                    441,
                    957,
                    197,
                    583,
                    200,
                    457,
                    458,
                    203,
                    972,
                    208,
                    212,
                    980,
                    982,
                    218,
                    986,
                    987,
                    991,
                    225,
                    487,
                    490,
                    496,
                    497,
                    500,
                    501,
                    636,
                    638,
                    639
                ],
                "routes": [
                    544,
                    225,
                    200,
                    202,
                    490,
                    492,
                    214,
                    534
                ],
                "args": [
                    203,
                    524,
                    205,
                    796,
                    957,
                    991
                ],
                "parameters.keys": [
                    203
                ],
                "parameters": [
                    203
                ],
                "signature": [
                    203
                ],
                "handler.__name__": [
                    208,
                    497,
                    501,
                    982,
                    987
                ],
                "handler.is_stream": [
                    212
                ],
                "routes.extend": [
                    214,
                    534
                ],
                "self.router.add": [
                    535,
                    215
                ],
                "methods": [
                    451,
                    429,
                    434,
                    440,
                    217
                ],
                "host": [
                    1158,
                    395,
                    276,
                    539,
                    1446,
                    1450,
                    306,
                    319,
                    579,
                    452,
                    342,
                    219,
                    1257,
                    1386,
                    622,
                    750,
                    371,
                    1140,
                    247,
                    1275
                ],
                "version": [
                    321,
                    455,
                    397,
                    309,
                    374,
                    279,
                    344,
                    249,
                    221
                ],
                "response": [
                    641,
                    1031,
                    1033,
                    1034,
                    1038,
                    1050,
                    1053,
                    546,
                    1314,
                    1060,
                    1315,
                    1316,
                    1317,
                    1318,
                    1330,
                    1334,
                    952,
                    1336,
                    962,
                    966,
                    991,
                    992,
                    993,
                    227,
                    999,
                    1007,
                    1008,
                    1009,
                    1012,
                    1016,
                    1023
                ],
                "self.route": [
                    449,
                    392,
                    303,
                    368,
                    273,
                    339,
                    244,
                    316
                ],
                "method": [
                    432,
                    434,
                    431
                ],
                "HTTP_METHODS": [
                    431
                ],
                "_handler": [
                    432,
                    433,
                    435,
                    441,
                    442
                ],
                "handler.view_class": [
                    432
                ],
                "method.lower": [
                    432
                ],
                "methods.add": [
                    434
                ],
                "CompositionView": [
                    439
                ],
                "handler.handlers.keys": [
                    440
                ],
                "handler.handlers": [
                    440,
                    441
                ],
                "handler.handlers.values": [
                    441
                ],
                "self.enable_websocket": [
                    476
                ],
                "request.app": [
                    495
                ],
                "request": [
                    514,
                    518,
                    1034,
                    524,
                    1314,
                    1330,
                    957,
                    963,
                    971,
                    981,
                    985,
                    991,
                    495,
                    1007,
                    497,
                    499,
                    1013,
                    507,
                    510
                ],
                "request.endpoint": [
                    497,
                    499,
                    985,
                    981
                ],
                "ws": [
                    532,
                    507,
                    524,
                    517
                ],
                "request.transport.get_websocket_connection": [
                    507
                ],
                "request.transport": [
                    514,
                    507,
                    510
                ],
                "protocol": [
                    1281,
                    514,
                    515,
                    517,
                    1382,
                    1259,
                    1164,
                    1260,
                    1142,
                    1143,
                    510
                ],
                "request.transport.get_protocol": [
                    510
                ],
                "request.transport._protocol": [
                    514
                ],
                "protocol.app": [
                    515
                ],
                "protocol.websocket_handshake": [
                    517
                ],
                "subprotocols": [
                    581,
                    518
                ],
                "fut": [
                    531,
                    524,
                    525,
                    527
                ],
                "ensure_future": [
                    524
                ],
                "kwargs": [
                    834,
                    921,
                    991,
                    1123,
                    524,
                    1137,
                    856,
                    883,
                    884,
                    822,
                    855,
                    824,
                    885,
                    858,
                    859,
                    796,
                    957,
                    863
                ],
                "self.websocket_tasks.add": [
                    525
                ],
                "CancelledError": [
                    528,
                    994,
                    1036,
                    1046
                ],
                "ConnectionClosed": [
                    528
                ],
                "self.websocket_tasks.remove": [
                    531
                ],
                "ws.close": [
                    532
                ],
                "websocket_handler": [
                    537
                ],
                "self.websocket": [
                    577
                ],
                "task.cancel": [
                    597
                ],
                "enable": [
                    599
                ],
                "self.router.remove": [
                    622
                ],
                "clean_cache": [
                    622
                ],
                "exception": [
                    633,
                    634,
                    635,
                    638
                ],
                "exceptions": [
                    633
                ],
                "e": [
                    1007,
                    1011,
                    1013,
                    1018,
                    635,
                    636
                ],
                "self.error_handler.add": [
                    636,
                    638
                ],
                "attach_to": [
                    670,
                    659,
                    676,
                    662
                ],
                "middleware": [
                    1313,
                    674,
                    675,
                    1314,
                    680,
                    681,
                    1329,
                    1330,
                    660,
                    661,
                    663,
                    664,
                    665
                ],
                "self.request_middleware.append": [
                    661
                ],
                "self.response_middleware.appendleft": [
                    664
                ],
                "_rn": [
                    672,
                    673,
                    674,
                    675,
                    677,
                    678,
                    679,
                    680,
                    681,
                    671
                ],
                "route_names": [
                    677,
                    671
                ],
                "middleware_or_request": [
                    699,
                    694,
                    695
                ],
                "self.register_middleware": [
                    699,
                    695
                ],
                "partial": [
                    698,
                    1426
                ],
                "static_register": [
                    741
                ],
                "file_or_directory": [
                    744
                ],
                "pattern": [
                    903,
                    745,
                    910,
                    878,
                    880
                ],
                "use_modified_since": [
                    746
                ],
                "use_content_range": [
                    747
                ],
                "stream_large_files": [
                    748
                ],
                "content_type": [
                    752
                ],
                "blueprint": [
                    769,
                    772,
                    773,
                    774,
                    762,
                    763,
                    766,
                    767
                ],
                "BlueprintGroup": [
                    762
                ],
                "item": [
                    763,
                    764
                ],
                "self.blueprint": [
                    764,
                    796
                ],
                "options": [
                    764,
                    774
                ],
                "blueprint.name": [
                    769,
                    772,
                    766,
                    767
                ],
                "self._blueprint_order.append": [
                    773
                ],
                "blueprint.register": [
                    774
                ],
                "warnings.simplefilter": [
                    1265,
                    1148,
                    789,
                    1366
                ],
                "kw": [
                    825,
                    819,
                    822,
                    827
                ],
                "Dict": [
                    819
                ],
                "view_name": [
                    833,
                    821,
                    823,
                    825,
                    827,
                    830
                ],
                "kw.update": [
                    825,
                    822
                ],
                "kwargs.pop": [
                    834,
                    856,
                    822,
                    855,
                    824,
                    858,
                    859,
                    863
                ],
                "view_name.endswith": [
                    833,
                    823
                ],
                "route": [
                    827,
                    828
                ],
                "self.router.find_route_by_view_name": [
                    827
                ],
                "URLBuildError": [
                    913,
                    829,
                    887
                ],
                "filename": [
                    841,
                    834,
                    844,
                    842
                ],
                "folder_": [
                    844,
                    837,
                    838,
                    839
                ],
                "uri.split": [
                    837
                ],
                "folder_.endswith": [
                    838
                ],
                "filename.startswith": [
                    841
                ],
                "uri.endswith": [
                    846
                ],
                "out": [
                    849,
                    923,
                    925,
                    918
                ],
                "matched_params": [
                    852,
                    877
                ],
                "re.findall": [
                    852
                ],
                "re": [
                    896,
                    852,
                    918
                ],
                "self.router.parameter_pattern": [
                    852
                ],
                "anchor": [
                    856,
                    923
                ],
                "external": [
                    864,
                    858,
                    867,
                    860
                ],
                "scheme": [
                    868,
                    923,
                    870,
                    872,
                    859,
                    860
                ],
                "netloc": [
                    864,
                    865,
                    869,
                    870,
                    874,
                    875,
                    923,
                    863
                ],
                "self.config.get": [
                    865
                ],
                "split": [
                    870
                ],
                "netloc.split": [
                    875
                ],
                "match": [
                    877,
                    878
                ],
                "_type": [
                    899,
                    878,
                    903
                ],
                "self.router.parse_parameter_string": [
                    878
                ],
                "specific_pattern": [
                    880,
                    896
                ],
                "supplied_param": [
                    896,
                    903,
                    910,
                    881,
                    884,
                    918,
                    893
                ],
                "kwargs.get": [
                    1137,
                    884
                ],
                "passes_pattern": [
                    896,
                    898
                ],
                "re.match": [
                    896
                ],
                "msg": [
                    913,
                    907,
                    900
                ],
                "_type.__name__": [
                    903
                ],
                "replacement_regex": [
                    916,
                    918
                ],
                "re.sub": [
                    918
                ],
                "query_string": [
                    921,
                    923
                ],
                "urlencode": [
                    921
                ],
                "urlunparse": [
                    923
                ],
                "cancelled": [
                    1000,
                    953,
                    1045,
                    1039
                ],
                "self.router.get": [
                    957
                ],
                "self._run_request_middleware": [
                    962
                ],
                "request.uri_template": [
                    971
                ],
                "ServerError": [
                    973
                ],
                "self._build_endpoint_name": [
                    985,
                    981
                ],
                "isawaitable": [
                    992,
                    1315,
                    1008,
                    1331,
                    1303
                ],
                "self.error_handler.response": [
                    1007
                ],
                "self.error_handler.default": [
                    1012
                ],
                "HTTPResponse": [
                    1016,
                    1023
                ],
                "format_exc": [
                    1018
                ],
                "self._run_response_middleware": [
                    1033
                ],
                "error_logger.exception": [
                    1041,
                    1188
                ],
                "error_logger": [
                    1041,
                    1188
                ],
                "write_callback": [
                    1049,
                    1060
                ],
                "StreamingHTTPResponse": [
                    1050
                ],
                "stream_callback": [
                    1052,
                    1053
                ],
                "SanicTestClient": [
                    1068
                ],
                "SanicASGITestClient": [
                    1072
                ],
                "Optional": [
                    1090,
                    1202,
                    1203,
                    1206,
                    1080,
                    1081,
                    1210,
                    1084,
                    1213
                ],
                "Union": [
                    1083,
                    1205
                ],
                "SSLContext": [
                    1083,
                    1205
                ],
                "socket": [
                    1084,
                    1206
                ],
                "Type": [
                    1086,
                    1207
                ],
                "Protocol": [
                    1086,
                    1207
                ],
                "Any": [
                    1088,
                    1209,
                    1091
                ],
                "auto_reload": [
                    1132,
                    1167,
                    1135,
                    1137,
                    1173,
                    1179
                ],
                "debug": [
                    1378,
                    1379,
                    1160,
                    1134,
                    1264,
                    1392,
                    1365,
                    1429,
                    1147,
                    1277
                ],
                "os.name": [
                    1173,
                    1134
                ],
                "os": [
                    1446,
                    1134,
                    1173,
                    1434,
                    1180
                ],
                "sock": [
                    1256,
                    1162,
                    1388,
                    1139,
                    1279
                ],
                "port": [
                    1446,
                    1159,
                    1257,
                    1450,
                    1387,
                    1140,
                    1276
                ],
                "WebSocketProtocol": [
                    1144,
                    1261
                ],
                "HttpProtocol": [
                    1144,
                    1347,
                    1261
                ],
                "stop_event": [
                    1146,
                    1364,
                    1263
                ],
                "access_log": [
                    1272,
                    1154,
                    1155,
                    1271
                ],
                "self.config.ACCESS_LOG": [
                    1272,
                    1155,
                    1404
                ],
                "server_settings": [
                    1184,
                    1186,
                    1443,
                    1157,
                    1381,
                    1288,
                    1289,
                    1452,
                    1293,
                    1427,
                    1274
                ],
                "self._helper": [
                    1274,
                    1157
                ],
                "ssl": [
                    1448,
                    1161,
                    1355,
                    1357,
                    1358,
                    1389,
                    1363,
                    1278
                ],
                "workers": [
                    1186,
                    1163,
                    1172
                ],
                "backlog": [
                    1282,
                    1403,
                    1165
                ],
                "register_sys_signals": [
                    1402,
                    1166
                ],
                "os.environ.get": [
                    1434,
                    1180,
                    1446
                ],
                "os.environ": [
                    1434,
                    1180,
                    1446
                ],
                "reloader_helpers.watchdog": [
                    1182
                ],
                "reloader_helpers": [
                    1182
                ],
                "serve": [
                    1184,
                    1292
                ],
                "serve_multiple": [
                    1186
                ],
                "logger.info": [
                    1450,
                    1194
                ],
                "logger": [
                    1450,
                    1194,
                    1436,
                    1430
                ],
                "stop": [
                    1198
                ],
                "return_asyncio_server": [
                    1283
                ],
                "self.trigger_events": [
                    1287
                ],
                "server_settings.get": [
                    1288,
                    1289
                ],
                "asyncio_server_kwargs": [
                    1293
                ],
                "AsyncioServer": [
                    1213
                ],
                "events": [
                    1301
                ],
                "result": [
                    1304,
                    1302,
                    1303
                ],
                "named_middleware": [
                    1308,
                    1327,
                    1324,
                    1311
                ],
                "self.named_request_middleware.get": [
                    1308
                ],
                "request_name": [
                    1325,
                    1309
                ],
                "applicable_middleware": [
                    1312,
                    1313,
                    1327,
                    1328,
                    1329,
                    1311
                ],
                "self.named_response_middleware.get": [
                    1324
                ],
                "_response": [
                    1330,
                    1331,
                    1332,
                    1333,
                    1334
                ],
                "cert": [
                    1362,
                    1357,
                    1359
                ],
                "ssl.get": [
                    1357,
                    1358
                ],
                "key": [
                    1362,
                    1358,
                    1359
                ],
                "context": [
                    1361,
                    1362,
                    1363
                ],
                "create_default_context": [
                    1361
                ],
                "Purpose.CLIENT_AUTH": [
                    1361
                ],
                "Purpose": [
                    1361
                ],
                "context.load_cert_chain": [
                    1362
                ],
                "self.config.PROXIES_COUNT": [
                    1371
                ],
                "self.error_handler.debug": [
                    1378
                ],
                "Signal": [
                    1391
                ],
                "self.handle_request": [
                    1393
                ],
                "self.config.REQUEST_TIMEOUT": [
                    1395
                ],
                "self.config.RESPONSE_TIMEOUT": [
                    1396
                ],
                "self.config.KEEP_ALIVE_TIMEOUT": [
                    1397
                ],
                "self.config.REQUEST_MAX_SIZE": [
                    1398
                ],
                "self.config.REQUEST_BUFFER_QUEUE_SIZE": [
                    1399
                ],
                "self.config.KEEP_ALIVE": [
                    1400
                ],
                "self.config.WEBSOCKET_MAX_SIZE": [
                    1405
                ],
                "self.config.WEBSOCKET_MAX_QUEUE": [
                    1406
                ],
                "self.config.WEBSOCKET_READ_LIMIT": [
                    1407
                ],
                "self.config.WEBSOCKET_WRITE_LIMIT": [
                    1408
                ],
                "self.config.GRACEFUL_SHUTDOWN_TIMEOUT": [
                    1409
                ],
                "event_name": [
                    1416,
                    1422
                ],
                "settings_name": [
                    1416,
                    1427
                ],
                "reverse": [
                    1416,
                    1423
                ],
                "listeners": [
                    1424,
                    1426,
                    1427,
                    1422
                ],
                "copy": [
                    1422
                ],
                "listeners.reverse": [
                    1424
                ],
                "logger.setLevel": [
                    1430
                ],
                "logging.DEBUG": [
                    1430
                ],
                "self.config.LOGO": [
                    1433,
                    1437,
                    1438
                ],
                "logger.debug": [
                    1436
                ],
                "BASE_LOGO": [
                    1439
                ],
                "run_async": [
                    1442
                ],
                "proto": [
                    1449,
                    1450,
                    1447
                ],
                "parts": [
                    1456,
                    1455
                ],
                "join": [
                    1456
                ],
                "asgi_app": [
                    1467,
                    1468
                ],
                "ASGIApp.create": [
                    1467
                ],
                "ASGIApp": [
                    1467
                ],
                "scope": [
                    1467
                ],
                "receive": [
                    1467
                ],
                "send": [
                    1467
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/sanic_3/tests/test_url_for.py",
                "test_function": "test_routes_with_host",
                "test_function_code": "def test_routes_with_host(app):\n    @app.route(\"/\")\n    @app.route(\"/\", name=\"hostindex\", host=\"example.com\")\n    @app.route(\"/path\", name=\"hostpath\", host=\"path.example.com\")\n    def index(request):\n        pass\n\n    assert app.url_for(\"index\") == \"/\"\n    assert app.url_for(\"hostindex\") == \"/\"\n    assert app.url_for(\"hostpath\") == \"/path\"\n    assert app.url_for(\"hostindex\", _external=True) == \"http://example.com/\"\n    assert app.url_for(\"hostpath\", _external=True) == \"http://path.example.com/path\"",
                "test_error": "AssertionError: assert 'example.com' == '/'   - example.com   + /",
                "full_test_error": "app = <sanic.app.Sanic object at 0x7f12a44d13a0>\n\n    def test_routes_with_host(app):\n        @app.route(\"/\")\n        @app.route(\"/\", name=\"hostindex\", host=\"example.com\")\n        @app.route(\"/path\", name=\"hostpath\", host=\"path.example.com\")\n        def index(request):\n            pass\n    \n        assert app.url_for(\"index\") == \"/\"\n>       assert app.url_for(\"hostindex\") == \"/\"\nE       AssertionError: assert 'example.com' == '/'\nE         - example.com\nE         + /\n\ntests/test_url_for.py:9: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}