{
    "luigi:7": {
        "/Volumes/SSD2T/bgp_envs/repos/luigi_7/luigi/scheduler.py": {
            "buggy_functions": [
                {
                    "function_name": "add_task",
                    "function_code": "@rpc_method()\ndef add_task(self, task_id=None, status=PENDING, runnable=True,\n             deps=None, new_deps=None, expl=None, resources=None,\n             priority=0, family='', module=None, params=None,\n             assistant=False, tracking_url=None, worker=None, batchable=None,\n             batch_id=None, retry_policy_dict={}, owners=None, **kwargs):\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    assert worker is not None\n    worker_id = worker\n    worker = self._update_worker(worker_id)\n    retry_policy = self._generate_retry_policy(retry_policy_dict)\n\n    if worker.enabled:\n        _default_task = self._make_task(\n            task_id=task_id, status=PENDING, deps=deps, resources=resources,\n            priority=priority, family=family, module=module, params=params,\n        )\n    else:\n        _default_task = None\n\n    task = self._state.get_task(task_id, setdefault=_default_task)\n\n    if task is None or (task.status != RUNNING and not worker.enabled):\n        return\n\n    # for setting priority, we'll sometimes create tasks with unset family and params\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n\n    if batch_id is not None:\n        task.batch_id = batch_id\n    if status == RUNNING and not task.worker_running:\n        task.worker_running = worker_id\n        if batch_id:\n            task.resources_running = self._state.get_batch_running_tasks(batch_id)[0].resources_running\n        task.time_running = time.time()\n\n    if tracking_url is not None or task.status != RUNNING:\n        task.tracking_url = tracking_url\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.tracking_url = tracking_url\n\n    if batchable is not None:\n        task.batchable = batchable\n\n    if task.remove is not None:\n        task.remove = None  # unmark task for removal so it isn't removed after being added\n\n    if expl is not None:\n        task.expl = expl\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.expl = expl\n\n    if not (task.status in (RUNNING, BATCH_RUNNING) and status == PENDING) or new_deps:\n        # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n        if status == PENDING or status != task.status:\n            # Update the DB only if there was a acctual change, to prevent noise.\n            # We also check for status == PENDING b/c that's the default value\n            # (so checking for status != task.status woule lie)\n            self._update_task_history(task, status)\n        self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n\n    if status == FAILED and self._config.batch_emails:\n        batched_params, _ = self._state.get_batcher(worker_id, family)\n        if batched_params:\n            unbatched_params = {\n                param: value\n                for param, value in six.iteritems(task.params)\n                if param not in batched_params\n            }\n        else:\n            unbatched_params = task.params\n        try:\n            expl_raw = json.loads(expl)\n        except ValueError:\n            expl_raw = expl\n\n        self._email_batcher.add_failure(\n            task.pretty_id, task.family, unbatched_params, expl_raw, owners)\n        if task.status == DISABLED:\n            self._email_batcher.add_disable(\n                task.pretty_id, task.family, unbatched_params, owners)\n\n    if deps is not None:\n        task.deps = set(deps)\n\n    if new_deps is not None:\n        task.deps.update(new_deps)\n\n    if resources is not None:\n        task.resources = resources\n\n    if worker.enabled and not assistant:\n        task.stakeholders.add(worker_id)\n\n        # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n        # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n\n    self._update_priority(task, priority, worker_id)\n\n    # Because some tasks (non-dynamic dependencies) are `_make_task`ed\n    # before we know their retry_policy, we always set it here\n    task.retry_policy = retry_policy\n\n    if runnable and status != FAILED and worker.enabled:\n        task.workers.add(worker_id)\n        self._state.get_worker(worker_id).tasks.add(task)\n        task.runnable = runnable\n",
                    "decorators": [
                        "rpc_method()"
                    ],
                    "docstring": "* add task identified by task_id if it doesn't exist\n* if deps is not None, update dependency list\n* update status of task\n* add additional workers/stakeholders\n* update priority when needed",
                    "start_line": 761,
                    "end_line": 883,
                    "variables": {
                        "PENDING": [
                            833,
                            828,
                            781,
                            762,
                            826
                        ],
                        "worker": [
                            865,
                            774,
                            775,
                            776,
                            779,
                            880,
                            789
                        ],
                        "worker_id": [
                            866,
                            803,
                            836,
                            775,
                            776,
                            872,
                            874,
                            881,
                            882
                        ],
                        "self._update_worker": [
                            776
                        ],
                        "self": [
                            832,
                            833,
                            835,
                            836,
                            805,
                            871,
                            776,
                            777,
                            874,
                            811,
                            780,
                            850,
                            787,
                            882,
                            853,
                            823
                        ],
                        "retry_policy": [
                            777,
                            878
                        ],
                        "self._generate_retry_policy": [
                            777
                        ],
                        "retry_policy_dict": [
                            777
                        ],
                        "worker.enabled": [
                            880,
                            865,
                            779,
                            789
                        ],
                        "_default_task": [
                            785,
                            787,
                            780
                        ],
                        "self._make_task": [
                            780,
                            871
                        ],
                        "task_id": [
                            787,
                            781
                        ],
                        "deps": [
                            856,
                            857,
                            781
                        ],
                        "resources": [
                            781,
                            862,
                            863
                        ],
                        "priority": [
                            874,
                            782,
                            871
                        ],
                        "family": [
                            794,
                            836,
                            782
                        ],
                        "module": [
                            796,
                            782
                        ],
                        "params": [
                            782,
                            798
                        ],
                        "task": [
                            787,
                            789,
                            793,
                            794,
                            795,
                            796,
                            797,
                            798,
                            801,
                            802,
                            803,
                            805,
                            806,
                            808,
                            809,
                            810,
                            811,
                            815,
                            817,
                            818,
                            821,
                            822,
                            823,
                            826,
                            828,
                            832,
                            833,
                            840,
                            844,
                            851,
                            852,
                            854,
                            857,
                            860,
                            863,
                            866,
                            870,
                            874,
                            878,
                            881,
                            882,
                            883
                        ],
                        "self._state.get_task": [
                            787,
                            871
                        ],
                        "self._state": [
                            833,
                            836,
                            805,
                            871,
                            811,
                            882,
                            787,
                            823
                        ],
                        "task.status": [
                            808,
                            852,
                            789,
                            826,
                            828
                        ],
                        "RUNNING": [
                            808,
                            802,
                            826,
                            789
                        ],
                        "task.family": [
                            793,
                            794,
                            851,
                            854
                        ],
                        "getattr": [
                            795
                        ],
                        "task.module": [
                            796
                        ],
                        "task.params": [
                            840,
                            844,
                            797,
                            798
                        ],
                        "_get_default": [
                            798
                        ],
                        "batch_id": [
                            800,
                            801,
                            804,
                            805
                        ],
                        "task.batch_id": [
                            801,
                            810,
                            811,
                            822,
                            823
                        ],
                        "status": [
                            832,
                            833,
                            802,
                            835,
                            880,
                            826,
                            828
                        ],
                        "task.worker_running": [
                            802,
                            803
                        ],
                        "task.resources_running": [
                            805
                        ],
                        "resources_running": [
                            805
                        ],
                        "self._state.get_batch_running_tasks": [
                            811,
                            805,
                            823
                        ],
                        "task.time_running": [
                            806
                        ],
                        "time.time": [
                            806
                        ],
                        "time": [
                            806
                        ],
                        "tracking_url": [
                            808,
                            809,
                            812
                        ],
                        "task.tracking_url": [
                            809
                        ],
                        "batch_task": [
                            824,
                            811,
                            812,
                            823
                        ],
                        "batch_task.tracking_url": [
                            812
                        ],
                        "batchable": [
                            814,
                            815
                        ],
                        "task.batchable": [
                            815
                        ],
                        "task.remove": [
                            817,
                            818
                        ],
                        "expl": [
                            846,
                            848,
                            820,
                            821,
                            824
                        ],
                        "task.expl": [
                            821
                        ],
                        "batch_task.expl": [
                            824
                        ],
                        "BATCH_RUNNING": [
                            826
                        ],
                        "new_deps": [
                            826,
                            859,
                            860
                        ],
                        "self._update_task_history": [
                            832
                        ],
                        "self._state.set_status": [
                            833
                        ],
                        "SUSPENDED": [
                            833
                        ],
                        "self._config": [
                            833,
                            835
                        ],
                        "FAILED": [
                            880,
                            835
                        ],
                        "self._config.batch_emails": [
                            835
                        ],
                        "batched_params": [
                            841,
                            836,
                            837
                        ],
                        "_": [
                            836
                        ],
                        "self._state.get_batcher": [
                            836
                        ],
                        "unbatched_params": [
                            854,
                            851,
                            844,
                            838
                        ],
                        "param": [
                            840,
                            841,
                            839
                        ],
                        "value": [
                            840,
                            839
                        ],
                        "six.iteritems": [
                            840
                        ],
                        "six": [
                            840
                        ],
                        "expl_raw": [
                            848,
                            851,
                            846
                        ],
                        "json.loads": [
                            846
                        ],
                        "json": [
                            846
                        ],
                        "ValueError": [
                            847
                        ],
                        "self._email_batcher.add_failure": [
                            850
                        ],
                        "self._email_batcher": [
                            850,
                            853
                        ],
                        "task.pretty_id": [
                            851,
                            854
                        ],
                        "owners": [
                            851,
                            854
                        ],
                        "DISABLED": [
                            852
                        ],
                        "self._email_batcher.add_disable": [
                            853
                        ],
                        "task.deps": [
                            857,
                            860,
                            870
                        ],
                        "set": [
                            857
                        ],
                        "task.deps.update": [
                            860
                        ],
                        "task.resources": [
                            863
                        ],
                        "assistant": [
                            865
                        ],
                        "task.stakeholders.add": [
                            866
                        ],
                        "task.stakeholders": [
                            866
                        ],
                        "dep": [
                            870,
                            871
                        ],
                        "t": [
                            872,
                            871
                        ],
                        "UNKNOWN": [
                            871
                        ],
                        "t.stakeholders.add": [
                            872
                        ],
                        "t.stakeholders": [
                            872
                        ],
                        "self._update_priority": [
                            874
                        ],
                        "task.retry_policy": [
                            878
                        ],
                        "runnable": [
                            880,
                            883
                        ],
                        "task.workers.add": [
                            881
                        ],
                        "task.workers": [
                            881
                        ],
                        "tasks.add": [
                            882
                        ],
                        "tasks": [
                            882
                        ],
                        "self._state.get_worker": [
                            882
                        ],
                        "task.runnable": [
                            883
                        ],
                        "rpc_method": [
                            761
                        ]
                    },
                    "filtered_variables": {
                        "PENDING": [
                            833,
                            828,
                            781,
                            762,
                            826
                        ],
                        "worker": [
                            865,
                            774,
                            775,
                            776,
                            779,
                            880,
                            789
                        ],
                        "worker_id": [
                            866,
                            803,
                            836,
                            775,
                            776,
                            872,
                            874,
                            881,
                            882
                        ],
                        "self._update_worker": [
                            776
                        ],
                        "self": [
                            832,
                            833,
                            835,
                            836,
                            805,
                            871,
                            776,
                            777,
                            874,
                            811,
                            780,
                            850,
                            787,
                            882,
                            853,
                            823
                        ],
                        "retry_policy": [
                            777,
                            878
                        ],
                        "self._generate_retry_policy": [
                            777
                        ],
                        "retry_policy_dict": [
                            777
                        ],
                        "worker.enabled": [
                            880,
                            865,
                            779,
                            789
                        ],
                        "_default_task": [
                            785,
                            787,
                            780
                        ],
                        "self._make_task": [
                            780,
                            871
                        ],
                        "task_id": [
                            787,
                            781
                        ],
                        "deps": [
                            856,
                            857,
                            781
                        ],
                        "resources": [
                            781,
                            862,
                            863
                        ],
                        "priority": [
                            874,
                            782,
                            871
                        ],
                        "family": [
                            794,
                            836,
                            782
                        ],
                        "module": [
                            796,
                            782
                        ],
                        "params": [
                            782,
                            798
                        ],
                        "task": [
                            787,
                            789,
                            793,
                            794,
                            795,
                            796,
                            797,
                            798,
                            801,
                            802,
                            803,
                            805,
                            806,
                            808,
                            809,
                            810,
                            811,
                            815,
                            817,
                            818,
                            821,
                            822,
                            823,
                            826,
                            828,
                            832,
                            833,
                            840,
                            844,
                            851,
                            852,
                            854,
                            857,
                            860,
                            863,
                            866,
                            870,
                            874,
                            878,
                            881,
                            882,
                            883
                        ],
                        "self._state.get_task": [
                            787,
                            871
                        ],
                        "self._state": [
                            833,
                            836,
                            805,
                            871,
                            811,
                            882,
                            787,
                            823
                        ],
                        "task.status": [
                            808,
                            852,
                            789,
                            826,
                            828
                        ],
                        "RUNNING": [
                            808,
                            802,
                            826,
                            789
                        ],
                        "task.family": [
                            793,
                            794,
                            851,
                            854
                        ],
                        "task.module": [
                            796
                        ],
                        "task.params": [
                            840,
                            844,
                            797,
                            798
                        ],
                        "_get_default": [
                            798
                        ],
                        "batch_id": [
                            800,
                            801,
                            804,
                            805
                        ],
                        "task.batch_id": [
                            801,
                            810,
                            811,
                            822,
                            823
                        ],
                        "status": [
                            832,
                            833,
                            802,
                            835,
                            880,
                            826,
                            828
                        ],
                        "task.worker_running": [
                            802,
                            803
                        ],
                        "task.resources_running": [
                            805
                        ],
                        "resources_running": [
                            805
                        ],
                        "self._state.get_batch_running_tasks": [
                            811,
                            805,
                            823
                        ],
                        "task.time_running": [
                            806
                        ],
                        "time.time": [
                            806
                        ],
                        "time": [
                            806
                        ],
                        "tracking_url": [
                            808,
                            809,
                            812
                        ],
                        "task.tracking_url": [
                            809
                        ],
                        "batch_task": [
                            824,
                            811,
                            812,
                            823
                        ],
                        "batch_task.tracking_url": [
                            812
                        ],
                        "batchable": [
                            814,
                            815
                        ],
                        "task.batchable": [
                            815
                        ],
                        "task.remove": [
                            817,
                            818
                        ],
                        "expl": [
                            846,
                            848,
                            820,
                            821,
                            824
                        ],
                        "task.expl": [
                            821
                        ],
                        "batch_task.expl": [
                            824
                        ],
                        "BATCH_RUNNING": [
                            826
                        ],
                        "new_deps": [
                            826,
                            859,
                            860
                        ],
                        "self._update_task_history": [
                            832
                        ],
                        "self._state.set_status": [
                            833
                        ],
                        "SUSPENDED": [
                            833
                        ],
                        "self._config": [
                            833,
                            835
                        ],
                        "FAILED": [
                            880,
                            835
                        ],
                        "self._config.batch_emails": [
                            835
                        ],
                        "batched_params": [
                            841,
                            836,
                            837
                        ],
                        "_": [
                            836
                        ],
                        "self._state.get_batcher": [
                            836
                        ],
                        "unbatched_params": [
                            854,
                            851,
                            844,
                            838
                        ],
                        "param": [
                            840,
                            841,
                            839
                        ],
                        "value": [
                            840,
                            839
                        ],
                        "six.iteritems": [
                            840
                        ],
                        "six": [
                            840
                        ],
                        "expl_raw": [
                            848,
                            851,
                            846
                        ],
                        "json.loads": [
                            846
                        ],
                        "json": [
                            846
                        ],
                        "self._email_batcher.add_failure": [
                            850
                        ],
                        "self._email_batcher": [
                            850,
                            853
                        ],
                        "task.pretty_id": [
                            851,
                            854
                        ],
                        "owners": [
                            851,
                            854
                        ],
                        "DISABLED": [
                            852
                        ],
                        "self._email_batcher.add_disable": [
                            853
                        ],
                        "task.deps": [
                            857,
                            860,
                            870
                        ],
                        "task.deps.update": [
                            860
                        ],
                        "task.resources": [
                            863
                        ],
                        "assistant": [
                            865
                        ],
                        "task.stakeholders.add": [
                            866
                        ],
                        "task.stakeholders": [
                            866
                        ],
                        "dep": [
                            870,
                            871
                        ],
                        "t": [
                            872,
                            871
                        ],
                        "UNKNOWN": [
                            871
                        ],
                        "t.stakeholders.add": [
                            872
                        ],
                        "t.stakeholders": [
                            872
                        ],
                        "self._update_priority": [
                            874
                        ],
                        "task.retry_policy": [
                            878
                        ],
                        "runnable": [
                            880,
                            883
                        ],
                        "task.workers.add": [
                            881
                        ],
                        "task.workers": [
                            881
                        ],
                        "tasks.add": [
                            882
                        ],
                        "tasks": [
                            882
                        ],
                        "self._state.get_worker": [
                            882
                        ],
                        "task.runnable": [
                            883
                        ],
                        "rpc_method": [
                            761
                        ]
                    },
                    "diff_line_number": 826,
                    "class_data": {
                        "signature": "class Scheduler(object)",
                        "docstring": "Async scheduler that can handle multiple workers, etc.\n\nCan be run locally or on a server (using RemoteScheduler + server.Server).",
                        "constructor_docstring": "Keyword Arguments:\n:param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n:param resources: a dict of str->int constraints\n:param task_history_impl: ignore config and use this object as the task history",
                        "functions": [
                            "def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n    \"\"\"\n    Keyword Arguments:\n    :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n    :param resources: a dict of str->int constraints\n    :param task_history_impl: ignore config and use this object as the task history\n    \"\"\"\n    self._config = config or scheduler(**kwargs)\n    self._state = SimpleTaskState(self._config.state_path)\n    if task_history_impl:\n        self._task_history = task_history_impl\n    elif self._config.record_task_history:\n        from luigi import db_task_history\n        self._task_history = db_task_history.DbTaskHistory()\n    else:\n        self._task_history = history.NopHistory()\n    self._resources = resources or configuration.get_config().getintdict('resources')\n    self._make_task = functools.partial(Task, retry_policy=self._config._get_retry_policy())\n    self._worker_requests = {}\n    self._paused = False\n    if self._config.batch_emails:\n        self._email_batcher = BatchNotifier()",
                            "def load(self):\n    self._state.load()",
                            "def dump(self):\n    self._state.dump()\n    if self._config.batch_emails:\n        self._email_batcher.send_email()",
                            "@rpc_method()\ndef prune(self):\n    logger.info('Starting pruning of task graph')\n    self._prune_workers()\n    self._prune_tasks()\n    self._prune_emails()\n    logger.info('Done pruning task graph')",
                            "def _prune_workers(self):\n    remove_workers = []\n    for worker in self._state.get_active_workers():\n        if worker.prune(self._config):\n            logger.debug('Worker %s timed out (no contact for >=%ss)', worker, self._config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n    self._state.inactivate_workers(remove_workers)",
                            "def _prune_tasks(self):\n    assistant_ids = set((w.id for w in self._state.get_assistants()))\n    remove_tasks = []\n    for task in self._state.get_active_tasks():\n        self._state.fail_dead_worker_task(task, self._config, assistant_ids)\n        self._state.update_status(task, self._config)\n        if self._state.may_prune(task):\n            logger.info('Removing task %r', task.id)\n            remove_tasks.append(task.id)\n    self._state.inactivate_tasks(remove_tasks)",
                            "def _prune_emails(self):\n    if self._config.batch_emails:\n        self._email_batcher.update()",
                            "def _update_worker(self, worker_id, worker_reference=None, get_work=False):\n    worker = self._state.get_worker(worker_id)\n    worker.update(worker_reference, get_work=get_work)\n    return worker",
                            "def _update_priority(self, task, prio, worker):\n    \"\"\"\n    Update priority of the given task.\n\n    Priority can only be increased.\n    If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n    \"\"\"\n    task.priority = prio = max(prio, task.priority)\n    for dep in task.deps or []:\n        t = self._state.get_task(dep)\n        if t is not None and prio > t.priority:\n            self._update_priority(t, prio, worker)",
                            "@rpc_method()\ndef add_task_batcher(self, worker, task_family, batched_args, max_batch_size=float('inf')):\n    self._state.set_batcher(worker, task_family, batched_args, max_batch_size)",
                            "@rpc_method()\ndef forgive_failures(self, task_id=None):\n    status = PENDING\n    task = self._state.get_task(task_id)\n    if task is None:\n        return {'task_id': task_id, 'status': None}\n    if task.status == FAILED:\n        self._update_task_history(task, status)\n        self._state.set_status(task, status, self._config)\n    return {'task_id': task_id, 'status': task.status}",
                            "@rpc_method()\ndef add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, tracking_url=None, worker=None, batchable=None, batch_id=None, retry_policy_dict={}, owners=None, **kwargs):\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    assert worker is not None\n    worker_id = worker\n    worker = self._update_worker(worker_id)\n    retry_policy = self._generate_retry_policy(retry_policy_dict)\n    if worker.enabled:\n        _default_task = self._make_task(task_id=task_id, status=PENDING, deps=deps, resources=resources, priority=priority, family=family, module=module, params=params)\n    else:\n        _default_task = None\n    task = self._state.get_task(task_id, setdefault=_default_task)\n    if task is None or (task.status != RUNNING and (not worker.enabled)):\n        return\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n    if batch_id is not None:\n        task.batch_id = batch_id\n    if status == RUNNING and (not task.worker_running):\n        task.worker_running = worker_id\n        if batch_id:\n            task.resources_running = self._state.get_batch_running_tasks(batch_id)[0].resources_running\n        task.time_running = time.time()\n    if tracking_url is not None or task.status != RUNNING:\n        task.tracking_url = tracking_url\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.tracking_url = tracking_url\n    if batchable is not None:\n        task.batchable = batchable\n    if task.remove is not None:\n        task.remove = None\n    if expl is not None:\n        task.expl = expl\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.expl = expl\n    if not (task.status in (RUNNING, BATCH_RUNNING) and status == PENDING) or new_deps:\n        if status == PENDING or status != task.status:\n            self._update_task_history(task, status)\n        self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n    if status == FAILED and self._config.batch_emails:\n        batched_params, _ = self._state.get_batcher(worker_id, family)\n        if batched_params:\n            unbatched_params = {param: value for param, value in six.iteritems(task.params) if param not in batched_params}\n        else:\n            unbatched_params = task.params\n        try:\n            expl_raw = json.loads(expl)\n        except ValueError:\n            expl_raw = expl\n        self._email_batcher.add_failure(task.pretty_id, task.family, unbatched_params, expl_raw, owners)\n        if task.status == DISABLED:\n            self._email_batcher.add_disable(task.pretty_id, task.family, unbatched_params, owners)\n    if deps is not None:\n        task.deps = set(deps)\n    if new_deps is not None:\n        task.deps.update(new_deps)\n    if resources is not None:\n        task.resources = resources\n    if worker.enabled and (not assistant):\n        task.stakeholders.add(worker_id)\n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n    self._update_priority(task, priority, worker_id)\n    task.retry_policy = retry_policy\n    if runnable and status != FAILED and worker.enabled:\n        task.workers.add(worker_id)\n        self._state.get_worker(worker_id).tasks.add(task)\n        task.runnable = runnable",
                            "@rpc_method()\ndef announce_scheduling_failure(self, task_name, family, params, expl, owners, **kwargs):\n    if not self._config.batch_emails:\n        return\n    worker_id = kwargs['worker']\n    batched_params, _ = self._state.get_batcher(worker_id, family)\n    if batched_params:\n        unbatched_params = {param: value for param, value in six.iteritems(params) if param not in batched_params}\n    else:\n        unbatched_params = params\n    self._email_batcher.add_scheduling_fail(task_name, family, unbatched_params, expl, owners)",
                            "@rpc_method()\ndef add_worker(self, worker, info, **kwargs):\n    self._state.get_worker(worker).add_info(info)",
                            "@rpc_method()\ndef disable_worker(self, worker):\n    self._state.disable_workers({worker})",
                            "@rpc_method()\ndef set_worker_processes(self, worker, n):\n    self._state.get_worker(worker).add_rpc_message('set_worker_processes', n=n)",
                            "@rpc_method()\ndef is_paused(self):\n    return {'paused': self._paused}",
                            "@rpc_method()\ndef pause(self):\n    self._paused = True",
                            "@rpc_method()\ndef unpause(self):\n    self._paused = False",
                            "@rpc_method()\ndef update_resources(self, **resources):\n    if self._resources is None:\n        self._resources = {}\n    self._resources.update(resources)",
                            "@rpc_method()\ndef update_resource(self, resource, amount):\n    if not isinstance(amount, int) or amount < 0:\n        return False\n    self._resources[resource] = amount\n    return True",
                            "def _generate_retry_policy(self, task_retry_policy_dict):\n    retry_policy_dict = self._config._get_retry_policy()._asdict()\n    retry_policy_dict.update({k: v for k, v in six.iteritems(task_retry_policy_dict) if v is not None})\n    return RetryPolicy(**retry_policy_dict)",
                            "def _has_resources(self, needed_resources, used_resources):\n    if needed_resources is None:\n        return True\n    available_resources = self._resources or {}\n    for resource, amount in six.iteritems(needed_resources):\n        if amount + used_resources[resource] > available_resources.get(resource, 1):\n            return False\n    return True",
                            "def _used_resources(self):\n    used_resources = collections.defaultdict(int)\n    if self._resources is not None:\n        for task in self._state.get_active_tasks_by_status(RUNNING):\n            if getattr(task, 'resources_running', task.resources):\n                for resource, amount in six.iteritems(getattr(task, 'resources_running', task.resources)):\n                    used_resources[resource] += amount\n    return used_resources",
                            "def _rank(self, task):\n    \"\"\"\n    Return worker's rank function for task scheduling.\n\n    :return:\n    \"\"\"\n    return (task.priority, -task.time)",
                            "def _schedulable(self, task):\n    if task.status != PENDING:\n        return False\n    for dep in task.deps:\n        dep_task = self._state.get_task(dep, default=None)\n        if dep_task is None or dep_task.status != DONE:\n            return False\n    return True",
                            "def _reset_orphaned_batch_running_tasks(self, worker_id):\n    running_batch_ids = {task.batch_id for task in self._state.get_active_tasks_by_status(RUNNING) if task.worker_running == worker_id}\n    orphaned_tasks = [task for task in self._state.get_active_tasks_by_status(BATCH_RUNNING) if task.worker_running == worker_id and task.batch_id not in running_batch_ids]\n    for task in orphaned_tasks:\n        self._state.set_status(task, PENDING)",
                            "@rpc_method()\ndef count_pending(self, worker):\n    worker_id, worker = (worker, self._state.get_worker(worker))\n    num_pending, num_unique_pending, num_pending_last_scheduled = (0, 0, 0)\n    running_tasks = []\n    upstream_status_table = {}\n    for task in worker.get_tasks(self._state, RUNNING):\n        if self._upstream_status(task.id, upstream_status_table) == UPSTREAM_DISABLED:\n            continue\n        other_worker = self._state.get_worker(task.worker_running)\n        if other_worker is not None:\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            more_info.update(other_worker.info)\n            running_tasks.append(more_info)\n    for task in worker.get_tasks(self._state, PENDING, FAILED):\n        if self._upstream_status(task.id, upstream_status_table) == UPSTREAM_DISABLED:\n            continue\n        num_pending += 1\n        num_unique_pending += int(len(task.workers) == 1)\n        num_pending_last_scheduled += int(task.workers.peek(last=True) == worker_id)\n    return {'n_pending_tasks': num_pending, 'n_unique_pending': num_unique_pending, 'n_pending_last_scheduled': num_pending_last_scheduled, 'worker_state': worker.state, 'running_tasks': running_tasks}",
                            "@rpc_method(allow_null=False)\ndef get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    if self._config.prune_on_get_work:\n        self.prune()\n    assert worker is not None\n    worker_id = worker\n    worker = self._update_worker(worker_id, worker_reference={'host': host}, get_work=True)\n    if not worker.enabled:\n        reply = {'n_pending_tasks': 0, 'running_tasks': [], 'task_id': None, 'n_unique_pending': 0, 'worker_state': worker.state}\n        return reply\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    batched_params, unbatched_params, batched_tasks, max_batch_size = (None, None, [], 1)\n    best_task = None\n    if current_tasks is not None:\n        ct_set = set(current_tasks)\n        for task in sorted(self._state.get_active_tasks_by_status(RUNNING), key=self._rank):\n            if task.worker_running == worker_id and task.id not in ct_set:\n                best_task = task\n    if current_tasks is not None:\n        self._reset_orphaned_batch_running_tasks(worker_id)\n    greedy_resources = collections.defaultdict(int)\n    worker = self._state.get_worker(worker_id)\n    if self._paused:\n        relevant_tasks = []\n    elif worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_tasks(self._state, PENDING, RUNNING)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()\n    else:\n        relevant_tasks = self._state.get_active_tasks_by_status(PENDING, RUNNING)\n        used_resources = self._used_resources()\n        activity_limit = time.time() - self._config.worker_disconnect_delay\n        active_workers = self._state.get_active_workers(last_get_work_gt=activity_limit)\n        greedy_workers = dict(((worker.id, worker.info.get('workers', 1)) for worker in active_workers))\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n    for task in tasks:\n        if best_task and batched_params and (task.family == best_task.family) and (len(batched_tasks) < max_batch_size) and task.is_batchable() and all((task.params.get(name) == value for name, value in unbatched_params.items())) and (task.resources == best_task.resources) and self._schedulable(task):\n            for name, params in batched_params.items():\n                params.append(task.params.get(name))\n            batched_tasks.append(task)\n        if best_task:\n            continue\n        if task.status == RUNNING and task.worker_running in greedy_workers:\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems(getattr(task, 'resources_running', task.resources) or {}):\n                greedy_resources[resource] += amount\n        if self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            in_workers = assistant and task.runnable or worker_id in task.workers\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n                batch_param_names, max_batch_size = self._state.get_batcher(worker_id, task.family)\n                if batch_param_names and task.is_batchable():\n                    try:\n                        batched_params = {name: [task.params[name]] for name in batch_param_names}\n                        unbatched_params = {name: value for name, value in task.params.items() if name not in batched_params}\n                        batched_tasks.append(task)\n                    except KeyError:\n                        batched_params, unbatched_params = (None, None)\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        greedy_workers[task_worker] -= 1\n                        for resource, amount in six.iteritems(task.resources or {}):\n                            greedy_resources[resource] += amount\n                        break\n    reply = self.count_pending(worker_id)\n    if len(batched_tasks) > 1:\n        batch_string = '|'.join((task.id for task in batched_tasks))\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n        combined_params = best_task.params.copy()\n        combined_params.update(batched_params)\n        reply['task_id'] = None\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = combined_params\n        reply['batch_id'] = batch_id\n        reply['batch_task_ids'] = [task.id for task in batched_tasks]\n    elif best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.resources_running = best_task.resources\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n    else:\n        reply['task_id'] = None\n    return reply",
                            "@rpc_method(attempts=1)\ndef ping(self, **kwargs):\n    worker_id = kwargs['worker']\n    worker = self._update_worker(worker_id)\n    return {'rpc_messages': worker.fetch_rpc_messages()}",
                            "def _upstream_status(self, task_id, upstream_status_table):\n    if task_id in upstream_status_table:\n        return upstream_status_table[task_id]\n    elif self._state.has_task(task_id):\n        task_stack = [task_id]\n        while task_stack:\n            dep_id = task_stack.pop()\n            dep = self._state.get_task(dep_id)\n            if dep:\n                if dep.status == DONE:\n                    continue\n                if dep_id not in upstream_status_table:\n                    if dep.status == PENDING and dep.deps:\n                        task_stack += [dep_id] + list(dep.deps)\n                        upstream_status_table[dep_id] = ''\n                    else:\n                        dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                        upstream_status_table[dep_id] = dep_status\n                elif upstream_status_table[dep_id] == '' and dep.deps:\n                    status = max((upstream_status_table.get(a_task_id, '') for a_task_id in dep.deps), key=UPSTREAM_SEVERITY_KEY)\n                    upstream_status_table[dep_id] = status\n        return upstream_status_table[dep_id]",
                            "def _serialize_task(self, task_id, include_deps=True, deps=None):\n    task = self._state.get_task(task_id)\n    ret = {'display_name': task.pretty_id, 'status': task.status, 'workers': list(task.workers), 'worker_running': task.worker_running, 'time_running': getattr(task, 'time_running', None), 'start_time': task.time, 'last_updated': getattr(task, 'updated', task.time), 'params': task.params, 'name': task.family, 'priority': task.priority, 'resources': task.resources, 'tracking_url': getattr(task, 'tracking_url', None), 'status_message': getattr(task, 'status_message', None)}\n    if task.status == DISABLED:\n        ret['re_enable_able'] = task.scheduler_disable_time is not None\n    if include_deps:\n        ret['deps'] = list(task.deps if deps is None else deps)\n    return ret",
                            "@rpc_method()\ndef graph(self, **kwargs):\n    self.prune()\n    serialized = {}\n    seen = set()\n    for task in self._state.get_active_tasks():\n        serialized.update(self._traverse_graph(task.id, seen))\n    return serialized",
                            "def _filter_done(self, task_ids):\n    for task_id in task_ids:\n        task = self._state.get_task(task_id)\n        if task is None or task.status != DONE:\n            yield task_id",
                            "def _traverse_graph(self, root_task_id, seen=None, dep_func=None, include_done=True):\n    \"\"\" Returns the dependency graph rooted at task_id\n\n    This does a breadth-first traversal to find the nodes closest to the\n    root before hitting the scheduler.max_graph_nodes limit.\n\n    :param root_task_id: the id of the graph's root\n    :return: A map of task id to serialized node\n    \"\"\"\n    if seen is None:\n        seen = set()\n    elif root_task_id in seen:\n        return {}\n    if dep_func is None:\n\n        def dep_func(t):\n            return t.deps\n    seen.add(root_task_id)\n    serialized = {}\n    queue = collections.deque([root_task_id])\n    while queue:\n        task_id = queue.popleft()\n        task = self._state.get_task(task_id)\n        if task is None or not task.family:\n            logger.debug('Missing task for id [%s]', task_id)\n            family_match = TASK_FAMILY_RE.match(task_id)\n            family = family_match.group(1) if family_match else UNKNOWN\n            params = {'task_id': task_id}\n            serialized[task_id] = {'deps': [], 'status': UNKNOWN, 'workers': [], 'start_time': UNKNOWN, 'params': params, 'name': family, 'display_name': task_id, 'priority': 0}\n        else:\n            deps = dep_func(task)\n            if not include_done:\n                deps = list(self._filter_done(deps))\n            serialized[task_id] = self._serialize_task(task_id, deps=deps)\n            for dep in sorted(deps):\n                if dep not in seen:\n                    seen.add(dep)\n                    queue.append(dep)\n        if task_id != root_task_id:\n            del serialized[task_id]['display_name']\n        if len(serialized) >= self._config.max_graph_nodes:\n            break\n    return serialized",
                            "@rpc_method()\ndef dep_graph(self, task_id, include_done=True, **kwargs):\n    self.prune()\n    if not self._state.has_task(task_id):\n        return {}\n    return self._traverse_graph(task_id, include_done=include_done)",
                            "@rpc_method()\ndef inverse_dep_graph(self, task_id, include_done=True, **kwargs):\n    self.prune()\n    if not self._state.has_task(task_id):\n        return {}\n    inverse_graph = collections.defaultdict(set)\n    for task in self._state.get_active_tasks():\n        for dep in task.deps:\n            inverse_graph[dep].add(task.id)\n    return self._traverse_graph(task_id, dep_func=lambda t: inverse_graph[t.id], include_done=include_done)",
                            "@rpc_method()\ndef task_list(self, status='', upstream_status='', limit=True, search=None, max_shown_tasks=None, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by status.\n    \"\"\"\n    self.prune()\n    result = {}\n    upstream_status_table = {}\n    if search is None:\n\n        def filter_func(_):\n            return True\n    else:\n        terms = search.split()\n\n        def filter_func(t):\n            return all((term in t.pretty_id for term in terms))\n    tasks = self._state.get_active_tasks_by_status(status) if status else self._state.get_active_tasks()\n    for task in filter(filter_func, tasks):\n        if task.status != PENDING or not upstream_status or upstream_status == self._upstream_status(task.id, upstream_status_table):\n            serialized = self._serialize_task(task.id, include_deps=False)\n            result[task.id] = serialized\n    if limit and len(result) > (max_shown_tasks or self._config.max_shown_tasks):\n        return {'num_tasks': len(result)}\n    return result",
                            "def _first_task_display_name(self, worker):\n    task_id = worker.info.get('first_task', '')\n    if self._state.has_task(task_id):\n        return self._state.get_task(task_id).pretty_id\n    else:\n        return task_id",
                            "@rpc_method()\ndef worker_list(self, include_running=True, **kwargs):\n    self.prune()\n    workers = [dict(name=worker.id, last_active=worker.last_active, started=worker.started, state=worker.state, first_task_display_name=self._first_task_display_name(worker), num_unread_rpc_messages=len(worker.rpc_messages), **worker.info) for worker in self._state.get_active_workers()]\n    workers.sort(key=lambda worker: worker['started'], reverse=True)\n    if include_running:\n        running = collections.defaultdict(dict)\n        for task in self._state.get_active_tasks_by_status(RUNNING):\n            if task.worker_running:\n                running[task.worker_running][task.id] = self._serialize_task(task.id, include_deps=False)\n        num_pending = collections.defaultdict(int)\n        num_uniques = collections.defaultdict(int)\n        for task in self._state.get_active_tasks_by_status(PENDING):\n            for worker in task.workers:\n                num_pending[worker] += 1\n            if len(task.workers) == 1:\n                num_uniques[list(task.workers)[0]] += 1\n        for worker in workers:\n            tasks = running[worker['name']]\n            worker['num_running'] = len(tasks)\n            worker['num_pending'] = num_pending[worker['name']]\n            worker['num_uniques'] = num_uniques[worker['name']]\n            worker['running'] = tasks\n    return workers",
                            "@rpc_method()\ndef resource_list(self):\n    \"\"\"\n    Resources usage info and their consumers (tasks).\n    \"\"\"\n    self.prune()\n    resources = [dict(name=resource, num_total=r_dict['total'], num_used=r_dict['used']) for resource, r_dict in six.iteritems(self.resources())]\n    if self._resources is not None:\n        consumers = collections.defaultdict(dict)\n        for task in self._state.get_active_tasks_by_status(RUNNING):\n            if task.status == RUNNING and task.resources:\n                for resource, amount in six.iteritems(task.resources):\n                    consumers[resource][task.id] = self._serialize_task(task.id, include_deps=False)\n        for resource in resources:\n            tasks = consumers[resource['name']]\n            resource['num_consumer'] = len(tasks)\n            resource['running'] = tasks\n    return resources",
                            "def resources(self):\n    \"\"\" get total resources and available ones \"\"\"\n    used_resources = self._used_resources()\n    ret = collections.defaultdict(dict)\n    for resource, total in six.iteritems(self._resources):\n        ret[resource]['total'] = total\n        if resource in used_resources:\n            ret[resource]['used'] = used_resources[resource]\n        else:\n            ret[resource]['used'] = 0\n    return ret",
                            "@rpc_method()\ndef task_search(self, task_str, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by task_id.\n\n    :param task_str:\n    :return:\n    \"\"\"\n    self.prune()\n    result = collections.defaultdict(dict)\n    for task in self._state.get_active_tasks():\n        if task.id.find(task_str) != -1:\n            serialized = self._serialize_task(task.id, include_deps=False)\n            result[task.status][task.id] = serialized\n    return result",
                            "@rpc_method()\ndef re_enable_task(self, task_id):\n    serialized = {}\n    task = self._state.get_task(task_id)\n    if task and task.status == DISABLED and task.scheduler_disable_time:\n        self._state.re_enable(task, self._config)\n        serialized = self._serialize_task(task_id)\n    return serialized",
                            "@rpc_method()\ndef fetch_error(self, task_id, **kwargs):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        return {'taskId': task_id, 'error': task.expl, 'displayName': task.pretty_id}\n    else:\n        return {'taskId': task_id, 'error': ''}",
                            "@rpc_method()\ndef set_task_status_message(self, task_id, status_message):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        task.status_message = status_message\n        if task.status == RUNNING and task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.status_message = status_message",
                            "@rpc_method()\ndef get_task_status_message(self, task_id):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        return {'taskId': task_id, 'statusMessage': task.status_message}\n    else:\n        return {'taskId': task_id, 'statusMessage': ''}",
                            "def _update_task_history(self, task, status, host=None):\n    try:\n        if status == DONE or status == FAILED:\n            successful = status == DONE\n            self._task_history.task_finished(task, successful)\n        elif status == PENDING:\n            self._task_history.task_scheduled(task)\n        elif status == RUNNING:\n            self._task_history.task_started(task, host)\n    except BaseException:\n        logger.warning('Error saving Task history', exc_info=True)",
                            "@property\ndef task_history(self):\n    return self._task_history",
                            "def dep_func(t):\n    return t.deps",
                            "def filter_func(_):\n    return True",
                            "def filter_func(t):\n    return all((term in t.pretty_id for term in terms))"
                        ],
                        "constructor_variables": [
                            "_paused",
                            "_resources",
                            "_make_task",
                            "_config",
                            "_state",
                            "_email_batcher",
                            "_worker_requests",
                            "_task_history"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, config=None, resources=None, task_history_impl=None, **kwargs)",
                            "load(self)",
                            "dump(self)",
                            "prune(self)",
                            "_prune_workers(self)",
                            "_prune_tasks(self)",
                            "_prune_emails(self)",
                            "_update_worker(self, worker_id, worker_reference=None, get_work=False)",
                            "_update_priority(self, task, prio, worker)",
                            "add_task_batcher(self, worker, task_family, batched_args, max_batch_size=float('inf'))",
                            "forgive_failures(self, task_id=None)",
                            "add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, tracking_url=None, worker=None, batchable=None, batch_id=None, retry_policy_dict={}, owners=None, **kwargs)",
                            "announce_scheduling_failure(self, task_name, family, params, expl, owners, **kwargs)",
                            "add_worker(self, worker, info, **kwargs)",
                            "disable_worker(self, worker)",
                            "set_worker_processes(self, worker, n)",
                            "is_paused(self)",
                            "pause(self)",
                            "unpause(self)",
                            "update_resources(self, **resources)",
                            "update_resource(self, resource, amount)",
                            "_generate_retry_policy(self, task_retry_policy_dict)",
                            "_has_resources(self, needed_resources, used_resources)",
                            "_used_resources(self)",
                            "_rank(self, task)",
                            "_schedulable(self, task)",
                            "_reset_orphaned_batch_running_tasks(self, worker_id)",
                            "count_pending(self, worker)",
                            "get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs)",
                            "ping(self, **kwargs)",
                            "_upstream_status(self, task_id, upstream_status_table)",
                            "_serialize_task(self, task_id, include_deps=True, deps=None)",
                            "graph(self, **kwargs)",
                            "_filter_done(self, task_ids)",
                            "_traverse_graph(self, root_task_id, seen=None, dep_func=None, include_done=True)",
                            "dep_graph(self, task_id, include_done=True, **kwargs)",
                            "inverse_dep_graph(self, task_id, include_done=True, **kwargs)",
                            "task_list(self, status='', upstream_status='', limit=True, search=None, max_shown_tasks=None, **kwargs)",
                            "_first_task_display_name(self, worker)",
                            "worker_list(self, include_running=True, **kwargs)",
                            "resource_list(self)",
                            "resources(self)",
                            "task_search(self, task_str, **kwargs)",
                            "re_enable_task(self, task_id)",
                            "fetch_error(self, task_id, **kwargs)",
                            "set_task_status_message(self, task_id, status_message)",
                            "get_task_status_message(self, task_id)",
                            "_update_task_history(self, task, status, host=None)",
                            "task_history(self)",
                            "dep_func(t)",
                            "filter_func(_)",
                            "filter_func(t)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "'X'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_worker": {
                                    "variable_value": "<bound method Scheduler._update_worker of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x1097658b0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "retry_policy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._generate_retry_policy": {
                                    "variable_value": "<bound method Scheduler._generate_retry_policy of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "retry_policy_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "worker.enabled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_default_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._make_task": {
                                    "variable_value": "functools.partial(<class 'luigi.scheduler.Task'>, retry_policy=RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10))",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "task_id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x1097296a0>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batch_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batch_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batchable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batchable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BATCH_RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "SUSPENDED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, batch_emails=False, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config.batch_emails": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl_raw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.loads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_failure": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._email_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.pretty_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "owners": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_disable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.deps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.deps.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UNKNOWN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_priority": {
                                    "variable_value": "<bound method Scheduler._update_priority of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.retry_policy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.runnable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x109729040>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'X'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self._update_worker": {
                                    "variable_value": "<bound method Scheduler._update_worker of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x1097658b0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "retry_policy": {
                                    "variable_value": "RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10)",
                                    "variable_type": "RetryPolicy",
                                    "variable_shape": "3"
                                },
                                "self._generate_retry_policy": {
                                    "variable_value": "<bound method Scheduler._generate_retry_policy of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "retry_policy_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "worker.enabled": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_default_task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': {'X'}, 'workers': OrderedSet(['X']), 'deps': set(), 'status': 'PENDING', 'time': 1702303166.831773, 'updated': 1702303166.831773, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x10971efd0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': False, 'batch_id': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._make_task": {
                                    "variable_value": "functools.partial(<class 'luigi.scheduler.Task'>, retry_policy=RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10))",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "task_id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': {'X'}, 'workers': OrderedSet(['X']), 'deps': set(), 'status': 'PENDING', 'time': 1702303166.831773, 'updated': 1702303166.831773, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x10971efd0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': False, 'batch_id': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._state.get_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x1097296a0>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "task.module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "_get_default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task.worker_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.resources_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batch_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.time_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batchable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batchable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.remove": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BATCH_RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "SUSPENDED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, batch_emails=False, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config.batch_emails": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl_raw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.loads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_failure": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._email_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.pretty_id": {
                                    "variable_value": "'()'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "owners": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_disable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.deps": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "task.deps.update": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.stakeholders.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.stakeholders": {
                                    "variable_value": "{'X'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UNKNOWN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_priority": {
                                    "variable_value": "<bound method Scheduler._update_priority of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.retry_policy": {
                                    "variable_value": "RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10)",
                                    "variable_type": "RetryPolicy",
                                    "variable_shape": "3"
                                },
                                "runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "OrderedSet(['X'])",
                                    "variable_type": "OrderedSet",
                                    "variable_shape": null
                                },
                                "tasks.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "'Y'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_worker": {
                                    "variable_value": "<bound method Scheduler._update_worker of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x1097658b0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "retry_policy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._generate_retry_policy": {
                                    "variable_value": "<bound method Scheduler._generate_retry_policy of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "retry_policy_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "worker.enabled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_default_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._make_task": {
                                    "variable_value": "functools.partial(<class 'luigi.scheduler.Task'>, retry_policy=RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10))",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "task_id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x1097296a0>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batch_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": "'UNKNOWN'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batch_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batchable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batchable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BATCH_RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "SUSPENDED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, batch_emails=False, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config.batch_emails": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl_raw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.loads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_failure": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._email_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.pretty_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "owners": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_disable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.deps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.deps.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UNKNOWN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_priority": {
                                    "variable_value": "<bound method Scheduler._update_priority of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.retry_policy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.runnable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x109792190>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'Y'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self._update_worker": {
                                    "variable_value": "<bound method Scheduler._update_worker of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x1097658b0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "retry_policy": {
                                    "variable_value": "RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10)",
                                    "variable_type": "RetryPolicy",
                                    "variable_shape": "3"
                                },
                                "self._generate_retry_policy": {
                                    "variable_value": "<bound method Scheduler._generate_retry_policy of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "retry_policy_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "worker.enabled": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_default_task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': OrderedSet(), 'deps': set(), 'status': 'PENDING', 'time': 1702303166.839568, 'updated': 1702303166.839568, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x109792280>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': False, 'batchable': False, 'batch_id': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._make_task": {
                                    "variable_value": "functools.partial(<class 'luigi.scheduler.Task'>, retry_policy=RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10))",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "task_id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': {'X', 'Y'}, 'workers': OrderedSet(['X', 'Y']), 'deps': set(), 'status': 'UNKNOWN', 'time': 1702303166.831773, 'updated': 1702303166.8397481, 'retry': None, 'remove': None, 'worker_running': 'X', 'time_running': 1702303166.837491, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x10971efd0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': False, 'batch_id': None, 'resources_running': {}})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._state.get_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x1097296a0>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'UNKNOWN'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "task.module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "_get_default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": "'UNKNOWN'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task.worker_running": {
                                    "variable_value": "'X'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "task.resources_running": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batch_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.time_running": {
                                    "variable_value": "1702303166.837491",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batchable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batchable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.remove": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BATCH_RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "SUSPENDED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, batch_emails=False, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config.batch_emails": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl_raw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.loads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_failure": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._email_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.pretty_id": {
                                    "variable_value": "'()'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "owners": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_disable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.deps": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "task.deps.update": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.stakeholders.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.stakeholders": {
                                    "variable_value": "{'X', 'Y'}",
                                    "variable_type": "set",
                                    "variable_shape": "2"
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UNKNOWN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_priority": {
                                    "variable_value": "<bound method Scheduler._update_priority of <luigi.scheduler.Scheduler object at 0x1097658b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.retry_policy": {
                                    "variable_value": "RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10)",
                                    "variable_type": "RetryPolicy",
                                    "variable_shape": "3"
                                },
                                "runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "OrderedSet(['X', 'Y'])",
                                    "variable_type": "OrderedSet",
                                    "variable_shape": null
                                },
                                "tasks.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "'X'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_worker": {
                                    "variable_value": "<bound method Scheduler._update_worker of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x1108377f0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "retry_policy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._generate_retry_policy": {
                                    "variable_value": "<bound method Scheduler._generate_retry_policy of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "retry_policy_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "worker.enabled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_default_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._make_task": {
                                    "variable_value": "functools.partial(<class 'luigi.scheduler.Task'>, retry_policy=RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10))",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "task_id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x110837850>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batch_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batch_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batchable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batchable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BATCH_RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "SUSPENDED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, batch_emails=False, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self._config.batch_emails": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl_raw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.loads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_failure": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._email_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.pretty_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "owners": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_disable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.deps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.deps.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UNKNOWN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_priority": {
                                    "variable_value": "<bound method Scheduler._update_priority of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.retry_policy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.runnable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x11033e340>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'X'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self._update_worker": {
                                    "variable_value": "<bound method Scheduler._update_worker of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x1108377f0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "retry_policy": {
                                    "variable_value": "RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10)",
                                    "variable_type": "RetryPolicy",
                                    "variable_shape": "3"
                                },
                                "self._generate_retry_policy": {
                                    "variable_value": "<bound method Scheduler._generate_retry_policy of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "retry_policy_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "worker.enabled": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_default_task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': {'X'}, 'workers': OrderedSet(['X']), 'deps': set(), 'status': 'PENDING', 'time': 1702303169.160887, 'updated': 1702303169.160887, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x11033e310>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': False, 'batch_id': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._make_task": {
                                    "variable_value": "functools.partial(<class 'luigi.scheduler.Task'>, retry_policy=RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10))",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "task_id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': {'X'}, 'workers': OrderedSet(['X']), 'deps': set(), 'status': 'PENDING', 'time': 1702303169.160887, 'updated': 1702303169.160887, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x11033e310>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': False, 'batch_id': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._state.get_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x110837850>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "task.module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "_get_default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task.worker_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.resources_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batch_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.time_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batchable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batchable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.remove": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BATCH_RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "SUSPENDED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, batch_emails=False, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self._config.batch_emails": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl_raw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.loads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_failure": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._email_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.pretty_id": {
                                    "variable_value": "'()'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "owners": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_disable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.deps": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "task.deps.update": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.stakeholders.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.stakeholders": {
                                    "variable_value": "{'X'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UNKNOWN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_priority": {
                                    "variable_value": "<bound method Scheduler._update_priority of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.retry_policy": {
                                    "variable_value": "RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10)",
                                    "variable_type": "RetryPolicy",
                                    "variable_shape": "3"
                                },
                                "runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "OrderedSet(['X'])",
                                    "variable_type": "OrderedSet",
                                    "variable_shape": null
                                },
                                "tasks.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "'Y'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_worker": {
                                    "variable_value": "<bound method Scheduler._update_worker of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x1108377f0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "retry_policy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._generate_retry_policy": {
                                    "variable_value": "<bound method Scheduler._generate_retry_policy of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "retry_policy_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "worker.enabled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_default_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._make_task": {
                                    "variable_value": "functools.partial(<class 'luigi.scheduler.Task'>, retry_policy=RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10))",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "task_id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x110837850>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batch_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": "'UNKNOWN'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batch_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batchable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batchable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BATCH_RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "SUSPENDED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, batch_emails=False, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self._config.batch_emails": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl_raw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.loads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_failure": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._email_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.pretty_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "owners": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_disable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.deps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.deps.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UNKNOWN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_priority": {
                                    "variable_value": "<bound method Scheduler._update_priority of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.retry_policy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.runnable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x11085b850>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'Y'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self._update_worker": {
                                    "variable_value": "<bound method Scheduler._update_worker of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x1108377f0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "retry_policy": {
                                    "variable_value": "RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10)",
                                    "variable_type": "RetryPolicy",
                                    "variable_shape": "3"
                                },
                                "self._generate_retry_policy": {
                                    "variable_value": "<bound method Scheduler._generate_retry_policy of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "retry_policy_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "worker.enabled": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_default_task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': OrderedSet(), 'deps': set(), 'status': 'PENDING', 'time': 1702303169.166207, 'updated': 1702303169.166207, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x11085b940>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': False, 'batchable': False, 'batch_id': None})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._make_task": {
                                    "variable_value": "functools.partial(<class 'luigi.scheduler.Task'>, retry_policy=RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10))",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "task_id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "resources": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "priority": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': {'X', 'Y'}, 'workers': OrderedSet(['X', 'Y']), 'deps': set(), 'status': 'RUNNING', 'time': 1702303169.160887, 'updated': 1702303169.163647, 'retry': None, 'remove': None, 'worker_running': 'X', 'time_running': 1702303169.16365, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x11033e310>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': False, 'batch_id': None, 'resources_running': {}})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._state.get_task": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x110837850>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'RUNNING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "task.module": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "_get_default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batch_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "status": {
                                    "variable_value": "'UNKNOWN'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task.worker_running": {
                                    "variable_value": "'X'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "task.resources_running": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "resources_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batch_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.time_running": {
                                    "variable_value": "1702303169.16365",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.tracking_url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_task.tracking_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batchable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.batchable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.remove": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.expl": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_task.expl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BATCH_RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_deps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "SUSPENDED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, batch_emails=False, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self._config.batch_emails": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expl_raw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.loads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_failure": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._email_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.pretty_id": {
                                    "variable_value": "'()'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "owners": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._email_batcher.add_disable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.deps": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "task.deps.update": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.stakeholders.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.stakeholders": {
                                    "variable_value": "{'X', 'Y'}",
                                    "variable_type": "set",
                                    "variable_shape": "2"
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UNKNOWN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "t.stakeholders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_priority": {
                                    "variable_value": "<bound method Scheduler._update_priority of <luigi.scheduler.Scheduler object at 0x1108377f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.retry_policy": {
                                    "variable_value": "RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10)",
                                    "variable_type": "RetryPolicy",
                                    "variable_shape": "3"
                                },
                                "runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "OrderedSet(['X', 'Y'])",
                                    "variable_type": "OrderedSet",
                                    "variable_shape": null
                                },
                                "tasks.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.runnable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _get_empty_retry_policy():\n    return RetryPolicy(*[None] * len(_retry_policy_fields))",
                "def rpc_method(**request_args):\n    def _rpc_method(fn):\n        # If request args are passed, return this function again for use as\n        # the decorator function with the request args attached.\n        fn_args = inspect.getargspec(fn)\n\n        assert not fn_args.varargs\n        assert fn_args.args[0] == 'self'\n        all_args = fn_args.args[1:]\n        defaults = dict(zip(reversed(all_args), reversed(fn_args.defaults or ())))\n        required_args = frozenset(arg for arg in all_args if arg not in defaults)\n        fn_name = fn.__name__\n\n        @functools.wraps(fn)\n        def rpc_func(self, *args, **kwargs):\n            actual_args = defaults.copy()\n            actual_args.update(dict(zip(all_args, args)))\n            actual_args.update(kwargs)\n            if not all(arg in actual_args for arg in required_args):\n                raise TypeError('{} takes {} arguments ({} given)'.format(\n                    fn_name, len(all_args), len(actual_args)))\n            return self._request('/api/{}'.format(fn_name), actual_args, **request_args)\n\n        RPC_METHODS[fn_name] = rpc_func\n        return fn\n\n    return _rpc_method",
                "def _get_default(x, default):\n    if x is not None:\n        return x\n    else:\n        return default",
                "def _rpc_method(fn):\n    # If request args are passed, return this function again for use as\n    # the decorator function with the request args attached.\n    fn_args = inspect.getargspec(fn)\n\n    assert not fn_args.varargs\n    assert fn_args.args[0] == 'self'\n    all_args = fn_args.args[1:]\n    defaults = dict(zip(reversed(all_args), reversed(fn_args.defaults or ())))\n    required_args = frozenset(arg for arg in all_args if arg not in defaults)\n    fn_name = fn.__name__\n\n    @functools.wraps(fn)\n    def rpc_func(self, *args, **kwargs):\n        actual_args = defaults.copy()\n        actual_args.update(dict(zip(all_args, args)))\n        actual_args.update(kwargs)\n        if not all(arg in actual_args for arg in required_args):\n            raise TypeError('{} takes {} arguments ({} given)'.format(\n                fn_name, len(all_args), len(actual_args)))\n        return self._request('/api/{}'.format(fn_name), actual_args, **request_args)\n\n    RPC_METHODS[fn_name] = rpc_func\n    return fn",
                "def _get_retry_policy(self):\n    return RetryPolicy(self.retry_count, self.disable_hard_timeout, self.disable_window)",
                "def __init__(self, window):\n    \"\"\"\n    Initialize with the given window.\n\n    :param window: how long to track failures for, as a float (number of seconds).\n    \"\"\"\n    self.window = window\n    self.failures = collections.deque()\n    self.first_failure_time = None",
                "def add_failure(self):\n    \"\"\"\n    Add a failure event with the current timestamp.\n    \"\"\"\n    failure_time = time.time()\n\n    if not self.first_failure_time:\n        self.first_failure_time = failure_time\n\n    self.failures.append(failure_time)",
                "def num_failures(self):\n    \"\"\"\n    Return the number of failures in the window.\n    \"\"\"\n    min_time = time.time() - self.window\n\n    while self.failures and self.failures[0] < min_time:\n        self.failures.popleft()\n\n    return len(self.failures)",
                "def clear(self):\n    \"\"\"\n    Clear the failure queue.\n    \"\"\"\n    self.failures.clear()",
                "def __init__(self, iterable=None):\n    self.end = end = []\n    end += [None, end, end]         # sentinel node for doubly linked list\n    self.map = {}                   # key --> [key, prev, next]\n    if iterable is not None:\n        self |= iterable",
                "def __len__(self):\n    return len(self.map)",
                "def __contains__(self, key):\n    return key in self.map",
                "def add(self, key):\n    if key not in self.map:\n        end = self.end\n        curr = end[1]\n        curr[2] = end[1] = self.map[key] = [key, curr, end]",
                "def discard(self, key):\n    if key in self.map:\n        key, prev, next = self.map.pop(key)\n        prev[2] = next\n        next[1] = prev",
                "def __iter__(self):\n    end = self.end\n    curr = end[2]\n    while curr is not end:\n        yield curr[0]\n        curr = curr[2]",
                "def __reversed__(self):\n    end = self.end\n    curr = end[1]\n    while curr is not end:\n        yield curr[0]\n        curr = curr[1]",
                "def peek(self, last=True):\n    if not self:\n        raise KeyError('set is empty')\n    key = self.end[1][0] if last else self.end[2][0]\n    return key",
                "def pop(self, last=True):\n    key = self.peek(last)\n    self.discard(key)\n    return key",
                "def __repr__(self):\n    if not self:\n        return '%s()' % (self.__class__.__name__,)\n    return '%s(%r)' % (self.__class__.__name__, list(self))",
                "def __eq__(self, other):\n    if isinstance(other, OrderedSet):\n        return len(self) == len(other) and list(self) == list(other)\n    return set(self) == set(other)",
                "def __init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None,\n             params=None, tracking_url=None, status_message=None, retry_policy='notoptional'):\n    self.id = task_id\n    self.stakeholders = set()  # workers ids that are somehow related to this task (i.e. don't prune while any of these workers are still active)\n    self.workers = OrderedSet()  # workers ids that can perform task - task is 'BROKEN' if none of these workers are active\n    if deps is None:\n        self.deps = set()\n    else:\n        self.deps = set(deps)\n    self.status = status  # PENDING, RUNNING, FAILED or DONE\n    self.time = time.time()  # Timestamp when task was first added\n    self.updated = self.time\n    self.retry = None\n    self.remove = None\n    self.worker_running = None  # the worker id that is currently running the task or None\n    self.time_running = None  # Timestamp when picked up by worker\n    self.expl = None\n    self.priority = priority\n    self.resources = _get_default(resources, {})\n    self.family = family\n    self.module = module\n    self.params = _get_default(params, {})\n\n    self.retry_policy = retry_policy\n    self.failures = Failures(self.retry_policy.disable_window)\n    self.tracking_url = tracking_url\n    self.status_message = status_message\n    self.scheduler_disable_time = None\n    self.runnable = False\n    self.batchable = False\n    self.batch_id = None",
                "def __repr__(self):\n    return \"Task(%r)\" % vars(self)",
                "def is_batchable(self):\n    try:\n        return self.batchable\n    except AttributeError:\n        return False",
                "def add_failure(self):\n    self.failures.add_failure()",
                "def has_excessive_failures(self):\n    if self.failures.first_failure_time is not None:\n        if (time.time() >= self.failures.first_failure_time + self.retry_policy.disable_hard_timeout):\n            return True\n\n    logger.debug('%s task num failures is %s and limit is %s', self.id, self.failures.num_failures(), self.retry_policy.retry_count)\n    if self.failures.num_failures() >= self.retry_policy.retry_count:\n        logger.debug('%s task num failures limit(%s) is exceeded', self.id, self.retry_policy.retry_count)\n        return True\n\n    return False",
                "@property\ndef pretty_id(self):\n    param_str = ', '.join('{}={}'.format(key, value) for key, value in sorted(self.params.items()))\n    return '{}({})'.format(self.family, param_str)",
                "def __init__(self, worker_id, last_active=None):\n    self.id = worker_id\n    self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n    self.last_active = last_active or time.time()  # seconds since epoch\n    self.last_get_work = None\n    self.started = time.time()  # seconds since epoch\n    self.tasks = set()  # task objects\n    self.info = {}\n    self.disabled = False\n    self.rpc_messages = []",
                "def add_info(self, info):\n    self.info.update(info)",
                "def update(self, worker_reference, get_work=False):\n    if worker_reference:\n        self.reference = worker_reference\n    self.last_active = time.time()\n    if get_work:\n        self.last_get_work = time.time()",
                "def prune(self, config):\n    # Delete workers that haven't said anything for a while (probably killed)\n    if self.last_active + config.worker_disconnect_delay < time.time():\n        return True",
                "def get_tasks(self, state, *statuses):\n    num_self_tasks = len(self.tasks)\n    num_state_tasks = sum(len(state._status_tasks[status]) for status in statuses)\n    if num_self_tasks < num_state_tasks:\n        return six.moves.filter(lambda task: task.status in statuses, self.tasks)\n    else:\n        return six.moves.filter(lambda task: self.id in task.workers, state.get_active_tasks_by_status(*statuses))",
                "def is_trivial_worker(self, state):\n    \"\"\"\n    If it's not an assistant having only tasks that are without\n    requirements.\n\n    We have to pass the state parameter for optimization reasons.\n    \"\"\"\n    if self.assistant:\n        return False\n    return all(not task.resources for task in self.get_tasks(state, PENDING))",
                "@property\ndef assistant(self):\n    return self.info.get('assistant', False)",
                "@property\ndef enabled(self):\n    return not self.disabled",
                "@property\ndef state(self):\n    if self.enabled:\n        return WORKER_STATE_ACTIVE\n    else:\n        return WORKER_STATE_DISABLED",
                "def add_rpc_message(self, name, **kwargs):\n    # the message has the format {'name': <function_name>, 'kwargs': <function_kwargs>}\n    self.rpc_messages.append({'name': name, 'kwargs': kwargs})",
                "def fetch_rpc_messages(self):\n    messages = self.rpc_messages[:]\n    del self.rpc_messages[:]\n    return messages",
                "def __str__(self):\n    return self.id",
                "def __init__(self, state_path):\n    self._state_path = state_path\n    self._tasks = {}  # map from id to a Task object\n    self._status_tasks = collections.defaultdict(dict)\n    self._active_workers = {}  # map from id to a Worker object\n    self._task_batchers = {}",
                "def get_state(self):\n    return self._tasks, self._active_workers, self._task_batchers",
                "def set_state(self, state):\n    self._tasks, self._active_workers = state[:2]\n    if len(state) >= 3:\n        self._task_batchers = state[2]",
                "def dump(self):\n    try:\n        with open(self._state_path, 'wb') as fobj:\n            pickle.dump(self.get_state(), fobj)\n    except IOError:\n        logger.warning(\"Failed saving scheduler state\", exc_info=1)\n    else:\n        logger.info(\"Saved state in %s\", self._state_path)",
                "def load(self):\n    if os.path.exists(self._state_path):\n        logger.info(\"Attempting to load state from %s\", self._state_path)\n        try:\n            with open(self._state_path, 'rb') as fobj:\n                state = pickle.load(fobj)\n        except BaseException:\n            logger.exception(\"Error when loading state. Starting from empty state.\")\n            return\n\n        self.set_state(state)\n        self._status_tasks = collections.defaultdict(dict)\n        for task in six.itervalues(self._tasks):\n            self._status_tasks[task.status][task.id] = task\n    else:\n        logger.info(\"No prior state file exists at %s. Starting with empty state\", self._state_path)",
                "def get_active_tasks(self):\n    return six.itervalues(self._tasks)",
                "def get_active_tasks_by_status(self, *statuses):\n    return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status]) for status in statuses)",
                "def get_batch_running_tasks(self, batch_id):\n    assert batch_id is not None\n    return [\n        task for task in self.get_active_tasks_by_status(BATCH_RUNNING)\n        if task.batch_id == batch_id\n    ]",
                "def set_batcher(self, worker_id, family, batcher_args, max_batch_size):\n    self._task_batchers.setdefault(worker_id, {})\n    self._task_batchers[worker_id][family] = (batcher_args, max_batch_size)",
                "def get_batcher(self, worker_id, family):\n    return self._task_batchers.get(worker_id, {}).get(family, (None, 1))",
                "def num_pending_tasks(self):\n    \"\"\"\n    Return how many tasks are PENDING + RUNNING. O(1).\n    \"\"\"\n    return len(self._status_tasks[PENDING]) + len(self._status_tasks[RUNNING])",
                "def get_task(self, task_id, default=None, setdefault=None):\n    if setdefault:\n        task = self._tasks.setdefault(task_id, setdefault)\n        self._status_tasks[task.status][task.id] = task\n        return task\n    else:\n        return self._tasks.get(task_id, default)",
                "def has_task(self, task_id):\n    return task_id in self._tasks",
                "def re_enable(self, task, config=None):\n    task.scheduler_disable_time = None\n    task.failures.clear()\n    if config:\n        self.set_status(task, FAILED, config)\n        task.failures.clear()",
                "def set_batch_running(self, task, batch_id, worker_id):\n    self.set_status(task, BATCH_RUNNING)\n    task.batch_id = batch_id\n    task.worker_running = worker_id\n    task.resources_running = task.resources\n    task.time_running = time.time()",
                "def set_status(self, task, new_status, config=None):\n    if new_status == FAILED:\n        assert config is not None\n\n    if new_status == DISABLED and task.status in (RUNNING, BATCH_RUNNING):\n        return\n\n    remove_on_failure = task.batch_id is not None and not task.batchable\n\n    if task.status == DISABLED:\n        if new_status == DONE:\n            self.re_enable(task)\n\n        # don't allow workers to override a scheduler disable\n        elif task.scheduler_disable_time is not None and new_status != DISABLED:\n            return\n\n    if task.status == RUNNING and task.batch_id is not None and new_status != RUNNING:\n        for batch_task in self.get_batch_running_tasks(task.batch_id):\n            self.set_status(batch_task, new_status, config)\n            batch_task.batch_id = None\n        task.batch_id = None\n\n    if new_status == FAILED and task.status != DISABLED:\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = DISABLED\n            if not config.batch_emails:\n                notifications.send_error_email(\n                    'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                    '{task} failed {failures} times in the last {window} seconds, so it is being '\n                    'disabled for {persist} seconds'.format(\n                        failures=task.retry_policy.retry_count,\n                        task=task.id,\n                        window=config.disable_window,\n                        persist=config.disable_persist,\n                    ))\n    elif new_status == DISABLED:\n        task.scheduler_disable_time = None\n\n    if new_status != task.status:\n        self._status_tasks[task.status].pop(task.id)\n        self._status_tasks[new_status][task.id] = task\n        task.status = new_status\n        task.updated = time.time()\n\n    if new_status == FAILED:\n        task.retry = time.time() + config.retry_delay\n        if remove_on_failure:\n            task.remove = time.time()",
                "def fail_dead_worker_task(self, task, config, assistants):\n    # If a running worker disconnects, tag all its jobs as FAILED and subject it to the same retry logic\n    if task.status in (BATCH_RUNNING, RUNNING) and task.worker_running and task.worker_running not in task.stakeholders | assistants:\n        logger.info(\"Task %r is marked as running by disconnected worker %r -> marking as \"\n                    \"FAILED with retry delay of %rs\", task.id, task.worker_running,\n                    config.retry_delay)\n        task.worker_running = None\n        self.set_status(task, FAILED, config)\n        task.retry = time.time() + config.retry_delay",
                "def update_status(self, task, config):\n    # Mark tasks with no remaining active stakeholders for deletion\n    if (not task.stakeholders) and (task.remove is None) and (task.status != RUNNING):\n        # We don't check for the RUNNING case, because that is already handled\n        # by the fail_dead_worker_task function.\n        logger.debug(\"Task %r has no stakeholders anymore -> might remove \"\n                     \"task in %s seconds\", task.id, config.remove_delay)\n        task.remove = time.time() + config.remove_delay\n\n    # Re-enable task after the disable time expires\n    if task.status == DISABLED and task.scheduler_disable_time is not None:\n        if time.time() - task.scheduler_disable_time > config.disable_persist:\n            self.re_enable(task, config)\n\n    # Reset FAILED tasks to PENDING if max timeout is reached, and retry delay is >= 0\n    if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\n        self.set_status(task, PENDING, config)",
                "def may_prune(self, task):\n    return task.remove and time.time() >= task.remove",
                "def inactivate_tasks(self, delete_tasks):\n    # The terminology is a bit confusing: we used to \"delete\" tasks when they became inactive,\n    # but with a pluggable state storage, you might very well want to keep some history of\n    # older tasks as well. That's why we call it \"inactivate\" (as in the verb)\n    for task in delete_tasks:\n        task_obj = self._tasks.pop(task)\n        self._status_tasks[task_obj.status].pop(task)",
                "def get_active_workers(self, last_active_lt=None, last_get_work_gt=None):\n    for worker in six.itervalues(self._active_workers):\n        if last_active_lt is not None and worker.last_active >= last_active_lt:\n            continue\n        last_get_work = worker.last_get_work\n        if last_get_work_gt is not None and (\n                        last_get_work is None or last_get_work <= last_get_work_gt):\n            continue\n        yield worker",
                "def get_assistants(self, last_active_lt=None):\n    return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))",
                "def get_worker_ids(self):\n    return self._active_workers.keys()  # only used for unit tests",
                "def get_worker(self, worker_id):\n    return self._active_workers.setdefault(worker_id, Worker(worker_id))",
                "def inactivate_workers(self, delete_workers):\n    # Mark workers as inactive\n    for worker in delete_workers:\n        self._active_workers.pop(worker)\n    self._remove_workers_from_tasks(delete_workers)",
                "def _remove_workers_from_tasks(self, workers, remove_stakeholders=True):\n    for task in self.get_active_tasks():\n        if remove_stakeholders:\n            task.stakeholders.difference_update(workers)\n        task.workers -= workers",
                "def disable_workers(self, worker_ids):\n    self._remove_workers_from_tasks(worker_ids, remove_stakeholders=False)\n    for worker_id in worker_ids:\n        self.get_worker(worker_id).disabled = True",
                "def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n    \"\"\"\n    Keyword Arguments:\n    :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n    :param resources: a dict of str->int constraints\n    :param task_history_impl: ignore config and use this object as the task history\n    \"\"\"\n    self._config = config or scheduler(**kwargs)\n    self._state = SimpleTaskState(self._config.state_path)\n\n    if task_history_impl:\n        self._task_history = task_history_impl\n    elif self._config.record_task_history:\n        from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n        self._task_history = db_task_history.DbTaskHistory()\n    else:\n        self._task_history = history.NopHistory()\n    self._resources = resources or configuration.get_config().getintdict('resources')  # TODO: Can we make this a Parameter?\n    self._make_task = functools.partial(Task, retry_policy=self._config._get_retry_policy())\n    self._worker_requests = {}\n    self._paused = False\n\n    if self._config.batch_emails:\n        self._email_batcher = BatchNotifier()",
                "def load(self):\n    self._state.load()",
                "def dump(self):\n    self._state.dump()\n    if self._config.batch_emails:\n        self._email_batcher.send_email()",
                "@rpc_method()\ndef prune(self):\n    logger.info(\"Starting pruning of task graph\")\n    self._prune_workers()\n    self._prune_tasks()\n    self._prune_emails()\n    logger.info(\"Done pruning task graph\")",
                "def _prune_workers(self):\n    remove_workers = []\n    for worker in self._state.get_active_workers():\n        if worker.prune(self._config):\n            logger.debug(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n\n    self._state.inactivate_workers(remove_workers)",
                "def _prune_tasks(self):\n    assistant_ids = set(w.id for w in self._state.get_assistants())\n    remove_tasks = []\n\n    for task in self._state.get_active_tasks():\n        self._state.fail_dead_worker_task(task, self._config, assistant_ids)\n        self._state.update_status(task, self._config)\n        if self._state.may_prune(task):\n            logger.info(\"Removing task %r\", task.id)\n            remove_tasks.append(task.id)\n\n    self._state.inactivate_tasks(remove_tasks)",
                "def _prune_emails(self):\n    if self._config.batch_emails:\n        self._email_batcher.update()",
                "def _update_worker(self, worker_id, worker_reference=None, get_work=False):\n    # Keep track of whenever the worker was last active.\n    # For convenience also return the worker object.\n    worker = self._state.get_worker(worker_id)\n    worker.update(worker_reference, get_work=get_work)\n    return worker",
                "def _update_priority(self, task, prio, worker):\n    \"\"\"\n    Update priority of the given task.\n\n    Priority can only be increased.\n    If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n    \"\"\"\n    task.priority = prio = max(prio, task.priority)\n    for dep in task.deps or []:\n        t = self._state.get_task(dep)\n        if t is not None and prio > t.priority:\n            self._update_priority(t, prio, worker)",
                "@rpc_method()\ndef add_task_batcher(self, worker, task_family, batched_args, max_batch_size=float('inf')):\n    self._state.set_batcher(worker, task_family, batched_args, max_batch_size)",
                "@rpc_method()\ndef forgive_failures(self, task_id=None):\n    status = PENDING\n    task = self._state.get_task(task_id)\n    if task is None:\n        return {\"task_id\": task_id, \"status\": None}\n\n    # we forgive only failures\n    if task.status == FAILED:\n        # forgive but do not forget\n        self._update_task_history(task, status)\n        self._state.set_status(task, status, self._config)\n    return {\"task_id\": task_id, \"status\": task.status}",
                "@rpc_method()\ndef add_task(self, task_id=None, status=PENDING, runnable=True,\n             deps=None, new_deps=None, expl=None, resources=None,\n             priority=0, family='', module=None, params=None,\n             assistant=False, tracking_url=None, worker=None, batchable=None,\n             batch_id=None, retry_policy_dict={}, owners=None, **kwargs):\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    assert worker is not None\n    worker_id = worker\n    worker = self._update_worker(worker_id)\n    retry_policy = self._generate_retry_policy(retry_policy_dict)\n\n    if worker.enabled:\n        _default_task = self._make_task(\n            task_id=task_id, status=PENDING, deps=deps, resources=resources,\n            priority=priority, family=family, module=module, params=params,\n        )\n    else:\n        _default_task = None\n\n    task = self._state.get_task(task_id, setdefault=_default_task)\n\n    if task is None or (task.status != RUNNING and not worker.enabled):\n        return\n\n    # for setting priority, we'll sometimes create tasks with unset family and params\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n\n    if batch_id is not None:\n        task.batch_id = batch_id\n    if status == RUNNING and not task.worker_running:\n        task.worker_running = worker_id\n        if batch_id:\n            task.resources_running = self._state.get_batch_running_tasks(batch_id)[0].resources_running\n        task.time_running = time.time()\n\n    if tracking_url is not None or task.status != RUNNING:\n        task.tracking_url = tracking_url\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.tracking_url = tracking_url\n\n    if batchable is not None:\n        task.batchable = batchable\n\n    if task.remove is not None:\n        task.remove = None  # unmark task for removal so it isn't removed after being added\n\n    if expl is not None:\n        task.expl = expl\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.expl = expl\n\n    if not (task.status in (RUNNING, BATCH_RUNNING) and status == PENDING) or new_deps:\n        # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n        if status == PENDING or status != task.status:\n            # Update the DB only if there was a acctual change, to prevent noise.\n            # We also check for status == PENDING b/c that's the default value\n            # (so checking for status != task.status woule lie)\n            self._update_task_history(task, status)\n        self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n\n    if status == FAILED and self._config.batch_emails:\n        batched_params, _ = self._state.get_batcher(worker_id, family)\n        if batched_params:\n            unbatched_params = {\n                param: value\n                for param, value in six.iteritems(task.params)\n                if param not in batched_params\n            }\n        else:\n            unbatched_params = task.params\n        try:\n            expl_raw = json.loads(expl)\n        except ValueError:\n            expl_raw = expl\n\n        self._email_batcher.add_failure(\n            task.pretty_id, task.family, unbatched_params, expl_raw, owners)\n        if task.status == DISABLED:\n            self._email_batcher.add_disable(\n                task.pretty_id, task.family, unbatched_params, owners)\n\n    if deps is not None:\n        task.deps = set(deps)\n\n    if new_deps is not None:\n        task.deps.update(new_deps)\n\n    if resources is not None:\n        task.resources = resources\n\n    if worker.enabled and not assistant:\n        task.stakeholders.add(worker_id)\n\n        # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n        # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n\n    self._update_priority(task, priority, worker_id)\n\n    # Because some tasks (non-dynamic dependencies) are `_make_task`ed\n    # before we know their retry_policy, we always set it here\n    task.retry_policy = retry_policy\n\n    if runnable and status != FAILED and worker.enabled:\n        task.workers.add(worker_id)\n        self._state.get_worker(worker_id).tasks.add(task)\n        task.runnable = runnable",
                "@rpc_method()\ndef announce_scheduling_failure(self, task_name, family, params, expl, owners, **kwargs):\n    if not self._config.batch_emails:\n        return\n    worker_id = kwargs['worker']\n    batched_params, _ = self._state.get_batcher(worker_id, family)\n    if batched_params:\n        unbatched_params = {\n            param: value\n            for param, value in six.iteritems(params)\n            if param not in batched_params\n        }\n    else:\n        unbatched_params = params\n    self._email_batcher.add_scheduling_fail(task_name, family, unbatched_params, expl, owners)",
                "@rpc_method()\ndef add_worker(self, worker, info, **kwargs):\n    self._state.get_worker(worker).add_info(info)",
                "@rpc_method()\ndef disable_worker(self, worker):\n    self._state.disable_workers({worker})",
                "@rpc_method()\ndef set_worker_processes(self, worker, n):\n    self._state.get_worker(worker).add_rpc_message('set_worker_processes', n=n)",
                "@rpc_method()\ndef is_paused(self):\n    return {'paused': self._paused}",
                "@rpc_method()\ndef pause(self):\n    self._paused = True",
                "@rpc_method()\ndef unpause(self):\n    self._paused = False",
                "@rpc_method()\ndef update_resources(self, **resources):\n    if self._resources is None:\n        self._resources = {}\n    self._resources.update(resources)",
                "@rpc_method()\ndef update_resource(self, resource, amount):\n    if not isinstance(amount, int) or amount < 0:\n        return False\n    self._resources[resource] = amount\n    return True",
                "def _generate_retry_policy(self, task_retry_policy_dict):\n    retry_policy_dict = self._config._get_retry_policy()._asdict()\n    retry_policy_dict.update({k: v for k, v in six.iteritems(task_retry_policy_dict) if v is not None})\n    return RetryPolicy(**retry_policy_dict)",
                "def _has_resources(self, needed_resources, used_resources):\n    if needed_resources is None:\n        return True\n\n    available_resources = self._resources or {}\n    for resource, amount in six.iteritems(needed_resources):\n        if amount + used_resources[resource] > available_resources.get(resource, 1):\n            return False\n    return True",
                "def _used_resources(self):\n    used_resources = collections.defaultdict(int)\n    if self._resources is not None:\n        for task in self._state.get_active_tasks_by_status(RUNNING):\n            if getattr(task, 'resources_running', task.resources):\n                for resource, amount in six.iteritems(getattr(task, 'resources_running', task.resources)):\n                    used_resources[resource] += amount\n    return used_resources",
                "def _rank(self, task):\n    \"\"\"\n    Return worker's rank function for task scheduling.\n\n    :return:\n    \"\"\"\n\n    return task.priority, -task.time",
                "def _schedulable(self, task):\n    if task.status != PENDING:\n        return False\n    for dep in task.deps:\n        dep_task = self._state.get_task(dep, default=None)\n        if dep_task is None or dep_task.status != DONE:\n            return False\n    return True",
                "def _reset_orphaned_batch_running_tasks(self, worker_id):\n    running_batch_ids = {\n        task.batch_id\n        for task in self._state.get_active_tasks_by_status(RUNNING)\n        if task.worker_running == worker_id\n    }\n    orphaned_tasks = [\n        task for task in self._state.get_active_tasks_by_status(BATCH_RUNNING)\n        if task.worker_running == worker_id and task.batch_id not in running_batch_ids\n    ]\n    for task in orphaned_tasks:\n        self._state.set_status(task, PENDING)",
                "@rpc_method()\ndef count_pending(self, worker):\n    worker_id, worker = worker, self._state.get_worker(worker)\n\n    num_pending, num_unique_pending, num_pending_last_scheduled = 0, 0, 0\n    running_tasks = []\n\n    upstream_status_table = {}\n    for task in worker.get_tasks(self._state, RUNNING):\n        if self._upstream_status(task.id, upstream_status_table) == UPSTREAM_DISABLED:\n            continue\n        # Return a list of currently running tasks to the client,\n        # makes it easier to troubleshoot\n        other_worker = self._state.get_worker(task.worker_running)\n        if other_worker is not None:\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            more_info.update(other_worker.info)\n            running_tasks.append(more_info)\n\n    for task in worker.get_tasks(self._state, PENDING, FAILED):\n        if self._upstream_status(task.id, upstream_status_table) == UPSTREAM_DISABLED:\n            continue\n        num_pending += 1\n        num_unique_pending += int(len(task.workers) == 1)\n        num_pending_last_scheduled += int(task.workers.peek(last=True) == worker_id)\n\n    return {\n        'n_pending_tasks': num_pending,\n        'n_unique_pending': num_unique_pending,\n        'n_pending_last_scheduled': num_pending_last_scheduled,\n        'worker_state': worker.state,\n        'running_tasks': running_tasks,\n    }",
                "@rpc_method(allow_null=False)\ndef get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    # TODO: remove any expired nodes\n\n    # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n    # resources.\n\n    # Resource checking looks both at currently available resources and at which resources would\n    # be available if all running tasks died and we rescheduled all workers greedily. We do both\n    # checks in order to prevent a worker with many low-priority tasks from starving other\n    # workers with higher priority tasks that share the same resources.\n\n    # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n    # nothing it can wait for\n\n    if self._config.prune_on_get_work:\n        self.prune()\n\n    assert worker is not None\n    worker_id = worker\n    worker = self._update_worker(\n        worker_id,\n        worker_reference={'host': host},\n        get_work=True)\n    if not worker.enabled:\n        reply = {'n_pending_tasks': 0,\n                 'running_tasks': [],\n                 'task_id': None,\n                 'n_unique_pending': 0,\n                 'worker_state': worker.state,\n                 }\n        return reply\n\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n\n    batched_params, unbatched_params, batched_tasks, max_batch_size = None, None, [], 1\n    best_task = None\n    if current_tasks is not None:\n        ct_set = set(current_tasks)\n        for task in sorted(self._state.get_active_tasks_by_status(RUNNING), key=self._rank):\n            if task.worker_running == worker_id and task.id not in ct_set:\n                best_task = task\n\n    if current_tasks is not None:\n        # batch running tasks that weren't claimed since the last get_work go back in the pool\n        self._reset_orphaned_batch_running_tasks(worker_id)\n\n    greedy_resources = collections.defaultdict(int)\n\n    worker = self._state.get_worker(worker_id)\n    if self._paused:\n        relevant_tasks = []\n    elif worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_tasks(self._state, PENDING, RUNNING)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()  # If there's no resources, then they can grab any task\n    else:\n        relevant_tasks = self._state.get_active_tasks_by_status(PENDING, RUNNING)\n        used_resources = self._used_resources()\n        activity_limit = time.time() - self._config.worker_disconnect_delay\n        active_workers = self._state.get_active_workers(last_get_work_gt=activity_limit)\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                              for worker in active_workers)\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n\n    for task in tasks:\n        if (best_task and batched_params and task.family == best_task.family and\n                len(batched_tasks) < max_batch_size and task.is_batchable() and all(\n                task.params.get(name) == value for name, value in unbatched_params.items()) and\n                task.resources == best_task.resources and self._schedulable(task)):\n            for name, params in batched_params.items():\n                params.append(task.params.get(name))\n            batched_tasks.append(task)\n        if best_task:\n            continue\n\n        if task.status == RUNNING and (task.worker_running in greedy_workers):\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems((getattr(task, 'resources_running', task.resources) or {})):\n                greedy_resources[resource] += amount\n\n        if self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            in_workers = (assistant and task.runnable) or worker_id in task.workers\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n                batch_param_names, max_batch_size = self._state.get_batcher(\n                    worker_id, task.family)\n                if batch_param_names and task.is_batchable():\n                    try:\n                        batched_params = {\n                            name: [task.params[name]] for name in batch_param_names\n                        }\n                        unbatched_params = {\n                            name: value for name, value in task.params.items()\n                            if name not in batched_params\n                        }\n                        batched_tasks.append(task)\n                    except KeyError:\n                        batched_params, unbatched_params = None, None\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        # use up a worker\n                        greedy_workers[task_worker] -= 1\n\n                        # keep track of the resources used in greedy scheduling\n                        for resource, amount in six.iteritems((task.resources or {})):\n                            greedy_resources[resource] += amount\n\n                        break\n\n    reply = self.count_pending(worker_id)\n\n    if len(batched_tasks) > 1:\n        batch_string = '|'.join(task.id for task in batched_tasks)\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n\n        combined_params = best_task.params.copy()\n        combined_params.update(batched_params)\n\n        reply['task_id'] = None\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = combined_params\n        reply['batch_id'] = batch_id\n        reply['batch_task_ids'] = [task.id for task in batched_tasks]\n\n    elif best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.resources_running = best_task.resources\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n\n    else:\n        reply['task_id'] = None\n\n    return reply",
                "@rpc_method(attempts=1)\ndef ping(self, **kwargs):\n    worker_id = kwargs['worker']\n    worker = self._update_worker(worker_id)\n    return {\"rpc_messages\": worker.fetch_rpc_messages()}",
                "def _upstream_status(self, task_id, upstream_status_table):\n    if task_id in upstream_status_table:\n        return upstream_status_table[task_id]\n    elif self._state.has_task(task_id):\n        task_stack = [task_id]\n\n        while task_stack:\n            dep_id = task_stack.pop()\n            dep = self._state.get_task(dep_id)\n            if dep:\n                if dep.status == DONE:\n                    continue\n                if dep_id not in upstream_status_table:\n                    if dep.status == PENDING and dep.deps:\n                        task_stack += [dep_id] + list(dep.deps)\n                        upstream_status_table[dep_id] = ''  # will be updated postorder\n                    else:\n                        dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                        upstream_status_table[dep_id] = dep_status\n                elif upstream_status_table[dep_id] == '' and dep.deps:\n                    # This is the postorder update step when we set the\n                    # status based on the previously calculated child elements\n                    status = max((upstream_status_table.get(a_task_id, '')\n                                  for a_task_id in dep.deps),\n                                 key=UPSTREAM_SEVERITY_KEY)\n                    upstream_status_table[dep_id] = status\n        return upstream_status_table[dep_id]",
                "def _serialize_task(self, task_id, include_deps=True, deps=None):\n    task = self._state.get_task(task_id)\n    ret = {\n        'display_name': task.pretty_id,\n        'status': task.status,\n        'workers': list(task.workers),\n        'worker_running': task.worker_running,\n        'time_running': getattr(task, \"time_running\", None),\n        'start_time': task.time,\n        'last_updated': getattr(task, \"updated\", task.time),\n        'params': task.params,\n        'name': task.family,\n        'priority': task.priority,\n        'resources': task.resources,\n        'tracking_url': getattr(task, \"tracking_url\", None),\n        'status_message': getattr(task, \"status_message\", None)\n    }\n    if task.status == DISABLED:\n        ret['re_enable_able'] = task.scheduler_disable_time is not None\n    if include_deps:\n        ret['deps'] = list(task.deps if deps is None else deps)\n    return ret",
                "@rpc_method()\ndef graph(self, **kwargs):\n    self.prune()\n    serialized = {}\n    seen = set()\n    for task in self._state.get_active_tasks():\n        serialized.update(self._traverse_graph(task.id, seen))\n    return serialized",
                "def _filter_done(self, task_ids):\n    for task_id in task_ids:\n        task = self._state.get_task(task_id)\n        if task is None or task.status != DONE:\n            yield task_id",
                "def _traverse_graph(self, root_task_id, seen=None, dep_func=None, include_done=True):\n    \"\"\" Returns the dependency graph rooted at task_id\n\n    This does a breadth-first traversal to find the nodes closest to the\n    root before hitting the scheduler.max_graph_nodes limit.\n\n    :param root_task_id: the id of the graph's root\n    :return: A map of task id to serialized node\n    \"\"\"\n\n    if seen is None:\n        seen = set()\n    elif root_task_id in seen:\n        return {}\n\n    if dep_func is None:\n        def dep_func(t):\n            return t.deps\n\n    seen.add(root_task_id)\n    serialized = {}\n    queue = collections.deque([root_task_id])\n    while queue:\n        task_id = queue.popleft()\n\n        task = self._state.get_task(task_id)\n        if task is None or not task.family:\n            logger.debug('Missing task for id [%s]', task_id)\n\n            # NOTE : If a dependency is missing from self._state there is no way to deduce the\n            #        task family and parameters.\n            family_match = TASK_FAMILY_RE.match(task_id)\n            family = family_match.group(1) if family_match else UNKNOWN\n            params = {'task_id': task_id}\n            serialized[task_id] = {\n                'deps': [],\n                'status': UNKNOWN,\n                'workers': [],\n                'start_time': UNKNOWN,\n                'params': params,\n                'name': family,\n                'display_name': task_id,\n                'priority': 0,\n            }\n        else:\n            deps = dep_func(task)\n            if not include_done:\n                deps = list(self._filter_done(deps))\n            serialized[task_id] = self._serialize_task(task_id, deps=deps)\n            for dep in sorted(deps):\n                if dep not in seen:\n                    seen.add(dep)\n                    queue.append(dep)\n\n        if task_id != root_task_id:\n            del serialized[task_id]['display_name']\n        if len(serialized) >= self._config.max_graph_nodes:\n            break\n\n    return serialized",
                "@rpc_method()\ndef dep_graph(self, task_id, include_done=True, **kwargs):\n    self.prune()\n    if not self._state.has_task(task_id):\n        return {}\n    return self._traverse_graph(task_id, include_done=include_done)",
                "@rpc_method()\ndef inverse_dep_graph(self, task_id, include_done=True, **kwargs):\n    self.prune()\n    if not self._state.has_task(task_id):\n        return {}\n    inverse_graph = collections.defaultdict(set)\n    for task in self._state.get_active_tasks():\n        for dep in task.deps:\n            inverse_graph[dep].add(task.id)\n    return self._traverse_graph(\n        task_id, dep_func=lambda t: inverse_graph[t.id], include_done=include_done)",
                "@rpc_method()\ndef task_list(self, status='', upstream_status='', limit=True, search=None, max_shown_tasks=None,\n              **kwargs):\n    \"\"\"\n    Query for a subset of tasks by status.\n    \"\"\"\n    self.prune()\n    result = {}\n    upstream_status_table = {}  # used to memoize upstream status\n    if search is None:\n        def filter_func(_):\n            return True\n    else:\n        terms = search.split()\n\n        def filter_func(t):\n            return all(term in t.pretty_id for term in terms)\n\n    tasks = self._state.get_active_tasks_by_status(status) if status else self._state.get_active_tasks()\n    for task in filter(filter_func, tasks):\n        if task.status != PENDING or not upstream_status or upstream_status == self._upstream_status(task.id, upstream_status_table):\n            serialized = self._serialize_task(task.id, include_deps=False)\n            result[task.id] = serialized\n    if limit and len(result) > (max_shown_tasks or self._config.max_shown_tasks):\n        return {'num_tasks': len(result)}\n    return result",
                "def _first_task_display_name(self, worker):\n    task_id = worker.info.get('first_task', '')\n    if self._state.has_task(task_id):\n        return self._state.get_task(task_id).pretty_id\n    else:\n        return task_id",
                "@rpc_method()\ndef worker_list(self, include_running=True, **kwargs):\n    self.prune()\n    workers = [\n        dict(\n            name=worker.id,\n            last_active=worker.last_active,\n            started=worker.started,\n            state=worker.state,\n            first_task_display_name=self._first_task_display_name(worker),\n            num_unread_rpc_messages=len(worker.rpc_messages),\n            **worker.info\n        ) for worker in self._state.get_active_workers()]\n    workers.sort(key=lambda worker: worker['started'], reverse=True)\n    if include_running:\n        running = collections.defaultdict(dict)\n        for task in self._state.get_active_tasks_by_status(RUNNING):\n            if task.worker_running:\n                running[task.worker_running][task.id] = self._serialize_task(task.id, include_deps=False)\n\n        num_pending = collections.defaultdict(int)\n        num_uniques = collections.defaultdict(int)\n        for task in self._state.get_active_tasks_by_status(PENDING):\n            for worker in task.workers:\n                num_pending[worker] += 1\n            if len(task.workers) == 1:\n                num_uniques[list(task.workers)[0]] += 1\n\n        for worker in workers:\n            tasks = running[worker['name']]\n            worker['num_running'] = len(tasks)\n            worker['num_pending'] = num_pending[worker['name']]\n            worker['num_uniques'] = num_uniques[worker['name']]\n            worker['running'] = tasks\n    return workers",
                "@rpc_method()\ndef resource_list(self):\n    \"\"\"\n    Resources usage info and their consumers (tasks).\n    \"\"\"\n    self.prune()\n    resources = [\n        dict(\n            name=resource,\n            num_total=r_dict['total'],\n            num_used=r_dict['used']\n        ) for resource, r_dict in six.iteritems(self.resources())]\n    if self._resources is not None:\n        consumers = collections.defaultdict(dict)\n        for task in self._state.get_active_tasks_by_status(RUNNING):\n            if task.status == RUNNING and task.resources:\n                for resource, amount in six.iteritems(task.resources):\n                    consumers[resource][task.id] = self._serialize_task(task.id, include_deps=False)\n        for resource in resources:\n            tasks = consumers[resource['name']]\n            resource['num_consumer'] = len(tasks)\n            resource['running'] = tasks\n    return resources",
                "def resources(self):\n    ''' get total resources and available ones '''\n    used_resources = self._used_resources()\n    ret = collections.defaultdict(dict)\n    for resource, total in six.iteritems(self._resources):\n        ret[resource]['total'] = total\n        if resource in used_resources:\n            ret[resource]['used'] = used_resources[resource]\n        else:\n            ret[resource]['used'] = 0\n    return ret",
                "@rpc_method()\ndef task_search(self, task_str, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by task_id.\n\n    :param task_str:\n    :return:\n    \"\"\"\n    self.prune()\n    result = collections.defaultdict(dict)\n    for task in self._state.get_active_tasks():\n        if task.id.find(task_str) != -1:\n            serialized = self._serialize_task(task.id, include_deps=False)\n            result[task.status][task.id] = serialized\n    return result",
                "@rpc_method()\ndef re_enable_task(self, task_id):\n    serialized = {}\n    task = self._state.get_task(task_id)\n    if task and task.status == DISABLED and task.scheduler_disable_time:\n        self._state.re_enable(task, self._config)\n        serialized = self._serialize_task(task_id)\n    return serialized",
                "@rpc_method()\ndef fetch_error(self, task_id, **kwargs):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        return {\"taskId\": task_id, \"error\": task.expl, 'displayName': task.pretty_id}\n    else:\n        return {\"taskId\": task_id, \"error\": \"\"}",
                "@rpc_method()\ndef set_task_status_message(self, task_id, status_message):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        task.status_message = status_message\n        if task.status == RUNNING and task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.status_message = status_message",
                "@rpc_method()\ndef get_task_status_message(self, task_id):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        return {\"taskId\": task_id, \"statusMessage\": task.status_message}\n    else:\n        return {\"taskId\": task_id, \"statusMessage\": \"\"}",
                "def _update_task_history(self, task, status, host=None):\n    try:\n        if status == DONE or status == FAILED:\n            successful = (status == DONE)\n            self._task_history.task_finished(task, successful)\n        elif status == PENDING:\n            self._task_history.task_scheduled(task)\n        elif status == RUNNING:\n            self._task_history.task_started(task, host)\n    except BaseException:\n        logger.warning(\"Error saving Task history\", exc_info=True)",
                "@property\ndef task_history(self):\n    # Used by server.py to expose the calls\n    return self._task_history",
                "@functools.wraps(fn)\ndef rpc_func(self, *args, **kwargs):\n    actual_args = defaults.copy()\n    actual_args.update(dict(zip(all_args, args)))\n    actual_args.update(kwargs)\n    if not all(arg in actual_args for arg in required_args):\n        raise TypeError('{} takes {} arguments ({} given)'.format(\n            fn_name, len(all_args), len(actual_args)))\n    return self._request('/api/{}'.format(fn_name), actual_args, **request_args)",
                "def dep_func(t):\n    return t.deps",
                "def filter_func(_):\n    return True",
                "def filter_func(t):\n    return all(term in t.pretty_id for term in terms)"
            ],
            "inscope_function_signatures": [
                "_get_empty_retry_policy()",
                "rpc_method(**request_args)",
                "_get_default(x, default)",
                "_rpc_method(fn)",
                "_get_retry_policy(self)",
                "__init__(self, window)",
                "add_failure(self)",
                "num_failures(self)",
                "clear(self)",
                "__init__(self, iterable=None)",
                "__len__(self)",
                "__contains__(self, key)",
                "add(self, key)",
                "discard(self, key)",
                "__iter__(self)",
                "__reversed__(self)",
                "peek(self, last=True)",
                "pop(self, last=True)",
                "__repr__(self)",
                "__eq__(self, other)",
                "__init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None, params=None, tracking_url=None, status_message=None, retry_policy='notoptional')",
                "__repr__(self)",
                "is_batchable(self)",
                "add_failure(self)",
                "has_excessive_failures(self)",
                "pretty_id(self)",
                "__init__(self, worker_id, last_active=None)",
                "add_info(self, info)",
                "update(self, worker_reference, get_work=False)",
                "prune(self, config)",
                "get_tasks(self, state, *statuses)",
                "is_trivial_worker(self, state)",
                "assistant(self)",
                "enabled(self)",
                "state(self)",
                "add_rpc_message(self, name, **kwargs)",
                "fetch_rpc_messages(self)",
                "__str__(self)",
                "__init__(self, state_path)",
                "get_state(self)",
                "set_state(self, state)",
                "dump(self)",
                "load(self)",
                "get_active_tasks(self)",
                "get_active_tasks_by_status(self, *statuses)",
                "get_batch_running_tasks(self, batch_id)",
                "set_batcher(self, worker_id, family, batcher_args, max_batch_size)",
                "get_batcher(self, worker_id, family)",
                "num_pending_tasks(self)",
                "get_task(self, task_id, default=None, setdefault=None)",
                "has_task(self, task_id)",
                "re_enable(self, task, config=None)",
                "set_batch_running(self, task, batch_id, worker_id)",
                "set_status(self, task, new_status, config=None)",
                "fail_dead_worker_task(self, task, config, assistants)",
                "update_status(self, task, config)",
                "may_prune(self, task)",
                "inactivate_tasks(self, delete_tasks)",
                "get_active_workers(self, last_active_lt=None, last_get_work_gt=None)",
                "get_assistants(self, last_active_lt=None)",
                "get_worker_ids(self)",
                "get_worker(self, worker_id)",
                "inactivate_workers(self, delete_workers)",
                "_remove_workers_from_tasks(self, workers, remove_stakeholders=True)",
                "disable_workers(self, worker_ids)",
                "__init__(self, config=None, resources=None, task_history_impl=None, **kwargs)",
                "load(self)",
                "dump(self)",
                "prune(self)",
                "_prune_workers(self)",
                "_prune_tasks(self)",
                "_prune_emails(self)",
                "_update_worker(self, worker_id, worker_reference=None, get_work=False)",
                "_update_priority(self, task, prio, worker)",
                "add_task_batcher(self, worker, task_family, batched_args, max_batch_size=float('inf'))",
                "forgive_failures(self, task_id=None)",
                "add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, tracking_url=None, worker=None, batchable=None, batch_id=None, retry_policy_dict={}, owners=None, **kwargs)",
                "announce_scheduling_failure(self, task_name, family, params, expl, owners, **kwargs)",
                "add_worker(self, worker, info, **kwargs)",
                "disable_worker(self, worker)",
                "set_worker_processes(self, worker, n)",
                "is_paused(self)",
                "pause(self)",
                "unpause(self)",
                "update_resources(self, **resources)",
                "update_resource(self, resource, amount)",
                "_generate_retry_policy(self, task_retry_policy_dict)",
                "_has_resources(self, needed_resources, used_resources)",
                "_used_resources(self)",
                "_rank(self, task)",
                "_schedulable(self, task)",
                "_reset_orphaned_batch_running_tasks(self, worker_id)",
                "count_pending(self, worker)",
                "get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs)",
                "ping(self, **kwargs)",
                "_upstream_status(self, task_id, upstream_status_table)",
                "_serialize_task(self, task_id, include_deps=True, deps=None)",
                "graph(self, **kwargs)",
                "_filter_done(self, task_ids)",
                "_traverse_graph(self, root_task_id, seen=None, dep_func=None, include_done=True)",
                "dep_graph(self, task_id, include_done=True, **kwargs)",
                "inverse_dep_graph(self, task_id, include_done=True, **kwargs)",
                "task_list(self, status='', upstream_status='', limit=True, search=None, max_shown_tasks=None, **kwargs)",
                "_first_task_display_name(self, worker)",
                "worker_list(self, include_running=True, **kwargs)",
                "resource_list(self)",
                "resources(self)",
                "task_search(self, task_str, **kwargs)",
                "re_enable_task(self, task_id)",
                "fetch_error(self, task_id, **kwargs)",
                "set_task_status_message(self, task_id, status_message)",
                "get_task_status_message(self, task_id)",
                "_update_task_history(self, task, status, host=None)",
                "task_history(self)",
                "rpc_func(self, *args, **kwargs)",
                "dep_func(t)",
                "filter_func(_)",
                "filter_func(t)"
            ],
            "variables_in_file": {
                "ImportError": [
                    32
                ],
                "logger": [
                    448,
                    576,
                    450,
                    455,
                    328,
                    330,
                    714,
                    460,
                    588,
                    691,
                    52,
                    468,
                    1494,
                    695,
                    1275,
                    701
                ],
                "logging.getLogger": [
                    52
                ],
                "logging": [
                    52
                ],
                "__name__": [
                    52
                ],
                "UPSTREAM_RUNNING": [
                    70,
                    69,
                    61,
                    54
                ],
                "UPSTREAM_MISSING_INPUT": [
                    71,
                    62,
                    55
                ],
                "UPSTREAM_FAILED": [
                    56,
                    68,
                    63
                ],
                "UPSTREAM_DISABLED": [
                    64,
                    72,
                    1002,
                    1013,
                    57
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    66,
                    59
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    66,
                    1206
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    66
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    67,
                    1199
                ],
                "FAILED": [
                    544,
                    835,
                    68,
                    580,
                    522,
                    1486,
                    880,
                    755,
                    1012,
                    598,
                    568,
                    511
                ],
                "RUNNING": [
                    1412,
                    1413,
                    1160,
                    1164,
                    525,
                    789,
                    538,
                    802,
                    808,
                    1067,
                    1081,
                    826,
                    956,
                    1085,
                    575,
                    1472,
                    69,
                    585,
                    1105,
                    1491,
                    983,
                    1378,
                    1001,
                    494
                ],
                "BATCH_RUNNING": [
                    515,
                    70,
                    479,
                    525,
                    826,
                    987,
                    575
                ],
                "PENDING": [
                    389,
                    781,
                    1195,
                    1081,
                    826,
                    828,
                    1085,
                    833,
                    1348,
                    71,
                    972,
                    1489,
                    599,
                    991,
                    1384,
                    749,
                    494,
                    1012,
                    762
                ],
                "DISABLED": [
                    544,
                    548,
                    72,
                    1227,
                    525,
                    1454,
                    559,
                    593,
                    530,
                    852,
                    535
                ],
                "WORKER_STATE_DISABLED": [
                    75,
                    404
                ],
                "WORKER_STATE_ACTIVE": [
                    402,
                    76
                ],
                "TASK_FAMILY_RE": [
                    78,
                    1279
                ],
                "re.compile": [
                    78
                ],
                "re": [
                    78
                ],
                "RPC_METHODS": [
                    80,
                    117
                ],
                "_retry_policy_fields": [
                    82,
                    91,
                    87
                ],
                "RetryPolicy": [
                    151,
                    91,
                    941,
                    87
                ],
                "collections.namedtuple": [
                    87
                ],
                "collections": [
                    1377,
                    1411,
                    1082,
                    1443,
                    1382,
                    1383,
                    169,
                    1321,
                    431,
                    208,
                    464,
                    1425,
                    1075,
                    1269,
                    87,
                    954
                ],
                "len": [
                    1418,
                    272,
                    1304,
                    440,
                    192,
                    1351,
                    1096,
                    1352,
                    91,
                    1372,
                    223,
                    1387,
                    494,
                    1392,
                    114,
                    373,
                    374,
                    1143,
                    1016
                ],
                "fn_args": [
                    98,
                    100,
                    101,
                    102,
                    103
                ],
                "inspect.getargspec": [
                    98
                ],
                "inspect": [
                    98
                ],
                "fn": [
                    105,
                    98,
                    107,
                    118
                ],
                "fn_args.varargs": [
                    100
                ],
                "fn_args.args": [
                    101,
                    102
                ],
                "all_args": [
                    102,
                    103,
                    104,
                    110,
                    114
                ],
                "defaults": [
                    104,
                    109,
                    103
                ],
                "dict": [
                    1089,
                    1377,
                    1411,
                    1443,
                    103,
                    136,
                    138,
                    140,
                    110,
                    142,
                    431,
                    464,
                    1425,
                    1366,
                    1083,
                    1405
                ],
                "zip": [
                    110,
                    103
                ],
                "reversed": [
                    103
                ],
                "fn_args.defaults": [
                    103
                ],
                "required_args": [
                    104,
                    112
                ],
                "frozenset": [
                    104
                ],
                "arg": [
                    104,
                    112
                ],
                "fn_name": [
                    105,
                    114,
                    115,
                    117
                ],
                "fn.__name__": [
                    105
                ],
                "actual_args": [
                    109,
                    110,
                    111,
                    112,
                    114,
                    115
                ],
                "defaults.copy": [
                    109
                ],
                "actual_args.update": [
                    110,
                    111
                ],
                "args": [
                    110
                ],
                "kwargs": [
                    111,
                    663,
                    408,
                    889,
                    1178
                ],
                "all": [
                    112,
                    1344,
                    1096,
                    389
                ],
                "TypeError": [
                    113
                ],
                "format": [
                    551,
                    552,
                    337,
                    113,
                    338,
                    115
                ],
                "self._request": [
                    115
                ],
                "self": [
                    115,
                    151,
                    168,
                    169,
                    170,
                    178,
                    179,
                    181,
                    187,
                    189,
                    190,
                    192,
                    198,
                    216,
                    218,
                    220,
                    223,
                    226,
                    229,
                    230,
                    232,
                    235,
                    236,
                    241,
                    248,
                    255,
                    257,
                    261,
                    262,
                    266,
                    267,
                    268,
                    272,
                    273,
                    279,
                    280,
                    281,
                    283,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    310,
                    316,
                    321,
                    324,
                    325,
                    328,
                    329,
                    330,
                    337,
                    338,
                    347,
                    348,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    355,
                    358,
                    362,
                    363,
                    365,
                    369,
                    373,
                    376,
                    378,
                    387,
                    389,
                    393,
                    397,
                    401,
                    408,
                    411,
                    412,
                    416,
                    429,
                    430,
                    431,
                    432,
                    433,
                    436,
                    439,
                    441,
                    445,
                    446,
                    450,
                    454,
                    455,
                    457,
                    463,
                    464,
                    465,
                    466,
                    468,
                    471,
                    474,
                    479,
                    484,
                    485,
                    488,
                    494,
                    498,
                    499,
                    502,
                    505,
                    511,
                    515,
                    532,
                    539,
                    540,
                    563,
                    564,
                    580,
                    595,
                    599,
                    609,
                    610,
                    613,
                    623,
                    626,
                    629,
                    634,
                    635,
                    638,
                    644,
                    646,
                    663,
                    664,
                    667,
                    668,
                    670,
                    672,
                    673,
                    674,
                    675,
                    676,
                    678,
                    679,
                    682,
                    685,
                    686,
                    687,
                    692,
                    693,
                    694,
                    699,
                    700,
                    701,
                    704,
                    707,
                    710,
                    711,
                    712,
                    713,
                    717,
                    720,
                    721,
                    726,
                    739,
                    741,
                    745,
                    750,
                    757,
                    758,
                    776,
                    777,
                    780,
                    787,
                    805,
                    811,
                    823,
                    832,
                    833,
                    835,
                    836,
                    850,
                    853,
                    871,
                    874,
                    882,
                    887,
                    890,
                    899,
                    903,
                    907,
                    911,
                    915,
                    919,
                    923,
                    927,
                    928,
                    929,
                    935,
                    939,
                    947,
                    955,
                    956,
                    975,
                    983,
                    987,
                    991,
                    995,
                    1001,
                    1002,
                    1006,
                    1012,
                    1013,
                    1042,
                    1043,
                    1047,
                    1061,
                    1067,
                    1073,
                    1077,
                    1078,
                    1080,
                    1081,
                    1085,
                    1086,
                    1087,
                    1088,
                    1092,
                    1098,
                    1110,
                    1112,
                    1114,
                    1141,
                    1147,
                    1160,
                    1164,
                    1179,
                    1185,
                    1190,
                    1211,
                    1235,
                    1238,
                    1239,
                    1244,
                    1273,
                    1295,
                    1296,
                    1304,
                    1311,
                    1312,
                    1314,
                    1318,
                    1319,
                    1322,
                    1325,
                    1334,
                    1346,
                    1348,
                    1349,
                    1351,
                    1357,
                    1358,
                    1364,
                    1371,
                    1374,
                    1378,
                    1380,
                    1384,
                    1403,
                    1409,
                    1410,
                    1412,
                    1415,
                    1424,
                    1426,
                    1442,
                    1444,
                    1446,
                    1453,
                    1455,
                    1456,
                    1461,
                    1462,
                    1469,
                    1470,
                    1473,
                    1478,
                    1479,
                    1488,
                    1490,
                    1492,
                    1499
                ],
                "request_args": [
                    115
                ],
                "functools.wraps": [
                    107
                ],
                "functools": [
                    674,
                    107
                ],
                "rpc_func": [
                    117
                ],
                "_rpc_method": [
                    120
                ],
                "Config": [
                    123
                ],
                "retry_delay": [
                    126
                ],
                "parameter.FloatParameter": [
                    128,
                    126,
                    127
                ],
                "parameter": [
                    128,
                    129,
                    131,
                    135,
                    137,
                    139,
                    141,
                    143,
                    144,
                    146,
                    148,
                    126,
                    127
                ],
                "remove_delay": [
                    127
                ],
                "worker_disconnect_delay": [
                    128
                ],
                "state_path": [
                    129,
                    429
                ],
                "parameter.Parameter": [
                    129
                ],
                "batch_emails": [
                    131
                ],
                "parameter.BoolParameter": [
                    146,
                    131,
                    148
                ],
                "disable_window": [
                    135
                ],
                "parameter.IntParameter": [
                    135,
                    137,
                    139,
                    141,
                    143,
                    144
                ],
                "retry_count": [
                    137
                ],
                "disable_hard_timeout": [
                    139
                ],
                "disable_persist": [
                    141
                ],
                "max_shown_tasks": [
                    1351,
                    143
                ],
                "max_graph_nodes": [
                    144
                ],
                "record_task_history": [
                    146
                ],
                "prune_on_get_work": [
                    148
                ],
                "self.retry_count": [
                    151
                ],
                "self.disable_hard_timeout": [
                    151
                ],
                "self.disable_window": [
                    151
                ],
                "object": [
                    419,
                    649,
                    276,
                    341,
                    154
                ],
                "self.window": [
                    168,
                    187
                ],
                "window": [
                    168
                ],
                "self.failures": [
                    192,
                    321,
                    324,
                    325,
                    198,
                    328,
                    169,
                    329,
                    301,
                    181,
                    189,
                    190
                ],
                "collections.deque": [
                    169,
                    1269
                ],
                "self.first_failure_time": [
                    178,
                    170,
                    179
                ],
                "failure_time": [
                    176,
                    179,
                    181
                ],
                "time.time": [
                    519,
                    1163,
                    287,
                    547,
                    806,
                    176,
                    566,
                    569,
                    187,
                    571,
                    1087,
                    325,
                    581,
                    590,
                    594,
                    598,
                    602,
                    349,
                    351,
                    363,
                    365,
                    369
                ],
                "time": [
                    519,
                    1163,
                    287,
                    547,
                    806,
                    176,
                    566,
                    569,
                    187,
                    571,
                    1087,
                    325,
                    581,
                    590,
                    594,
                    598,
                    602,
                    349,
                    351,
                    363,
                    365,
                    369
                ],
                "self.failures.append": [
                    181
                ],
                "min_time": [
                    187,
                    189
                ],
                "self.failures.popleft": [
                    190
                ],
                "self.failures.clear": [
                    198
                ],
                "x": [
                    202,
                    203
                ],
                "default": [
                    205,
                    502
                ],
                "collections.MutableSet": [
                    208
                ],
                "self.end": [
                    248,
                    257,
                    230,
                    241,
                    216
                ],
                "end": [
                    248,
                    249,
                    230,
                    231,
                    232,
                    241,
                    242,
                    243,
                    216,
                    217,
                    250
                ],
                "self.map": [
                    226,
                    229,
                    232,
                    235,
                    236,
                    218,
                    223
                ],
                "iterable": [
                    219,
                    220
                ],
                "key": [
                    257,
                    226,
                    258,
                    229,
                    261,
                    262,
                    232,
                    263,
                    235,
                    236,
                    337
                ],
                "curr": [
                    231,
                    232,
                    242,
                    243,
                    244,
                    245,
                    249,
                    250,
                    251,
                    252
                ],
                "prev": [
                    236,
                    237,
                    238
                ],
                "next": [
                    236,
                    237,
                    238
                ],
                "self.map.pop": [
                    236
                ],
                "KeyError": [
                    256,
                    1126
                ],
                "last": [
                    257,
                    261
                ],
                "self.peek": [
                    261
                ],
                "self.discard": [
                    262
                ],
                "self.__class__.__name__": [
                    267,
                    268
                ],
                "self.__class__": [
                    267,
                    268
                ],
                "list": [
                    1091,
                    1196,
                    268,
                    1230,
                    1295,
                    272,
                    1388,
                    1215
                ],
                "isinstance": [
                    933,
                    271
                ],
                "other": [
                    272,
                    273,
                    271
                ],
                "OrderedSet": [
                    281,
                    271
                ],
                "set": [
                    352,
                    707,
                    1321,
                    1066,
                    1259,
                    273,
                    1237,
                    280,
                    857,
                    283,
                    285
                ],
                "self.id": [
                    416,
                    328,
                    330,
                    279,
                    378,
                    347
                ],
                "task_id": [
                    1281,
                    1282,
                    1289,
                    781,
                    1296,
                    787,
                    1302,
                    279,
                    1303,
                    1183,
                    1184,
                    1185,
                    1186,
                    1312,
                    1314,
                    1319,
                    1453,
                    1326,
                    1456,
                    1461,
                    1462,
                    1463,
                    1465,
                    1211,
                    1469,
                    1470,
                    1478,
                    1479,
                    1480,
                    1482,
                    1356,
                    1357,
                    1358,
                    1360,
                    1243,
                    1244,
                    1246,
                    759,
                    505,
                    750,
                    752,
                    498,
                    502,
                    1271,
                    1273,
                    1275,
                    1279
                ],
                "self.stakeholders": [
                    280
                ],
                "self.workers": [
                    281
                ],
                "deps": [
                    781,
                    1230,
                    1293,
                    1295,
                    1296,
                    1297,
                    856,
                    857,
                    282,
                    285
                ],
                "self.deps": [
                    283,
                    285
                ],
                "self.status": [
                    286
                ],
                "status": [
                    286,
                    802,
                    1204,
                    1207,
                    826,
                    828,
                    832,
                    833,
                    1346,
                    835,
                    1486,
                    1487,
                    1489,
                    1491,
                    474,
                    749,
                    880,
                    757,
                    374,
                    758
                ],
                "self.time": [
                    288,
                    287
                ],
                "self.updated": [
                    288
                ],
                "self.retry": [
                    289
                ],
                "self.remove": [
                    290
                ],
                "self.worker_running": [
                    291
                ],
                "self.time_running": [
                    292
                ],
                "self.expl": [
                    293
                ],
                "self.priority": [
                    294
                ],
                "priority": [
                    874,
                    871,
                    294,
                    782
                ],
                "self.resources": [
                    1409,
                    295
                ],
                "_get_default": [
                    298,
                    798,
                    295
                ],
                "resources": [
                    673,
                    929,
                    295,
                    1416,
                    1420,
                    781,
                    1404,
                    862,
                    863
                ],
                "self.family": [
                    296,
                    338
                ],
                "family": [
                    1280,
                    899,
                    836,
                    485,
                    296,
                    488,
                    1288,
                    782,
                    794,
                    890
                ],
                "self.module": [
                    297
                ],
                "module": [
                    297,
                    796,
                    782
                ],
                "self.params": [
                    337,
                    298
                ],
                "params": [
                    1281,
                    898,
                    1287,
                    298,
                    1099,
                    1100,
                    782,
                    798,
                    894
                ],
                "self.retry_policy": [
                    325,
                    328,
                    329,
                    330,
                    300,
                    301
                ],
                "retry_policy": [
                    777,
                    300,
                    878
                ],
                "Failures": [
                    301
                ],
                "self.retry_policy.disable_window": [
                    301
                ],
                "self.tracking_url": [
                    302
                ],
                "tracking_url": [
                    808,
                    809,
                    812,
                    302
                ],
                "self.status_message": [
                    303
                ],
                "status_message": [
                    1471,
                    1474,
                    303
                ],
                "self.scheduler_disable_time": [
                    304
                ],
                "self.runnable": [
                    305
                ],
                "self.batchable": [
                    306,
                    316
                ],
                "self.batch_id": [
                    307
                ],
                "vars": [
                    310
                ],
                "AttributeError": [
                    317
                ],
                "self.failures.add_failure": [
                    321
                ],
                "self.failures.first_failure_time": [
                    324,
                    325
                ],
                "self.retry_policy.disable_hard_timeout": [
                    325
                ],
                "logger.debug": [
                    328,
                    330,
                    588,
                    1275,
                    701
                ],
                "self.failures.num_failures": [
                    328,
                    329
                ],
                "self.retry_policy.retry_count": [
                    328,
                    329,
                    330
                ],
                "param_str": [
                    337,
                    338
                ],
                "join": [
                    1144,
                    337
                ],
                "value": [
                    1122,
                    839,
                    840,
                    1097,
                    337,
                    893,
                    894
                ],
                "sorted": [
                    337,
                    1067,
                    1297
                ],
                "self.params.items": [
                    337
                ],
                "property": [
                    391,
                    395,
                    399,
                    335,
                    1496
                ],
                "worker_id": [
                    517,
                    645,
                    646,
                    775,
                    776,
                    1161,
                    1046,
                    1048,
                    1178,
                    1179,
                    803,
                    1061,
                    1068,
                    1073,
                    1077,
                    836,
                    726,
                    1111,
                    984,
                    347,
                    988,
                    1115,
                    866,
                    995,
                    484,
                    485,
                    488,
                    872,
                    874,
                    1129,
                    881,
                    882,
                    629,
                    1141,
                    889,
                    890,
                    1147,
                    1017
                ],
                "self.reference": [
                    362,
                    348
                ],
                "self.last_active": [
                    369,
                    363,
                    349
                ],
                "last_active": [
                    349
                ],
                "self.last_get_work": [
                    365,
                    350
                ],
                "self.started": [
                    351
                ],
                "self.tasks": [
                    352,
                    376,
                    373
                ],
                "self.info": [
                    353,
                    393,
                    358
                ],
                "self.disabled": [
                    354,
                    397
                ],
                "self.rpc_messages": [
                    408,
                    412,
                    355,
                    411
                ],
                "self.info.update": [
                    358
                ],
                "info": [
                    358,
                    903
                ],
                "worker_reference": [
                    361,
                    362,
                    727
                ],
                "get_work": [
                    364,
                    727
                ],
                "config.worker_disconnect_delay": [
                    369
                ],
                "config": [
                    523,
                    663,
                    540,
                    549,
                    556,
                    557,
                    569,
                    578,
                    580,
                    581,
                    589,
                    590,
                    594,
                    595,
                    598,
                    599,
                    369,
                    510,
                    511
                ],
                "num_self_tasks": [
                    373,
                    375
                ],
                "num_state_tasks": [
                    374,
                    375
                ],
                "sum": [
                    374
                ],
                "state._status_tasks": [
                    374
                ],
                "state": [
                    389,
                    458,
                    463,
                    374,
                    439,
                    440,
                    441,
                    378
                ],
                "statuses": [
                    376,
                    474,
                    378,
                    374
                ],
                "six.moves.filter": [
                    376,
                    378
                ],
                "six.moves": [
                    376,
                    378
                ],
                "six": [
                    1409,
                    613,
                    1414,
                    840,
                    940,
                    1136,
                    465,
                    474,
                    1107,
                    948,
                    958,
                    1426,
                    471,
                    376,
                    378,
                    894
                ],
                "task.status": [
                    1413,
                    525,
                    530,
                    789,
                    538,
                    544,
                    1447,
                    808,
                    1454,
                    562,
                    563,
                    565,
                    826,
                    828,
                    1214,
                    575,
                    1472,
                    1348,
                    585,
                    1227,
                    972,
                    593,
                    466,
                    1105,
                    852,
                    598,
                    1245,
                    499,
                    755,
                    759,
                    376
                ],
                "task": [
                    512,
                    515,
                    516,
                    517,
                    518,
                    519,
                    525,
                    528,
                    530,
                    532,
                    535,
                    538,
                    539,
                    542,
                    544,
                    545,
                    546,
                    547,
                    551,
                    554,
                    555,
                    1067,
                    1068,
                    1069,
                    560,
                    562,
                    563,
                    564,
                    565,
                    566,
                    569,
                    571,
                    575,
                    577,
                    579,
                    580,
                    581,
                    1094,
                    1095,
                    1096,
                    585,
                    1097,
                    1098,
                    1100,
                    589,
                    590,
                    1101,
                    593,
                    594,
                    595,
                    1105,
                    1106,
                    598,
                    599,
                    1107,
                    1110,
                    602,
                    1111,
                    1112,
                    1113,
                    1115,
                    1116,
                    608,
                    609,
                    610,
                    1119,
                    1122,
                    1125,
                    1129,
                    1136,
                    1144,
                    1146,
                    1147,
                    638,
                    640,
                    641,
                    1157,
                    1211,
                    1213,
                    1214,
                    1215,
                    1216,
                    1217,
                    1218,
                    1219,
                    1220,
                    1221,
                    710,
                    711,
                    712,
                    713,
                    714,
                    715,
                    1222,
                    1223,
                    1224,
                    1225,
                    1227,
                    1228,
                    1230,
                    1238,
                    1239,
                    1244,
                    1245,
                    737,
                    738,
                    750,
                    751,
                    755,
                    757,
                    758,
                    759,
                    1273,
                    1274,
                    1293,
                    787,
                    789,
                    793,
                    794,
                    795,
                    796,
                    797,
                    798,
                    801,
                    802,
                    803,
                    805,
                    806,
                    808,
                    809,
                    810,
                    811,
                    1322,
                    1323,
                    1324,
                    815,
                    817,
                    818,
                    821,
                    822,
                    823,
                    826,
                    828,
                    832,
                    833,
                    1347,
                    1348,
                    1349,
                    1350,
                    840,
                    844,
                    851,
                    852,
                    854,
                    857,
                    860,
                    863,
                    866,
                    1378,
                    1379,
                    1380,
                    870,
                    1384,
                    1385,
                    874,
                    1387,
                    1388,
                    878,
                    881,
                    882,
                    883,
                    376,
                    378,
                    1412,
                    389,
                    1413,
                    1414,
                    1415,
                    1444,
                    1445,
                    1446,
                    1447,
                    1453,
                    1454,
                    1455,
                    1462,
                    1463,
                    956,
                    957,
                    958,
                    1470,
                    1471,
                    1472,
                    1473,
                    1479,
                    1480,
                    969,
                    972,
                    974,
                    1488,
                    465,
                    466,
                    1490,
                    1492,
                    982,
                    983,
                    984,
                    987,
                    988,
                    990,
                    479,
                    480,
                    991,
                    1001,
                    1002,
                    1006,
                    1008,
                    498,
                    499,
                    500,
                    1012,
                    1013,
                    1016,
                    1017,
                    508,
                    509,
                    511
                ],
                "task.workers": [
                    641,
                    1129,
                    1385,
                    1387,
                    1388,
                    881,
                    1111,
                    1016,
                    1017,
                    378,
                    1215
                ],
                "state.get_active_tasks_by_status": [
                    378
                ],
                "self.assistant": [
                    387
                ],
                "task.resources": [
                    389,
                    518,
                    1223,
                    1413,
                    1414,
                    1098,
                    1136,
                    1107,
                    1110,
                    1112,
                    957,
                    958,
                    863
                ],
                "self.get_tasks": [
                    389
                ],
                "self.info.get": [
                    393
                ],
                "self.enabled": [
                    401
                ],
                "self.rpc_messages.append": [
                    408
                ],
                "name": [
                    1122,
                    1123,
                    1097,
                    1099,
                    1100,
                    408,
                    1119
                ],
                "messages": [
                    411,
                    413
                ],
                "self._state_path": [
                    450,
                    454,
                    455,
                    457,
                    429,
                    468,
                    445
                ],
                "self._tasks": [
                    439,
                    609,
                    430,
                    465,
                    498,
                    436,
                    502,
                    471,
                    505
                ],
                "self._status_tasks": [
                    610,
                    494,
                    431,
                    464,
                    466,
                    499,
                    563,
                    564,
                    474
                ],
                "collections.defaultdict": [
                    1377,
                    1411,
                    1082,
                    1443,
                    1382,
                    1383,
                    1321,
                    431,
                    464,
                    1425,
                    1075,
                    954
                ],
                "self._active_workers": [
                    613,
                    432,
                    626,
                    436,
                    629,
                    439,
                    634
                ],
                "self._task_batchers": [
                    484,
                    485,
                    488,
                    433,
                    436,
                    441
                ],
                "open": [
                    457,
                    445
                ],
                "fobj": [
                    457,
                    458,
                    445,
                    446
                ],
                "pickle.dump": [
                    446
                ],
                "pickle": [
                    458,
                    446
                ],
                "self.get_state": [
                    446
                ],
                "IOError": [
                    447
                ],
                "logger.warning": [
                    448,
                    1494
                ],
                "logger.info": [
                    576,
                    450,
                    455,
                    714,
                    691,
                    468,
                    695
                ],
                "os.path.exists": [
                    454
                ],
                "os.path": [
                    454
                ],
                "os": [
                    454
                ],
                "pickle.load": [
                    458
                ],
                "BaseException": [
                    459,
                    1493
                ],
                "logger.exception": [
                    460
                ],
                "self.set_state": [
                    463
                ],
                "six.itervalues": [
                    465,
                    474,
                    613,
                    471
                ],
                "task.id": [
                    1157,
                    1415,
                    1445,
                    1446,
                    551,
                    1447,
                    555,
                    1068,
                    1324,
                    563,
                    564,
                    577,
                    1348,
                    1349,
                    1350,
                    714,
                    715,
                    589,
                    466,
                    1239,
                    1380,
                    1002,
                    1008,
                    499,
                    1013,
                    1144
                ],
                "itertools.chain.from_iterable": [
                    474
                ],
                "itertools.chain": [
                    1129,
                    474
                ],
                "itertools": [
                    1129,
                    474
                ],
                "batch_id": [
                    480,
                    801,
                    800,
                    516,
                    804,
                    805,
                    1156,
                    1145,
                    1147,
                    477
                ],
                "self.get_active_tasks_by_status": [
                    479
                ],
                "task.batch_id": [
                    480,
                    801,
                    1472,
                    1473,
                    516,
                    810,
                    811,
                    528,
                    822,
                    823,
                    982,
                    538,
                    539,
                    988,
                    542
                ],
                "self._task_batchers.setdefault": [
                    484
                ],
                "batcher_args": [
                    485
                ],
                "max_batch_size": [
                    485,
                    1063,
                    1096,
                    745,
                    1114
                ],
                "get": [
                    488
                ],
                "self._task_batchers.get": [
                    488
                ],
                "setdefault": [
                    497,
                    498
                ],
                "self._tasks.setdefault": [
                    498
                ],
                "self._tasks.get": [
                    502
                ],
                "task.scheduler_disable_time": [
                    547,
                    1228,
                    1454,
                    560,
                    593,
                    594,
                    535,
                    508
                ],
                "task.failures.clear": [
                    512,
                    509
                ],
                "task.failures": [
                    512,
                    509
                ],
                "self.set_status": [
                    515,
                    580,
                    599,
                    540,
                    511
                ],
                "task.worker_running": [
                    1216,
                    577,
                    802,
                    579,
                    803,
                    517,
                    1379,
                    1380,
                    1068,
                    1006,
                    1105,
                    1106,
                    984,
                    988,
                    575
                ],
                "task.resources_running": [
                    805,
                    518
                ],
                "task.time_running": [
                    806,
                    519
                ],
                "new_status": [
                    544,
                    548,
                    522,
                    525,
                    559,
                    562,
                    531,
                    564,
                    565,
                    535,
                    568,
                    538,
                    540
                ],
                "remove_on_failure": [
                    528,
                    570
                ],
                "task.batchable": [
                    528,
                    815
                ],
                "DONE": [
                    1192,
                    1486,
                    1487,
                    976,
                    531,
                    1245
                ],
                "self.re_enable": [
                    595,
                    532
                ],
                "batch_task": [
                    1473,
                    1474,
                    811,
                    812,
                    823,
                    824,
                    539,
                    540,
                    541
                ],
                "self.get_batch_running_tasks": [
                    539
                ],
                "batch_task.batch_id": [
                    541
                ],
                "task.add_failure": [
                    545
                ],
                "task.has_excessive_failures": [
                    546
                ],
                "config.batch_emails": [
                    549
                ],
                "notifications.send_error_email": [
                    550
                ],
                "notifications": [
                    550
                ],
                "task.retry_policy.retry_count": [
                    554
                ],
                "task.retry_policy": [
                    554,
                    878
                ],
                "config.disable_window": [
                    556
                ],
                "config.disable_persist": [
                    594,
                    557
                ],
                "pop": [
                    610,
                    563
                ],
                "task.updated": [
                    566
                ],
                "task.retry": [
                    569,
                    581,
                    598
                ],
                "config.retry_delay": [
                    569,
                    578,
                    581,
                    598
                ],
                "task.remove": [
                    585,
                    590,
                    817,
                    818,
                    602,
                    571
                ],
                "task.stakeholders": [
                    640,
                    585,
                    866,
                    575
                ],
                "assistants": [
                    575
                ],
                "config.remove_delay": [
                    589,
                    590
                ],
                "delete_tasks": [
                    608
                ],
                "task_obj": [
                    609,
                    610
                ],
                "self._tasks.pop": [
                    609
                ],
                "task_obj.status": [
                    610
                ],
                "worker": [
                    774,
                    775,
                    776,
                    903,
                    779,
                    907,
                    911,
                    789,
                    1045,
                    1046,
                    1047,
                    1051,
                    1179,
                    1180,
                    1056,
                    1077,
                    1080,
                    1081,
                    699,
                    700,
                    701,
                    702,
                    1089,
                    1090,
                    1356,
                    726,
                    727,
                    728,
                    1367,
                    1368,
                    1369,
                    1370,
                    1371,
                    1372,
                    1373,
                    1374,
                    865,
                    1375,
                    995,
                    613,
                    614,
                    741,
                    616,
                    745,
                    1001,
                    1385,
                    620,
                    1386,
                    1390,
                    1391,
                    880,
                    1392,
                    1393,
                    1394,
                    1012,
                    1395,
                    633,
                    634,
                    1023
                ],
                "last_active_lt": [
                    614,
                    623
                ],
                "worker.last_active": [
                    1368,
                    614
                ],
                "last_get_work": [
                    616,
                    618
                ],
                "worker.last_get_work": [
                    616
                ],
                "last_get_work_gt": [
                    617,
                    618
                ],
                "filter": [
                    1347,
                    623
                ],
                "w.assistant": [
                    623
                ],
                "w": [
                    707,
                    623
                ],
                "self.get_active_workers": [
                    623
                ],
                "self._active_workers.keys": [
                    626
                ],
                "self._active_workers.setdefault": [
                    629
                ],
                "Worker": [
                    629
                ],
                "delete_workers": [
                    633,
                    635
                ],
                "self._active_workers.pop": [
                    634
                ],
                "self._remove_workers_from_tasks": [
                    635,
                    644
                ],
                "self.get_active_tasks": [
                    638
                ],
                "remove_stakeholders": [
                    639
                ],
                "task.stakeholders.difference_update": [
                    640
                ],
                "workers": [
                    640,
                    641,
                    1129,
                    1130,
                    1390,
                    1396,
                    1365,
                    1375
                ],
                "worker_ids": [
                    644,
                    645
                ],
                "disabled": [
                    646
                ],
                "self.get_worker": [
                    646
                ],
                "self._config": [
                    1160,
                    1042,
                    663,
                    664,
                    1304,
                    668,
                    674,
                    678,
                    939,
                    686,
                    1455,
                    700,
                    701,
                    1087,
                    833,
                    835,
                    711,
                    712,
                    1351,
                    720,
                    758,
                    887
                ],
                "scheduler": [
                    663
                ],
                "self._state": [
                    1412,
                    903,
                    1160,
                    907,
                    911,
                    787,
                    664,
                    1312,
                    1185,
                    1444,
                    805,
                    1190,
                    1319,
                    682,
                    811,
                    1067,
                    685,
                    1322,
                    1453,
                    1455,
                    1077,
                    1461,
                    823,
                    1080,
                    1081,
                    1462,
                    699,
                    956,
                    1085,
                    1211,
                    1469,
                    704,
                    833,
                    1088,
                    707,
                    836,
                    1346,
                    710,
                    711,
                    712,
                    713,
                    1473,
                    1478,
                    1479,
                    717,
                    1357,
                    975,
                    1358,
                    726,
                    983,
                    1238,
                    1114,
                    987,
                    1244,
                    1374,
                    991,
                    1378,
                    739,
                    995,
                    1470,
                    871,
                    1384,
                    745,
                    1001,
                    750,
                    1006,
                    882,
                    1012,
                    758,
                    1273,
                    890,
                    1147
                ],
                "SimpleTaskState": [
                    664
                ],
                "self._config.state_path": [
                    664
                ],
                "task_history_impl": [
                    666,
                    667
                ],
                "self._task_history": [
                    672,
                    1488,
                    1490,
                    1492,
                    1499,
                    667,
                    670
                ],
                "self._config.record_task_history": [
                    668
                ],
                "db_task_history.DbTaskHistory": [
                    670
                ],
                "db_task_history": [
                    670
                ],
                "history.NopHistory": [
                    672
                ],
                "history": [
                    672
                ],
                "self._resources": [
                    928,
                    673,
                    929,
                    1410,
                    935,
                    1426,
                    947,
                    955,
                    927
                ],
                "getintdict": [
                    673
                ],
                "configuration.get_config": [
                    673
                ],
                "configuration": [
                    673
                ],
                "self._make_task": [
                    674,
                    780,
                    871
                ],
                "functools.partial": [
                    674
                ],
                "Task": [
                    674
                ],
                "self._config._get_retry_policy": [
                    674,
                    939
                ],
                "self._worker_requests": [
                    675
                ],
                "self._paused": [
                    676,
                    915,
                    1078,
                    919,
                    923
                ],
                "self._config.batch_emails": [
                    835,
                    678,
                    686,
                    720,
                    887
                ],
                "self._email_batcher": [
                    899,
                    679,
                    687,
                    721,
                    850,
                    853
                ],
                "BatchNotifier": [
                    679
                ],
                "self._state.load": [
                    682
                ],
                "self._state.dump": [
                    685
                ],
                "self._email_batcher.send_email": [
                    687
                ],
                "self._prune_workers": [
                    692
                ],
                "self._prune_tasks": [
                    693
                ],
                "self._prune_emails": [
                    694
                ],
                "rpc_method": [
                    1027,
                    901,
                    905,
                    909,
                    913,
                    917,
                    1176,
                    921,
                    1434,
                    1309,
                    925,
                    931,
                    1316,
                    1450,
                    1328,
                    689,
                    1459,
                    1467,
                    1476,
                    1233,
                    1362,
                    993,
                    743,
                    747,
                    885,
                    1398,
                    761
                ],
                "remove_workers": [
                    704,
                    698,
                    702
                ],
                "self._state.get_active_workers": [
                    1088,
                    699,
                    1374
                ],
                "worker.prune": [
                    700
                ],
                "self._config.worker_disconnect_delay": [
                    701,
                    1087
                ],
                "remove_workers.append": [
                    702
                ],
                "worker.id": [
                    1089,
                    702,
                    1367
                ],
                "self._state.inactivate_workers": [
                    704
                ],
                "assistant_ids": [
                    707,
                    711
                ],
                "w.id": [
                    707
                ],
                "self._state.get_assistants": [
                    707
                ],
                "remove_tasks": [
                    715,
                    708,
                    717
                ],
                "self._state.get_active_tasks": [
                    1346,
                    1444,
                    710,
                    1322,
                    1238
                ],
                "self._state.fail_dead_worker_task": [
                    711
                ],
                "self._state.update_status": [
                    712
                ],
                "self._state.may_prune": [
                    713
                ],
                "remove_tasks.append": [
                    715
                ],
                "self._state.inactivate_tasks": [
                    717
                ],
                "self._email_batcher.update": [
                    721
                ],
                "self._state.get_worker": [
                    995,
                    903,
                    1006,
                    911,
                    882,
                    1077,
                    726
                ],
                "worker.update": [
                    727
                ],
                "task.priority": [
                    737,
                    969,
                    1222
                ],
                "prio": [
                    737,
                    740,
                    741
                ],
                "max": [
                    737,
                    1204
                ],
                "dep": [
                    1297,
                    1298,
                    1299,
                    1300,
                    1190,
                    1191,
                    1192,
                    1195,
                    1196,
                    1323,
                    1324,
                    1199,
                    1201,
                    1205,
                    974,
                    975,
                    738,
                    739,
                    870,
                    871
                ],
                "task.deps": [
                    738,
                    870,
                    1323,
                    974,
                    1230,
                    857,
                    860
                ],
                "t": [
                    1344,
                    739,
                    740,
                    741,
                    871,
                    872,
                    1326,
                    1265
                ],
                "self._state.get_task": [
                    739,
                    1190,
                    871,
                    1479,
                    1453,
                    750,
                    975,
                    1358,
                    787,
                    1462,
                    1273,
                    1211,
                    1244,
                    1470
                ],
                "t.priority": [
                    740
                ],
                "self._update_priority": [
                    874,
                    741
                ],
                "float": [
                    744
                ],
                "self._state.set_batcher": [
                    745
                ],
                "task_family": [
                    745
                ],
                "batched_args": [
                    745
                ],
                "self._update_task_history": [
                    832,
                    1164,
                    757
                ],
                "self._state.set_status": [
                    1160,
                    833,
                    758,
                    991
                ],
                "self._update_worker": [
                    776,
                    1179,
                    1047
                ],
                "self._generate_retry_policy": [
                    777
                ],
                "retry_policy_dict": [
                    777,
                    939,
                    940,
                    941
                ],
                "worker.enabled": [
                    865,
                    779,
                    880,
                    789,
                    1051
                ],
                "_default_task": [
                    785,
                    787,
                    780
                ],
                "task.family": [
                    1221,
                    1095,
                    1274,
                    851,
                    854,
                    793,
                    794,
                    1115
                ],
                "getattr": [
                    1217,
                    1154,
                    1219,
                    1224,
                    1225,
                    1168,
                    1107,
                    795,
                    957,
                    958
                ],
                "task.module": [
                    796
                ],
                "task.params": [
                    1122,
                    1220,
                    840,
                    1097,
                    844,
                    1100,
                    797,
                    798,
                    1119
                ],
                "resources_running": [
                    805
                ],
                "self._state.get_batch_running_tasks": [
                    1473,
                    811,
                    805,
                    823
                ],
                "task.tracking_url": [
                    809
                ],
                "batch_task.tracking_url": [
                    812
                ],
                "batchable": [
                    814,
                    815
                ],
                "expl": [
                    899,
                    846,
                    848,
                    820,
                    821,
                    824
                ],
                "task.expl": [
                    821,
                    1463
                ],
                "batch_task.expl": [
                    824
                ],
                "new_deps": [
                    826,
                    859,
                    860
                ],
                "SUSPENDED": [
                    833
                ],
                "batched_params": [
                    1123,
                    836,
                    837,
                    1150,
                    1063,
                    1095,
                    841,
                    1127,
                    1099,
                    890,
                    891,
                    1118,
                    895
                ],
                "_": [
                    890,
                    836
                ],
                "self._state.get_batcher": [
                    890,
                    836,
                    1114
                ],
                "unbatched_params": [
                    1121,
                    898,
                    899,
                    838,
                    1063,
                    1127,
                    1097,
                    844,
                    851,
                    854,
                    892
                ],
                "param": [
                    839,
                    840,
                    841,
                    893,
                    894,
                    895
                ],
                "six.iteritems": [
                    1409,
                    1414,
                    840,
                    940,
                    1136,
                    894,
                    1107,
                    948,
                    1426,
                    958
                ],
                "expl_raw": [
                    848,
                    851,
                    846
                ],
                "json.loads": [
                    846
                ],
                "json": [
                    846
                ],
                "ValueError": [
                    847
                ],
                "self._email_batcher.add_failure": [
                    850
                ],
                "task.pretty_id": [
                    851,
                    1213,
                    854,
                    1463
                ],
                "owners": [
                    851,
                    899,
                    854
                ],
                "self._email_batcher.add_disable": [
                    853
                ],
                "task.deps.update": [
                    860
                ],
                "assistant": [
                    865,
                    1060,
                    1061,
                    1129,
                    1111
                ],
                "task.stakeholders.add": [
                    866
                ],
                "UNKNOWN": [
                    1280,
                    1284,
                    1286,
                    871
                ],
                "t.stakeholders.add": [
                    872
                ],
                "t.stakeholders": [
                    872
                ],
                "runnable": [
                    880,
                    883
                ],
                "task.workers.add": [
                    881
                ],
                "tasks.add": [
                    882
                ],
                "tasks": [
                    1346,
                    1091,
                    1092,
                    1347,
                    1094,
                    1417,
                    1418,
                    1419,
                    1391,
                    1392,
                    882,
                    1395
                ],
                "task.runnable": [
                    883,
                    1111
                ],
                "self._email_batcher.add_scheduling_fail": [
                    899
                ],
                "task_name": [
                    899
                ],
                "add_info": [
                    903
                ],
                "self._state.disable_workers": [
                    907
                ],
                "add_rpc_message": [
                    911
                ],
                "n": [
                    911
                ],
                "self._resources.update": [
                    929
                ],
                "amount": [
                    933,
                    1414,
                    935,
                    1136,
                    1137,
                    1107,
                    948,
                    949,
                    1108,
                    958,
                    959
                ],
                "int": [
                    1082,
                    933,
                    1382,
                    1383,
                    1075,
                    1016,
                    1017,
                    954
                ],
                "resource": [
                    1409,
                    1414,
                    1415,
                    1416,
                    1417,
                    1418,
                    1419,
                    1426,
                    1427,
                    1428,
                    1429,
                    1431,
                    935,
                    948,
                    949,
                    958,
                    959,
                    1107,
                    1108,
                    1136,
                    1137,
                    1406
                ],
                "_asdict": [
                    939
                ],
                "retry_policy_dict.update": [
                    940
                ],
                "k": [
                    940
                ],
                "v": [
                    940
                ],
                "task_retry_policy_dict": [
                    940
                ],
                "needed_resources": [
                    944,
                    948
                ],
                "available_resources": [
                    947,
                    949
                ],
                "used_resources": [
                    960,
                    1082,
                    1424,
                    1428,
                    949,
                    1429,
                    1112,
                    954,
                    1086,
                    959
                ],
                "available_resources.get": [
                    949
                ],
                "self._state.get_active_tasks_by_status": [
                    1346,
                    1378,
                    1412,
                    1384,
                    1067,
                    983,
                    987,
                    956,
                    1085
                ],
                "task.time": [
                    969,
                    1218,
                    1219
                ],
                "dep_task": [
                    976,
                    975
                ],
                "dep_task.status": [
                    976
                ],
                "running_batch_ids": [
                    988,
                    981
                ],
                "orphaned_tasks": [
                    986,
                    990
                ],
                "num_pending": [
                    997,
                    1382,
                    1386,
                    1393,
                    1015,
                    1020
                ],
                "num_unique_pending": [
                    1016,
                    1021,
                    997
                ],
                "num_pending_last_scheduled": [
                    1017,
                    997,
                    1022
                ],
                "running_tasks": [
                    1024,
                    1010,
                    998
                ],
                "upstream_status_table": [
                    1184,
                    1336,
                    1348,
                    1000,
                    1002,
                    1194,
                    1197,
                    1200,
                    1201,
                    1204,
                    1013,
                    1207,
                    1208,
                    1183
                ],
                "worker.get_tasks": [
                    1001,
                    1012,
                    1081
                ],
                "self._upstream_status": [
                    1002,
                    1348,
                    1013
                ],
                "other_worker": [
                    1008,
                    1009,
                    1006,
                    1007
                ],
                "more_info": [
                    1008,
                    1009,
                    1010
                ],
                "str": [
                    1008
                ],
                "more_info.update": [
                    1009
                ],
                "other_worker.info": [
                    1009
                ],
                "running_tasks.append": [
                    1010
                ],
                "task.workers.peek": [
                    1017
                ],
                "worker.state": [
                    1056,
                    1370,
                    1023
                ],
                "self._config.prune_on_get_work": [
                    1042
                ],
                "self.prune": [
                    1442,
                    1318,
                    1043,
                    1235,
                    1364,
                    1334,
                    1403,
                    1311
                ],
                "host": [
                    1049,
                    1492,
                    1164
                ],
                "reply": [
                    1152,
                    1153,
                    1058,
                    1154,
                    1155,
                    1156,
                    1157,
                    1166,
                    1167,
                    1168,
                    1169,
                    1172,
                    1141,
                    1174,
                    1052
                ],
                "self.add_worker": [
                    1061
                ],
                "batched_tasks": [
                    1125,
                    1157,
                    1063,
                    1096,
                    1101,
                    1143,
                    1144,
                    1146
                ],
                "best_task": [
                    1153,
                    1154,
                    1159,
                    1160,
                    1161,
                    1162,
                    1163,
                    1164,
                    1166,
                    1167,
                    1168,
                    1169,
                    1064,
                    1069,
                    1095,
                    1098,
                    1102,
                    1113,
                    1149
                ],
                "current_tasks": [
                    1065,
                    1066,
                    1071
                ],
                "ct_set": [
                    1066,
                    1068
                ],
                "self._rank": [
                    1067,
                    1092
                ],
                "self._reset_orphaned_batch_running_tasks": [
                    1073
                ],
                "greedy_resources": [
                    1137,
                    1075,
                    1108,
                    1110
                ],
                "relevant_tasks": [
                    1081,
                    1091,
                    1085,
                    1079
                ],
                "worker.is_trivial_worker": [
                    1080
                ],
                "greedy_workers": [
                    1089,
                    1131,
                    1133,
                    1105,
                    1106,
                    1083
                ],
                "self._used_resources": [
                    1424,
                    1086
                ],
                "activity_limit": [
                    1088,
                    1087
                ],
                "active_workers": [
                    1088,
                    1090
                ],
                "worker.info.get": [
                    1089,
                    1356
                ],
                "worker.info": [
                    1089,
                    1356,
                    1373
                ],
                "tasks.sort": [
                    1092
                ],
                "best_task.family": [
                    1167,
                    1153,
                    1095
                ],
                "task.is_batchable": [
                    1096,
                    1116
                ],
                "task.params.get": [
                    1097,
                    1100
                ],
                "unbatched_params.items": [
                    1097
                ],
                "best_task.resources": [
                    1098,
                    1162
                ],
                "self._schedulable": [
                    1098,
                    1110
                ],
                "batched_params.items": [
                    1099
                ],
                "params.append": [
                    1100
                ],
                "batched_tasks.append": [
                    1125,
                    1101
                ],
                "self._has_resources": [
                    1112,
                    1110
                ],
                "in_workers": [
                    1112,
                    1111
                ],
                "batch_param_names": [
                    1114,
                    1116,
                    1119
                ],
                "task.params.items": [
                    1122
                ],
                "task_worker": [
                    1130,
                    1131,
                    1133
                ],
                "greedy_workers.get": [
                    1131
                ],
                "self.count_pending": [
                    1141
                ],
                "batch_string": [
                    1144,
                    1145
                ],
                "hexdigest": [
                    1145
                ],
                "hashlib.md5": [
                    1145
                ],
                "hashlib": [
                    1145
                ],
                "batch_string.encode": [
                    1145
                ],
                "self._state.set_batch_running": [
                    1147
                ],
                "combined_params": [
                    1155,
                    1149,
                    1150
                ],
                "best_task.params.copy": [
                    1149
                ],
                "best_task.params": [
                    1169,
                    1149
                ],
                "combined_params.update": [
                    1150
                ],
                "best_task.worker_running": [
                    1161
                ],
                "best_task.resources_running": [
                    1162
                ],
                "best_task.time_running": [
                    1163
                ],
                "best_task.id": [
                    1166
                ],
                "worker.fetch_rpc_messages": [
                    1180
                ],
                "self._state.has_task": [
                    1312,
                    1185,
                    1478,
                    1319,
                    1357,
                    1461,
                    1469
                ],
                "task_stack": [
                    1186,
                    1196,
                    1188,
                    1189
                ],
                "dep_id": [
                    1189,
                    1190,
                    1194,
                    1196,
                    1197,
                    1200,
                    1201,
                    1207,
                    1208
                ],
                "task_stack.pop": [
                    1189
                ],
                "dep.status": [
                    1192,
                    1195,
                    1199
                ],
                "dep.deps": [
                    1201,
                    1195,
                    1196,
                    1205
                ],
                "dep_status": [
                    1200,
                    1199
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    1199
                ],
                "upstream_status_table.get": [
                    1204
                ],
                "a_task_id": [
                    1204,
                    1205
                ],
                "ret": [
                    1228,
                    1230,
                    1231,
                    1425,
                    1427,
                    1429,
                    1431,
                    1432,
                    1212
                ],
                "include_deps": [
                    1229
                ],
                "serialized": [
                    1304,
                    1282,
                    1349,
                    1350,
                    1446,
                    1447,
                    1452,
                    1296,
                    1456,
                    1457,
                    1236,
                    1268,
                    1239,
                    1240,
                    1307,
                    1303
                ],
                "seen": [
                    1258,
                    1259,
                    1260,
                    1298,
                    1267,
                    1299,
                    1237,
                    1239
                ],
                "serialized.update": [
                    1239
                ],
                "self._traverse_graph": [
                    1314,
                    1325,
                    1239
                ],
                "task_ids": [
                    1243
                ],
                "root_task_id": [
                    1267,
                    1260,
                    1269,
                    1302
                ],
                "dep_func": [
                    1293,
                    1263
                ],
                "t.deps": [
                    1265
                ],
                "seen.add": [
                    1299,
                    1267
                ],
                "queue": [
                    1300,
                    1269,
                    1270,
                    1271
                ],
                "queue.popleft": [
                    1271
                ],
                "family_match": [
                    1280,
                    1279
                ],
                "TASK_FAMILY_RE.match": [
                    1279
                ],
                "family_match.group": [
                    1280
                ],
                "include_done": [
                    1326,
                    1314,
                    1294
                ],
                "self._filter_done": [
                    1295
                ],
                "self._serialize_task": [
                    1380,
                    1349,
                    1446,
                    1415,
                    1296,
                    1456
                ],
                "queue.append": [
                    1300
                ],
                "self._config.max_graph_nodes": [
                    1304
                ],
                "inverse_graph": [
                    1321,
                    1324,
                    1326
                ],
                "add": [
                    1324
                ],
                "t.id": [
                    1326
                ],
                "result": [
                    1443,
                    1350,
                    1351,
                    1352,
                    1353,
                    1447,
                    1448,
                    1335
                ],
                "search": [
                    1337,
                    1341
                ],
                "terms": [
                    1344,
                    1341
                ],
                "search.split": [
                    1341
                ],
                "term": [
                    1344
                ],
                "t.pretty_id": [
                    1344
                ],
                "filter_func": [
                    1347
                ],
                "upstream_status": [
                    1348
                ],
                "limit": [
                    1351
                ],
                "self._config.max_shown_tasks": [
                    1351
                ],
                "pretty_id": [
                    1358
                ],
                "worker.started": [
                    1369
                ],
                "self._first_task_display_name": [
                    1371
                ],
                "worker.rpc_messages": [
                    1372
                ],
                "workers.sort": [
                    1375
                ],
                "include_running": [
                    1376
                ],
                "running": [
                    1377,
                    1380,
                    1391
                ],
                "num_uniques": [
                    1394,
                    1388,
                    1383
                ],
                "r_dict": [
                    1408,
                    1409,
                    1407
                ],
                "consumers": [
                    1417,
                    1411,
                    1415
                ],
                "total": [
                    1426,
                    1427
                ],
                "task.id.find": [
                    1445
                ],
                "task_str": [
                    1445
                ],
                "self._state.re_enable": [
                    1455
                ],
                "task.status_message": [
                    1480,
                    1471
                ],
                "batch_task.status_message": [
                    1474
                ],
                "successful": [
                    1488,
                    1487
                ],
                "self._task_history.task_finished": [
                    1488
                ],
                "self._task_history.task_scheduled": [
                    1490
                ],
                "self._task_history.task_started": [
                    1492
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    448,
                    576,
                    450,
                    455,
                    328,
                    330,
                    714,
                    460,
                    588,
                    691,
                    52,
                    468,
                    1494,
                    695,
                    1275,
                    701
                ],
                "logging.getLogger": [
                    52
                ],
                "logging": [
                    52
                ],
                "UPSTREAM_RUNNING": [
                    70,
                    69,
                    61,
                    54
                ],
                "UPSTREAM_MISSING_INPUT": [
                    71,
                    62,
                    55
                ],
                "UPSTREAM_FAILED": [
                    56,
                    68,
                    63
                ],
                "UPSTREAM_DISABLED": [
                    64,
                    72,
                    1002,
                    1013,
                    57
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    66,
                    59
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    66,
                    1206
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    66
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    67,
                    1199
                ],
                "FAILED": [
                    544,
                    835,
                    68,
                    580,
                    522,
                    1486,
                    880,
                    755,
                    1012,
                    598,
                    568,
                    511
                ],
                "RUNNING": [
                    1412,
                    1413,
                    1160,
                    1164,
                    525,
                    789,
                    538,
                    802,
                    808,
                    1067,
                    1081,
                    826,
                    956,
                    1085,
                    575,
                    1472,
                    69,
                    585,
                    1105,
                    1491,
                    983,
                    1378,
                    1001,
                    494
                ],
                "BATCH_RUNNING": [
                    515,
                    70,
                    479,
                    525,
                    826,
                    987,
                    575
                ],
                "PENDING": [
                    389,
                    781,
                    1195,
                    1081,
                    826,
                    828,
                    1085,
                    833,
                    1348,
                    71,
                    972,
                    1489,
                    599,
                    991,
                    1384,
                    749,
                    494,
                    1012,
                    762
                ],
                "DISABLED": [
                    544,
                    548,
                    72,
                    1227,
                    525,
                    1454,
                    559,
                    593,
                    530,
                    852,
                    535
                ],
                "WORKER_STATE_DISABLED": [
                    75,
                    404
                ],
                "WORKER_STATE_ACTIVE": [
                    402,
                    76
                ],
                "TASK_FAMILY_RE": [
                    78,
                    1279
                ],
                "re.compile": [
                    78
                ],
                "re": [
                    78
                ],
                "RPC_METHODS": [
                    80,
                    117
                ],
                "_retry_policy_fields": [
                    82,
                    91,
                    87
                ],
                "RetryPolicy": [
                    151,
                    91,
                    941,
                    87
                ],
                "collections.namedtuple": [
                    87
                ],
                "collections": [
                    1377,
                    1411,
                    1082,
                    1443,
                    1382,
                    1383,
                    169,
                    1321,
                    431,
                    208,
                    464,
                    1425,
                    1075,
                    1269,
                    87,
                    954
                ],
                "fn_args": [
                    98,
                    100,
                    101,
                    102,
                    103
                ],
                "inspect.getargspec": [
                    98
                ],
                "inspect": [
                    98
                ],
                "fn": [
                    105,
                    98,
                    107,
                    118
                ],
                "fn_args.varargs": [
                    100
                ],
                "fn_args.args": [
                    101,
                    102
                ],
                "all_args": [
                    102,
                    103,
                    104,
                    110,
                    114
                ],
                "defaults": [
                    104,
                    109,
                    103
                ],
                "fn_args.defaults": [
                    103
                ],
                "required_args": [
                    104,
                    112
                ],
                "arg": [
                    104,
                    112
                ],
                "fn_name": [
                    105,
                    114,
                    115,
                    117
                ],
                "fn.__name__": [
                    105
                ],
                "actual_args": [
                    109,
                    110,
                    111,
                    112,
                    114,
                    115
                ],
                "defaults.copy": [
                    109
                ],
                "actual_args.update": [
                    110,
                    111
                ],
                "args": [
                    110
                ],
                "kwargs": [
                    111,
                    663,
                    408,
                    889,
                    1178
                ],
                "self._request": [
                    115
                ],
                "self": [
                    115,
                    151,
                    168,
                    169,
                    170,
                    178,
                    179,
                    181,
                    187,
                    189,
                    190,
                    192,
                    198,
                    216,
                    218,
                    220,
                    223,
                    226,
                    229,
                    230,
                    232,
                    235,
                    236,
                    241,
                    248,
                    255,
                    257,
                    261,
                    262,
                    266,
                    267,
                    268,
                    272,
                    273,
                    279,
                    280,
                    281,
                    283,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    310,
                    316,
                    321,
                    324,
                    325,
                    328,
                    329,
                    330,
                    337,
                    338,
                    347,
                    348,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    355,
                    358,
                    362,
                    363,
                    365,
                    369,
                    373,
                    376,
                    378,
                    387,
                    389,
                    393,
                    397,
                    401,
                    408,
                    411,
                    412,
                    416,
                    429,
                    430,
                    431,
                    432,
                    433,
                    436,
                    439,
                    441,
                    445,
                    446,
                    450,
                    454,
                    455,
                    457,
                    463,
                    464,
                    465,
                    466,
                    468,
                    471,
                    474,
                    479,
                    484,
                    485,
                    488,
                    494,
                    498,
                    499,
                    502,
                    505,
                    511,
                    515,
                    532,
                    539,
                    540,
                    563,
                    564,
                    580,
                    595,
                    599,
                    609,
                    610,
                    613,
                    623,
                    626,
                    629,
                    634,
                    635,
                    638,
                    644,
                    646,
                    663,
                    664,
                    667,
                    668,
                    670,
                    672,
                    673,
                    674,
                    675,
                    676,
                    678,
                    679,
                    682,
                    685,
                    686,
                    687,
                    692,
                    693,
                    694,
                    699,
                    700,
                    701,
                    704,
                    707,
                    710,
                    711,
                    712,
                    713,
                    717,
                    720,
                    721,
                    726,
                    739,
                    741,
                    745,
                    750,
                    757,
                    758,
                    776,
                    777,
                    780,
                    787,
                    805,
                    811,
                    823,
                    832,
                    833,
                    835,
                    836,
                    850,
                    853,
                    871,
                    874,
                    882,
                    887,
                    890,
                    899,
                    903,
                    907,
                    911,
                    915,
                    919,
                    923,
                    927,
                    928,
                    929,
                    935,
                    939,
                    947,
                    955,
                    956,
                    975,
                    983,
                    987,
                    991,
                    995,
                    1001,
                    1002,
                    1006,
                    1012,
                    1013,
                    1042,
                    1043,
                    1047,
                    1061,
                    1067,
                    1073,
                    1077,
                    1078,
                    1080,
                    1081,
                    1085,
                    1086,
                    1087,
                    1088,
                    1092,
                    1098,
                    1110,
                    1112,
                    1114,
                    1141,
                    1147,
                    1160,
                    1164,
                    1179,
                    1185,
                    1190,
                    1211,
                    1235,
                    1238,
                    1239,
                    1244,
                    1273,
                    1295,
                    1296,
                    1304,
                    1311,
                    1312,
                    1314,
                    1318,
                    1319,
                    1322,
                    1325,
                    1334,
                    1346,
                    1348,
                    1349,
                    1351,
                    1357,
                    1358,
                    1364,
                    1371,
                    1374,
                    1378,
                    1380,
                    1384,
                    1403,
                    1409,
                    1410,
                    1412,
                    1415,
                    1424,
                    1426,
                    1442,
                    1444,
                    1446,
                    1453,
                    1455,
                    1456,
                    1461,
                    1462,
                    1469,
                    1470,
                    1473,
                    1478,
                    1479,
                    1488,
                    1490,
                    1492,
                    1499
                ],
                "request_args": [
                    115
                ],
                "functools.wraps": [
                    107
                ],
                "functools": [
                    674,
                    107
                ],
                "rpc_func": [
                    117
                ],
                "_rpc_method": [
                    120
                ],
                "Config": [
                    123
                ],
                "retry_delay": [
                    126
                ],
                "parameter.FloatParameter": [
                    128,
                    126,
                    127
                ],
                "parameter": [
                    128,
                    129,
                    131,
                    135,
                    137,
                    139,
                    141,
                    143,
                    144,
                    146,
                    148,
                    126,
                    127
                ],
                "remove_delay": [
                    127
                ],
                "worker_disconnect_delay": [
                    128
                ],
                "state_path": [
                    129,
                    429
                ],
                "parameter.Parameter": [
                    129
                ],
                "batch_emails": [
                    131
                ],
                "parameter.BoolParameter": [
                    146,
                    131,
                    148
                ],
                "disable_window": [
                    135
                ],
                "parameter.IntParameter": [
                    135,
                    137,
                    139,
                    141,
                    143,
                    144
                ],
                "retry_count": [
                    137
                ],
                "disable_hard_timeout": [
                    139
                ],
                "disable_persist": [
                    141
                ],
                "max_shown_tasks": [
                    1351,
                    143
                ],
                "max_graph_nodes": [
                    144
                ],
                "record_task_history": [
                    146
                ],
                "prune_on_get_work": [
                    148
                ],
                "self.retry_count": [
                    151
                ],
                "self.disable_hard_timeout": [
                    151
                ],
                "self.disable_window": [
                    151
                ],
                "self.window": [
                    168,
                    187
                ],
                "window": [
                    168
                ],
                "self.failures": [
                    192,
                    321,
                    324,
                    325,
                    198,
                    328,
                    169,
                    329,
                    301,
                    181,
                    189,
                    190
                ],
                "collections.deque": [
                    169,
                    1269
                ],
                "self.first_failure_time": [
                    178,
                    170,
                    179
                ],
                "failure_time": [
                    176,
                    179,
                    181
                ],
                "time.time": [
                    519,
                    1163,
                    287,
                    547,
                    806,
                    176,
                    566,
                    569,
                    187,
                    571,
                    1087,
                    325,
                    581,
                    590,
                    594,
                    598,
                    602,
                    349,
                    351,
                    363,
                    365,
                    369
                ],
                "time": [
                    519,
                    1163,
                    287,
                    547,
                    806,
                    176,
                    566,
                    569,
                    187,
                    571,
                    1087,
                    325,
                    581,
                    590,
                    594,
                    598,
                    602,
                    349,
                    351,
                    363,
                    365,
                    369
                ],
                "self.failures.append": [
                    181
                ],
                "min_time": [
                    187,
                    189
                ],
                "self.failures.popleft": [
                    190
                ],
                "self.failures.clear": [
                    198
                ],
                "x": [
                    202,
                    203
                ],
                "default": [
                    205,
                    502
                ],
                "collections.MutableSet": [
                    208
                ],
                "self.end": [
                    248,
                    257,
                    230,
                    241,
                    216
                ],
                "end": [
                    248,
                    249,
                    230,
                    231,
                    232,
                    241,
                    242,
                    243,
                    216,
                    217,
                    250
                ],
                "self.map": [
                    226,
                    229,
                    232,
                    235,
                    236,
                    218,
                    223
                ],
                "iterable": [
                    219,
                    220
                ],
                "key": [
                    257,
                    226,
                    258,
                    229,
                    261,
                    262,
                    232,
                    263,
                    235,
                    236,
                    337
                ],
                "curr": [
                    231,
                    232,
                    242,
                    243,
                    244,
                    245,
                    249,
                    250,
                    251,
                    252
                ],
                "prev": [
                    236,
                    237,
                    238
                ],
                "self.map.pop": [
                    236
                ],
                "last": [
                    257,
                    261
                ],
                "self.peek": [
                    261
                ],
                "self.discard": [
                    262
                ],
                "self.__class__.__name__": [
                    267,
                    268
                ],
                "self.__class__": [
                    267,
                    268
                ],
                "other": [
                    272,
                    273,
                    271
                ],
                "OrderedSet": [
                    281,
                    271
                ],
                "self.id": [
                    416,
                    328,
                    330,
                    279,
                    378,
                    347
                ],
                "task_id": [
                    1281,
                    1282,
                    1289,
                    781,
                    1296,
                    787,
                    1302,
                    279,
                    1303,
                    1183,
                    1184,
                    1185,
                    1186,
                    1312,
                    1314,
                    1319,
                    1453,
                    1326,
                    1456,
                    1461,
                    1462,
                    1463,
                    1465,
                    1211,
                    1469,
                    1470,
                    1478,
                    1479,
                    1480,
                    1482,
                    1356,
                    1357,
                    1358,
                    1360,
                    1243,
                    1244,
                    1246,
                    759,
                    505,
                    750,
                    752,
                    498,
                    502,
                    1271,
                    1273,
                    1275,
                    1279
                ],
                "self.stakeholders": [
                    280
                ],
                "self.workers": [
                    281
                ],
                "deps": [
                    781,
                    1230,
                    1293,
                    1295,
                    1296,
                    1297,
                    856,
                    857,
                    282,
                    285
                ],
                "self.deps": [
                    283,
                    285
                ],
                "self.status": [
                    286
                ],
                "status": [
                    286,
                    802,
                    1204,
                    1207,
                    826,
                    828,
                    832,
                    833,
                    1346,
                    835,
                    1486,
                    1487,
                    1489,
                    1491,
                    474,
                    749,
                    880,
                    757,
                    374,
                    758
                ],
                "self.time": [
                    288,
                    287
                ],
                "self.updated": [
                    288
                ],
                "self.retry": [
                    289
                ],
                "self.remove": [
                    290
                ],
                "self.worker_running": [
                    291
                ],
                "self.time_running": [
                    292
                ],
                "self.expl": [
                    293
                ],
                "self.priority": [
                    294
                ],
                "priority": [
                    874,
                    871,
                    294,
                    782
                ],
                "self.resources": [
                    1409,
                    295
                ],
                "_get_default": [
                    298,
                    798,
                    295
                ],
                "resources": [
                    673,
                    929,
                    295,
                    1416,
                    1420,
                    781,
                    1404,
                    862,
                    863
                ],
                "self.family": [
                    296,
                    338
                ],
                "family": [
                    1280,
                    899,
                    836,
                    485,
                    296,
                    488,
                    1288,
                    782,
                    794,
                    890
                ],
                "self.module": [
                    297
                ],
                "module": [
                    297,
                    796,
                    782
                ],
                "self.params": [
                    337,
                    298
                ],
                "params": [
                    1281,
                    898,
                    1287,
                    298,
                    1099,
                    1100,
                    782,
                    798,
                    894
                ],
                "self.retry_policy": [
                    325,
                    328,
                    329,
                    330,
                    300,
                    301
                ],
                "retry_policy": [
                    777,
                    300,
                    878
                ],
                "Failures": [
                    301
                ],
                "self.retry_policy.disable_window": [
                    301
                ],
                "self.tracking_url": [
                    302
                ],
                "tracking_url": [
                    808,
                    809,
                    812,
                    302
                ],
                "self.status_message": [
                    303
                ],
                "status_message": [
                    1471,
                    1474,
                    303
                ],
                "self.scheduler_disable_time": [
                    304
                ],
                "self.runnable": [
                    305
                ],
                "self.batchable": [
                    306,
                    316
                ],
                "self.batch_id": [
                    307
                ],
                "self.failures.add_failure": [
                    321
                ],
                "self.failures.first_failure_time": [
                    324,
                    325
                ],
                "self.retry_policy.disable_hard_timeout": [
                    325
                ],
                "logger.debug": [
                    328,
                    330,
                    588,
                    1275,
                    701
                ],
                "self.failures.num_failures": [
                    328,
                    329
                ],
                "self.retry_policy.retry_count": [
                    328,
                    329,
                    330
                ],
                "param_str": [
                    337,
                    338
                ],
                "join": [
                    1144,
                    337
                ],
                "value": [
                    1122,
                    839,
                    840,
                    1097,
                    337,
                    893,
                    894
                ],
                "self.params.items": [
                    337
                ],
                "worker_id": [
                    517,
                    645,
                    646,
                    775,
                    776,
                    1161,
                    1046,
                    1048,
                    1178,
                    1179,
                    803,
                    1061,
                    1068,
                    1073,
                    1077,
                    836,
                    726,
                    1111,
                    984,
                    347,
                    988,
                    1115,
                    866,
                    995,
                    484,
                    485,
                    488,
                    872,
                    874,
                    1129,
                    881,
                    882,
                    629,
                    1141,
                    889,
                    890,
                    1147,
                    1017
                ],
                "self.reference": [
                    362,
                    348
                ],
                "self.last_active": [
                    369,
                    363,
                    349
                ],
                "last_active": [
                    349
                ],
                "self.last_get_work": [
                    365,
                    350
                ],
                "self.started": [
                    351
                ],
                "self.tasks": [
                    352,
                    376,
                    373
                ],
                "self.info": [
                    353,
                    393,
                    358
                ],
                "self.disabled": [
                    354,
                    397
                ],
                "self.rpc_messages": [
                    408,
                    412,
                    355,
                    411
                ],
                "self.info.update": [
                    358
                ],
                "info": [
                    358,
                    903
                ],
                "worker_reference": [
                    361,
                    362,
                    727
                ],
                "get_work": [
                    364,
                    727
                ],
                "config.worker_disconnect_delay": [
                    369
                ],
                "config": [
                    523,
                    663,
                    540,
                    549,
                    556,
                    557,
                    569,
                    578,
                    580,
                    581,
                    589,
                    590,
                    594,
                    595,
                    598,
                    599,
                    369,
                    510,
                    511
                ],
                "num_self_tasks": [
                    373,
                    375
                ],
                "num_state_tasks": [
                    374,
                    375
                ],
                "state._status_tasks": [
                    374
                ],
                "state": [
                    389,
                    458,
                    463,
                    374,
                    439,
                    440,
                    441,
                    378
                ],
                "statuses": [
                    376,
                    474,
                    378,
                    374
                ],
                "six.moves.filter": [
                    376,
                    378
                ],
                "six.moves": [
                    376,
                    378
                ],
                "six": [
                    1409,
                    613,
                    1414,
                    840,
                    940,
                    1136,
                    465,
                    474,
                    1107,
                    948,
                    958,
                    1426,
                    471,
                    376,
                    378,
                    894
                ],
                "task.status": [
                    1413,
                    525,
                    530,
                    789,
                    538,
                    544,
                    1447,
                    808,
                    1454,
                    562,
                    563,
                    565,
                    826,
                    828,
                    1214,
                    575,
                    1472,
                    1348,
                    585,
                    1227,
                    972,
                    593,
                    466,
                    1105,
                    852,
                    598,
                    1245,
                    499,
                    755,
                    759,
                    376
                ],
                "task": [
                    512,
                    515,
                    516,
                    517,
                    518,
                    519,
                    525,
                    528,
                    530,
                    532,
                    535,
                    538,
                    539,
                    542,
                    544,
                    545,
                    546,
                    547,
                    551,
                    554,
                    555,
                    1067,
                    1068,
                    1069,
                    560,
                    562,
                    563,
                    564,
                    565,
                    566,
                    569,
                    571,
                    575,
                    577,
                    579,
                    580,
                    581,
                    1094,
                    1095,
                    1096,
                    585,
                    1097,
                    1098,
                    1100,
                    589,
                    590,
                    1101,
                    593,
                    594,
                    595,
                    1105,
                    1106,
                    598,
                    599,
                    1107,
                    1110,
                    602,
                    1111,
                    1112,
                    1113,
                    1115,
                    1116,
                    608,
                    609,
                    610,
                    1119,
                    1122,
                    1125,
                    1129,
                    1136,
                    1144,
                    1146,
                    1147,
                    638,
                    640,
                    641,
                    1157,
                    1211,
                    1213,
                    1214,
                    1215,
                    1216,
                    1217,
                    1218,
                    1219,
                    1220,
                    1221,
                    710,
                    711,
                    712,
                    713,
                    714,
                    715,
                    1222,
                    1223,
                    1224,
                    1225,
                    1227,
                    1228,
                    1230,
                    1238,
                    1239,
                    1244,
                    1245,
                    737,
                    738,
                    750,
                    751,
                    755,
                    757,
                    758,
                    759,
                    1273,
                    1274,
                    1293,
                    787,
                    789,
                    793,
                    794,
                    795,
                    796,
                    797,
                    798,
                    801,
                    802,
                    803,
                    805,
                    806,
                    808,
                    809,
                    810,
                    811,
                    1322,
                    1323,
                    1324,
                    815,
                    817,
                    818,
                    821,
                    822,
                    823,
                    826,
                    828,
                    832,
                    833,
                    1347,
                    1348,
                    1349,
                    1350,
                    840,
                    844,
                    851,
                    852,
                    854,
                    857,
                    860,
                    863,
                    866,
                    1378,
                    1379,
                    1380,
                    870,
                    1384,
                    1385,
                    874,
                    1387,
                    1388,
                    878,
                    881,
                    882,
                    883,
                    376,
                    378,
                    1412,
                    389,
                    1413,
                    1414,
                    1415,
                    1444,
                    1445,
                    1446,
                    1447,
                    1453,
                    1454,
                    1455,
                    1462,
                    1463,
                    956,
                    957,
                    958,
                    1470,
                    1471,
                    1472,
                    1473,
                    1479,
                    1480,
                    969,
                    972,
                    974,
                    1488,
                    465,
                    466,
                    1490,
                    1492,
                    982,
                    983,
                    984,
                    987,
                    988,
                    990,
                    479,
                    480,
                    991,
                    1001,
                    1002,
                    1006,
                    1008,
                    498,
                    499,
                    500,
                    1012,
                    1013,
                    1016,
                    1017,
                    508,
                    509,
                    511
                ],
                "task.workers": [
                    641,
                    1129,
                    1385,
                    1387,
                    1388,
                    881,
                    1111,
                    1016,
                    1017,
                    378,
                    1215
                ],
                "state.get_active_tasks_by_status": [
                    378
                ],
                "self.assistant": [
                    387
                ],
                "task.resources": [
                    389,
                    518,
                    1223,
                    1413,
                    1414,
                    1098,
                    1136,
                    1107,
                    1110,
                    1112,
                    957,
                    958,
                    863
                ],
                "self.get_tasks": [
                    389
                ],
                "self.info.get": [
                    393
                ],
                "self.enabled": [
                    401
                ],
                "self.rpc_messages.append": [
                    408
                ],
                "name": [
                    1122,
                    1123,
                    1097,
                    1099,
                    1100,
                    408,
                    1119
                ],
                "messages": [
                    411,
                    413
                ],
                "self._state_path": [
                    450,
                    454,
                    455,
                    457,
                    429,
                    468,
                    445
                ],
                "self._tasks": [
                    439,
                    609,
                    430,
                    465,
                    498,
                    436,
                    502,
                    471,
                    505
                ],
                "self._status_tasks": [
                    610,
                    494,
                    431,
                    464,
                    466,
                    499,
                    563,
                    564,
                    474
                ],
                "collections.defaultdict": [
                    1377,
                    1411,
                    1082,
                    1443,
                    1382,
                    1383,
                    1321,
                    431,
                    464,
                    1425,
                    1075,
                    954
                ],
                "self._active_workers": [
                    613,
                    432,
                    626,
                    436,
                    629,
                    439,
                    634
                ],
                "self._task_batchers": [
                    484,
                    485,
                    488,
                    433,
                    436,
                    441
                ],
                "fobj": [
                    457,
                    458,
                    445,
                    446
                ],
                "pickle.dump": [
                    446
                ],
                "pickle": [
                    458,
                    446
                ],
                "self.get_state": [
                    446
                ],
                "logger.warning": [
                    448,
                    1494
                ],
                "logger.info": [
                    576,
                    450,
                    455,
                    714,
                    691,
                    468,
                    695
                ],
                "os.path.exists": [
                    454
                ],
                "os.path": [
                    454
                ],
                "os": [
                    454
                ],
                "pickle.load": [
                    458
                ],
                "logger.exception": [
                    460
                ],
                "self.set_state": [
                    463
                ],
                "six.itervalues": [
                    465,
                    474,
                    613,
                    471
                ],
                "task.id": [
                    1157,
                    1415,
                    1445,
                    1446,
                    551,
                    1447,
                    555,
                    1068,
                    1324,
                    563,
                    564,
                    577,
                    1348,
                    1349,
                    1350,
                    714,
                    715,
                    589,
                    466,
                    1239,
                    1380,
                    1002,
                    1008,
                    499,
                    1013,
                    1144
                ],
                "itertools.chain.from_iterable": [
                    474
                ],
                "itertools.chain": [
                    1129,
                    474
                ],
                "itertools": [
                    1129,
                    474
                ],
                "batch_id": [
                    480,
                    801,
                    800,
                    516,
                    804,
                    805,
                    1156,
                    1145,
                    1147,
                    477
                ],
                "self.get_active_tasks_by_status": [
                    479
                ],
                "task.batch_id": [
                    480,
                    801,
                    1472,
                    1473,
                    516,
                    810,
                    811,
                    528,
                    822,
                    823,
                    982,
                    538,
                    539,
                    988,
                    542
                ],
                "self._task_batchers.setdefault": [
                    484
                ],
                "batcher_args": [
                    485
                ],
                "max_batch_size": [
                    485,
                    1063,
                    1096,
                    745,
                    1114
                ],
                "get": [
                    488
                ],
                "self._task_batchers.get": [
                    488
                ],
                "setdefault": [
                    497,
                    498
                ],
                "self._tasks.setdefault": [
                    498
                ],
                "self._tasks.get": [
                    502
                ],
                "task.scheduler_disable_time": [
                    547,
                    1228,
                    1454,
                    560,
                    593,
                    594,
                    535,
                    508
                ],
                "task.failures.clear": [
                    512,
                    509
                ],
                "task.failures": [
                    512,
                    509
                ],
                "self.set_status": [
                    515,
                    580,
                    599,
                    540,
                    511
                ],
                "task.worker_running": [
                    1216,
                    577,
                    802,
                    579,
                    803,
                    517,
                    1379,
                    1380,
                    1068,
                    1006,
                    1105,
                    1106,
                    984,
                    988,
                    575
                ],
                "task.resources_running": [
                    805,
                    518
                ],
                "task.time_running": [
                    806,
                    519
                ],
                "new_status": [
                    544,
                    548,
                    522,
                    525,
                    559,
                    562,
                    531,
                    564,
                    565,
                    535,
                    568,
                    538,
                    540
                ],
                "remove_on_failure": [
                    528,
                    570
                ],
                "task.batchable": [
                    528,
                    815
                ],
                "DONE": [
                    1192,
                    1486,
                    1487,
                    976,
                    531,
                    1245
                ],
                "self.re_enable": [
                    595,
                    532
                ],
                "batch_task": [
                    1473,
                    1474,
                    811,
                    812,
                    823,
                    824,
                    539,
                    540,
                    541
                ],
                "self.get_batch_running_tasks": [
                    539
                ],
                "batch_task.batch_id": [
                    541
                ],
                "task.add_failure": [
                    545
                ],
                "task.has_excessive_failures": [
                    546
                ],
                "config.batch_emails": [
                    549
                ],
                "notifications.send_error_email": [
                    550
                ],
                "notifications": [
                    550
                ],
                "task.retry_policy.retry_count": [
                    554
                ],
                "task.retry_policy": [
                    554,
                    878
                ],
                "config.disable_window": [
                    556
                ],
                "config.disable_persist": [
                    594,
                    557
                ],
                "pop": [
                    610,
                    563
                ],
                "task.updated": [
                    566
                ],
                "task.retry": [
                    569,
                    581,
                    598
                ],
                "config.retry_delay": [
                    569,
                    578,
                    581,
                    598
                ],
                "task.remove": [
                    585,
                    590,
                    817,
                    818,
                    602,
                    571
                ],
                "task.stakeholders": [
                    640,
                    585,
                    866,
                    575
                ],
                "assistants": [
                    575
                ],
                "config.remove_delay": [
                    589,
                    590
                ],
                "delete_tasks": [
                    608
                ],
                "task_obj": [
                    609,
                    610
                ],
                "self._tasks.pop": [
                    609
                ],
                "task_obj.status": [
                    610
                ],
                "worker": [
                    774,
                    775,
                    776,
                    903,
                    779,
                    907,
                    911,
                    789,
                    1045,
                    1046,
                    1047,
                    1051,
                    1179,
                    1180,
                    1056,
                    1077,
                    1080,
                    1081,
                    699,
                    700,
                    701,
                    702,
                    1089,
                    1090,
                    1356,
                    726,
                    727,
                    728,
                    1367,
                    1368,
                    1369,
                    1370,
                    1371,
                    1372,
                    1373,
                    1374,
                    865,
                    1375,
                    995,
                    613,
                    614,
                    741,
                    616,
                    745,
                    1001,
                    1385,
                    620,
                    1386,
                    1390,
                    1391,
                    880,
                    1392,
                    1393,
                    1394,
                    1012,
                    1395,
                    633,
                    634,
                    1023
                ],
                "last_active_lt": [
                    614,
                    623
                ],
                "worker.last_active": [
                    1368,
                    614
                ],
                "last_get_work": [
                    616,
                    618
                ],
                "worker.last_get_work": [
                    616
                ],
                "last_get_work_gt": [
                    617,
                    618
                ],
                "w.assistant": [
                    623
                ],
                "w": [
                    707,
                    623
                ],
                "self.get_active_workers": [
                    623
                ],
                "self._active_workers.keys": [
                    626
                ],
                "self._active_workers.setdefault": [
                    629
                ],
                "Worker": [
                    629
                ],
                "delete_workers": [
                    633,
                    635
                ],
                "self._active_workers.pop": [
                    634
                ],
                "self._remove_workers_from_tasks": [
                    635,
                    644
                ],
                "self.get_active_tasks": [
                    638
                ],
                "remove_stakeholders": [
                    639
                ],
                "task.stakeholders.difference_update": [
                    640
                ],
                "workers": [
                    640,
                    641,
                    1129,
                    1130,
                    1390,
                    1396,
                    1365,
                    1375
                ],
                "worker_ids": [
                    644,
                    645
                ],
                "disabled": [
                    646
                ],
                "self.get_worker": [
                    646
                ],
                "self._config": [
                    1160,
                    1042,
                    663,
                    664,
                    1304,
                    668,
                    674,
                    678,
                    939,
                    686,
                    1455,
                    700,
                    701,
                    1087,
                    833,
                    835,
                    711,
                    712,
                    1351,
                    720,
                    758,
                    887
                ],
                "scheduler": [
                    663
                ],
                "self._state": [
                    1412,
                    903,
                    1160,
                    907,
                    911,
                    787,
                    664,
                    1312,
                    1185,
                    1444,
                    805,
                    1190,
                    1319,
                    682,
                    811,
                    1067,
                    685,
                    1322,
                    1453,
                    1455,
                    1077,
                    1461,
                    823,
                    1080,
                    1081,
                    1462,
                    699,
                    956,
                    1085,
                    1211,
                    1469,
                    704,
                    833,
                    1088,
                    707,
                    836,
                    1346,
                    710,
                    711,
                    712,
                    713,
                    1473,
                    1478,
                    1479,
                    717,
                    1357,
                    975,
                    1358,
                    726,
                    983,
                    1238,
                    1114,
                    987,
                    1244,
                    1374,
                    991,
                    1378,
                    739,
                    995,
                    1470,
                    871,
                    1384,
                    745,
                    1001,
                    750,
                    1006,
                    882,
                    1012,
                    758,
                    1273,
                    890,
                    1147
                ],
                "SimpleTaskState": [
                    664
                ],
                "self._config.state_path": [
                    664
                ],
                "task_history_impl": [
                    666,
                    667
                ],
                "self._task_history": [
                    672,
                    1488,
                    1490,
                    1492,
                    1499,
                    667,
                    670
                ],
                "self._config.record_task_history": [
                    668
                ],
                "db_task_history.DbTaskHistory": [
                    670
                ],
                "db_task_history": [
                    670
                ],
                "history.NopHistory": [
                    672
                ],
                "history": [
                    672
                ],
                "self._resources": [
                    928,
                    673,
                    929,
                    1410,
                    935,
                    1426,
                    947,
                    955,
                    927
                ],
                "getintdict": [
                    673
                ],
                "configuration.get_config": [
                    673
                ],
                "configuration": [
                    673
                ],
                "self._make_task": [
                    674,
                    780,
                    871
                ],
                "functools.partial": [
                    674
                ],
                "Task": [
                    674
                ],
                "self._config._get_retry_policy": [
                    674,
                    939
                ],
                "self._worker_requests": [
                    675
                ],
                "self._paused": [
                    676,
                    915,
                    1078,
                    919,
                    923
                ],
                "self._config.batch_emails": [
                    835,
                    678,
                    686,
                    720,
                    887
                ],
                "self._email_batcher": [
                    899,
                    679,
                    687,
                    721,
                    850,
                    853
                ],
                "BatchNotifier": [
                    679
                ],
                "self._state.load": [
                    682
                ],
                "self._state.dump": [
                    685
                ],
                "self._email_batcher.send_email": [
                    687
                ],
                "self._prune_workers": [
                    692
                ],
                "self._prune_tasks": [
                    693
                ],
                "self._prune_emails": [
                    694
                ],
                "rpc_method": [
                    1027,
                    901,
                    905,
                    909,
                    913,
                    917,
                    1176,
                    921,
                    1434,
                    1309,
                    925,
                    931,
                    1316,
                    1450,
                    1328,
                    689,
                    1459,
                    1467,
                    1476,
                    1233,
                    1362,
                    993,
                    743,
                    747,
                    885,
                    1398,
                    761
                ],
                "remove_workers": [
                    704,
                    698,
                    702
                ],
                "self._state.get_active_workers": [
                    1088,
                    699,
                    1374
                ],
                "worker.prune": [
                    700
                ],
                "self._config.worker_disconnect_delay": [
                    701,
                    1087
                ],
                "remove_workers.append": [
                    702
                ],
                "worker.id": [
                    1089,
                    702,
                    1367
                ],
                "self._state.inactivate_workers": [
                    704
                ],
                "assistant_ids": [
                    707,
                    711
                ],
                "w.id": [
                    707
                ],
                "self._state.get_assistants": [
                    707
                ],
                "remove_tasks": [
                    715,
                    708,
                    717
                ],
                "self._state.get_active_tasks": [
                    1346,
                    1444,
                    710,
                    1322,
                    1238
                ],
                "self._state.fail_dead_worker_task": [
                    711
                ],
                "self._state.update_status": [
                    712
                ],
                "self._state.may_prune": [
                    713
                ],
                "remove_tasks.append": [
                    715
                ],
                "self._state.inactivate_tasks": [
                    717
                ],
                "self._email_batcher.update": [
                    721
                ],
                "self._state.get_worker": [
                    995,
                    903,
                    1006,
                    911,
                    882,
                    1077,
                    726
                ],
                "worker.update": [
                    727
                ],
                "task.priority": [
                    737,
                    969,
                    1222
                ],
                "prio": [
                    737,
                    740,
                    741
                ],
                "dep": [
                    1297,
                    1298,
                    1299,
                    1300,
                    1190,
                    1191,
                    1192,
                    1195,
                    1196,
                    1323,
                    1324,
                    1199,
                    1201,
                    1205,
                    974,
                    975,
                    738,
                    739,
                    870,
                    871
                ],
                "task.deps": [
                    738,
                    870,
                    1323,
                    974,
                    1230,
                    857,
                    860
                ],
                "t": [
                    1344,
                    739,
                    740,
                    741,
                    871,
                    872,
                    1326,
                    1265
                ],
                "self._state.get_task": [
                    739,
                    1190,
                    871,
                    1479,
                    1453,
                    750,
                    975,
                    1358,
                    787,
                    1462,
                    1273,
                    1211,
                    1244,
                    1470
                ],
                "t.priority": [
                    740
                ],
                "self._update_priority": [
                    874,
                    741
                ],
                "self._state.set_batcher": [
                    745
                ],
                "task_family": [
                    745
                ],
                "batched_args": [
                    745
                ],
                "self._update_task_history": [
                    832,
                    1164,
                    757
                ],
                "self._state.set_status": [
                    1160,
                    833,
                    758,
                    991
                ],
                "self._update_worker": [
                    776,
                    1179,
                    1047
                ],
                "self._generate_retry_policy": [
                    777
                ],
                "retry_policy_dict": [
                    777,
                    939,
                    940,
                    941
                ],
                "worker.enabled": [
                    865,
                    779,
                    880,
                    789,
                    1051
                ],
                "_default_task": [
                    785,
                    787,
                    780
                ],
                "task.family": [
                    1221,
                    1095,
                    1274,
                    851,
                    854,
                    793,
                    794,
                    1115
                ],
                "task.module": [
                    796
                ],
                "task.params": [
                    1122,
                    1220,
                    840,
                    1097,
                    844,
                    1100,
                    797,
                    798,
                    1119
                ],
                "resources_running": [
                    805
                ],
                "self._state.get_batch_running_tasks": [
                    1473,
                    811,
                    805,
                    823
                ],
                "task.tracking_url": [
                    809
                ],
                "batch_task.tracking_url": [
                    812
                ],
                "batchable": [
                    814,
                    815
                ],
                "expl": [
                    899,
                    846,
                    848,
                    820,
                    821,
                    824
                ],
                "task.expl": [
                    821,
                    1463
                ],
                "batch_task.expl": [
                    824
                ],
                "new_deps": [
                    826,
                    859,
                    860
                ],
                "SUSPENDED": [
                    833
                ],
                "batched_params": [
                    1123,
                    836,
                    837,
                    1150,
                    1063,
                    1095,
                    841,
                    1127,
                    1099,
                    890,
                    891,
                    1118,
                    895
                ],
                "_": [
                    890,
                    836
                ],
                "self._state.get_batcher": [
                    890,
                    836,
                    1114
                ],
                "unbatched_params": [
                    1121,
                    898,
                    899,
                    838,
                    1063,
                    1127,
                    1097,
                    844,
                    851,
                    854,
                    892
                ],
                "param": [
                    839,
                    840,
                    841,
                    893,
                    894,
                    895
                ],
                "six.iteritems": [
                    1409,
                    1414,
                    840,
                    940,
                    1136,
                    894,
                    1107,
                    948,
                    1426,
                    958
                ],
                "expl_raw": [
                    848,
                    851,
                    846
                ],
                "json.loads": [
                    846
                ],
                "json": [
                    846
                ],
                "self._email_batcher.add_failure": [
                    850
                ],
                "task.pretty_id": [
                    851,
                    1213,
                    854,
                    1463
                ],
                "owners": [
                    851,
                    899,
                    854
                ],
                "self._email_batcher.add_disable": [
                    853
                ],
                "task.deps.update": [
                    860
                ],
                "assistant": [
                    865,
                    1060,
                    1061,
                    1129,
                    1111
                ],
                "task.stakeholders.add": [
                    866
                ],
                "UNKNOWN": [
                    1280,
                    1284,
                    1286,
                    871
                ],
                "t.stakeholders.add": [
                    872
                ],
                "t.stakeholders": [
                    872
                ],
                "runnable": [
                    880,
                    883
                ],
                "task.workers.add": [
                    881
                ],
                "tasks.add": [
                    882
                ],
                "tasks": [
                    1346,
                    1091,
                    1092,
                    1347,
                    1094,
                    1417,
                    1418,
                    1419,
                    1391,
                    1392,
                    882,
                    1395
                ],
                "task.runnable": [
                    883,
                    1111
                ],
                "self._email_batcher.add_scheduling_fail": [
                    899
                ],
                "task_name": [
                    899
                ],
                "add_info": [
                    903
                ],
                "self._state.disable_workers": [
                    907
                ],
                "add_rpc_message": [
                    911
                ],
                "n": [
                    911
                ],
                "self._resources.update": [
                    929
                ],
                "amount": [
                    933,
                    1414,
                    935,
                    1136,
                    1137,
                    1107,
                    948,
                    949,
                    1108,
                    958,
                    959
                ],
                "resource": [
                    1409,
                    1414,
                    1415,
                    1416,
                    1417,
                    1418,
                    1419,
                    1426,
                    1427,
                    1428,
                    1429,
                    1431,
                    935,
                    948,
                    949,
                    958,
                    959,
                    1107,
                    1108,
                    1136,
                    1137,
                    1406
                ],
                "_asdict": [
                    939
                ],
                "retry_policy_dict.update": [
                    940
                ],
                "k": [
                    940
                ],
                "v": [
                    940
                ],
                "task_retry_policy_dict": [
                    940
                ],
                "needed_resources": [
                    944,
                    948
                ],
                "available_resources": [
                    947,
                    949
                ],
                "used_resources": [
                    960,
                    1082,
                    1424,
                    1428,
                    949,
                    1429,
                    1112,
                    954,
                    1086,
                    959
                ],
                "available_resources.get": [
                    949
                ],
                "self._state.get_active_tasks_by_status": [
                    1346,
                    1378,
                    1412,
                    1384,
                    1067,
                    983,
                    987,
                    956,
                    1085
                ],
                "task.time": [
                    969,
                    1218,
                    1219
                ],
                "dep_task": [
                    976,
                    975
                ],
                "dep_task.status": [
                    976
                ],
                "running_batch_ids": [
                    988,
                    981
                ],
                "orphaned_tasks": [
                    986,
                    990
                ],
                "num_pending": [
                    997,
                    1382,
                    1386,
                    1393,
                    1015,
                    1020
                ],
                "num_unique_pending": [
                    1016,
                    1021,
                    997
                ],
                "num_pending_last_scheduled": [
                    1017,
                    997,
                    1022
                ],
                "running_tasks": [
                    1024,
                    1010,
                    998
                ],
                "upstream_status_table": [
                    1184,
                    1336,
                    1348,
                    1000,
                    1002,
                    1194,
                    1197,
                    1200,
                    1201,
                    1204,
                    1013,
                    1207,
                    1208,
                    1183
                ],
                "worker.get_tasks": [
                    1001,
                    1012,
                    1081
                ],
                "self._upstream_status": [
                    1002,
                    1348,
                    1013
                ],
                "other_worker": [
                    1008,
                    1009,
                    1006,
                    1007
                ],
                "more_info": [
                    1008,
                    1009,
                    1010
                ],
                "more_info.update": [
                    1009
                ],
                "other_worker.info": [
                    1009
                ],
                "running_tasks.append": [
                    1010
                ],
                "task.workers.peek": [
                    1017
                ],
                "worker.state": [
                    1056,
                    1370,
                    1023
                ],
                "self._config.prune_on_get_work": [
                    1042
                ],
                "self.prune": [
                    1442,
                    1318,
                    1043,
                    1235,
                    1364,
                    1334,
                    1403,
                    1311
                ],
                "host": [
                    1049,
                    1492,
                    1164
                ],
                "reply": [
                    1152,
                    1153,
                    1058,
                    1154,
                    1155,
                    1156,
                    1157,
                    1166,
                    1167,
                    1168,
                    1169,
                    1172,
                    1141,
                    1174,
                    1052
                ],
                "self.add_worker": [
                    1061
                ],
                "batched_tasks": [
                    1125,
                    1157,
                    1063,
                    1096,
                    1101,
                    1143,
                    1144,
                    1146
                ],
                "best_task": [
                    1153,
                    1154,
                    1159,
                    1160,
                    1161,
                    1162,
                    1163,
                    1164,
                    1166,
                    1167,
                    1168,
                    1169,
                    1064,
                    1069,
                    1095,
                    1098,
                    1102,
                    1113,
                    1149
                ],
                "current_tasks": [
                    1065,
                    1066,
                    1071
                ],
                "ct_set": [
                    1066,
                    1068
                ],
                "self._rank": [
                    1067,
                    1092
                ],
                "self._reset_orphaned_batch_running_tasks": [
                    1073
                ],
                "greedy_resources": [
                    1137,
                    1075,
                    1108,
                    1110
                ],
                "relevant_tasks": [
                    1081,
                    1091,
                    1085,
                    1079
                ],
                "worker.is_trivial_worker": [
                    1080
                ],
                "greedy_workers": [
                    1089,
                    1131,
                    1133,
                    1105,
                    1106,
                    1083
                ],
                "self._used_resources": [
                    1424,
                    1086
                ],
                "activity_limit": [
                    1088,
                    1087
                ],
                "active_workers": [
                    1088,
                    1090
                ],
                "worker.info.get": [
                    1089,
                    1356
                ],
                "worker.info": [
                    1089,
                    1356,
                    1373
                ],
                "tasks.sort": [
                    1092
                ],
                "best_task.family": [
                    1167,
                    1153,
                    1095
                ],
                "task.is_batchable": [
                    1096,
                    1116
                ],
                "task.params.get": [
                    1097,
                    1100
                ],
                "unbatched_params.items": [
                    1097
                ],
                "best_task.resources": [
                    1098,
                    1162
                ],
                "self._schedulable": [
                    1098,
                    1110
                ],
                "batched_params.items": [
                    1099
                ],
                "params.append": [
                    1100
                ],
                "batched_tasks.append": [
                    1125,
                    1101
                ],
                "self._has_resources": [
                    1112,
                    1110
                ],
                "in_workers": [
                    1112,
                    1111
                ],
                "batch_param_names": [
                    1114,
                    1116,
                    1119
                ],
                "task.params.items": [
                    1122
                ],
                "task_worker": [
                    1130,
                    1131,
                    1133
                ],
                "greedy_workers.get": [
                    1131
                ],
                "self.count_pending": [
                    1141
                ],
                "batch_string": [
                    1144,
                    1145
                ],
                "hexdigest": [
                    1145
                ],
                "hashlib.md5": [
                    1145
                ],
                "hashlib": [
                    1145
                ],
                "batch_string.encode": [
                    1145
                ],
                "self._state.set_batch_running": [
                    1147
                ],
                "combined_params": [
                    1155,
                    1149,
                    1150
                ],
                "best_task.params.copy": [
                    1149
                ],
                "best_task.params": [
                    1169,
                    1149
                ],
                "combined_params.update": [
                    1150
                ],
                "best_task.worker_running": [
                    1161
                ],
                "best_task.resources_running": [
                    1162
                ],
                "best_task.time_running": [
                    1163
                ],
                "best_task.id": [
                    1166
                ],
                "worker.fetch_rpc_messages": [
                    1180
                ],
                "self._state.has_task": [
                    1312,
                    1185,
                    1478,
                    1319,
                    1357,
                    1461,
                    1469
                ],
                "task_stack": [
                    1186,
                    1196,
                    1188,
                    1189
                ],
                "dep_id": [
                    1189,
                    1190,
                    1194,
                    1196,
                    1197,
                    1200,
                    1201,
                    1207,
                    1208
                ],
                "task_stack.pop": [
                    1189
                ],
                "dep.status": [
                    1192,
                    1195,
                    1199
                ],
                "dep.deps": [
                    1201,
                    1195,
                    1196,
                    1205
                ],
                "dep_status": [
                    1200,
                    1199
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    1199
                ],
                "upstream_status_table.get": [
                    1204
                ],
                "a_task_id": [
                    1204,
                    1205
                ],
                "ret": [
                    1228,
                    1230,
                    1231,
                    1425,
                    1427,
                    1429,
                    1431,
                    1432,
                    1212
                ],
                "include_deps": [
                    1229
                ],
                "serialized": [
                    1304,
                    1282,
                    1349,
                    1350,
                    1446,
                    1447,
                    1452,
                    1296,
                    1456,
                    1457,
                    1236,
                    1268,
                    1239,
                    1240,
                    1307,
                    1303
                ],
                "seen": [
                    1258,
                    1259,
                    1260,
                    1298,
                    1267,
                    1299,
                    1237,
                    1239
                ],
                "serialized.update": [
                    1239
                ],
                "self._traverse_graph": [
                    1314,
                    1325,
                    1239
                ],
                "task_ids": [
                    1243
                ],
                "root_task_id": [
                    1267,
                    1260,
                    1269,
                    1302
                ],
                "dep_func": [
                    1293,
                    1263
                ],
                "t.deps": [
                    1265
                ],
                "seen.add": [
                    1299,
                    1267
                ],
                "queue": [
                    1300,
                    1269,
                    1270,
                    1271
                ],
                "queue.popleft": [
                    1271
                ],
                "family_match": [
                    1280,
                    1279
                ],
                "TASK_FAMILY_RE.match": [
                    1279
                ],
                "family_match.group": [
                    1280
                ],
                "include_done": [
                    1326,
                    1314,
                    1294
                ],
                "self._filter_done": [
                    1295
                ],
                "self._serialize_task": [
                    1380,
                    1349,
                    1446,
                    1415,
                    1296,
                    1456
                ],
                "queue.append": [
                    1300
                ],
                "self._config.max_graph_nodes": [
                    1304
                ],
                "inverse_graph": [
                    1321,
                    1324,
                    1326
                ],
                "add": [
                    1324
                ],
                "t.id": [
                    1326
                ],
                "result": [
                    1443,
                    1350,
                    1351,
                    1352,
                    1353,
                    1447,
                    1448,
                    1335
                ],
                "search": [
                    1337,
                    1341
                ],
                "terms": [
                    1344,
                    1341
                ],
                "search.split": [
                    1341
                ],
                "term": [
                    1344
                ],
                "t.pretty_id": [
                    1344
                ],
                "filter_func": [
                    1347
                ],
                "upstream_status": [
                    1348
                ],
                "limit": [
                    1351
                ],
                "self._config.max_shown_tasks": [
                    1351
                ],
                "pretty_id": [
                    1358
                ],
                "worker.started": [
                    1369
                ],
                "self._first_task_display_name": [
                    1371
                ],
                "worker.rpc_messages": [
                    1372
                ],
                "workers.sort": [
                    1375
                ],
                "include_running": [
                    1376
                ],
                "running": [
                    1377,
                    1380,
                    1391
                ],
                "num_uniques": [
                    1394,
                    1388,
                    1383
                ],
                "r_dict": [
                    1408,
                    1409,
                    1407
                ],
                "consumers": [
                    1417,
                    1411,
                    1415
                ],
                "total": [
                    1426,
                    1427
                ],
                "task.id.find": [
                    1445
                ],
                "task_str": [
                    1445
                ],
                "self._state.re_enable": [
                    1455
                ],
                "task.status_message": [
                    1480,
                    1471
                ],
                "batch_task.status_message": [
                    1474
                ],
                "successful": [
                    1488,
                    1487
                ],
                "self._task_history.task_finished": [
                    1488
                ],
                "self._task_history.task_scheduled": [
                    1490
                ],
                "self._task_history.task_started": [
                    1492
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/luigi_7/test/scheduler_api_test.py",
                "test_function": "test_status_wont_override",
                "test_function_code": "    def test_status_wont_override(self):\n        # Worker X is running A\n        # Worker Y wants to override the status to UNKNOWN (e.g. complete is throwing an exception)\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.sch.add_task(worker='Y', task_id='A', status=UNKNOWN)\n        self.assertEqual({'A'}, set(self.sch.task_list(RUNNING, '').keys()))",
                "test_error": "AssertionError: Items in the first set but not the second: 'A'",
                "full_test_error": "self = <scheduler_api_test.SchedulerApiTest testMethod=test_status_wont_override>\n\n    def test_status_wont_override(self):\n        # Worker X is running A\n        # Worker Y wants to override the status to UNKNOWN (e.g. complete is throwing an exception)\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.sch.add_task(worker='Y', task_id='A', status=UNKNOWN)\n>       self.assertEqual({'A'}, set(self.sch.task_list(RUNNING, '').keys()))\nE       AssertionError: Items in the first set but not the second:\nE       'A'\n\ntest/scheduler_api_test.py:111: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}