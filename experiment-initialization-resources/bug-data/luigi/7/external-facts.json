{
    "luigi:7": {
        "github_issue_title": [
            "What's the purpose of a worker telling the scheduler that a task has UNKNOWN status?\n"
        ],
        "github_issue_description": [
            "The scheduler correctly marks a task as UNKNOWN when it first encounters that task as a dependency of another task being updated. It's assumed the worker will eventually update the state of such new task with either PENDING or DONE.\nBut a worker can (AT ANY TIME!) also update the status to UNKNOWN on three conditions:\n- when the scheduled tasks reach the task-limit (if the config is set)\n- when the .complete() of the task fails\n- when the .deps() of the task fails\n\nI can understand the intention of providing a visual feedback on the scheduler page in those conditions, but I'd argue that is wrong in all 3 cases to update the scheduler's status and the reasons is simply because those conditions may represent a flaky/local reality of things and it shouldn't be reflected in the central scheduler.\n\nI can give multiple examples of how things could go bad, but simply put because 1 worker can't run a complete(), it doesn't mean other workers can't. And if that's the case you'll have that \"bad\" worker continually overriding the actual scheduler's state with UNKNOWN, which could lead to a task instance running multiple times at once (it happened to us today).\n\nIf there's an actual coding issue where complete() fails systematically, I think it's ok for that task not to appear on the scheduler, after all that's the de facto unknown status of any task :)\n\nAm I missing something here? Should I file this as an issue?\n"
        ]
    }
}