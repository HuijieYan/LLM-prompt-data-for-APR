{
    "1.1.1": "def get_necessary_tasks(self):\n    necessary_tasks = set()\n    for task in self.get_active_tasks():\n        if task.status not in (DONE, DISABLED) or \\\n                getattr(task, 'scheduler_disable_time', None) is not None:\n            necessary_tasks.update(task.deps)\n            necessary_tasks.add(task.id)\n    return necessary_tasks\n",
    "1.1.2": null,
    "1.2.1": "luigi/scheduler.py",
    "1.2.2": "from luigi.task_status import DISABLED, DONE, FAILED, PENDING, RUNNING, SUSPENDED, UNKNOWN",
    "1.3.1": "class SimpleTaskState(object)",
    "1.3.2": "Keep track of the current state and handle persistance.\n\nThe point of this class is to enable other ways to keep state, eg. by using a database\nThese will be implemented by creating an abstract base class that this and other classes\ninherit from.",
    "1.4.1": [
        "get_active_tasks(self, status=None)"
    ],
    "1.4.2": [
        "update(self, worker_reference, get_work=False)",
        "get_active_tasks(self, status=None)",
        "update(self, worker_id, worker_reference=None, get_work=False)"
    ],
    "1.5.1": [
        "    def test_assistants_dont_nurture_finished_statuses(self):\n        \"\"\"\n        Assistants should not affect longevity of DONE tasks\n\n        Also check for statuses DISABLED and UNKNOWN.\n        \"\"\"\n        self.sch = CentralPlannerScheduler(retry_delay=100000000000)  # Never pendify failed tasks\n        self.setTime(1)\n        self.sch.add_worker('assistant', [('assistant', True)])\n        self.sch.ping(worker='assistant')\n        self.sch.add_task(worker='uploader', task_id='running', status=PENDING)\n        self.assertEqual(self.sch.get_work(worker='assistant', assistant=True)['task_id'], 'running')\n\n        self.setTime(2)\n        self.sch.add_task(worker='uploader', task_id='done', status=DONE)\n        self.sch.add_task(worker='uploader', task_id='disabled', status=DISABLED)\n        self.sch.add_task(worker='uploader', task_id='pending', status=PENDING)\n        self.sch.add_task(worker='uploader', task_id='failed', status=FAILED)\n        self.sch.add_task(worker='uploader', task_id='unknown', status=UNKNOWN)\n\n        self.setTime(100000)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n\n        self.setTime(200000)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n        nurtured_statuses = ['PENDING', 'FAILED', 'RUNNING']\n        not_nurtured_statuses = ['DONE', 'UNKNOWN', 'DISABLED']\n\n        for status in nurtured_statuses:\n            print(status)\n            self.assertEqual(set([status.lower()]), set(self.sch.task_list(status, '')))\n\n        for status in not_nurtured_statuses:\n            print(status)\n            self.assertEqual(set([]), set(self.sch.task_list(status, '')))\n\n        self.assertEqual(3, len(self.sch.task_list(None, '')))  # None == All statuses"
    ],
    "1.5.2": [
        "test/central_planner_test.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: Items in the second set but not the first:\nE           'unknown'"
        ]
    ],
    "2.1.2": [
        [
            "self = <central_planner_test.CentralPlannerTest testMethod=test_assistants_dont_nurture_finished_statuses>\n\n    def test_assistants_dont_nurture_finished_statuses(self):\n        \"\"\"\n        Assistants should not affect longevity of DONE tasks\n    \n        Also check for statuses DISABLED and UNKNOWN.\n        \"\"\"\n        self.sch = CentralPlannerScheduler(retry_delay=100000000000)  # Never pendify failed tasks\n        self.setTime(1)\n        self.sch.add_worker('assistant', [('assistant', True)])\n        self.sch.ping(worker='assistant')\n        self.sch.add_task(worker='uploader', task_id='running', status=PENDING)\n        self.assertEqual(self.sch.get_work(worker='assistant', assistant=True)['task_id'], 'running')\n    \n        self.setTime(2)\n        self.sch.add_task(worker='uploader', task_id='done', status=DONE)\n        self.sch.add_task(worker='uploader', task_id='disabled', status=DISABLED)\n        self.sch.add_task(worker='uploader', task_id='pending', status=PENDING)\n        self.sch.add_task(worker='uploader', task_id='failed', status=FAILED)\n        self.sch.add_task(worker='uploader', task_id='unknown', status=UNKNOWN)\n    \n        self.setTime(100000)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n    \n        self.setTime(200000)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n        nurtured_statuses = ['PENDING', 'FAILED', 'RUNNING']\n        not_nurtured_statuses = ['DONE', 'UNKNOWN', 'DISABLED']\n    \n        for status in nurtured_statuses:\n            print(status)\n            self.assertEqual(set([status.lower()]), set(self.sch.task_list(status, '')))\n    \n        for status in not_nurtured_statuses:\n            print(status)\n>           self.assertEqual(set([]), set(self.sch.task_list(status, '')))",
            "\ntest/central_planner_test.py:1126: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {},
            {
                "necessary_tasks": {
                    "value": "{'running', 'unknown', 'failed', 'pending'}",
                    "shape": "4",
                    "omitted": false
                },
                "task": {
                    "value": "Task({'id': 'unknown', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'UNKNOWN', 'time': 2, 'updated': 2, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': None, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f6b97b34700>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})",
                    "shape": null,
                    "omitted": false
                },
                "task.status": {
                    "value": "'UNKNOWN'",
                    "shape": "7",
                    "omitted": false
                },
                "task.deps": {
                    "value": "set()",
                    "shape": "0",
                    "omitted": false
                },
                "task.id": {
                    "value": "'unknown'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {},
            {
                "necessary_tasks": "set",
                "task": "Task",
                "task.status": "str",
                "task.deps": "set",
                "task.id": "str"
            }
        ]
    ],
    "2.3.1": [
        [
            {},
            {
                "necessary_tasks": {
                    "value": "{'failed', 'running', 'pending'}",
                    "shape": "3",
                    "omitted": false
                },
                "task": {
                    "value": "Task({'id': 'unknown', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'UNKNOWN', 'time': 2, 'updated': 2, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': None, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f25a04e2340>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})",
                    "shape": null,
                    "omitted": false
                },
                "task.status": {
                    "value": "'UNKNOWN'",
                    "shape": "7",
                    "omitted": false
                },
                "task.deps": {
                    "value": "set()",
                    "shape": "0",
                    "omitted": false
                },
                "task.id": {
                    "value": "'unknown'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {},
            {
                "necessary_tasks": "set",
                "task": "Task",
                "task.status": "str",
                "task.deps": "set",
                "task.id": "str"
            }
        ]
    ],
    "3.1.1": [
        "Assistant workers never retry failed tasks\n"
    ],
    "3.1.2": [
        "Assistant workers never retry failed tasks that are eligible for retry.\n\nI noticed this with ExternalTasks, but same goes for regular task failures, given the correct retry configurations.\n"
    ]
}