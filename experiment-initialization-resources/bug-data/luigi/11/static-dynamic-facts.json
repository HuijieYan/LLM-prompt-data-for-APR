{
    "luigi:11": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/luigi_11/luigi/scheduler.py": {
            "buggy_functions": [
                {
                    "function_name": "get_work",
                    "function_code": "@rpc_method(allow_null=False)\ndef get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    # TODO: remove any expired nodes\n\n    # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n    # resources.\n\n    # Resource checking looks both at currently available resources and at which resources would\n    # be available if all running tasks died and we rescheduled all workers greedily. We do both\n    # checks in order to prevent a worker with many low-priority tasks from starving other\n    # workers with higher priority tasks that share the same resources.\n\n    # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n    # nothing it can wait for\n\n    if self._config.prune_on_get_work:\n        self.prune()\n\n    assert worker is not None\n    worker_id = worker\n    # Return remaining tasks that have no FAILED descendants\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n\n    batched_params, unbatched_params, batched_tasks, max_batch_size = None, None, [], 1\n    best_task = None\n    if current_tasks is not None:\n        ct_set = set(current_tasks)\n        for task in sorted(self._state.get_running_tasks(), key=self._rank):\n            if task.worker_running == worker_id and task.id not in ct_set:\n                best_task = task\n\n    if current_tasks is not None:\n        # batch running tasks that weren't claimed since the last get_work go back in the pool\n        self._reset_orphaned_batch_running_tasks(worker_id)\n\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n\n    worker = self._state.get_worker(worker_id)\n    if worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_pending_tasks(self._state)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()  # If there's no resources, then they can grab any task\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        activity_limit = time.time() - self._config.worker_disconnect_delay\n        active_workers = self._state.get_active_workers(last_get_work_gt=activity_limit)\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                              for worker in active_workers)\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n\n    for task in tasks:\n        in_workers = (assistant and getattr(task, 'runnable', bool(task.workers))) or worker_id in task.workers\n        if task.status == RUNNING and in_workers:\n            # Return a list of currently running tasks to the client,\n            # makes it easier to troubleshoot\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n\n        if task.status == PENDING and in_workers:\n            upstream_status = self._upstream_status(task.id, upstream_table)\n            if upstream_status != UPSTREAM_DISABLED:\n                locally_pending_tasks += 1\n                if len(task.workers) == 1 and not assistant:\n                    n_unique_pending += 1\n\n        if (best_task and batched_params and task.family == best_task.family and\n                len(batched_tasks) < max_batch_size and task.is_batchable() and all(\n                task.params.get(name) == value for name, value in unbatched_params.items())):\n            for name, params in batched_params.items():\n                params.append(task.params.get(name))\n            batched_tasks.append(task)\n        if best_task:\n            continue\n\n        if task.status == RUNNING and (task.worker_running in greedy_workers):\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems((task.resources or {})):\n                greedy_resources[resource] += amount\n\n        if self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n                batch_param_names, max_batch_size = self._state.get_batcher(\n                    worker_id, task.family)\n                if batch_param_names and task.is_batchable():\n                    try:\n                        batched_params = {\n                            name: [task.params[name]] for name in batch_param_names\n                        }\n                        unbatched_params = {\n                            name: value for name, value in task.params.items()\n                            if name not in batched_params\n                        }\n                        batched_tasks.append(task)\n                    except KeyError:\n                        batched_params, unbatched_params = None, None\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        # use up a worker\n                        greedy_workers[task_worker] -= 1\n\n                        # keep track of the resources used in greedy scheduling\n                        for resource, amount in six.iteritems((task.resources or {})):\n                            greedy_resources[resource] += amount\n\n                        break\n\n    reply = {'n_pending_tasks': locally_pending_tasks,\n             'running_tasks': running_tasks,\n             'task_id': None,\n             'n_unique_pending': n_unique_pending}\n\n    if len(batched_tasks) > 1:\n        batch_string = '|'.join(task.id for task in batched_tasks)\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n\n        combined_params = best_task.params.copy()\n        combined_params.update(batched_params)\n\n        reply['task_id'] = None\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = combined_params\n        reply['batch_id'] = batch_id\n        reply['batch_task_ids'] = [task.id for task in batched_tasks]\n\n    elif best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n\n    return reply\n",
                    "decorators": [
                        "rpc_method(allow_null=False)"
                    ],
                    "docstring": null,
                    "start_line": 818,
                    "end_line": 971,
                    "variables": {
                        "self._config.prune_on_get_work": [
                            833
                        ],
                        "self._config": [
                            833,
                            961,
                            870
                        ],
                        "self": [
                            909,
                            910,
                            912,
                            948,
                            833,
                            834,
                            961,
                            964,
                            839,
                            841,
                            847,
                            853,
                            862,
                            863,
                            864,
                            868,
                            869,
                            870,
                            871,
                            875,
                            882,
                            889
                        ],
                        "self.prune": [
                            834
                        ],
                        "worker": [
                            864,
                            836,
                            837,
                            872,
                            873,
                            862,
                            863
                        ],
                        "worker_id": [
                            962,
                            837,
                            839,
                            841,
                            878,
                            848,
                            913,
                            948,
                            853,
                            862,
                            927
                        ],
                        "self.update": [
                            839
                        ],
                        "host": [
                            964,
                            839
                        ],
                        "assistant": [
                            840,
                            841,
                            878,
                            892,
                            927
                        ],
                        "self.add_worker": [
                            841
                        ],
                        "batched_params": [
                            898,
                            843,
                            916,
                            951,
                            921,
                            925,
                            895
                        ],
                        "unbatched_params": [
                            897,
                            843,
                            925,
                            919
                        ],
                        "batched_tasks": [
                            896,
                            900,
                            843,
                            944,
                            945,
                            947,
                            923,
                            958
                        ],
                        "max_batch_size": [
                            896,
                            843,
                            912
                        ],
                        "best_task": [
                            960,
                            961,
                            962,
                            963,
                            964,
                            901,
                            966,
                            967,
                            968,
                            969,
                            844,
                            911,
                            849,
                            950,
                            954,
                            955,
                            895
                        ],
                        "current_tasks": [
                            851,
                            845,
                            846
                        ],
                        "ct_set": [
                            848,
                            846
                        ],
                        "set": [
                            846
                        ],
                        "task": [
                            896,
                            897,
                            899,
                            900,
                            904,
                            905,
                            906,
                            909,
                            910,
                            911,
                            913,
                            914,
                            917,
                            920,
                            923,
                            927,
                            934,
                            945,
                            947,
                            948,
                            958,
                            847,
                            848,
                            849,
                            877,
                            878,
                            879,
                            882,
                            883,
                            888,
                            889,
                            892,
                            895
                        ],
                        "sorted": [
                            847
                        ],
                        "self._state.get_running_tasks": [
                            847
                        ],
                        "self._state": [
                            864,
                            961,
                            868,
                            871,
                            847,
                            912,
                            882,
                            948,
                            862,
                            863
                        ],
                        "self._rank": [
                            875,
                            847
                        ],
                        "task.worker_running": [
                            848,
                            905,
                            882,
                            904
                        ],
                        "task.id": [
                            848,
                            945,
                            883,
                            889,
                            958
                        ],
                        "self._reset_orphaned_batch_running_tasks": [
                            853
                        ],
                        "locally_pending_tasks": [
                            891,
                            939,
                            855
                        ],
                        "running_tasks": [
                            856,
                            940,
                            886
                        ],
                        "upstream_table": [
                            857,
                            889
                        ],
                        "greedy_resources": [
                            859,
                            907,
                            909,
                            935
                        ],
                        "collections.defaultdict": [
                            865,
                            859
                        ],
                        "collections": [
                            865,
                            859
                        ],
                        "int": [
                            865,
                            859
                        ],
                        "n_unique_pending": [
                            860,
                            893,
                            942
                        ],
                        "self._state.get_worker": [
                            882,
                            862
                        ],
                        "worker.is_trivial_worker": [
                            863
                        ],
                        "relevant_tasks": [
                            864,
                            874,
                            868
                        ],
                        "worker.get_pending_tasks": [
                            864
                        ],
                        "used_resources": [
                            865,
                            869,
                            910
                        ],
                        "greedy_workers": [
                            929,
                            866,
                            931,
                            872,
                            905,
                            904
                        ],
                        "dict": [
                            872,
                            866
                        ],
                        "self._state.get_pending_tasks": [
                            868
                        ],
                        "self._used_resources": [
                            869
                        ],
                        "activity_limit": [
                            870,
                            871
                        ],
                        "time.time": [
                            963,
                            870
                        ],
                        "time": [
                            963,
                            870
                        ],
                        "self._config.worker_disconnect_delay": [
                            870
                        ],
                        "active_workers": [
                            873,
                            871
                        ],
                        "self._state.get_active_workers": [
                            871
                        ],
                        "worker.id": [
                            872
                        ],
                        "worker.info.get": [
                            872
                        ],
                        "worker.info": [
                            872
                        ],
                        "tasks": [
                            874,
                            875,
                            877
                        ],
                        "list": [
                            874
                        ],
                        "tasks.sort": [
                            875
                        ],
                        "in_workers": [
                            888,
                            910,
                            878,
                            879
                        ],
                        "getattr": [
                            968,
                            955,
                            878
                        ],
                        "bool": [
                            878
                        ],
                        "task.workers": [
                            892,
                            878,
                            927
                        ],
                        "task.status": [
                            888,
                            904,
                            879
                        ],
                        "RUNNING": [
                            904,
                            961,
                            964,
                            879
                        ],
                        "other_worker": [
                            882,
                            883,
                            884,
                            885
                        ],
                        "more_info": [
                            883,
                            885,
                            886
                        ],
                        "str": [
                            883
                        ],
                        "more_info.update": [
                            885
                        ],
                        "other_worker.info": [
                            885
                        ],
                        "running_tasks.append": [
                            886
                        ],
                        "PENDING": [
                            888
                        ],
                        "upstream_status": [
                            889,
                            890
                        ],
                        "self._upstream_status": [
                            889
                        ],
                        "UPSTREAM_DISABLED": [
                            890
                        ],
                        "len": [
                            896,
                            892,
                            944
                        ],
                        "task.family": [
                            913,
                            895
                        ],
                        "best_task.family": [
                            954,
                            967,
                            895
                        ],
                        "task.is_batchable": [
                            896,
                            914
                        ],
                        "all": [
                            896
                        ],
                        "task.params.get": [
                            897,
                            899
                        ],
                        "task.params": [
                            920,
                            897,
                            899,
                            917
                        ],
                        "name": [
                            897,
                            898,
                            899,
                            917,
                            920,
                            921
                        ],
                        "value": [
                            920,
                            897
                        ],
                        "unbatched_params.items": [
                            897
                        ],
                        "params": [
                            898,
                            899
                        ],
                        "batched_params.items": [
                            898
                        ],
                        "params.append": [
                            899
                        ],
                        "batched_tasks.append": [
                            923,
                            900
                        ],
                        "resource": [
                            906,
                            907,
                            934,
                            935
                        ],
                        "amount": [
                            906,
                            907,
                            934,
                            935
                        ],
                        "six.iteritems": [
                            906,
                            934
                        ],
                        "six": [
                            906,
                            934
                        ],
                        "task.resources": [
                            906,
                            934,
                            909,
                            910
                        ],
                        "self._schedulable": [
                            909
                        ],
                        "self._has_resources": [
                            909,
                            910
                        ],
                        "batch_param_names": [
                            912,
                            914,
                            917
                        ],
                        "self._state.get_batcher": [
                            912
                        ],
                        "task.params.items": [
                            920
                        ],
                        "KeyError": [
                            924
                        ],
                        "workers": [
                            928,
                            927
                        ],
                        "itertools.chain": [
                            927
                        ],
                        "itertools": [
                            927
                        ],
                        "task_worker": [
                            928,
                            929,
                            931
                        ],
                        "greedy_workers.get": [
                            929
                        ],
                        "reply": [
                            966,
                            967,
                            968,
                            969,
                            939,
                            971,
                            953,
                            954,
                            955,
                            956,
                            957,
                            958
                        ],
                        "batch_string": [
                            945,
                            946
                        ],
                        "join": [
                            945
                        ],
                        "batch_id": [
                            946,
                            948,
                            957
                        ],
                        "hexdigest": [
                            946
                        ],
                        "hashlib.md5": [
                            946
                        ],
                        "hashlib": [
                            946
                        ],
                        "batch_string.encode": [
                            946
                        ],
                        "self._state.set_batch_running": [
                            948
                        ],
                        "combined_params": [
                            956,
                            950,
                            951
                        ],
                        "best_task.params.copy": [
                            950
                        ],
                        "best_task.params": [
                            969,
                            950
                        ],
                        "combined_params.update": [
                            951
                        ],
                        "self._state.set_status": [
                            961
                        ],
                        "best_task.worker_running": [
                            962
                        ],
                        "best_task.time_running": [
                            963
                        ],
                        "self._update_task_history": [
                            964
                        ],
                        "best_task.id": [
                            966
                        ],
                        "rpc_method": [
                            818
                        ]
                    },
                    "filtered_variables": {
                        "self._config.prune_on_get_work": [
                            833
                        ],
                        "self._config": [
                            833,
                            961,
                            870
                        ],
                        "self": [
                            909,
                            910,
                            912,
                            948,
                            833,
                            834,
                            961,
                            964,
                            839,
                            841,
                            847,
                            853,
                            862,
                            863,
                            864,
                            868,
                            869,
                            870,
                            871,
                            875,
                            882,
                            889
                        ],
                        "self.prune": [
                            834
                        ],
                        "worker": [
                            864,
                            836,
                            837,
                            872,
                            873,
                            862,
                            863
                        ],
                        "worker_id": [
                            962,
                            837,
                            839,
                            841,
                            878,
                            848,
                            913,
                            948,
                            853,
                            862,
                            927
                        ],
                        "self.update": [
                            839
                        ],
                        "host": [
                            964,
                            839
                        ],
                        "assistant": [
                            840,
                            841,
                            878,
                            892,
                            927
                        ],
                        "self.add_worker": [
                            841
                        ],
                        "batched_params": [
                            898,
                            843,
                            916,
                            951,
                            921,
                            925,
                            895
                        ],
                        "unbatched_params": [
                            897,
                            843,
                            925,
                            919
                        ],
                        "batched_tasks": [
                            896,
                            900,
                            843,
                            944,
                            945,
                            947,
                            923,
                            958
                        ],
                        "max_batch_size": [
                            896,
                            843,
                            912
                        ],
                        "best_task": [
                            960,
                            961,
                            962,
                            963,
                            964,
                            901,
                            966,
                            967,
                            968,
                            969,
                            844,
                            911,
                            849,
                            950,
                            954,
                            955,
                            895
                        ],
                        "current_tasks": [
                            851,
                            845,
                            846
                        ],
                        "ct_set": [
                            848,
                            846
                        ],
                        "task": [
                            896,
                            897,
                            899,
                            900,
                            904,
                            905,
                            906,
                            909,
                            910,
                            911,
                            913,
                            914,
                            917,
                            920,
                            923,
                            927,
                            934,
                            945,
                            947,
                            948,
                            958,
                            847,
                            848,
                            849,
                            877,
                            878,
                            879,
                            882,
                            883,
                            888,
                            889,
                            892,
                            895
                        ],
                        "self._state.get_running_tasks": [
                            847
                        ],
                        "self._state": [
                            864,
                            961,
                            868,
                            871,
                            847,
                            912,
                            882,
                            948,
                            862,
                            863
                        ],
                        "self._rank": [
                            875,
                            847
                        ],
                        "task.worker_running": [
                            848,
                            905,
                            882,
                            904
                        ],
                        "task.id": [
                            848,
                            945,
                            883,
                            889,
                            958
                        ],
                        "self._reset_orphaned_batch_running_tasks": [
                            853
                        ],
                        "locally_pending_tasks": [
                            891,
                            939,
                            855
                        ],
                        "running_tasks": [
                            856,
                            940,
                            886
                        ],
                        "upstream_table": [
                            857,
                            889
                        ],
                        "greedy_resources": [
                            859,
                            907,
                            909,
                            935
                        ],
                        "collections.defaultdict": [
                            865,
                            859
                        ],
                        "collections": [
                            865,
                            859
                        ],
                        "n_unique_pending": [
                            860,
                            893,
                            942
                        ],
                        "self._state.get_worker": [
                            882,
                            862
                        ],
                        "worker.is_trivial_worker": [
                            863
                        ],
                        "relevant_tasks": [
                            864,
                            874,
                            868
                        ],
                        "worker.get_pending_tasks": [
                            864
                        ],
                        "used_resources": [
                            865,
                            869,
                            910
                        ],
                        "greedy_workers": [
                            929,
                            866,
                            931,
                            872,
                            905,
                            904
                        ],
                        "self._state.get_pending_tasks": [
                            868
                        ],
                        "self._used_resources": [
                            869
                        ],
                        "activity_limit": [
                            870,
                            871
                        ],
                        "time.time": [
                            963,
                            870
                        ],
                        "time": [
                            963,
                            870
                        ],
                        "self._config.worker_disconnect_delay": [
                            870
                        ],
                        "active_workers": [
                            873,
                            871
                        ],
                        "self._state.get_active_workers": [
                            871
                        ],
                        "worker.id": [
                            872
                        ],
                        "worker.info.get": [
                            872
                        ],
                        "worker.info": [
                            872
                        ],
                        "tasks": [
                            874,
                            875,
                            877
                        ],
                        "tasks.sort": [
                            875
                        ],
                        "in_workers": [
                            888,
                            910,
                            878,
                            879
                        ],
                        "task.workers": [
                            892,
                            878,
                            927
                        ],
                        "task.status": [
                            888,
                            904,
                            879
                        ],
                        "RUNNING": [
                            904,
                            961,
                            964,
                            879
                        ],
                        "other_worker": [
                            882,
                            883,
                            884,
                            885
                        ],
                        "more_info": [
                            883,
                            885,
                            886
                        ],
                        "more_info.update": [
                            885
                        ],
                        "other_worker.info": [
                            885
                        ],
                        "running_tasks.append": [
                            886
                        ],
                        "PENDING": [
                            888
                        ],
                        "upstream_status": [
                            889,
                            890
                        ],
                        "self._upstream_status": [
                            889
                        ],
                        "UPSTREAM_DISABLED": [
                            890
                        ],
                        "task.family": [
                            913,
                            895
                        ],
                        "best_task.family": [
                            954,
                            967,
                            895
                        ],
                        "task.is_batchable": [
                            896,
                            914
                        ],
                        "task.params.get": [
                            897,
                            899
                        ],
                        "task.params": [
                            920,
                            897,
                            899,
                            917
                        ],
                        "name": [
                            897,
                            898,
                            899,
                            917,
                            920,
                            921
                        ],
                        "value": [
                            920,
                            897
                        ],
                        "unbatched_params.items": [
                            897
                        ],
                        "params": [
                            898,
                            899
                        ],
                        "batched_params.items": [
                            898
                        ],
                        "params.append": [
                            899
                        ],
                        "batched_tasks.append": [
                            923,
                            900
                        ],
                        "resource": [
                            906,
                            907,
                            934,
                            935
                        ],
                        "amount": [
                            906,
                            907,
                            934,
                            935
                        ],
                        "six.iteritems": [
                            906,
                            934
                        ],
                        "six": [
                            906,
                            934
                        ],
                        "task.resources": [
                            906,
                            934,
                            909,
                            910
                        ],
                        "self._schedulable": [
                            909
                        ],
                        "self._has_resources": [
                            909,
                            910
                        ],
                        "batch_param_names": [
                            912,
                            914,
                            917
                        ],
                        "self._state.get_batcher": [
                            912
                        ],
                        "task.params.items": [
                            920
                        ],
                        "workers": [
                            928,
                            927
                        ],
                        "itertools.chain": [
                            927
                        ],
                        "itertools": [
                            927
                        ],
                        "task_worker": [
                            928,
                            929,
                            931
                        ],
                        "greedy_workers.get": [
                            929
                        ],
                        "reply": [
                            966,
                            967,
                            968,
                            969,
                            939,
                            971,
                            953,
                            954,
                            955,
                            956,
                            957,
                            958
                        ],
                        "batch_string": [
                            945,
                            946
                        ],
                        "join": [
                            945
                        ],
                        "batch_id": [
                            946,
                            948,
                            957
                        ],
                        "hexdigest": [
                            946
                        ],
                        "hashlib.md5": [
                            946
                        ],
                        "hashlib": [
                            946
                        ],
                        "batch_string.encode": [
                            946
                        ],
                        "self._state.set_batch_running": [
                            948
                        ],
                        "combined_params": [
                            956,
                            950,
                            951
                        ],
                        "best_task.params.copy": [
                            950
                        ],
                        "best_task.params": [
                            969,
                            950
                        ],
                        "combined_params.update": [
                            951
                        ],
                        "self._state.set_status": [
                            961
                        ],
                        "best_task.worker_running": [
                            962
                        ],
                        "best_task.time_running": [
                            963
                        ],
                        "self._update_task_history": [
                            964
                        ],
                        "best_task.id": [
                            966
                        ],
                        "rpc_method": [
                            818
                        ]
                    },
                    "diff_line_number": 897,
                    "class_data": {
                        "signature": "class Scheduler(object)",
                        "docstring": "Async scheduler that can handle multiple workers, etc.\n\nCan be run locally or on a server (using RemoteScheduler + server.Server).",
                        "constructor_docstring": "Keyword Arguments:\n:param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n:param resources: a dict of str->int constraints\n:param task_history_impl: ignore config and use this object as the task history",
                        "functions": [
                            "def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n    \"\"\"\n    Keyword Arguments:\n    :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n    :param resources: a dict of str->int constraints\n    :param task_history_impl: ignore config and use this object as the task history\n    \"\"\"\n    self._config = config or scheduler(**kwargs)\n    self._state = SimpleTaskState(self._config.state_path)\n    if task_history_impl:\n        self._task_history = task_history_impl\n    elif self._config.record_task_history:\n        from luigi import db_task_history\n        self._task_history = db_task_history.DbTaskHistory()\n    else:\n        self._task_history = history.NopHistory()\n    self._resources = resources or configuration.get_config().getintdict('resources')\n    self._make_task = functools.partial(Task, retry_policy=self._config._get_retry_policy())\n    self._worker_requests = {}",
                            "def load(self):\n    self._state.load()",
                            "def dump(self):\n    self._state.dump()",
                            "@rpc_method()\ndef prune(self):\n    logger.info('Starting pruning of task graph')\n    self._prune_workers()\n    self._prune_tasks()\n    logger.info('Done pruning task graph')",
                            "def _prune_workers(self):\n    remove_workers = []\n    for worker in self._state.get_active_workers():\n        if worker.prune(self._config):\n            logger.debug('Worker %s timed out (no contact for >=%ss)', worker, self._config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n    self._state.inactivate_workers(remove_workers)",
                            "def _prune_tasks(self):\n    assistant_ids = set((w.id for w in self._state.get_assistants()))\n    remove_tasks = []\n    for task in self._state.get_active_tasks():\n        self._state.fail_dead_worker_task(task, self._config, assistant_ids)\n        self._state.update_status(task, self._config)\n        if self._state.may_prune(task):\n            logger.info('Removing task %r', task.id)\n            remove_tasks.append(task.id)\n    self._state.inactivate_tasks(remove_tasks)",
                            "def update(self, worker_id, worker_reference=None, get_work=False):\n    \"\"\"\n    Keep track of whenever the worker was last active.\n    \"\"\"\n    worker = self._state.get_worker(worker_id)\n    worker.update(worker_reference, get_work=get_work)\n    return not getattr(worker, 'disabled', False)",
                            "def _update_priority(self, task, prio, worker):\n    \"\"\"\n    Update priority of the given task.\n\n    Priority can only be increased.\n    If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n    \"\"\"\n    task.priority = prio = max(prio, task.priority)\n    for dep in task.deps or []:\n        t = self._state.get_task(dep)\n        if t is not None and prio > t.priority:\n            self._update_priority(t, prio, worker)",
                            "@rpc_method()\ndef add_task_batcher(self, worker, task_family, batched_args, max_batch_size=float('inf')):\n    self._state.set_batcher(worker, task_family, batched_args, max_batch_size)",
                            "@rpc_method()\ndef add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, tracking_url=None, worker=None, batchable=None, batch_id=None, retry_policy_dict={}, **kwargs):\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    assert worker is not None\n    worker_id = worker\n    worker_enabled = self.update(worker_id)\n    retry_policy = self._generate_retry_policy(retry_policy_dict)\n    if worker_enabled:\n        _default_task = self._make_task(task_id=task_id, status=PENDING, deps=deps, resources=resources, priority=priority, family=family, module=module, params=params)\n    else:\n        _default_task = None\n    task = self._state.get_task(task_id, setdefault=_default_task)\n    if task is None or (task.status != RUNNING and (not worker_enabled)):\n        return\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n    if batch_id is not None:\n        task.batch_id = batch_id\n    if status == RUNNING and (not task.worker_running):\n        task.worker_running = worker_id\n    if tracking_url is not None or task.status != RUNNING:\n        task.tracking_url = tracking_url\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.tracking_url = tracking_url\n    if batchable is not None:\n        task.batchable = batchable\n    if task.remove is not None:\n        task.remove = None\n    if expl is not None:\n        task.expl = expl\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.expl = expl\n    if not (task.status in (RUNNING, BATCH_RUNNING) and status == PENDING) or new_deps:\n        if status == PENDING or status != task.status:\n            self._update_task_history(task, status)\n        self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n    if deps is not None:\n        task.deps = set(deps)\n    if new_deps is not None:\n        task.deps.update(new_deps)\n    if resources is not None:\n        task.resources = resources\n    if worker_enabled and (not assistant):\n        task.stakeholders.add(worker_id)\n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n    self._update_priority(task, priority, worker_id)\n    task.retry_policy = retry_policy\n    if runnable and status != FAILED and worker_enabled:\n        task.workers.add(worker_id)\n        self._state.get_worker(worker_id).tasks.add(task)\n        task.runnable = runnable",
                            "@rpc_method()\ndef add_worker(self, worker, info, **kwargs):\n    self._state.get_worker(worker).add_info(info)",
                            "@rpc_method()\ndef disable_worker(self, worker):\n    self._state.disable_workers({worker})",
                            "@rpc_method()\ndef update_resources(self, **resources):\n    if self._resources is None:\n        self._resources = {}\n    self._resources.update(resources)",
                            "def _generate_retry_policy(self, task_retry_policy_dict):\n    retry_policy_dict = self._config._get_retry_policy()._asdict()\n    retry_policy_dict.update({k: v for (k, v) in six.iteritems(task_retry_policy_dict) if v is not None})\n    return RetryPolicy(**retry_policy_dict)",
                            "def _has_resources(self, needed_resources, used_resources):\n    if needed_resources is None:\n        return True\n    available_resources = self._resources or {}\n    for (resource, amount) in six.iteritems(needed_resources):\n        if amount + used_resources[resource] > available_resources.get(resource, 1):\n            return False\n    return True",
                            "def _used_resources(self):\n    used_resources = collections.defaultdict(int)\n    if self._resources is not None:\n        for task in self._state.get_active_tasks(status=RUNNING):\n            if task.resources:\n                for (resource, amount) in six.iteritems(task.resources):\n                    used_resources[resource] += amount\n    return used_resources",
                            "def _rank(self, task):\n    \"\"\"\n    Return worker's rank function for task scheduling.\n\n    :return:\n    \"\"\"\n    return (task.priority, -task.time)",
                            "def _schedulable(self, task):\n    if task.status != PENDING:\n        return False\n    for dep in task.deps:\n        dep_task = self._state.get_task(dep, default=None)\n        if dep_task is None or dep_task.status != DONE:\n            return False\n    return True",
                            "def _reset_orphaned_batch_running_tasks(self, worker_id):\n    running_batch_ids = {task.batch_id for task in self._state.get_running_tasks() if task.worker_running == worker_id}\n    orphaned_tasks = [task for task in self._state.get_active_tasks(BATCH_RUNNING) if task.worker_running == worker_id and task.batch_id not in running_batch_ids]\n    for task in orphaned_tasks:\n        self._state.set_status(task, PENDING)",
                            "@rpc_method(allow_null=False)\ndef get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    if self._config.prune_on_get_work:\n        self.prune()\n    assert worker is not None\n    worker_id = worker\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    (batched_params, unbatched_params, batched_tasks, max_batch_size) = (None, None, [], 1)\n    best_task = None\n    if current_tasks is not None:\n        ct_set = set(current_tasks)\n        for task in sorted(self._state.get_running_tasks(), key=self._rank):\n            if task.worker_running == worker_id and task.id not in ct_set:\n                best_task = task\n    if current_tasks is not None:\n        self._reset_orphaned_batch_running_tasks(worker_id)\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n    worker = self._state.get_worker(worker_id)\n    if worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_pending_tasks(self._state)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        activity_limit = time.time() - self._config.worker_disconnect_delay\n        active_workers = self._state.get_active_workers(last_get_work_gt=activity_limit)\n        greedy_workers = dict(((worker.id, worker.info.get('workers', 1)) for worker in active_workers))\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n    for task in tasks:\n        in_workers = assistant and getattr(task, 'runnable', bool(task.workers)) or worker_id in task.workers\n        if task.status == RUNNING and in_workers:\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n        if task.status == PENDING and in_workers:\n            upstream_status = self._upstream_status(task.id, upstream_table)\n            if upstream_status != UPSTREAM_DISABLED:\n                locally_pending_tasks += 1\n                if len(task.workers) == 1 and (not assistant):\n                    n_unique_pending += 1\n        if best_task and batched_params and (task.family == best_task.family) and (len(batched_tasks) < max_batch_size) and task.is_batchable() and all((task.params.get(name) == value for (name, value) in unbatched_params.items())):\n            for (name, params) in batched_params.items():\n                params.append(task.params.get(name))\n            batched_tasks.append(task)\n        if best_task:\n            continue\n        if task.status == RUNNING and task.worker_running in greedy_workers:\n            greedy_workers[task.worker_running] -= 1\n            for (resource, amount) in six.iteritems(task.resources or {}):\n                greedy_resources[resource] += amount\n        if self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n                (batch_param_names, max_batch_size) = self._state.get_batcher(worker_id, task.family)\n                if batch_param_names and task.is_batchable():\n                    try:\n                        batched_params = {name: [task.params[name]] for name in batch_param_names}\n                        unbatched_params = {name: value for (name, value) in task.params.items() if name not in batched_params}\n                        batched_tasks.append(task)\n                    except KeyError:\n                        (batched_params, unbatched_params) = (None, None)\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        greedy_workers[task_worker] -= 1\n                        for (resource, amount) in six.iteritems(task.resources or {}):\n                            greedy_resources[resource] += amount\n                        break\n    reply = {'n_pending_tasks': locally_pending_tasks, 'running_tasks': running_tasks, 'task_id': None, 'n_unique_pending': n_unique_pending}\n    if len(batched_tasks) > 1:\n        batch_string = '|'.join((task.id for task in batched_tasks))\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n        combined_params = best_task.params.copy()\n        combined_params.update(batched_params)\n        reply['task_id'] = None\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = combined_params\n        reply['batch_id'] = batch_id\n        reply['batch_task_ids'] = [task.id for task in batched_tasks]\n    elif best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n    return reply",
                            "@rpc_method(attempts=1)\ndef ping(self, **kwargs):\n    worker_id = kwargs['worker']\n    self.update(worker_id)",
                            "def _upstream_status(self, task_id, upstream_status_table):\n    if task_id in upstream_status_table:\n        return upstream_status_table[task_id]\n    elif self._state.has_task(task_id):\n        task_stack = [task_id]\n        while task_stack:\n            dep_id = task_stack.pop()\n            dep = self._state.get_task(dep_id)\n            if dep:\n                if dep.status == DONE:\n                    continue\n                if dep_id not in upstream_status_table:\n                    if dep.status == PENDING and dep.deps:\n                        task_stack += [dep_id] + list(dep.deps)\n                        upstream_status_table[dep_id] = ''\n                    else:\n                        dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                        upstream_status_table[dep_id] = dep_status\n                elif upstream_status_table[dep_id] == '' and dep.deps:\n                    upstream_severities = list((upstream_status_table.get(a_task_id) for a_task_id in dep.deps if a_task_id in upstream_status_table)) or ['']\n                    status = min(upstream_severities, key=UPSTREAM_SEVERITY_KEY)\n                    upstream_status_table[dep_id] = status\n        return upstream_status_table[dep_id]",
                            "def _serialize_task(self, task_id, include_deps=True, deps=None):\n    task = self._state.get_task(task_id)\n    ret = {'display_name': task.pretty_id, 'status': task.status, 'workers': list(task.workers), 'worker_running': task.worker_running, 'time_running': getattr(task, 'time_running', None), 'start_time': task.time, 'last_updated': getattr(task, 'updated', task.time), 'params': task.params, 'name': task.family, 'priority': task.priority, 'resources': task.resources, 'tracking_url': getattr(task, 'tracking_url', None), 'status_message': getattr(task, 'status_message', None)}\n    if task.status == DISABLED:\n        ret['re_enable_able'] = task.scheduler_disable_time is not None\n    if include_deps:\n        ret['deps'] = list(task.deps if deps is None else deps)\n    return ret",
                            "@rpc_method()\ndef graph(self, **kwargs):\n    self.prune()\n    serialized = {}\n    seen = set()\n    for task in self._state.get_active_tasks():\n        serialized.update(self._traverse_graph(task.id, seen))\n    return serialized",
                            "def _filter_done(self, task_ids):\n    for task_id in task_ids:\n        task = self._state.get_task(task_id)\n        if task is None or task.status != DONE:\n            yield task_id",
                            "def _traverse_graph(self, root_task_id, seen=None, dep_func=None, include_done=True):\n    \"\"\" Returns the dependency graph rooted at task_id\n\n    This does a breadth-first traversal to find the nodes closest to the\n    root before hitting the scheduler.max_graph_nodes limit.\n\n    :param root_task_id: the id of the graph's root\n    :return: A map of task id to serialized node\n    \"\"\"\n    if seen is None:\n        seen = set()\n    elif root_task_id in seen:\n        return {}\n    if dep_func is None:\n\n        def dep_func(t):\n            return t.deps\n    seen.add(root_task_id)\n    serialized = {}\n    queue = collections.deque([root_task_id])\n    while queue:\n        task_id = queue.popleft()\n        task = self._state.get_task(task_id)\n        if task is None or not task.family:\n            logger.debug('Missing task for id [%s]', task_id)\n            family_match = TASK_FAMILY_RE.match(task_id)\n            family = family_match.group(1) if family_match else UNKNOWN\n            params = {'task_id': task_id}\n            serialized[task_id] = {'deps': [], 'status': UNKNOWN, 'workers': [], 'start_time': UNKNOWN, 'params': params, 'name': family, 'display_name': task_id, 'priority': 0}\n        else:\n            deps = dep_func(task)\n            if not include_done:\n                deps = list(self._filter_done(deps))\n            serialized[task_id] = self._serialize_task(task_id, deps=deps)\n            for dep in sorted(deps):\n                if dep not in seen:\n                    seen.add(dep)\n                    queue.append(dep)\n        if task_id != root_task_id:\n            del serialized[task_id]['display_name']\n        if len(serialized) >= self._config.max_graph_nodes:\n            break\n    return serialized",
                            "@rpc_method()\ndef dep_graph(self, task_id, include_done=True, **kwargs):\n    self.prune()\n    if not self._state.has_task(task_id):\n        return {}\n    return self._traverse_graph(task_id, include_done=include_done)",
                            "@rpc_method()\ndef inverse_dep_graph(self, task_id, include_done=True, **kwargs):\n    self.prune()\n    if not self._state.has_task(task_id):\n        return {}\n    inverse_graph = collections.defaultdict(set)\n    for task in self._state.get_active_tasks():\n        for dep in task.deps:\n            inverse_graph[dep].add(task.id)\n    return self._traverse_graph(task_id, dep_func=lambda t: inverse_graph[t.id], include_done=include_done)",
                            "@rpc_method()\ndef task_list(self, status='', upstream_status='', limit=True, search=None, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by status.\n    \"\"\"\n    self.prune()\n    result = {}\n    upstream_status_table = {}\n    if search is None:\n\n        def filter_func(_):\n            return True\n    else:\n        terms = search.split()\n\n        def filter_func(t):\n            return all((term in t.pretty_id for term in terms))\n    for task in filter(filter_func, self._state.get_active_tasks(status)):\n        if task.status != PENDING or not upstream_status or upstream_status == self._upstream_status(task.id, upstream_status_table):\n            serialized = self._serialize_task(task.id, False)\n            result[task.id] = serialized\n    if limit and len(result) > self._config.max_shown_tasks:\n        return {'num_tasks': len(result)}\n    return result",
                            "def _first_task_display_name(self, worker):\n    task_id = worker.info.get('first_task', '')\n    if self._state.has_task(task_id):\n        return self._state.get_task(task_id).pretty_id\n    else:\n        return task_id",
                            "@rpc_method()\ndef worker_list(self, include_running=True, **kwargs):\n    self.prune()\n    workers = [dict(name=worker.id, last_active=worker.last_active, started=getattr(worker, 'started', None), first_task_display_name=self._first_task_display_name(worker), **worker.info) for worker in self._state.get_active_workers()]\n    workers.sort(key=lambda worker: worker['started'], reverse=True)\n    if include_running:\n        running = collections.defaultdict(dict)\n        num_pending = collections.defaultdict(int)\n        num_uniques = collections.defaultdict(int)\n        for task in self._state.get_pending_tasks():\n            if task.status == RUNNING and task.worker_running:\n                running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n            elif task.status == PENDING:\n                for worker in task.workers:\n                    num_pending[worker] += 1\n                if len(task.workers) == 1:\n                    num_uniques[list(task.workers)[0]] += 1\n        for worker in workers:\n            tasks = running[worker['name']]\n            worker['num_running'] = len(tasks)\n            worker['num_pending'] = num_pending[worker['name']]\n            worker['num_uniques'] = num_uniques[worker['name']]\n            worker['running'] = tasks\n    return workers",
                            "@rpc_method()\ndef resource_list(self):\n    \"\"\"\n    Resources usage info and their consumers (tasks).\n    \"\"\"\n    self.prune()\n    resources = [dict(name=resource, num_total=r_dict['total'], num_used=r_dict['used']) for (resource, r_dict) in six.iteritems(self.resources())]\n    if self._resources is not None:\n        consumers = collections.defaultdict(dict)\n        for task in self._state.get_running_tasks():\n            if task.status == RUNNING and task.resources:\n                for (resource, amount) in six.iteritems(task.resources):\n                    consumers[resource][task.id] = self._serialize_task(task.id, False)\n        for resource in resources:\n            tasks = consumers[resource['name']]\n            resource['num_consumer'] = len(tasks)\n            resource['running'] = tasks\n    return resources",
                            "def resources(self):\n    \"\"\" get total resources and available ones \"\"\"\n    used_resources = self._used_resources()\n    ret = collections.defaultdict(dict)\n    for (resource, total) in six.iteritems(self._resources):\n        ret[resource]['total'] = total\n        if resource in used_resources:\n            ret[resource]['used'] = used_resources[resource]\n        else:\n            ret[resource]['used'] = 0\n    return ret",
                            "@rpc_method()\ndef task_search(self, task_str, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by task_id.\n\n    :param task_str:\n    :return:\n    \"\"\"\n    self.prune()\n    result = collections.defaultdict(dict)\n    for task in self._state.get_active_tasks():\n        if task.id.find(task_str) != -1:\n            serialized = self._serialize_task(task.id, False)\n            result[task.status][task.id] = serialized\n    return result",
                            "@rpc_method()\ndef re_enable_task(self, task_id):\n    serialized = {}\n    task = self._state.get_task(task_id)\n    if task and task.status == DISABLED and task.scheduler_disable_time:\n        self._state.re_enable(task, self._config)\n        serialized = self._serialize_task(task_id)\n    return serialized",
                            "@rpc_method()\ndef fetch_error(self, task_id, **kwargs):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        return {'taskId': task_id, 'error': task.expl, 'displayName': task.pretty_id}\n    else:\n        return {'taskId': task_id, 'error': ''}",
                            "@rpc_method()\ndef set_task_status_message(self, task_id, status_message):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        task.status_message = status_message\n        if task.status == RUNNING and task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.status_message = status_message",
                            "@rpc_method()\ndef get_task_status_message(self, task_id):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        return {'taskId': task_id, 'statusMessage': task.status_message}\n    else:\n        return {'taskId': task_id, 'statusMessage': ''}",
                            "def _update_task_history(self, task, status, host=None):\n    try:\n        if status == DONE or status == FAILED:\n            successful = status == DONE\n            self._task_history.task_finished(task, successful)\n        elif status == PENDING:\n            self._task_history.task_scheduled(task)\n        elif status == RUNNING:\n            self._task_history.task_started(task, host)\n    except BaseException:\n        logger.warning('Error saving Task history', exc_info=True)",
                            "@property\ndef task_history(self):\n    return self._task_history",
                            "def dep_func(t):\n    return t.deps",
                            "def filter_func(_):\n    return True",
                            "def filter_func(t):\n    return all((term in t.pretty_id for term in terms))"
                        ],
                        "constructor_variables": [
                            "self._config = config or scheduler(**kwargs)",
                            "self._state = SimpleTaskState(self._config.state_path)",
                            "self._task_history = task_history_impl",
                            "self._task_history = db_task_history.DbTaskHistory()",
                            "self._task_history = history.NopHistory()",
                            "self._resources = resources or configuration.get_config().getintdict('resources')",
                            "self._make_task = functools.partial(Task, retry_policy=self._config._get_retry_policy())",
                            "self._worker_requests = {}"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, config=None, resources=None, task_history_impl=None, **kwargs)",
                            "load(self)",
                            "dump(self)",
                            "prune(self)",
                            "_prune_workers(self)",
                            "_prune_tasks(self)",
                            "update(self, worker_id, worker_reference=None, get_work=False)",
                            "_update_priority(self, task, prio, worker)",
                            "add_task_batcher(self, worker, task_family, batched_args, max_batch_size=float('inf'))",
                            "add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, tracking_url=None, worker=None, batchable=None, batch_id=None, retry_policy_dict={}, **kwargs)",
                            "add_worker(self, worker, info, **kwargs)",
                            "disable_worker(self, worker)",
                            "update_resources(self, **resources)",
                            "_generate_retry_policy(self, task_retry_policy_dict)",
                            "_has_resources(self, needed_resources, used_resources)",
                            "_used_resources(self)",
                            "_rank(self, task)",
                            "_schedulable(self, task)",
                            "_reset_orphaned_batch_running_tasks(self, worker_id)",
                            "get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs)",
                            "ping(self, **kwargs)",
                            "_upstream_status(self, task_id, upstream_status_table)",
                            "_serialize_task(self, task_id, include_deps=True, deps=None)",
                            "graph(self, **kwargs)",
                            "_filter_done(self, task_ids)",
                            "_traverse_graph(self, root_task_id, seen=None, dep_func=None, include_done=True)",
                            "dep_graph(self, task_id, include_done=True, **kwargs)",
                            "inverse_dep_graph(self, task_id, include_done=True, **kwargs)",
                            "task_list(self, status='', upstream_status='', limit=True, search=None, **kwargs)",
                            "_first_task_display_name(self, worker)",
                            "worker_list(self, include_running=True, **kwargs)",
                            "resource_list(self)",
                            "resources(self)",
                            "task_search(self, task_str, **kwargs)",
                            "re_enable_task(self, task_id)",
                            "fetch_error(self, task_id, **kwargs)",
                            "set_task_status_message(self, task_id, status_message)",
                            "get_task_status_message(self, task_id)",
                            "_update_task_history(self, task, status, host=None)",
                            "task_history(self)",
                            "dep_func(t)",
                            "filter_func(_)",
                            "filter_func(t)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": [
                            "_resources",
                            "_config",
                            "_worker_requests",
                            "_state",
                            "_make_task",
                            "_task_history"
                        ]
                    },
                    "used_imports": [
                        "import collections",
                        "import hashlib",
                        "import itertools",
                        "import time",
                        "from luigi import six",
                        "from luigi.task_status import DISABLED, DONE, FAILED, PENDING, RUNNING, SUSPENDED, UNKNOWN, BATCH_RUNNING"
                    ],
                    "variable_values": [
                        [
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method Scheduler.prune of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.update": {
                                    "variable_value": "<bound method Scheduler.update of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method Scheduler.add_worker of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batched_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ct_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7fd7bf27c790>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method Scheduler._rank of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._reset_orphaned_batch_running_tasks": {
                                    "variable_value": "<bound method Scheduler._reset_orphaned_batch_running_tasks of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method Scheduler._used_resources of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "activity_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config.worker_disconnect_delay": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "active_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.sort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method Scheduler._upstream_status of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.is_batchable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.params.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unbatched_params.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batched_params.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batched_tasks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method Scheduler._schedulable of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method Scheduler._has_resources of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_param_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hexdigest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hashlib.md5": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hashlib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_string.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.set_batch_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "combined_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.params.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "combined_params.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method Scheduler.prune of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x7fd7bf27c7f0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.update": {
                                    "variable_value": "<bound method Scheduler.update of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method Scheduler.add_worker of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": "{'a': ['1', '2', '3', '4', '5']}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "unbatched_params": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "batched_tasks": {
                                    "variable_value": "[Task({'id': 'A_a_1', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': set(), 'status': 'BATCH_RUNNING', 'time': 1709218613.5729382, 'updated': 1709218613.5737467, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '1'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c5e0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'}), Task({'id': 'A_a_2', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'NOT_DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.5729687, 'updated': 1709218613.573748, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '2'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c4c0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'}), Task({'id': 'A_a_3', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.5729878, 'updated': 1709218613.5737493, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '3'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c340>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'}), Task({'id': 'A_a_4', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.5730057, 'updated': 1709218613.57375, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '4'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c160>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'}), Task({'id': 'A_a_5', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'NOT_DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.573026, 'updated': 1709218613.5737507, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '5'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf274e50>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'})]",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "max_batch_size": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": "Task({'id': 'A_a_1', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': set(), 'status': 'BATCH_RUNNING', 'time': 1709218613.5729382, 'updated': 1709218613.5737467, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '1'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c5e0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "current_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ct_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A_a_5', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'NOT_DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.573026, 'updated': 1709218613.5737507, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '5'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf274e50>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._state.get_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7fd7bf27c790>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method Scheduler._rank of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "task.id": {
                                    "variable_value": "'A_a_5'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "self._reset_orphaned_batch_running_tasks": {
                                    "variable_value": "<bound method Scheduler._reset_orphaned_batch_running_tasks of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "upstream_table": {
                                    "variable_value": "{'A_a_1': 'UPSTREAM_MISSING_INPUT', 'A_a_2': 'UPSTREAM_MISSING_INPUT', 'NOT_DONE': 'UPSTREAM_MISSING_INPUT', 'A_a_3': '', 'A_a_4': '', 'A_a_5': 'UPSTREAM_MISSING_INPUT'}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "greedy_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": "<bound method Worker.is_trivial_worker of <luigi.scheduler.Worker object at 0x7fd7bf27c7f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": "<itertools.chain object at 0x7fd7bf2347c0>",
                                    "variable_type": "chain",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": "<bound method Worker.get_pending_tasks of <luigi.scheduler.Worker object at 0x7fd7bf27c7f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "greedy_workers": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method Scheduler._used_resources of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "activity_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config.worker_disconnect_delay": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "active_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "worker.info.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "tasks": {
                                    "variable_value": "[Task({'id': 'A_a_1', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': set(), 'status': 'BATCH_RUNNING', 'time': 1709218613.5729382, 'updated': 1709218613.5737467, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '1'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c5e0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'}), Task({'id': 'A_a_2', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'NOT_DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.5729687, 'updated': 1709218613.573748, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '2'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c4c0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'}), Task({'id': 'NOT_DONE', 'stakeholders': {'myworker'}, 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 1709218613.5729764, 'updated': 1709218613.5730445, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c130>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': False, 'batchable': False, 'batch_id': None}), Task({'id': 'A_a_3', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.5729878, 'updated': 1709218613.5737493, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '3'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c340>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'}), Task({'id': 'A_a_4', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.5730057, 'updated': 1709218613.57375, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '4'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf27c160>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'}), Task({'id': 'A_a_5', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'NOT_DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.573026, 'updated': 1709218613.5737507, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '5'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf274e50>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'})]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tasks.sort": {
                                    "variable_value": "<built-in method sort of list object at 0x7fd7bf1d7600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "{'myworker'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "task.status": {
                                    "variable_value": "'BATCH_RUNNING'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fd7bf27ff40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": "'UPSTREAM_MISSING_INPUT'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method Scheduler._upstream_status of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "best_task.family": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "task.is_batchable": {
                                    "variable_value": "<bound method Task.is_batchable of Task({'id': 'A_a_5', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'NOT_DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218613.573026, 'updated': 1709218613.5737507, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '5'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fd7bf274e50>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79'})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": "{'a': '5'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "name": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unbatched_params.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7fd7bf2791c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "['1', '2', '3', '4', '5']",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "batched_params.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7fd7bf279200>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "params.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fd7bf27ff80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batched_tasks.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fd7bf27fb00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method Scheduler._schedulable of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method Scheduler._has_resources of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_param_names": {
                                    "variable_value": "['a']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params.items": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7fd7bf1d75c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": "{'n_pending_tasks': 5, 'running_tasks': [], 'task_id': None, 'n_unique_pending': 5, 'task_family': 'A', 'task_module': None, 'task_params': {'a': ['1', '2', '3', '4', '5']}, 'batch_id': 'f079ea67d37d7ab25e3fefc7e0b4cc79', 'batch_task_ids': ['A_a_1', 'A_a_2', 'A_a_3', 'A_a_4', 'A_a_5']}",
                                    "variable_type": "dict",
                                    "variable_shape": "9"
                                },
                                "batch_string": {
                                    "variable_value": "'A_a_1",
                                    "variable_type": "str",
                                    "variable_shape": "A_a_2"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "'f079ea67d37d7ab25e3fefc7e0b4cc79'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "hexdigest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hashlib.md5": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hashlib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_string.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fd7bf1c6170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._state.set_batch_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "combined_params": {
                                    "variable_value": "{'a': ['1', '2', '3', '4', '5']}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "best_task.params.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": "{'a': '1'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "combined_params.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7fd7bf279080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "best_task.time_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x7fd7bf27c8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": "'A_a_1'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x7fa23f5261f0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method Scheduler.prune of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "worker_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.update": {
                                    "variable_value": "<bound method Scheduler.update of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method Scheduler.add_worker of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unbatched_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batched_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ct_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7fa23fafd280>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method Scheduler._rank of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._reset_orphaned_batch_running_tasks": {
                                    "variable_value": "<bound method Scheduler._reset_orphaned_batch_running_tasks of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_table": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method Scheduler._used_resources of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "activity_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config.worker_disconnect_delay": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "active_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.sort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method Scheduler._upstream_status of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.family": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.is_batchable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.params.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unbatched_params.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method Scheduler._schedulable of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batched_params.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batched_tasks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method Scheduler._has_resources of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_param_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hexdigest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hashlib.md5": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hashlib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_string.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.set_batch_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "combined_params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.params.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "combined_params.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "best_task.time_running": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._config.prune_on_get_work": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._config": {
                                    "variable_value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, disable_window=10, retry_count=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Scheduler object at 0x7fa23f5261f0>",
                                    "variable_type": "Scheduler",
                                    "variable_shape": null
                                },
                                "self.prune": {
                                    "variable_value": "<bound method Scheduler.prune of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "worker": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x7fa23f924a90>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.update": {
                                    "variable_value": "<bound method Scheduler.update of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "host": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "assistant": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.add_worker": {
                                    "variable_value": "<bound method Scheduler.add_worker of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batched_params": {
                                    "variable_value": "{'a': ['1', '3', '4']}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "unbatched_params": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "batched_tasks": {
                                    "variable_value": "[Task({'id': 'A_a_1', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': set(), 'status': 'BATCH_RUNNING', 'time': 1709218614.5539536, 'updated': 1709218614.5546987, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '1'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924b20>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': '8b7819c05539a0765701c79834556b76'}), Task({'id': 'A_a_3', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218614.5539978, 'updated': 1709218614.5547006, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '3'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924880>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': '8b7819c05539a0765701c79834556b76'}), Task({'id': 'A_a_4', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218614.5540137, 'updated': 1709218614.5547016, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '4'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924640>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': '8b7819c05539a0765701c79834556b76'})]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "max_batch_size": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "best_task": {
                                    "variable_value": "Task({'id': 'A_a_1', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': set(), 'status': 'BATCH_RUNNING', 'time': 1709218614.5539536, 'updated': 1709218614.5546987, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '1'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924b20>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': '8b7819c05539a0765701c79834556b76'})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "current_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ct_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A_a_4', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218614.5540137, 'updated': 1709218614.5547016, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '4'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924640>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': '8b7819c05539a0765701c79834556b76'})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "self._state.get_running_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._state": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7fa23fafd280>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "self._rank": {
                                    "variable_value": "<bound method Scheduler._rank of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.worker_running": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "task.id": {
                                    "variable_value": "'A_a_4'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "self._reset_orphaned_batch_running_tasks": {
                                    "variable_value": "<bound method Scheduler._reset_orphaned_batch_running_tasks of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "locally_pending_tasks": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "running_tasks": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "upstream_table": {
                                    "variable_value": "{'A_a_1': 'UPSTREAM_MISSING_INPUT', 'A_a_2': 'UPSTREAM_MISSING_INPUT', 'NOT_DONE': 'UPSTREAM_MISSING_INPUT', 'A_a_3': '', 'A_a_4': '', 'A_a_5': 'UPSTREAM_MISSING_INPUT'}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "greedy_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "collections.defaultdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n_unique_pending": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._state.get_worker": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.is_trivial_worker": {
                                    "variable_value": "<bound method Worker.is_trivial_worker of <luigi.scheduler.Worker object at 0x7fa23f924a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "relevant_tasks": {
                                    "variable_value": "<itertools.chain object at 0x7fa23f526b80>",
                                    "variable_type": "chain",
                                    "variable_shape": null
                                },
                                "worker.get_pending_tasks": {
                                    "variable_value": "<bound method Worker.get_pending_tasks of <luigi.scheduler.Worker object at 0x7fa23f924a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "used_resources": {
                                    "variable_value": "defaultdict(<class 'int'>, {})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "0"
                                },
                                "greedy_workers": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._state.get_pending_tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._used_resources": {
                                    "variable_value": "<bound method Scheduler._used_resources of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "activity_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._config.worker_disconnect_delay": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "active_workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._state.get_active_workers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.id": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "worker.info.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "worker.info": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "tasks": {
                                    "variable_value": "[Task({'id': 'A_a_1', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': set(), 'status': 'BATCH_RUNNING', 'time': 1709218614.5539536, 'updated': 1709218614.5546987, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '1'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924b20>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': '8b7819c05539a0765701c79834556b76'}), Task({'id': 'A_a_2', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'NOT_DONE'}, 'status': 'PENDING', 'time': 1709218614.5539787, 'updated': 1709218614.5539787, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '2'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924a00>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': None}), Task({'id': 'NOT_DONE', 'stakeholders': {'myworker'}, 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 1709218614.553986, 'updated': 1709218614.5540473, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924670>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': False, 'batchable': False, 'batch_id': None}), Task({'id': 'A_a_3', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218614.5539978, 'updated': 1709218614.5547006, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '3'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924880>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': '8b7819c05539a0765701c79834556b76'}), Task({'id': 'A_a_4', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218614.5540137, 'updated': 1709218614.5547016, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '4'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924640>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': '8b7819c05539a0765701c79834556b76'}), Task({'id': 'A_a_5', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'NOT_DONE'}, 'status': 'PENDING', 'time': 1709218614.5540287, 'updated': 1709218614.5540287, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '5'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f9245e0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': None})]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "tasks.sort": {
                                    "variable_value": "<built-in method sort of list object at 0x7fa23fa1ab40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "in_workers": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "task.workers": {
                                    "variable_value": "{'myworker'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "task.status": {
                                    "variable_value": "'BATCH_RUNNING'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "more_info.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_worker.info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "running_tasks.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fa23f52ae00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "PENDING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "upstream_status": {
                                    "variable_value": "'UPSTREAM_MISSING_INPUT'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "self._upstream_status": {
                                    "variable_value": "<bound method Scheduler._upstream_status of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "UPSTREAM_DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.family": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "best_task.family": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "task.is_batchable": {
                                    "variable_value": "<bound method Task.is_batchable of Task({'id': 'A_a_4', 'stakeholders': {'myworker'}, 'workers': {'myworker'}, 'deps': {'DONE'}, 'status': 'BATCH_RUNNING', 'time': 1709218614.5540137, 'updated': 1709218614.5547016, 'retry': None, 'remove': None, 'worker_running': 'myworker', 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': 'A', 'module': None, 'params': {'a': '4'}, 'retry_policy': RetryPolicy(retry_count=3, disable_hard_timeout=3600, disable_window=10), 'failures': <luigi.scheduler.Failures object at 0x7fa23f924640>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': True, 'batch_id': '8b7819c05539a0765701c79834556b76'})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.params.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params": {
                                    "variable_value": "{'a': '4'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "name": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unbatched_params.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7fa23f925fc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._schedulable": {
                                    "variable_value": "<bound method Scheduler._schedulable of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": "['1', '3', '4']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batched_params.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7fa23f929080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "params.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fa23f92d340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batched_tasks.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fa23f929f00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "resource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "amount": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six.iteritems": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "six": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.resources": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._has_resources": {
                                    "variable_value": "<bound method Scheduler._has_resources of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_param_names": {
                                    "variable_value": "['a']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._state.get_batcher": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.params.items": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools.chain": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "itertools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task_worker": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "greedy_workers.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7fa23fa1ab00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "reply": {
                                    "variable_value": "{'n_pending_tasks': 5, 'running_tasks': [], 'task_id': None, 'n_unique_pending': 5, 'task_family': 'A', 'task_module': None, 'task_params': {'a': ['1', '3', '4']}, 'batch_id': '8b7819c05539a0765701c79834556b76', 'batch_task_ids': ['A_a_1', 'A_a_3', 'A_a_4']}",
                                    "variable_type": "dict",
                                    "variable_shape": "9"
                                },
                                "batch_string": {
                                    "variable_value": "'A_a_1",
                                    "variable_type": "str",
                                    "variable_shape": "A_a_3"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_id": {
                                    "variable_value": "'8b7819c05539a0765701c79834556b76'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "hexdigest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hashlib.md5": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hashlib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_string.encode": {
                                    "variable_value": "<built-in method encode of str object at 0x7fa23f535580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._state.set_batch_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "combined_params": {
                                    "variable_value": "{'a': ['1', '3', '4']}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "best_task.params.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.params": {
                                    "variable_value": "{'a': '1'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "combined_params.update": {
                                    "variable_value": "<built-in method update of dict object at 0x7fa23f925b40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._state.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "best_task.worker_running": {
                                    "variable_value": "'myworker'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "best_task.time_running": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._update_task_history": {
                                    "variable_value": "<bound method Scheduler._update_task_history of <luigi.scheduler.Scheduler object at 0x7fa23f5261f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "best_task.id": {
                                    "variable_value": "'A_a_1'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "rpc_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def _get_empty_retry_policy():\n    return RetryPolicy(*[None] * len(_retry_policy_fields))",
                        "signature": "_get_empty_retry_policy()"
                    },
                    {
                        "code": "def rpc_method(**request_args):\n    def _rpc_method(fn):\n        # If request args are passed, return this function again for use as\n        # the decorator function with the request args attached.\n        fn_args = inspect.getargspec(fn)\n\n        assert not fn_args.varargs\n        assert fn_args.args[0] == 'self'\n        all_args = fn_args.args[1:]\n        defaults = dict(zip(reversed(all_args), reversed(fn_args.defaults or ())))\n        required_args = frozenset(arg for arg in all_args if arg not in defaults)\n        fn_name = fn.__name__\n\n        @functools.wraps(fn)\n        def rpc_func(self, *args, **kwargs):\n            actual_args = defaults.copy()\n            actual_args.update(dict(zip(all_args, args)))\n            actual_args.update(kwargs)\n            if not all(arg in actual_args for arg in required_args):\n                raise TypeError('{} takes {} arguments ({} given)'.format(\n                    fn_name, len(all_args), len(actual_args)))\n            return self._request('/api/{}'.format(fn_name), actual_args, **request_args)\n\n        RPC_METHODS[fn_name] = rpc_func\n        return fn\n\n    return _rpc_method",
                        "signature": "rpc_method(**request_args)"
                    },
                    {
                        "code": "def _get_default(x, default):\n    if x is not None:\n        return x\n    else:\n        return default",
                        "signature": "_get_default(x, default)"
                    },
                    {
                        "code": "def dep_func(t):\n    return t.deps",
                        "signature": "dep_func(t)"
                    },
                    {
                        "code": "def filter_func(_):\n    return True",
                        "signature": "filter_func(_)"
                    },
                    {
                        "code": "def filter_func(t):\n    return all(term in t.pretty_id for term in terms)",
                        "signature": "filter_func(t)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class scheduler:",
                        "functions": [
                            {
                                "code": "def _get_retry_policy(self):\n    return RetryPolicy(self.retry_count, self.disable_hard_timeout, self.disable_window)",
                                "signature": "_get_retry_policy(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Failures:",
                        "functions": [
                            {
                                "code": "def __init__(self, window):\n    \"\"\"\n    Initialize with the given window.\n\n    :param window: how long to track failures for, as a float (number of seconds).\n    \"\"\"\n    self.window = window\n    self.failures = collections.deque()\n    self.first_failure_time = None",
                                "signature": "__init__(self, window)"
                            },
                            {
                                "code": "def add_failure(self):\n    \"\"\"\n    Add a failure event with the current timestamp.\n    \"\"\"\n    failure_time = time.time()\n\n    if not self.first_failure_time:\n        self.first_failure_time = failure_time\n\n    self.failures.append(failure_time)",
                                "signature": "add_failure(self)"
                            },
                            {
                                "code": "def num_failures(self):\n    \"\"\"\n    Return the number of failures in the window.\n    \"\"\"\n    min_time = time.time() - self.window\n\n    while self.failures and self.failures[0] < min_time:\n        self.failures.popleft()\n\n    return len(self.failures)",
                                "signature": "num_failures(self)"
                            },
                            {
                                "code": "def clear(self):\n    \"\"\"\n    Clear the failure queue.\n    \"\"\"\n    self.failures.clear()",
                                "signature": "clear(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Task:",
                        "functions": [
                            {
                                "code": "def __init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None,\n             params=None, tracking_url=None, status_message=None, retry_policy='notoptional'):\n    self.id = task_id\n    self.stakeholders = set()  # workers ids that are somehow related to this task (i.e. don't prune while any of these workers are still active)\n    self.workers = set()  # workers ids that can perform task - task is 'BROKEN' if none of these workers are active\n    if deps is None:\n        self.deps = set()\n    else:\n        self.deps = set(deps)\n    self.status = status  # PENDING, RUNNING, FAILED or DONE\n    self.time = time.time()  # Timestamp when task was first added\n    self.updated = self.time\n    self.retry = None\n    self.remove = None\n    self.worker_running = None  # the worker id that is currently running the task or None\n    self.time_running = None  # Timestamp when picked up by worker\n    self.expl = None\n    self.priority = priority\n    self.resources = _get_default(resources, {})\n    self.family = family\n    self.module = module\n    self.params = _get_default(params, {})\n\n    self.retry_policy = retry_policy\n    self.failures = Failures(self.retry_policy.disable_window)\n    self.tracking_url = tracking_url\n    self.status_message = status_message\n    self.scheduler_disable_time = None\n    self.runnable = False\n    self.batchable = False\n    self.batch_id = None",
                                "signature": "__init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None, params=None, tracking_url=None, status_message=None, retry_policy='notoptional')"
                            },
                            {
                                "code": "def __repr__(self):\n    return \"Task(%r)\" % vars(self)",
                                "signature": "__repr__(self)"
                            },
                            {
                                "code": "def is_batchable(self):\n    try:\n        return self.batchable\n    except AttributeError:\n        return False",
                                "signature": "is_batchable(self)"
                            },
                            {
                                "code": "def add_failure(self):\n    self.failures.add_failure()",
                                "signature": "add_failure(self)"
                            },
                            {
                                "code": "def has_excessive_failures(self):\n    if self.failures.first_failure_time is not None:\n        if (time.time() >= self.failures.first_failure_time + self.retry_policy.disable_hard_timeout):\n            return True\n\n    logger.debug('%s task num failures is %s and limit is %s', self.id, self.failures.num_failures(), self.retry_policy.retry_count)\n    if self.failures.num_failures() >= self.retry_policy.retry_count:\n        logger.debug('%s task num failures limit(%s) is exceeded', self.id, self.retry_policy.retry_count)\n        return True\n\n    return False",
                                "signature": "has_excessive_failures(self)"
                            },
                            {
                                "code": "@property\ndef pretty_id(self):\n    param_str = ', '.join('{}={}'.format(key, value) for key, value in self.params.items())\n    return '{}({})'.format(self.family, param_str)",
                                "signature": "pretty_id(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Worker:",
                        "functions": [
                            {
                                "code": "def __init__(self, worker_id, last_active=None):\n    self.id = worker_id\n    self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n    self.last_active = last_active or time.time()  # seconds since epoch\n    self.last_get_work = None\n    self.started = time.time()  # seconds since epoch\n    self.tasks = set()  # task objects\n    self.info = {}\n    self.disabled = False",
                                "signature": "__init__(self, worker_id, last_active=None)"
                            },
                            {
                                "code": "def add_info(self, info):\n    self.info.update(info)",
                                "signature": "add_info(self, info)"
                            },
                            {
                                "code": "def update(self, worker_reference, get_work=False):\n    if worker_reference:\n        self.reference = worker_reference\n    self.last_active = time.time()\n    if get_work:\n        self.last_get_work = time.time()",
                                "signature": "update(self, worker_reference, get_work=False)"
                            },
                            {
                                "code": "def prune(self, config):\n    # Delete workers that haven't said anything for a while (probably killed)\n    if self.last_active + config.worker_disconnect_delay < time.time():\n        return True",
                                "signature": "prune(self, config)"
                            },
                            {
                                "code": "def get_pending_tasks(self, state):\n    \"\"\"\n    Get PENDING (and RUNNING) tasks for this worker.\n\n    You have to pass in the state for optimization reasons.\n    \"\"\"\n    if len(self.tasks) < state.num_pending_tasks():\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                self.tasks)\n    else:\n        return state.get_pending_tasks()",
                                "signature": "get_pending_tasks(self, state)"
                            },
                            {
                                "code": "def is_trivial_worker(self, state):\n    \"\"\"\n    If it's not an assistant having only tasks that are without\n    requirements.\n\n    We have to pass the state parameter for optimization reasons.\n    \"\"\"\n    if self.assistant:\n        return False\n    return all(not task.resources for task in self.get_pending_tasks(state))",
                                "signature": "is_trivial_worker(self, state)"
                            },
                            {
                                "code": "@property\ndef assistant(self):\n    return self.info.get('assistant', False)",
                                "signature": "assistant(self)"
                            },
                            {
                                "code": "def __str__(self):\n    return self.id",
                                "signature": "__str__(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class SimpleTaskState:",
                        "functions": [
                            {
                                "code": "def __init__(self, state_path):\n    self._state_path = state_path\n    self._tasks = {}  # map from id to a Task object\n    self._status_tasks = collections.defaultdict(dict)\n    self._active_workers = {}  # map from id to a Worker object\n    self._task_batchers = {}",
                                "signature": "__init__(self, state_path)"
                            },
                            {
                                "code": "def get_state(self):\n    return self._tasks, self._active_workers, self._task_batchers",
                                "signature": "get_state(self)"
                            },
                            {
                                "code": "def set_state(self, state):\n    self._tasks, self._active_workers = state[:2]\n    if len(state) >= 3:\n        self._task_batchers = state[2]",
                                "signature": "set_state(self, state)"
                            },
                            {
                                "code": "def dump(self):\n    try:\n        with open(self._state_path, 'wb') as fobj:\n            pickle.dump(self.get_state(), fobj)\n    except IOError:\n        logger.warning(\"Failed saving scheduler state\", exc_info=1)\n    else:\n        logger.info(\"Saved state in %s\", self._state_path)",
                                "signature": "dump(self)"
                            },
                            {
                                "code": "def load(self):\n    if os.path.exists(self._state_path):\n        logger.info(\"Attempting to load state from %s\", self._state_path)\n        try:\n            with open(self._state_path, 'rb') as fobj:\n                state = pickle.load(fobj)\n        except BaseException:\n            logger.exception(\"Error when loading state. Starting from empty state.\")\n            return\n\n        self.set_state(state)\n        self._status_tasks = collections.defaultdict(dict)\n        for task in six.itervalues(self._tasks):\n            self._status_tasks[task.status][task.id] = task\n    else:\n        logger.info(\"No prior state file exists at %s. Starting with empty state\", self._state_path)",
                                "signature": "load(self)"
                            },
                            {
                                "code": "def get_active_tasks(self, status=None):\n    if status:\n        for task in six.itervalues(self._status_tasks[status]):\n            yield task\n    else:\n        for task in six.itervalues(self._tasks):\n            yield task",
                                "signature": "get_active_tasks(self, status=None)"
                            },
                            {
                                "code": "def get_batch_running_tasks(self, batch_id):\n    assert batch_id is not None\n    return [\n        task for task in self.get_active_tasks(BATCH_RUNNING)\n        if task.batch_id == batch_id\n    ]",
                                "signature": "get_batch_running_tasks(self, batch_id)"
                            },
                            {
                                "code": "def get_running_tasks(self):\n    return six.itervalues(self._status_tasks[RUNNING])",
                                "signature": "get_running_tasks(self)"
                            },
                            {
                                "code": "def get_pending_tasks(self):\n    return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status])\n                                         for status in [PENDING, RUNNING])",
                                "signature": "get_pending_tasks(self)"
                            },
                            {
                                "code": "def set_batcher(self, worker_id, family, batcher_args, max_batch_size):\n    self._task_batchers.setdefault(worker_id, {})\n    self._task_batchers[worker_id][family] = (batcher_args, max_batch_size)",
                                "signature": "set_batcher(self, worker_id, family, batcher_args, max_batch_size)"
                            },
                            {
                                "code": "def get_batcher(self, worker_id, family):\n    return self._task_batchers.get(worker_id, {}).get(family, (None, 1))",
                                "signature": "get_batcher(self, worker_id, family)"
                            },
                            {
                                "code": "def num_pending_tasks(self):\n    \"\"\"\n    Return how many tasks are PENDING + RUNNING. O(1).\n    \"\"\"\n    return len(self._status_tasks[PENDING]) + len(self._status_tasks[RUNNING])",
                                "signature": "num_pending_tasks(self)"
                            },
                            {
                                "code": "def get_task(self, task_id, default=None, setdefault=None):\n    if setdefault:\n        task = self._tasks.setdefault(task_id, setdefault)\n        self._status_tasks[task.status][task.id] = task\n        return task\n    else:\n        return self._tasks.get(task_id, default)",
                                "signature": "get_task(self, task_id, default=None, setdefault=None)"
                            },
                            {
                                "code": "def has_task(self, task_id):\n    return task_id in self._tasks",
                                "signature": "has_task(self, task_id)"
                            },
                            {
                                "code": "def re_enable(self, task, config=None):\n    task.scheduler_disable_time = None\n    task.failures.clear()\n    if config:\n        self.set_status(task, FAILED, config)\n        task.failures.clear()",
                                "signature": "re_enable(self, task, config=None)"
                            },
                            {
                                "code": "def set_batch_running(self, task, batch_id, worker_id):\n    self.set_status(task, BATCH_RUNNING)\n    task.batch_id = batch_id\n    task.worker_running = worker_id",
                                "signature": "set_batch_running(self, task, batch_id, worker_id)"
                            },
                            {
                                "code": "def set_status(self, task, new_status, config=None):\n    if new_status == FAILED:\n        assert config is not None\n\n    if new_status == DISABLED and task.status in (RUNNING, BATCH_RUNNING):\n        return\n\n    remove_on_failure = task.batch_id is not None and not task.batchable\n\n    if task.status == DISABLED:\n        if new_status == DONE:\n            self.re_enable(task)\n\n        # don't allow workers to override a scheduler disable\n        elif task.scheduler_disable_time is not None and new_status != DISABLED:\n            return\n\n    if task.status == RUNNING and task.batch_id is not None:\n        for batch_task in self.get_batch_running_tasks(task.batch_id):\n            self.set_status(batch_task, new_status, config)\n            batch_task.batch_id = None\n        task.batch_id = None\n\n    if new_status == FAILED and task.status != DISABLED:\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = DISABLED\n            notifications.send_error_email(\n                'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                '{task} failed {failures} times in the last {window} seconds, so it is being '\n                'disabled for {persist} seconds'.format(\n                    failures=task.retry_policy.retry_count,\n                    task=task.id,\n                    window=config.disable_window,\n                    persist=config.disable_persist,\n                ))\n    elif new_status == DISABLED:\n        task.scheduler_disable_time = None\n\n    if new_status != task.status:\n        self._status_tasks[task.status].pop(task.id)\n        self._status_tasks[new_status][task.id] = task\n        task.status = new_status\n        task.updated = time.time()\n\n    if new_status == FAILED:\n        task.retry = time.time() + config.retry_delay\n        if remove_on_failure:\n            task.remove = time.time()",
                                "signature": "set_status(self, task, new_status, config=None)"
                            },
                            {
                                "code": "def fail_dead_worker_task(self, task, config, assistants):\n    # If a running worker disconnects, tag all its jobs as FAILED and subject it to the same retry logic\n    if task.status == RUNNING and task.worker_running and task.worker_running not in task.stakeholders | assistants:\n        logger.info(\"Task %r is marked as running by disconnected worker %r -> marking as \"\n                    \"FAILED with retry delay of %rs\", task.id, task.worker_running,\n                    config.retry_delay)\n        task.worker_running = None\n        self.set_status(task, FAILED, config)\n        task.retry = time.time() + config.retry_delay",
                                "signature": "fail_dead_worker_task(self, task, config, assistants)"
                            },
                            {
                                "code": "def update_status(self, task, config):\n    # Mark tasks with no remaining active stakeholders for deletion\n    if (not task.stakeholders) and (task.remove is None) and (task.status != RUNNING):\n        # We don't check for the RUNNING case, because that is already handled\n        # by the fail_dead_worker_task function.\n        logger.debug(\"Task %r has no stakeholders anymore -> might remove \"\n                     \"task in %s seconds\", task.id, config.remove_delay)\n        task.remove = time.time() + config.remove_delay\n\n    # Re-enable task after the disable time expires\n    if task.status == DISABLED and task.scheduler_disable_time is not None:\n        if time.time() - task.scheduler_disable_time > config.disable_persist:\n            self.re_enable(task, config)\n\n    # Reset FAILED tasks to PENDING if max timeout is reached, and retry delay is >= 0\n    if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\n        self.set_status(task, PENDING, config)",
                                "signature": "update_status(self, task, config)"
                            },
                            {
                                "code": "def may_prune(self, task):\n    return task.remove and time.time() >= task.remove",
                                "signature": "may_prune(self, task)"
                            },
                            {
                                "code": "def inactivate_tasks(self, delete_tasks):\n    # The terminology is a bit confusing: we used to \"delete\" tasks when they became inactive,\n    # but with a pluggable state storage, you might very well want to keep some history of\n    # older tasks as well. That's why we call it \"inactivate\" (as in the verb)\n    for task in delete_tasks:\n        task_obj = self._tasks.pop(task)\n        self._status_tasks[task_obj.status].pop(task)",
                                "signature": "inactivate_tasks(self, delete_tasks)"
                            },
                            {
                                "code": "def get_active_workers(self, last_active_lt=None, last_get_work_gt=None):\n    for worker in six.itervalues(self._active_workers):\n        if last_active_lt is not None and worker.last_active >= last_active_lt:\n            continue\n        last_get_work = getattr(worker, 'last_get_work', None)\n        if last_get_work_gt is not None and (\n                        last_get_work is None or last_get_work <= last_get_work_gt):\n            continue\n        yield worker",
                                "signature": "get_active_workers(self, last_active_lt=None, last_get_work_gt=None)"
                            },
                            {
                                "code": "def get_assistants(self, last_active_lt=None):\n    return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))",
                                "signature": "get_assistants(self, last_active_lt=None)"
                            },
                            {
                                "code": "def get_worker_ids(self):\n    return self._active_workers.keys()  # only used for unit tests",
                                "signature": "get_worker_ids(self)"
                            },
                            {
                                "code": "def get_worker(self, worker_id):\n    return self._active_workers.setdefault(worker_id, Worker(worker_id))",
                                "signature": "get_worker(self, worker_id)"
                            },
                            {
                                "code": "def inactivate_workers(self, delete_workers):\n    # Mark workers as inactive\n    for worker in delete_workers:\n        self._active_workers.pop(worker)\n    self._remove_workers_from_tasks(delete_workers)",
                                "signature": "inactivate_workers(self, delete_workers)"
                            },
                            {
                                "code": "def _remove_workers_from_tasks(self, workers, remove_stakeholders=True):\n    for task in self.get_active_tasks():\n        if remove_stakeholders:\n            task.stakeholders.difference_update(workers)\n        task.workers.difference_update(workers)",
                                "signature": "_remove_workers_from_tasks(self, workers, remove_stakeholders=True)"
                            },
                            {
                                "code": "def disable_workers(self, workers):\n    self._remove_workers_from_tasks(workers, remove_stakeholders=False)\n    for worker in workers:\n        self.get_worker(worker).disabled = True",
                                "signature": "disable_workers(self, workers)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Scheduler:",
                        "functions": [
                            {
                                "code": "def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n    \"\"\"\n    Keyword Arguments:\n    :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n    :param resources: a dict of str->int constraints\n    :param task_history_impl: ignore config and use this object as the task history\n    \"\"\"\n    self._config = config or scheduler(**kwargs)\n    self._state = SimpleTaskState(self._config.state_path)\n\n    if task_history_impl:\n        self._task_history = task_history_impl\n    elif self._config.record_task_history:\n        from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n        self._task_history = db_task_history.DbTaskHistory()\n    else:\n        self._task_history = history.NopHistory()\n    self._resources = resources or configuration.get_config().getintdict('resources')  # TODO: Can we make this a Parameter?\n    self._make_task = functools.partial(Task, retry_policy=self._config._get_retry_policy())\n    self._worker_requests = {}",
                                "signature": "__init__(self, config=None, resources=None, task_history_impl=None, **kwargs)"
                            },
                            {
                                "code": "def load(self):\n    self._state.load()",
                                "signature": "load(self)"
                            },
                            {
                                "code": "def dump(self):\n    self._state.dump()",
                                "signature": "dump(self)"
                            },
                            {
                                "code": "@rpc_method()\ndef prune(self):\n    logger.info(\"Starting pruning of task graph\")\n    self._prune_workers()\n    self._prune_tasks()\n    logger.info(\"Done pruning task graph\")",
                                "signature": "prune(self)"
                            },
                            {
                                "code": "def _prune_workers(self):\n    remove_workers = []\n    for worker in self._state.get_active_workers():\n        if worker.prune(self._config):\n            logger.debug(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n\n    self._state.inactivate_workers(remove_workers)",
                                "signature": "_prune_workers(self)"
                            },
                            {
                                "code": "def _prune_tasks(self):\n    assistant_ids = set(w.id for w in self._state.get_assistants())\n    remove_tasks = []\n\n    for task in self._state.get_active_tasks():\n        self._state.fail_dead_worker_task(task, self._config, assistant_ids)\n        self._state.update_status(task, self._config)\n        if self._state.may_prune(task):\n            logger.info(\"Removing task %r\", task.id)\n            remove_tasks.append(task.id)\n\n    self._state.inactivate_tasks(remove_tasks)",
                                "signature": "_prune_tasks(self)"
                            },
                            {
                                "code": "def update(self, worker_id, worker_reference=None, get_work=False):\n    \"\"\"\n    Keep track of whenever the worker was last active.\n    \"\"\"\n    worker = self._state.get_worker(worker_id)\n    worker.update(worker_reference, get_work=get_work)\n    return not getattr(worker, 'disabled', False)",
                                "signature": "update(self, worker_id, worker_reference=None, get_work=False)"
                            },
                            {
                                "code": "def _update_priority(self, task, prio, worker):\n    \"\"\"\n    Update priority of the given task.\n\n    Priority can only be increased.\n    If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n    \"\"\"\n    task.priority = prio = max(prio, task.priority)\n    for dep in task.deps or []:\n        t = self._state.get_task(dep)\n        if t is not None and prio > t.priority:\n            self._update_priority(t, prio, worker)",
                                "signature": "_update_priority(self, task, prio, worker)"
                            },
                            {
                                "code": "@rpc_method()\ndef add_task_batcher(self, worker, task_family, batched_args, max_batch_size=float('inf')):\n    self._state.set_batcher(worker, task_family, batched_args, max_batch_size)",
                                "signature": "add_task_batcher(self, worker, task_family, batched_args, max_batch_size=float('inf'))"
                            },
                            {
                                "code": "@rpc_method()\ndef add_task(self, task_id=None, status=PENDING, runnable=True,\n             deps=None, new_deps=None, expl=None, resources=None,\n             priority=0, family='', module=None, params=None,\n             assistant=False, tracking_url=None, worker=None, batchable=None,\n             batch_id=None, retry_policy_dict={}, **kwargs):\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    assert worker is not None\n    worker_id = worker\n    worker_enabled = self.update(worker_id)\n    retry_policy = self._generate_retry_policy(retry_policy_dict)\n\n    if worker_enabled:\n        _default_task = self._make_task(\n            task_id=task_id, status=PENDING, deps=deps, resources=resources,\n            priority=priority, family=family, module=module, params=params,\n        )\n    else:\n        _default_task = None\n\n    task = self._state.get_task(task_id, setdefault=_default_task)\n\n    if task is None or (task.status != RUNNING and not worker_enabled):\n        return\n\n    # for setting priority, we'll sometimes create tasks with unset family and params\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n\n    if batch_id is not None:\n        task.batch_id = batch_id\n    if status == RUNNING and not task.worker_running:\n        task.worker_running = worker_id\n\n    if tracking_url is not None or task.status != RUNNING:\n        task.tracking_url = tracking_url\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.tracking_url = tracking_url\n\n    if batchable is not None:\n        task.batchable = batchable\n\n    if task.remove is not None:\n        task.remove = None  # unmark task for removal so it isn't removed after being added\n\n    if expl is not None:\n        task.expl = expl\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.expl = expl\n\n    if not (task.status in (RUNNING, BATCH_RUNNING) and status == PENDING) or new_deps:\n        # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n        if status == PENDING or status != task.status:\n            # Update the DB only if there was a acctual change, to prevent noise.\n            # We also check for status == PENDING b/c that's the default value\n            # (so checking for status != task.status woule lie)\n            self._update_task_history(task, status)\n        self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n\n    if deps is not None:\n        task.deps = set(deps)\n\n    if new_deps is not None:\n        task.deps.update(new_deps)\n\n    if resources is not None:\n        task.resources = resources\n\n    if worker_enabled and not assistant:\n        task.stakeholders.add(worker_id)\n\n        # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n        # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n\n    self._update_priority(task, priority, worker_id)\n\n    # Because some tasks (non-dynamic dependencies) are `_make_task`ed\n    # before we know their retry_policy, we always set it here\n    task.retry_policy = retry_policy\n\n    if runnable and status != FAILED and worker_enabled:\n        task.workers.add(worker_id)\n        self._state.get_worker(worker_id).tasks.add(task)\n        task.runnable = runnable",
                                "signature": "add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, tracking_url=None, worker=None, batchable=None, batch_id=None, retry_policy_dict={}, **kwargs)"
                            },
                            {
                                "code": "@rpc_method()\ndef add_worker(self, worker, info, **kwargs):\n    self._state.get_worker(worker).add_info(info)",
                                "signature": "add_worker(self, worker, info, **kwargs)"
                            },
                            {
                                "code": "@rpc_method()\ndef disable_worker(self, worker):\n    self._state.disable_workers({worker})",
                                "signature": "disable_worker(self, worker)"
                            },
                            {
                                "code": "@rpc_method()\ndef update_resources(self, **resources):\n    if self._resources is None:\n        self._resources = {}\n    self._resources.update(resources)",
                                "signature": "update_resources(self, **resources)"
                            },
                            {
                                "code": "def _generate_retry_policy(self, task_retry_policy_dict):\n    retry_policy_dict = self._config._get_retry_policy()._asdict()\n    retry_policy_dict.update({k: v for k, v in six.iteritems(task_retry_policy_dict) if v is not None})\n    return RetryPolicy(**retry_policy_dict)",
                                "signature": "_generate_retry_policy(self, task_retry_policy_dict)"
                            },
                            {
                                "code": "def _has_resources(self, needed_resources, used_resources):\n    if needed_resources is None:\n        return True\n\n    available_resources = self._resources or {}\n    for resource, amount in six.iteritems(needed_resources):\n        if amount + used_resources[resource] > available_resources.get(resource, 1):\n            return False\n    return True",
                                "signature": "_has_resources(self, needed_resources, used_resources)"
                            },
                            {
                                "code": "def _used_resources(self):\n    used_resources = collections.defaultdict(int)\n    if self._resources is not None:\n        for task in self._state.get_active_tasks(status=RUNNING):\n            if task.resources:\n                for resource, amount in six.iteritems(task.resources):\n                    used_resources[resource] += amount\n    return used_resources",
                                "signature": "_used_resources(self)"
                            },
                            {
                                "code": "def _rank(self, task):\n    \"\"\"\n    Return worker's rank function for task scheduling.\n\n    :return:\n    \"\"\"\n\n    return task.priority, -task.time",
                                "signature": "_rank(self, task)"
                            },
                            {
                                "code": "def _schedulable(self, task):\n    if task.status != PENDING:\n        return False\n    for dep in task.deps:\n        dep_task = self._state.get_task(dep, default=None)\n        if dep_task is None or dep_task.status != DONE:\n            return False\n    return True",
                                "signature": "_schedulable(self, task)"
                            },
                            {
                                "code": "def _reset_orphaned_batch_running_tasks(self, worker_id):\n    running_batch_ids = {\n        task.batch_id\n        for task in self._state.get_running_tasks()\n        if task.worker_running == worker_id\n    }\n    orphaned_tasks = [\n        task for task in self._state.get_active_tasks(BATCH_RUNNING)\n        if task.worker_running == worker_id and task.batch_id not in running_batch_ids\n    ]\n    for task in orphaned_tasks:\n        self._state.set_status(task, PENDING)",
                                "signature": "_reset_orphaned_batch_running_tasks(self, worker_id)"
                            },
                            {
                                "code": "@rpc_method(allow_null=False)\ndef get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    # TODO: remove any expired nodes\n\n    # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n    # resources.\n\n    # Resource checking looks both at currently available resources and at which resources would\n    # be available if all running tasks died and we rescheduled all workers greedily. We do both\n    # checks in order to prevent a worker with many low-priority tasks from starving other\n    # workers with higher priority tasks that share the same resources.\n\n    # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n    # nothing it can wait for\n\n    if self._config.prune_on_get_work:\n        self.prune()\n\n    assert worker is not None\n    worker_id = worker\n    # Return remaining tasks that have no FAILED descendants\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n\n    batched_params, unbatched_params, batched_tasks, max_batch_size = None, None, [], 1\n    best_task = None\n    if current_tasks is not None:\n        ct_set = set(current_tasks)\n        for task in sorted(self._state.get_running_tasks(), key=self._rank):\n            if task.worker_running == worker_id and task.id not in ct_set:\n                best_task = task\n\n    if current_tasks is not None:\n        # batch running tasks that weren't claimed since the last get_work go back in the pool\n        self._reset_orphaned_batch_running_tasks(worker_id)\n\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n\n    worker = self._state.get_worker(worker_id)\n    if worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_pending_tasks(self._state)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()  # If there's no resources, then they can grab any task\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        activity_limit = time.time() - self._config.worker_disconnect_delay\n        active_workers = self._state.get_active_workers(last_get_work_gt=activity_limit)\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                              for worker in active_workers)\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n\n    for task in tasks:\n        in_workers = (assistant and getattr(task, 'runnable', bool(task.workers))) or worker_id in task.workers\n        if task.status == RUNNING and in_workers:\n            # Return a list of currently running tasks to the client,\n            # makes it easier to troubleshoot\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n\n        if task.status == PENDING and in_workers:\n            upstream_status = self._upstream_status(task.id, upstream_table)\n            if upstream_status != UPSTREAM_DISABLED:\n                locally_pending_tasks += 1\n                if len(task.workers) == 1 and not assistant:\n                    n_unique_pending += 1\n\n        if (best_task and batched_params and task.family == best_task.family and\n                len(batched_tasks) < max_batch_size and task.is_batchable() and all(\n                task.params.get(name) == value for name, value in unbatched_params.items())):\n            for name, params in batched_params.items():\n                params.append(task.params.get(name))\n            batched_tasks.append(task)\n        if best_task:\n            continue\n\n        if task.status == RUNNING and (task.worker_running in greedy_workers):\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems((task.resources or {})):\n                greedy_resources[resource] += amount\n\n        if self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n                batch_param_names, max_batch_size = self._state.get_batcher(\n                    worker_id, task.family)\n                if batch_param_names and task.is_batchable():\n                    try:\n                        batched_params = {\n                            name: [task.params[name]] for name in batch_param_names\n                        }\n                        unbatched_params = {\n                            name: value for name, value in task.params.items()\n                            if name not in batched_params\n                        }\n                        batched_tasks.append(task)\n                    except KeyError:\n                        batched_params, unbatched_params = None, None\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        # use up a worker\n                        greedy_workers[task_worker] -= 1\n\n                        # keep track of the resources used in greedy scheduling\n                        for resource, amount in six.iteritems((task.resources or {})):\n                            greedy_resources[resource] += amount\n\n                        break\n\n    reply = {'n_pending_tasks': locally_pending_tasks,\n             'running_tasks': running_tasks,\n             'task_id': None,\n             'n_unique_pending': n_unique_pending}\n\n    if len(batched_tasks) > 1:\n        batch_string = '|'.join(task.id for task in batched_tasks)\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n\n        combined_params = best_task.params.copy()\n        combined_params.update(batched_params)\n\n        reply['task_id'] = None\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = combined_params\n        reply['batch_id'] = batch_id\n        reply['batch_task_ids'] = [task.id for task in batched_tasks]\n\n    elif best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n\n    return reply",
                                "signature": "get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs)"
                            },
                            {
                                "code": "@rpc_method(attempts=1)\ndef ping(self, **kwargs):\n    worker_id = kwargs['worker']\n    self.update(worker_id)",
                                "signature": "ping(self, **kwargs)"
                            },
                            {
                                "code": "def _upstream_status(self, task_id, upstream_status_table):\n    if task_id in upstream_status_table:\n        return upstream_status_table[task_id]\n    elif self._state.has_task(task_id):\n        task_stack = [task_id]\n\n        while task_stack:\n            dep_id = task_stack.pop()\n            dep = self._state.get_task(dep_id)\n            if dep:\n                if dep.status == DONE:\n                    continue\n                if dep_id not in upstream_status_table:\n                    if dep.status == PENDING and dep.deps:\n                        task_stack += [dep_id] + list(dep.deps)\n                        upstream_status_table[dep_id] = ''  # will be updated postorder\n                    else:\n                        dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                        upstream_status_table[dep_id] = dep_status\n                elif upstream_status_table[dep_id] == '' and dep.deps:\n                    # This is the postorder update step when we set the\n                    # status based on the previously calculated child elements\n                    upstream_severities = list(upstream_status_table.get(a_task_id) for a_task_id in dep.deps if a_task_id in upstream_status_table) or ['']\n                    status = min(upstream_severities, key=UPSTREAM_SEVERITY_KEY)\n                    upstream_status_table[dep_id] = status\n        return upstream_status_table[dep_id]",
                                "signature": "_upstream_status(self, task_id, upstream_status_table)"
                            },
                            {
                                "code": "def _serialize_task(self, task_id, include_deps=True, deps=None):\n    task = self._state.get_task(task_id)\n    ret = {\n        'display_name': task.pretty_id,\n        'status': task.status,\n        'workers': list(task.workers),\n        'worker_running': task.worker_running,\n        'time_running': getattr(task, \"time_running\", None),\n        'start_time': task.time,\n        'last_updated': getattr(task, \"updated\", task.time),\n        'params': task.params,\n        'name': task.family,\n        'priority': task.priority,\n        'resources': task.resources,\n        'tracking_url': getattr(task, \"tracking_url\", None),\n        'status_message': getattr(task, \"status_message\", None)\n    }\n    if task.status == DISABLED:\n        ret['re_enable_able'] = task.scheduler_disable_time is not None\n    if include_deps:\n        ret['deps'] = list(task.deps if deps is None else deps)\n    return ret",
                                "signature": "_serialize_task(self, task_id, include_deps=True, deps=None)"
                            },
                            {
                                "code": "@rpc_method()\ndef graph(self, **kwargs):\n    self.prune()\n    serialized = {}\n    seen = set()\n    for task in self._state.get_active_tasks():\n        serialized.update(self._traverse_graph(task.id, seen))\n    return serialized",
                                "signature": "graph(self, **kwargs)"
                            },
                            {
                                "code": "def _filter_done(self, task_ids):\n    for task_id in task_ids:\n        task = self._state.get_task(task_id)\n        if task is None or task.status != DONE:\n            yield task_id",
                                "signature": "_filter_done(self, task_ids)"
                            },
                            {
                                "code": "def _traverse_graph(self, root_task_id, seen=None, dep_func=None, include_done=True):\n    \"\"\" Returns the dependency graph rooted at task_id\n\n    This does a breadth-first traversal to find the nodes closest to the\n    root before hitting the scheduler.max_graph_nodes limit.\n\n    :param root_task_id: the id of the graph's root\n    :return: A map of task id to serialized node\n    \"\"\"\n\n    if seen is None:\n        seen = set()\n    elif root_task_id in seen:\n        return {}\n\n    if dep_func is None:\n        def dep_func(t):\n            return t.deps\n\n    seen.add(root_task_id)\n    serialized = {}\n    queue = collections.deque([root_task_id])\n    while queue:\n        task_id = queue.popleft()\n\n        task = self._state.get_task(task_id)\n        if task is None or not task.family:\n            logger.debug('Missing task for id [%s]', task_id)\n\n            # NOTE : If a dependency is missing from self._state there is no way to deduce the\n            #        task family and parameters.\n            family_match = TASK_FAMILY_RE.match(task_id)\n            family = family_match.group(1) if family_match else UNKNOWN\n            params = {'task_id': task_id}\n            serialized[task_id] = {\n                'deps': [],\n                'status': UNKNOWN,\n                'workers': [],\n                'start_time': UNKNOWN,\n                'params': params,\n                'name': family,\n                'display_name': task_id,\n                'priority': 0,\n            }\n        else:\n            deps = dep_func(task)\n            if not include_done:\n                deps = list(self._filter_done(deps))\n            serialized[task_id] = self._serialize_task(task_id, deps=deps)\n            for dep in sorted(deps):\n                if dep not in seen:\n                    seen.add(dep)\n                    queue.append(dep)\n\n        if task_id != root_task_id:\n            del serialized[task_id]['display_name']\n        if len(serialized) >= self._config.max_graph_nodes:\n            break\n\n    return serialized",
                                "signature": "_traverse_graph(self, root_task_id, seen=None, dep_func=None, include_done=True)"
                            },
                            {
                                "code": "@rpc_method()\ndef dep_graph(self, task_id, include_done=True, **kwargs):\n    self.prune()\n    if not self._state.has_task(task_id):\n        return {}\n    return self._traverse_graph(task_id, include_done=include_done)",
                                "signature": "dep_graph(self, task_id, include_done=True, **kwargs)"
                            },
                            {
                                "code": "@rpc_method()\ndef inverse_dep_graph(self, task_id, include_done=True, **kwargs):\n    self.prune()\n    if not self._state.has_task(task_id):\n        return {}\n    inverse_graph = collections.defaultdict(set)\n    for task in self._state.get_active_tasks():\n        for dep in task.deps:\n            inverse_graph[dep].add(task.id)\n    return self._traverse_graph(\n        task_id, dep_func=lambda t: inverse_graph[t.id], include_done=include_done)",
                                "signature": "inverse_dep_graph(self, task_id, include_done=True, **kwargs)"
                            },
                            {
                                "code": "@rpc_method()\ndef task_list(self, status='', upstream_status='', limit=True, search=None, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by status.\n    \"\"\"\n    self.prune()\n    result = {}\n    upstream_status_table = {}  # used to memoize upstream status\n    if search is None:\n        def filter_func(_):\n            return True\n    else:\n        terms = search.split()\n\n        def filter_func(t):\n            return all(term in t.pretty_id for term in terms)\n    for task in filter(filter_func, self._state.get_active_tasks(status)):\n        if task.status != PENDING or not upstream_status or upstream_status == self._upstream_status(task.id, upstream_status_table):\n            serialized = self._serialize_task(task.id, False)\n            result[task.id] = serialized\n    if limit and len(result) > self._config.max_shown_tasks:\n        return {'num_tasks': len(result)}\n    return result",
                                "signature": "task_list(self, status='', upstream_status='', limit=True, search=None, **kwargs)"
                            },
                            {
                                "code": "def _first_task_display_name(self, worker):\n    task_id = worker.info.get('first_task', '')\n    if self._state.has_task(task_id):\n        return self._state.get_task(task_id).pretty_id\n    else:\n        return task_id",
                                "signature": "_first_task_display_name(self, worker)"
                            },
                            {
                                "code": "@rpc_method()\ndef worker_list(self, include_running=True, **kwargs):\n    self.prune()\n    workers = [\n        dict(\n            name=worker.id,\n            last_active=worker.last_active,\n            started=getattr(worker, 'started', None),\n            first_task_display_name=self._first_task_display_name(worker),\n            **worker.info\n        ) for worker in self._state.get_active_workers()]\n    workers.sort(key=lambda worker: worker['started'], reverse=True)\n    if include_running:\n        running = collections.defaultdict(dict)\n        num_pending = collections.defaultdict(int)\n        num_uniques = collections.defaultdict(int)\n        for task in self._state.get_pending_tasks():\n            if task.status == RUNNING and task.worker_running:\n                running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n            elif task.status == PENDING:\n                for worker in task.workers:\n                    num_pending[worker] += 1\n                if len(task.workers) == 1:\n                    num_uniques[list(task.workers)[0]] += 1\n        for worker in workers:\n            tasks = running[worker['name']]\n            worker['num_running'] = len(tasks)\n            worker['num_pending'] = num_pending[worker['name']]\n            worker['num_uniques'] = num_uniques[worker['name']]\n            worker['running'] = tasks\n    return workers",
                                "signature": "worker_list(self, include_running=True, **kwargs)"
                            },
                            {
                                "code": "@rpc_method()\ndef resource_list(self):\n    \"\"\"\n    Resources usage info and their consumers (tasks).\n    \"\"\"\n    self.prune()\n    resources = [\n        dict(\n            name=resource,\n            num_total=r_dict['total'],\n            num_used=r_dict['used']\n        ) for resource, r_dict in six.iteritems(self.resources())]\n    if self._resources is not None:\n        consumers = collections.defaultdict(dict)\n        for task in self._state.get_running_tasks():\n            if task.status == RUNNING and task.resources:\n                for resource, amount in six.iteritems(task.resources):\n                    consumers[resource][task.id] = self._serialize_task(task.id, False)\n        for resource in resources:\n            tasks = consumers[resource['name']]\n            resource['num_consumer'] = len(tasks)\n            resource['running'] = tasks\n    return resources",
                                "signature": "resource_list(self)"
                            },
                            {
                                "code": "def resources(self):\n    ''' get total resources and available ones '''\n    used_resources = self._used_resources()\n    ret = collections.defaultdict(dict)\n    for resource, total in six.iteritems(self._resources):\n        ret[resource]['total'] = total\n        if resource in used_resources:\n            ret[resource]['used'] = used_resources[resource]\n        else:\n            ret[resource]['used'] = 0\n    return ret",
                                "signature": "resources(self)"
                            },
                            {
                                "code": "@rpc_method()\ndef task_search(self, task_str, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by task_id.\n\n    :param task_str:\n    :return:\n    \"\"\"\n    self.prune()\n    result = collections.defaultdict(dict)\n    for task in self._state.get_active_tasks():\n        if task.id.find(task_str) != -1:\n            serialized = self._serialize_task(task.id, False)\n            result[task.status][task.id] = serialized\n    return result",
                                "signature": "task_search(self, task_str, **kwargs)"
                            },
                            {
                                "code": "@rpc_method()\ndef re_enable_task(self, task_id):\n    serialized = {}\n    task = self._state.get_task(task_id)\n    if task and task.status == DISABLED and task.scheduler_disable_time:\n        self._state.re_enable(task, self._config)\n        serialized = self._serialize_task(task_id)\n    return serialized",
                                "signature": "re_enable_task(self, task_id)"
                            },
                            {
                                "code": "@rpc_method()\ndef fetch_error(self, task_id, **kwargs):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        return {\"taskId\": task_id, \"error\": task.expl, 'displayName': task.pretty_id}\n    else:\n        return {\"taskId\": task_id, \"error\": \"\"}",
                                "signature": "fetch_error(self, task_id, **kwargs)"
                            },
                            {
                                "code": "@rpc_method()\ndef set_task_status_message(self, task_id, status_message):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        task.status_message = status_message\n        if task.status == RUNNING and task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.status_message = status_message",
                                "signature": "set_task_status_message(self, task_id, status_message)"
                            },
                            {
                                "code": "@rpc_method()\ndef get_task_status_message(self, task_id):\n    if self._state.has_task(task_id):\n        task = self._state.get_task(task_id)\n        return {\"taskId\": task_id, \"statusMessage\": task.status_message}\n    else:\n        return {\"taskId\": task_id, \"statusMessage\": \"\"}",
                                "signature": "get_task_status_message(self, task_id)"
                            },
                            {
                                "code": "def _update_task_history(self, task, status, host=None):\n    try:\n        if status == DONE or status == FAILED:\n            successful = (status == DONE)\n            self._task_history.task_finished(task, successful)\n        elif status == PENDING:\n            self._task_history.task_scheduled(task)\n        elif status == RUNNING:\n            self._task_history.task_started(task, host)\n    except BaseException:\n        logger.warning(\"Error saving Task history\", exc_info=True)",
                                "signature": "_update_task_history(self, task, status, host=None)"
                            },
                            {
                                "code": "@property\ndef task_history(self):\n    # Used by server.py to expose the calls\n    return self._task_history",
                                "signature": "task_history(self)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "ImportError": [
                    29
                ],
                "logger": [
                    354,
                    1282,
                    356,
                    488,
                    361,
                    619,
                    366,
                    1070,
                    49,
                    500,
                    597,
                    374,
                    600,
                    251,
                    253,
                    606
                ],
                "logging.getLogger": [
                    49
                ],
                "logging": [
                    49
                ],
                "__name__": [
                    49
                ],
                "UPSTREAM_RUNNING": [
                    58,
                    51,
                    66
                ],
                "UPSTREAM_MISSING_INPUT": [
                    67,
                    59,
                    52
                ],
                "UPSTREAM_FAILED": [
                    65,
                    60,
                    53
                ],
                "UPSTREAM_DISABLED": [
                    890,
                    68,
                    61,
                    54
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    56,
                    63
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    1001,
                    63
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    63
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    64,
                    995
                ],
                "FAILED": [
                    480,
                    65,
                    744,
                    457,
                    426,
                    492,
                    435,
                    1274,
                    510
                ],
                "RUNNING": [
                    392,
                    904,
                    396,
                    781,
                    1171,
                    409,
                    677,
                    301,
                    1201,
                    690,
                    693,
                    438,
                    961,
                    66,
                    451,
                    964,
                    711,
                    487,
                    1260,
                    879,
                    497,
                    1279
                ],
                "PENDING": [
                    67,
                    711,
                    713,
                    650,
                    797,
                    396,
                    301,
                    718,
                    816,
                    1140,
                    1173,
                    888,
                    409,
                    991,
                    1277,
                    669,
                    511
                ],
                "DISABLED": [
                    448,
                    68,
                    457,
                    461,
                    438,
                    471,
                    505,
                    1242,
                    443,
                    1022
                ],
                "TASK_FAMILY_RE": [
                    1074,
                    71
                ],
                "re.compile": [
                    71
                ],
                "re": [
                    71
                ],
                "RPC_METHODS": [
                    73,
                    110
                ],
                "_retry_policy_fields": [
                    80,
                    75,
                    84
                ],
                "RetryPolicy": [
                    80,
                    84,
                    142,
                    766
                ],
                "collections.namedtuple": [
                    80
                ],
                "collections": [
                    160,
                    865,
                    1064,
                    779,
                    1167,
                    80,
                    337,
                    370,
                    1168,
                    1169,
                    1199,
                    1231,
                    859,
                    1116,
                    1213
                ],
                "len": [
                    896,
                    107,
                    300,
                    1099,
                    944,
                    1180,
                    84,
                    1143,
                    1206,
                    183,
                    1144,
                    409,
                    346,
                    892,
                    1176
                ],
                "fn_args": [
                    96,
                    91,
                    93,
                    94,
                    95
                ],
                "inspect.getargspec": [
                    91
                ],
                "inspect": [
                    91
                ],
                "fn": [
                    98,
                    91,
                    100,
                    111
                ],
                "fn_args.varargs": [
                    93
                ],
                "fn_args.args": [
                    94,
                    95
                ],
                "all_args": [
                    96,
                    97,
                    103,
                    107,
                    95
                ],
                "defaults": [
                    96,
                    97,
                    102
                ],
                "dict": [
                    96,
                    129,
                    866,
                    131,
                    133,
                    1158,
                    103,
                    872,
                    1193,
                    1167,
                    1199,
                    337,
                    370,
                    1231,
                    1213,
                    127
                ],
                "zip": [
                    96,
                    103
                ],
                "reversed": [
                    96
                ],
                "fn_args.defaults": [
                    96
                ],
                "required_args": [
                    97,
                    105
                ],
                "frozenset": [
                    97
                ],
                "arg": [
                    97,
                    105
                ],
                "fn_name": [
                    98,
                    107,
                    108,
                    110
                ],
                "fn.__name__": [
                    98
                ],
                "actual_args": [
                    102,
                    103,
                    104,
                    105,
                    107,
                    108
                ],
                "defaults.copy": [
                    102
                ],
                "actual_args.update": [
                    104,
                    103
                ],
                "args": [
                    103
                ],
                "kwargs": [
                    104,
                    975,
                    575
                ],
                "all": [
                    896,
                    105,
                    1138,
                    315
                ],
                "TypeError": [
                    106
                ],
                "format": [
                    260,
                    261,
                    106,
                    108,
                    463,
                    464
                ],
                "self._request": [
                    108
                ],
                "self": [
                    1030,
                    521,
                    522,
                    1033,
                    1034,
                    525,
                    1039,
                    535,
                    538,
                    541,
                    546,
                    547,
                    550,
                    556,
                    1068,
                    558,
                    1230,
                    1232,
                    575,
                    576,
                    1234,
                    1090,
                    579,
                    580,
                    1091,
                    582,
                    584,
                    585,
                    586,
                    587,
                    1099,
                    590,
                    593,
                    1106,
                    1107,
                    1109,
                    598,
                    599,
                    1113,
                    1114,
                    604,
                    605,
                    606,
                    1117,
                    1120,
                    609,
                    612,
                    615,
                    616,
                    617,
                    618,
                    1128,
                    108,
                    622,
                    1243,
                    1139,
                    628,
                    1140,
                    1141,
                    1143,
                    1244,
                    1149,
                    1150,
                    641,
                    643,
                    1156,
                    647,
                    1162,
                    1164,
                    1249,
                    142,
                    1170,
                    1172,
                    664,
                    665,
                    668,
                    159,
                    160,
                    161,
                    675,
                    1191,
                    169,
                    170,
                    172,
                    1197,
                    1198,
                    1200,
                    178,
                    1203,
                    180,
                    181,
                    183,
                    696,
                    1212,
                    189,
                    1214,
                    708,
                    202,
                    203,
                    204,
                    717,
                    206,
                    718,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    1241,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    735,
                    738,
                    233,
                    746,
                    1250,
                    1257,
                    1258,
                    1261,
                    239,
                    751,
                    1266,
                    755,
                    244,
                    1267,
                    247,
                    248,
                    759,
                    760,
                    251,
                    252,
                    253,
                    761,
                    764,
                    1276,
                    1278,
                    1280,
                    260,
                    261,
                    772,
                    1287,
                    780,
                    781,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    280,
                    284,
                    285,
                    287,
                    800,
                    291,
                    808,
                    300,
                    812,
                    302,
                    816,
                    313,
                    315,
                    319,
                    833,
                    322,
                    834,
                    839,
                    841,
                    335,
                    336,
                    337,
                    338,
                    339,
                    847,
                    853,
                    342,
                    345,
                    347,
                    862,
                    351,
                    352,
                    863,
                    864,
                    356,
                    868,
                    869,
                    870,
                    360,
                    361,
                    871,
                    363,
                    875,
                    369,
                    370,
                    371,
                    372,
                    882,
                    374,
                    889,
                    378,
                    381,
                    387,
                    392,
                    395,
                    909,
                    910,
                    399,
                    400,
                    912,
                    403,
                    409,
                    413,
                    414,
                    417,
                    420,
                    426,
                    430,
                    948,
                    445,
                    961,
                    452,
                    453,
                    964,
                    976,
                    981,
                    986,
                    475,
                    476,
                    492,
                    1006,
                    507,
                    511
                ],
                "request_args": [
                    108
                ],
                "functools.wraps": [
                    100
                ],
                "functools": [
                    586,
                    100
                ],
                "rpc_func": [
                    110
                ],
                "_rpc_method": [
                    113
                ],
                "Config": [
                    116
                ],
                "retry_delay": [
                    119
                ],
                "parameter.FloatParameter": [
                    120,
                    121,
                    119
                ],
                "parameter": [
                    128,
                    130,
                    132,
                    134,
                    135,
                    137,
                    139,
                    119,
                    120,
                    121,
                    122,
                    126
                ],
                "remove_delay": [
                    120
                ],
                "worker_disconnect_delay": [
                    121
                ],
                "state_path": [
                    122,
                    335
                ],
                "parameter.Parameter": [
                    122
                ],
                "disable_window": [
                    126
                ],
                "parameter.IntParameter": [
                    128,
                    130,
                    132,
                    134,
                    135,
                    126
                ],
                "retry_count": [
                    128
                ],
                "disable_hard_timeout": [
                    130
                ],
                "disable_persist": [
                    132
                ],
                "max_shown_tasks": [
                    134
                ],
                "max_graph_nodes": [
                    135
                ],
                "record_task_history": [
                    137
                ],
                "parameter.BoolParameter": [
                    137,
                    139
                ],
                "prune_on_get_work": [
                    139
                ],
                "self.retry_count": [
                    142
                ],
                "self.disable_hard_timeout": [
                    142
                ],
                "self.disable_window": [
                    142
                ],
                "object": [
                    325,
                    199,
                    264,
                    145,
                    561
                ],
                "self.window": [
                    178,
                    159
                ],
                "window": [
                    159
                ],
                "self.failures": [
                    160,
                    224,
                    172,
                    251,
                    180,
                    181,
                    244,
                    183,
                    248,
                    247,
                    252,
                    189
                ],
                "collections.deque": [
                    160,
                    1064
                ],
                "self.first_failure_time": [
                    161,
                    170,
                    169
                ],
                "failure_time": [
                    170,
                    172,
                    167
                ],
                "time.time": [
                    514,
                    272,
                    274,
                    285,
                    287,
                    291,
                    167,
                    178,
                    963,
                    460,
                    210,
                    478,
                    481,
                    483,
                    870,
                    493,
                    502,
                    248,
                    506,
                    510
                ],
                "time": [
                    514,
                    272,
                    274,
                    285,
                    287,
                    291,
                    167,
                    178,
                    963,
                    460,
                    210,
                    478,
                    481,
                    483,
                    870,
                    493,
                    502,
                    248,
                    506,
                    510
                ],
                "self.failures.append": [
                    172
                ],
                "min_time": [
                    178,
                    180
                ],
                "self.failures.popleft": [
                    181
                ],
                "self.failures.clear": [
                    189
                ],
                "x": [
                    193,
                    194
                ],
                "default": [
                    417,
                    196
                ],
                "self.id": [
                    322,
                    202,
                    270,
                    251,
                    253
                ],
                "task_id": [
                    1152,
                    1038,
                    1039,
                    1041,
                    669,
                    413,
                    417,
                    675,
                    420,
                    1066,
                    1068,
                    1070,
                    1074,
                    1076,
                    1077,
                    1084,
                    1091,
                    1097,
                    202,
                    1098,
                    979,
                    980,
                    981,
                    982,
                    1107,
                    1109,
                    1241,
                    1114,
                    1244,
                    1121,
                    1249,
                    1250,
                    1251,
                    1253,
                    1257,
                    1258,
                    1006,
                    1266,
                    1267,
                    1268,
                    1270,
                    1148,
                    1149,
                    1150
                ],
                "self.stakeholders": [
                    203
                ],
                "set": [
                    612,
                    1032,
                    203,
                    204,
                    206,
                    846,
                    208,
                    721,
                    275,
                    1116,
                    1054
                ],
                "self.workers": [
                    204
                ],
                "deps": [
                    1088,
                    1025,
                    1090,
                    1091,
                    1092,
                    205,
                    208,
                    721,
                    720,
                    669
                ],
                "self.deps": [
                    208,
                    206
                ],
                "self.status": [
                    209
                ],
                "status": [
                    711,
                    744,
                    713,
                    1001,
                    395,
                    396,
                    717,
                    718,
                    1002,
                    1274,
                    209,
                    690,
                    1139,
                    377,
                    378,
                    1275,
                    1277,
                    1279
                ],
                "self.time": [
                    210,
                    211
                ],
                "self.updated": [
                    211
                ],
                "self.retry": [
                    212
                ],
                "self.remove": [
                    213
                ],
                "self.worker_running": [
                    214
                ],
                "self.time_running": [
                    215
                ],
                "self.expl": [
                    216
                ],
                "self.priority": [
                    217
                ],
                "priority": [
                    217,
                    738,
                    670,
                    735
                ],
                "self.resources": [
                    218,
                    1197
                ],
                "_get_default": [
                    218,
                    221,
                    686
                ],
                "resources": [
                    1192,
                    585,
                    1204,
                    726,
                    727,
                    1208,
                    761,
                    218,
                    669
                ],
                "self.family": [
                    219,
                    261
                ],
                "family": [
                    1083,
                    682,
                    400,
                    403,
                    1075,
                    219,
                    670
                ],
                "self.module": [
                    220
                ],
                "module": [
                    684,
                    220,
                    670
                ],
                "self.params": [
                    260,
                    221
                ],
                "params": [
                    898,
                    899,
                    686,
                    1076,
                    1082,
                    221,
                    670
                ],
                "self.retry_policy": [
                    224,
                    248,
                    251,
                    252,
                    253,
                    223
                ],
                "retry_policy": [
                    665,
                    742,
                    223
                ],
                "Failures": [
                    224
                ],
                "self.retry_policy.disable_window": [
                    224
                ],
                "self.tracking_url": [
                    225
                ],
                "tracking_url": [
                    225,
                    697,
                    693,
                    694
                ],
                "self.status_message": [
                    226
                ],
                "status_message": [
                    226,
                    1259,
                    1262
                ],
                "self.scheduler_disable_time": [
                    227
                ],
                "self.runnable": [
                    228
                ],
                "self.batchable": [
                    229,
                    239
                ],
                "self.batch_id": [
                    230
                ],
                "vars": [
                    233
                ],
                "AttributeError": [
                    240
                ],
                "self.failures.add_failure": [
                    244
                ],
                "self.failures.first_failure_time": [
                    248,
                    247
                ],
                "self.retry_policy.disable_hard_timeout": [
                    248
                ],
                "logger.debug": [
                    1070,
                    500,
                    251,
                    253,
                    606
                ],
                "self.failures.num_failures": [
                    251,
                    252
                ],
                "self.retry_policy.retry_count": [
                    251,
                    252,
                    253
                ],
                "param_str": [
                    260,
                    261
                ],
                "join": [
                    945,
                    260
                ],
                "key": [
                    260
                ],
                "value": [
                    920,
                    897,
                    260
                ],
                "self.params.items": [
                    260
                ],
                "property": [
                    258,
                    1284,
                    317
                ],
                "worker_id": [
                    270,
                    399,
                    400,
                    913,
                    403,
                    663,
                    664,
                    541,
                    927,
                    809,
                    813,
                    432,
                    691,
                    948,
                    962,
                    837,
                    839,
                    841,
                    975,
                    848,
                    976,
                    853,
                    730,
                    862,
                    736,
                    738,
                    745,
                    746,
                    878,
                    628
                ],
                "self.reference": [
                    284,
                    271
                ],
                "self.last_active": [
                    272,
                    291,
                    285
                ],
                "last_active": [
                    272
                ],
                "self.last_get_work": [
                    273,
                    287
                ],
                "self.started": [
                    274
                ],
                "self.tasks": [
                    275,
                    300,
                    302
                ],
                "self.info": [
                    280,
                    276,
                    319
                ],
                "self.disabled": [
                    277
                ],
                "self.info.update": [
                    280
                ],
                "info": [
                    280,
                    751
                ],
                "worker_reference": [
                    283,
                    284,
                    629
                ],
                "get_work": [
                    629,
                    286
                ],
                "config.worker_disconnect_delay": [
                    291
                ],
                "config": [
                    481,
                    291,
                    453,
                    425,
                    426,
                    490,
                    492,
                    493,
                    575,
                    436,
                    468,
                    469,
                    501,
                    502,
                    506,
                    507,
                    510,
                    511
                ],
                "state.num_pending_tasks": [
                    300
                ],
                "state": [
                    300,
                    364,
                    304,
                    369,
                    347,
                    345,
                    346,
                    315
                ],
                "six.moves.filter": [
                    301
                ],
                "six.moves": [
                    301
                ],
                "six": [
                    773,
                    934,
                    392,
                    765,
                    906,
                    395,
                    301,
                    525,
                    783,
                    1197,
                    1202,
                    371,
                    378,
                    381,
                    1214
                ],
                "task.status": [
                    904,
                    1040,
                    1171,
                    1173,
                    1022,
                    797,
                    414,
                    677,
                    301,
                    1201,
                    693,
                    438,
                    443,
                    451,
                    711,
                    457,
                    713,
                    1235,
                    474,
                    475,
                    1242,
                    477,
                    487,
                    1260,
                    879,
                    497,
                    1009,
                    372,
                    1140,
                    888,
                    505,
                    510
                ],
                "task": [
                    1025,
                    514,
                    1018,
                    1019,
                    520,
                    521,
                    522,
                    1033,
                    1020,
                    1034,
                    1039,
                    1040,
                    1022,
                    1023,
                    550,
                    552,
                    553,
                    1068,
                    1069,
                    1088,
                    1117,
                    1118,
                    1119,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    1139,
                    1140,
                    1141,
                    1142,
                    639,
                    640,
                    1170,
                    1171,
                    1172,
                    1173,
                    1174,
                    1176,
                    1177,
                    675,
                    677,
                    681,
                    682,
                    683,
                    684,
                    685,
                    686,
                    1200,
                    689,
                    690,
                    691,
                    1201,
                    693,
                    694,
                    695,
                    696,
                    1202,
                    1203,
                    700,
                    702,
                    703,
                    706,
                    707,
                    708,
                    711,
                    713,
                    717,
                    718,
                    1232,
                    721,
                    1233,
                    1234,
                    724,
                    1235,
                    727,
                    1241,
                    730,
                    1242,
                    1243,
                    734,
                    738,
                    1250,
                    1251,
                    742,
                    745,
                    746,
                    747,
                    1258,
                    1259,
                    1260,
                    1261,
                    1267,
                    1268,
                    1276,
                    1278,
                    1280,
                    781,
                    782,
                    783,
                    794,
                    797,
                    799,
                    807,
                    808,
                    809,
                    812,
                    301,
                    813,
                    815,
                    816,
                    315,
                    847,
                    848,
                    849,
                    877,
                    878,
                    879,
                    882,
                    371,
                    372,
                    883,
                    888,
                    889,
                    378,
                    379,
                    892,
                    381,
                    382,
                    895,
                    896,
                    897,
                    387,
                    388,
                    899,
                    900,
                    904,
                    905,
                    906,
                    909,
                    910,
                    911,
                    913,
                    914,
                    917,
                    920,
                    923,
                    413,
                    414,
                    415,
                    927,
                    934,
                    423,
                    424,
                    426,
                    427,
                    430,
                    431,
                    432,
                    945,
                    947,
                    948,
                    438,
                    441,
                    443,
                    445,
                    958,
                    448,
                    1015,
                    451,
                    452,
                    455,
                    457,
                    458,
                    459,
                    460,
                    463,
                    466,
                    467,
                    472,
                    1016,
                    474,
                    475,
                    476,
                    477,
                    478,
                    481,
                    483,
                    487,
                    489,
                    491,
                    492,
                    493,
                    1006,
                    1008,
                    497,
                    1009,
                    1010,
                    1011,
                    501,
                    502,
                    1012,
                    1013,
                    505,
                    506,
                    507,
                    1014,
                    1017,
                    510,
                    511
                ],
                "state.get_pending_tasks": [
                    304
                ],
                "self.assistant": [
                    313
                ],
                "task.resources": [
                    934,
                    906,
                    909,
                    782,
                    783,
                    910,
                    1201,
                    1202,
                    727,
                    1018,
                    315
                ],
                "self.get_pending_tasks": [
                    315
                ],
                "self.info.get": [
                    319
                ],
                "self._state_path": [
                    356,
                    360,
                    361,
                    363,
                    335,
                    374,
                    351
                ],
                "self._tasks": [
                    417,
                    420,
                    521,
                    336,
                    371,
                    342,
                    345,
                    381,
                    413
                ],
                "self._status_tasks": [
                    392,
                    522,
                    395,
                    337,
                    370,
                    372,
                    409,
                    378,
                    475,
                    476,
                    414
                ],
                "collections.defaultdict": [
                    865,
                    779,
                    1167,
                    1168,
                    337,
                    370,
                    1169,
                    1199,
                    1231,
                    859,
                    1116,
                    1213
                ],
                "self._active_workers": [
                    546,
                    525,
                    338,
                    342,
                    345,
                    538,
                    541
                ],
                "self._task_batchers": [
                    399,
                    400,
                    339,
                    403,
                    342,
                    347
                ],
                "open": [
                    363,
                    351
                ],
                "fobj": [
                    352,
                    363,
                    364,
                    351
                ],
                "pickle.dump": [
                    352
                ],
                "pickle": [
                    352,
                    364
                ],
                "self.get_state": [
                    352
                ],
                "IOError": [
                    353
                ],
                "logger.warning": [
                    354,
                    1282
                ],
                "logger.info": [
                    356,
                    488,
                    361,
                    619,
                    597,
                    374,
                    600
                ],
                "os.path.exists": [
                    360
                ],
                "os.path": [
                    360
                ],
                "os": [
                    360
                ],
                "pickle.load": [
                    364
                ],
                "BaseException": [
                    1281,
                    365
                ],
                "logger.exception": [
                    366
                ],
                "self.set_state": [
                    369
                ],
                "six.itervalues": [
                    392,
                    395,
                    525,
                    371,
                    378,
                    381
                ],
                "task.id": [
                    1034,
                    1172,
                    414,
                    945,
                    1203,
                    958,
                    463,
                    848,
                    1233,
                    1234,
                    467,
                    1235,
                    475,
                    476,
                    1119,
                    489,
                    619,
                    620,
                    883,
                    372,
                    501,
                    1140,
                    1141,
                    1142,
                    889
                ],
                "batch_id": [
                    385,
                    388,
                    431,
                    688,
                    689,
                    946,
                    948,
                    957
                ],
                "self.get_active_tasks": [
                    387,
                    550
                ],
                "BATCH_RUNNING": [
                    387,
                    711,
                    812,
                    430,
                    438
                ],
                "task.batch_id": [
                    451,
                    452,
                    388,
                    707,
                    455,
                    708,
                    807,
                    1260,
                    813,
                    1261,
                    431,
                    689,
                    695,
                    696,
                    441
                ],
                "itertools.chain.from_iterable": [
                    395
                ],
                "itertools.chain": [
                    395,
                    927
                ],
                "itertools": [
                    395,
                    927
                ],
                "self._task_batchers.setdefault": [
                    399
                ],
                "batcher_args": [
                    400
                ],
                "max_batch_size": [
                    896,
                    647,
                    843,
                    400,
                    912
                ],
                "get": [
                    403
                ],
                "self._task_batchers.get": [
                    403
                ],
                "setdefault": [
                    412,
                    413
                ],
                "self._tasks.setdefault": [
                    413
                ],
                "self._tasks.get": [
                    417
                ],
                "task.scheduler_disable_time": [
                    448,
                    423,
                    1242,
                    460,
                    472,
                    505,
                    506,
                    1023
                ],
                "task.failures.clear": [
                    424,
                    427
                ],
                "task.failures": [
                    424,
                    427
                ],
                "self.set_status": [
                    453,
                    426,
                    492,
                    430,
                    511
                ],
                "task.worker_running": [
                    487,
                    904,
                    489,
                    809,
                    491,
                    905,
                    813,
                    432,
                    848,
                    690,
                    691,
                    882,
                    1011,
                    1171,
                    1172
                ],
                "new_status": [
                    448,
                    480,
                    453,
                    457,
                    461,
                    435,
                    438,
                    471,
                    474,
                    476,
                    444,
                    477
                ],
                "remove_on_failure": [
                    441,
                    482
                ],
                "task.batchable": [
                    441,
                    700
                ],
                "DONE": [
                    801,
                    444,
                    1040,
                    1274,
                    1275,
                    988
                ],
                "self.re_enable": [
                    507,
                    445
                ],
                "batch_task": [
                    452,
                    453,
                    454,
                    708,
                    709,
                    1261,
                    1262,
                    696,
                    697
                ],
                "self.get_batch_running_tasks": [
                    452
                ],
                "batch_task.batch_id": [
                    454
                ],
                "task.add_failure": [
                    458
                ],
                "task.has_excessive_failures": [
                    459
                ],
                "notifications.send_error_email": [
                    462
                ],
                "notifications": [
                    462
                ],
                "task.retry_policy.retry_count": [
                    466
                ],
                "task.retry_policy": [
                    466,
                    742
                ],
                "config.disable_window": [
                    468
                ],
                "config.disable_persist": [
                    506,
                    469
                ],
                "pop": [
                    522,
                    475
                ],
                "task.updated": [
                    478
                ],
                "task.retry": [
                    481,
                    493,
                    510
                ],
                "config.retry_delay": [
                    481,
                    490,
                    493,
                    510
                ],
                "task.remove": [
                    514,
                    483,
                    497,
                    502,
                    702,
                    703
                ],
                "task.stakeholders": [
                    552,
                    497,
                    730,
                    487
                ],
                "assistants": [
                    487
                ],
                "config.remove_delay": [
                    501,
                    502
                ],
                "delete_tasks": [
                    520
                ],
                "task_obj": [
                    521,
                    522
                ],
                "self._tasks.pop": [
                    521
                ],
                "task_obj.status": [
                    522
                ],
                "worker": [
                    643,
                    647,
                    1159,
                    1160,
                    1161,
                    1162,
                    1163,
                    525,
                    526,
                    1164,
                    528,
                    1165,
                    532,
                    662,
                    663,
                    1174,
                    1175,
                    1178,
                    1179,
                    1180,
                    1181,
                    1182,
                    1183,
                    545,
                    546,
                    557,
                    558,
                    836,
                    837,
                    604,
                    605,
                    606,
                    607,
                    862,
                    863,
                    864,
                    872,
                    873,
                    751,
                    755,
                    628,
                    629,
                    630,
                    1148
                ],
                "last_active_lt": [
                    526,
                    535
                ],
                "worker.last_active": [
                    1160,
                    526
                ],
                "last_get_work": [
                    528,
                    530
                ],
                "getattr": [
                    1019,
                    968,
                    1161,
                    683,
                    878,
                    528,
                    1012,
                    630,
                    1014,
                    955,
                    1020
                ],
                "last_get_work_gt": [
                    529,
                    530
                ],
                "filter": [
                    1139,
                    535
                ],
                "w.assistant": [
                    535
                ],
                "w": [
                    612,
                    535
                ],
                "self.get_active_workers": [
                    535
                ],
                "self._active_workers.keys": [
                    538
                ],
                "self._active_workers.setdefault": [
                    541
                ],
                "Worker": [
                    541
                ],
                "delete_workers": [
                    545,
                    547
                ],
                "self._active_workers.pop": [
                    546
                ],
                "self._remove_workers_from_tasks": [
                    547,
                    556
                ],
                "remove_stakeholders": [
                    551
                ],
                "task.stakeholders.difference_update": [
                    552
                ],
                "workers": [
                    928,
                    1184,
                    1157,
                    552,
                    553,
                    556,
                    557,
                    1165,
                    1178,
                    927
                ],
                "task.workers.difference_update": [
                    553
                ],
                "task.workers": [
                    553,
                    745,
                    878,
                    1010,
                    1174,
                    1176,
                    1177,
                    892,
                    927
                ],
                "disabled": [
                    558
                ],
                "self.get_worker": [
                    558
                ],
                "self._config": [
                    576,
                    833,
                    961,
                    580,
                    870,
                    616,
                    617,
                    586,
                    1099,
                    718,
                    1143,
                    1243,
                    764,
                    605,
                    606,
                    575
                ],
                "scheduler": [
                    575
                ],
                "self._state": [
                    641,
                    647,
                    1033,
                    1164,
                    781,
                    1039,
                    912,
                    1170,
                    1250,
                    800,
                    675,
                    808,
                    812,
                    1068,
                    816,
                    1200,
                    948,
                    696,
                    576,
                    961,
                    708,
                    590,
                    718,
                    847,
                    593,
                    1232,
                    1107,
                    981,
                    1241,
                    986,
                    1114,
                    604,
                    1117,
                    862,
                    735,
                    863,
                    609,
                    864,
                    1243,
                    612,
                    868,
                    1249,
                    615,
                    616,
                    617,
                    618,
                    746,
                    871,
                    1257,
                    622,
                    751,
                    1006,
                    1258,
                    882,
                    755,
                    628,
                    1139,
                    1261,
                    1266,
                    1267,
                    1149,
                    1150
                ],
                "SimpleTaskState": [
                    576
                ],
                "self._config.state_path": [
                    576
                ],
                "task_history_impl": [
                    578,
                    579
                ],
                "self._task_history": [
                    1280,
                    579,
                    582,
                    1287,
                    584,
                    1276,
                    1278
                ],
                "self._config.record_task_history": [
                    580
                ],
                "db_task_history.DbTaskHistory": [
                    582
                ],
                "db_task_history": [
                    582
                ],
                "history.NopHistory": [
                    584
                ],
                "history": [
                    584
                ],
                "self._resources": [
                    772,
                    585,
                    780,
                    1198,
                    759,
                    760,
                    761,
                    1214
                ],
                "getintdict": [
                    585
                ],
                "configuration.get_config": [
                    585
                ],
                "configuration": [
                    585
                ],
                "self._make_task": [
                    586,
                    668,
                    735
                ],
                "functools.partial": [
                    586
                ],
                "Task": [
                    586
                ],
                "self._config._get_retry_policy": [
                    586,
                    764
                ],
                "self._worker_requests": [
                    587
                ],
                "self._state.load": [
                    590
                ],
                "self._state.dump": [
                    593
                ],
                "self._prune_workers": [
                    598
                ],
                "self._prune_tasks": [
                    599
                ],
                "rpc_method": [
                    1154,
                    1028,
                    645,
                    649,
                    1186,
                    818,
                    1222,
                    973,
                    1104,
                    595,
                    1238,
                    1111,
                    1247,
                    1123,
                    1255,
                    749,
                    1264,
                    753,
                    757
                ],
                "remove_workers": [
                    609,
                    603,
                    607
                ],
                "self._state.get_active_workers": [
                    1164,
                    604,
                    871
                ],
                "worker.prune": [
                    605
                ],
                "self._config.worker_disconnect_delay": [
                    870,
                    606
                ],
                "remove_workers.append": [
                    607
                ],
                "worker.id": [
                    872,
                    1159,
                    607
                ],
                "self._state.inactivate_workers": [
                    609
                ],
                "assistant_ids": [
                    616,
                    612
                ],
                "w.id": [
                    612
                ],
                "self._state.get_assistants": [
                    612
                ],
                "remove_tasks": [
                    620,
                    613,
                    622
                ],
                "self._state.get_active_tasks": [
                    615,
                    1033,
                    812,
                    781,
                    1232,
                    1139,
                    1117
                ],
                "self._state.fail_dead_worker_task": [
                    616
                ],
                "self._state.update_status": [
                    617
                ],
                "self._state.may_prune": [
                    618
                ],
                "remove_tasks.append": [
                    620
                ],
                "self._state.inactivate_tasks": [
                    622
                ],
                "self._state.get_worker": [
                    746,
                    751,
                    882,
                    628,
                    862
                ],
                "worker.update": [
                    629
                ],
                "task.priority": [
                    1017,
                    794,
                    639
                ],
                "prio": [
                    642,
                    643,
                    639
                ],
                "max": [
                    639
                ],
                "dep": [
                    640,
                    641,
                    799,
                    800,
                    1092,
                    1093,
                    1094,
                    1095,
                    986,
                    987,
                    988,
                    1118,
                    991,
                    992,
                    735,
                    734,
                    995,
                    1119,
                    997,
                    1000
                ],
                "task.deps": [
                    640,
                    1025,
                    721,
                    724,
                    1118,
                    734,
                    799
                ],
                "t": [
                    736,
                    641,
                    642,
                    643,
                    1060,
                    1121,
                    1138,
                    735
                ],
                "self._state.get_task": [
                    800,
                    641,
                    1250,
                    675,
                    1258,
                    1068,
                    1006,
                    1039,
                    1267,
                    1241,
                    986,
                    1150,
                    735
                ],
                "t.priority": [
                    642
                ],
                "self._update_priority": [
                    738,
                    643
                ],
                "float": [
                    646
                ],
                "self._state.set_batcher": [
                    647
                ],
                "task_family": [
                    647
                ],
                "batched_args": [
                    647
                ],
                "worker_enabled": [
                    677,
                    744,
                    664,
                    729,
                    667
                ],
                "self.update": [
                    664,
                    976,
                    839
                ],
                "self._generate_retry_policy": [
                    665
                ],
                "retry_policy_dict": [
                    665,
                    764,
                    765,
                    766
                ],
                "_default_task": [
                    673,
                    675,
                    668
                ],
                "task.family": [
                    681,
                    682,
                    1069,
                    913,
                    1016,
                    895
                ],
                "task.module": [
                    684
                ],
                "task.params": [
                    897,
                    899,
                    685,
                    686,
                    917,
                    1015,
                    920
                ],
                "task.tracking_url": [
                    694
                ],
                "self._state.get_batch_running_tasks": [
                    696,
                    708,
                    1261
                ],
                "batch_task.tracking_url": [
                    697
                ],
                "batchable": [
                    699,
                    700
                ],
                "expl": [
                    705,
                    706,
                    709
                ],
                "task.expl": [
                    706,
                    1251
                ],
                "batch_task.expl": [
                    709
                ],
                "new_deps": [
                    723,
                    724,
                    711
                ],
                "self._update_task_history": [
                    964,
                    717
                ],
                "self._state.set_status": [
                    816,
                    961,
                    718
                ],
                "SUSPENDED": [
                    718
                ],
                "task.deps.update": [
                    724
                ],
                "assistant": [
                    840,
                    841,
                    878,
                    729,
                    892,
                    927
                ],
                "task.stakeholders.add": [
                    730
                ],
                "UNKNOWN": [
                    1081,
                    1075,
                    1079,
                    735
                ],
                "t.stakeholders.add": [
                    736
                ],
                "t.stakeholders": [
                    736
                ],
                "runnable": [
                    744,
                    747
                ],
                "task.workers.add": [
                    745
                ],
                "tasks.add": [
                    746
                ],
                "tasks": [
                    746,
                    875,
                    874,
                    877,
                    1205,
                    1206,
                    1207,
                    1179,
                    1180,
                    1183
                ],
                "task.runnable": [
                    747
                ],
                "add_info": [
                    751
                ],
                "self._state.disable_workers": [
                    755
                ],
                "self._resources.update": [
                    761
                ],
                "_asdict": [
                    764
                ],
                "retry_policy_dict.update": [
                    765
                ],
                "k": [
                    765
                ],
                "v": [
                    765
                ],
                "six.iteritems": [
                    773,
                    934,
                    906,
                    1197,
                    783,
                    1202,
                    765,
                    1214
                ],
                "task_retry_policy_dict": [
                    765
                ],
                "needed_resources": [
                    769,
                    773
                ],
                "available_resources": [
                    772,
                    774
                ],
                "resource": [
                    773,
                    774,
                    906,
                    907,
                    783,
                    784,
                    934,
                    935,
                    1194,
                    1197,
                    1202,
                    1203,
                    1204,
                    1205,
                    1206,
                    1207,
                    1214,
                    1215,
                    1216,
                    1217,
                    1219
                ],
                "amount": [
                    773,
                    774,
                    934,
                    935,
                    906,
                    907,
                    783,
                    784,
                    1202
                ],
                "used_resources": [
                    1216,
                    865,
                    1217,
                    869,
                    774,
                    779,
                    910,
                    784,
                    785,
                    1212
                ],
                "available_resources.get": [
                    774
                ],
                "int": [
                    865,
                    779,
                    1168,
                    1169,
                    859
                ],
                "task.time": [
                    794,
                    1013,
                    1014
                ],
                "dep_task": [
                    800,
                    801
                ],
                "dep_task.status": [
                    801
                ],
                "running_batch_ids": [
                    813,
                    806
                ],
                "self._state.get_running_tasks": [
                    808,
                    1200,
                    847
                ],
                "orphaned_tasks": [
                    811,
                    815
                ],
                "self._config.prune_on_get_work": [
                    833
                ],
                "self.prune": [
                    834,
                    1156,
                    1030,
                    1191,
                    1128,
                    1230,
                    1106,
                    1113
                ],
                "host": [
                    1280,
                    964,
                    839
                ],
                "self.add_worker": [
                    841
                ],
                "batched_params": [
                    898,
                    843,
                    916,
                    951,
                    921,
                    925,
                    895
                ],
                "unbatched_params": [
                    897,
                    843,
                    925,
                    919
                ],
                "batched_tasks": [
                    896,
                    900,
                    843,
                    944,
                    945,
                    947,
                    923,
                    958
                ],
                "best_task": [
                    960,
                    961,
                    962,
                    963,
                    964,
                    901,
                    966,
                    967,
                    968,
                    969,
                    844,
                    911,
                    849,
                    950,
                    954,
                    955,
                    895
                ],
                "current_tasks": [
                    851,
                    845,
                    846
                ],
                "ct_set": [
                    848,
                    846
                ],
                "sorted": [
                    1092,
                    847
                ],
                "self._rank": [
                    875,
                    847
                ],
                "self._reset_orphaned_batch_running_tasks": [
                    853
                ],
                "locally_pending_tasks": [
                    891,
                    939,
                    855
                ],
                "running_tasks": [
                    856,
                    940,
                    886
                ],
                "upstream_table": [
                    857,
                    889
                ],
                "greedy_resources": [
                    859,
                    907,
                    909,
                    935
                ],
                "n_unique_pending": [
                    860,
                    893,
                    942
                ],
                "worker.is_trivial_worker": [
                    863
                ],
                "relevant_tasks": [
                    864,
                    874,
                    868
                ],
                "worker.get_pending_tasks": [
                    864
                ],
                "greedy_workers": [
                    929,
                    866,
                    931,
                    872,
                    905,
                    904
                ],
                "self._state.get_pending_tasks": [
                    1170,
                    868
                ],
                "self._used_resources": [
                    1212,
                    869
                ],
                "activity_limit": [
                    870,
                    871
                ],
                "active_workers": [
                    873,
                    871
                ],
                "worker.info.get": [
                    872,
                    1148
                ],
                "worker.info": [
                    872,
                    1163,
                    1148
                ],
                "list": [
                    992,
                    1025,
                    1090,
                    1000,
                    874,
                    1010,
                    1177
                ],
                "tasks.sort": [
                    875
                ],
                "in_workers": [
                    888,
                    910,
                    878,
                    879
                ],
                "bool": [
                    878
                ],
                "other_worker": [
                    882,
                    883,
                    884,
                    885
                ],
                "more_info": [
                    883,
                    885,
                    886
                ],
                "str": [
                    883
                ],
                "more_info.update": [
                    885
                ],
                "other_worker.info": [
                    885
                ],
                "running_tasks.append": [
                    886
                ],
                "upstream_status": [
                    889,
                    890,
                    1140
                ],
                "self._upstream_status": [
                    889,
                    1140
                ],
                "best_task.family": [
                    954,
                    967,
                    895
                ],
                "task.is_batchable": [
                    896,
                    914
                ],
                "task.params.get": [
                    897,
                    899
                ],
                "name": [
                    897,
                    898,
                    899,
                    917,
                    920,
                    921
                ],
                "unbatched_params.items": [
                    897
                ],
                "batched_params.items": [
                    898
                ],
                "params.append": [
                    899
                ],
                "batched_tasks.append": [
                    923,
                    900
                ],
                "self._schedulable": [
                    909
                ],
                "self._has_resources": [
                    909,
                    910
                ],
                "batch_param_names": [
                    912,
                    914,
                    917
                ],
                "self._state.get_batcher": [
                    912
                ],
                "task.params.items": [
                    920
                ],
                "KeyError": [
                    924
                ],
                "task_worker": [
                    928,
                    929,
                    931
                ],
                "greedy_workers.get": [
                    929
                ],
                "reply": [
                    966,
                    967,
                    968,
                    969,
                    939,
                    971,
                    953,
                    954,
                    955,
                    956,
                    957,
                    958
                ],
                "batch_string": [
                    945,
                    946
                ],
                "hexdigest": [
                    946
                ],
                "hashlib.md5": [
                    946
                ],
                "hashlib": [
                    946
                ],
                "batch_string.encode": [
                    946
                ],
                "self._state.set_batch_running": [
                    948
                ],
                "combined_params": [
                    956,
                    950,
                    951
                ],
                "best_task.params.copy": [
                    950
                ],
                "best_task.params": [
                    969,
                    950
                ],
                "combined_params.update": [
                    951
                ],
                "best_task.worker_running": [
                    962
                ],
                "best_task.time_running": [
                    963
                ],
                "best_task.id": [
                    966
                ],
                "upstream_status_table": [
                    993,
                    996,
                    997,
                    1000,
                    1002,
                    1003,
                    1130,
                    979,
                    980,
                    1140,
                    990
                ],
                "self._state.has_task": [
                    1249,
                    1257,
                    1266,
                    1107,
                    981,
                    1114,
                    1149
                ],
                "task_stack": [
                    984,
                    985,
                    982,
                    992
                ],
                "dep_id": [
                    992,
                    993,
                    996,
                    997,
                    1002,
                    1003,
                    985,
                    986,
                    990
                ],
                "task_stack.pop": [
                    985
                ],
                "dep.status": [
                    995,
                    988,
                    991
                ],
                "dep.deps": [
                    992,
                    1000,
                    997,
                    991
                ],
                "dep_status": [
                    995,
                    996
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    995
                ],
                "upstream_severities": [
                    1000,
                    1001
                ],
                "upstream_status_table.get": [
                    1000
                ],
                "a_task_id": [
                    1000
                ],
                "min": [
                    1001
                ],
                "ret": [
                    1025,
                    1026,
                    1215,
                    1217,
                    1219,
                    1220,
                    1007,
                    1213,
                    1023
                ],
                "task.pretty_id": [
                    1008,
                    1251
                ],
                "include_deps": [
                    1024
                ],
                "serialized": [
                    1091,
                    1063,
                    1031,
                    1034,
                    1035,
                    1098,
                    1099,
                    1102,
                    1234,
                    1235,
                    1077,
                    1141,
                    1142,
                    1240,
                    1244,
                    1245
                ],
                "seen": [
                    1093,
                    1062,
                    1094,
                    1032,
                    1034,
                    1053,
                    1054,
                    1055
                ],
                "serialized.update": [
                    1034
                ],
                "self._traverse_graph": [
                    1120,
                    1034,
                    1109
                ],
                "task_ids": [
                    1038
                ],
                "root_task_id": [
                    1064,
                    1097,
                    1062,
                    1055
                ],
                "dep_func": [
                    1088,
                    1058
                ],
                "t.deps": [
                    1060
                ],
                "seen.add": [
                    1094,
                    1062
                ],
                "queue": [
                    1064,
                    1065,
                    1066,
                    1095
                ],
                "queue.popleft": [
                    1066
                ],
                "family_match": [
                    1074,
                    1075
                ],
                "TASK_FAMILY_RE.match": [
                    1074
                ],
                "family_match.group": [
                    1075
                ],
                "include_done": [
                    1089,
                    1109,
                    1121
                ],
                "self._filter_done": [
                    1090
                ],
                "self._serialize_task": [
                    1091,
                    1234,
                    1203,
                    1172,
                    1141,
                    1244
                ],
                "queue.append": [
                    1095
                ],
                "self._config.max_graph_nodes": [
                    1099
                ],
                "inverse_graph": [
                    1121,
                    1116,
                    1119
                ],
                "add": [
                    1119
                ],
                "t.id": [
                    1121
                ],
                "result": [
                    1129,
                    1231,
                    1235,
                    1236,
                    1142,
                    1143,
                    1144,
                    1145
                ],
                "search": [
                    1131,
                    1135
                ],
                "terms": [
                    1138,
                    1135
                ],
                "search.split": [
                    1135
                ],
                "term": [
                    1138
                ],
                "t.pretty_id": [
                    1138
                ],
                "filter_func": [
                    1139
                ],
                "limit": [
                    1143
                ],
                "self._config.max_shown_tasks": [
                    1143
                ],
                "pretty_id": [
                    1150
                ],
                "self._first_task_display_name": [
                    1162
                ],
                "workers.sort": [
                    1165
                ],
                "include_running": [
                    1166
                ],
                "running": [
                    1179,
                    1172,
                    1167
                ],
                "num_pending": [
                    1168,
                    1181,
                    1175
                ],
                "num_uniques": [
                    1169,
                    1177,
                    1182
                ],
                "r_dict": [
                    1195,
                    1196,
                    1197
                ],
                "consumers": [
                    1203,
                    1205,
                    1199
                ],
                "total": [
                    1214,
                    1215
                ],
                "task.id.find": [
                    1233
                ],
                "task_str": [
                    1233
                ],
                "self._state.re_enable": [
                    1243
                ],
                "task.status_message": [
                    1259,
                    1268
                ],
                "batch_task.status_message": [
                    1262
                ],
                "successful": [
                    1275,
                    1276
                ],
                "self._task_history.task_finished": [
                    1276
                ],
                "self._task_history.task_scheduled": [
                    1278
                ],
                "self._task_history.task_started": [
                    1280
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    354,
                    1282,
                    356,
                    488,
                    361,
                    619,
                    366,
                    1070,
                    49,
                    500,
                    597,
                    374,
                    600,
                    251,
                    253,
                    606
                ],
                "logging.getLogger": [
                    49
                ],
                "logging": [
                    49
                ],
                "UPSTREAM_RUNNING": [
                    58,
                    51,
                    66
                ],
                "UPSTREAM_MISSING_INPUT": [
                    67,
                    59,
                    52
                ],
                "UPSTREAM_FAILED": [
                    65,
                    60,
                    53
                ],
                "UPSTREAM_DISABLED": [
                    890,
                    68,
                    61,
                    54
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    56,
                    63
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    1001,
                    63
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    63
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    64,
                    995
                ],
                "FAILED": [
                    480,
                    65,
                    744,
                    457,
                    426,
                    492,
                    435,
                    1274,
                    510
                ],
                "RUNNING": [
                    392,
                    904,
                    396,
                    781,
                    1171,
                    409,
                    677,
                    301,
                    1201,
                    690,
                    693,
                    438,
                    961,
                    66,
                    451,
                    964,
                    711,
                    487,
                    1260,
                    879,
                    497,
                    1279
                ],
                "PENDING": [
                    67,
                    711,
                    713,
                    650,
                    797,
                    396,
                    301,
                    718,
                    816,
                    1140,
                    1173,
                    888,
                    409,
                    991,
                    1277,
                    669,
                    511
                ],
                "DISABLED": [
                    448,
                    68,
                    457,
                    461,
                    438,
                    471,
                    505,
                    1242,
                    443,
                    1022
                ],
                "TASK_FAMILY_RE": [
                    1074,
                    71
                ],
                "re.compile": [
                    71
                ],
                "re": [
                    71
                ],
                "RPC_METHODS": [
                    73,
                    110
                ],
                "_retry_policy_fields": [
                    80,
                    75,
                    84
                ],
                "RetryPolicy": [
                    80,
                    84,
                    142,
                    766
                ],
                "collections.namedtuple": [
                    80
                ],
                "collections": [
                    160,
                    865,
                    1064,
                    779,
                    1167,
                    80,
                    337,
                    370,
                    1168,
                    1169,
                    1199,
                    1231,
                    859,
                    1116,
                    1213
                ],
                "fn_args": [
                    96,
                    91,
                    93,
                    94,
                    95
                ],
                "inspect.getargspec": [
                    91
                ],
                "inspect": [
                    91
                ],
                "fn": [
                    98,
                    91,
                    100,
                    111
                ],
                "fn_args.varargs": [
                    93
                ],
                "fn_args.args": [
                    94,
                    95
                ],
                "all_args": [
                    96,
                    97,
                    103,
                    107,
                    95
                ],
                "defaults": [
                    96,
                    97,
                    102
                ],
                "fn_args.defaults": [
                    96
                ],
                "required_args": [
                    97,
                    105
                ],
                "arg": [
                    97,
                    105
                ],
                "fn_name": [
                    98,
                    107,
                    108,
                    110
                ],
                "fn.__name__": [
                    98
                ],
                "actual_args": [
                    102,
                    103,
                    104,
                    105,
                    107,
                    108
                ],
                "defaults.copy": [
                    102
                ],
                "actual_args.update": [
                    104,
                    103
                ],
                "args": [
                    103
                ],
                "kwargs": [
                    104,
                    975,
                    575
                ],
                "self._request": [
                    108
                ],
                "self": [
                    1030,
                    521,
                    522,
                    1033,
                    1034,
                    525,
                    1039,
                    535,
                    538,
                    541,
                    546,
                    547,
                    550,
                    556,
                    1068,
                    558,
                    1230,
                    1232,
                    575,
                    576,
                    1234,
                    1090,
                    579,
                    580,
                    1091,
                    582,
                    584,
                    585,
                    586,
                    587,
                    1099,
                    590,
                    593,
                    1106,
                    1107,
                    1109,
                    598,
                    599,
                    1113,
                    1114,
                    604,
                    605,
                    606,
                    1117,
                    1120,
                    609,
                    612,
                    615,
                    616,
                    617,
                    618,
                    1128,
                    108,
                    622,
                    1243,
                    1139,
                    628,
                    1140,
                    1141,
                    1143,
                    1244,
                    1149,
                    1150,
                    641,
                    643,
                    1156,
                    647,
                    1162,
                    1164,
                    1249,
                    142,
                    1170,
                    1172,
                    664,
                    665,
                    668,
                    159,
                    160,
                    161,
                    675,
                    1191,
                    169,
                    170,
                    172,
                    1197,
                    1198,
                    1200,
                    178,
                    1203,
                    180,
                    181,
                    183,
                    696,
                    1212,
                    189,
                    1214,
                    708,
                    202,
                    203,
                    204,
                    717,
                    206,
                    718,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    1241,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    735,
                    738,
                    233,
                    746,
                    1250,
                    1257,
                    1258,
                    1261,
                    239,
                    751,
                    1266,
                    755,
                    244,
                    1267,
                    247,
                    248,
                    759,
                    760,
                    251,
                    252,
                    253,
                    761,
                    764,
                    1276,
                    1278,
                    1280,
                    260,
                    261,
                    772,
                    1287,
                    780,
                    781,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    280,
                    284,
                    285,
                    287,
                    800,
                    291,
                    808,
                    300,
                    812,
                    302,
                    816,
                    313,
                    315,
                    319,
                    833,
                    322,
                    834,
                    839,
                    841,
                    335,
                    336,
                    337,
                    338,
                    339,
                    847,
                    853,
                    342,
                    345,
                    347,
                    862,
                    351,
                    352,
                    863,
                    864,
                    356,
                    868,
                    869,
                    870,
                    360,
                    361,
                    871,
                    363,
                    875,
                    369,
                    370,
                    371,
                    372,
                    882,
                    374,
                    889,
                    378,
                    381,
                    387,
                    392,
                    395,
                    909,
                    910,
                    399,
                    400,
                    912,
                    403,
                    409,
                    413,
                    414,
                    417,
                    420,
                    426,
                    430,
                    948,
                    445,
                    961,
                    452,
                    453,
                    964,
                    976,
                    981,
                    986,
                    475,
                    476,
                    492,
                    1006,
                    507,
                    511
                ],
                "request_args": [
                    108
                ],
                "functools.wraps": [
                    100
                ],
                "functools": [
                    586,
                    100
                ],
                "rpc_func": [
                    110
                ],
                "_rpc_method": [
                    113
                ],
                "Config": [
                    116
                ],
                "retry_delay": [
                    119
                ],
                "parameter.FloatParameter": [
                    120,
                    121,
                    119
                ],
                "parameter": [
                    128,
                    130,
                    132,
                    134,
                    135,
                    137,
                    139,
                    119,
                    120,
                    121,
                    122,
                    126
                ],
                "remove_delay": [
                    120
                ],
                "worker_disconnect_delay": [
                    121
                ],
                "state_path": [
                    122,
                    335
                ],
                "parameter.Parameter": [
                    122
                ],
                "disable_window": [
                    126
                ],
                "parameter.IntParameter": [
                    128,
                    130,
                    132,
                    134,
                    135,
                    126
                ],
                "retry_count": [
                    128
                ],
                "disable_hard_timeout": [
                    130
                ],
                "disable_persist": [
                    132
                ],
                "max_shown_tasks": [
                    134
                ],
                "max_graph_nodes": [
                    135
                ],
                "record_task_history": [
                    137
                ],
                "parameter.BoolParameter": [
                    137,
                    139
                ],
                "prune_on_get_work": [
                    139
                ],
                "self.retry_count": [
                    142
                ],
                "self.disable_hard_timeout": [
                    142
                ],
                "self.disable_window": [
                    142
                ],
                "self.window": [
                    178,
                    159
                ],
                "window": [
                    159
                ],
                "self.failures": [
                    160,
                    224,
                    172,
                    251,
                    180,
                    181,
                    244,
                    183,
                    248,
                    247,
                    252,
                    189
                ],
                "collections.deque": [
                    160,
                    1064
                ],
                "self.first_failure_time": [
                    161,
                    170,
                    169
                ],
                "failure_time": [
                    170,
                    172,
                    167
                ],
                "time.time": [
                    514,
                    272,
                    274,
                    285,
                    287,
                    291,
                    167,
                    178,
                    963,
                    460,
                    210,
                    478,
                    481,
                    483,
                    870,
                    493,
                    502,
                    248,
                    506,
                    510
                ],
                "time": [
                    514,
                    272,
                    274,
                    285,
                    287,
                    291,
                    167,
                    178,
                    963,
                    460,
                    210,
                    478,
                    481,
                    483,
                    870,
                    493,
                    502,
                    248,
                    506,
                    510
                ],
                "self.failures.append": [
                    172
                ],
                "min_time": [
                    178,
                    180
                ],
                "self.failures.popleft": [
                    181
                ],
                "self.failures.clear": [
                    189
                ],
                "x": [
                    193,
                    194
                ],
                "default": [
                    417,
                    196
                ],
                "self.id": [
                    322,
                    202,
                    270,
                    251,
                    253
                ],
                "task_id": [
                    1152,
                    1038,
                    1039,
                    1041,
                    669,
                    413,
                    417,
                    675,
                    420,
                    1066,
                    1068,
                    1070,
                    1074,
                    1076,
                    1077,
                    1084,
                    1091,
                    1097,
                    202,
                    1098,
                    979,
                    980,
                    981,
                    982,
                    1107,
                    1109,
                    1241,
                    1114,
                    1244,
                    1121,
                    1249,
                    1250,
                    1251,
                    1253,
                    1257,
                    1258,
                    1006,
                    1266,
                    1267,
                    1268,
                    1270,
                    1148,
                    1149,
                    1150
                ],
                "self.stakeholders": [
                    203
                ],
                "self.workers": [
                    204
                ],
                "deps": [
                    1088,
                    1025,
                    1090,
                    1091,
                    1092,
                    205,
                    208,
                    721,
                    720,
                    669
                ],
                "self.deps": [
                    208,
                    206
                ],
                "self.status": [
                    209
                ],
                "status": [
                    711,
                    744,
                    713,
                    1001,
                    395,
                    396,
                    717,
                    718,
                    1002,
                    1274,
                    209,
                    690,
                    1139,
                    377,
                    378,
                    1275,
                    1277,
                    1279
                ],
                "self.time": [
                    210,
                    211
                ],
                "self.updated": [
                    211
                ],
                "self.retry": [
                    212
                ],
                "self.remove": [
                    213
                ],
                "self.worker_running": [
                    214
                ],
                "self.time_running": [
                    215
                ],
                "self.expl": [
                    216
                ],
                "self.priority": [
                    217
                ],
                "priority": [
                    217,
                    738,
                    670,
                    735
                ],
                "self.resources": [
                    218,
                    1197
                ],
                "_get_default": [
                    218,
                    221,
                    686
                ],
                "resources": [
                    1192,
                    585,
                    1204,
                    726,
                    727,
                    1208,
                    761,
                    218,
                    669
                ],
                "self.family": [
                    219,
                    261
                ],
                "family": [
                    1083,
                    682,
                    400,
                    403,
                    1075,
                    219,
                    670
                ],
                "self.module": [
                    220
                ],
                "module": [
                    684,
                    220,
                    670
                ],
                "self.params": [
                    260,
                    221
                ],
                "params": [
                    898,
                    899,
                    686,
                    1076,
                    1082,
                    221,
                    670
                ],
                "self.retry_policy": [
                    224,
                    248,
                    251,
                    252,
                    253,
                    223
                ],
                "retry_policy": [
                    665,
                    742,
                    223
                ],
                "Failures": [
                    224
                ],
                "self.retry_policy.disable_window": [
                    224
                ],
                "self.tracking_url": [
                    225
                ],
                "tracking_url": [
                    225,
                    697,
                    693,
                    694
                ],
                "self.status_message": [
                    226
                ],
                "status_message": [
                    226,
                    1259,
                    1262
                ],
                "self.scheduler_disable_time": [
                    227
                ],
                "self.runnable": [
                    228
                ],
                "self.batchable": [
                    229,
                    239
                ],
                "self.batch_id": [
                    230
                ],
                "self.failures.add_failure": [
                    244
                ],
                "self.failures.first_failure_time": [
                    248,
                    247
                ],
                "self.retry_policy.disable_hard_timeout": [
                    248
                ],
                "logger.debug": [
                    1070,
                    500,
                    251,
                    253,
                    606
                ],
                "self.failures.num_failures": [
                    251,
                    252
                ],
                "self.retry_policy.retry_count": [
                    251,
                    252,
                    253
                ],
                "param_str": [
                    260,
                    261
                ],
                "join": [
                    945,
                    260
                ],
                "key": [
                    260
                ],
                "value": [
                    920,
                    897,
                    260
                ],
                "self.params.items": [
                    260
                ],
                "worker_id": [
                    270,
                    399,
                    400,
                    913,
                    403,
                    663,
                    664,
                    541,
                    927,
                    809,
                    813,
                    432,
                    691,
                    948,
                    962,
                    837,
                    839,
                    841,
                    975,
                    848,
                    976,
                    853,
                    730,
                    862,
                    736,
                    738,
                    745,
                    746,
                    878,
                    628
                ],
                "self.reference": [
                    284,
                    271
                ],
                "self.last_active": [
                    272,
                    291,
                    285
                ],
                "last_active": [
                    272
                ],
                "self.last_get_work": [
                    273,
                    287
                ],
                "self.started": [
                    274
                ],
                "self.tasks": [
                    275,
                    300,
                    302
                ],
                "self.info": [
                    280,
                    276,
                    319
                ],
                "self.disabled": [
                    277
                ],
                "self.info.update": [
                    280
                ],
                "info": [
                    280,
                    751
                ],
                "worker_reference": [
                    283,
                    284,
                    629
                ],
                "get_work": [
                    629,
                    286
                ],
                "config.worker_disconnect_delay": [
                    291
                ],
                "config": [
                    481,
                    291,
                    453,
                    425,
                    426,
                    490,
                    492,
                    493,
                    575,
                    436,
                    468,
                    469,
                    501,
                    502,
                    506,
                    507,
                    510,
                    511
                ],
                "state.num_pending_tasks": [
                    300
                ],
                "state": [
                    300,
                    364,
                    304,
                    369,
                    347,
                    345,
                    346,
                    315
                ],
                "six.moves.filter": [
                    301
                ],
                "six.moves": [
                    301
                ],
                "six": [
                    773,
                    934,
                    392,
                    765,
                    906,
                    395,
                    301,
                    525,
                    783,
                    1197,
                    1202,
                    371,
                    378,
                    381,
                    1214
                ],
                "task.status": [
                    904,
                    1040,
                    1171,
                    1173,
                    1022,
                    797,
                    414,
                    677,
                    301,
                    1201,
                    693,
                    438,
                    443,
                    451,
                    711,
                    457,
                    713,
                    1235,
                    474,
                    475,
                    1242,
                    477,
                    487,
                    1260,
                    879,
                    497,
                    1009,
                    372,
                    1140,
                    888,
                    505,
                    510
                ],
                "task": [
                    1025,
                    514,
                    1018,
                    1019,
                    520,
                    521,
                    522,
                    1033,
                    1020,
                    1034,
                    1039,
                    1040,
                    1022,
                    1023,
                    550,
                    552,
                    553,
                    1068,
                    1069,
                    1088,
                    1117,
                    1118,
                    1119,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    1139,
                    1140,
                    1141,
                    1142,
                    639,
                    640,
                    1170,
                    1171,
                    1172,
                    1173,
                    1174,
                    1176,
                    1177,
                    675,
                    677,
                    681,
                    682,
                    683,
                    684,
                    685,
                    686,
                    1200,
                    689,
                    690,
                    691,
                    1201,
                    693,
                    694,
                    695,
                    696,
                    1202,
                    1203,
                    700,
                    702,
                    703,
                    706,
                    707,
                    708,
                    711,
                    713,
                    717,
                    718,
                    1232,
                    721,
                    1233,
                    1234,
                    724,
                    1235,
                    727,
                    1241,
                    730,
                    1242,
                    1243,
                    734,
                    738,
                    1250,
                    1251,
                    742,
                    745,
                    746,
                    747,
                    1258,
                    1259,
                    1260,
                    1261,
                    1267,
                    1268,
                    1276,
                    1278,
                    1280,
                    781,
                    782,
                    783,
                    794,
                    797,
                    799,
                    807,
                    808,
                    809,
                    812,
                    301,
                    813,
                    815,
                    816,
                    315,
                    847,
                    848,
                    849,
                    877,
                    878,
                    879,
                    882,
                    371,
                    372,
                    883,
                    888,
                    889,
                    378,
                    379,
                    892,
                    381,
                    382,
                    895,
                    896,
                    897,
                    387,
                    388,
                    899,
                    900,
                    904,
                    905,
                    906,
                    909,
                    910,
                    911,
                    913,
                    914,
                    917,
                    920,
                    923,
                    413,
                    414,
                    415,
                    927,
                    934,
                    423,
                    424,
                    426,
                    427,
                    430,
                    431,
                    432,
                    945,
                    947,
                    948,
                    438,
                    441,
                    443,
                    445,
                    958,
                    448,
                    1015,
                    451,
                    452,
                    455,
                    457,
                    458,
                    459,
                    460,
                    463,
                    466,
                    467,
                    472,
                    1016,
                    474,
                    475,
                    476,
                    477,
                    478,
                    481,
                    483,
                    487,
                    489,
                    491,
                    492,
                    493,
                    1006,
                    1008,
                    497,
                    1009,
                    1010,
                    1011,
                    501,
                    502,
                    1012,
                    1013,
                    505,
                    506,
                    507,
                    1014,
                    1017,
                    510,
                    511
                ],
                "state.get_pending_tasks": [
                    304
                ],
                "self.assistant": [
                    313
                ],
                "task.resources": [
                    934,
                    906,
                    909,
                    782,
                    783,
                    910,
                    1201,
                    1202,
                    727,
                    1018,
                    315
                ],
                "self.get_pending_tasks": [
                    315
                ],
                "self.info.get": [
                    319
                ],
                "self._state_path": [
                    356,
                    360,
                    361,
                    363,
                    335,
                    374,
                    351
                ],
                "self._tasks": [
                    417,
                    420,
                    521,
                    336,
                    371,
                    342,
                    345,
                    381,
                    413
                ],
                "self._status_tasks": [
                    392,
                    522,
                    395,
                    337,
                    370,
                    372,
                    409,
                    378,
                    475,
                    476,
                    414
                ],
                "collections.defaultdict": [
                    865,
                    779,
                    1167,
                    1168,
                    337,
                    370,
                    1169,
                    1199,
                    1231,
                    859,
                    1116,
                    1213
                ],
                "self._active_workers": [
                    546,
                    525,
                    338,
                    342,
                    345,
                    538,
                    541
                ],
                "self._task_batchers": [
                    399,
                    400,
                    339,
                    403,
                    342,
                    347
                ],
                "fobj": [
                    352,
                    363,
                    364,
                    351
                ],
                "pickle.dump": [
                    352
                ],
                "pickle": [
                    352,
                    364
                ],
                "self.get_state": [
                    352
                ],
                "logger.warning": [
                    354,
                    1282
                ],
                "logger.info": [
                    356,
                    488,
                    361,
                    619,
                    597,
                    374,
                    600
                ],
                "os.path.exists": [
                    360
                ],
                "os.path": [
                    360
                ],
                "os": [
                    360
                ],
                "pickle.load": [
                    364
                ],
                "logger.exception": [
                    366
                ],
                "self.set_state": [
                    369
                ],
                "six.itervalues": [
                    392,
                    395,
                    525,
                    371,
                    378,
                    381
                ],
                "task.id": [
                    1034,
                    1172,
                    414,
                    945,
                    1203,
                    958,
                    463,
                    848,
                    1233,
                    1234,
                    467,
                    1235,
                    475,
                    476,
                    1119,
                    489,
                    619,
                    620,
                    883,
                    372,
                    501,
                    1140,
                    1141,
                    1142,
                    889
                ],
                "batch_id": [
                    385,
                    388,
                    431,
                    688,
                    689,
                    946,
                    948,
                    957
                ],
                "self.get_active_tasks": [
                    387,
                    550
                ],
                "BATCH_RUNNING": [
                    387,
                    711,
                    812,
                    430,
                    438
                ],
                "task.batch_id": [
                    451,
                    452,
                    388,
                    707,
                    455,
                    708,
                    807,
                    1260,
                    813,
                    1261,
                    431,
                    689,
                    695,
                    696,
                    441
                ],
                "itertools.chain.from_iterable": [
                    395
                ],
                "itertools.chain": [
                    395,
                    927
                ],
                "itertools": [
                    395,
                    927
                ],
                "self._task_batchers.setdefault": [
                    399
                ],
                "batcher_args": [
                    400
                ],
                "max_batch_size": [
                    896,
                    647,
                    843,
                    400,
                    912
                ],
                "get": [
                    403
                ],
                "self._task_batchers.get": [
                    403
                ],
                "setdefault": [
                    412,
                    413
                ],
                "self._tasks.setdefault": [
                    413
                ],
                "self._tasks.get": [
                    417
                ],
                "task.scheduler_disable_time": [
                    448,
                    423,
                    1242,
                    460,
                    472,
                    505,
                    506,
                    1023
                ],
                "task.failures.clear": [
                    424,
                    427
                ],
                "task.failures": [
                    424,
                    427
                ],
                "self.set_status": [
                    453,
                    426,
                    492,
                    430,
                    511
                ],
                "task.worker_running": [
                    487,
                    904,
                    489,
                    809,
                    491,
                    905,
                    813,
                    432,
                    848,
                    690,
                    691,
                    882,
                    1011,
                    1171,
                    1172
                ],
                "new_status": [
                    448,
                    480,
                    453,
                    457,
                    461,
                    435,
                    438,
                    471,
                    474,
                    476,
                    444,
                    477
                ],
                "remove_on_failure": [
                    441,
                    482
                ],
                "task.batchable": [
                    441,
                    700
                ],
                "DONE": [
                    801,
                    444,
                    1040,
                    1274,
                    1275,
                    988
                ],
                "self.re_enable": [
                    507,
                    445
                ],
                "batch_task": [
                    452,
                    453,
                    454,
                    708,
                    709,
                    1261,
                    1262,
                    696,
                    697
                ],
                "self.get_batch_running_tasks": [
                    452
                ],
                "batch_task.batch_id": [
                    454
                ],
                "task.add_failure": [
                    458
                ],
                "task.has_excessive_failures": [
                    459
                ],
                "notifications.send_error_email": [
                    462
                ],
                "notifications": [
                    462
                ],
                "task.retry_policy.retry_count": [
                    466
                ],
                "task.retry_policy": [
                    466,
                    742
                ],
                "config.disable_window": [
                    468
                ],
                "config.disable_persist": [
                    506,
                    469
                ],
                "pop": [
                    522,
                    475
                ],
                "task.updated": [
                    478
                ],
                "task.retry": [
                    481,
                    493,
                    510
                ],
                "config.retry_delay": [
                    481,
                    490,
                    493,
                    510
                ],
                "task.remove": [
                    514,
                    483,
                    497,
                    502,
                    702,
                    703
                ],
                "task.stakeholders": [
                    552,
                    497,
                    730,
                    487
                ],
                "assistants": [
                    487
                ],
                "config.remove_delay": [
                    501,
                    502
                ],
                "delete_tasks": [
                    520
                ],
                "task_obj": [
                    521,
                    522
                ],
                "self._tasks.pop": [
                    521
                ],
                "task_obj.status": [
                    522
                ],
                "worker": [
                    643,
                    647,
                    1159,
                    1160,
                    1161,
                    1162,
                    1163,
                    525,
                    526,
                    1164,
                    528,
                    1165,
                    532,
                    662,
                    663,
                    1174,
                    1175,
                    1178,
                    1179,
                    1180,
                    1181,
                    1182,
                    1183,
                    545,
                    546,
                    557,
                    558,
                    836,
                    837,
                    604,
                    605,
                    606,
                    607,
                    862,
                    863,
                    864,
                    872,
                    873,
                    751,
                    755,
                    628,
                    629,
                    630,
                    1148
                ],
                "last_active_lt": [
                    526,
                    535
                ],
                "worker.last_active": [
                    1160,
                    526
                ],
                "last_get_work": [
                    528,
                    530
                ],
                "last_get_work_gt": [
                    529,
                    530
                ],
                "w.assistant": [
                    535
                ],
                "w": [
                    612,
                    535
                ],
                "self.get_active_workers": [
                    535
                ],
                "self._active_workers.keys": [
                    538
                ],
                "self._active_workers.setdefault": [
                    541
                ],
                "Worker": [
                    541
                ],
                "delete_workers": [
                    545,
                    547
                ],
                "self._active_workers.pop": [
                    546
                ],
                "self._remove_workers_from_tasks": [
                    547,
                    556
                ],
                "remove_stakeholders": [
                    551
                ],
                "task.stakeholders.difference_update": [
                    552
                ],
                "workers": [
                    928,
                    1184,
                    1157,
                    552,
                    553,
                    556,
                    557,
                    1165,
                    1178,
                    927
                ],
                "task.workers.difference_update": [
                    553
                ],
                "task.workers": [
                    553,
                    745,
                    878,
                    1010,
                    1174,
                    1176,
                    1177,
                    892,
                    927
                ],
                "disabled": [
                    558
                ],
                "self.get_worker": [
                    558
                ],
                "self._config": [
                    576,
                    833,
                    961,
                    580,
                    870,
                    616,
                    617,
                    586,
                    1099,
                    718,
                    1143,
                    1243,
                    764,
                    605,
                    606,
                    575
                ],
                "scheduler": [
                    575
                ],
                "self._state": [
                    641,
                    647,
                    1033,
                    1164,
                    781,
                    1039,
                    912,
                    1170,
                    1250,
                    800,
                    675,
                    808,
                    812,
                    1068,
                    816,
                    1200,
                    948,
                    696,
                    576,
                    961,
                    708,
                    590,
                    718,
                    847,
                    593,
                    1232,
                    1107,
                    981,
                    1241,
                    986,
                    1114,
                    604,
                    1117,
                    862,
                    735,
                    863,
                    609,
                    864,
                    1243,
                    612,
                    868,
                    1249,
                    615,
                    616,
                    617,
                    618,
                    746,
                    871,
                    1257,
                    622,
                    751,
                    1006,
                    1258,
                    882,
                    755,
                    628,
                    1139,
                    1261,
                    1266,
                    1267,
                    1149,
                    1150
                ],
                "SimpleTaskState": [
                    576
                ],
                "self._config.state_path": [
                    576
                ],
                "task_history_impl": [
                    578,
                    579
                ],
                "self._task_history": [
                    1280,
                    579,
                    582,
                    1287,
                    584,
                    1276,
                    1278
                ],
                "self._config.record_task_history": [
                    580
                ],
                "db_task_history.DbTaskHistory": [
                    582
                ],
                "db_task_history": [
                    582
                ],
                "history.NopHistory": [
                    584
                ],
                "history": [
                    584
                ],
                "self._resources": [
                    772,
                    585,
                    780,
                    1198,
                    759,
                    760,
                    761,
                    1214
                ],
                "getintdict": [
                    585
                ],
                "configuration.get_config": [
                    585
                ],
                "configuration": [
                    585
                ],
                "self._make_task": [
                    586,
                    668,
                    735
                ],
                "functools.partial": [
                    586
                ],
                "Task": [
                    586
                ],
                "self._config._get_retry_policy": [
                    586,
                    764
                ],
                "self._worker_requests": [
                    587
                ],
                "self._state.load": [
                    590
                ],
                "self._state.dump": [
                    593
                ],
                "self._prune_workers": [
                    598
                ],
                "self._prune_tasks": [
                    599
                ],
                "rpc_method": [
                    1154,
                    1028,
                    645,
                    649,
                    1186,
                    818,
                    1222,
                    973,
                    1104,
                    595,
                    1238,
                    1111,
                    1247,
                    1123,
                    1255,
                    749,
                    1264,
                    753,
                    757
                ],
                "remove_workers": [
                    609,
                    603,
                    607
                ],
                "self._state.get_active_workers": [
                    1164,
                    604,
                    871
                ],
                "worker.prune": [
                    605
                ],
                "self._config.worker_disconnect_delay": [
                    870,
                    606
                ],
                "remove_workers.append": [
                    607
                ],
                "worker.id": [
                    872,
                    1159,
                    607
                ],
                "self._state.inactivate_workers": [
                    609
                ],
                "assistant_ids": [
                    616,
                    612
                ],
                "w.id": [
                    612
                ],
                "self._state.get_assistants": [
                    612
                ],
                "remove_tasks": [
                    620,
                    613,
                    622
                ],
                "self._state.get_active_tasks": [
                    615,
                    1033,
                    812,
                    781,
                    1232,
                    1139,
                    1117
                ],
                "self._state.fail_dead_worker_task": [
                    616
                ],
                "self._state.update_status": [
                    617
                ],
                "self._state.may_prune": [
                    618
                ],
                "remove_tasks.append": [
                    620
                ],
                "self._state.inactivate_tasks": [
                    622
                ],
                "self._state.get_worker": [
                    746,
                    751,
                    882,
                    628,
                    862
                ],
                "worker.update": [
                    629
                ],
                "task.priority": [
                    1017,
                    794,
                    639
                ],
                "prio": [
                    642,
                    643,
                    639
                ],
                "dep": [
                    640,
                    641,
                    799,
                    800,
                    1092,
                    1093,
                    1094,
                    1095,
                    986,
                    987,
                    988,
                    1118,
                    991,
                    992,
                    735,
                    734,
                    995,
                    1119,
                    997,
                    1000
                ],
                "task.deps": [
                    640,
                    1025,
                    721,
                    724,
                    1118,
                    734,
                    799
                ],
                "t": [
                    736,
                    641,
                    642,
                    643,
                    1060,
                    1121,
                    1138,
                    735
                ],
                "self._state.get_task": [
                    800,
                    641,
                    1250,
                    675,
                    1258,
                    1068,
                    1006,
                    1039,
                    1267,
                    1241,
                    986,
                    1150,
                    735
                ],
                "t.priority": [
                    642
                ],
                "self._update_priority": [
                    738,
                    643
                ],
                "self._state.set_batcher": [
                    647
                ],
                "task_family": [
                    647
                ],
                "batched_args": [
                    647
                ],
                "worker_enabled": [
                    677,
                    744,
                    664,
                    729,
                    667
                ],
                "self.update": [
                    664,
                    976,
                    839
                ],
                "self._generate_retry_policy": [
                    665
                ],
                "retry_policy_dict": [
                    665,
                    764,
                    765,
                    766
                ],
                "_default_task": [
                    673,
                    675,
                    668
                ],
                "task.family": [
                    681,
                    682,
                    1069,
                    913,
                    1016,
                    895
                ],
                "task.module": [
                    684
                ],
                "task.params": [
                    897,
                    899,
                    685,
                    686,
                    917,
                    1015,
                    920
                ],
                "task.tracking_url": [
                    694
                ],
                "self._state.get_batch_running_tasks": [
                    696,
                    708,
                    1261
                ],
                "batch_task.tracking_url": [
                    697
                ],
                "batchable": [
                    699,
                    700
                ],
                "expl": [
                    705,
                    706,
                    709
                ],
                "task.expl": [
                    706,
                    1251
                ],
                "batch_task.expl": [
                    709
                ],
                "new_deps": [
                    723,
                    724,
                    711
                ],
                "self._update_task_history": [
                    964,
                    717
                ],
                "self._state.set_status": [
                    816,
                    961,
                    718
                ],
                "SUSPENDED": [
                    718
                ],
                "task.deps.update": [
                    724
                ],
                "assistant": [
                    840,
                    841,
                    878,
                    729,
                    892,
                    927
                ],
                "task.stakeholders.add": [
                    730
                ],
                "UNKNOWN": [
                    1081,
                    1075,
                    1079,
                    735
                ],
                "t.stakeholders.add": [
                    736
                ],
                "t.stakeholders": [
                    736
                ],
                "runnable": [
                    744,
                    747
                ],
                "task.workers.add": [
                    745
                ],
                "tasks.add": [
                    746
                ],
                "tasks": [
                    746,
                    875,
                    874,
                    877,
                    1205,
                    1206,
                    1207,
                    1179,
                    1180,
                    1183
                ],
                "task.runnable": [
                    747
                ],
                "add_info": [
                    751
                ],
                "self._state.disable_workers": [
                    755
                ],
                "self._resources.update": [
                    761
                ],
                "_asdict": [
                    764
                ],
                "retry_policy_dict.update": [
                    765
                ],
                "k": [
                    765
                ],
                "v": [
                    765
                ],
                "six.iteritems": [
                    773,
                    934,
                    906,
                    1197,
                    783,
                    1202,
                    765,
                    1214
                ],
                "task_retry_policy_dict": [
                    765
                ],
                "needed_resources": [
                    769,
                    773
                ],
                "available_resources": [
                    772,
                    774
                ],
                "resource": [
                    773,
                    774,
                    906,
                    907,
                    783,
                    784,
                    934,
                    935,
                    1194,
                    1197,
                    1202,
                    1203,
                    1204,
                    1205,
                    1206,
                    1207,
                    1214,
                    1215,
                    1216,
                    1217,
                    1219
                ],
                "amount": [
                    773,
                    774,
                    934,
                    935,
                    906,
                    907,
                    783,
                    784,
                    1202
                ],
                "used_resources": [
                    1216,
                    865,
                    1217,
                    869,
                    774,
                    779,
                    910,
                    784,
                    785,
                    1212
                ],
                "available_resources.get": [
                    774
                ],
                "task.time": [
                    794,
                    1013,
                    1014
                ],
                "dep_task": [
                    800,
                    801
                ],
                "dep_task.status": [
                    801
                ],
                "running_batch_ids": [
                    813,
                    806
                ],
                "self._state.get_running_tasks": [
                    808,
                    1200,
                    847
                ],
                "orphaned_tasks": [
                    811,
                    815
                ],
                "self._config.prune_on_get_work": [
                    833
                ],
                "self.prune": [
                    834,
                    1156,
                    1030,
                    1191,
                    1128,
                    1230,
                    1106,
                    1113
                ],
                "host": [
                    1280,
                    964,
                    839
                ],
                "self.add_worker": [
                    841
                ],
                "batched_params": [
                    898,
                    843,
                    916,
                    951,
                    921,
                    925,
                    895
                ],
                "unbatched_params": [
                    897,
                    843,
                    925,
                    919
                ],
                "batched_tasks": [
                    896,
                    900,
                    843,
                    944,
                    945,
                    947,
                    923,
                    958
                ],
                "best_task": [
                    960,
                    961,
                    962,
                    963,
                    964,
                    901,
                    966,
                    967,
                    968,
                    969,
                    844,
                    911,
                    849,
                    950,
                    954,
                    955,
                    895
                ],
                "current_tasks": [
                    851,
                    845,
                    846
                ],
                "ct_set": [
                    848,
                    846
                ],
                "self._rank": [
                    875,
                    847
                ],
                "self._reset_orphaned_batch_running_tasks": [
                    853
                ],
                "locally_pending_tasks": [
                    891,
                    939,
                    855
                ],
                "running_tasks": [
                    856,
                    940,
                    886
                ],
                "upstream_table": [
                    857,
                    889
                ],
                "greedy_resources": [
                    859,
                    907,
                    909,
                    935
                ],
                "n_unique_pending": [
                    860,
                    893,
                    942
                ],
                "worker.is_trivial_worker": [
                    863
                ],
                "relevant_tasks": [
                    864,
                    874,
                    868
                ],
                "worker.get_pending_tasks": [
                    864
                ],
                "greedy_workers": [
                    929,
                    866,
                    931,
                    872,
                    905,
                    904
                ],
                "self._state.get_pending_tasks": [
                    1170,
                    868
                ],
                "self._used_resources": [
                    1212,
                    869
                ],
                "activity_limit": [
                    870,
                    871
                ],
                "active_workers": [
                    873,
                    871
                ],
                "worker.info.get": [
                    872,
                    1148
                ],
                "worker.info": [
                    872,
                    1163,
                    1148
                ],
                "tasks.sort": [
                    875
                ],
                "in_workers": [
                    888,
                    910,
                    878,
                    879
                ],
                "other_worker": [
                    882,
                    883,
                    884,
                    885
                ],
                "more_info": [
                    883,
                    885,
                    886
                ],
                "more_info.update": [
                    885
                ],
                "other_worker.info": [
                    885
                ],
                "running_tasks.append": [
                    886
                ],
                "upstream_status": [
                    889,
                    890,
                    1140
                ],
                "self._upstream_status": [
                    889,
                    1140
                ],
                "best_task.family": [
                    954,
                    967,
                    895
                ],
                "task.is_batchable": [
                    896,
                    914
                ],
                "task.params.get": [
                    897,
                    899
                ],
                "name": [
                    897,
                    898,
                    899,
                    917,
                    920,
                    921
                ],
                "unbatched_params.items": [
                    897
                ],
                "batched_params.items": [
                    898
                ],
                "params.append": [
                    899
                ],
                "batched_tasks.append": [
                    923,
                    900
                ],
                "self._schedulable": [
                    909
                ],
                "self._has_resources": [
                    909,
                    910
                ],
                "batch_param_names": [
                    912,
                    914,
                    917
                ],
                "self._state.get_batcher": [
                    912
                ],
                "task.params.items": [
                    920
                ],
                "task_worker": [
                    928,
                    929,
                    931
                ],
                "greedy_workers.get": [
                    929
                ],
                "reply": [
                    966,
                    967,
                    968,
                    969,
                    939,
                    971,
                    953,
                    954,
                    955,
                    956,
                    957,
                    958
                ],
                "batch_string": [
                    945,
                    946
                ],
                "hexdigest": [
                    946
                ],
                "hashlib.md5": [
                    946
                ],
                "hashlib": [
                    946
                ],
                "batch_string.encode": [
                    946
                ],
                "self._state.set_batch_running": [
                    948
                ],
                "combined_params": [
                    956,
                    950,
                    951
                ],
                "best_task.params.copy": [
                    950
                ],
                "best_task.params": [
                    969,
                    950
                ],
                "combined_params.update": [
                    951
                ],
                "best_task.worker_running": [
                    962
                ],
                "best_task.time_running": [
                    963
                ],
                "best_task.id": [
                    966
                ],
                "upstream_status_table": [
                    993,
                    996,
                    997,
                    1000,
                    1002,
                    1003,
                    1130,
                    979,
                    980,
                    1140,
                    990
                ],
                "self._state.has_task": [
                    1249,
                    1257,
                    1266,
                    1107,
                    981,
                    1114,
                    1149
                ],
                "task_stack": [
                    984,
                    985,
                    982,
                    992
                ],
                "dep_id": [
                    992,
                    993,
                    996,
                    997,
                    1002,
                    1003,
                    985,
                    986,
                    990
                ],
                "task_stack.pop": [
                    985
                ],
                "dep.status": [
                    995,
                    988,
                    991
                ],
                "dep.deps": [
                    992,
                    1000,
                    997,
                    991
                ],
                "dep_status": [
                    995,
                    996
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    995
                ],
                "upstream_severities": [
                    1000,
                    1001
                ],
                "upstream_status_table.get": [
                    1000
                ],
                "a_task_id": [
                    1000
                ],
                "ret": [
                    1025,
                    1026,
                    1215,
                    1217,
                    1219,
                    1220,
                    1007,
                    1213,
                    1023
                ],
                "task.pretty_id": [
                    1008,
                    1251
                ],
                "include_deps": [
                    1024
                ],
                "serialized": [
                    1091,
                    1063,
                    1031,
                    1034,
                    1035,
                    1098,
                    1099,
                    1102,
                    1234,
                    1235,
                    1077,
                    1141,
                    1142,
                    1240,
                    1244,
                    1245
                ],
                "seen": [
                    1093,
                    1062,
                    1094,
                    1032,
                    1034,
                    1053,
                    1054,
                    1055
                ],
                "serialized.update": [
                    1034
                ],
                "self._traverse_graph": [
                    1120,
                    1034,
                    1109
                ],
                "task_ids": [
                    1038
                ],
                "root_task_id": [
                    1064,
                    1097,
                    1062,
                    1055
                ],
                "dep_func": [
                    1088,
                    1058
                ],
                "t.deps": [
                    1060
                ],
                "seen.add": [
                    1094,
                    1062
                ],
                "queue": [
                    1064,
                    1065,
                    1066,
                    1095
                ],
                "queue.popleft": [
                    1066
                ],
                "family_match": [
                    1074,
                    1075
                ],
                "TASK_FAMILY_RE.match": [
                    1074
                ],
                "family_match.group": [
                    1075
                ],
                "include_done": [
                    1089,
                    1109,
                    1121
                ],
                "self._filter_done": [
                    1090
                ],
                "self._serialize_task": [
                    1091,
                    1234,
                    1203,
                    1172,
                    1141,
                    1244
                ],
                "queue.append": [
                    1095
                ],
                "self._config.max_graph_nodes": [
                    1099
                ],
                "inverse_graph": [
                    1121,
                    1116,
                    1119
                ],
                "add": [
                    1119
                ],
                "t.id": [
                    1121
                ],
                "result": [
                    1129,
                    1231,
                    1235,
                    1236,
                    1142,
                    1143,
                    1144,
                    1145
                ],
                "search": [
                    1131,
                    1135
                ],
                "terms": [
                    1138,
                    1135
                ],
                "search.split": [
                    1135
                ],
                "term": [
                    1138
                ],
                "t.pretty_id": [
                    1138
                ],
                "filter_func": [
                    1139
                ],
                "limit": [
                    1143
                ],
                "self._config.max_shown_tasks": [
                    1143
                ],
                "pretty_id": [
                    1150
                ],
                "self._first_task_display_name": [
                    1162
                ],
                "workers.sort": [
                    1165
                ],
                "include_running": [
                    1166
                ],
                "running": [
                    1179,
                    1172,
                    1167
                ],
                "num_pending": [
                    1168,
                    1181,
                    1175
                ],
                "num_uniques": [
                    1169,
                    1177,
                    1182
                ],
                "r_dict": [
                    1195,
                    1196,
                    1197
                ],
                "consumers": [
                    1203,
                    1205,
                    1199
                ],
                "total": [
                    1214,
                    1215
                ],
                "task.id.find": [
                    1233
                ],
                "task_str": [
                    1233
                ],
                "self._state.re_enable": [
                    1243
                ],
                "task.status_message": [
                    1259,
                    1268
                ],
                "batch_task.status_message": [
                    1262
                ],
                "successful": [
                    1275,
                    1276
                ],
                "self._task_history.task_finished": [
                    1276
                ],
                "self._task_history.task_scheduled": [
                    1278
                ],
                "self._task_history.task_started": [
                    1280
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/luigi_11/test/scheduler_api_test.py",
                "test_function": "test_batch_ignore_items_not_ready",
                "test_function_code": "    def test_batch_ignore_items_not_ready(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_2', family='A', params={'a': '2'}, deps=['NOT_DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_3', family='A', params={'a': '3'}, deps=['DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_4', family='A', params={'a': '4'}, deps=['DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_5', family='A', params={'a': '5'}, deps=['NOT_DONE'],\n            batchable=True)\n\n        self.sch.add_task(worker=WORKER, task_id='NOT_DONE', runnable=False)\n        self.sch.add_task(worker=WORKER, task_id='DONE', status=DONE)\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertIsNone(response['task_id'])\n        self.assertEqual({'a': ['1', '3', '4']}, response['task_params'])\n        self.assertEqual('A', response['task_family'])",
                "test_error": "AssertionError: {'a': ['1', '3', '4']} != {'a': ['1', '2', '3', '4', '5']} - {'a': ['1', '3', '4']} + {'a': ['1', '2', '3', '4', '5']} ?             +++++        +++++",
                "full_test_error": "self = <scheduler_api_test.SchedulerApiTest testMethod=test_batch_ignore_items_not_ready>\n\n    def test_batch_ignore_items_not_ready(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_2', family='A', params={'a': '2'}, deps=['NOT_DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_3', family='A', params={'a': '3'}, deps=['DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_4', family='A', params={'a': '4'}, deps=['DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_5', family='A', params={'a': '5'}, deps=['NOT_DONE'],\n            batchable=True)\n    \n        self.sch.add_task(worker=WORKER, task_id='NOT_DONE', runnable=False)\n        self.sch.add_task(worker=WORKER, task_id='DONE', status=DONE)\n    \n        response = self.sch.get_work(worker=WORKER)\n        self.assertIsNone(response['task_id'])\n>       self.assertEqual({'a': ['1', '3', '4']}, response['task_params'])\nE       AssertionError: {'a': ['1', '3', '4']} != {'a': ['1', '2', '3', '4', '5']}\nE       - {'a': ['1', '3', '4']}\nE       + {'a': ['1', '2', '3', '4', '5']}\nE       ?             +++++        +++++\n\ntest/scheduler_api_test.py:206: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}