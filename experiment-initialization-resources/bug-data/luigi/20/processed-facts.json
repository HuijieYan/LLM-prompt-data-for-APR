{
    "1.1.1": "def to_str_params(self):\n    \n    params_str = {}\n    params = dict(self.get_params())\n    for param_name, param_value in six.iteritems(self.param_kwargs):\n        if params[param_name].significant:\n            params_str[param_name] = params[param_name].serialize(param_value)\n\n    return params_str\n",
    "1.1.2": "Convert all parameters to a str->str hash.",
    "1.2.1": "luigi/task.py",
    "1.2.2": "from luigi import six",
    "1.3.1": "@six.add_metaclass(Register)\nclass Task(object)",
    "1.3.2": "This is the base class of all Luigi Tasks, the base unit of work in Luigi.\n\nA Luigi Task describes a unit or work.\n\nThe key methods of a Task, which must be implemented in a subclass are:\n\n* :py:meth:`run` - the computation done by this task.\n* :py:meth:`requires` - the list of Tasks that this Task depends on.\n* :py:meth:`output` - the output :py:class:`Target` that this Task creates.\n\nParameters to the Task should be declared as members of the class, e.g.::\n\n.. code-block:: python\n\n    class MyTask(luigi.Task):\n        count = luigi.IntParameter()\n\n\nEach Task exposes a constructor accepting all :py:class:`Parameter` (and\nvalues) as kwargs. e.g. ``MyTask(count=10)`` would instantiate `MyTask`.\n\nIn addition to any declared properties and methods, there are a few\nnon-declared properties, which are created by the :py:class:`Register`\nmetaclass:\n\n``Task.task_namespace``\n  optional string which is prepended to the task name for the sake of\n  scheduling. If it isn't overridden in a Task, whatever was last declared\n  using `luigi.namespace` will be used.\n\n``Task._parameters``\n  list of ``(parameter_name, parameter)`` tuples for this task class",
    "1.4.1": [
        "get_params(cls)"
    ],
    "1.4.2": [
        "get_params(cls)"
    ],
    "1.5.1": [
        "    def test_task_to_str_to_task(self):\n        params = dict(\n            param='test',\n            bool_param=True,\n            int_param=666,\n            float_param=123.456,\n            date_param=datetime(2014, 9, 13).date(),\n            datehour_param=datetime(2014, 9, 13, 9),\n            timedelta_param=timedelta(44),  # doesn't support seconds\n            list_param=['in', 'flames'],\n            insignificant_param='test')\n\n        original = DummyTask(**params)\n        other = DummyTask.from_str_params(original.to_str_params())\n        self.assertEqual(original, other)"
    ],
    "1.5.2": [
        "test/task_test.py"
    ],
    "2.1.1": [
        [
            "E           KeyError: 'insignificant_param'"
        ]
    ],
    "2.1.2": [
        [
            "self = <task_test.TaskTest testMethod=test_task_to_str_to_task>\n\n    def test_task_to_str_to_task(self):\n        params = dict(\n            param='test',\n            bool_param=True,\n            int_param=666,\n            float_param=123.456,\n            date_param=datetime(2014, 9, 13).date(),\n            datehour_param=datetime(2014, 9, 13, 9),\n            timedelta_param=timedelta(44),  # doesn't support seconds\n            list_param=['in', 'flames'],\n            insignificant_param='test')\n    \n        original = DummyTask(**params)\n>       other = DummyTask.from_str_params(original.to_str_params())\n\ntest/task_test.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'task_test.DummyTask'>\nparams_str = {'bool_param': 'True', 'date_param': '2014-09-13', 'datehour_param': '2014-09-13T09', 'float_param': '123.456', ...}\n\n    @classmethod\n    def from_str_params(cls, params_str=None):\n        \"\"\"\n        Creates an instance from a str->str hash.\n    \n        :param params_str: dict of param name -> value.\n        \"\"\"\n        if params_str is None:\n            params_str = {}\n        kwargs = {}\n        for param_name, param in cls.get_params():\n>           value = param.parse_from_input(param_name, params_str[param_name])",
            "\nluigi/task.py:297: KeyError"
        ]
    ],
    "2.2.1": [
        [
            {
                "self": {
                    "value": "DummyTask(param=test, bool_param=True, int_param=666, float_param=123.456, date_param=2014-09-13, datehour_param=2014-09-13T09, timedelta_param=44 days, 0:00:00, list_param=['in', 'flames'])",
                    "shape": null,
                    "omitted": false
                },
                "self.param_kwargs": {
                    "value": "{'param': 'test', 'bool_param': True, 'int_param': 666, 'float_param': 123.456, 'date_param': datetime.date(2014, 9, 13), 'datehour_param': datetime.datetime(2014, 9, 13, 9, 0), 'timedelta_param': datetime.timedelta(days=44), 'list_param': ('in', 'flames'), 'insignificant_param': 'test'}",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "params_str": {
                    "value": "{'param': 'test', 'bool_param': 'True', 'int_param': '666', 'float_param': '123.456', 'date_param': '2014-09-13', 'datehour_param': '2014-09-13T09', 'timedelta_param': '44 days, 0:00:00', 'list_param': ['in', 'flames']}",
                    "shape": "8",
                    "omitted": false
                },
                "params": {
                    "value": "{'param': <luigi.parameter.Parameter object at 0x7fd83a6c4280>, ... , 'insignificant_param': <luigi.parameter.Parameter object at 0x7fd83a74b400>}",
                    "shape": "9",
                    "omitted": true
                },
                "param_name": {
                    "value": "'insignificant_param'",
                    "shape": "19",
                    "omitted": false
                },
                "param_value": {
                    "value": "'test'",
                    "shape": "4",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "self": "DummyTask",
                "self.param_kwargs": "dict"
            },
            {
                "params_str": "dict",
                "params": "dict",
                "param_name": "str",
                "param_value": "str"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "self": {
                    "value": "DummyTask(param=test, bool_param=True, int_param=666, float_param=123.456, date_param=2014-09-13, datehour_param=2014-09-13T09, timedelta_param=44 days, 0:00:00, list_param=['in', 'flames'])",
                    "shape": null,
                    "omitted": false
                },
                "self.param_kwargs": {
                    "value": "{'param': 'test', 'bool_param': True, 'int_param': 666, 'float_param': 123.456, 'date_param': datetime.date(2014, 9, 13), 'datehour_param': datetime.datetime(2014, 9, 13, 9, 0), 'timedelta_param': datetime.timedelta(days=44), 'list_param': ('in', 'flames'), 'insignificant_param': 'test'}",
                    "shape": "9",
                    "omitted": false
                }
            },
            {
                "params_str": {
                    "value": "{'param': 'test', 'bool_param': 'True', 'int_param': '666', 'float_param': '123.456', 'date_param': '2014-09-13', 'datehour_param': '2014-09-13T09', 'timedelta_param': '44 days, 0:00:00', 'list_param': ['in', 'flames'], 'insignificant_param': 'test'}",
                    "shape": "9",
                    "omitted": false
                },
                "params": {
                    "value": "{'param': <luigi.parameter.Parameter object at 0x7f34698042e0>, ... , 'insignificant_param': <luigi.parameter.Parameter object at 0x7f346980fd90>}",
                    "shape": "9",
                    "omitted": true
                },
                "param_name": {
                    "value": "'insignificant_param'",
                    "shape": "19",
                    "omitted": false
                },
                "param_value": {
                    "value": "'test'",
                    "shape": "4",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "self": "DummyTask",
                "self.param_kwargs": "dict"
            },
            {
                "params_str": "dict",
                "params": "dict",
                "param_name": "str",
                "param_value": "str"
            }
        ]
    ],
    "3.1.1": [
        "Fix task_to_str_to_task behaviour when a Task has insignificant parameter\n"
    ],
    "3.1.2": [
        "Fixes issue introduced by a923a75 and adds a test case to avoid it in the future.\n\nIn a923a75, I removed insignificant parameters to be included in the output of to_str_params. It seems this was a bit careless, i.e. it causes an error when the serialised task is passed back to from_str_params.\n\nThe goal of a923a75 was to avoid passing insignificant params to scheduler and thus potentially avoid exposing it to users via UI. I guess I can come with another, less invasive way to achieve that. (possibly in another PR)\n"
    ]
}