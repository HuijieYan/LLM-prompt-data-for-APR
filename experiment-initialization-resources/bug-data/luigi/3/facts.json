{
    "1.1.1": "def parse(self, x):\n    \n    # Since the result of json.dumps(tuple) differs from a tuple string, we must handle either case.\n    # A tuple string may come from a config file or from cli execution.\n\n    # t = ((1, 2), (3, 4))\n    # t_str = '((1,2),(3,4))'\n    # t_json_str = json.dumps(t)\n    # t_json_str == '[[1, 2], [3, 4]]'\n    # json.loads(t_json_str) == t\n    # json.loads(t_str) == ValueError: No JSON object could be decoded\n\n    # Therefore, if json.loads(x) returns a ValueError, try ast.literal_eval(x).\n    # ast.literal_eval(t_str) == t\n    try:\n        # loop required to parse tuple of tuples\n        return tuple(tuple(x) for x in json.loads(x, object_pairs_hook=_FrozenOrderedDict))\n    except ValueError:\n        return literal_eval(x)  # if this causes an error, let that error be raised.\n",
    "1.1.2": "Parse an individual value from the input.\n\n:param str x: the value to parse.\n:return: the parsed value.",
    "1.2.1": "class TupleParameter(ListParameter)",
    "1.2.2": "Parameter whose value is a ``tuple`` or ``tuple`` of tuples.\n\nIn the task definition, use\n\n.. code-block:: python\n\n    class MyTask(luigi.Task):\n      book_locations = luigi.TupleParameter()\n\n        def run(self):\n            for location in self.book_locations:\n                print(\"Go to page %d, line %d\" % (location[0], location[1]))\n\n\nAt the command line, use\n\n.. code-block:: console\n\n    $ luigi --module my_tasks MyTask --book_locations <JSON string>\n\nSimple example with two grades:\n\n.. code-block:: console\n\n    $ luigi --module my_tasks MyTask --book_locations '((12,3),(4,15),(52,1))'",
    "1.2.3": null,
    "1.3.1": "luigi/parameter.py",
    "1.3.2": null,
    "1.4.1": [
        "    def testSerialize(self):\n        date = datetime.date(2013, 2, 3)\n        self.assertEqual(luigi.DateParameter().serialize(date), '2013-02-03')\n        self.assertEqual(luigi.YearParameter().serialize(date), '2013')\n        self.assertEqual(luigi.MonthParameter().serialize(date), '2013-02')\n        dt = datetime.datetime(2013, 2, 3, 4, 5)\n        self.assertEqual(luigi.DateHourParameter().serialize(dt), '2013-02-03T04')"
    ],
    "1.4.2": [
        "test/parameter_test.py"
    ],
    "2.1.1": [
        [
            "E   TypeError: 'int' object is not iterable"
        ]
    ],
    "2.1.2": [
        [
            "self = <parameter_test.TestSerializeTupleParameter testMethod=testSerialize>\n\n    def testSerialize(self):\n        the_tuple = (1, 2, 3)\n    \n>       self.assertEqual(luigi.TupleParameter().parse(luigi.TupleParameter().serialize(the_tuple)), the_tuple)\n\ntest/parameter_test.py:1106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nluigi/parameter.py:1116: in parse\n    return tuple(tuple(x) for x in json.loads(x, object_pairs_hook=_FrozenOrderedDict))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f366602eac0>\n\n>   return tuple(tuple(x) for x in json.loads(x, object_pairs_hook=_FrozenOrderedDict))",
            "\nluigi/parameter.py:1116: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "x": {
                    "value": "'[1, 2, 3]'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "x": "str"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "x": {
                    "value": "'[1, 2, 3]'",
                    "shape": "9",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "x": "str"
            },
            {}
        ]
    ],
    "3.1.1": [
        "TupleParameter errors in dynamic dependencies\n"
    ],
    "3.1.2": [
        "Passing a TupleParameter in a dynamic dependency results in a TypeError in Python 3.6.5. See the following example for a basic demonstration.\n\nThe following code:\n\nimport luigi\nimport luigi.mock\nimport luigi.util\n\nclass FirstTask(luigi.Task):\n\n    # my_tuple = luigi.ListParameter(default=(1, 2, 3))\n    my_tuple = luigi.TupleParameter(default=(1, 2, 3))\n\n    @property\n    def tuple_string(self):\n        return '-'.join(map(str, self.my_tuple))\n\n    def run(self):\n        print(self.task_id + ': ' + self.tuple_string)\n        with self.output().open('w') as f:\n            f.write(self.tuple_string)\n\n    def output(self):\n        return luigi.mock.MockTarget(self.task_id)\n\n\n@luigi.util.inherits(FirstTask)\nclass SecondTask(luigi.Task):\n\n    def run(self):\n        input_target = yield FirstTask(my_tuple=tuple(self.my_tuple))\n\n        with input_target.open('r') as src:\n            my_tuple = src.read()\n            print(self.task_id + ': ' + my_tuple)\n\n            with self.output().open('w') as dst:\n                dst.write(my_tuple)\n\n    def output(self):\n        return luigi.mock.MockTarget(self.task_id)\n\nif __name__ == '__main__':\n    luigi.build([SecondTask()], local_scheduler=True)\n... results in this error:\n\n$ python scratch_9.py\nDEBUG: Checking if SecondTask(my_tuple=[1, 2, 3]) is complete\nINFO: Informed scheduler that task   SecondTask__1__2__3__a7a294ba13   has status   PENDING\nINFO: Done scheduling tasks\nINFO: Running Worker with 1 processes\nDEBUG: Asking scheduler for work...\nDEBUG: Pending tasks: 1\nINFO: [pid 10635] Worker Worker(salt=723375901, workers=1, host=DGJonathanDuckworth.local, username=jduckworth, pid=10635) running   SecondTask(my_tuple=[1, 2, 3])\nINFO: [pid 10635] Worker Worker(salt=723375901, workers=1, host=DGJonathanDuckworth.local, username=jduckworth, pid=10635) new requirements      SecondTask(my_tuple=[1, 2, 3])\nDEBUG: 1 running tasks, waiting for next task to finish\nINFO: Worker Worker(salt=723375901, workers=1, host=DGJonathanDuckworth.local, username=jduckworth, pid=10635) was stopped. Shutting down Keep-Alive thread\nTraceback (most recent call last):\n  File \"/Users/jduckworth/Library/Preferences/PyCharmCE2018.3/scratches/scratch_9.py\", line 40, in <module>\n    luigi.build([SecondTask()], local_scheduler=True)\n  File \"/Users/jduckworth/.virtualenvs/viper-dev/lib/python3.6/site-packages/luigi/interface.py\", line 274, in build\n    return _schedule_and_run(tasks, worker_scheduler_factory, override_defaults=env_params)['success']\n  File \"/Users/jduckworth/.virtualenvs/viper-dev/lib/python3.6/site-packages/luigi/interface.py\", line 207, in _schedule_and_run\n    success &= worker.run()\n  File \"/Users/jduckworth/.virtualenvs/viper-dev/lib/python3.6/site-packages/luigi/worker.py\", line 1162, in run\n    self._handle_next_task()\n  File \"/Users/jduckworth/.virtualenvs/viper-dev/lib/python3.6/site-packages/luigi/worker.py\", line 1066, in _handle_next_task\n    for module, name, params in new_requirements]\n  File \"/Users/jduckworth/.virtualenvs/viper-dev/lib/python3.6/site-packages/luigi/worker.py\", line 1066, in <listcomp>\n    for module, name, params in new_requirements]\n  File \"/Users/jduckworth/.virtualenvs/viper-dev/lib/python3.6/site-packages/luigi/task_register.py\", line 253, in load_task\n    return task_cls.from_str_params(params_str)\n  File \"/Users/jduckworth/.virtualenvs/viper-dev/lib/python3.6/site-packages/luigi/task.py\", line 482, in from_str_params\n    kwargs[param_name] = param.parse(param_str)\n  File \"/Users/jduckworth/.virtualenvs/viper-dev/lib/python3.6/site-packages/luigi/parameter.py\", line 1107, in parse\n    return tuple(tuple(x) for x in json.loads(x, object_pairs_hook=_FrozenOrderedDict))\n  File \"/Users/jduckworth/.virtualenvs/viper-dev/lib/python3.6/site-packages/luigi/parameter.py\", line 1107, in <genexpr>\n    return tuple(tuple(x) for x in json.loads(x, object_pairs_hook=_FrozenOrderedDict))\nTypeError: 'int' object is not iterable\nIt looks like the problem is that the code here catches a ValueError, but not a TypeError. I haven't tested in Python 2, but I'm assuming a ValueError gets thrown in that case and this is just a result of differences in Python versions.\n\nI'm happy to put in a PR if it's helpful.\n"
    ],
    "used_imports": "import json\nfrom ast import literal_eval"
}