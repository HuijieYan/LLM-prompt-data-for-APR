{
    "luigi:25": {
        "github_issue_title": [
            "S3CopyToTable.s3_load_path TypeError\n"
        ],
        "github_issue_description": [
            "I encountered this TypeError when subclassing S3CopyToTable:\n...\nTraceback (most recent call last):\n  File \"/home/kian/workspaces/contrib/luigi/luigi/worker.py\", line 137, in run\n    new_deps = self._run_get_new_deps()\n  File \"/home/kian/workspaces/contrib/luigi/luigi/worker.py\", line 88, in _run_get_new_deps\n    task_gen = self.task.run()\n  File \"/home/kian/workspaces/contrib/luigi/luigi/contrib/redshift.py\", line 166, in run\n    path = self.s3_load_path()\nTypeError: 'str' object is not callable\nINFO: Skipping error email. Set `error-email` in the `core` section of the luigi config file to receive error emails.\nDEBUG: 1 running tasks, waiting for next task to finish\nDEBUG: Asking scheduler for work...\nINFO: Done\nINFO: There are no more tasks to run at this time\nINFO: Worker Worker(salt=532581476, workers=1, host=..., username=kian, pid=23435) was stopped. Shutting down Keep-Alive thread\n\nwhich was fixed by changing https://github.com/spotify/luigi/blob/master/luigi/contrib/redshift.py#L166 from:\npath = self.s3_load_path()\n\nto\npath = self.s3_load_path\n\n(I submitted this fix as PR #996)\n\nas per the other class properties, which as far as i can tell, aren't explicitly referenced as methods either (otherwise they too would raise the above exception?).\n\nThe snippet I used to generate the above error:\nimport luigi\n\nfrom luigi.s3 import S3Target, S3Client                                                                          \nfrom luigi.contrib.redshift import S3CopyToTable                                                                 \n\n\nclass MyS3Task(luigi.Task): \n    local_tsv = luigi.Parameter()\n    s3_load_path = luigi.Parameter()                                                                             \n    client = luigi.Parameter()\n\n    def output(self):\n        return S3Target(self.s3_load_path, client=self.client)\n\n    def run(self):\n        self.client.put(self.local_tsv, self.output().path)\n        return\n\n\nclass MyRedshiftTask(S3CopyToTable):\n    host = luigi.Parameter()\n    database = luigi.Parameter()\n    user = luigi.Parameter()\n    password = luigi.Parameter()\n    table = luigi.Parameter()\n    local_tsv = luigi.Parameter()\n\n    aws_access_key_id = luigi.Parameter()\n    aws_secret_access_key = luigi.Parameter()\n\n    columns = [(\"x\", \"INT\"),\n               (\"y\", \"INT\")]\n\n    s3_load_path = luigi.Parameter()\n    copy_options = \"IGNOREHEADER 1\"\n\n    def requires(self):\n        client = S3Client(self.aws_access_key_id, self.aws_secret_access_key)\n        return MyS3Task(s3_load_path=self.s3_load_path,\n                        local_tsv=self.local_tsv, client=client)\n\n\nif __name__ == '__main__':\n    luigi.run()\n\nwhich was run from the command line using:\npython ./luigi_example.py --local-scheduler MyRedshiftTask \\\n    --host \"<REDSHIFT ENDPOINT>:5439\" \\\n    --database \"dev\" \\\n    --user \"<USERNAME>\" \\\n    --password \"<HIDDEN>\" \\\n    --table \"test_redshift_table_5439\" \\\n    --aws-access-key-id \"<HIDDEN>\" \\\n    --aws-secret-access-key \"<HIDDEN>\" \\\n    --s3-load-path \"s3://bucket-5439/test.tsv\" \\\n    --local-tsv \"./test.tsv\" \\\n\nwhere test.tsv (tab-separated values) contained:\nx   y\n1   2\n10  20\n100 200\n"
        ]
    }
}