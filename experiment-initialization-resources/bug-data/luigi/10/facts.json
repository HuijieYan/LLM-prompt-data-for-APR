{
    "1.1.1": "def get_pending_tasks(self, state):\n    \n    if len(self.tasks) < state.num_pending_tasks():\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                self.tasks)\n    else:\n        return state.get_pending_tasks()\n",
    "1.1.2": "Get PENDING (and RUNNING) tasks for this worker.\n\nYou have to pass in the state for optimization reasons.",
    "1.2.1": "class Worker(object)",
    "1.2.2": "Structure for tracking worker activity and keeping their references.",
    "1.2.3": [
        "get_pending_tasks(self, state)"
    ],
    "1.3.1": "luigi/scheduler.py",
    "1.3.2": [
        "get_pending_tasks(self, state)",
        "get_pending_tasks(self)",
        "num_pending_tasks(self)"
    ],
    "1.4.1": [
        "    def test_get_pending_tasks_with_many_done_tasks(self):\n        sch = luigi.scheduler.Scheduler()\n        sch.add_task(worker='NON_TRIVIAL', task_id='A', resources={'a': 1})\n        sch.add_task(worker='TRIVIAL', task_id='B', status='PENDING')\n        sch.add_task(worker='TRIVIAL', task_id='C', status='DONE')\n        sch.add_task(worker='TRIVIAL', task_id='D', status='DONE')\n\n        scheduler_state = sch._state\n        trivial_worker = scheduler_state.get_worker('TRIVIAL')\n        self.assertEqual({'B'}, self.get_pending_ids(trivial_worker, scheduler_state))\n\n        non_trivial_worker = scheduler_state.get_worker('NON_TRIVIAL')\n        self.assertEqual({'A'}, self.get_pending_ids(non_trivial_worker, scheduler_state))"
    ],
    "1.4.2": [
        "test/scheduler_test.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Items in the second set but not the first:\nE       'A'"
        ]
    ],
    "2.1.2": [
        [
            "self = <scheduler_test.SchedulerWorkerTest testMethod=test_get_pending_tasks_with_many_done_tasks>\n\n    def test_get_pending_tasks_with_many_done_tasks(self):\n        sch = luigi.scheduler.Scheduler()\n        sch.add_task(worker='NON_TRIVIAL', task_id='A', resources={'a': 1})\n        sch.add_task(worker='TRIVIAL', task_id='B', status='PENDING')\n        sch.add_task(worker='TRIVIAL', task_id='C', status='DONE')\n        sch.add_task(worker='TRIVIAL', task_id='D', status='DONE')\n    \n        scheduler_state = sch._state\n        trivial_worker = scheduler_state.get_worker('TRIVIAL')\n>       self.assertEqual({'B'}, self.get_pending_ids(trivial_worker, scheduler_state))",
            "\ntest/scheduler_test.py:241: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.tasks": {
                    "value": "{Task({'id': 'B', 'stakeholders': {'TRIVIAL'} ... {}, 'retry_policy': RetryPolicy(retry_count=999999999, disable_hard_timeout=999999999, disable_window=3600), 'failures': <luigi.scheduler.Failures object at 0x7f04f3cec760>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': False, 'batch_id': None})}",
                    "shape": "3",
                    "omitted": true
                }
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "self.tasks": "set"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "self.tasks": {
                    "value": "{Task({'id': 'B', 'stakeholders': {'TRIVIAL'} ... {}, 'retry_policy': RetryPolicy(retry_count=999999999, disable_hard_timeout=999999999, disable_window=3600), 'failures': <luigi.scheduler.Failures object at 0x7f002c273670>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': False, 'batch_id': None})}",
                    "shape": "3",
                    "omitted": true
                },
                "self.id": {
                    "value": "'TRIVIAL'",
                    "shape": "7",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "self.tasks": {
                    "value": "{Task({'id': 'A', 'stakeholders': {'NON_TRIVIAL'} ... {}, 'retry_policy': RetryPolicy(retry_count=999999999, disable_hard_timeout=999999999, disable_window=3600), 'failures': <luigi.scheduler.Failures object at 0x7f002c2734f0>, 'tracking_url': None, 'status_message': None, 'scheduler_disable_time': None, 'runnable': True, 'batchable': False, 'batch_id': None})}",
                    "shape": "1",
                    "omitted": true
                },
                "self.id": {
                    "value": "'NON_TRIVIAL'",
                    "shape": "11",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "self.tasks": "set",
                "self.id": "str"
            },
            {}
        ],
        [
            {
                "self.tasks": "set",
                "self.id": "str"
            },
            {}
        ]
    ],
    "3.1.1": null,
    "3.1.2": null,
    "used_imports": "from luigi import six\nfrom luigi.task_status import DISABLED, DONE, FAILED, PENDING, RUNNING, SUSPENDED, UNKNOWN, BATCH_RUNNING"
}