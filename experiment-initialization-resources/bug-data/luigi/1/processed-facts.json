{
    "1.1.1": "def get(self):\n    metrics = self._scheduler._state._metrics_collector.generate_latest()\n    if metrics:\n        metrics.configure_http_handler(self)\n        self.write(metrics)\n",
    "1.1.2": null,
    "1.2.1": "luigi/server.py",
    "1.2.2": null,
    "1.3.1": "class MetricsHandler(tornado.web.RequestHandler)",
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": null,
    "1.5.1": [
        "    def test_get(self):\n        mock_metrics = mock.MagicMock()\n        self.mock_scheduler._state._metrics_collector.generate_latest.return_value = mock_metrics\n        with mock.patch.object(self.handler, 'write') as patched_write:\n            self.handler.get()\n            patched_write.assert_called_once_with(mock_metrics)\n            self.mock_scheduler._state._metrics_collector.configure_http_handler.assert_called_once_with(\n                self.handler)"
    ],
    "1.5.2": [
        "test/server_test.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: Expected 'configure_http_handler' to be called once. Called 0 times.",
            "E           AssertionError: Expected 'configure_http_handler' to be called once. Called 0 times."
        ]
    ],
    "2.1.2": [
        [
            "__wrapped_mock_method__ = <function NonCallableMock.assert_called_once_with at 0x7fc2500193a0>\nargs = (<MagicMock name='mock._state._metrics_collector.configure_http_handler' id='140472491751744'>, <luigi.server.MetricsHandler object at 0x7fc24cfd6e80>)\nkwargs = {}, __tracebackhide__ = True\nmsg = \"Expected 'configure_http_handler' to be called once. Called 0 times.\"\n__mock_self = <MagicMock name='mock._state._metrics_collector.configure_http_handler' id='140472491751744'>\n\n    def assert_wrapper(\n        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any\n    ) -> None:\n        __tracebackhide__ = True\n        try:\n>           __wrapped_mock_method__(*args, **kwargs)\n\n../../envs/luigi_1/lib/python3.8/site-packages/pytest_mock/plugin.py:459: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MagicMock name='mock._state._metrics_collector.configure_http_handler' id='140472491751744'>\nargs = (<luigi.server.MetricsHandler object at 0x7fc24cfd6e80>,), kwargs = {}\nmsg = \"Expected 'configure_http_handler' to be called once. Called 0 times.\"\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)",
            "\n/usr/local/lib/python3.8/unittest/mock.py:924: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <server_test.MetricsHandlerTest testMethod=test_get>\n\n    def test_get(self):\n        mock_metrics = mock.MagicMock()\n        self.mock_scheduler._state._metrics_collector.generate_latest.return_value = mock_metrics\n        with mock.patch.object(self.handler, 'write') as patched_write:\n            self.handler.get()\n            patched_write.assert_called_once_with(mock_metrics)\n>           self.mock_scheduler._state._metrics_collector.configure_http_handler.assert_called_once_with(\n                self.handler)",
            "\ntest/server_test.py:468: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "self._scheduler": {
                    "value": "<MagicMock id='140190284642864'>",
                    "shape": "<MagicMock name='mock.shape' id='140190284502928'>",
                    "omitted": false
                },
                "self.write": {
                    "value": "<MagicMock name='write' id='140190284468480'>",
                    "shape": "<MagicMock name='write.shape' id='140190284010784'>",
                    "omitted": false
                }
            },
            {
                "metrics": {
                    "value": "<MagicMock name='mock._state._metrics_collector.generate_latest()' id='140190284404144'>",
                    "shape": null,
                    "omitted": false
                },
                "metrics.configure_http_handler": {
                    "value": "<MagicMock name='mock._state._metrics_collector.generate_latest().configure_http_handler' id='140190284044752'>",
                    "shape": "<MagicMock name='mock._state._metrics_collector.generate_latest().configure_http_handler.shape' id='140190284132656'>",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "self._scheduler": "MagicMock",
                "self.write": "MagicMock"
            },
            {
                "metrics": "MagicMock",
                "metrics.configure_http_handler": "MagicMock"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "self._scheduler": {
                    "value": "<MagicMock id='140166380076336'>",
                    "shape": "<MagicMock name='mock.shape' id='140166379595760'>",
                    "omitted": false
                },
                "self.write": {
                    "value": "<MagicMock name='write' id='140166379555232'>",
                    "shape": "<MagicMock name='write.shape' id='140166379103616'>",
                    "omitted": false
                }
            },
            {
                "metrics_collector": {
                    "value": "<MagicMock name='mock._state._metrics_collector' id='140166379523088'>",
                    "shape": null,
                    "omitted": false
                },
                "metrics": {
                    "value": "<MagicMock name='mock._state._metrics_collector.generate_latest()' id='140166379486800'>",
                    "shape": null,
                    "omitted": false
                },
                "metrics_collector.generate_latest": {
                    "value": "<MagicMock name='mock._state._metrics_collector.generate_latest' id='140166379539136'>",
                    "shape": "<MagicMock name='mock._state._metrics_collector.generate_latest.shape' id='140166379233184'>",
                    "omitted": false
                },
                "metrics_collector.configure_http_handler": {
                    "value": "<MagicMock name='mock._state._metrics_collector.configure_http_handler' id='140166379137584'>",
                    "shape": "<MagicMock name='mock._state._metrics_collector.configure_http_handler.shape' id='140166379265328'>",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "self._scheduler": "MagicMock",
                "self.write": "MagicMock"
            },
            {
                "metrics_collector": "MagicMock",
                "metrics": "MagicMock",
                "metrics_collector.generate_latest": "MagicMock",
                "metrics_collector.configure_http_handler": "MagicMock"
            }
        ]
    ],
    "3.1.1": [
        "add callback to metric collector\n"
    ],
    "3.1.2": [
        "So that they can configure http handler. This is to fix #2628.\n\nDescription\n#2628 introduced dependency of prometheus_client and that breaks server.py. This PR\nadds a callback for the metrics collector to further customise http handler.\n\nMotivation and Context\nI'm not entirely sure exposing http handler to contrib is a good idea, but this is to avoid pulling\nin dependency or hardcoding a header value only for the sake of a certain metrics collector.\n"
    ]
}