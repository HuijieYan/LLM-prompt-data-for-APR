{
    "luigi:19": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/luigi_19/luigi/scheduler.py": {
            "buggy_functions": [
                {
                    "function_name": "set_status",
                    "function_code": "def set_status(self, task, new_status, config=None):\n    if new_status == FAILED:\n        assert config is not None\n\n    if new_status == DISABLED and task.status == RUNNING:\n        return\n\n    if task.status == DISABLED:\n        if new_status == DONE:\n            self.re_enable(task)\n\n        # don't allow workers to override a scheduler disable\n        elif task.scheduler_disable_time is not None:\n            return\n\n    if new_status == FAILED and task.can_disable():\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = DISABLED\n            notifications.send_error_email(\n                'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                '{task} failed {failures} times in the last {window} seconds, so it is being '\n                'disabled for {persist} seconds'.format(\n                    failures=config.disable_failures,\n                    task=task.id,\n                    window=config.disable_window,\n                    persist=config.disable_persist,\n                ))\n    elif new_status == DISABLED:\n        task.scheduler_disable_time = None\n\n    self._status_tasks[task.status].pop(task.id)\n    self._status_tasks[new_status][task.id] = task\n    task.status = new_status\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 393,
                    "end_line": 427,
                    "variables": {
                        "new_status": [
                            422,
                            394,
                            426,
                            427,
                            397,
                            401,
                            408,
                            412
                        ],
                        "FAILED": [
                            408,
                            394
                        ],
                        "config": [
                            417,
                            395,
                            420,
                            419
                        ],
                        "DISABLED": [
                            400,
                            412,
                            397,
                            422
                        ],
                        "task.status": [
                            400,
                            425,
                            427,
                            397
                        ],
                        "task": [
                            418,
                            423,
                            425,
                            426,
                            427,
                            397,
                            400,
                            402,
                            405,
                            408,
                            409,
                            410,
                            411,
                            414
                        ],
                        "RUNNING": [
                            397
                        ],
                        "DONE": [
                            401
                        ],
                        "self.re_enable": [
                            402
                        ],
                        "self": [
                            426,
                            425,
                            402
                        ],
                        "task.scheduler_disable_time": [
                            411,
                            405,
                            423
                        ],
                        "task.can_disable": [
                            408
                        ],
                        "task.add_failure": [
                            409
                        ],
                        "task.has_excessive_failures": [
                            410
                        ],
                        "time.time": [
                            411
                        ],
                        "time": [
                            411
                        ],
                        "notifications.send_error_email": [
                            413
                        ],
                        "notifications": [
                            413
                        ],
                        "format": [
                            414,
                            415
                        ],
                        "task.id": [
                            426,
                            425,
                            418,
                            414
                        ],
                        "config.disable_failures": [
                            417
                        ],
                        "config.disable_window": [
                            419
                        ],
                        "config.disable_persist": [
                            420
                        ],
                        "pop": [
                            425
                        ],
                        "self._status_tasks": [
                            425,
                            426
                        ]
                    },
                    "filtered_variables": {
                        "new_status": [
                            422,
                            394,
                            426,
                            427,
                            397,
                            401,
                            408,
                            412
                        ],
                        "FAILED": [
                            408,
                            394
                        ],
                        "config": [
                            417,
                            395,
                            420,
                            419
                        ],
                        "DISABLED": [
                            400,
                            412,
                            397,
                            422
                        ],
                        "task.status": [
                            400,
                            425,
                            427,
                            397
                        ],
                        "task": [
                            418,
                            423,
                            425,
                            426,
                            427,
                            397,
                            400,
                            402,
                            405,
                            408,
                            409,
                            410,
                            411,
                            414
                        ],
                        "RUNNING": [
                            397
                        ],
                        "DONE": [
                            401
                        ],
                        "self.re_enable": [
                            402
                        ],
                        "self": [
                            426,
                            425,
                            402
                        ],
                        "task.scheduler_disable_time": [
                            411,
                            405,
                            423
                        ],
                        "task.can_disable": [
                            408
                        ],
                        "task.add_failure": [
                            409
                        ],
                        "task.has_excessive_failures": [
                            410
                        ],
                        "time.time": [
                            411
                        ],
                        "time": [
                            411
                        ],
                        "notifications.send_error_email": [
                            413
                        ],
                        "notifications": [
                            413
                        ],
                        "task.id": [
                            426,
                            425,
                            418,
                            414
                        ],
                        "config.disable_failures": [
                            417
                        ],
                        "config.disable_window": [
                            419
                        ],
                        "config.disable_persist": [
                            420
                        ],
                        "pop": [
                            425
                        ],
                        "self._status_tasks": [
                            425,
                            426
                        ]
                    },
                    "diff_line_number": 408,
                    "class_data": {
                        "signature": "class SimpleTaskState(object)",
                        "docstring": "Keep track of the current state and handle persistance.\n\nThe point of this class is to enable other ways to keep state, eg. by using a database\nThese will be implemented by creating an abstract base class that this and other classes\ninherit from.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, state_path):\n    self._state_path = state_path\n    self._tasks = {}\n    self._status_tasks = collections.defaultdict(dict)\n    self._active_workers = {}",
                            "def get_state(self):\n    return (self._tasks, self._active_workers)",
                            "def set_state(self, state):\n    (self._tasks, self._active_workers) = state",
                            "def dump(self):\n    try:\n        with open(self._state_path, 'wb') as fobj:\n            pickle.dump(self.get_state(), fobj)\n    except IOError:\n        logger.warning('Failed saving scheduler state', exc_info=1)\n    else:\n        logger.info('Saved state in %s', self._state_path)",
                            "def load(self):\n    if os.path.exists(self._state_path):\n        logger.info('Attempting to load state from %s', self._state_path)\n        try:\n            with open(self._state_path, 'rb') as fobj:\n                state = pickle.load(fobj)\n        except BaseException:\n            logger.exception('Error when loading state. Starting from clean slate.')\n            return\n        self.set_state(state)\n        self._status_tasks = collections.defaultdict(dict)\n        for task in six.itervalues(self._tasks):\n            self._status_tasks[task.status][task.id] = task\n        for (k, v) in six.iteritems(self._active_workers):\n            if isinstance(v, float):\n                self._active_workers[k] = Worker(worker_id=k, last_active=v)\n        if any((not hasattr(w, 'tasks') for (k, w) in six.iteritems(self._active_workers))):\n            for (k, worker) in six.iteritems(self._active_workers):\n                worker.tasks = set()\n            for task in six.itervalues(self._tasks):\n                for worker_id in task.workers:\n                    self._active_workers[worker_id].tasks.add(task)\n        if any((not hasattr(t, 'disable_hard_timeout') for t in six.itervalues(self._tasks))):\n            for t in six.itervalues(self._tasks):\n                t.disable_hard_timeout = None\n    else:\n        logger.info('No prior state file exists at %s. Starting with clean slate', self._state_path)",
                            "def get_active_tasks(self, status=None):\n    if status:\n        for task in six.itervalues(self._status_tasks[status]):\n            yield task\n    else:\n        for task in six.itervalues(self._tasks):\n            yield task",
                            "def get_running_tasks(self):\n    return six.itervalues(self._status_tasks[RUNNING])",
                            "def get_pending_tasks(self):\n    return itertools.chain.from_iterable((six.itervalues(self._status_tasks[status]) for status in [PENDING, RUNNING]))",
                            "def num_pending_tasks(self):\n    \"\"\"\n    Return how many tasks are PENDING + RUNNING. O(1).\n    \"\"\"\n    return len(self._status_tasks[PENDING]) + len(self._status_tasks[RUNNING])",
                            "def get_task(self, task_id, default=None, setdefault=None):\n    if setdefault:\n        task = self._tasks.setdefault(task_id, setdefault)\n        self._status_tasks[task.status][task.id] = task\n        return task\n    else:\n        return self._tasks.get(task_id, default)",
                            "def has_task(self, task_id):\n    return task_id in self._tasks",
                            "def re_enable(self, task, config=None):\n    task.scheduler_disable_time = None\n    task.failures.clear()\n    if config:\n        self.set_status(task, FAILED, config)\n        task.failures.clear()",
                            "def set_status(self, task, new_status, config=None):\n    if new_status == FAILED:\n        assert config is not None\n    if new_status == DISABLED and task.status == RUNNING:\n        return\n    if task.status == DISABLED:\n        if new_status == DONE:\n            self.re_enable(task)\n        elif task.scheduler_disable_time is not None:\n            return\n    if new_status == FAILED and task.can_disable():\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = DISABLED\n            notifications.send_error_email('Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id), '{task} failed {failures} times in the last {window} seconds, so it is being disabled for {persist} seconds'.format(failures=config.disable_failures, task=task.id, window=config.disable_window, persist=config.disable_persist))\n    elif new_status == DISABLED:\n        task.scheduler_disable_time = None\n    self._status_tasks[task.status].pop(task.id)\n    self._status_tasks[new_status][task.id] = task\n    task.status = new_status",
                            "def fail_dead_worker_task(self, task, config, assistants):\n    if task.status == RUNNING and task.worker_running and (task.worker_running not in task.stakeholders | assistants):\n        logger.info('Task %r is marked as running by disconnected worker %r -> marking as FAILED with retry delay of %rs', task.id, task.worker_running, config.retry_delay)\n        task.worker_running = None\n        self.set_status(task, FAILED, config)\n        task.retry = time.time() + config.retry_delay",
                            "def prune(self, task, config):\n    remove = False\n    if not task.stakeholders:\n        if task.remove is None:\n            logger.info('Task %r has stakeholders %r but none remain connected -> will remove task in %s seconds', task.id, task.stakeholders, config.remove_delay)\n            task.remove = time.time() + config.remove_delay\n    if task.status == DISABLED and task.scheduler_disable_time is not None:\n        if time.time() - fix_time(task.scheduler_disable_time) > config.disable_persist:\n            self.re_enable(task, config)\n    if task.remove and time.time() > task.remove:\n        logger.info('Removing task %r (no connected stakeholders)', task.id)\n        remove = True\n    if task.status == FAILED and config.retry_delay >= 0 and (task.retry < time.time()):\n        self.set_status(task, PENDING, config)\n    return remove",
                            "def inactivate_tasks(self, delete_tasks):\n    for task in delete_tasks:\n        task_obj = self._tasks.pop(task)\n        self._status_tasks[task_obj.status].pop(task)",
                            "def get_active_workers(self, last_active_lt=None, last_get_work_gt=None):\n    for worker in six.itervalues(self._active_workers):\n        if last_active_lt is not None and worker.last_active >= last_active_lt:\n            continue\n        last_get_work = getattr(worker, 'last_get_work', None)\n        if last_get_work_gt is not None and (last_get_work is None or last_get_work <= last_get_work_gt):\n            continue\n        yield worker",
                            "def get_assistants(self, last_active_lt=None):\n    return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))",
                            "def get_worker_ids(self):\n    return self._active_workers.keys()",
                            "def get_worker(self, worker_id):\n    return self._active_workers.setdefault(worker_id, Worker(worker_id))",
                            "def inactivate_workers(self, delete_workers):\n    for worker in delete_workers:\n        self._active_workers.pop(worker)\n    for task in self.get_active_tasks():\n        task.stakeholders.difference_update(delete_workers)\n        task.workers.difference_update(delete_workers)",
                            "def get_necessary_tasks(self):\n    necessary_tasks = set()\n    for task in self.get_active_tasks():\n        if task.status not in (DONE, DISABLED) or getattr(task, 'scheduler_disable_time', None) is not None:\n            necessary_tasks.update(task.deps)\n            necessary_tasks.add(task.id)\n    return necessary_tasks"
                        ],
                        "constructor_variables": [
                            "self._state_path = state_path",
                            "self._tasks = {}",
                            "self._status_tasks = collections.defaultdict(dict)",
                            "self._active_workers = {}"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, state_path)",
                            "get_state(self)",
                            "set_state(self, state)",
                            "dump(self)",
                            "load(self)",
                            "get_active_tasks(self, status=None)",
                            "get_running_tasks(self)",
                            "get_pending_tasks(self)",
                            "num_pending_tasks(self)",
                            "get_task(self, task_id, default=None, setdefault=None)",
                            "has_task(self, task_id)",
                            "re_enable(self, task, config=None)",
                            "set_status(self, task, new_status, config=None)",
                            "fail_dead_worker_task(self, task, config, assistants)",
                            "prune(self, task, config)",
                            "inactivate_tasks(self, delete_tasks)",
                            "get_active_workers(self, last_active_lt=None, last_get_work_gt=None)",
                            "get_assistants(self, last_active_lt=None)",
                            "get_worker_ids(self)",
                            "get_worker(self, worker_id)",
                            "inactivate_workers(self, delete_workers)",
                            "get_necessary_tasks(self)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": [
                            "_status_tasks",
                            "_state_path",
                            "_tasks",
                            "_active_workers"
                        ]
                    },
                    "used_imports": [
                        "import time",
                        "from luigi import notifications",
                        "from luigi.task_status import DISABLED, DONE, FAILED, PENDING, RUNNING, SUSPENDED, UNKNOWN"
                    ],
                    "variable_values": [
                        [
                            {
                                "new_status": {
                                    "variable_value": "'FAILED'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "scheduler(retry_delay=900.0, remove_delay=600.0, worker_disconnect_delay=60.0, state_path=/var/lib/luigi-server/state.pickle, disable_window=3600, disable_failures=1, disable_hard_timeout=None, disable_persist=100, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.re_enable": {
                                    "variable_value": "<bound method SimpleTaskState.re_enable of <luigi.scheduler.SimpleTaskState object at 0x7f35d9982700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7f35d9982700>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.scheduler_disable_time": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.can_disable": {
                                    "variable_value": "<bound method Task.can_disable of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.add_failure": {
                                    "variable_value": "<bound method Task.add_failure of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.has_excessive_failures": {
                                    "variable_value": "<bound method Task.has_excessive_failures of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications.send_error_email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "config.disable_failures": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_window": {
                                    "variable_value": "3600",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_persist": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._status_tasks": {
                                    "variable_value": "defaultdict(<class 'dict'>, {'PENDING': {'A': Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})}})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "new_status": {
                                    "variable_value": "'DISABLED'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "scheduler(retry_delay=900.0, remove_delay=600.0, worker_disconnect_delay=60.0, state_path=/var/lib/luigi-server/state.pickle, disable_window=3600, disable_failures=1, disable_hard_timeout=None, disable_persist=100, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'DISABLED'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.re_enable": {
                                    "variable_value": "<bound method SimpleTaskState.re_enable of <luigi.scheduler.SimpleTaskState object at 0x7f35d9982700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7f35d9982700>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.scheduler_disable_time": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "task.can_disable": {
                                    "variable_value": "<bound method Task.can_disable of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.add_failure": {
                                    "variable_value": "<bound method Task.add_failure of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.has_excessive_failures": {
                                    "variable_value": "<bound method Task.has_excessive_failures of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications.send_error_email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "config.disable_failures": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_window": {
                                    "variable_value": "3600",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_persist": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._status_tasks": {
                                    "variable_value": "defaultdict(<class 'dict'>, {'PENDING': {}, 'DISABLED': {'A': Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})}})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "new_status": {
                                    "variable_value": "'FAILED'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "scheduler(retry_delay=900.0, remove_delay=600.0, worker_disconnect_delay=60.0, state_path=/var/lib/luigi-server/state.pickle, disable_window=3600, disable_failures=1, disable_hard_timeout=None, disable_persist=100, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'DISABLED'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.re_enable": {
                                    "variable_value": "<bound method SimpleTaskState.re_enable of <luigi.scheduler.SimpleTaskState object at 0x7f35d9982700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7f35d9982700>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.scheduler_disable_time": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.can_disable": {
                                    "variable_value": "<bound method Task.can_disable of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.add_failure": {
                                    "variable_value": "<bound method Task.add_failure of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.has_excessive_failures": {
                                    "variable_value": "<bound method Task.has_excessive_failures of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications.send_error_email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "config.disable_failures": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_window": {
                                    "variable_value": "3600",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_persist": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._status_tasks": {
                                    "variable_value": "defaultdict(<class 'dict'>, {'PENDING': {}, 'DISABLED': {'A': Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})}})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "new_status": {
                                    "variable_value": "'DISABLED'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "scheduler(retry_delay=900.0, remove_delay=600.0, worker_disconnect_delay=60.0, state_path=/var/lib/luigi-server/state.pickle, disable_window=3600, disable_failures=1, disable_hard_timeout=None, disable_persist=100, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'DISABLED'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 101, 'runnable': True})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.re_enable": {
                                    "variable_value": "<bound method SimpleTaskState.re_enable of <luigi.scheduler.SimpleTaskState object at 0x7f35d9982700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7f35d9982700>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.scheduler_disable_time": {
                                    "variable_value": "101",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "task.can_disable": {
                                    "variable_value": "<bound method Task.can_disable of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 101, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.add_failure": {
                                    "variable_value": "<bound method Task.add_failure of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 101, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.has_excessive_failures": {
                                    "variable_value": "<bound method Task.has_excessive_failures of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 101, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications.send_error_email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "config.disable_failures": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_window": {
                                    "variable_value": "3600",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_persist": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._status_tasks": {
                                    "variable_value": "defaultdict(<class 'dict'>, {'PENDING': {}, 'DISABLED': {'A': Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f35d9982ac0>, 'tracking_url': None, 'scheduler_disable_time': 101, 'runnable': True})}})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "2"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "new_status": {
                                    "variable_value": "'FAILED'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "scheduler(retry_delay=900.0, remove_delay=600.0, worker_disconnect_delay=60.0, state_path=/var/lib/luigi-server/state.pickle, disable_window=3600, disable_failures=1, disable_hard_timeout=None, disable_persist=100, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'PENDING'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.re_enable": {
                                    "variable_value": "<bound method SimpleTaskState.re_enable of <luigi.scheduler.SimpleTaskState object at 0x7f037783f700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7f037783f700>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.scheduler_disable_time": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.can_disable": {
                                    "variable_value": "<bound method Task.can_disable of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.add_failure": {
                                    "variable_value": "<bound method Task.add_failure of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.has_excessive_failures": {
                                    "variable_value": "<bound method Task.has_excessive_failures of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications.send_error_email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "config.disable_failures": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_window": {
                                    "variable_value": "3600",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_persist": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._status_tasks": {
                                    "variable_value": "defaultdict(<class 'dict'>, {'PENDING': {'A': Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': False})}})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "new_status": {
                                    "variable_value": "'DISABLED'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "scheduler(retry_delay=900.0, remove_delay=600.0, worker_disconnect_delay=60.0, state_path=/var/lib/luigi-server/state.pickle, disable_window=3600, disable_failures=1, disable_hard_timeout=None, disable_persist=100, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'DISABLED'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.re_enable": {
                                    "variable_value": "<bound method SimpleTaskState.re_enable of <luigi.scheduler.SimpleTaskState object at 0x7f037783f700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7f037783f700>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.scheduler_disable_time": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "task.can_disable": {
                                    "variable_value": "<bound method Task.can_disable of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.add_failure": {
                                    "variable_value": "<bound method Task.add_failure of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.has_excessive_failures": {
                                    "variable_value": "<bound method Task.has_excessive_failures of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications.send_error_email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "config.disable_failures": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_window": {
                                    "variable_value": "3600",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_persist": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._status_tasks": {
                                    "variable_value": "defaultdict(<class 'dict'>, {'PENDING': {}, 'DISABLED': {'A': Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': 0, 'runnable': False})}})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "new_status": {
                                    "variable_value": "'FAILED'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "scheduler(retry_delay=900.0, remove_delay=600.0, worker_disconnect_delay=60.0, state_path=/var/lib/luigi-server/state.pickle, disable_window=3600, disable_failures=1, disable_hard_timeout=None, disable_persist=100, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'DISABLED'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.re_enable": {
                                    "variable_value": "<bound method SimpleTaskState.re_enable of <luigi.scheduler.SimpleTaskState object at 0x7f037783f700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7f037783f700>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.scheduler_disable_time": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.can_disable": {
                                    "variable_value": "<bound method Task.can_disable of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.add_failure": {
                                    "variable_value": "<bound method Task.add_failure of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.has_excessive_failures": {
                                    "variable_value": "<bound method Task.has_excessive_failures of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications.send_error_email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "config.disable_failures": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_window": {
                                    "variable_value": "3600",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_persist": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._status_tasks": {
                                    "variable_value": "defaultdict(<class 'dict'>, {'PENDING': {}, 'DISABLED': {'A': Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'DISABLED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})}})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "new_status": {
                                    "variable_value": "'FAILED'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "FAILED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "scheduler(retry_delay=900.0, remove_delay=600.0, worker_disconnect_delay=60.0, state_path=/var/lib/luigi-server/state.pickle, disable_window=3600, disable_failures=1, disable_hard_timeout=None, disable_persist=100, max_shown_tasks=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                                    "variable_type": "scheduler",
                                    "variable_shape": null
                                },
                                "DISABLED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.status": {
                                    "variable_value": "'FAILED'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "task": {
                                    "variable_value": "Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'FAILED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})",
                                    "variable_type": "Task",
                                    "variable_shape": null
                                },
                                "RUNNING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DONE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.re_enable": {
                                    "variable_value": "<bound method SimpleTaskState.re_enable of <luigi.scheduler.SimpleTaskState object at 0x7f037783f700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.SimpleTaskState object at 0x7f037783f700>",
                                    "variable_type": "SimpleTaskState",
                                    "variable_shape": null
                                },
                                "task.scheduler_disable_time": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "task.can_disable": {
                                    "variable_value": "<bound method Task.can_disable of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'FAILED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.add_failure": {
                                    "variable_value": "<bound method Task.add_failure of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'FAILED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "task.has_excessive_failures": {
                                    "variable_value": "<bound method Task.has_excessive_failures of Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'FAILED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications.send_error_email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "notifications": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.id": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "config.disable_failures": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_window": {
                                    "variable_value": "3600",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "config.disable_persist": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._status_tasks": {
                                    "variable_value": "defaultdict(<class 'dict'>, {'PENDING': {}, 'DISABLED': {}, 'FAILED': {'A': Task({'id': 'A', 'stakeholders': set(), 'workers': set(), 'deps': set(), 'status': 'FAILED', 'time': 0, 'retry': 900.0, 'remove': 701.0, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 1, 'disable_hard_timeout': None, 'failures': <luigi.scheduler.Failures object at 0x7f037783fac0>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})}})",
                                    "variable_type": "defaultdict",
                                    "variable_shape": "3"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def fix_time(x):\n    # Backwards compatibility for a fix in Dec 2014. Prior to the fix, pickled state might store datetime objects\n    # Let's remove this function soon\n    if isinstance(x, datetime.datetime):\n        return time.mktime(x.timetuple())\n    else:\n        return x",
                "def _get_default(x, default):\n    if x is not None:\n        return x\n    else:\n        return default",
                "def __init__(self, window):\n    \"\"\"\n    Initialize with the given window.\n\n    :param window: how long to track failures for, as a float (number of seconds).\n    \"\"\"\n    self.window = window\n    self.failures = collections.deque()\n    self.first_failure_time = None",
                "def add_failure(self):\n    \"\"\"\n    Add a failure event with the current timestamp.\n    \"\"\"\n    failure_time = time.time()\n\n    if not self.first_failure_time:\n        self.first_failure_time = failure_time\n\n    self.failures.append(failure_time)",
                "def num_failures(self):\n    \"\"\"\n    Return the number of failures in the window.\n    \"\"\"\n    min_time = time.time() - self.window\n\n    while self.failures and fix_time(self.failures[0]) < min_time:\n        self.failures.popleft()\n\n    return len(self.failures)",
                "def clear(self):\n    \"\"\"\n    Clear the failure queue.\n    \"\"\"\n    self.failures.clear()",
                "def __init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None,\n             params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None,\n             tracking_url=None):\n    self.id = task_id\n    self.stakeholders = set()  # workers ids that are somehow related to this task (i.e. don't prune while any of these workers are still active)\n    self.workers = set()  # workers ids that can perform task - task is 'BROKEN' if none of these workers are active\n    if deps is None:\n        self.deps = set()\n    else:\n        self.deps = set(deps)\n    self.status = status  # PENDING, RUNNING, FAILED or DONE\n    self.time = time.time()  # Timestamp when task was first added\n    self.retry = None\n    self.remove = None\n    self.worker_running = None  # the worker id that is currently running the task or None\n    self.time_running = None  # Timestamp when picked up by worker\n    self.expl = None\n    self.priority = priority\n    self.resources = _get_default(resources, {})\n    self.family = family\n    self.module = module\n    self.params = _get_default(params, {})\n    self.disable_failures = disable_failures\n    self.disable_hard_timeout = disable_hard_timeout\n    self.failures = Failures(disable_window)\n    self.tracking_url = tracking_url\n    self.scheduler_disable_time = None\n    self.runnable = False",
                "def __repr__(self):\n    return \"Task(%r)\" % vars(self)",
                "def add_failure(self):\n    self.failures.add_failure()",
                "def has_excessive_failures(self):\n    if (self.failures.first_failure_time is not None and\n            self.disable_hard_timeout):\n        if (time.time() >= self.failures.first_failure_time +\n                self.disable_hard_timeout):\n            return True\n\n    if self.failures.num_failures() >= self.disable_failures:\n        return True\n\n    return False",
                "def can_disable(self):\n    return (self.disable_failures is not None or\n            self.disable_hard_timeout is not None)",
                "def __init__(self, worker_id, last_active=None):\n    self.id = worker_id\n    self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n    self.last_active = last_active or time.time()  # seconds since epoch\n    self.last_get_work = None\n    self.started = time.time()  # seconds since epoch\n    self.tasks = set()  # task objects\n    self.info = {}",
                "def add_info(self, info):\n    self.info.update(info)",
                "def update(self, worker_reference, get_work=False):\n    if worker_reference:\n        self.reference = worker_reference\n    self.last_active = time.time()\n    if get_work:\n        self.last_get_work = time.time()",
                "def prune(self, config):\n    # Delete workers that haven't said anything for a while (probably killed)\n    if self.last_active + config.worker_disconnect_delay < time.time():\n        return True",
                "def get_pending_tasks(self, state):\n    \"\"\"\n    Get PENDING (and RUNNING) tasks for this worker.\n\n    You have to pass in the state for optimization reasons.\n    \"\"\"\n    if len(self.tasks) < state.num_pending_tasks():\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                self.tasks)\n    else:\n        return state.get_pending_tasks()",
                "def is_trivial_worker(self, state):\n    \"\"\"\n    If it's not an assistant having only tasks that are without\n    requirements.\n\n    We have to pass the state parameter for optimization reasons.\n    \"\"\"\n    if self.assistant:\n        return False\n    return all(not task.resources for task in self.get_pending_tasks(state))",
                "@property\ndef assistant(self):\n    return self.info.get('assistant', False)",
                "def __str__(self):\n    return self.id",
                "def __init__(self, state_path):\n    self._state_path = state_path\n    self._tasks = {}  # map from id to a Task object\n    self._status_tasks = collections.defaultdict(dict)\n    self._active_workers = {}  # map from id to a Worker object",
                "def get_state(self):\n    return self._tasks, self._active_workers",
                "def set_state(self, state):\n    self._tasks, self._active_workers = state",
                "def dump(self):\n    try:\n        with open(self._state_path, 'wb') as fobj:\n            pickle.dump(self.get_state(), fobj)\n    except IOError:\n        logger.warning(\"Failed saving scheduler state\", exc_info=1)\n    else:\n        logger.info(\"Saved state in %s\", self._state_path)",
                "def load(self):\n    if os.path.exists(self._state_path):\n        logger.info(\"Attempting to load state from %s\", self._state_path)\n        try:\n            with open(self._state_path, 'rb') as fobj:\n                state = pickle.load(fobj)\n        except BaseException:\n            logger.exception(\"Error when loading state. Starting from clean slate.\")\n            return\n\n        self.set_state(state)\n        self._status_tasks = collections.defaultdict(dict)\n        for task in six.itervalues(self._tasks):\n            self._status_tasks[task.status][task.id] = task\n\n        # Convert from old format\n        # TODO: this is really ugly, we need something more future-proof\n        # Every time we add an attribute to the Worker or Task class, this\n        # code needs to be updated\n\n        # Compatibility since 2014-06-02\n        for k, v in six.iteritems(self._active_workers):\n            if isinstance(v, float):\n                self._active_workers[k] = Worker(worker_id=k, last_active=v)\n\n        # Compatibility since 2015-05-28\n        if any(not hasattr(w, 'tasks') for k, w in six.iteritems(self._active_workers)):\n            # If you load from an old format where Workers don't contain tasks.\n            for k, worker in six.iteritems(self._active_workers):\n                worker.tasks = set()\n            for task in six.itervalues(self._tasks):\n                for worker_id in task.workers:\n                    self._active_workers[worker_id].tasks.add(task)\n\n        # Compatibility since 2015-04-28\n        if any(not hasattr(t, 'disable_hard_timeout') for t in six.itervalues(self._tasks)):\n            for t in six.itervalues(self._tasks):\n                t.disable_hard_timeout = None\n    else:\n        logger.info(\"No prior state file exists at %s. Starting with clean slate\", self._state_path)",
                "def get_active_tasks(self, status=None):\n    if status:\n        for task in six.itervalues(self._status_tasks[status]):\n            yield task\n    else:\n        for task in six.itervalues(self._tasks):\n            yield task",
                "def get_running_tasks(self):\n    return six.itervalues(self._status_tasks[RUNNING])",
                "def get_pending_tasks(self):\n    return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status])\n                                         for status in [PENDING, RUNNING])",
                "def num_pending_tasks(self):\n    \"\"\"\n    Return how many tasks are PENDING + RUNNING. O(1).\n    \"\"\"\n    return len(self._status_tasks[PENDING]) + len(self._status_tasks[RUNNING])",
                "def get_task(self, task_id, default=None, setdefault=None):\n    if setdefault:\n        task = self._tasks.setdefault(task_id, setdefault)\n        self._status_tasks[task.status][task.id] = task\n        return task\n    else:\n        return self._tasks.get(task_id, default)",
                "def has_task(self, task_id):\n    return task_id in self._tasks",
                "def re_enable(self, task, config=None):\n    task.scheduler_disable_time = None\n    task.failures.clear()\n    if config:\n        self.set_status(task, FAILED, config)\n        task.failures.clear()",
                "def set_status(self, task, new_status, config=None):\n    if new_status == FAILED:\n        assert config is not None\n\n    if new_status == DISABLED and task.status == RUNNING:\n        return\n\n    if task.status == DISABLED:\n        if new_status == DONE:\n            self.re_enable(task)\n\n        # don't allow workers to override a scheduler disable\n        elif task.scheduler_disable_time is not None:\n            return\n\n    if new_status == FAILED and task.can_disable():\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = DISABLED\n            notifications.send_error_email(\n                'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                '{task} failed {failures} times in the last {window} seconds, so it is being '\n                'disabled for {persist} seconds'.format(\n                    failures=config.disable_failures,\n                    task=task.id,\n                    window=config.disable_window,\n                    persist=config.disable_persist,\n                ))\n    elif new_status == DISABLED:\n        task.scheduler_disable_time = None\n\n    self._status_tasks[task.status].pop(task.id)\n    self._status_tasks[new_status][task.id] = task\n    task.status = new_status",
                "def fail_dead_worker_task(self, task, config, assistants):\n    # If a running worker disconnects, tag all its jobs as FAILED and subject it to the same retry logic\n    if task.status == RUNNING and task.worker_running and task.worker_running not in task.stakeholders | assistants:\n        logger.info(\"Task %r is marked as running by disconnected worker %r -> marking as \"\n                    \"FAILED with retry delay of %rs\", task.id, task.worker_running,\n                    config.retry_delay)\n        task.worker_running = None\n        self.set_status(task, FAILED, config)\n        task.retry = time.time() + config.retry_delay",
                "def prune(self, task, config):\n    remove = False\n\n    # Mark tasks with no remaining active stakeholders for deletion\n    if not task.stakeholders:\n        if task.remove is None:\n            logger.info(\"Task %r has stakeholders %r but none remain connected -> will remove \"\n                        \"task in %s seconds\", task.id, task.stakeholders, config.remove_delay)\n            task.remove = time.time() + config.remove_delay\n\n    # Re-enable task after the disable time expires\n    if task.status == DISABLED and task.scheduler_disable_time is not None:\n        if time.time() - fix_time(task.scheduler_disable_time) > config.disable_persist:\n            self.re_enable(task, config)\n\n    # Remove tasks that have no stakeholders\n    if task.remove and time.time() > task.remove:\n        logger.info(\"Removing task %r (no connected stakeholders)\", task.id)\n        remove = True\n\n    # Reset FAILED tasks to PENDING if max timeout is reached, and retry delay is >= 0\n    if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\n        self.set_status(task, PENDING, config)\n\n    return remove",
                "def inactivate_tasks(self, delete_tasks):\n    # The terminology is a bit confusing: we used to \"delete\" tasks when they became inactive,\n    # but with a pluggable state storage, you might very well want to keep some history of\n    # older tasks as well. That's why we call it \"inactivate\" (as in the verb)\n    for task in delete_tasks:\n        task_obj = self._tasks.pop(task)\n        self._status_tasks[task_obj.status].pop(task)",
                "def get_active_workers(self, last_active_lt=None, last_get_work_gt=None):\n    for worker in six.itervalues(self._active_workers):\n        if last_active_lt is not None and worker.last_active >= last_active_lt:\n            continue\n        last_get_work = getattr(worker, 'last_get_work', None)\n        if last_get_work_gt is not None and (\n                last_get_work is None or last_get_work <= last_get_work_gt):\n            continue\n        yield worker",
                "def get_assistants(self, last_active_lt=None):\n    return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))",
                "def get_worker_ids(self):\n    return self._active_workers.keys()  # only used for unit tests",
                "def get_worker(self, worker_id):\n    return self._active_workers.setdefault(worker_id, Worker(worker_id))",
                "def inactivate_workers(self, delete_workers):\n    # Mark workers as inactive\n    for worker in delete_workers:\n        self._active_workers.pop(worker)\n\n    # remove workers from tasks\n    for task in self.get_active_tasks():\n        task.stakeholders.difference_update(delete_workers)\n        task.workers.difference_update(delete_workers)",
                "def get_necessary_tasks(self):\n    necessary_tasks = set()\n    for task in self.get_active_tasks():\n        if task.status not in (DONE, DISABLED) or \\\n                getattr(task, 'scheduler_disable_time', None) is not None:\n            necessary_tasks.update(task.deps)\n            necessary_tasks.add(task.id)\n    return necessary_tasks",
                "def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n    \"\"\"\n    Keyword Arguments:\n    :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n    :param resources: a dict of str->int constraints\n    :param task_history_override: ignore config and use this object as the task history\n    \"\"\"\n    self._config = config or scheduler(**kwargs)\n    self._state = SimpleTaskState(self._config.state_path)\n\n    if task_history_impl:\n        self._task_history = task_history_impl\n    elif self._config.record_task_history:\n        from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n        self._task_history = db_task_history.DbTaskHistory()\n    else:\n        self._task_history = history.NopHistory()\n    self._resources = resources or configuration.get_config().getintdict('resources')  # TODO: Can we make this a Parameter?\n    self._make_task = functools.partial(\n        Task, disable_failures=self._config.disable_failures,\n        disable_hard_timeout=self._config.disable_hard_timeout,\n        disable_window=self._config.disable_window)\n    self._worker_requests = {}",
                "def load(self):\n    self._state.load()",
                "def dump(self):\n    self._state.dump()",
                "def prune(self):\n    logger.info(\"Starting pruning of task graph\")\n    remove_workers = []\n    for worker in self._state.get_active_workers():\n        if worker.prune(self._config):\n            logger.info(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n\n    self._state.inactivate_workers(remove_workers)\n\n    assistant_ids = set(w.id for w in self._state.get_assistants())\n    remove_tasks = []\n\n    if assistant_ids:\n        necessary_tasks = self._state.get_necessary_tasks()\n    else:\n        necessary_tasks = ()\n\n    for task in self._state.get_active_tasks():\n        self._state.fail_dead_worker_task(task, self._config, assistant_ids)\n        if task.id not in necessary_tasks and self._state.prune(task, self._config):\n            remove_tasks.append(task.id)\n\n    self._state.inactivate_tasks(remove_tasks)\n\n    logger.info(\"Done pruning task graph\")",
                "def update(self, worker_id, worker_reference=None, get_work=False):\n    \"\"\"\n    Keep track of whenever the worker was last active.\n    \"\"\"\n    worker = self._state.get_worker(worker_id)\n    worker.update(worker_reference, get_work=get_work)",
                "def _update_priority(self, task, prio, worker):\n    \"\"\"\n    Update priority of the given task.\n\n    Priority can only be increased.\n    If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n    \"\"\"\n    task.priority = prio = max(prio, task.priority)\n    for dep in task.deps or []:\n        t = self._state.get_task(dep)\n        if t is not None and prio > t.priority:\n            self._update_priority(t, prio, worker)",
                "def add_task(self, task_id=None, status=PENDING, runnable=True,\n             deps=None, new_deps=None, expl=None, resources=None,\n             priority=0, family='', module=None, params=None,\n             assistant=False, tracking_url=None, **kwargs):\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    worker_id = kwargs['worker']\n    self.update(worker_id)\n\n    task = self._state.get_task(task_id, setdefault=self._make_task(\n        task_id=task_id, status=PENDING, deps=deps, resources=resources,\n        priority=priority, family=family, module=module, params=params))\n\n    # for setting priority, we'll sometimes create tasks with unset family and params\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n\n    if tracking_url is not None or task.status != RUNNING:\n        task.tracking_url = tracking_url\n\n    if task.remove is not None:\n        task.remove = None  # unmark task for removal so it isn't removed after being added\n\n    if expl is not None:\n        task.expl = expl\n\n    if not (task.status == RUNNING and status == PENDING) or new_deps:\n        # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n        if status == PENDING or status != task.status:\n            # Update the DB only if there was a acctual change, to prevent noise.\n            # We also check for status == PENDING b/c that's the default value\n            # (so checking for status != task.status woule lie)\n            self._update_task_history(task, status)\n        self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n        if status == FAILED:\n            task.retry = self._retry_time(task, self._config)\n\n    if deps is not None:\n        task.deps = set(deps)\n\n    if new_deps is not None:\n        task.deps.update(new_deps)\n\n    if resources is not None:\n        task.resources = resources\n\n    if not assistant:\n        task.stakeholders.add(worker_id)\n\n        # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n        # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n\n    self._update_priority(task, priority, worker_id)\n\n    if runnable:\n        task.workers.add(worker_id)\n        self._state.get_worker(worker_id).tasks.add(task)\n        task.runnable = runnable",
                "def add_worker(self, worker, info, **kwargs):\n    self._state.get_worker(worker).add_info(info)",
                "def update_resources(self, **resources):\n    if self._resources is None:\n        self._resources = {}\n    self._resources.update(resources)",
                "def _has_resources(self, needed_resources, used_resources):\n    if needed_resources is None:\n        return True\n\n    available_resources = self._resources or {}\n    for resource, amount in six.iteritems(needed_resources):\n        if amount + used_resources[resource] > available_resources.get(resource, 1):\n            return False\n    return True",
                "def _used_resources(self):\n    used_resources = collections.defaultdict(int)\n    if self._resources is not None:\n        for task in self._state.get_active_tasks():\n            if task.status == RUNNING and task.resources:\n                for resource, amount in six.iteritems(task.resources):\n                    used_resources[resource] += amount\n    return used_resources",
                "def _rank(self, task):\n    \"\"\"\n    Return worker's rank function for task scheduling.\n\n    :return:\n    \"\"\"\n\n    return task.priority, -task.time",
                "def _schedulable(self, task):\n    if task.status != PENDING:\n        return False\n    for dep in task.deps:\n        dep_task = self._state.get_task(dep, default=None)\n        if dep_task is None or dep_task.status != DONE:\n            return False\n    return True",
                "def _retry_time(self, task, config):\n    return time.time() + config.retry_delay",
                "def get_work(self, host=None, assistant=False, **kwargs):\n    # TODO: remove any expired nodes\n\n    # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n    # resources.\n\n    # Resource checking looks both at currently available resources and at which resources would\n    # be available if all running tasks died and we rescheduled all workers greedily. We do both\n    # checks in order to prevent a worker with many low-priority tasks from starving other\n    # workers with higher priority tasks that share the same resources.\n\n    # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n    # nothing it can wait for\n\n    if self._config.prune_on_get_work:\n        self.prune()\n\n    worker_id = kwargs['worker']\n    # Return remaining tasks that have no FAILED descendants\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    best_task = None\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n\n    worker = self._state.get_worker(worker_id)\n    if worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_pending_tasks(self._state)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()  # If there's no resources, then they can grab any task\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        activity_limit = time.time() - self._config.worker_disconnect_delay\n        active_workers = self._state.get_active_workers(last_get_work_gt=activity_limit)\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                              for worker in active_workers)\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n\n    for task in tasks:\n        upstream_status = self._upstream_status(task.id, upstream_table)\n        in_workers = (assistant and getattr(task, 'runnable', bool(task.workers))) or worker_id in task.workers\n        if task.status == RUNNING and in_workers:\n            # Return a list of currently running tasks to the client,\n            # makes it easier to troubleshoot\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n\n        if task.status == PENDING and in_workers and upstream_status != UPSTREAM_DISABLED:\n            locally_pending_tasks += 1\n            if len(task.workers) == 1 and not assistant:\n                n_unique_pending += 1\n\n        if best_task:\n            continue\n\n        if task.status == RUNNING and (task.worker_running in greedy_workers):\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems((task.resources or {})):\n                greedy_resources[resource] += amount\n\n        if self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        # use up a worker\n                        greedy_workers[task_worker] -= 1\n\n                        # keep track of the resources used in greedy scheduling\n                        for resource, amount in six.iteritems((task.resources or {})):\n                            greedy_resources[resource] += amount\n\n                        break\n\n    reply = {'n_pending_tasks': locally_pending_tasks,\n             'running_tasks': running_tasks,\n             'task_id': None,\n             'n_unique_pending': n_unique_pending}\n\n    if best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n\n    return reply",
                "def ping(self, **kwargs):\n    worker_id = kwargs['worker']\n    self.update(worker_id)",
                "def _upstream_status(self, task_id, upstream_status_table):\n    if task_id in upstream_status_table:\n        return upstream_status_table[task_id]\n    elif self._state.has_task(task_id):\n        task_stack = [task_id]\n\n        while task_stack:\n            dep_id = task_stack.pop()\n            if self._state.has_task(dep_id):\n                dep = self._state.get_task(dep_id)\n                if dep.status == DONE:\n                    continue\n                if dep_id not in upstream_status_table:\n                    if dep.status == PENDING and dep.deps:\n                        task_stack = task_stack + [dep_id] + list(dep.deps)\n                        upstream_status_table[dep_id] = ''  # will be updated postorder\n                    else:\n                        dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                        upstream_status_table[dep_id] = dep_status\n                elif upstream_status_table[dep_id] == '' and dep.deps:\n                    # This is the postorder update step when we set the\n                    # status based on the previously calculated child elements\n                    upstream_status = [upstream_status_table.get(a_task_id, '') for a_task_id in dep.deps]\n                    upstream_status.append('')  # to handle empty list\n                    status = max(upstream_status, key=UPSTREAM_SEVERITY_KEY)\n                    upstream_status_table[dep_id] = status\n        return upstream_status_table[dep_id]",
                "def _serialize_task(self, task_id, include_deps=True):\n    task = self._state.get_task(task_id)\n    ret = {\n        'status': task.status,\n        'workers': list(task.workers),\n        'worker_running': task.worker_running,\n        'time_running': getattr(task, \"time_running\", None),\n        'start_time': task.time,\n        'params': task.params,\n        'name': task.family,\n        'priority': task.priority,\n        'resources': task.resources,\n        'tracking_url': getattr(task, \"tracking_url\", None),\n    }\n    if task.status == DISABLED:\n        ret['re_enable_able'] = task.scheduler_disable_time is not None\n    if include_deps:\n        ret['deps'] = list(task.deps)\n    return ret",
                "def graph(self, **kwargs):\n    self.prune()\n    serialized = {}\n    for task in self._state.get_active_tasks():\n        serialized[task.id] = self._serialize_task(task.id)\n    return serialized",
                "def _recurse_deps(self, task_id, serialized):\n    if task_id not in serialized:\n        task = self._state.get_task(task_id)\n        if task is None or not task.family:\n            logger.warn('Missing task for id [%s]', task_id)\n\n            # try to infer family and params from task_id\n            try:\n                family, _, param_str = task_id.rstrip(')').partition('(')\n                params = dict(param.split('=') for param in param_str.split(', '))\n            except BaseException:\n                family, params = '', {}\n            serialized[task_id] = {\n                'deps': [],\n                'status': UNKNOWN,\n                'workers': [],\n                'start_time': UNKNOWN,\n                'params': params,\n                'name': family,\n                'priority': 0,\n            }\n        else:\n            serialized[task_id] = self._serialize_task(task_id)\n            for dep in task.deps:\n                self._recurse_deps(dep, serialized)",
                "def dep_graph(self, task_id, **kwargs):\n    self.prune()\n    serialized = {}\n    if self._state.has_task(task_id):\n        self._recurse_deps(task_id, serialized)\n    return serialized",
                "def task_list(self, status, upstream_status, limit=True, search=None, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by status.\n    \"\"\"\n    self.prune()\n    result = {}\n    upstream_status_table = {}  # used to memoize upstream status\n    if search is None:\n        filter_func = lambda _: True\n    else:\n        terms = search.split()\n        filter_func = lambda t: all(term in t.id for term in terms)\n    for task in filter(filter_func, self._state.get_active_tasks(status)):\n        if (task.status != PENDING or not upstream_status or\n                upstream_status == self._upstream_status(task.id, upstream_status_table)):\n            serialized = self._serialize_task(task.id, False)\n            result[task.id] = serialized\n    if limit and len(result) > self._config.max_shown_tasks:\n        return {'num_tasks': len(result)}\n    return result",
                "def worker_list(self, include_running=True, **kwargs):\n    self.prune()\n    workers = [\n        dict(\n            name=worker.id,\n            last_active=worker.last_active,\n            started=getattr(worker, 'started', None),\n            **worker.info\n        ) for worker in self._state.get_active_workers()]\n    workers.sort(key=lambda worker: worker['started'], reverse=True)\n    if include_running:\n        running = collections.defaultdict(dict)\n        num_pending = collections.defaultdict(int)\n        num_uniques = collections.defaultdict(int)\n        for task in self._state.get_pending_tasks():\n            if task.status == RUNNING and task.worker_running:\n                running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n            elif task.status == PENDING:\n                for worker in task.workers:\n                    num_pending[worker] += 1\n                if len(task.workers) == 1:\n                    num_uniques[list(task.workers)[0]] += 1\n        for worker in workers:\n            tasks = running[worker['name']]\n            worker['num_running'] = len(tasks)\n            worker['num_pending'] = num_pending[worker['name']]\n            worker['num_uniques'] = num_uniques[worker['name']]\n            worker['running'] = tasks\n    return workers",
                "def inverse_dep_graph(self, task_id, **kwargs):\n    self.prune()\n    serialized = {}\n    if self._state.has_task(task_id):\n        self._traverse_inverse_deps(task_id, serialized)\n    return serialized",
                "def _traverse_inverse_deps(self, task_id, serialized):\n    stack = [task_id]\n    serialized[task_id] = self._serialize_task(task_id)\n    while len(stack) > 0:\n        curr_id = stack.pop()\n        for task in self._state.get_active_tasks():\n            if curr_id in task.deps:\n                serialized[curr_id][\"deps\"].append(task.id)\n                if task.id not in serialized:\n                    serialized[task.id] = self._serialize_task(task.id)\n                    serialized[task.id][\"deps\"] = []\n                    stack.append(task.id)",
                "def task_search(self, task_str, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by task_id.\n\n    :param task_str:\n    :return:\n    \"\"\"\n    self.prune()\n    result = collections.defaultdict(dict)\n    for task in self._state.get_active_tasks():\n        if task.id.find(task_str) != -1:\n            serialized = self._serialize_task(task.id, False)\n            result[task.status][task.id] = serialized\n    return result",
                "def re_enable_task(self, task_id):\n    serialized = {}\n    task = self._state.get_task(task_id)\n    if task and task.status == DISABLED and task.scheduler_disable_time:\n        self._state.re_enable(task, self._config)\n        serialized = self._serialize_task(task_id)\n    return serialized",
                "def fetch_error(self, task_id, **kwargs):\n    if self._state.has_task(task_id):\n        return {\"taskId\": task_id, \"error\": self._state.get_task(task_id).expl}\n    else:\n        return {\"taskId\": task_id, \"error\": \"\"}",
                "def _update_task_history(self, task, status, host=None):\n    try:\n        if status == DONE or status == FAILED:\n            successful = (status == DONE)\n            self._task_history.task_finished(task, successful)\n        elif status == PENDING:\n            self._task_history.task_scheduled(task)\n        elif status == RUNNING:\n            self._task_history.task_started(task, host)\n    except BaseException:\n        logger.warning(\"Error saving Task history\", exc_info=True)",
                "@property\ndef task_history(self):\n    # Used by server.py to expose the calls\n    return self._task_history"
            ],
            "inscope_function_signatures": [
                "fix_time(x)",
                "_get_default(x, default)",
                "__init__(self, window)",
                "add_failure(self)",
                "num_failures(self)",
                "clear(self)",
                "__init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None, params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None, tracking_url=None)",
                "__repr__(self)",
                "add_failure(self)",
                "has_excessive_failures(self)",
                "can_disable(self)",
                "__init__(self, worker_id, last_active=None)",
                "add_info(self, info)",
                "update(self, worker_reference, get_work=False)",
                "prune(self, config)",
                "get_pending_tasks(self, state)",
                "is_trivial_worker(self, state)",
                "assistant(self)",
                "__str__(self)",
                "__init__(self, state_path)",
                "get_state(self)",
                "set_state(self, state)",
                "dump(self)",
                "load(self)",
                "get_active_tasks(self, status=None)",
                "get_running_tasks(self)",
                "get_pending_tasks(self)",
                "num_pending_tasks(self)",
                "get_task(self, task_id, default=None, setdefault=None)",
                "has_task(self, task_id)",
                "re_enable(self, task, config=None)",
                "set_status(self, task, new_status, config=None)",
                "fail_dead_worker_task(self, task, config, assistants)",
                "prune(self, task, config)",
                "inactivate_tasks(self, delete_tasks)",
                "get_active_workers(self, last_active_lt=None, last_get_work_gt=None)",
                "get_assistants(self, last_active_lt=None)",
                "get_worker_ids(self)",
                "get_worker(self, worker_id)",
                "inactivate_workers(self, delete_workers)",
                "get_necessary_tasks(self)",
                "__init__(self, config=None, resources=None, task_history_impl=None, **kwargs)",
                "load(self)",
                "dump(self)",
                "prune(self)",
                "update(self, worker_id, worker_reference=None, get_work=False)",
                "_update_priority(self, task, prio, worker)",
                "add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, tracking_url=None, **kwargs)",
                "add_worker(self, worker, info, **kwargs)",
                "update_resources(self, **resources)",
                "_has_resources(self, needed_resources, used_resources)",
                "_used_resources(self)",
                "_rank(self, task)",
                "_schedulable(self, task)",
                "_retry_time(self, task, config)",
                "get_work(self, host=None, assistant=False, **kwargs)",
                "ping(self, **kwargs)",
                "_upstream_status(self, task_id, upstream_status_table)",
                "_serialize_task(self, task_id, include_deps=True)",
                "graph(self, **kwargs)",
                "_recurse_deps(self, task_id, serialized)",
                "dep_graph(self, task_id, **kwargs)",
                "task_list(self, status, upstream_status, limit=True, search=None, **kwargs)",
                "worker_list(self, include_running=True, **kwargs)",
                "inverse_dep_graph(self, task_id, **kwargs)",
                "_traverse_inverse_deps(self, task_id, serialized)",
                "task_search(self, task_str, **kwargs)",
                "re_enable_task(self, task_id)",
                "fetch_error(self, task_id, **kwargs)",
                "_update_task_history(self, task, status, host=None)",
                "task_history(self)"
            ],
            "variables_in_file": {
                "ImportError": [
                    27
                ],
                "logger": [
                    320,
                    352,
                    550,
                    456,
                    554,
                    45,
                    432,
                    1021,
                    882,
                    308,
                    310,
                    315,
                    445,
                    574
                ],
                "logging.getLogger": [
                    45
                ],
                "logging": [
                    45
                ],
                "object": [
                    168,
                    48,
                    114,
                    282,
                    222
                ],
                "add_task": [
                    54
                ],
                "NotImplemented": [
                    56,
                    54,
                    55
                ],
                "get_work": [
                    243,
                    581,
                    55
                ],
                "ping": [
                    56
                ],
                "UPSTREAM_RUNNING": [
                    73,
                    65,
                    58
                ],
                "UPSTREAM_MISSING_INPUT": [
                    66,
                    59,
                    74
                ],
                "UPSTREAM_FAILED": [
                    72,
                    67,
                    60
                ],
                "UPSTREAM_DISABLED": [
                    772,
                    75,
                    68,
                    61
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    70,
                    63
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    70,
                    847
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    70
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    840,
                    71
                ],
                "FAILED": [
                    390,
                    72,
                    394,
                    460,
                    436,
                    1013,
                    408,
                    639
                ],
                "RUNNING": [
                    258,
                    807,
                    73,
                    810,
                    363,
                    780,
                    397,
                    622,
                    367,
                    431,
                    689,
                    947,
                    373,
                    631,
                    1018,
                    763
                ],
                "PENDING": [
                    704,
                    258,
                    611,
                    772,
                    836,
                    74,
                    461,
                    367,
                    596,
                    373,
                    949,
                    631,
                    1016,
                    633,
                    924,
                    638
                ],
                "DISABLED": [
                    865,
                    450,
                    422,
                    1000,
                    75,
                    397,
                    400,
                    505,
                    412
                ],
                "Config": [
                    79
                ],
                "retry_delay": [
                    82
                ],
                "parameter.FloatParameter": [
                    82,
                    83,
                    84
                ],
                "parameter": [
                    97,
                    98,
                    100,
                    102,
                    82,
                    83,
                    84,
                    85,
                    89,
                    91,
                    93,
                    95
                ],
                "remove_delay": [
                    83
                ],
                "worker_disconnect_delay": [
                    84
                ],
                "state_path": [
                    292,
                    85
                ],
                "parameter.Parameter": [
                    85
                ],
                "disable_window": [
                    89,
                    194
                ],
                "parameter.IntParameter": [
                    97,
                    89,
                    91,
                    93,
                    95
                ],
                "dict": [
                    96,
                    324,
                    294,
                    935,
                    749,
                    943,
                    755,
                    990,
                    887,
                    90,
                    92,
                    94
                ],
                "disable_failures": [
                    192,
                    91
                ],
                "disable_hard_timeout": [
                    193,
                    93
                ],
                "disable_persist": [
                    95
                ],
                "max_shown_tasks": [
                    97
                ],
                "prune_done_tasks": [
                    98
                ],
                "parameter.BoolParameter": [
                    98,
                    100,
                    102
                ],
                "record_task_history": [
                    100
                ],
                "prune_on_get_work": [
                    102
                ],
                "isinstance": [
                    108,
                    335
                ],
                "x": [
                    162,
                    163,
                    108,
                    109,
                    111
                ],
                "datetime.datetime": [
                    108
                ],
                "datetime": [
                    108
                ],
                "time.mktime": [
                    109
                ],
                "time": [
                    136,
                    147,
                    411,
                    809,
                    181,
                    437,
                    447,
                    451,
                    455,
                    713,
                    460,
                    208,
                    230,
                    232,
                    109,
                    753,
                    242,
                    244,
                    248
                ],
                "x.timetuple": [
                    109
                ],
                "self.window": [
                    128,
                    147
                ],
                "self": [
                    1026,
                    526,
                    527,
                    530,
                    531,
                    533,
                    535,
                    536,
                    537,
                    538,
                    539,
                    540,
                    541,
                    544,
                    547,
                    552,
                    553,
                    554,
                    557,
                    559,
                    563,
                    567,
                    568,
                    569,
                    572,
                    580,
                    592,
                    594,
                    608,
                    610,
                    637,
                    638,
                    128,
                    129,
                    130,
                    640,
                    138,
                    139,
                    141,
                    657,
                    147,
                    660,
                    149,
                    150,
                    152,
                    664,
                    668,
                    158,
                    671,
                    672,
                    673,
                    679,
                    173,
                    174,
                    175,
                    687,
                    177,
                    688,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    707,
                    200,
                    203,
                    206,
                    207,
                    208,
                    209,
                    212,
                    729,
                    218,
                    219,
                    730,
                    734,
                    736,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    234,
                    745,
                    746,
                    237,
                    747,
                    751,
                    752,
                    241,
                    242,
                    753,
                    244,
                    754,
                    758,
                    248,
                    761,
                    766,
                    257,
                    259,
                    270,
                    272,
                    785,
                    786,
                    276,
                    279,
                    292,
                    293,
                    294,
                    295,
                    807,
                    298,
                    810,
                    301,
                    305,
                    306,
                    821,
                    310,
                    314,
                    315,
                    826,
                    317,
                    831,
                    832,
                    323,
                    324,
                    325,
                    326,
                    334,
                    336,
                    339,
                    852,
                    341,
                    343,
                    345,
                    348,
                    349,
                    352,
                    356,
                    359,
                    872,
                    874,
                    363,
                    875,
                    366,
                    880,
                    373,
                    377,
                    378,
                    381,
                    384,
                    900,
                    390,
                    902,
                    905,
                    907,
                    908,
                    402,
                    915,
                    923,
                    925,
                    926,
                    928,
                    933,
                    425,
                    426,
                    940,
                    946,
                    436,
                    948,
                    963,
                    452,
                    965,
                    966,
                    971,
                    461,
                    974,
                    978,
                    470,
                    471,
                    474,
                    989,
                    991,
                    993,
                    484,
                    487,
                    999,
                    1001,
                    490,
                    1002,
                    1006,
                    495,
                    1007,
                    498,
                    1015,
                    504,
                    1017,
                    1019
                ],
                "window": [
                    128
                ],
                "self.failures": [
                    129,
                    194,
                    203,
                    141,
                    206,
                    208,
                    212,
                    149,
                    150,
                    152,
                    158
                ],
                "collections.deque": [
                    129
                ],
                "collections": [
                    129,
                    324,
                    294,
                    742,
                    748,
                    686,
                    943,
                    944,
                    945,
                    990
                ],
                "self.first_failure_time": [
                    130,
                    139,
                    138
                ],
                "failure_time": [
                    136,
                    139,
                    141
                ],
                "time.time": [
                    451,
                    230,
                    455,
                    136,
                    232,
                    713,
                    809,
                    460,
                    208,
                    753,
                    242,
                    147,
                    244,
                    181,
                    437,
                    248,
                    411,
                    447
                ],
                "self.failures.append": [
                    141
                ],
                "min_time": [
                    147,
                    149
                ],
                "fix_time": [
                    451,
                    149
                ],
                "self.failures.popleft": [
                    150
                ],
                "len": [
                    928,
                    257,
                    929,
                    774,
                    972,
                    373,
                    952,
                    152,
                    956
                ],
                "self.failures.clear": [
                    158
                ],
                "default": [
                    381,
                    165
                ],
                "self.id": [
                    228,
                    173,
                    279
                ],
                "task_id": [
                    384,
                    900,
                    907,
                    908,
                    173,
                    824,
                    825,
                    826,
                    827,
                    965,
                    966,
                    970,
                    971,
                    852,
                    610,
                    611,
                    999,
                    1002,
                    1006,
                    879,
                    880,
                    1007,
                    882,
                    1009,
                    886,
                    377,
                    890,
                    381
                ],
                "self.stakeholders": [
                    174
                ],
                "set": [
                    643,
                    233,
                    174,
                    175,
                    559,
                    177,
                    179,
                    342,
                    503
                ],
                "self.workers": [
                    175
                ],
                "deps": [
                    642,
                    611,
                    643,
                    176,
                    179
                ],
                "self.deps": [
                    177,
                    179
                ],
                "self.status": [
                    180
                ],
                "status": [
                    355,
                    356,
                    366,
                    367,
                    847,
                    848,
                    180,
                    1013,
                    1014,
                    631,
                    1016,
                    633,
                    1018,
                    923,
                    637,
                    638,
                    639
                ],
                "self.time": [
                    181
                ],
                "self.retry": [
                    182
                ],
                "self.remove": [
                    183
                ],
                "self.worker_running": [
                    184
                ],
                "self.time_running": [
                    185
                ],
                "self.expl": [
                    186
                ],
                "self.priority": [
                    187
                ],
                "priority": [
                    657,
                    187,
                    612,
                    660
                ],
                "self.resources": [
                    188
                ],
                "_get_default": [
                    620,
                    188,
                    191
                ],
                "resources": [
                    673,
                    611,
                    648,
                    649,
                    536,
                    188
                ],
                "self.family": [
                    189
                ],
                "family": [
                    896,
                    612,
                    616,
                    886,
                    889,
                    189
                ],
                "self.module": [
                    190
                ],
                "module": [
                    618,
                    612,
                    190
                ],
                "self.params": [
                    191
                ],
                "params": [
                    612,
                    620,
                    895,
                    887,
                    889,
                    191
                ],
                "self.disable_failures": [
                    192,
                    218,
                    212
                ],
                "self.disable_hard_timeout": [
                    193,
                    219,
                    209,
                    207
                ],
                "Failures": [
                    194
                ],
                "self.tracking_url": [
                    195
                ],
                "tracking_url": [
                    195,
                    622,
                    623
                ],
                "self.scheduler_disable_time": [
                    196
                ],
                "self.runnable": [
                    197
                ],
                "vars": [
                    200
                ],
                "self.failures.add_failure": [
                    203
                ],
                "self.failures.first_failure_time": [
                    208,
                    206
                ],
                "self.failures.num_failures": [
                    212
                ],
                "worker_id": [
                    652,
                    658,
                    660,
                    789,
                    663,
                    664,
                    808,
                    820,
                    821,
                    580,
                    344,
                    345,
                    732,
                    734,
                    607,
                    608,
                    736,
                    228,
                    745,
                    490,
                    762
                ],
                "self.reference": [
                    241,
                    229
                ],
                "self.last_active": [
                    248,
                    242,
                    230
                ],
                "last_active": [
                    230
                ],
                "self.last_get_work": [
                    244,
                    231
                ],
                "self.started": [
                    232
                ],
                "self.tasks": [
                    233,
                    259,
                    257
                ],
                "self.info": [
                    234,
                    276,
                    237
                ],
                "self.info.update": [
                    237
                ],
                "info": [
                    668,
                    237
                ],
                "worker_reference": [
                    240,
                    241,
                    581
                ],
                "config.worker_disconnect_delay": [
                    248
                ],
                "config": [
                    417,
                    419,
                    420,
                    389,
                    390,
                    451,
                    452,
                    713,
                    395,
                    460,
                    461,
                    526,
                    434,
                    436,
                    437,
                    248,
                    446,
                    447
                ],
                "state.num_pending_tasks": [
                    257
                ],
                "state": [
                    257,
                    323,
                    261,
                    301,
                    272,
                    318
                ],
                "six.moves.filter": [
                    258
                ],
                "six.moves": [
                    258
                ],
                "six": [
                    258,
                    356,
                    325,
                    796,
                    359,
                    680,
                    363,
                    334,
                    366,
                    782,
                    690,
                    339,
                    341,
                    343,
                    474,
                    348,
                    349
                ],
                "task.status": [
                    258,
                    772,
                    780,
                    397,
                    400,
                    924,
                    425,
                    427,
                    431,
                    689,
                    947,
                    949,
                    704,
                    450,
                    326,
                    460,
                    854,
                    865,
                    994,
                    1000,
                    505,
                    622,
                    631,
                    633,
                    378,
                    763
                ],
                "task": [
                    1019,
                    567,
                    568,
                    569,
                    570,
                    590,
                    591,
                    610,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    622,
                    623,
                    625,
                    626,
                    629,
                    631,
                    633,
                    637,
                    638,
                    640,
                    643,
                    646,
                    649,
                    652,
                    656,
                    660,
                    663,
                    664,
                    665,
                    688,
                    689,
                    690,
                    701,
                    704,
                    706,
                    760,
                    761,
                    762,
                    763,
                    766,
                    767,
                    258,
                    772,
                    774,
                    780,
                    781,
                    782,
                    272,
                    785,
                    786,
                    787,
                    789,
                    796,
                    325,
                    326,
                    852,
                    854,
                    343,
                    344,
                    345,
                    855,
                    856,
                    857,
                    858,
                    859,
                    860,
                    861,
                    862,
                    863,
                    865,
                    356,
                    357,
                    866,
                    359,
                    360,
                    868,
                    874,
                    875,
                    880,
                    881,
                    377,
                    378,
                    379,
                    387,
                    388,
                    901,
                    390,
                    391,
                    397,
                    400,
                    402,
                    405,
                    408,
                    409,
                    410,
                    411,
                    923,
                    924,
                    414,
                    925,
                    926,
                    927,
                    418,
                    423,
                    425,
                    426,
                    427,
                    431,
                    433,
                    946,
                    435,
                    436,
                    437,
                    947,
                    948,
                    949,
                    950,
                    952,
                    443,
                    444,
                    953,
                    446,
                    447,
                    450,
                    451,
                    452,
                    455,
                    456,
                    460,
                    461,
                    974,
                    975,
                    976,
                    977,
                    978,
                    979,
                    980,
                    469,
                    470,
                    471,
                    991,
                    992,
                    993,
                    994,
                    999,
                    1000,
                    1001,
                    498,
                    499,
                    500,
                    1015,
                    504,
                    505,
                    506,
                    507,
                    508,
                    1017
                ],
                "state.get_pending_tasks": [
                    261
                ],
                "self.assistant": [
                    270
                ],
                "all": [
                    272,
                    922
                ],
                "task.resources": [
                    649,
                    782,
                    272,
                    689,
                    690,
                    785,
                    786,
                    796,
                    862
                ],
                "self.get_pending_tasks": [
                    272
                ],
                "self.info.get": [
                    276
                ],
                "property": [
                    274,
                    1023
                ],
                "self._state_path": [
                    352,
                    292,
                    305,
                    310,
                    314,
                    315,
                    317
                ],
                "self._tasks": [
                    384,
                    325,
                    293,
                    359,
                    298,
                    301,
                    381,
                    470,
                    343,
                    377,
                    348,
                    349
                ],
                "self._status_tasks": [
                    356,
                    324,
                    326,
                    294,
                    425,
                    426,
                    363,
                    366,
                    373,
                    471,
                    378
                ],
                "collections.defaultdict": [
                    324,
                    294,
                    742,
                    748,
                    686,
                    943,
                    944,
                    945,
                    990
                ],
                "self._active_workers": [
                    295,
                    487,
                    298,
                    490,
                    301,
                    334,
                    495,
                    336,
                    339,
                    341,
                    345,
                    474
                ],
                "open": [
                    305,
                    317
                ],
                "fobj": [
                    305,
                    306,
                    317,
                    318
                ],
                "pickle.dump": [
                    306
                ],
                "pickle": [
                    306,
                    318
                ],
                "self.get_state": [
                    306
                ],
                "IOError": [
                    307
                ],
                "logger.warning": [
                    308,
                    1021
                ],
                "logger.info": [
                    352,
                    550,
                    456,
                    554,
                    432,
                    310,
                    315,
                    445,
                    574
                ],
                "os.path.exists": [
                    314
                ],
                "os.path": [
                    314
                ],
                "os": [
                    314
                ],
                "pickle.load": [
                    318
                ],
                "BaseException": [
                    888,
                    1020,
                    319
                ],
                "logger.exception": [
                    320
                ],
                "self.set_state": [
                    323
                ],
                "six.itervalues": [
                    356,
                    325,
                    359,
                    363,
                    366,
                    343,
                    474,
                    348,
                    349
                ],
                "task.id": [
                    925,
                    926,
                    927,
                    414,
                    418,
                    425,
                    426,
                    433,
                    948,
                    569,
                    570,
                    446,
                    326,
                    456,
                    976,
                    977,
                    978,
                    979,
                    980,
                    992,
                    993,
                    994,
                    875,
                    761,
                    378,
                    508,
                    767
                ],
                "k": [
                    336,
                    339,
                    341,
                    334
                ],
                "v": [
                    336,
                    334,
                    335
                ],
                "six.iteritems": [
                    680,
                    334,
                    782,
                    690,
                    339,
                    341,
                    796
                ],
                "float": [
                    335
                ],
                "Worker": [
                    336,
                    490
                ],
                "any": [
                    339,
                    348
                ],
                "hasattr": [
                    339,
                    348
                ],
                "w": [
                    339,
                    484,
                    559
                ],
                "worker": [
                    668,
                    552,
                    553,
                    554,
                    555,
                    936,
                    937,
                    938,
                    939,
                    940,
                    941,
                    950,
                    951,
                    954,
                    955,
                    956,
                    957,
                    958,
                    959,
                    580,
                    581,
                    594,
                    341,
                    342,
                    474,
                    475,
                    477,
                    481,
                    745,
                    746,
                    747,
                    494,
                    495,
                    755,
                    756
                ],
                "worker.tasks": [
                    342
                ],
                "task.workers": [
                    774,
                    855,
                    500,
                    789,
                    950,
                    663,
                    344,
                    952,
                    762,
                    953
                ],
                "tasks.add": [
                    664,
                    345
                ],
                "tasks": [
                    760,
                    757,
                    758,
                    664,
                    345,
                    955,
                    956,
                    959
                ],
                "t": [
                    592,
                    593,
                    594,
                    657,
                    658,
                    922,
                    348,
                    349,
                    350
                ],
                "t.disable_hard_timeout": [
                    350
                ],
                "itertools.chain.from_iterable": [
                    366
                ],
                "itertools.chain": [
                    789,
                    366
                ],
                "itertools": [
                    789,
                    366
                ],
                "setdefault": [
                    376,
                    377
                ],
                "self._tasks.setdefault": [
                    377
                ],
                "self._tasks.get": [
                    381
                ],
                "task.scheduler_disable_time": [
                    450,
                    387,
                    451,
                    866,
                    423,
                    1000,
                    405,
                    411
                ],
                "task.failures.clear": [
                    388,
                    391
                ],
                "task.failures": [
                    388,
                    391
                ],
                "self.set_status": [
                    436,
                    461,
                    390
                ],
                "new_status": [
                    422,
                    394,
                    426,
                    427,
                    397,
                    401,
                    408,
                    412
                ],
                "DONE": [
                    833,
                    708,
                    401,
                    1013,
                    1014,
                    505
                ],
                "self.re_enable": [
                    402,
                    452
                ],
                "task.can_disable": [
                    408
                ],
                "task.add_failure": [
                    409
                ],
                "task.has_excessive_failures": [
                    410
                ],
                "notifications.send_error_email": [
                    413
                ],
                "notifications": [
                    413
                ],
                "format": [
                    414,
                    415
                ],
                "config.disable_failures": [
                    417
                ],
                "config.disable_window": [
                    419
                ],
                "config.disable_persist": [
                    451,
                    420
                ],
                "pop": [
                    425,
                    471
                ],
                "task.worker_running": [
                    780,
                    781,
                    431,
                    433,
                    435,
                    947,
                    948,
                    856,
                    766
                ],
                "task.stakeholders": [
                    652,
                    431,
                    499,
                    443,
                    446
                ],
                "assistants": [
                    431
                ],
                "config.retry_delay": [
                    713,
                    434,
                    460,
                    437
                ],
                "task.retry": [
                    640,
                    460,
                    437
                ],
                "remove": [
                    440,
                    457,
                    463
                ],
                "task.remove": [
                    455,
                    625,
                    626,
                    444,
                    447
                ],
                "config.remove_delay": [
                    446,
                    447
                ],
                "delete_tasks": [
                    469
                ],
                "task_obj": [
                    470,
                    471
                ],
                "self._tasks.pop": [
                    470
                ],
                "task_obj.status": [
                    471
                ],
                "last_active_lt": [
                    475,
                    484
                ],
                "worker.last_active": [
                    937,
                    475
                ],
                "last_get_work": [
                    477,
                    479
                ],
                "getattr": [
                    762,
                    617,
                    938,
                    814,
                    857,
                    506,
                    477,
                    863
                ],
                "last_get_work_gt": [
                    478,
                    479
                ],
                "filter": [
                    923,
                    484
                ],
                "w.assistant": [
                    484
                ],
                "self.get_active_workers": [
                    484
                ],
                "self._active_workers.keys": [
                    487
                ],
                "self._active_workers.setdefault": [
                    490
                ],
                "delete_workers": [
                    499,
                    500,
                    494
                ],
                "self._active_workers.pop": [
                    495
                ],
                "self.get_active_tasks": [
                    504,
                    498
                ],
                "task.stakeholders.difference_update": [
                    499
                ],
                "task.workers.difference_update": [
                    500
                ],
                "necessary_tasks": [
                    563,
                    565,
                    503,
                    569,
                    507,
                    508,
                    509
                ],
                "necessary_tasks.update": [
                    507
                ],
                "task.deps": [
                    706,
                    643,
                    868,
                    901,
                    646,
                    591,
                    656,
                    975,
                    507
                ],
                "necessary_tasks.add": [
                    508
                ],
                "Scheduler": [
                    512
                ],
                "self._config": [
                    640,
                    928,
                    807,
                    553,
                    554,
                    1001,
                    526,
                    527,
                    753,
                    531,
                    729,
                    568,
                    569,
                    538,
                    539,
                    540,
                    638
                ],
                "scheduler": [
                    526
                ],
                "kwargs": [
                    732,
                    820,
                    526,
                    607
                ],
                "self._state": [
                    907,
                    766,
                    527,
                    657,
                    664,
                    923,
                    668,
                    544,
                    547,
                    807,
                    552,
                    940,
                    557,
                    559,
                    688,
                    946,
                    563,
                    567,
                    568,
                    569,
                    826,
                    572,
                    831,
                    832,
                    707,
                    580,
                    965,
                    974,
                    592,
                    852,
                    991,
                    610,
                    999,
                    745,
                    746,
                    747,
                    874,
                    1001,
                    1006,
                    751,
                    880,
                    1007,
                    754,
                    638
                ],
                "SimpleTaskState": [
                    527
                ],
                "self._config.state_path": [
                    527
                ],
                "task_history_impl": [
                    529,
                    530
                ],
                "self._task_history": [
                    1026,
                    535,
                    530,
                    533,
                    1015,
                    1017,
                    1019
                ],
                "self._config.record_task_history": [
                    531
                ],
                "db_task_history.DbTaskHistory": [
                    533
                ],
                "db_task_history": [
                    533
                ],
                "history.NopHistory": [
                    535
                ],
                "history": [
                    535
                ],
                "self._resources": [
                    672,
                    673,
                    679,
                    687,
                    536,
                    671
                ],
                "getintdict": [
                    536
                ],
                "configuration.get_config": [
                    536
                ],
                "configuration": [
                    536
                ],
                "self._make_task": [
                    537,
                    610,
                    657
                ],
                "functools.partial": [
                    537
                ],
                "functools": [
                    537
                ],
                "Task": [
                    538
                ],
                "self._config.disable_failures": [
                    538
                ],
                "self._config.disable_hard_timeout": [
                    539
                ],
                "self._config.disable_window": [
                    540
                ],
                "self._worker_requests": [
                    541
                ],
                "self._state.load": [
                    544
                ],
                "self._state.dump": [
                    547
                ],
                "remove_workers": [
                    555,
                    557,
                    551
                ],
                "self._state.get_active_workers": [
                    552,
                    754,
                    940
                ],
                "worker.prune": [
                    553
                ],
                "self._config.worker_disconnect_delay": [
                    753,
                    554
                ],
                "remove_workers.append": [
                    555
                ],
                "worker.id": [
                    936,
                    555,
                    755
                ],
                "self._state.inactivate_workers": [
                    557
                ],
                "assistant_ids": [
                    568,
                    562,
                    559
                ],
                "w.id": [
                    559
                ],
                "self._state.get_assistants": [
                    559
                ],
                "remove_tasks": [
                    560,
                    570,
                    572
                ],
                "self._state.get_necessary_tasks": [
                    563
                ],
                "self._state.get_active_tasks": [
                    874,
                    974,
                    688,
                    567,
                    923,
                    991
                ],
                "self._state.fail_dead_worker_task": [
                    568
                ],
                "self._state.prune": [
                    569
                ],
                "remove_tasks.append": [
                    570
                ],
                "self._state.inactivate_tasks": [
                    572
                ],
                "self._state.get_worker": [
                    580,
                    745,
                    664,
                    668,
                    766
                ],
                "worker.update": [
                    581
                ],
                "task.priority": [
                    861,
                    701,
                    590
                ],
                "prio": [
                    593,
                    594,
                    590
                ],
                "max": [
                    590,
                    847
                ],
                "dep": [
                    832,
                    833,
                    706,
                    707,
                    836,
                    837,
                    901,
                    902,
                    840,
                    842,
                    845,
                    591,
                    592,
                    657,
                    656
                ],
                "self._state.get_task": [
                    832,
                    610,
                    707,
                    999,
                    1007,
                    592,
                    657,
                    880,
                    852
                ],
                "t.priority": [
                    593
                ],
                "self._update_priority": [
                    594,
                    660
                ],
                "self.update": [
                    608,
                    821,
                    734
                ],
                "task.family": [
                    616,
                    881,
                    860,
                    615
                ],
                "task.module": [
                    618
                ],
                "task.params": [
                    859,
                    619,
                    620
                ],
                "task.tracking_url": [
                    623
                ],
                "expl": [
                    628,
                    629,
                    1007
                ],
                "task.expl": [
                    629
                ],
                "new_deps": [
                    645,
                    646,
                    631
                ],
                "self._update_task_history": [
                    810,
                    637
                ],
                "self._state.set_status": [
                    638,
                    807
                ],
                "SUSPENDED": [
                    638
                ],
                "self._retry_time": [
                    640
                ],
                "task.deps.update": [
                    646
                ],
                "assistant": [
                    736,
                    774,
                    651,
                    789,
                    762,
                    735
                ],
                "task.stakeholders.add": [
                    652
                ],
                "UNKNOWN": [
                    657,
                    892,
                    894
                ],
                "t.stakeholders.add": [
                    658
                ],
                "t.stakeholders": [
                    658
                ],
                "runnable": [
                    665,
                    662
                ],
                "task.workers.add": [
                    663
                ],
                "task.runnable": [
                    665
                ],
                "add_info": [
                    668
                ],
                "self._resources.update": [
                    673
                ],
                "needed_resources": [
                    680,
                    676
                ],
                "available_resources": [
                    681,
                    679
                ],
                "resource": [
                    680,
                    681,
                    782,
                    783,
                    690,
                    691,
                    796,
                    797
                ],
                "amount": [
                    680,
                    681,
                    782,
                    783,
                    690,
                    691,
                    796,
                    797
                ],
                "used_resources": [
                    681,
                    748,
                    686,
                    752,
                    786,
                    691,
                    692
                ],
                "available_resources.get": [
                    681
                ],
                "int": [
                    742,
                    748,
                    686,
                    944,
                    945
                ],
                "task.time": [
                    858,
                    701
                ],
                "dep_task": [
                    707,
                    708
                ],
                "dep_task.status": [
                    708
                ],
                "self._config.prune_on_get_work": [
                    729
                ],
                "self.prune": [
                    963,
                    933,
                    872,
                    905,
                    915,
                    730,
                    989
                ],
                "host": [
                    810,
                    1019,
                    734
                ],
                "self.add_worker": [
                    736
                ],
                "best_task": [
                    737,
                    806,
                    807,
                    808,
                    777,
                    809,
                    810,
                    812,
                    813,
                    814,
                    815,
                    787
                ],
                "locally_pending_tasks": [
                    801,
                    738,
                    773
                ],
                "running_tasks": [
                    770,
                    739,
                    802
                ],
                "upstream_table": [
                    761,
                    740
                ],
                "greedy_resources": [
                    785,
                    797,
                    742,
                    783
                ],
                "n_unique_pending": [
                    775,
                    804,
                    743
                ],
                "worker.is_trivial_worker": [
                    746
                ],
                "relevant_tasks": [
                    747,
                    757,
                    751
                ],
                "worker.get_pending_tasks": [
                    747
                ],
                "greedy_workers": [
                    780,
                    781,
                    749,
                    755,
                    791,
                    793
                ],
                "self._state.get_pending_tasks": [
                    946,
                    751
                ],
                "self._used_resources": [
                    752
                ],
                "activity_limit": [
                    753,
                    754
                ],
                "active_workers": [
                    754,
                    756
                ],
                "worker.info.get": [
                    755
                ],
                "worker.info": [
                    755,
                    939
                ],
                "list": [
                    868,
                    837,
                    757,
                    855,
                    953
                ],
                "tasks.sort": [
                    758
                ],
                "self._rank": [
                    758
                ],
                "upstream_status": [
                    772,
                    845,
                    846,
                    847,
                    761,
                    924,
                    925
                ],
                "self._upstream_status": [
                    761,
                    925
                ],
                "in_workers": [
                    786,
                    762,
                    763,
                    772
                ],
                "bool": [
                    762
                ],
                "other_worker": [
                    768,
                    769,
                    766,
                    767
                ],
                "more_info": [
                    769,
                    770,
                    767
                ],
                "str": [
                    767
                ],
                "more_info.update": [
                    769
                ],
                "other_worker.info": [
                    769
                ],
                "running_tasks.append": [
                    770
                ],
                "self._schedulable": [
                    785
                ],
                "self._has_resources": [
                    785,
                    786
                ],
                "workers": [
                    960,
                    934,
                    941,
                    789,
                    790,
                    954
                ],
                "task_worker": [
                    793,
                    790,
                    791
                ],
                "greedy_workers.get": [
                    791
                ],
                "reply": [
                    801,
                    812,
                    813,
                    814,
                    815,
                    817
                ],
                "best_task.worker_running": [
                    808
                ],
                "best_task.time_running": [
                    809
                ],
                "best_task.id": [
                    812
                ],
                "best_task.family": [
                    813
                ],
                "best_task.params": [
                    815
                ],
                "upstream_status_table": [
                    835,
                    838,
                    841,
                    842,
                    845,
                    848,
                    849,
                    917,
                    824,
                    825,
                    925
                ],
                "self._state.has_task": [
                    965,
                    907,
                    1006,
                    826,
                    831
                ],
                "task_stack": [
                    827,
                    837,
                    829,
                    830
                ],
                "dep_id": [
                    832,
                    835,
                    837,
                    838,
                    841,
                    842,
                    848,
                    849,
                    830,
                    831
                ],
                "task_stack.pop": [
                    830
                ],
                "dep.status": [
                    840,
                    833,
                    836
                ],
                "dep.deps": [
                    842,
                    845,
                    836,
                    837
                ],
                "dep_status": [
                    840,
                    841
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    840
                ],
                "upstream_status_table.get": [
                    845
                ],
                "a_task_id": [
                    845
                ],
                "upstream_status.append": [
                    846
                ],
                "ret": [
                    866,
                    869,
                    868,
                    853
                ],
                "include_deps": [
                    867
                ],
                "serialized": [
                    900,
                    902,
                    906,
                    908,
                    909,
                    926,
                    927,
                    964,
                    966,
                    967,
                    971,
                    976,
                    977,
                    978,
                    979,
                    993,
                    994,
                    998,
                    873,
                    1002,
                    875,
                    876,
                    1003,
                    879,
                    890
                ],
                "self._serialize_task": [
                    993,
                    900,
                    1002,
                    875,
                    971,
                    978,
                    948,
                    926
                ],
                "logger.warn": [
                    882
                ],
                "_": [
                    886
                ],
                "param_str": [
                    886,
                    887
                ],
                "partition": [
                    886
                ],
                "task_id.rstrip": [
                    886
                ],
                "param.split": [
                    887
                ],
                "param": [
                    887
                ],
                "param_str.split": [
                    887
                ],
                "self._recurse_deps": [
                    908,
                    902
                ],
                "result": [
                    928,
                    929,
                    930,
                    994,
                    995,
                    916,
                    990,
                    927
                ],
                "search": [
                    921,
                    918
                ],
                "filter_func": [
                    922,
                    923,
                    919
                ],
                "terms": [
                    921,
                    922
                ],
                "search.split": [
                    921
                ],
                "term": [
                    922
                ],
                "t.id": [
                    922
                ],
                "limit": [
                    928
                ],
                "self._config.max_shown_tasks": [
                    928
                ],
                "workers.sort": [
                    941
                ],
                "include_running": [
                    942
                ],
                "running": [
                    955,
                    948,
                    943
                ],
                "num_pending": [
                    944,
                    957,
                    951
                ],
                "num_uniques": [
                    945,
                    953,
                    958
                ],
                "self._traverse_inverse_deps": [
                    966
                ],
                "stack": [
                    970,
                    980,
                    972,
                    973
                ],
                "curr_id": [
                    976,
                    973,
                    975
                ],
                "stack.pop": [
                    973
                ],
                "append": [
                    976
                ],
                "stack.append": [
                    980
                ],
                "task.id.find": [
                    992
                ],
                "task_str": [
                    992
                ],
                "self._state.re_enable": [
                    1001
                ],
                "successful": [
                    1014,
                    1015
                ],
                "self._task_history.task_finished": [
                    1015
                ],
                "self._task_history.task_scheduled": [
                    1017
                ],
                "self._task_history.task_started": [
                    1019
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    320,
                    352,
                    550,
                    456,
                    554,
                    45,
                    432,
                    1021,
                    882,
                    308,
                    310,
                    315,
                    445,
                    574
                ],
                "logging.getLogger": [
                    45
                ],
                "logging": [
                    45
                ],
                "add_task": [
                    54
                ],
                "get_work": [
                    243,
                    581,
                    55
                ],
                "ping": [
                    56
                ],
                "UPSTREAM_RUNNING": [
                    73,
                    65,
                    58
                ],
                "UPSTREAM_MISSING_INPUT": [
                    66,
                    59,
                    74
                ],
                "UPSTREAM_FAILED": [
                    72,
                    67,
                    60
                ],
                "UPSTREAM_DISABLED": [
                    772,
                    75,
                    68,
                    61
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    70,
                    63
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    70,
                    847
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    70
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    840,
                    71
                ],
                "FAILED": [
                    390,
                    72,
                    394,
                    460,
                    436,
                    1013,
                    408,
                    639
                ],
                "RUNNING": [
                    258,
                    807,
                    73,
                    810,
                    363,
                    780,
                    397,
                    622,
                    367,
                    431,
                    689,
                    947,
                    373,
                    631,
                    1018,
                    763
                ],
                "PENDING": [
                    704,
                    258,
                    611,
                    772,
                    836,
                    74,
                    461,
                    367,
                    596,
                    373,
                    949,
                    631,
                    1016,
                    633,
                    924,
                    638
                ],
                "DISABLED": [
                    865,
                    450,
                    422,
                    1000,
                    75,
                    397,
                    400,
                    505,
                    412
                ],
                "Config": [
                    79
                ],
                "retry_delay": [
                    82
                ],
                "parameter.FloatParameter": [
                    82,
                    83,
                    84
                ],
                "parameter": [
                    97,
                    98,
                    100,
                    102,
                    82,
                    83,
                    84,
                    85,
                    89,
                    91,
                    93,
                    95
                ],
                "remove_delay": [
                    83
                ],
                "worker_disconnect_delay": [
                    84
                ],
                "state_path": [
                    292,
                    85
                ],
                "parameter.Parameter": [
                    85
                ],
                "disable_window": [
                    89,
                    194
                ],
                "parameter.IntParameter": [
                    97,
                    89,
                    91,
                    93,
                    95
                ],
                "disable_failures": [
                    192,
                    91
                ],
                "disable_hard_timeout": [
                    193,
                    93
                ],
                "disable_persist": [
                    95
                ],
                "max_shown_tasks": [
                    97
                ],
                "prune_done_tasks": [
                    98
                ],
                "parameter.BoolParameter": [
                    98,
                    100,
                    102
                ],
                "record_task_history": [
                    100
                ],
                "prune_on_get_work": [
                    102
                ],
                "x": [
                    162,
                    163,
                    108,
                    109,
                    111
                ],
                "datetime.datetime": [
                    108
                ],
                "datetime": [
                    108
                ],
                "time.mktime": [
                    109
                ],
                "time": [
                    136,
                    147,
                    411,
                    809,
                    181,
                    437,
                    447,
                    451,
                    455,
                    713,
                    460,
                    208,
                    230,
                    232,
                    109,
                    753,
                    242,
                    244,
                    248
                ],
                "x.timetuple": [
                    109
                ],
                "self.window": [
                    128,
                    147
                ],
                "self": [
                    1026,
                    526,
                    527,
                    530,
                    531,
                    533,
                    535,
                    536,
                    537,
                    538,
                    539,
                    540,
                    541,
                    544,
                    547,
                    552,
                    553,
                    554,
                    557,
                    559,
                    563,
                    567,
                    568,
                    569,
                    572,
                    580,
                    592,
                    594,
                    608,
                    610,
                    637,
                    638,
                    128,
                    129,
                    130,
                    640,
                    138,
                    139,
                    141,
                    657,
                    147,
                    660,
                    149,
                    150,
                    152,
                    664,
                    668,
                    158,
                    671,
                    672,
                    673,
                    679,
                    173,
                    174,
                    175,
                    687,
                    177,
                    688,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    707,
                    200,
                    203,
                    206,
                    207,
                    208,
                    209,
                    212,
                    729,
                    218,
                    219,
                    730,
                    734,
                    736,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    234,
                    745,
                    746,
                    237,
                    747,
                    751,
                    752,
                    241,
                    242,
                    753,
                    244,
                    754,
                    758,
                    248,
                    761,
                    766,
                    257,
                    259,
                    270,
                    272,
                    785,
                    786,
                    276,
                    279,
                    292,
                    293,
                    294,
                    295,
                    807,
                    298,
                    810,
                    301,
                    305,
                    306,
                    821,
                    310,
                    314,
                    315,
                    826,
                    317,
                    831,
                    832,
                    323,
                    324,
                    325,
                    326,
                    334,
                    336,
                    339,
                    852,
                    341,
                    343,
                    345,
                    348,
                    349,
                    352,
                    356,
                    359,
                    872,
                    874,
                    363,
                    875,
                    366,
                    880,
                    373,
                    377,
                    378,
                    381,
                    384,
                    900,
                    390,
                    902,
                    905,
                    907,
                    908,
                    402,
                    915,
                    923,
                    925,
                    926,
                    928,
                    933,
                    425,
                    426,
                    940,
                    946,
                    436,
                    948,
                    963,
                    452,
                    965,
                    966,
                    971,
                    461,
                    974,
                    978,
                    470,
                    471,
                    474,
                    989,
                    991,
                    993,
                    484,
                    487,
                    999,
                    1001,
                    490,
                    1002,
                    1006,
                    495,
                    1007,
                    498,
                    1015,
                    504,
                    1017,
                    1019
                ],
                "window": [
                    128
                ],
                "self.failures": [
                    129,
                    194,
                    203,
                    141,
                    206,
                    208,
                    212,
                    149,
                    150,
                    152,
                    158
                ],
                "collections.deque": [
                    129
                ],
                "collections": [
                    129,
                    324,
                    294,
                    742,
                    748,
                    686,
                    943,
                    944,
                    945,
                    990
                ],
                "self.first_failure_time": [
                    130,
                    139,
                    138
                ],
                "failure_time": [
                    136,
                    139,
                    141
                ],
                "time.time": [
                    451,
                    230,
                    455,
                    136,
                    232,
                    713,
                    809,
                    460,
                    208,
                    753,
                    242,
                    147,
                    244,
                    181,
                    437,
                    248,
                    411,
                    447
                ],
                "self.failures.append": [
                    141
                ],
                "min_time": [
                    147,
                    149
                ],
                "fix_time": [
                    451,
                    149
                ],
                "self.failures.popleft": [
                    150
                ],
                "self.failures.clear": [
                    158
                ],
                "default": [
                    381,
                    165
                ],
                "self.id": [
                    228,
                    173,
                    279
                ],
                "task_id": [
                    384,
                    900,
                    907,
                    908,
                    173,
                    824,
                    825,
                    826,
                    827,
                    965,
                    966,
                    970,
                    971,
                    852,
                    610,
                    611,
                    999,
                    1002,
                    1006,
                    879,
                    880,
                    1007,
                    882,
                    1009,
                    886,
                    377,
                    890,
                    381
                ],
                "self.stakeholders": [
                    174
                ],
                "self.workers": [
                    175
                ],
                "deps": [
                    642,
                    611,
                    643,
                    176,
                    179
                ],
                "self.deps": [
                    177,
                    179
                ],
                "self.status": [
                    180
                ],
                "status": [
                    355,
                    356,
                    366,
                    367,
                    847,
                    848,
                    180,
                    1013,
                    1014,
                    631,
                    1016,
                    633,
                    1018,
                    923,
                    637,
                    638,
                    639
                ],
                "self.time": [
                    181
                ],
                "self.retry": [
                    182
                ],
                "self.remove": [
                    183
                ],
                "self.worker_running": [
                    184
                ],
                "self.time_running": [
                    185
                ],
                "self.expl": [
                    186
                ],
                "self.priority": [
                    187
                ],
                "priority": [
                    657,
                    187,
                    612,
                    660
                ],
                "self.resources": [
                    188
                ],
                "_get_default": [
                    620,
                    188,
                    191
                ],
                "resources": [
                    673,
                    611,
                    648,
                    649,
                    536,
                    188
                ],
                "self.family": [
                    189
                ],
                "family": [
                    896,
                    612,
                    616,
                    886,
                    889,
                    189
                ],
                "self.module": [
                    190
                ],
                "module": [
                    618,
                    612,
                    190
                ],
                "self.params": [
                    191
                ],
                "params": [
                    612,
                    620,
                    895,
                    887,
                    889,
                    191
                ],
                "self.disable_failures": [
                    192,
                    218,
                    212
                ],
                "self.disable_hard_timeout": [
                    193,
                    219,
                    209,
                    207
                ],
                "Failures": [
                    194
                ],
                "self.tracking_url": [
                    195
                ],
                "tracking_url": [
                    195,
                    622,
                    623
                ],
                "self.scheduler_disable_time": [
                    196
                ],
                "self.runnable": [
                    197
                ],
                "self.failures.add_failure": [
                    203
                ],
                "self.failures.first_failure_time": [
                    208,
                    206
                ],
                "self.failures.num_failures": [
                    212
                ],
                "worker_id": [
                    652,
                    658,
                    660,
                    789,
                    663,
                    664,
                    808,
                    820,
                    821,
                    580,
                    344,
                    345,
                    732,
                    734,
                    607,
                    608,
                    736,
                    228,
                    745,
                    490,
                    762
                ],
                "self.reference": [
                    241,
                    229
                ],
                "self.last_active": [
                    248,
                    242,
                    230
                ],
                "last_active": [
                    230
                ],
                "self.last_get_work": [
                    244,
                    231
                ],
                "self.started": [
                    232
                ],
                "self.tasks": [
                    233,
                    259,
                    257
                ],
                "self.info": [
                    234,
                    276,
                    237
                ],
                "self.info.update": [
                    237
                ],
                "info": [
                    668,
                    237
                ],
                "worker_reference": [
                    240,
                    241,
                    581
                ],
                "config.worker_disconnect_delay": [
                    248
                ],
                "config": [
                    417,
                    419,
                    420,
                    389,
                    390,
                    451,
                    452,
                    713,
                    395,
                    460,
                    461,
                    526,
                    434,
                    436,
                    437,
                    248,
                    446,
                    447
                ],
                "state.num_pending_tasks": [
                    257
                ],
                "state": [
                    257,
                    323,
                    261,
                    301,
                    272,
                    318
                ],
                "six.moves.filter": [
                    258
                ],
                "six.moves": [
                    258
                ],
                "six": [
                    258,
                    356,
                    325,
                    796,
                    359,
                    680,
                    363,
                    334,
                    366,
                    782,
                    690,
                    339,
                    341,
                    343,
                    474,
                    348,
                    349
                ],
                "task.status": [
                    258,
                    772,
                    780,
                    397,
                    400,
                    924,
                    425,
                    427,
                    431,
                    689,
                    947,
                    949,
                    704,
                    450,
                    326,
                    460,
                    854,
                    865,
                    994,
                    1000,
                    505,
                    622,
                    631,
                    633,
                    378,
                    763
                ],
                "task": [
                    1019,
                    567,
                    568,
                    569,
                    570,
                    590,
                    591,
                    610,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    622,
                    623,
                    625,
                    626,
                    629,
                    631,
                    633,
                    637,
                    638,
                    640,
                    643,
                    646,
                    649,
                    652,
                    656,
                    660,
                    663,
                    664,
                    665,
                    688,
                    689,
                    690,
                    701,
                    704,
                    706,
                    760,
                    761,
                    762,
                    763,
                    766,
                    767,
                    258,
                    772,
                    774,
                    780,
                    781,
                    782,
                    272,
                    785,
                    786,
                    787,
                    789,
                    796,
                    325,
                    326,
                    852,
                    854,
                    343,
                    344,
                    345,
                    855,
                    856,
                    857,
                    858,
                    859,
                    860,
                    861,
                    862,
                    863,
                    865,
                    356,
                    357,
                    866,
                    359,
                    360,
                    868,
                    874,
                    875,
                    880,
                    881,
                    377,
                    378,
                    379,
                    387,
                    388,
                    901,
                    390,
                    391,
                    397,
                    400,
                    402,
                    405,
                    408,
                    409,
                    410,
                    411,
                    923,
                    924,
                    414,
                    925,
                    926,
                    927,
                    418,
                    423,
                    425,
                    426,
                    427,
                    431,
                    433,
                    946,
                    435,
                    436,
                    437,
                    947,
                    948,
                    949,
                    950,
                    952,
                    443,
                    444,
                    953,
                    446,
                    447,
                    450,
                    451,
                    452,
                    455,
                    456,
                    460,
                    461,
                    974,
                    975,
                    976,
                    977,
                    978,
                    979,
                    980,
                    469,
                    470,
                    471,
                    991,
                    992,
                    993,
                    994,
                    999,
                    1000,
                    1001,
                    498,
                    499,
                    500,
                    1015,
                    504,
                    505,
                    506,
                    507,
                    508,
                    1017
                ],
                "state.get_pending_tasks": [
                    261
                ],
                "self.assistant": [
                    270
                ],
                "task.resources": [
                    649,
                    782,
                    272,
                    689,
                    690,
                    785,
                    786,
                    796,
                    862
                ],
                "self.get_pending_tasks": [
                    272
                ],
                "self.info.get": [
                    276
                ],
                "self._state_path": [
                    352,
                    292,
                    305,
                    310,
                    314,
                    315,
                    317
                ],
                "self._tasks": [
                    384,
                    325,
                    293,
                    359,
                    298,
                    301,
                    381,
                    470,
                    343,
                    377,
                    348,
                    349
                ],
                "self._status_tasks": [
                    356,
                    324,
                    326,
                    294,
                    425,
                    426,
                    363,
                    366,
                    373,
                    471,
                    378
                ],
                "collections.defaultdict": [
                    324,
                    294,
                    742,
                    748,
                    686,
                    943,
                    944,
                    945,
                    990
                ],
                "self._active_workers": [
                    295,
                    487,
                    298,
                    490,
                    301,
                    334,
                    495,
                    336,
                    339,
                    341,
                    345,
                    474
                ],
                "fobj": [
                    305,
                    306,
                    317,
                    318
                ],
                "pickle.dump": [
                    306
                ],
                "pickle": [
                    306,
                    318
                ],
                "self.get_state": [
                    306
                ],
                "logger.warning": [
                    308,
                    1021
                ],
                "logger.info": [
                    352,
                    550,
                    456,
                    554,
                    432,
                    310,
                    315,
                    445,
                    574
                ],
                "os.path.exists": [
                    314
                ],
                "os.path": [
                    314
                ],
                "os": [
                    314
                ],
                "pickle.load": [
                    318
                ],
                "logger.exception": [
                    320
                ],
                "self.set_state": [
                    323
                ],
                "six.itervalues": [
                    356,
                    325,
                    359,
                    363,
                    366,
                    343,
                    474,
                    348,
                    349
                ],
                "task.id": [
                    925,
                    926,
                    927,
                    414,
                    418,
                    425,
                    426,
                    433,
                    948,
                    569,
                    570,
                    446,
                    326,
                    456,
                    976,
                    977,
                    978,
                    979,
                    980,
                    992,
                    993,
                    994,
                    875,
                    761,
                    378,
                    508,
                    767
                ],
                "k": [
                    336,
                    339,
                    341,
                    334
                ],
                "v": [
                    336,
                    334,
                    335
                ],
                "six.iteritems": [
                    680,
                    334,
                    782,
                    690,
                    339,
                    341,
                    796
                ],
                "Worker": [
                    336,
                    490
                ],
                "w": [
                    339,
                    484,
                    559
                ],
                "worker": [
                    668,
                    552,
                    553,
                    554,
                    555,
                    936,
                    937,
                    938,
                    939,
                    940,
                    941,
                    950,
                    951,
                    954,
                    955,
                    956,
                    957,
                    958,
                    959,
                    580,
                    581,
                    594,
                    341,
                    342,
                    474,
                    475,
                    477,
                    481,
                    745,
                    746,
                    747,
                    494,
                    495,
                    755,
                    756
                ],
                "worker.tasks": [
                    342
                ],
                "task.workers": [
                    774,
                    855,
                    500,
                    789,
                    950,
                    663,
                    344,
                    952,
                    762,
                    953
                ],
                "tasks.add": [
                    664,
                    345
                ],
                "tasks": [
                    760,
                    757,
                    758,
                    664,
                    345,
                    955,
                    956,
                    959
                ],
                "t": [
                    592,
                    593,
                    594,
                    657,
                    658,
                    922,
                    348,
                    349,
                    350
                ],
                "t.disable_hard_timeout": [
                    350
                ],
                "itertools.chain.from_iterable": [
                    366
                ],
                "itertools.chain": [
                    789,
                    366
                ],
                "itertools": [
                    789,
                    366
                ],
                "setdefault": [
                    376,
                    377
                ],
                "self._tasks.setdefault": [
                    377
                ],
                "self._tasks.get": [
                    381
                ],
                "task.scheduler_disable_time": [
                    450,
                    387,
                    451,
                    866,
                    423,
                    1000,
                    405,
                    411
                ],
                "task.failures.clear": [
                    388,
                    391
                ],
                "task.failures": [
                    388,
                    391
                ],
                "self.set_status": [
                    436,
                    461,
                    390
                ],
                "new_status": [
                    422,
                    394,
                    426,
                    427,
                    397,
                    401,
                    408,
                    412
                ],
                "DONE": [
                    833,
                    708,
                    401,
                    1013,
                    1014,
                    505
                ],
                "self.re_enable": [
                    402,
                    452
                ],
                "task.can_disable": [
                    408
                ],
                "task.add_failure": [
                    409
                ],
                "task.has_excessive_failures": [
                    410
                ],
                "notifications.send_error_email": [
                    413
                ],
                "notifications": [
                    413
                ],
                "config.disable_failures": [
                    417
                ],
                "config.disable_window": [
                    419
                ],
                "config.disable_persist": [
                    451,
                    420
                ],
                "pop": [
                    425,
                    471
                ],
                "task.worker_running": [
                    780,
                    781,
                    431,
                    433,
                    435,
                    947,
                    948,
                    856,
                    766
                ],
                "task.stakeholders": [
                    652,
                    431,
                    499,
                    443,
                    446
                ],
                "assistants": [
                    431
                ],
                "config.retry_delay": [
                    713,
                    434,
                    460,
                    437
                ],
                "task.retry": [
                    640,
                    460,
                    437
                ],
                "remove": [
                    440,
                    457,
                    463
                ],
                "task.remove": [
                    455,
                    625,
                    626,
                    444,
                    447
                ],
                "config.remove_delay": [
                    446,
                    447
                ],
                "delete_tasks": [
                    469
                ],
                "task_obj": [
                    470,
                    471
                ],
                "self._tasks.pop": [
                    470
                ],
                "task_obj.status": [
                    471
                ],
                "last_active_lt": [
                    475,
                    484
                ],
                "worker.last_active": [
                    937,
                    475
                ],
                "last_get_work": [
                    477,
                    479
                ],
                "last_get_work_gt": [
                    478,
                    479
                ],
                "w.assistant": [
                    484
                ],
                "self.get_active_workers": [
                    484
                ],
                "self._active_workers.keys": [
                    487
                ],
                "self._active_workers.setdefault": [
                    490
                ],
                "delete_workers": [
                    499,
                    500,
                    494
                ],
                "self._active_workers.pop": [
                    495
                ],
                "self.get_active_tasks": [
                    504,
                    498
                ],
                "task.stakeholders.difference_update": [
                    499
                ],
                "task.workers.difference_update": [
                    500
                ],
                "necessary_tasks": [
                    563,
                    565,
                    503,
                    569,
                    507,
                    508,
                    509
                ],
                "necessary_tasks.update": [
                    507
                ],
                "task.deps": [
                    706,
                    643,
                    868,
                    901,
                    646,
                    591,
                    656,
                    975,
                    507
                ],
                "necessary_tasks.add": [
                    508
                ],
                "Scheduler": [
                    512
                ],
                "self._config": [
                    640,
                    928,
                    807,
                    553,
                    554,
                    1001,
                    526,
                    527,
                    753,
                    531,
                    729,
                    568,
                    569,
                    538,
                    539,
                    540,
                    638
                ],
                "scheduler": [
                    526
                ],
                "kwargs": [
                    732,
                    820,
                    526,
                    607
                ],
                "self._state": [
                    907,
                    766,
                    527,
                    657,
                    664,
                    923,
                    668,
                    544,
                    547,
                    807,
                    552,
                    940,
                    557,
                    559,
                    688,
                    946,
                    563,
                    567,
                    568,
                    569,
                    826,
                    572,
                    831,
                    832,
                    707,
                    580,
                    965,
                    974,
                    592,
                    852,
                    991,
                    610,
                    999,
                    745,
                    746,
                    747,
                    874,
                    1001,
                    1006,
                    751,
                    880,
                    1007,
                    754,
                    638
                ],
                "SimpleTaskState": [
                    527
                ],
                "self._config.state_path": [
                    527
                ],
                "task_history_impl": [
                    529,
                    530
                ],
                "self._task_history": [
                    1026,
                    535,
                    530,
                    533,
                    1015,
                    1017,
                    1019
                ],
                "self._config.record_task_history": [
                    531
                ],
                "db_task_history.DbTaskHistory": [
                    533
                ],
                "db_task_history": [
                    533
                ],
                "history.NopHistory": [
                    535
                ],
                "history": [
                    535
                ],
                "self._resources": [
                    672,
                    673,
                    679,
                    687,
                    536,
                    671
                ],
                "getintdict": [
                    536
                ],
                "configuration.get_config": [
                    536
                ],
                "configuration": [
                    536
                ],
                "self._make_task": [
                    537,
                    610,
                    657
                ],
                "functools.partial": [
                    537
                ],
                "functools": [
                    537
                ],
                "Task": [
                    538
                ],
                "self._config.disable_failures": [
                    538
                ],
                "self._config.disable_hard_timeout": [
                    539
                ],
                "self._config.disable_window": [
                    540
                ],
                "self._worker_requests": [
                    541
                ],
                "self._state.load": [
                    544
                ],
                "self._state.dump": [
                    547
                ],
                "remove_workers": [
                    555,
                    557,
                    551
                ],
                "self._state.get_active_workers": [
                    552,
                    754,
                    940
                ],
                "worker.prune": [
                    553
                ],
                "self._config.worker_disconnect_delay": [
                    753,
                    554
                ],
                "remove_workers.append": [
                    555
                ],
                "worker.id": [
                    936,
                    555,
                    755
                ],
                "self._state.inactivate_workers": [
                    557
                ],
                "assistant_ids": [
                    568,
                    562,
                    559
                ],
                "w.id": [
                    559
                ],
                "self._state.get_assistants": [
                    559
                ],
                "remove_tasks": [
                    560,
                    570,
                    572
                ],
                "self._state.get_necessary_tasks": [
                    563
                ],
                "self._state.get_active_tasks": [
                    874,
                    974,
                    688,
                    567,
                    923,
                    991
                ],
                "self._state.fail_dead_worker_task": [
                    568
                ],
                "self._state.prune": [
                    569
                ],
                "remove_tasks.append": [
                    570
                ],
                "self._state.inactivate_tasks": [
                    572
                ],
                "self._state.get_worker": [
                    580,
                    745,
                    664,
                    668,
                    766
                ],
                "worker.update": [
                    581
                ],
                "task.priority": [
                    861,
                    701,
                    590
                ],
                "prio": [
                    593,
                    594,
                    590
                ],
                "dep": [
                    832,
                    833,
                    706,
                    707,
                    836,
                    837,
                    901,
                    902,
                    840,
                    842,
                    845,
                    591,
                    592,
                    657,
                    656
                ],
                "self._state.get_task": [
                    832,
                    610,
                    707,
                    999,
                    1007,
                    592,
                    657,
                    880,
                    852
                ],
                "t.priority": [
                    593
                ],
                "self._update_priority": [
                    594,
                    660
                ],
                "self.update": [
                    608,
                    821,
                    734
                ],
                "task.family": [
                    616,
                    881,
                    860,
                    615
                ],
                "task.module": [
                    618
                ],
                "task.params": [
                    859,
                    619,
                    620
                ],
                "task.tracking_url": [
                    623
                ],
                "expl": [
                    628,
                    629,
                    1007
                ],
                "task.expl": [
                    629
                ],
                "new_deps": [
                    645,
                    646,
                    631
                ],
                "self._update_task_history": [
                    810,
                    637
                ],
                "self._state.set_status": [
                    638,
                    807
                ],
                "SUSPENDED": [
                    638
                ],
                "self._retry_time": [
                    640
                ],
                "task.deps.update": [
                    646
                ],
                "assistant": [
                    736,
                    774,
                    651,
                    789,
                    762,
                    735
                ],
                "task.stakeholders.add": [
                    652
                ],
                "UNKNOWN": [
                    657,
                    892,
                    894
                ],
                "t.stakeholders.add": [
                    658
                ],
                "t.stakeholders": [
                    658
                ],
                "runnable": [
                    665,
                    662
                ],
                "task.workers.add": [
                    663
                ],
                "task.runnable": [
                    665
                ],
                "add_info": [
                    668
                ],
                "self._resources.update": [
                    673
                ],
                "needed_resources": [
                    680,
                    676
                ],
                "available_resources": [
                    681,
                    679
                ],
                "resource": [
                    680,
                    681,
                    782,
                    783,
                    690,
                    691,
                    796,
                    797
                ],
                "amount": [
                    680,
                    681,
                    782,
                    783,
                    690,
                    691,
                    796,
                    797
                ],
                "used_resources": [
                    681,
                    748,
                    686,
                    752,
                    786,
                    691,
                    692
                ],
                "available_resources.get": [
                    681
                ],
                "task.time": [
                    858,
                    701
                ],
                "dep_task": [
                    707,
                    708
                ],
                "dep_task.status": [
                    708
                ],
                "self._config.prune_on_get_work": [
                    729
                ],
                "self.prune": [
                    963,
                    933,
                    872,
                    905,
                    915,
                    730,
                    989
                ],
                "host": [
                    810,
                    1019,
                    734
                ],
                "self.add_worker": [
                    736
                ],
                "best_task": [
                    737,
                    806,
                    807,
                    808,
                    777,
                    809,
                    810,
                    812,
                    813,
                    814,
                    815,
                    787
                ],
                "locally_pending_tasks": [
                    801,
                    738,
                    773
                ],
                "running_tasks": [
                    770,
                    739,
                    802
                ],
                "upstream_table": [
                    761,
                    740
                ],
                "greedy_resources": [
                    785,
                    797,
                    742,
                    783
                ],
                "n_unique_pending": [
                    775,
                    804,
                    743
                ],
                "worker.is_trivial_worker": [
                    746
                ],
                "relevant_tasks": [
                    747,
                    757,
                    751
                ],
                "worker.get_pending_tasks": [
                    747
                ],
                "greedy_workers": [
                    780,
                    781,
                    749,
                    755,
                    791,
                    793
                ],
                "self._state.get_pending_tasks": [
                    946,
                    751
                ],
                "self._used_resources": [
                    752
                ],
                "activity_limit": [
                    753,
                    754
                ],
                "active_workers": [
                    754,
                    756
                ],
                "worker.info.get": [
                    755
                ],
                "worker.info": [
                    755,
                    939
                ],
                "tasks.sort": [
                    758
                ],
                "self._rank": [
                    758
                ],
                "upstream_status": [
                    772,
                    845,
                    846,
                    847,
                    761,
                    924,
                    925
                ],
                "self._upstream_status": [
                    761,
                    925
                ],
                "in_workers": [
                    786,
                    762,
                    763,
                    772
                ],
                "other_worker": [
                    768,
                    769,
                    766,
                    767
                ],
                "more_info": [
                    769,
                    770,
                    767
                ],
                "more_info.update": [
                    769
                ],
                "other_worker.info": [
                    769
                ],
                "running_tasks.append": [
                    770
                ],
                "self._schedulable": [
                    785
                ],
                "self._has_resources": [
                    785,
                    786
                ],
                "workers": [
                    960,
                    934,
                    941,
                    789,
                    790,
                    954
                ],
                "task_worker": [
                    793,
                    790,
                    791
                ],
                "greedy_workers.get": [
                    791
                ],
                "reply": [
                    801,
                    812,
                    813,
                    814,
                    815,
                    817
                ],
                "best_task.worker_running": [
                    808
                ],
                "best_task.time_running": [
                    809
                ],
                "best_task.id": [
                    812
                ],
                "best_task.family": [
                    813
                ],
                "best_task.params": [
                    815
                ],
                "upstream_status_table": [
                    835,
                    838,
                    841,
                    842,
                    845,
                    848,
                    849,
                    917,
                    824,
                    825,
                    925
                ],
                "self._state.has_task": [
                    965,
                    907,
                    1006,
                    826,
                    831
                ],
                "task_stack": [
                    827,
                    837,
                    829,
                    830
                ],
                "dep_id": [
                    832,
                    835,
                    837,
                    838,
                    841,
                    842,
                    848,
                    849,
                    830,
                    831
                ],
                "task_stack.pop": [
                    830
                ],
                "dep.status": [
                    840,
                    833,
                    836
                ],
                "dep.deps": [
                    842,
                    845,
                    836,
                    837
                ],
                "dep_status": [
                    840,
                    841
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    840
                ],
                "upstream_status_table.get": [
                    845
                ],
                "a_task_id": [
                    845
                ],
                "upstream_status.append": [
                    846
                ],
                "ret": [
                    866,
                    869,
                    868,
                    853
                ],
                "include_deps": [
                    867
                ],
                "serialized": [
                    900,
                    902,
                    906,
                    908,
                    909,
                    926,
                    927,
                    964,
                    966,
                    967,
                    971,
                    976,
                    977,
                    978,
                    979,
                    993,
                    994,
                    998,
                    873,
                    1002,
                    875,
                    876,
                    1003,
                    879,
                    890
                ],
                "self._serialize_task": [
                    993,
                    900,
                    1002,
                    875,
                    971,
                    978,
                    948,
                    926
                ],
                "logger.warn": [
                    882
                ],
                "_": [
                    886
                ],
                "param_str": [
                    886,
                    887
                ],
                "partition": [
                    886
                ],
                "task_id.rstrip": [
                    886
                ],
                "param.split": [
                    887
                ],
                "param": [
                    887
                ],
                "param_str.split": [
                    887
                ],
                "self._recurse_deps": [
                    908,
                    902
                ],
                "result": [
                    928,
                    929,
                    930,
                    994,
                    995,
                    916,
                    990,
                    927
                ],
                "search": [
                    921,
                    918
                ],
                "filter_func": [
                    922,
                    923,
                    919
                ],
                "terms": [
                    921,
                    922
                ],
                "search.split": [
                    921
                ],
                "term": [
                    922
                ],
                "t.id": [
                    922
                ],
                "limit": [
                    928
                ],
                "self._config.max_shown_tasks": [
                    928
                ],
                "workers.sort": [
                    941
                ],
                "include_running": [
                    942
                ],
                "running": [
                    955,
                    948,
                    943
                ],
                "num_pending": [
                    944,
                    957,
                    951
                ],
                "num_uniques": [
                    945,
                    953,
                    958
                ],
                "self._traverse_inverse_deps": [
                    966
                ],
                "stack": [
                    970,
                    980,
                    972,
                    973
                ],
                "curr_id": [
                    976,
                    973,
                    975
                ],
                "stack.pop": [
                    973
                ],
                "append": [
                    976
                ],
                "stack.append": [
                    980
                ],
                "task.id.find": [
                    992
                ],
                "task_str": [
                    992
                ],
                "self._state.re_enable": [
                    1001
                ],
                "successful": [
                    1014,
                    1015
                ],
                "self._task_history.task_finished": [
                    1015
                ],
                "self._task_history.task_scheduled": [
                    1017
                ],
                "self._task_history.task_started": [
                    1019
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/luigi_19/test/central_planner_test.py",
                "test_function": "test_automatic_re_enable_with_one_failure_allowed",
                "test_function_code": "    def test_automatic_re_enable_with_one_failure_allowed(self):\n        self.sch = CentralPlannerScheduler(disable_failures=1, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # re-enables after 100 seconds\n        self.setTime(101)\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])",
                "test_error": "AssertionError: 'FAILED' != 'DISABLED' - FAILED + DISABLED",
                "full_test_error": "self = <central_planner_test.CentralPlannerTest testMethod=test_automatic_re_enable_with_one_failure_allowed>\n\n    def test_automatic_re_enable_with_one_failure_allowed(self):\n        self.sch = CentralPlannerScheduler(disable_failures=1, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n    \n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n    \n        # re-enables after 100 seconds\n        self.setTime(101)\n>       self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])\nE       AssertionError: 'FAILED' != 'DISABLED'\nE       - FAILED\nE       + DISABLED\n\ntest/central_planner_test.py:676: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}