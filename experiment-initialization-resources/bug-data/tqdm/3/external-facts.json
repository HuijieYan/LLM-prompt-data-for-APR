{
    "tqdm:3": {
        "github_issue_title": [
            "tqdm object cannot be treated as bool when used with opened file\n"
        ],
        "github_issue_description": [
            "My use-case was to display upload progress when sending file with POST using requests library. I wrapped opened file with tqdm:\n\nf = open(filename, 'rb')\nt = tqdm(f)\nrequests.post(url, data=t)\nAnd I got an error:\n\n<...>\n  File \"/tmp/env/lib/python3.6/site-packages/requests/sessions.py\", line 467, in request\n    data = data or {},\n  File \"/tmp/env/lib/python3.6/site-packages/tqdm/_tqdm.py\", line 753, in __len__\n    else len(self.iterable)) if self.iterable is not None \\\nTypeError: object of type '_io.BufferedReader' has no len()\nTurned out that _io.BufferedReader doesn't know file's length.\nOkay, I passed file length to tqdm explicitly:\nt = tqdm(f, total=os.path.getsize(filename))\nNothing changed.\n\nNow, the problem happens when requests tries to treat tqdm as boolean to determine if there something passed or not. Tqdm has no __bool__, so Python falls back to __len__. And __len__ is buggy in that it tries to get len(self.iterable) without checking if the iterable supports __len__.\n\nI think it would be good to:\n(1) return correct length if total was passed for non-measurable iterable; and probably\n(2) implement separate __bool__ which would return True if __len__ returned None - e.g. if tqdm was passed an unmeasurable iterable and no explicit total. Or just return True always.\n"
        ]
    }
}