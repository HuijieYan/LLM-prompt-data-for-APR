{
    "tqdm:1": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/tqdm_1/tqdm/contrib/__init__.py": {
            "buggy_functions": [
                {
                    "function_name": "tenumerate",
                    "function_code": "def tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto,\n               **tqdm_kwargs):\n    \"\"\"\n    Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    try:\n        import numpy as np\n    except ImportError:\n        pass\n    else:\n        if isinstance(iterable, np.ndarray):\n            return tqdm_class(np.ndenumerate(iterable),\n                              total=total or len(iterable), **tqdm_kwargs)\n    return enumerate(tqdm_class(iterable, start, **tqdm_kwargs))\n",
                    "decorators": [],
                    "docstring": "Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n\nParameters\n----------\ntqdm_class  : [default: tqdm.auto.tqdm].",
                    "start_line": 24,
                    "end_line": 41,
                    "variables": {
                        "tqdm_auto": [
                            24
                        ],
                        "ImportError": [
                            35
                        ],
                        "isinstance": [
                            38
                        ],
                        "iterable": [
                            40,
                            41,
                            38,
                            39
                        ],
                        "np.ndarray": [
                            38
                        ],
                        "np": [
                            38,
                            39
                        ],
                        "tqdm_class": [
                            41,
                            39
                        ],
                        "np.ndenumerate": [
                            39
                        ],
                        "total": [
                            40
                        ],
                        "len": [
                            40
                        ],
                        "tqdm_kwargs": [
                            40,
                            41
                        ],
                        "enumerate": [
                            41
                        ],
                        "start": [
                            41
                        ]
                    },
                    "filtered_variables": {
                        "tqdm_auto": [
                            24
                        ],
                        "iterable": [
                            40,
                            41,
                            38,
                            39
                        ],
                        "np.ndarray": [
                            38
                        ],
                        "np": [
                            38,
                            39
                        ],
                        "tqdm_class": [
                            41,
                            39
                        ],
                        "np.ndenumerate": [
                            39
                        ],
                        "total": [
                            40
                        ],
                        "tqdm_kwargs": [
                            40,
                            41
                        ],
                        "start": [
                            41
                        ]
                    },
                    "diff_line_number": 41,
                    "class_data": null,
                    "used_imports": [
                        "from tqdm.auto import tqdm as tqdm_auto",
                        "import numpy as np"
                    ],
                    "variable_values": [
                        [
                            {
                                "tqdm_auto": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iterable": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm_class": {
                                    "variable_value": "<class 'tqdm.std.tqdm'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "np.ndenumerate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "total": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tqdm_kwargs": {
                                    "variable_value": "{'file': <_io.StringIO object at 0x7f74b8f330f0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "start": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "tqdm_auto": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iterable": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm_class": {
                                    "variable_value": "<class 'tqdm.std.tqdm'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "np.ndenumerate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "total": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tqdm_kwargs": {
                                    "variable_value": "{'file': <_io.StringIO object at 0x7f74b8f330f0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "start": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "tqdm_auto": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iterable": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm_class": {
                                    "variable_value": "<class 'tqdm.std.tqdm'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "np.ndenumerate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "total": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tqdm_kwargs": {
                                    "variable_value": "{'file': <_io.StringIO object at 0x7f74b8f330f0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "start": {
                                    "variable_value": "42",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "tqdm_auto": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iterable": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm_class": {
                                    "variable_value": "<class 'tqdm.std.tqdm'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "np.ndenumerate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "total": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tqdm_kwargs": {
                                    "variable_value": "{'file': <_io.StringIO object at 0x7f74b8f330f0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "start": {
                                    "variable_value": "42",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "tqdm_auto": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iterable": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm_class": {
                                    "variable_value": "<class 'tqdm.std.tqdm'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "np.ndenumerate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "total": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tqdm_kwargs": {
                                    "variable_value": "{'file': <_io.StringIO object at 0x7f5ec3d340f0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "start": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "tqdm_auto": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iterable": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm_class": {
                                    "variable_value": "<class 'tqdm.std.tqdm'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "np.ndenumerate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "total": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tqdm_kwargs": {
                                    "variable_value": "{'file': <_io.StringIO object at 0x7f5ec3d340f0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "start": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "tqdm_auto": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iterable": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm_class": {
                                    "variable_value": "<class 'tqdm.std.tqdm'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "np.ndenumerate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "total": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tqdm_kwargs": {
                                    "variable_value": "{'file': <_io.StringIO object at 0x7f5ec3d340f0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "start": {
                                    "variable_value": "42",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            },
                            {
                                "tqdm_auto": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iterable": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tqdm_class": {
                                    "variable_value": "<class 'tqdm.std.tqdm'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "np.ndenumerate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "total": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tqdm_kwargs": {
                                    "variable_value": "{'file': <_io.StringIO object at 0x7f5ec3d340f0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "start": {
                                    "variable_value": "42",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto,\n               **tqdm_kwargs):\n    \"\"\"\n    Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    try:\n        import numpy as np\n    except ImportError:\n        pass\n    else:\n        if isinstance(iterable, np.ndarray):\n            return tqdm_class(np.ndenumerate(iterable),\n                              total=total or len(iterable), **tqdm_kwargs)\n    return enumerate(tqdm_class(iterable, start, **tqdm_kwargs))",
                        "signature": "tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto, **tqdm_kwargs)"
                    },
                    {
                        "code": "def _tzip(iter1, *iter2plus, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of builtin `zip`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    kwargs = deepcopy(tqdm_kwargs)\n    tqdm_class = kwargs.pop(\"tqdm_class\", tqdm_auto)\n    for i in zip(tqdm_class(iter1, **tqdm_kwargs), *iter2plus):\n        yield i",
                        "signature": "_tzip(iter1, *iter2plus, **tqdm_kwargs)"
                    },
                    {
                        "code": "def _tmap(function, *sequences, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of builtin `map`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    for i in _tzip(*sequences, **tqdm_kwargs):\n        yield function(*i)",
                        "signature": "_tmap(function, *sequences, **tqdm_kwargs)"
                    },
                    {
                        "code": "@functools.wraps(_tzip)\ndef tzip(*args, **kwargs):\n    return list(_tzip(*args, **kwargs))",
                        "signature": "tzip(*args, **kwargs)"
                    },
                    {
                        "code": "@functools.wraps(_tmap)\ndef tmap(*args, **kwargs):\n    return list(_tmap(*args, **kwargs))",
                        "signature": "tmap(*args, **kwargs)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class DummyTqdmFile:",
                        "functions": [
                            {
                                "code": "def write(self, x, nolock=False):\n    # Avoid print() second call (useless \\n)\n    if len(x.rstrip()) > 0:\n        tqdm.write(x, file=self._wrapped, nolock=nolock)",
                                "signature": "write(self, x, nolock=False)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "__author__": [
                    12
                ],
                "__all__": [
                    13
                ],
                "ObjectWrapper": [
                    16
                ],
                "len": [
                    40,
                    20
                ],
                "x.rstrip": [
                    20
                ],
                "x": [
                    20,
                    21
                ],
                "tqdm.write": [
                    21
                ],
                "tqdm": [
                    21
                ],
                "self._wrapped": [
                    21
                ],
                "self": [
                    21
                ],
                "nolock": [
                    21
                ],
                "tqdm_auto": [
                    24,
                    53
                ],
                "ImportError": [
                    35
                ],
                "isinstance": [
                    38
                ],
                "iterable": [
                    40,
                    41,
                    38,
                    39
                ],
                "np.ndarray": [
                    38
                ],
                "np": [
                    38,
                    39
                ],
                "tqdm_class": [
                    41,
                    53,
                    54,
                    39
                ],
                "np.ndenumerate": [
                    39
                ],
                "total": [
                    40
                ],
                "tqdm_kwargs": [
                    66,
                    40,
                    41,
                    52,
                    54
                ],
                "enumerate": [
                    41
                ],
                "start": [
                    41
                ],
                "kwargs": [
                    73,
                    77,
                    52,
                    53
                ],
                "deepcopy": [
                    52
                ],
                "kwargs.pop": [
                    53
                ],
                "i": [
                    66,
                    67,
                    54,
                    55
                ],
                "zip": [
                    54
                ],
                "iter1": [
                    54
                ],
                "iter2plus": [
                    54
                ],
                "_tzip": [
                    73,
                    66,
                    79,
                    71
                ],
                "sequences": [
                    66
                ],
                "function": [
                    67
                ],
                "sys.version_info": [
                    70
                ],
                "sys": [
                    70
                ],
                "list": [
                    73,
                    77
                ],
                "args": [
                    73,
                    77
                ],
                "functools.wraps": [
                    75,
                    71
                ],
                "functools": [
                    75,
                    71
                ],
                "_tmap": [
                    80,
                    75,
                    77
                ],
                "tzip": [
                    79
                ],
                "tmap": [
                    80
                ]
            },
            "filtered_variables_in_file": {
                "__author__": [
                    12
                ],
                "__all__": [
                    13
                ],
                "ObjectWrapper": [
                    16
                ],
                "x.rstrip": [
                    20
                ],
                "x": [
                    20,
                    21
                ],
                "tqdm.write": [
                    21
                ],
                "tqdm": [
                    21
                ],
                "self._wrapped": [
                    21
                ],
                "self": [
                    21
                ],
                "nolock": [
                    21
                ],
                "tqdm_auto": [
                    24,
                    53
                ],
                "iterable": [
                    40,
                    41,
                    38,
                    39
                ],
                "np.ndarray": [
                    38
                ],
                "np": [
                    38,
                    39
                ],
                "tqdm_class": [
                    41,
                    53,
                    54,
                    39
                ],
                "np.ndenumerate": [
                    39
                ],
                "total": [
                    40
                ],
                "tqdm_kwargs": [
                    66,
                    40,
                    41,
                    52,
                    54
                ],
                "start": [
                    41
                ],
                "kwargs": [
                    73,
                    77,
                    52,
                    53
                ],
                "deepcopy": [
                    52
                ],
                "kwargs.pop": [
                    53
                ],
                "i": [
                    66,
                    67,
                    54,
                    55
                ],
                "iter1": [
                    54
                ],
                "iter2plus": [
                    54
                ],
                "_tzip": [
                    73,
                    66,
                    79,
                    71
                ],
                "sequences": [
                    66
                ],
                "function": [
                    67
                ],
                "sys.version_info": [
                    70
                ],
                "sys": [
                    70
                ],
                "args": [
                    73,
                    77
                ],
                "functools.wraps": [
                    75,
                    71
                ],
                "functools": [
                    75,
                    71
                ],
                "_tmap": [
                    80,
                    75,
                    77
                ],
                "tzip": [
                    79
                ],
                "tmap": [
                    80
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/tqdm_1/tqdm/tests/tests_contrib.py",
                "test_function": "test_enumerate",
                "test_function_code": "@with_setup(pretest, posttest)\ndef test_enumerate():\n    \"\"\"Test contrib.tenumerate\"\"\"\n    with closing(StringIO()) as our_file:\n        a = range(9)\n        assert list(tenumerate(a, file=our_file)) == list(enumerate(a))\n        assert list(tenumerate(a, 42, file=our_file)) == list(enumerate(a, 42))",
                "test_error": "TypeError: 'int' object is not subscriptable",
                "full_test_error": "@with_setup(pretest, posttest)\n    def test_enumerate():\n        \"\"\"Test contrib.tenumerate\"\"\"\n        with closing(StringIO()) as our_file:\n            a = range(9)\n            assert list(tenumerate(a, file=our_file)) == list(enumerate(a))\n>           assert list(tenumerate(a, 42, file=our_file)) == list(enumerate(a, 42))\n\ntqdm/tests/tests_contrib.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntqdm/contrib/__init__.py:41: in tenumerate\n    return enumerate(tqdm_class(iterable, start, **tqdm_kwargs))\ntqdm/std.py:1026: in __init__\n    self.refresh(lock_args=self.lock_args)\ntqdm/std.py:1311: in refresh\n    self.display()\ntqdm/std.py:1435: in display\n    self.sp(self.__repr__() if msg is None else msg)\ntqdm/std.py:1065: in __repr__\n    return self.format_meter(**self.format_dict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 0, total = 9, elapsed = 0, ncols = None, prefix = 42, ascii = True\nunit = 'it', unit_scale = False, rate = None, bar_format = None, postfix = ''\nunit_divisor = 1000, extra_kwargs = {}, elapsed_str = '00:00', inv_rate = None\nformat_sizeof = <function tqdm.format_sizeof at 0x7f95fdaf4050>\nrate_noinv_fmt = '?it/s', rate_inv_fmt = '?s/it', rate_fmt = '?it/s'\nn_fmt = '0'\n\n    @staticmethod\n    def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                     unit='it', unit_scale=False, rate=None, bar_format=None,\n                     postfix=None, unit_divisor=1000, **extra_kwargs):\n        \"\"\"\n        Return a string-based progress bar given some parameters\n    \n        Parameters\n        ----------\n        n  : int or float\n            Number of finished iterations.\n        total  : int or float\n            The expected total number of iterations. If meaningless (None),\n            only basic progress statistics are displayed (no ETA).\n        elapsed  : float\n            Number of seconds passed since start.\n        ncols  : int, optional\n            The width of the entire output message. If specified,\n            dynamically resizes `{bar}` to stay within this bound\n            [default: None]. If `0`, will not print any bar (only stats).\n            The fallback is `{bar:10}`.\n        prefix  : str, optional\n            Prefix message (included in total width) [default: ''].\n            Use as {desc} in bar_format string.\n        ascii  : bool, optional or str, optional\n            If not set, use unicode (smooth blocks) to fill the meter\n            [default: False]. The fallback is to use ASCII characters\n            \" 123456789#\".\n        unit  : str, optional\n            The iteration unit [default: 'it'].\n        unit_scale  : bool or int or float, optional\n            If 1 or True, the number of iterations will be printed with an\n            appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)\n            [default: False]. If any other non-zero number, will scale\n            `total` and `n`.\n        rate  : float, optional\n            Manual override for iteration rate.\n            If [default: None], uses n/elapsed.\n        bar_format  : str, optional\n            Specify a custom bar string formatting. May impact performance.\n            [default: '{l_bar}{bar}{r_bar}'], where\n            l_bar='{desc}: {percentage:3.0f}%|' and\n            r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n              '{rate_fmt}{postfix}]'\n            Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n              percentage, elapsed, elapsed_s, ncols, desc, unit,\n              rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n              rate_inv, rate_inv_fmt, postfix, unit_divisor,\n              remaining, remaining_s.\n            Note that a trailing \": \" is automatically removed after {desc}\n            if the latter is empty.\n        postfix  : *, optional\n            Similar to `prefix`, but placed at the end\n            (e.g. for additional stats).\n            Note: postfix is usually a string (not a dict) for this method,\n            and will if possible be set to postfix = ', ' + postfix.\n            However other types are supported (#382).\n        unit_divisor  : float, optional\n            [default: 1000], ignored unless `unit_scale` is True.\n    \n        Returns\n        -------\n        out  : Formatted meter and stats, ready to display.\n        \"\"\"\n    \n        # sanity check: total\n        if total and n >= (total + 0.5):  # allow float imprecision (#849)\n            total = None\n    \n        # apply custom scale if necessary\n        if unit_scale and unit_scale not in (True, 1):\n            if total:\n                total *= unit_scale\n            n *= unit_scale\n            if rate:\n                rate *= unit_scale  # by default rate = 1 / self.avg_time\n            unit_scale = False\n    \n        elapsed_str = tqdm.format_interval(elapsed)\n    \n        # if unspecified, attempt to use rate = average speed\n        # (we allow manual override since predicting time is an arcane art)\n        if rate is None and elapsed:\n            rate = n / elapsed\n        inv_rate = 1 / rate if rate else None\n        format_sizeof = tqdm.format_sizeof\n        rate_noinv_fmt = ((format_sizeof(rate) if unit_scale else\n                           '{0:5.2f}'.format(rate))\n                          if rate else '?') + unit + '/s'\n        rate_inv_fmt = ((format_sizeof(inv_rate) if unit_scale else\n                         '{0:5.2f}'.format(inv_rate))\n                        if inv_rate else '?') + 's/' + unit\n        rate_fmt = rate_inv_fmt if inv_rate and inv_rate > 1 else rate_noinv_fmt\n    \n        if unit_scale:\n            n_fmt = format_sizeof(n, divisor=unit_divisor)\n            total_fmt = format_sizeof(total, divisor=unit_divisor) \\\n                if total is not None else '?'\n        else:\n            n_fmt = str(n)\n            total_fmt = str(total) if total is not None else '?'\n    \n        try:\n            postfix = ', ' + postfix if postfix else ''\n        except TypeError:\n            pass\n    \n        remaining = (total - n) / rate if rate and total else 0\n        remaining_str = tqdm.format_interval(remaining) if rate else '?'\n    \n        # format the stats displayed to the left and right sides of the bar\n        if prefix:\n            # old prefix setup work around\n>           bool_prefix_colon_already = (prefix[-2:] == \": \")\nE           TypeError: 'int' object is not subscriptable\n\ntqdm/std.py:423: TypeError",
                "traceback": "tqdm/contrib/__init__.py:41: in tenumerate\n    return enumerate(tqdm_class(iterable, start, **tqdm_kwargs))\ntqdm/std.py:1026: in __init__\n    self.refresh(lock_args=self.lock_args)\ntqdm/std.py:1311: in refresh\n    self.display()\ntqdm/std.py:1435: in display\n    self.sp(self.__repr__() if msg is None else msg)\ntqdm/std.py:1065: in __repr__\n    return self.format_meter(**self.format_dict)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 0, total = 9, elapsed = 0, ncols = None, prefix = 42, ascii = True\nunit = 'it', unit_scale = False, rate = None, bar_format = None, postfix = ''\nunit_divisor = 1000, extra_kwargs = {}, elapsed_str = '00:00', inv_rate = None\nformat_sizeof = <function tqdm.format_sizeof at 0x7f95fdaf4050>\nrate_noinv_fmt = '?it/s', rate_inv_fmt = '?s/it', rate_fmt = '?it/s'\nn_fmt = '0'\n\n    @staticmethod\n    def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                     unit='it', unit_scale=False, rate=None, bar_format=None,\n                     postfix=None, unit_divisor=1000, **extra_kwargs):\n        \"\"\"\n        Return a string-based progress bar given some parameters\n    \n        Parameters\n        ----------\n        n  : int or float\n            Number of finished iterations.\n        total  : int or float\n            The expected total number of iterations. If meaningless (None),\n            only basic progress statistics are displayed (no ETA).\n        elapsed  : float\n            Number of seconds passed since start.\n        ncols  : int, optional\n            The width of the entire output message. If specified,\n            dynamically resizes `{bar}` to stay within this bound\n            [default: None]. If `0`, will not print any bar (only stats).\n            The fallback is `{bar:10}`.\n        prefix  : str, optional\n            Prefix message (included in total width) [default: ''].\n            Use as {desc} in bar_format string.\n        ascii  : bool, optional or str, optional\n            If not set, use unicode (smooth blocks) to fill the meter\n            [default: False]. The fallback is to use ASCII characters\n            \" 123456789#\".\n        unit  : str, optional\n            The iteration unit [default: 'it'].\n        unit_scale  : bool or int or float, optional\n            If 1 or True, the number of iterations will be printed with an\n            appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)\n            [default: False]. If any other non-zero number, will scale\n            `total` and `n`.\n        rate  : float, optional\n            Manual override for iteration rate.\n            If [default: None], uses n/elapsed.\n        bar_format  : str, optional\n            Specify a custom bar string formatting. May impact performance.\n            [default: '{l_bar}{bar}{r_bar}'], where\n            l_bar='{desc}: {percentage:3.0f}%|' and\n            r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n              '{rate_fmt}{postfix}]'\n            Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n              percentage, elapsed, elapsed_s, ncols, desc, unit,\n              rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n              rate_inv, rate_inv_fmt, postfix, unit_divisor,\n              remaining, remaining_s.\n            Note that a trailing \": \" is automatically removed after {desc}\n            if the latter is empty.\n        postfix  : *, optional\n            Similar to `prefix`, but placed at the end\n            (e.g. for additional stats).\n            Note: postfix is usually a string (not a dict) for this method,\n            and will if possible be set to postfix = ', ' + postfix.\n            However other types are supported (#382).\n        unit_divisor  : float, optional\n            [default: 1000], ignored unless `unit_scale` is True.\n    \n        Returns\n        -------\n        out  : Formatted meter and stats, ready to display.\n        \"\"\"\n    \n        # sanity check: total\n        if total and n >= (total + 0.5):  # allow float imprecision (#849)\n            total = None\n    \n        # apply custom scale if necessary\n        if unit_scale and unit_scale not in (True, 1):\n            if total:\n                total *= unit_scale\n            n *= unit_scale\n            if rate:\n                rate *= unit_scale  # by default rate = 1 / self.avg_time\n            unit_scale = False\n    \n        elapsed_str = tqdm.format_interval(elapsed)\n    \n        # if unspecified, attempt to use rate = average speed\n        # (we allow manual override since predicting time is an arcane art)\n        if rate is None and elapsed:\n            rate = n / elapsed\n        inv_rate = 1 / rate if rate else None\n        format_sizeof = tqdm.format_sizeof\n        rate_noinv_fmt = ((format_sizeof(rate) if unit_scale else\n                           '{0:5.2f}'.format(rate))\n                          if rate else '?') + unit + '/s'\n        rate_inv_fmt = ((format_sizeof(inv_rate) if unit_scale else\n                         '{0:5.2f}'.format(inv_rate))\n                        if inv_rate else '?') + 's/' + unit\n        rate_fmt = rate_inv_fmt if inv_rate and inv_rate > 1 else rate_noinv_fmt\n    \n        if unit_scale:\n            n_fmt = format_sizeof(n, divisor=unit_divisor)\n            total_fmt = format_sizeof(total, divisor=unit_divisor) \\\n                if total is not None else '?'\n        else:\n            n_fmt = str(n)\n            total_fmt = str(total) if total is not None else '?'\n    \n        try:\n            postfix = ', ' + postfix if postfix else ''\n        except TypeError:\n            pass\n    \n        remaining = (total - n) / rate if rate and total else 0\n        remaining_str = tqdm.format_interval(remaining) if rate else '?'\n    \n        # format the stats displayed to the left and right sides of the bar\n        if prefix:\n            # old prefix setup work around\n>           bool_prefix_colon_already = (prefix[-2:] == \": \")\nE           TypeError: 'int' object is not subscriptable\n\ntqdm/std.py:423: TypeError",
                "test_function_decorators": [
                    "with_setup(pretest, posttest)"
                ]
            }
        ]
    }
}