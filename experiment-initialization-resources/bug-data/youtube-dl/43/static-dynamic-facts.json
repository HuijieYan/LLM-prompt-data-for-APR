{
    "youtube-dl:43": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/youtube-dl_43/youtube_dl/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "url_basename",
                    "function_code": "def url_basename(url):\n    m = re.match(r'(?:https?:|)//[^/]+/(?:[^/?#]+/)?([^/?#]+)/?(?:[?#]|$)', url)\n    if not m:\n        return u''\n    return m.group(1)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1089,
                    "end_line": 1093,
                    "variables": {
                        "m": [
                            1090,
                            1091,
                            1093
                        ],
                        "re.match": [
                            1090
                        ],
                        "re": [
                            1090
                        ],
                        "url": [
                            1090
                        ],
                        "m.group": [
                            1093
                        ]
                    },
                    "filtered_variables": {
                        "m": [
                            1090,
                            1091,
                            1093
                        ],
                        "re.match": [
                            1090
                        ],
                        "re": [
                            1090
                        ],
                        "url": [
                            1090
                        ],
                        "m.group": [
                            1093
                        ]
                    },
                    "diff_line_number": 1090,
                    "class_data": null,
                    "used_imports": [
                        "import re"
                    ],
                    "variable_values": [
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "m.group": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz'",
                                    "variable_type": "str",
                                    "variable_shape": "21"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 21), match='http://foo.de/bar/baz'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz'",
                                    "variable_type": "str",
                                    "variable_shape": "21"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f0c8d897030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz?x=y'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 22), match='http://foo.de/bar/baz?'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz?x=y'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f0c8d8971b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz#x=y'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 22), match='http://foo.de/bar/baz#'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz#x=y'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f0c8d8974b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz/'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 22), match='http://foo.de/bar/baz/'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz/'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7f0c8d897530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://media.w3.org/2010/05/sintel/trailer.mp4'",
                                    "variable_type": "str",
                                    "variable_shape": "46"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://media.w3.org/2010/05/sintel/trailer.mp4'",
                                    "variable_type": "str",
                                    "variable_shape": "46"
                                },
                                "m.group": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "m.group": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz'",
                                    "variable_type": "str",
                                    "variable_shape": "21"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 21), match='http://foo.de/bar/baz'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz'",
                                    "variable_type": "str",
                                    "variable_shape": "21"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7fb569987030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz?x=y'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 22), match='http://foo.de/bar/baz?'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz?x=y'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7fb5699871b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz#x=y'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 22), match='http://foo.de/bar/baz#'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz#x=y'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7fb569987430>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz/'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 22), match='http://foo.de/bar/baz/'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://foo.de/bar/baz/'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7fb5699c4ab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://media.w3.org/2010/05/sintel/trailer.mp4'",
                                    "variable_type": "str",
                                    "variable_shape": "46"
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 46), match='http://media.w3.org/2010/05/sintel/trailer.mp4'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'http://media.w3.org/2010/05/sintel/trailer.mp4'",
                                    "variable_type": "str",
                                    "variable_shape": "46"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x7fb5699c4a30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def compat_ord(c):\n    if type(c) is int: return c\n    else: return ord(c)",
                        "signature": "compat_ord(c)"
                    },
                    {
                        "code": "def preferredencoding():\n    \"\"\"Get preferred encoding.\n\n    Returns the best encoding scheme for the system, based on\n    locale.getpreferredencoding() and some further tweaks.\n    \"\"\"\n    try:\n        pref = locale.getpreferredencoding()\n        u'TEST'.encode(pref)\n    except:\n        pref = 'UTF-8'\n\n    return pref",
                        "signature": "preferredencoding()"
                    },
                    {
                        "code": "def xpath_with_ns(path, ns_map):\n    components = [c.split(':') for c in path.split('/')]\n    replaced = []\n    for c in components:\n        if len(c) == 1:\n            replaced.append(c[0])\n        else:\n            ns, tag = c\n            replaced.append('{%s}%s' % (ns_map[ns], tag))\n    return '/'.join(replaced)",
                        "signature": "xpath_with_ns(path, ns_map)"
                    },
                    {
                        "code": "def htmlentity_transform(matchobj):\n    \"\"\"Transforms an HTML entity to a character.\n\n    This function receives a match object and is intended to be used with\n    the re.sub() function.\n    \"\"\"\n    entity = matchobj.group(1)\n\n    # Known non-numeric HTML entity\n    if entity in compat_html_entities.name2codepoint:\n        return compat_chr(compat_html_entities.name2codepoint[entity])\n\n    mobj = re.match(u'(?u)#(x?\\\\d+)', entity)\n    if mobj is not None:\n        numstr = mobj.group(1)\n        if numstr.startswith(u'x'):\n            base = 16\n            numstr = u'0%s' % numstr\n        else:\n            base = 10\n        return compat_chr(int(numstr, base))\n\n    # Unknown entity in name, return its literal representation\n    return (u'&%s;' % entity)",
                        "signature": "htmlentity_transform(matchobj)"
                    },
                    {
                        "code": "def get_element_by_id(id, html):\n    \"\"\"Return the content of the tag with the specified ID in the passed HTML document\"\"\"\n    return get_element_by_attribute(\"id\", id, html)",
                        "signature": "get_element_by_id(id, html)"
                    },
                    {
                        "code": "def get_element_by_attribute(attribute, value, html):\n    \"\"\"Return the content of the tag with the specified attribute in the passed HTML document\"\"\"\n    parser = AttrParser(attribute, value)\n    try:\n        parser.loads(html)\n    except compat_html_parser.HTMLParseError:\n        pass\n    return parser.get_result()",
                        "signature": "get_element_by_attribute(attribute, value, html)"
                    },
                    {
                        "code": "def get_meta_content(name, html):\n    \"\"\"\n    Return the content attribute from the meta tag with the given name attribute.\n    \"\"\"\n    parser = MetaParser(name)\n    try:\n        parser.loads(html)\n    except compat_html_parser.HTMLParseError:\n        pass\n    return parser.get_result()",
                        "signature": "get_meta_content(name, html)"
                    },
                    {
                        "code": "def clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n    # Newline vs <br />\n    html = html.replace('\\n', ' ')\n    html = re.sub(r'\\s*<\\s*br\\s*/?\\s*>\\s*', '\\n', html)\n    html = re.sub(r'<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>', '\\n', html)\n    # Strip html tags\n    html = re.sub('<.*?>', '', html)\n    # Replace html entities\n    html = unescapeHTML(html)\n    return html.strip()",
                        "signature": "clean_html(html)"
                    },
                    {
                        "code": "def sanitize_open(filename, open_mode):\n    \"\"\"Try to open the given filename, and slightly tweak it if this fails.\n\n    Attempts to open the given filename. If this fails, it tries to change\n    the filename slightly, step by step, until it's either able to open it\n    or it fails and raises a final exception, like the standard open()\n    function.\n\n    It returns the tuple (stream, definitive_file_name).\n    \"\"\"\n    try:\n        if filename == u'-':\n            if sys.platform == 'win32':\n                import msvcrt\n                msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n            return (sys.stdout.buffer if hasattr(sys.stdout, 'buffer') else sys.stdout, filename)\n        stream = open(encodeFilename(filename), open_mode)\n        return (stream, filename)\n    except (IOError, OSError) as err:\n        if err.errno in (errno.EACCES,):\n            raise\n\n        # In case of error, try to remove win32 forbidden chars\n        alt_filename = os.path.join(\n                        re.sub(u'[/<>:\"\\\\|\\\\\\\\?\\\\*]', u'#', path_part)\n                        for path_part in os.path.split(filename)\n                       )\n        if alt_filename == filename:\n            raise\n        else:\n            # An exception here should be caught in the caller\n            stream = open(encodeFilename(filename), open_mode)\n            return (stream, alt_filename)",
                        "signature": "sanitize_open(filename, open_mode)"
                    },
                    {
                        "code": "def timeconvert(timestr):\n    \"\"\"Convert RFC 2822 defined time string into system timestamp\"\"\"\n    timestamp = None\n    timetuple = email.utils.parsedate_tz(timestr)\n    if timetuple is not None:\n        timestamp = email.utils.mktime_tz(timetuple)\n    return timestamp",
                        "signature": "timeconvert(timestr)"
                    },
                    {
                        "code": "def sanitize_filename(s, restricted=False, is_id=False):\n    \"\"\"Sanitizes a string so it could be used as part of a filename.\n    If restricted is set, use a stricter subset of allowed characters.\n    Set is_id if this is not an arbitrary string, but an ID that should be kept if possible\n    \"\"\"\n    def replace_insane(char):\n        if char == '?' or ord(char) < 32 or ord(char) == 127:\n            return ''\n        elif char == '\"':\n            return '' if restricted else '\\''\n        elif char == ':':\n            return '_-' if restricted else ' -'\n        elif char in '\\\\/|*<>':\n            return '_'\n        if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n            return '_'\n        if restricted and ord(char) > 127:\n            return '_'\n        return char\n\n    result = u''.join(map(replace_insane, s))\n    if not is_id:\n        while '__' in result:\n            result = result.replace('__', '_')\n        result = result.strip('_')\n        # Common case of \"Foreign band name - English song title\"\n        if restricted and result.startswith('-_'):\n            result = result[2:]\n        if not result:\n            result = '_'\n    return result",
                        "signature": "sanitize_filename(s, restricted=False, is_id=False)"
                    },
                    {
                        "code": "def orderedSet(iterable):\n    \"\"\" Remove all duplicates from the input iterable \"\"\"\n    res = []\n    for el in iterable:\n        if el not in res:\n            res.append(el)\n    return res",
                        "signature": "orderedSet(iterable)"
                    },
                    {
                        "code": "def unescapeHTML(s):\n    \"\"\"\n    @param s a string\n    \"\"\"\n    assert type(s) == type(u'')\n\n    result = re.sub(u'(?u)&(.+?);', htmlentity_transform, s)\n    return result",
                        "signature": "unescapeHTML(s)"
                    },
                    {
                        "code": "def encodeFilename(s):\n    \"\"\"\n    @param s The name of the file\n    \"\"\"\n\n    assert type(s) == type(u'')\n\n    # Python 3 has a Unicode API\n    if sys.version_info >= (3, 0):\n        return s\n\n    if sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n        # Pass u'' directly to use Unicode APIs on Windows 2000 and up\n        # (Detecting Windows NT 4 is tricky because 'major >= 4' would\n        # match Windows 9x series as well. Besides, NT 4 is obsolete.)\n        return s\n    else:\n        encoding = sys.getfilesystemencoding()\n        if encoding is None:\n            encoding = 'utf-8'\n        return s.encode(encoding, 'ignore')",
                        "signature": "encodeFilename(s)"
                    },
                    {
                        "code": "def decodeOption(optval):\n    if optval is None:\n        return optval\n    if isinstance(optval, bytes):\n        optval = optval.decode(preferredencoding())\n\n    assert isinstance(optval, compat_str)\n    return optval",
                        "signature": "decodeOption(optval)"
                    },
                    {
                        "code": "def formatSeconds(secs):\n    if secs > 3600:\n        return '%d:%02d:%02d' % (secs // 3600, (secs % 3600) // 60, secs % 60)\n    elif secs > 60:\n        return '%d:%02d' % (secs // 60, secs % 60)\n    else:\n        return '%d' % secs",
                        "signature": "formatSeconds(secs)"
                    },
                    {
                        "code": "def make_HTTPS_handler(opts_no_check_certificate):\n    if sys.version_info < (3, 2):\n        import httplib\n\n        class HTTPSConnectionV3(httplib.HTTPSConnection):\n            def __init__(self, *args, **kwargs):\n                httplib.HTTPSConnection.__init__(self, *args, **kwargs)\n\n            def connect(self):\n                sock = socket.create_connection((self.host, self.port), self.timeout)\n                if getattr(self, '_tunnel_host', False):\n                    self.sock = sock\n                    self._tunnel()\n                try:\n                    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv3)\n                except ssl.SSLError:\n                    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv23)\n\n        class HTTPSHandlerV3(compat_urllib_request.HTTPSHandler):\n            def https_open(self, req):\n                return self.do_open(HTTPSConnectionV3, req)\n        return HTTPSHandlerV3()\n    else:\n        context = ssl.SSLContext(ssl.PROTOCOL_SSLv3)\n        context.verify_mode = (ssl.CERT_NONE\n                               if opts_no_check_certificate\n                               else ssl.CERT_REQUIRED)\n        context.set_default_verify_paths()\n        try:\n            context.load_default_certs()\n        except AttributeError:\n            pass  # Python < 3.4\n        return compat_urllib_request.HTTPSHandler(context=context)",
                        "signature": "make_HTTPS_handler(opts_no_check_certificate)"
                    },
                    {
                        "code": "def unified_strdate(date_str):\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n    upload_date = None\n    #Replace commas\n    date_str = date_str.replace(',',' ')\n    # %z (UTC offset) is only supported in python>=3.2\n    date_str = re.sub(r' (\\+|-)[\\d]*$', '', date_str)\n    format_expressions = [\n        '%d %B %Y',\n        '%B %d %Y',\n        '%b %d %Y',\n        '%Y-%m-%d',\n        '%d/%m/%Y',\n        '%Y/%m/%d %H:%M:%S',\n        '%d.%m.%Y %H:%M',\n        '%Y-%m-%dT%H:%M:%SZ',\n        '%Y-%m-%dT%H:%M:%S.%fZ',\n        '%Y-%m-%dT%H:%M:%S.%f0Z',\n        '%Y-%m-%dT%H:%M:%S',\n    ]\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n        except:\n            pass\n    return upload_date",
                        "signature": "unified_strdate(date_str)"
                    },
                    {
                        "code": "def determine_ext(url, default_ext=u'unknown_video'):\n    guess = url.partition(u'?')[0].rpartition(u'.')[2]\n    if re.match(r'^[A-Za-z0-9]+$', guess):\n        return guess\n    else:\n        return default_ext",
                        "signature": "determine_ext(url, default_ext=u'unknown_video')"
                    },
                    {
                        "code": "def subtitles_filename(filename, sub_lang, sub_format):\n    return filename.rsplit('.', 1)[0] + u'.' + sub_lang + u'.' + sub_format",
                        "signature": "subtitles_filename(filename, sub_lang, sub_format)"
                    },
                    {
                        "code": "def date_from_str(date_str):\n    \"\"\"\n    Return a datetime object from a string in the format YYYYMMDD or\n    (now|today)[+-][0-9](day|week|month|year)(s)?\"\"\"\n    today = datetime.date.today()\n    if date_str == 'now'or date_str == 'today':\n        return today\n    match = re.match('(now|today)(?P<sign>[+-])(?P<time>\\d+)(?P<unit>day|week|month|year)(s)?', date_str)\n    if match is not None:\n        sign = match.group('sign')\n        time = int(match.group('time'))\n        if sign == '-':\n            time = -time\n        unit = match.group('unit')\n        #A bad aproximation?\n        if unit == 'month':\n            unit = 'day'\n            time *= 30\n        elif unit == 'year':\n            unit = 'day'\n            time *= 365\n        unit += 's'\n        delta = datetime.timedelta(**{unit: time})\n        return today + delta\n    return datetime.datetime.strptime(date_str, \"%Y%m%d\").date()",
                        "signature": "date_from_str(date_str)"
                    },
                    {
                        "code": "def platform_name():\n    \"\"\" Returns the platform name as a compat_str \"\"\"\n    res = platform.platform()\n    if isinstance(res, bytes):\n        res = res.decode(preferredencoding())\n\n    assert isinstance(res, compat_str)\n    return res",
                        "signature": "platform_name()"
                    },
                    {
                        "code": "def write_string(s, out=None):\n    if out is None:\n        out = sys.stderr\n    assert type(s) == type(u'')\n\n    if ('b' in getattr(out, 'mode', '') or\n            sys.version_info[0] < 3):  # Python 2 lies about mode of sys.stderr\n        s = s.encode(preferredencoding(), 'ignore')\n    out.write(s)\n    out.flush()",
                        "signature": "write_string(s, out=None)"
                    },
                    {
                        "code": "def bytes_to_intlist(bs):\n    if not bs:\n        return []\n    if isinstance(bs[0], int):  # Python 3\n        return list(bs)\n    else:\n        return [ord(c) for c in bs]",
                        "signature": "bytes_to_intlist(bs)"
                    },
                    {
                        "code": "def intlist_to_bytes(xs):\n    if not xs:\n        return b''\n    if isinstance(chr(0), bytes):  # Python 2\n        return ''.join([chr(x) for x in xs])\n    else:\n        return bytes(xs)",
                        "signature": "intlist_to_bytes(xs)"
                    },
                    {
                        "code": "def get_cachedir(params={}):\n    cache_root = os.environ.get('XDG_CACHE_HOME',\n                                os.path.expanduser('~/.cache'))\n    return params.get('cachedir', os.path.join(cache_root, 'youtube-dl'))",
                        "signature": "get_cachedir(params={})"
                    },
                    {
                        "code": "def shell_quote(args):\n    quoted_args = []\n    encoding = sys.getfilesystemencoding()\n    if encoding is None:\n        encoding = 'utf-8'\n    for a in args:\n        if isinstance(a, bytes):\n            # We may get a filename encoded with 'encodeFilename'\n            a = a.decode(encoding)\n        quoted_args.append(pipes.quote(a))\n    return u' '.join(quoted_args)",
                        "signature": "shell_quote(args)"
                    },
                    {
                        "code": "def takewhile_inclusive(pred, seq):\n    \"\"\" Like itertools.takewhile, but include the latest evaluated element\n        (the first element so that Not pred(e)) \"\"\"\n    for e in seq:\n        yield e\n        if not pred(e):\n            return",
                        "signature": "takewhile_inclusive(pred, seq)"
                    },
                    {
                        "code": "def smuggle_url(url, data):\n    \"\"\" Pass additional data in a URL for internal use. \"\"\"\n\n    sdata = compat_urllib_parse.urlencode(\n        {u'__youtubedl_smuggle': json.dumps(data)})\n    return url + u'#' + sdata",
                        "signature": "smuggle_url(url, data)"
                    },
                    {
                        "code": "def unsmuggle_url(smug_url):\n    if not '#__youtubedl_smuggle' in smug_url:\n        return smug_url, None\n    url, _, sdata = smug_url.rpartition(u'#')\n    jsond = compat_parse_qs(sdata)[u'__youtubedl_smuggle'][0]\n    data = json.loads(jsond)\n    return url, data",
                        "signature": "unsmuggle_url(smug_url)"
                    },
                    {
                        "code": "def format_bytes(bytes):\n    if bytes is None:\n        return u'N/A'\n    if type(bytes) is str:\n        bytes = float(bytes)\n    if bytes == 0.0:\n        exponent = 0\n    else:\n        exponent = int(math.log(bytes, 1024.0))\n    suffix = [u'B', u'KiB', u'MiB', u'GiB', u'TiB', u'PiB', u'EiB', u'ZiB', u'YiB'][exponent]\n    converted = float(bytes) / float(1024 ** exponent)\n    return u'%.2f%s' % (converted, suffix)",
                        "signature": "format_bytes(bytes)"
                    },
                    {
                        "code": "def str_to_int(int_str):\n    int_str = re.sub(r'[,\\.]', u'', int_str)\n    return int(int_str)",
                        "signature": "str_to_int(int_str)"
                    },
                    {
                        "code": "def get_term_width():\n    columns = os.environ.get('COLUMNS', None)\n    if columns:\n        return int(columns)\n\n    try:\n        sp = subprocess.Popen(\n            ['stty', 'size'],\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = sp.communicate()\n        return int(out.split()[1])\n    except:\n        pass\n    return None",
                        "signature": "get_term_width()"
                    },
                    {
                        "code": "def month_by_name(name):\n    \"\"\" Return the number of a month by (locale-independently) English name \"\"\"\n\n    ENGLISH_NAMES = [\n        u'January', u'February', u'March', u'April', u'May', u'June',\n        u'July', u'August', u'September', u'October', u'November', u'December']\n    try:\n        return ENGLISH_NAMES.index(name) + 1\n    except ValueError:\n        return None",
                        "signature": "month_by_name(name)"
                    },
                    {
                        "code": "def fix_xml_all_ampersand(xml_str):\n    \"\"\"Replace all the '&' by '&amp;' in XML\"\"\"\n    return xml_str.replace(u'&', u'&amp;')",
                        "signature": "fix_xml_all_ampersand(xml_str)"
                    },
                    {
                        "code": "def setproctitle(title):\n    assert isinstance(title, type(u''))\n    try:\n        libc = ctypes.cdll.LoadLibrary(\"libc.so.6\")\n    except OSError:\n        return\n    title = title\n    buf = ctypes.create_string_buffer(len(title) + 1)\n    buf.value = title.encode('utf-8')\n    try:\n        libc.prctl(15, ctypes.byref(buf), 0, 0, 0)\n    except AttributeError:\n        return  # Strange libc, just skip this",
                        "signature": "setproctitle(title)"
                    },
                    {
                        "code": "def remove_start(s, start):\n    if s.startswith(start):\n        return s[len(start):]\n    return s",
                        "signature": "remove_start(s, start)"
                    },
                    {
                        "code": "def url_basename(url):\n    m = re.match(r'(?:https?:|)//[^/]+/(?:[^/?#]+/)?([^/?#]+)/?(?:[?#]|$)', url)\n    if not m:\n        return u''\n    return m.group(1)",
                        "signature": "url_basename(url)"
                    },
                    {
                        "code": "def compat_print(s):\n    print(s.encode(preferredencoding(), 'xmlcharrefreplace'))",
                        "signature": "compat_print(s)"
                    },
                    {
                        "code": "def compat_print(s):\n    assert type(s) == type(u'')\n    print(s)",
                        "signature": "compat_print(s)"
                    },
                    {
                        "code": "def write_json_file(obj, fn):\n    with open(fn, 'wb') as f:\n        json.dump(obj, f)",
                        "signature": "write_json_file(obj, fn)"
                    },
                    {
                        "code": "def write_json_file(obj, fn):\n    with open(fn, 'w', encoding='utf-8') as f:\n        json.dump(obj, f)",
                        "signature": "write_json_file(obj, fn)"
                    },
                    {
                        "code": "def find_xpath_attr(node, xpath, key, val):\n    \"\"\" Find the xpath xpath[@key=val] \"\"\"\n    assert re.match(r'^[a-zA-Z]+$', key)\n    assert re.match(r'^[a-zA-Z0-9@\\s]*$', val)\n    expr = xpath + u\"[@%s='%s']\" % (key, val)\n    return node.find(expr)",
                        "signature": "find_xpath_attr(node, xpath, key, val)"
                    },
                    {
                        "code": "def find_xpath_attr(node, xpath, key, val):\n    for f in node.findall(xpath):\n        if f.attrib.get(key) == val:\n            return f\n    return None",
                        "signature": "find_xpath_attr(node, xpath, key, val)"
                    },
                    {
                        "code": "def _lock_file(f, exclusive):\n    overlapped = OVERLAPPED()\n    overlapped.Offset = 0\n    overlapped.OffsetHigh = 0\n    overlapped.hEvent = 0\n    f._lock_file_overlapped_p = ctypes.pointer(overlapped)\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not LockFileEx(handle, 0x2 if exclusive else 0x0, 0,\n                      whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Locking file failed: %r' % ctypes.FormatError())",
                        "signature": "_lock_file(f, exclusive)"
                    },
                    {
                        "code": "def _unlock_file(f):\n    assert f._lock_file_overlapped_p\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not UnlockFileEx(handle, 0,\n                        whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Unlocking file failed: %r' % ctypes.FormatError())",
                        "signature": "_unlock_file(f)"
                    },
                    {
                        "code": "def _lock_file(f, exclusive):\n    fcntl.lockf(f, fcntl.LOCK_EX if exclusive else fcntl.LOCK_SH)",
                        "signature": "_lock_file(f, exclusive)"
                    },
                    {
                        "code": "def _unlock_file(f):\n    fcntl.lockf(f, fcntl.LOCK_UN)",
                        "signature": "_unlock_file(f)"
                    },
                    {
                        "code": "def _unquote(string, encoding='utf-8', errors='replace'):\n    if string == '':\n        return string\n    res = string.split('%')\n    if len(res) == 1:\n        return string\n    if encoding is None:\n        encoding = 'utf-8'\n    if errors is None:\n        errors = 'replace'\n    # pct_sequence: contiguous sequence of percent-encoded bytes, decoded\n    pct_sequence = b''\n    string = res[0]\n    for item in res[1:]:\n        try:\n            if not item:\n                raise ValueError\n            pct_sequence += item[:2].decode('hex')\n            rest = item[2:]\n            if not rest:\n                # This segment was just a single percent-encoded character.\n                # May be part of a sequence of code units, so delay decoding.\n                # (Stored in pct_sequence).\n                continue\n        except ValueError:\n            rest = '%' + item\n        # Encountered non-percent-encoded characters. Flush the current\n        # pct_sequence.\n        string += pct_sequence.decode(encoding, errors) + rest\n        pct_sequence = b''\n    if pct_sequence:\n        # Flush the final pct_sequence\n        string += pct_sequence.decode(encoding, errors)\n    return string",
                        "signature": "_unquote(string, encoding='utf-8', errors='replace')"
                    },
                    {
                        "code": "def _parse_qsl(qs, keep_blank_values=False, strict_parsing=False,\n            encoding='utf-8', errors='replace'):\n    qs, _coerce_result = qs, unicode\n    pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]\n    r = []\n    for name_value in pairs:\n        if not name_value and not strict_parsing:\n            continue\n        nv = name_value.split('=', 1)\n        if len(nv) != 2:\n            if strict_parsing:\n                raise ValueError(\"bad query field: %r\" % (name_value,))\n            # Handle case of a control-name with no equal sign\n            if keep_blank_values:\n                nv.append('')\n            else:\n                continue\n        if len(nv[1]) or keep_blank_values:\n            name = nv[0].replace('+', ' ')\n            name = _unquote(name, encoding=encoding, errors=errors)\n            name = _coerce_result(name)\n            value = nv[1].replace('+', ' ')\n            value = _unquote(value, encoding=encoding, errors=errors)\n            value = _coerce_result(value)\n            r.append((name, value))\n    return r",
                        "signature": "_parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')"
                    },
                    {
                        "code": "def compat_parse_qs(qs, keep_blank_values=False, strict_parsing=False,\n            encoding='utf-8', errors='replace'):\n    parsed_result = {}\n    pairs = _parse_qsl(qs, keep_blank_values, strict_parsing,\n                    encoding=encoding, errors=errors)\n    for name, value in pairs:\n        if name in parsed_result:\n            parsed_result[name].append(value)\n        else:\n            parsed_result[name] = [value]\n    return parsed_result",
                        "signature": "compat_parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class BaseHTMLParser:",
                        "functions": [
                            {
                                "code": "def __init(self):\n    compat_html_parser.HTMLParser.__init__(self)\n    self.html = None",
                                "signature": "__init(self)"
                            },
                            {
                                "code": "def loads(self, html):\n    self.html = html\n    self.feed(html)\n    self.close()",
                                "signature": "loads(self, html)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class AttrParser:",
                        "functions": [
                            {
                                "code": "def __init__(self, attribute, value):\n    self.attribute = attribute\n    self.value = value\n    self.result = None\n    self.started = False\n    self.depth = {}\n    self.watch_startpos = False\n    self.error_count = 0\n    BaseHTMLParser.__init__(self)",
                                "signature": "__init__(self, attribute, value)"
                            },
                            {
                                "code": "def error(self, message):\n    if self.error_count > 10 or self.started:\n        raise compat_html_parser.HTMLParseError(message, self.getpos())\n    self.rawdata = '\\n'.join(self.html.split('\\n')[self.getpos()[0]:]) # skip one line\n    self.error_count += 1\n    self.goahead(1)",
                                "signature": "error(self, message)"
                            },
                            {
                                "code": "def handle_starttag(self, tag, attrs):\n    attrs = dict(attrs)\n    if self.started:\n        self.find_startpos(None)\n    if self.attribute in attrs and attrs[self.attribute] == self.value:\n        self.result = [tag]\n        self.started = True\n        self.watch_startpos = True\n    if self.started:\n        if not tag in self.depth: self.depth[tag] = 0\n        self.depth[tag] += 1",
                                "signature": "handle_starttag(self, tag, attrs)"
                            },
                            {
                                "code": "def handle_endtag(self, tag):\n    if self.started:\n        if tag in self.depth: self.depth[tag] -= 1\n        if self.depth[self.result[0]] == 0:\n            self.started = False\n            self.result.append(self.getpos())",
                                "signature": "handle_endtag(self, tag)"
                            },
                            {
                                "code": "def find_startpos(self, x):\n    \"\"\"Needed to put the start position of the result (self.result[1])\n    after the opening tag with the requested id\"\"\"\n    if self.watch_startpos:\n        self.watch_startpos = False\n        self.result.append(self.getpos())",
                                "signature": "find_startpos(self, x)"
                            },
                            {
                                "code": "def get_result(self):\n    if self.result is None:\n        return None\n    if len(self.result) != 3:\n        return None\n    lines = self.html.split('\\n')\n    lines = lines[self.result[1][0]-1:self.result[2][0]]\n    lines[0] = lines[0][self.result[1][1]:]\n    if len(lines) == 1:\n        lines[-1] = lines[-1][:self.result[2][1]-self.result[1][1]]\n    lines[-1] = lines[-1][:self.result[2][1]]\n    return '\\n'.join(lines).strip()",
                                "signature": "get_result(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class MetaParser:",
                        "functions": [
                            {
                                "code": "def __init__(self, name):\n    BaseHTMLParser.__init__(self)\n    self.name = name\n    self.content = None\n    self.result = None",
                                "signature": "__init__(self, name)"
                            },
                            {
                                "code": "def handle_starttag(self, tag, attrs):\n    if tag != 'meta':\n        return\n    attrs = dict(attrs)\n    if attrs.get('name') == self.name:\n        self.result = attrs.get('content')",
                                "signature": "handle_starttag(self, tag, attrs)"
                            },
                            {
                                "code": "def get_result(self):\n    return self.result",
                                "signature": "get_result(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class ExtractorError:",
                        "functions": [
                            {
                                "code": "def __init__(self, msg, tb=None, expected=False, cause=None):\n    \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n    If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n    \"\"\"\n\n    if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n        expected = True\n    if not expected:\n        msg = msg + u'; please report this issue on https://yt-dl.org/bug . Be sure to call youtube-dl with the --verbose flag and include its complete output. Make sure you are using the latest version; type  youtube-dl -U  to update.'\n    super(ExtractorError, self).__init__(msg)\n\n    self.traceback = tb\n    self.exc_info = sys.exc_info()  # preserve original exception\n    self.cause = cause",
                                "signature": "__init__(self, msg, tb=None, expected=False, cause=None)"
                            },
                            {
                                "code": "def format_traceback(self):\n    if self.traceback is None:\n        return None\n    return u''.join(traceback.format_tb(self.traceback))",
                                "signature": "format_traceback(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class RegexNotFoundError:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class DownloadError:",
                        "functions": [
                            {
                                "code": "def __init__(self, msg, exc_info=None):\n    \"\"\" exc_info, if given, is the original exception that caused the trouble (as returned by sys.exc_info()). \"\"\"\n    super(DownloadError, self).__init__(msg)\n    self.exc_info = exc_info",
                                "signature": "__init__(self, msg, exc_info=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class SameFileError:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class PostProcessingError:",
                        "functions": [
                            {
                                "code": "def __init__(self, msg):\n    self.msg = msg",
                                "signature": "__init__(self, msg)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class MaxDownloadsReached:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class UnavailableVideoError:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class ContentTooShortError:",
                        "functions": [
                            {
                                "code": "def __init__(self, downloaded, expected):\n    self.downloaded = downloaded\n    self.expected = expected",
                                "signature": "__init__(self, downloaded, expected)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class YoutubeDLHandler:",
                        "functions": [
                            {
                                "code": "@staticmethod\ndef deflate(data):\n    try:\n        return zlib.decompress(data, -zlib.MAX_WBITS)\n    except zlib.error:\n        return zlib.decompress(data)",
                                "signature": "deflate(data)"
                            },
                            {
                                "code": "@staticmethod\ndef addinfourl_wrapper(stream, headers, url, code):\n    if hasattr(compat_urllib_request.addinfourl, 'getcode'):\n        return compat_urllib_request.addinfourl(stream, headers, url, code)\n    ret = compat_urllib_request.addinfourl(stream, headers, url)\n    ret.code = code\n    return ret",
                                "signature": "addinfourl_wrapper(stream, headers, url, code)"
                            },
                            {
                                "code": "def http_request(self, req):\n    for h,v in std_headers.items():\n        if h in req.headers:\n            del req.headers[h]\n        req.add_header(h, v)\n    if 'Youtubedl-no-compression' in req.headers:\n        if 'Accept-encoding' in req.headers:\n            del req.headers['Accept-encoding']\n        del req.headers['Youtubedl-no-compression']\n    if 'Youtubedl-user-agent' in req.headers:\n        if 'User-agent' in req.headers:\n            del req.headers['User-agent']\n        req.headers['User-agent'] = req.headers['Youtubedl-user-agent']\n        del req.headers['Youtubedl-user-agent']\n    return req",
                                "signature": "http_request(self, req)"
                            },
                            {
                                "code": "def http_response(self, req, resp):\n    old_resp = resp\n    # gzip\n    if resp.headers.get('Content-encoding', '') == 'gzip':\n        content = resp.read()\n        gz = gzip.GzipFile(fileobj=io.BytesIO(content), mode='rb')\n        try:\n            uncompressed = io.BytesIO(gz.read())\n        except IOError as original_ioerror:\n            # There may be junk add the end of the file\n            # See http://stackoverflow.com/q/4928560/35070 for details\n            for i in range(1, 1024):\n                try:\n                    gz = gzip.GzipFile(fileobj=io.BytesIO(content[:-i]), mode='rb')\n                    uncompressed = io.BytesIO(gz.read())\n                except IOError:\n                    continue\n                break\n            else:\n                raise original_ioerror\n        resp = self.addinfourl_wrapper(uncompressed, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    # deflate\n    if resp.headers.get('Content-encoding', '') == 'deflate':\n        gz = io.BytesIO(self.deflate(resp.read()))\n        resp = self.addinfourl_wrapper(gz, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    return resp",
                                "signature": "http_response(self, req, resp)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class DateRange:",
                        "functions": [
                            {
                                "code": "def __init__(self, start=None, end=None):\n    \"\"\"start and end must be strings in the format accepted by date\"\"\"\n    if start is not None:\n        self.start = date_from_str(start)\n    else:\n        self.start = datetime.datetime.min.date()\n    if end is not None:\n        self.end = date_from_str(end)\n    else:\n        self.end = datetime.datetime.max.date()\n    if self.start > self.end:\n        raise ValueError('Date range: \"%s\" , the start date must be before the end date' % self)",
                                "signature": "__init__(self, start=None, end=None)"
                            },
                            {
                                "code": "@classmethod\ndef day(cls, day):\n    \"\"\"Returns a range that only contains the given day\"\"\"\n    return cls(day,day)",
                                "signature": "day(cls, day)"
                            },
                            {
                                "code": "def __contains__(self, date):\n    \"\"\"Check if the date is in the range\"\"\"\n    if not isinstance(date, datetime.date):\n        date = date_from_str(date)\n    return self.start <= date <= self.end",
                                "signature": "__contains__(self, date)"
                            },
                            {
                                "code": "def __str__(self):\n    return '%s - %s' % ( self.start.isoformat(), self.end.isoformat())",
                                "signature": "__str__(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class locked_file:",
                        "functions": [
                            {
                                "code": "def __init__(self, filename, mode, encoding=None):\n    assert mode in ['r', 'a', 'w']\n    self.f = io.open(filename, mode, encoding=encoding)\n    self.mode = mode",
                                "signature": "__init__(self, filename, mode, encoding=None)"
                            },
                            {
                                "code": "def __enter__(self):\n    exclusive = self.mode != 'r'\n    try:\n        _lock_file(self.f, exclusive)\n    except IOError:\n        self.f.close()\n        raise\n    return self",
                                "signature": "__enter__(self)"
                            },
                            {
                                "code": "def __exit__(self, etype, value, traceback):\n    try:\n        _unlock_file(self.f)\n    finally:\n        self.f.close()",
                                "signature": "__exit__(self, etype, value, traceback)"
                            },
                            {
                                "code": "def __iter__(self):\n    return iter(self.f)",
                                "signature": "__iter__(self)"
                            },
                            {
                                "code": "def write(self, *args):\n    return self.f.write(*args)",
                                "signature": "write(self, *args)"
                            },
                            {
                                "code": "def read(self, *args):\n    return self.f.read(*args)",
                                "signature": "read(self, *args)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class OVERLAPPED:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class HTTPSConnectionV3:",
                        "functions": [
                            {
                                "code": "def __init__(self, *args, **kwargs):\n    httplib.HTTPSConnection.__init__(self, *args, **kwargs)",
                                "signature": "__init__(self, *args, **kwargs)"
                            },
                            {
                                "code": "def connect(self):\n    sock = socket.create_connection((self.host, self.port), self.timeout)\n    if getattr(self, '_tunnel_host', False):\n        self.sock = sock\n        self._tunnel()\n    try:\n        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv3)\n    except ssl.SSLError:\n        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv23)",
                                "signature": "connect(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class HTTPSHandlerV3:",
                        "functions": [
                            {
                                "code": "def https_open(self, req):\n    return self.do_open(HTTPSConnectionV3, req)",
                                "signature": "https_open(self, req)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "ImportError": [
                    66,
                    36,
                    71,
                    41,
                    76,
                    46,
                    51,
                    83,
                    56,
                    26,
                    88,
                    61,
                    31
                ],
                "compat_subprocess_get_DEVNULL": [
                    82,
                    84
                ],
                "DEVNULL": [
                    82
                ],
                "open": [
                    427,
                    84,
                    216,
                    442,
                    220
                ],
                "os.path.devnull": [
                    84
                ],
                "os.path": [
                    877,
                    878,
                    434,
                    436,
                    84
                ],
                "os": [
                    425,
                    876,
                    877,
                    878,
                    1036,
                    434,
                    436,
                    84
                ],
                "string": [
                    96,
                    103,
                    124,
                    119,
                    123,
                    92,
                    93,
                    94
                ],
                "res": [
                    837,
                    838,
                    103,
                    104,
                    488,
                    490,
                    491,
                    492,
                    839,
                    841,
                    842,
                    94,
                    95
                ],
                "string.split": [
                    94
                ],
                "len": [
                    135,
                    143,
                    336,
                    243,
                    1075,
                    341,
                    348,
                    1085,
                    95
                ],
                "encoding": [
                    97,
                    98,
                    520,
                    521,
                    522,
                    523,
                    145,
                    979,
                    148,
                    949,
                    980,
                    119,
                    981,
                    985,
                    123,
                    157
                ],
                "errors": [
                    99,
                    100,
                    145,
                    148,
                    119,
                    123,
                    157
                ],
                "pct_sequence": [
                    102,
                    108,
                    119,
                    120,
                    121,
                    123
                ],
                "item": [
                    104,
                    106,
                    108,
                    109,
                    116
                ],
                "ValueError": [
                    1059,
                    137,
                    107,
                    115,
                    821
                ],
                "decode": [
                    108
                ],
                "rest": [
                    116,
                    109,
                    110,
                    119
                ],
                "pct_sequence.decode": [
                    123,
                    119
                ],
                "qs": [
                    128,
                    129,
                    156
                ],
                "_coerce_result": [
                    128,
                    146,
                    149
                ],
                "unicode": [
                    128,
                    166
                ],
                "pairs": [
                    129,
                    131,
                    156,
                    158
                ],
                "s2": [
                    129
                ],
                "s1": [
                    129
                ],
                "qs.split": [
                    129
                ],
                "s1.split": [
                    129
                ],
                "r": [
                    130,
                    150,
                    151
                ],
                "name_value": [
                    137,
                    131,
                    132,
                    134
                ],
                "strict_parsing": [
                    136,
                    156,
                    132
                ],
                "nv": [
                    134,
                    135,
                    140,
                    143,
                    144,
                    147
                ],
                "name_value.split": [
                    134
                ],
                "keep_blank_values": [
                    139,
                    156,
                    143
                ],
                "nv.append": [
                    140
                ],
                "name": [
                    160,
                    162,
                    1058,
                    390,
                    144,
                    145,
                    146,
                    372,
                    150,
                    158,
                    159
                ],
                "replace": [
                    144,
                    147
                ],
                "_unquote": [
                    145,
                    148
                ],
                "value": [
                    160,
                    162,
                    290,
                    358,
                    147,
                    148,
                    149,
                    150,
                    158
                ],
                "r.append": [
                    150
                ],
                "parsed_result": [
                    160,
                    162,
                    163,
                    155,
                    159
                ],
                "_parse_qsl": [
                    156
                ],
                "append": [
                    160
                ],
                "compat_str": [
                    168,
                    841,
                    531,
                    166
                ],
                "NameError": [
                    172,
                    167
                ],
                "str": [
                    168,
                    1019
                ],
                "compat_chr": [
                    171,
                    260,
                    173,
                    270
                ],
                "unichr": [
                    171
                ],
                "chr": [
                    869,
                    173,
                    870
                ],
                "type": [
                    1069,
                    176,
                    209,
                    498,
                    848,
                    180,
                    1019,
                    508
                ],
                "c": [
                    176,
                    177,
                    242,
                    243,
                    240,
                    244,
                    246,
                    863
                ],
                "int": [
                    1024,
                    1032,
                    270,
                    1038,
                    176,
                    1045,
                    792,
                    860
                ],
                "ord": [
                    177,
                    460,
                    470,
                    863
                ],
                "compiled_regex_type": [
                    180
                ],
                "re.compile": [
                    275,
                    180
                ],
                "re": [
                    226,
                    227,
                    1090,
                    262,
                    774,
                    1031,
                    751,
                    402,
                    275,
                    180,
                    403,
                    405,
                    435,
                    500,
                    789
                ],
                "std_headers": [
                    698,
                    182
                ],
                "pref": [
                    200,
                    202,
                    197,
                    198
                ],
                "locale.getpreferredencoding": [
                    197
                ],
                "locale": [
                    197
                ],
                "encode": [
                    198
                ],
                "sys.version_info": [
                    223,
                    204,
                    543,
                    851,
                    214,
                    346,
                    511
                ],
                "sys": [
                    514,
                    423,
                    520,
                    425,
                    426,
                    511,
                    204,
                    543,
                    583,
                    590,
                    847,
                    882,
                    851,
                    979,
                    214,
                    346,
                    223
                ],
                "print": [
                    210,
                    206
                ],
                "s.encode": [
                    523,
                    852,
                    206
                ],
                "s": [
                    512,
                    518,
                    523,
                    206,
                    1084,
                    848,
                    209,
                    210,
                    498,
                    500,
                    852,
                    853,
                    474,
                    508,
                    1085,
                    1086
                ],
                "preferredencoding": [
                    529,
                    852,
                    206,
                    839
                ],
                "fn": [
                    216,
                    220
                ],
                "f": [
                    930,
                    931,
                    933,
                    232,
                    233,
                    234,
                    924,
                    940,
                    943,
                    216,
                    217,
                    923,
                    220,
                    221,
                    926
                ],
                "json.dump": [
                    217,
                    221
                ],
                "json": [
                    217,
                    1003,
                    1012,
                    221
                ],
                "obj": [
                    217,
                    221
                ],
                "re.match": [
                    226,
                    227,
                    1090,
                    262,
                    774,
                    789
                ],
                "key": [
                    233,
                    226,
                    228
                ],
                "val": [
                    233,
                    227,
                    228
                ],
                "expr": [
                    228,
                    229
                ],
                "xpath": [
                    232,
                    228
                ],
                "node.find": [
                    229
                ],
                "node": [
                    232,
                    229
                ],
                "node.findall": [
                    232
                ],
                "f.attrib.get": [
                    233
                ],
                "f.attrib": [
                    233
                ],
                "components": [
                    240,
                    242
                ],
                "c.split": [
                    240
                ],
                "path.split": [
                    240
                ],
                "path": [
                    240
                ],
                "replaced": [
                    248,
                    241,
                    244,
                    247
                ],
                "replaced.append": [
                    244,
                    247
                ],
                "ns": [
                    246,
                    247
                ],
                "tag": [
                    247,
                    310,
                    246,
                    377,
                    314,
                    315,
                    319
                ],
                "ns_map": [
                    247
                ],
                "join": [
                    344,
                    870,
                    301,
                    596,
                    248,
                    474,
                    987
                ],
                "entity": [
                    256,
                    259,
                    260,
                    262,
                    273
                ],
                "matchobj.group": [
                    256
                ],
                "matchobj": [
                    256
                ],
                "compat_html_entities.name2codepoint": [
                    259,
                    260
                ],
                "compat_html_entities": [
                    259,
                    260
                ],
                "mobj": [
                    264,
                    262,
                    263
                ],
                "numstr": [
                    264,
                    265,
                    267,
                    270
                ],
                "mobj.group": [
                    264
                ],
                "numstr.startswith": [
                    265
                ],
                "base": [
                    266,
                    269,
                    270
                ],
                "compat_html_parser.locatestarttagend": [
                    275
                ],
                "compat_html_parser": [
                    361,
                    393,
                    300,
                    275,
                    276,
                    278,
                    350
                ],
                "re.VERBOSE": [
                    275
                ],
                "compat_html_parser.HTMLParser": [
                    350,
                    276,
                    278
                ],
                "compat_html_parser.HTMLParser.__init__": [
                    278
                ],
                "self": [
                    821,
                    548,
                    551,
                    552,
                    553,
                    554,
                    556,
                    558,
                    562,
                    587,
                    589,
                    590,
                    591,
                    594,
                    596,
                    613,
                    614,
                    633,
                    661,
                    662,
                    733,
                    737,
                    738,
                    278,
                    279,
                    282,
                    283,
                    284,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    299,
                    300,
                    301,
                    302,
                    815,
                    303,
                    817,
                    813,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    819,
                    820,
                    318,
                    319,
                    320,
                    321,
                    322,
                    830,
                    832,
                    327,
                    328,
                    329,
                    334,
                    336,
                    338,
                    339,
                    340,
                    342,
                    343,
                    349,
                    350,
                    371,
                    372,
                    373,
                    374,
                    380,
                    381,
                    384,
                    949,
                    950,
                    953,
                    955,
                    957,
                    959,
                    963,
                    965,
                    968,
                    971,
                    974
                ],
                "self.html": [
                    282,
                    338,
                    301,
                    279
                ],
                "html": [
                    354,
                    360,
                    392,
                    401,
                    402,
                    403,
                    405,
                    407,
                    408,
                    282,
                    283
                ],
                "self.feed": [
                    283
                ],
                "self.close": [
                    284
                ],
                "BaseHTMLParser": [
                    296,
                    371,
                    365,
                    286
                ],
                "self.attribute": [
                    289,
                    309
                ],
                "attribute": [
                    289,
                    358
                ],
                "self.value": [
                    290,
                    309
                ],
                "self.result": [
                    320,
                    384,
                    322,
                    291,
                    329,
                    334,
                    336,
                    339,
                    340,
                    310,
                    342,
                    374,
                    381,
                    343
                ],
                "self.started": [
                    321,
                    292,
                    299,
                    307,
                    311,
                    313,
                    318
                ],
                "self.depth": [
                    320,
                    293,
                    314,
                    315,
                    319
                ],
                "self.watch_startpos": [
                    312,
                    328,
                    294,
                    327
                ],
                "self.error_count": [
                    299,
                    302,
                    295
                ],
                "BaseHTMLParser.__init__": [
                    296,
                    371
                ],
                "compat_html_parser.HTMLParseError": [
                    361,
                    393,
                    300
                ],
                "message": [
                    300
                ],
                "self.getpos": [
                    329,
                    322,
                    300,
                    301
                ],
                "self.rawdata": [
                    349,
                    301
                ],
                "self.html.split": [
                    338,
                    301
                ],
                "self.goahead": [
                    303
                ],
                "attrs": [
                    306,
                    309,
                    379,
                    380,
                    381
                ],
                "dict": [
                    306,
                    379
                ],
                "self.find_startpos": [
                    308
                ],
                "self.result.append": [
                    329,
                    322
                ],
                "handle_entityref": [
                    330
                ],
                "handle_charref": [
                    330
                ],
                "handle_data": [
                    330
                ],
                "handle_comment": [
                    330
                ],
                "handle_decl": [
                    331
                ],
                "handle_pi": [
                    331
                ],
                "unknown_decl": [
                    331
                ],
                "find_startpos": [
                    331
                ],
                "lines": [
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344
                ],
                "strip": [
                    344
                ],
                "AttrParser.parse_endtag": [
                    347
                ],
                "AttrParser": [
                    347,
                    358
                ],
                "startswith": [
                    349
                ],
                "i": [
                    724,
                    726,
                    348,
                    349,
                    350
                ],
                "compat_html_parser.HTMLParser.parse_endtag": [
                    350
                ],
                "get_element_by_attribute": [
                    354
                ],
                "id": [
                    354
                ],
                "parser": [
                    390,
                    358,
                    360,
                    392,
                    363,
                    395
                ],
                "parser.loads": [
                    360,
                    392
                ],
                "parser.get_result": [
                    363,
                    395
                ],
                "self.name": [
                    380,
                    372
                ],
                "self.content": [
                    373
                ],
                "attrs.get": [
                    380,
                    381
                ],
                "MetaParser": [
                    390
                ],
                "html.replace": [
                    401
                ],
                "re.sub": [
                    1031,
                    751,
                    402,
                    435,
                    403,
                    500,
                    405
                ],
                "unescapeHTML": [
                    407
                ],
                "html.strip": [
                    408
                ],
                "filename": [
                    422,
                    426,
                    427,
                    428,
                    780,
                    436,
                    949,
                    438,
                    442
                ],
                "sys.platform": [
                    514,
                    882,
                    423
                ],
                "msvcrt.setmode": [
                    425
                ],
                "msvcrt": [
                    425,
                    931,
                    924
                ],
                "sys.stdout.fileno": [
                    425
                ],
                "sys.stdout": [
                    425,
                    426
                ],
                "os.O_BINARY": [
                    425
                ],
                "hasattr": [
                    426,
                    691
                ],
                "sys.stdout.buffer": [
                    426
                ],
                "stream": [
                    427,
                    428,
                    692,
                    693,
                    442,
                    443
                ],
                "encodeFilename": [
                    442,
                    427
                ],
                "open_mode": [
                    442,
                    427
                ],
                "IOError": [
                    728,
                    721,
                    956,
                    429
                ],
                "OSError": [
                    1072,
                    429,
                    934,
                    927
                ],
                "err.errno": [
                    430
                ],
                "err": [
                    1044,
                    430
                ],
                "errno.EACCES": [
                    430
                ],
                "errno": [
                    430
                ],
                "alt_filename": [
                    434,
                    443,
                    438
                ],
                "os.path.join": [
                    434,
                    878
                ],
                "path_part": [
                    435,
                    436
                ],
                "os.path.split": [
                    436
                ],
                "timestamp": [
                    448,
                    451,
                    452
                ],
                "timetuple": [
                    449,
                    450,
                    451
                ],
                "email.utils.parsedate_tz": [
                    449
                ],
                "email.utils": [
                    449,
                    451
                ],
                "email": [
                    449,
                    451
                ],
                "timestr": [
                    449
                ],
                "email.utils.mktime_tz": [
                    451
                ],
                "char": [
                    460,
                    462,
                    464,
                    466,
                    468,
                    470,
                    472
                ],
                "restricted": [
                    480,
                    463,
                    465,
                    468,
                    470
                ],
                "char.isspace": [
                    468
                ],
                "result": [
                    480,
                    481,
                    482,
                    483,
                    484,
                    500,
                    501,
                    474,
                    476,
                    477,
                    478
                ],
                "map": [
                    474
                ],
                "replace_insane": [
                    474
                ],
                "is_id": [
                    475
                ],
                "result.replace": [
                    477
                ],
                "result.strip": [
                    478
                ],
                "result.startswith": [
                    480
                ],
                "el": [
                    489,
                    490,
                    491
                ],
                "iterable": [
                    489
                ],
                "res.append": [
                    491
                ],
                "htmlentity_transform": [
                    500
                ],
                "sys.getwindowsversion": [
                    514
                ],
                "sys.getfilesystemencoding": [
                    520,
                    979
                ],
                "optval": [
                    526,
                    527,
                    528,
                    529,
                    531,
                    532
                ],
                "isinstance": [
                    869,
                    838,
                    860,
                    841,
                    1069,
                    528,
                    531,
                    983,
                    828
                ],
                "bytes": [
                    1024,
                    1026,
                    869,
                    838,
                    872,
                    528,
                    983,
                    1017,
                    1019,
                    1020,
                    1021
                ],
                "optval.decode": [
                    529
                ],
                "secs": [
                    535,
                    536,
                    537,
                    538,
                    540
                ],
                "httplib.HTTPSConnection": [
                    546,
                    548
                ],
                "httplib": [
                    546,
                    548
                ],
                "httplib.HTTPSConnection.__init__": [
                    548
                ],
                "args": [
                    971,
                    548,
                    982,
                    974
                ],
                "kwargs": [
                    548
                ],
                "sock": [
                    553,
                    556,
                    558,
                    551
                ],
                "socket.create_connection": [
                    551
                ],
                "socket": [
                    583,
                    551
                ],
                "self.host": [
                    551
                ],
                "self.port": [
                    551
                ],
                "self.timeout": [
                    551
                ],
                "getattr": [
                    552,
                    850
                ],
                "self.sock": [
                    553,
                    556,
                    558
                ],
                "self._tunnel": [
                    554
                ],
                "ssl.wrap_socket": [
                    556,
                    558
                ],
                "ssl": [
                    556,
                    557,
                    558,
                    565,
                    566,
                    568
                ],
                "self.key_file": [
                    556,
                    558
                ],
                "self.cert_file": [
                    556,
                    558
                ],
                "ssl.PROTOCOL_SSLv3": [
                    556,
                    565
                ],
                "ssl.SSLError": [
                    557
                ],
                "ssl.PROTOCOL_SSLv23": [
                    558
                ],
                "compat_urllib_request.HTTPSHandler": [
                    560,
                    574
                ],
                "compat_urllib_request": [
                    560,
                    691,
                    692,
                    693,
                    664,
                    574
                ],
                "self.do_open": [
                    562
                ],
                "HTTPSConnectionV3": [
                    562
                ],
                "req": [
                    704,
                    705,
                    706,
                    707,
                    708,
                    709,
                    710,
                    711,
                    562,
                    699,
                    700,
                    701,
                    702,
                    703
                ],
                "HTTPSHandlerV3": [
                    563
                ],
                "context": [
                    565,
                    566,
                    569,
                    571,
                    574
                ],
                "ssl.SSLContext": [
                    565
                ],
                "context.verify_mode": [
                    566
                ],
                "opts_no_check_certificate": [
                    567
                ],
                "ssl.CERT_NONE": [
                    566
                ],
                "ssl.CERT_REQUIRED": [
                    568
                ],
                "context.set_default_verify_paths": [
                    569
                ],
                "context.load_default_certs": [
                    571
                ],
                "AttributeError": [
                    572,
                    1079
                ],
                "Exception": [
                    576,
                    640,
                    617,
                    649,
                    626,
                    635,
                    604
                ],
                "sys.exc_info": [
                    590,
                    583
                ],
                "compat_urllib_error.URLError": [
                    583
                ],
                "compat_urllib_error": [
                    583
                ],
                "socket.timeout": [
                    583
                ],
                "UnavailableVideoError": [
                    583
                ],
                "expected": [
                    584,
                    585,
                    658,
                    662
                ],
                "msg": [
                    633,
                    586,
                    587,
                    613
                ],
                "__init__": [
                    587,
                    613
                ],
                "super": [
                    587,
                    613
                ],
                "ExtractorError": [
                    587,
                    599
                ],
                "self.traceback": [
                    594,
                    596,
                    589
                ],
                "tb": [
                    589
                ],
                "self.exc_info": [
                    614,
                    590
                ],
                "self.cause": [
                    591
                ],
                "cause": [
                    591
                ],
                "traceback.format_tb": [
                    596
                ],
                "traceback": [
                    596
                ],
                "DownloadError": [
                    613
                ],
                "exc_info": [
                    614
                ],
                "self.msg": [
                    633
                ],
                "downloaded": [
                    657,
                    661
                ],
                "self.downloaded": [
                    661
                ],
                "self.expected": [
                    662
                ],
                "compat_urllib_request.HTTPHandler": [
                    664
                ],
                "zlib.decompress": [
                    685,
                    687
                ],
                "zlib": [
                    685,
                    686,
                    687
                ],
                "data": [
                    1003,
                    685,
                    687,
                    1012,
                    1013
                ],
                "zlib.MAX_WBITS": [
                    685
                ],
                "zlib.error": [
                    686
                ],
                "staticmethod": [
                    689,
                    682
                ],
                "compat_urllib_request.addinfourl": [
                    691,
                    692,
                    693
                ],
                "headers": [
                    692,
                    693
                ],
                "url": [
                    1090,
                    773,
                    1004,
                    1010,
                    692,
                    693,
                    1013
                ],
                "code": [
                    692,
                    694
                ],
                "ret": [
                    693,
                    694,
                    695
                ],
                "ret.code": [
                    694
                ],
                "h": [
                    698,
                    699,
                    700,
                    701
                ],
                "v": [
                    698,
                    701
                ],
                "std_headers.items": [
                    698
                ],
                "req.headers": [
                    704,
                    705,
                    706,
                    707,
                    708,
                    709,
                    710,
                    699,
                    700,
                    702,
                    703
                ],
                "req.add_header": [
                    701
                ],
                "old_resp": [
                    738,
                    739,
                    714,
                    733,
                    734
                ],
                "resp": [
                    736,
                    737,
                    738,
                    739,
                    740,
                    714,
                    716,
                    717,
                    733,
                    734
                ],
                "resp.headers.get": [
                    736,
                    716
                ],
                "resp.headers": [
                    736,
                    716
                ],
                "content": [
                    726,
                    717,
                    718
                ],
                "resp.read": [
                    737,
                    717
                ],
                "gz": [
                    737,
                    738,
                    718,
                    720,
                    726,
                    727
                ],
                "gzip.GzipFile": [
                    726,
                    718
                ],
                "gzip": [
                    726,
                    718
                ],
                "io.BytesIO": [
                    737,
                    718,
                    720,
                    726,
                    727
                ],
                "io": [
                    737,
                    718,
                    720,
                    949,
                    726,
                    727
                ],
                "uncompressed": [
                    720,
                    733,
                    727
                ],
                "gz.read": [
                    720,
                    727
                ],
                "range": [
                    724
                ],
                "original_ioerror": [
                    732
                ],
                "self.addinfourl_wrapper": [
                    738,
                    733
                ],
                "old_resp.headers": [
                    738,
                    733
                ],
                "old_resp.url": [
                    738,
                    733
                ],
                "old_resp.code": [
                    738,
                    733
                ],
                "resp.msg": [
                    739,
                    734
                ],
                "old_resp.msg": [
                    739,
                    734
                ],
                "self.deflate": [
                    737
                ],
                "https_request": [
                    742
                ],
                "http_request": [
                    742
                ],
                "https_response": [
                    743
                ],
                "http_response": [
                    743
                ],
                "upload_date": [
                    770,
                    747,
                    767
                ],
                "date_str": [
                    806,
                    749,
                    751,
                    787,
                    789,
                    767
                ],
                "date_str.replace": [
                    749
                ],
                "format_expressions": [
                    752,
                    765
                ],
                "expression": [
                    765,
                    767
                ],
                "strftime": [
                    767
                ],
                "datetime.datetime.strptime": [
                    806,
                    767
                ],
                "datetime.datetime": [
                    819,
                    815,
                    806,
                    767
                ],
                "datetime": [
                    804,
                    806,
                    815,
                    786,
                    819,
                    828,
                    767
                ],
                "guess": [
                    773,
                    774,
                    775
                ],
                "rpartition": [
                    773
                ],
                "url.partition": [
                    773
                ],
                "default_ext": [
                    777
                ],
                "filename.rsplit": [
                    780
                ],
                "sub_lang": [
                    780
                ],
                "sub_format": [
                    780
                ],
                "today": [
                    786,
                    788,
                    805
                ],
                "datetime.date.today": [
                    786
                ],
                "datetime.date": [
                    786,
                    828
                ],
                "match": [
                    789,
                    790,
                    791,
                    792,
                    795
                ],
                "sign": [
                    793,
                    791
                ],
                "match.group": [
                    792,
                    795,
                    791
                ],
                "time": [
                    802,
                    804,
                    792,
                    794,
                    799
                ],
                "unit": [
                    800,
                    801,
                    803,
                    804,
                    795,
                    797,
                    798
                ],
                "delta": [
                    804,
                    805
                ],
                "datetime.timedelta": [
                    804
                ],
                "date": [
                    830,
                    828,
                    829,
                    806
                ],
                "object": [
                    808,
                    946
                ],
                "start": [
                    1085,
                    812,
                    813,
                    1084
                ],
                "self.start": [
                    832,
                    813,
                    815,
                    820,
                    830
                ],
                "date_from_str": [
                    817,
                    829,
                    813
                ],
                "datetime.datetime.min.date": [
                    815
                ],
                "datetime.datetime.min": [
                    815
                ],
                "end": [
                    816,
                    817
                ],
                "self.end": [
                    832,
                    817,
                    819,
                    820,
                    830
                ],
                "datetime.datetime.max.date": [
                    819
                ],
                "datetime.datetime.max": [
                    819
                ],
                "cls": [
                    825
                ],
                "day": [
                    825
                ],
                "classmethod": [
                    822
                ],
                "self.start.isoformat": [
                    832
                ],
                "self.end.isoformat": [
                    832
                ],
                "platform.platform": [
                    837
                ],
                "platform": [
                    837
                ],
                "res.decode": [
                    839
                ],
                "out": [
                    846,
                    847,
                    850,
                    1044,
                    853,
                    854,
                    1045
                ],
                "sys.stderr": [
                    847
                ],
                "out.write": [
                    853
                ],
                "out.flush": [
                    854
                ],
                "bs": [
                    858,
                    860,
                    861,
                    863
                ],
                "list": [
                    861
                ],
                "xs": [
                    872,
                    867,
                    870
                ],
                "x": [
                    870
                ],
                "cache_root": [
                    876,
                    878
                ],
                "os.environ.get": [
                    876,
                    1036
                ],
                "os.environ": [
                    876,
                    1036
                ],
                "os.path.expanduser": [
                    877
                ],
                "params.get": [
                    878
                ],
                "params": [
                    878
                ],
                "ctypes.Structure": [
                    886
                ],
                "ctypes": [
                    898,
                    899,
                    900,
                    901,
                    902,
                    903,
                    905,
                    908,
                    909,
                    910,
                    911,
                    912,
                    914,
                    923,
                    927,
                    934,
                    1071,
                    1075,
                    1078,
                    886,
                    888,
                    889,
                    890,
                    891,
                    892,
                    895
                ],
                "_fields_": [
                    887
                ],
                "ctypes.wintypes.LPVOID": [
                    888,
                    889
                ],
                "ctypes.wintypes": [
                    898,
                    899,
                    900,
                    901,
                    902,
                    905,
                    908,
                    909,
                    910,
                    911,
                    914,
                    888,
                    889,
                    890,
                    891,
                    892
                ],
                "ctypes.wintypes.DWORD": [
                    899,
                    900,
                    901,
                    902,
                    909,
                    910,
                    911,
                    890,
                    891
                ],
                "ctypes.wintypes.HANDLE": [
                    908,
                    898,
                    892
                ],
                "kernel32": [
                    896,
                    906,
                    895
                ],
                "ctypes.windll.kernel32": [
                    895
                ],
                "ctypes.windll": [
                    895
                ],
                "LockFileEx": [
                    896,
                    897,
                    905,
                    925
                ],
                "kernel32.LockFileEx": [
                    896
                ],
                "LockFileEx.argtypes": [
                    897
                ],
                "ctypes.POINTER": [
                    912,
                    903
                ],
                "OVERLAPPED": [
                    912,
                    919,
                    903
                ],
                "LockFileEx.restype": [
                    905
                ],
                "ctypes.wintypes.BOOL": [
                    905,
                    914
                ],
                "UnlockFileEx": [
                    906,
                    907,
                    932,
                    914
                ],
                "kernel32.UnlockFileEx": [
                    906
                ],
                "UnlockFileEx.argtypes": [
                    907
                ],
                "UnlockFileEx.restype": [
                    914
                ],
                "whole_low": [
                    915,
                    933,
                    926
                ],
                "whole_high": [
                    916,
                    933,
                    926
                ],
                "overlapped": [
                    919,
                    920,
                    921,
                    922,
                    923
                ],
                "overlapped.Offset": [
                    920
                ],
                "overlapped.OffsetHigh": [
                    921
                ],
                "overlapped.hEvent": [
                    922
                ],
                "f._lock_file_overlapped_p": [
                    930,
                    923,
                    933,
                    926
                ],
                "ctypes.pointer": [
                    923
                ],
                "handle": [
                    932,
                    931,
                    924,
                    925
                ],
                "msvcrt.get_osfhandle": [
                    931,
                    924
                ],
                "f.fileno": [
                    931,
                    924
                ],
                "exclusive": [
                    953,
                    955,
                    940,
                    925
                ],
                "ctypes.FormatError": [
                    934,
                    927
                ],
                "fcntl.lockf": [
                    940,
                    943
                ],
                "fcntl": [
                    940,
                    943
                ],
                "fcntl.LOCK_EX": [
                    940
                ],
                "fcntl.LOCK_SH": [
                    940
                ],
                "fcntl.LOCK_UN": [
                    943
                ],
                "mode": [
                    948,
                    949,
                    950
                ],
                "self.f": [
                    963,
                    965,
                    968,
                    971,
                    974,
                    949,
                    955,
                    957
                ],
                "io.open": [
                    949
                ],
                "self.mode": [
                    953,
                    950
                ],
                "_lock_file": [
                    955
                ],
                "self.f.close": [
                    965,
                    957
                ],
                "_unlock_file": [
                    963
                ],
                "iter": [
                    968
                ],
                "self.f.write": [
                    971
                ],
                "self.f.read": [
                    974
                ],
                "quoted_args": [
                    986,
                    978,
                    987
                ],
                "a": [
                    985,
                    986,
                    982,
                    983
                ],
                "a.decode": [
                    985
                ],
                "quoted_args.append": [
                    986
                ],
                "pipes.quote": [
                    986
                ],
                "pipes": [
                    986
                ],
                "e": [
                    993,
                    994,
                    995
                ],
                "seq": [
                    993
                ],
                "pred": [
                    995
                ],
                "sdata": [
                    1002,
                    1010,
                    1004,
                    1011
                ],
                "compat_urllib_parse.urlencode": [
                    1002
                ],
                "compat_urllib_parse": [
                    1002
                ],
                "json.dumps": [
                    1003
                ],
                "smug_url": [
                    1008,
                    1009,
                    1010
                ],
                "_": [
                    1010
                ],
                "smug_url.rpartition": [
                    1010
                ],
                "jsond": [
                    1011,
                    1012
                ],
                "compat_parse_qs": [
                    1011
                ],
                "json.loads": [
                    1012
                ],
                "float": [
                    1026,
                    1020
                ],
                "exponent": [
                    1024,
                    1025,
                    1026,
                    1022
                ],
                "math.log": [
                    1024
                ],
                "math": [
                    1024
                ],
                "suffix": [
                    1025,
                    1027
                ],
                "converted": [
                    1026,
                    1027
                ],
                "int_str": [
                    1032,
                    1031
                ],
                "columns": [
                    1036,
                    1037,
                    1038
                ],
                "sp": [
                    1041,
                    1044
                ],
                "subprocess.Popen": [
                    1041
                ],
                "subprocess": [
                    1041,
                    1043
                ],
                "subprocess.PIPE": [
                    1043
                ],
                "sp.communicate": [
                    1044
                ],
                "out.split": [
                    1045
                ],
                "ENGLISH_NAMES": [
                    1058,
                    1054
                ],
                "ENGLISH_NAMES.index": [
                    1058
                ],
                "xml_str.replace": [
                    1065
                ],
                "xml_str": [
                    1065
                ],
                "title": [
                    1074,
                    1075,
                    1076,
                    1069
                ],
                "libc": [
                    1078,
                    1071
                ],
                "ctypes.cdll.LoadLibrary": [
                    1071
                ],
                "ctypes.cdll": [
                    1071
                ],
                "buf": [
                    1075,
                    1076,
                    1078
                ],
                "ctypes.create_string_buffer": [
                    1075
                ],
                "buf.value": [
                    1076
                ],
                "title.encode": [
                    1076
                ],
                "libc.prctl": [
                    1078
                ],
                "ctypes.byref": [
                    1078
                ],
                "s.startswith": [
                    1084
                ],
                "m": [
                    1090,
                    1091,
                    1093
                ],
                "m.group": [
                    1093
                ]
            },
            "filtered_variables_in_file": {
                "compat_subprocess_get_DEVNULL": [
                    82,
                    84
                ],
                "DEVNULL": [
                    82
                ],
                "os.path.devnull": [
                    84
                ],
                "os.path": [
                    877,
                    878,
                    434,
                    436,
                    84
                ],
                "os": [
                    425,
                    876,
                    877,
                    878,
                    1036,
                    434,
                    436,
                    84
                ],
                "string": [
                    96,
                    103,
                    124,
                    119,
                    123,
                    92,
                    93,
                    94
                ],
                "res": [
                    837,
                    838,
                    103,
                    104,
                    488,
                    490,
                    491,
                    492,
                    839,
                    841,
                    842,
                    94,
                    95
                ],
                "string.split": [
                    94
                ],
                "encoding": [
                    97,
                    98,
                    520,
                    521,
                    522,
                    523,
                    145,
                    979,
                    148,
                    949,
                    980,
                    119,
                    981,
                    985,
                    123,
                    157
                ],
                "errors": [
                    99,
                    100,
                    145,
                    148,
                    119,
                    123,
                    157
                ],
                "pct_sequence": [
                    102,
                    108,
                    119,
                    120,
                    121,
                    123
                ],
                "item": [
                    104,
                    106,
                    108,
                    109,
                    116
                ],
                "decode": [
                    108
                ],
                "rest": [
                    116,
                    109,
                    110,
                    119
                ],
                "pct_sequence.decode": [
                    123,
                    119
                ],
                "qs": [
                    128,
                    129,
                    156
                ],
                "_coerce_result": [
                    128,
                    146,
                    149
                ],
                "unicode": [
                    128,
                    166
                ],
                "pairs": [
                    129,
                    131,
                    156,
                    158
                ],
                "s2": [
                    129
                ],
                "s1": [
                    129
                ],
                "qs.split": [
                    129
                ],
                "s1.split": [
                    129
                ],
                "r": [
                    130,
                    150,
                    151
                ],
                "name_value": [
                    137,
                    131,
                    132,
                    134
                ],
                "strict_parsing": [
                    136,
                    156,
                    132
                ],
                "nv": [
                    134,
                    135,
                    140,
                    143,
                    144,
                    147
                ],
                "name_value.split": [
                    134
                ],
                "keep_blank_values": [
                    139,
                    156,
                    143
                ],
                "nv.append": [
                    140
                ],
                "name": [
                    160,
                    162,
                    1058,
                    390,
                    144,
                    145,
                    146,
                    372,
                    150,
                    158,
                    159
                ],
                "replace": [
                    144,
                    147
                ],
                "_unquote": [
                    145,
                    148
                ],
                "value": [
                    160,
                    162,
                    290,
                    358,
                    147,
                    148,
                    149,
                    150,
                    158
                ],
                "r.append": [
                    150
                ],
                "parsed_result": [
                    160,
                    162,
                    163,
                    155,
                    159
                ],
                "_parse_qsl": [
                    156
                ],
                "append": [
                    160
                ],
                "compat_str": [
                    168,
                    841,
                    531,
                    166
                ],
                "compat_chr": [
                    171,
                    260,
                    173,
                    270
                ],
                "unichr": [
                    171
                ],
                "c": [
                    176,
                    177,
                    242,
                    243,
                    240,
                    244,
                    246,
                    863
                ],
                "compiled_regex_type": [
                    180
                ],
                "re.compile": [
                    275,
                    180
                ],
                "re": [
                    226,
                    227,
                    1090,
                    262,
                    774,
                    1031,
                    751,
                    402,
                    275,
                    180,
                    403,
                    405,
                    435,
                    500,
                    789
                ],
                "std_headers": [
                    698,
                    182
                ],
                "pref": [
                    200,
                    202,
                    197,
                    198
                ],
                "locale.getpreferredencoding": [
                    197
                ],
                "locale": [
                    197
                ],
                "encode": [
                    198
                ],
                "sys.version_info": [
                    223,
                    204,
                    543,
                    851,
                    214,
                    346,
                    511
                ],
                "sys": [
                    514,
                    423,
                    520,
                    425,
                    426,
                    511,
                    204,
                    543,
                    583,
                    590,
                    847,
                    882,
                    851,
                    979,
                    214,
                    346,
                    223
                ],
                "s.encode": [
                    523,
                    852,
                    206
                ],
                "s": [
                    512,
                    518,
                    523,
                    206,
                    1084,
                    848,
                    209,
                    210,
                    498,
                    500,
                    852,
                    853,
                    474,
                    508,
                    1085,
                    1086
                ],
                "preferredencoding": [
                    529,
                    852,
                    206,
                    839
                ],
                "fn": [
                    216,
                    220
                ],
                "f": [
                    930,
                    931,
                    933,
                    232,
                    233,
                    234,
                    924,
                    940,
                    943,
                    216,
                    217,
                    923,
                    220,
                    221,
                    926
                ],
                "json.dump": [
                    217,
                    221
                ],
                "json": [
                    217,
                    1003,
                    1012,
                    221
                ],
                "obj": [
                    217,
                    221
                ],
                "re.match": [
                    226,
                    227,
                    1090,
                    262,
                    774,
                    789
                ],
                "key": [
                    233,
                    226,
                    228
                ],
                "val": [
                    233,
                    227,
                    228
                ],
                "expr": [
                    228,
                    229
                ],
                "xpath": [
                    232,
                    228
                ],
                "node.find": [
                    229
                ],
                "node": [
                    232,
                    229
                ],
                "node.findall": [
                    232
                ],
                "f.attrib.get": [
                    233
                ],
                "f.attrib": [
                    233
                ],
                "components": [
                    240,
                    242
                ],
                "c.split": [
                    240
                ],
                "path.split": [
                    240
                ],
                "path": [
                    240
                ],
                "replaced": [
                    248,
                    241,
                    244,
                    247
                ],
                "replaced.append": [
                    244,
                    247
                ],
                "ns": [
                    246,
                    247
                ],
                "tag": [
                    247,
                    310,
                    246,
                    377,
                    314,
                    315,
                    319
                ],
                "ns_map": [
                    247
                ],
                "join": [
                    344,
                    870,
                    301,
                    596,
                    248,
                    474,
                    987
                ],
                "entity": [
                    256,
                    259,
                    260,
                    262,
                    273
                ],
                "matchobj.group": [
                    256
                ],
                "matchobj": [
                    256
                ],
                "compat_html_entities.name2codepoint": [
                    259,
                    260
                ],
                "compat_html_entities": [
                    259,
                    260
                ],
                "mobj": [
                    264,
                    262,
                    263
                ],
                "numstr": [
                    264,
                    265,
                    267,
                    270
                ],
                "mobj.group": [
                    264
                ],
                "numstr.startswith": [
                    265
                ],
                "base": [
                    266,
                    269,
                    270
                ],
                "compat_html_parser.locatestarttagend": [
                    275
                ],
                "compat_html_parser": [
                    361,
                    393,
                    300,
                    275,
                    276,
                    278,
                    350
                ],
                "re.VERBOSE": [
                    275
                ],
                "compat_html_parser.HTMLParser": [
                    350,
                    276,
                    278
                ],
                "compat_html_parser.HTMLParser.__init__": [
                    278
                ],
                "self": [
                    821,
                    548,
                    551,
                    552,
                    553,
                    554,
                    556,
                    558,
                    562,
                    587,
                    589,
                    590,
                    591,
                    594,
                    596,
                    613,
                    614,
                    633,
                    661,
                    662,
                    733,
                    737,
                    738,
                    278,
                    279,
                    282,
                    283,
                    284,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    299,
                    300,
                    301,
                    302,
                    815,
                    303,
                    817,
                    813,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    819,
                    820,
                    318,
                    319,
                    320,
                    321,
                    322,
                    830,
                    832,
                    327,
                    328,
                    329,
                    334,
                    336,
                    338,
                    339,
                    340,
                    342,
                    343,
                    349,
                    350,
                    371,
                    372,
                    373,
                    374,
                    380,
                    381,
                    384,
                    949,
                    950,
                    953,
                    955,
                    957,
                    959,
                    963,
                    965,
                    968,
                    971,
                    974
                ],
                "self.html": [
                    282,
                    338,
                    301,
                    279
                ],
                "html": [
                    354,
                    360,
                    392,
                    401,
                    402,
                    403,
                    405,
                    407,
                    408,
                    282,
                    283
                ],
                "self.feed": [
                    283
                ],
                "self.close": [
                    284
                ],
                "BaseHTMLParser": [
                    296,
                    371,
                    365,
                    286
                ],
                "self.attribute": [
                    289,
                    309
                ],
                "attribute": [
                    289,
                    358
                ],
                "self.value": [
                    290,
                    309
                ],
                "self.result": [
                    320,
                    384,
                    322,
                    291,
                    329,
                    334,
                    336,
                    339,
                    340,
                    310,
                    342,
                    374,
                    381,
                    343
                ],
                "self.started": [
                    321,
                    292,
                    299,
                    307,
                    311,
                    313,
                    318
                ],
                "self.depth": [
                    320,
                    293,
                    314,
                    315,
                    319
                ],
                "self.watch_startpos": [
                    312,
                    328,
                    294,
                    327
                ],
                "self.error_count": [
                    299,
                    302,
                    295
                ],
                "BaseHTMLParser.__init__": [
                    296,
                    371
                ],
                "compat_html_parser.HTMLParseError": [
                    361,
                    393,
                    300
                ],
                "message": [
                    300
                ],
                "self.getpos": [
                    329,
                    322,
                    300,
                    301
                ],
                "self.rawdata": [
                    349,
                    301
                ],
                "self.html.split": [
                    338,
                    301
                ],
                "self.goahead": [
                    303
                ],
                "attrs": [
                    306,
                    309,
                    379,
                    380,
                    381
                ],
                "self.find_startpos": [
                    308
                ],
                "self.result.append": [
                    329,
                    322
                ],
                "handle_entityref": [
                    330
                ],
                "handle_charref": [
                    330
                ],
                "handle_data": [
                    330
                ],
                "handle_comment": [
                    330
                ],
                "handle_decl": [
                    331
                ],
                "handle_pi": [
                    331
                ],
                "unknown_decl": [
                    331
                ],
                "find_startpos": [
                    331
                ],
                "lines": [
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344
                ],
                "strip": [
                    344
                ],
                "AttrParser.parse_endtag": [
                    347
                ],
                "AttrParser": [
                    347,
                    358
                ],
                "startswith": [
                    349
                ],
                "i": [
                    724,
                    726,
                    348,
                    349,
                    350
                ],
                "compat_html_parser.HTMLParser.parse_endtag": [
                    350
                ],
                "get_element_by_attribute": [
                    354
                ],
                "parser": [
                    390,
                    358,
                    360,
                    392,
                    363,
                    395
                ],
                "parser.loads": [
                    360,
                    392
                ],
                "parser.get_result": [
                    363,
                    395
                ],
                "self.name": [
                    380,
                    372
                ],
                "self.content": [
                    373
                ],
                "attrs.get": [
                    380,
                    381
                ],
                "MetaParser": [
                    390
                ],
                "html.replace": [
                    401
                ],
                "re.sub": [
                    1031,
                    751,
                    402,
                    435,
                    403,
                    500,
                    405
                ],
                "unescapeHTML": [
                    407
                ],
                "html.strip": [
                    408
                ],
                "filename": [
                    422,
                    426,
                    427,
                    428,
                    780,
                    436,
                    949,
                    438,
                    442
                ],
                "sys.platform": [
                    514,
                    882,
                    423
                ],
                "msvcrt.setmode": [
                    425
                ],
                "msvcrt": [
                    425,
                    931,
                    924
                ],
                "sys.stdout.fileno": [
                    425
                ],
                "sys.stdout": [
                    425,
                    426
                ],
                "os.O_BINARY": [
                    425
                ],
                "sys.stdout.buffer": [
                    426
                ],
                "stream": [
                    427,
                    428,
                    692,
                    693,
                    442,
                    443
                ],
                "encodeFilename": [
                    442,
                    427
                ],
                "open_mode": [
                    442,
                    427
                ],
                "err.errno": [
                    430
                ],
                "err": [
                    1044,
                    430
                ],
                "errno.EACCES": [
                    430
                ],
                "errno": [
                    430
                ],
                "alt_filename": [
                    434,
                    443,
                    438
                ],
                "os.path.join": [
                    434,
                    878
                ],
                "path_part": [
                    435,
                    436
                ],
                "os.path.split": [
                    436
                ],
                "timestamp": [
                    448,
                    451,
                    452
                ],
                "timetuple": [
                    449,
                    450,
                    451
                ],
                "email.utils.parsedate_tz": [
                    449
                ],
                "email.utils": [
                    449,
                    451
                ],
                "email": [
                    449,
                    451
                ],
                "timestr": [
                    449
                ],
                "email.utils.mktime_tz": [
                    451
                ],
                "char": [
                    460,
                    462,
                    464,
                    466,
                    468,
                    470,
                    472
                ],
                "restricted": [
                    480,
                    463,
                    465,
                    468,
                    470
                ],
                "char.isspace": [
                    468
                ],
                "result": [
                    480,
                    481,
                    482,
                    483,
                    484,
                    500,
                    501,
                    474,
                    476,
                    477,
                    478
                ],
                "replace_insane": [
                    474
                ],
                "is_id": [
                    475
                ],
                "result.replace": [
                    477
                ],
                "result.strip": [
                    478
                ],
                "result.startswith": [
                    480
                ],
                "el": [
                    489,
                    490,
                    491
                ],
                "iterable": [
                    489
                ],
                "res.append": [
                    491
                ],
                "htmlentity_transform": [
                    500
                ],
                "sys.getwindowsversion": [
                    514
                ],
                "sys.getfilesystemencoding": [
                    520,
                    979
                ],
                "optval": [
                    526,
                    527,
                    528,
                    529,
                    531,
                    532
                ],
                "optval.decode": [
                    529
                ],
                "secs": [
                    535,
                    536,
                    537,
                    538,
                    540
                ],
                "httplib.HTTPSConnection": [
                    546,
                    548
                ],
                "httplib": [
                    546,
                    548
                ],
                "httplib.HTTPSConnection.__init__": [
                    548
                ],
                "args": [
                    971,
                    548,
                    982,
                    974
                ],
                "kwargs": [
                    548
                ],
                "sock": [
                    553,
                    556,
                    558,
                    551
                ],
                "socket.create_connection": [
                    551
                ],
                "socket": [
                    583,
                    551
                ],
                "self.host": [
                    551
                ],
                "self.port": [
                    551
                ],
                "self.timeout": [
                    551
                ],
                "self.sock": [
                    553,
                    556,
                    558
                ],
                "self._tunnel": [
                    554
                ],
                "ssl.wrap_socket": [
                    556,
                    558
                ],
                "ssl": [
                    556,
                    557,
                    558,
                    565,
                    566,
                    568
                ],
                "self.key_file": [
                    556,
                    558
                ],
                "self.cert_file": [
                    556,
                    558
                ],
                "ssl.PROTOCOL_SSLv3": [
                    556,
                    565
                ],
                "ssl.SSLError": [
                    557
                ],
                "ssl.PROTOCOL_SSLv23": [
                    558
                ],
                "compat_urllib_request.HTTPSHandler": [
                    560,
                    574
                ],
                "compat_urllib_request": [
                    560,
                    691,
                    692,
                    693,
                    664,
                    574
                ],
                "self.do_open": [
                    562
                ],
                "HTTPSConnectionV3": [
                    562
                ],
                "req": [
                    704,
                    705,
                    706,
                    707,
                    708,
                    709,
                    710,
                    711,
                    562,
                    699,
                    700,
                    701,
                    702,
                    703
                ],
                "HTTPSHandlerV3": [
                    563
                ],
                "context": [
                    565,
                    566,
                    569,
                    571,
                    574
                ],
                "ssl.SSLContext": [
                    565
                ],
                "context.verify_mode": [
                    566
                ],
                "opts_no_check_certificate": [
                    567
                ],
                "ssl.CERT_NONE": [
                    566
                ],
                "ssl.CERT_REQUIRED": [
                    568
                ],
                "context.set_default_verify_paths": [
                    569
                ],
                "context.load_default_certs": [
                    571
                ],
                "sys.exc_info": [
                    590,
                    583
                ],
                "compat_urllib_error.URLError": [
                    583
                ],
                "compat_urllib_error": [
                    583
                ],
                "socket.timeout": [
                    583
                ],
                "UnavailableVideoError": [
                    583
                ],
                "expected": [
                    584,
                    585,
                    658,
                    662
                ],
                "msg": [
                    633,
                    586,
                    587,
                    613
                ],
                "__init__": [
                    587,
                    613
                ],
                "ExtractorError": [
                    587,
                    599
                ],
                "self.traceback": [
                    594,
                    596,
                    589
                ],
                "tb": [
                    589
                ],
                "self.exc_info": [
                    614,
                    590
                ],
                "self.cause": [
                    591
                ],
                "cause": [
                    591
                ],
                "traceback.format_tb": [
                    596
                ],
                "traceback": [
                    596
                ],
                "DownloadError": [
                    613
                ],
                "exc_info": [
                    614
                ],
                "self.msg": [
                    633
                ],
                "downloaded": [
                    657,
                    661
                ],
                "self.downloaded": [
                    661
                ],
                "self.expected": [
                    662
                ],
                "compat_urllib_request.HTTPHandler": [
                    664
                ],
                "zlib.decompress": [
                    685,
                    687
                ],
                "zlib": [
                    685,
                    686,
                    687
                ],
                "data": [
                    1003,
                    685,
                    687,
                    1012,
                    1013
                ],
                "zlib.MAX_WBITS": [
                    685
                ],
                "zlib.error": [
                    686
                ],
                "compat_urllib_request.addinfourl": [
                    691,
                    692,
                    693
                ],
                "headers": [
                    692,
                    693
                ],
                "url": [
                    1090,
                    773,
                    1004,
                    1010,
                    692,
                    693,
                    1013
                ],
                "code": [
                    692,
                    694
                ],
                "ret": [
                    693,
                    694,
                    695
                ],
                "ret.code": [
                    694
                ],
                "h": [
                    698,
                    699,
                    700,
                    701
                ],
                "v": [
                    698,
                    701
                ],
                "std_headers.items": [
                    698
                ],
                "req.headers": [
                    704,
                    705,
                    706,
                    707,
                    708,
                    709,
                    710,
                    699,
                    700,
                    702,
                    703
                ],
                "req.add_header": [
                    701
                ],
                "old_resp": [
                    738,
                    739,
                    714,
                    733,
                    734
                ],
                "resp": [
                    736,
                    737,
                    738,
                    739,
                    740,
                    714,
                    716,
                    717,
                    733,
                    734
                ],
                "resp.headers.get": [
                    736,
                    716
                ],
                "resp.headers": [
                    736,
                    716
                ],
                "content": [
                    726,
                    717,
                    718
                ],
                "resp.read": [
                    737,
                    717
                ],
                "gz": [
                    737,
                    738,
                    718,
                    720,
                    726,
                    727
                ],
                "gzip.GzipFile": [
                    726,
                    718
                ],
                "gzip": [
                    726,
                    718
                ],
                "io.BytesIO": [
                    737,
                    718,
                    720,
                    726,
                    727
                ],
                "io": [
                    737,
                    718,
                    720,
                    949,
                    726,
                    727
                ],
                "uncompressed": [
                    720,
                    733,
                    727
                ],
                "gz.read": [
                    720,
                    727
                ],
                "original_ioerror": [
                    732
                ],
                "self.addinfourl_wrapper": [
                    738,
                    733
                ],
                "old_resp.headers": [
                    738,
                    733
                ],
                "old_resp.url": [
                    738,
                    733
                ],
                "old_resp.code": [
                    738,
                    733
                ],
                "resp.msg": [
                    739,
                    734
                ],
                "old_resp.msg": [
                    739,
                    734
                ],
                "self.deflate": [
                    737
                ],
                "https_request": [
                    742
                ],
                "http_request": [
                    742
                ],
                "https_response": [
                    743
                ],
                "http_response": [
                    743
                ],
                "upload_date": [
                    770,
                    747,
                    767
                ],
                "date_str": [
                    806,
                    749,
                    751,
                    787,
                    789,
                    767
                ],
                "date_str.replace": [
                    749
                ],
                "format_expressions": [
                    752,
                    765
                ],
                "expression": [
                    765,
                    767
                ],
                "strftime": [
                    767
                ],
                "datetime.datetime.strptime": [
                    806,
                    767
                ],
                "datetime.datetime": [
                    819,
                    815,
                    806,
                    767
                ],
                "datetime": [
                    804,
                    806,
                    815,
                    786,
                    819,
                    828,
                    767
                ],
                "guess": [
                    773,
                    774,
                    775
                ],
                "rpartition": [
                    773
                ],
                "url.partition": [
                    773
                ],
                "default_ext": [
                    777
                ],
                "filename.rsplit": [
                    780
                ],
                "sub_lang": [
                    780
                ],
                "sub_format": [
                    780
                ],
                "today": [
                    786,
                    788,
                    805
                ],
                "datetime.date.today": [
                    786
                ],
                "datetime.date": [
                    786,
                    828
                ],
                "match": [
                    789,
                    790,
                    791,
                    792,
                    795
                ],
                "sign": [
                    793,
                    791
                ],
                "match.group": [
                    792,
                    795,
                    791
                ],
                "time": [
                    802,
                    804,
                    792,
                    794,
                    799
                ],
                "unit": [
                    800,
                    801,
                    803,
                    804,
                    795,
                    797,
                    798
                ],
                "delta": [
                    804,
                    805
                ],
                "datetime.timedelta": [
                    804
                ],
                "date": [
                    830,
                    828,
                    829,
                    806
                ],
                "start": [
                    1085,
                    812,
                    813,
                    1084
                ],
                "self.start": [
                    832,
                    813,
                    815,
                    820,
                    830
                ],
                "date_from_str": [
                    817,
                    829,
                    813
                ],
                "datetime.datetime.min.date": [
                    815
                ],
                "datetime.datetime.min": [
                    815
                ],
                "end": [
                    816,
                    817
                ],
                "self.end": [
                    832,
                    817,
                    819,
                    820,
                    830
                ],
                "datetime.datetime.max.date": [
                    819
                ],
                "datetime.datetime.max": [
                    819
                ],
                "cls": [
                    825
                ],
                "day": [
                    825
                ],
                "self.start.isoformat": [
                    832
                ],
                "self.end.isoformat": [
                    832
                ],
                "platform.platform": [
                    837
                ],
                "platform": [
                    837
                ],
                "res.decode": [
                    839
                ],
                "out": [
                    846,
                    847,
                    850,
                    1044,
                    853,
                    854,
                    1045
                ],
                "sys.stderr": [
                    847
                ],
                "out.write": [
                    853
                ],
                "out.flush": [
                    854
                ],
                "bs": [
                    858,
                    860,
                    861,
                    863
                ],
                "xs": [
                    872,
                    867,
                    870
                ],
                "x": [
                    870
                ],
                "cache_root": [
                    876,
                    878
                ],
                "os.environ.get": [
                    876,
                    1036
                ],
                "os.environ": [
                    876,
                    1036
                ],
                "os.path.expanduser": [
                    877
                ],
                "params.get": [
                    878
                ],
                "params": [
                    878
                ],
                "ctypes.Structure": [
                    886
                ],
                "ctypes": [
                    898,
                    899,
                    900,
                    901,
                    902,
                    903,
                    905,
                    908,
                    909,
                    910,
                    911,
                    912,
                    914,
                    923,
                    927,
                    934,
                    1071,
                    1075,
                    1078,
                    886,
                    888,
                    889,
                    890,
                    891,
                    892,
                    895
                ],
                "_fields_": [
                    887
                ],
                "ctypes.wintypes.LPVOID": [
                    888,
                    889
                ],
                "ctypes.wintypes": [
                    898,
                    899,
                    900,
                    901,
                    902,
                    905,
                    908,
                    909,
                    910,
                    911,
                    914,
                    888,
                    889,
                    890,
                    891,
                    892
                ],
                "ctypes.wintypes.DWORD": [
                    899,
                    900,
                    901,
                    902,
                    909,
                    910,
                    911,
                    890,
                    891
                ],
                "ctypes.wintypes.HANDLE": [
                    908,
                    898,
                    892
                ],
                "kernel32": [
                    896,
                    906,
                    895
                ],
                "ctypes.windll.kernel32": [
                    895
                ],
                "ctypes.windll": [
                    895
                ],
                "LockFileEx": [
                    896,
                    897,
                    905,
                    925
                ],
                "kernel32.LockFileEx": [
                    896
                ],
                "LockFileEx.argtypes": [
                    897
                ],
                "ctypes.POINTER": [
                    912,
                    903
                ],
                "OVERLAPPED": [
                    912,
                    919,
                    903
                ],
                "LockFileEx.restype": [
                    905
                ],
                "ctypes.wintypes.BOOL": [
                    905,
                    914
                ],
                "UnlockFileEx": [
                    906,
                    907,
                    932,
                    914
                ],
                "kernel32.UnlockFileEx": [
                    906
                ],
                "UnlockFileEx.argtypes": [
                    907
                ],
                "UnlockFileEx.restype": [
                    914
                ],
                "whole_low": [
                    915,
                    933,
                    926
                ],
                "whole_high": [
                    916,
                    933,
                    926
                ],
                "overlapped": [
                    919,
                    920,
                    921,
                    922,
                    923
                ],
                "overlapped.Offset": [
                    920
                ],
                "overlapped.OffsetHigh": [
                    921
                ],
                "overlapped.hEvent": [
                    922
                ],
                "f._lock_file_overlapped_p": [
                    930,
                    923,
                    933,
                    926
                ],
                "ctypes.pointer": [
                    923
                ],
                "handle": [
                    932,
                    931,
                    924,
                    925
                ],
                "msvcrt.get_osfhandle": [
                    931,
                    924
                ],
                "f.fileno": [
                    931,
                    924
                ],
                "exclusive": [
                    953,
                    955,
                    940,
                    925
                ],
                "ctypes.FormatError": [
                    934,
                    927
                ],
                "fcntl.lockf": [
                    940,
                    943
                ],
                "fcntl": [
                    940,
                    943
                ],
                "fcntl.LOCK_EX": [
                    940
                ],
                "fcntl.LOCK_SH": [
                    940
                ],
                "fcntl.LOCK_UN": [
                    943
                ],
                "mode": [
                    948,
                    949,
                    950
                ],
                "self.f": [
                    963,
                    965,
                    968,
                    971,
                    974,
                    949,
                    955,
                    957
                ],
                "io.open": [
                    949
                ],
                "self.mode": [
                    953,
                    950
                ],
                "_lock_file": [
                    955
                ],
                "self.f.close": [
                    965,
                    957
                ],
                "_unlock_file": [
                    963
                ],
                "self.f.write": [
                    971
                ],
                "self.f.read": [
                    974
                ],
                "quoted_args": [
                    986,
                    978,
                    987
                ],
                "a": [
                    985,
                    986,
                    982,
                    983
                ],
                "a.decode": [
                    985
                ],
                "quoted_args.append": [
                    986
                ],
                "pipes.quote": [
                    986
                ],
                "pipes": [
                    986
                ],
                "e": [
                    993,
                    994,
                    995
                ],
                "seq": [
                    993
                ],
                "pred": [
                    995
                ],
                "sdata": [
                    1002,
                    1010,
                    1004,
                    1011
                ],
                "compat_urllib_parse.urlencode": [
                    1002
                ],
                "compat_urllib_parse": [
                    1002
                ],
                "json.dumps": [
                    1003
                ],
                "smug_url": [
                    1008,
                    1009,
                    1010
                ],
                "_": [
                    1010
                ],
                "smug_url.rpartition": [
                    1010
                ],
                "jsond": [
                    1011,
                    1012
                ],
                "compat_parse_qs": [
                    1011
                ],
                "json.loads": [
                    1012
                ],
                "exponent": [
                    1024,
                    1025,
                    1026,
                    1022
                ],
                "math.log": [
                    1024
                ],
                "math": [
                    1024
                ],
                "suffix": [
                    1025,
                    1027
                ],
                "converted": [
                    1026,
                    1027
                ],
                "int_str": [
                    1032,
                    1031
                ],
                "columns": [
                    1036,
                    1037,
                    1038
                ],
                "sp": [
                    1041,
                    1044
                ],
                "subprocess.Popen": [
                    1041
                ],
                "subprocess": [
                    1041,
                    1043
                ],
                "subprocess.PIPE": [
                    1043
                ],
                "sp.communicate": [
                    1044
                ],
                "out.split": [
                    1045
                ],
                "ENGLISH_NAMES": [
                    1058,
                    1054
                ],
                "ENGLISH_NAMES.index": [
                    1058
                ],
                "xml_str.replace": [
                    1065
                ],
                "xml_str": [
                    1065
                ],
                "title": [
                    1074,
                    1075,
                    1076,
                    1069
                ],
                "libc": [
                    1078,
                    1071
                ],
                "ctypes.cdll.LoadLibrary": [
                    1071
                ],
                "ctypes.cdll": [
                    1071
                ],
                "buf": [
                    1075,
                    1076,
                    1078
                ],
                "ctypes.create_string_buffer": [
                    1075
                ],
                "buf.value": [
                    1076
                ],
                "title.encode": [
                    1076
                ],
                "libc.prctl": [
                    1078
                ],
                "ctypes.byref": [
                    1078
                ],
                "s.startswith": [
                    1084
                ],
                "m": [
                    1090,
                    1091,
                    1093
                ],
                "m.group": [
                    1093
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/youtube-dl_43/test/test_utils.py",
                "test_function": "test_url_basename",
                "test_function_code": "    def test_url_basename(self):\n        self.assertEqual(url_basename(u'http://foo.de/'), u'')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz'), u'baz')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz?x=y'), u'baz')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz#x=y'), u'baz')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz/'), u'baz')\n        self.assertEqual(\n            url_basename(u'http://media.w3.org/2010/05/sintel/trailer.mp4'),\n            u'trailer.mp4')",
                "test_error": "AssertionError: '' != 'trailer.mp4'\n+ trailer.mp4",
                "full_test_error": "self = <test.test_utils.TestUtil testMethod=test_url_basename>\n\n    def test_url_basename(self):\n        self.assertEqual(url_basename(u'http://foo.de/'), u'')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz'), u'baz')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz?x=y'), u'baz')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz#x=y'), u'baz')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz/'), u'baz')\n        self.assertEqual(\n            url_basename(u'http://media.w3.org/2010/05/sintel/trailer.mp4'),\n>           u'trailer.mp4')\nE       AssertionError: '' != 'trailer.mp4'\nE       + trailer.mp4\n\ntest/test_utils.py:193: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}