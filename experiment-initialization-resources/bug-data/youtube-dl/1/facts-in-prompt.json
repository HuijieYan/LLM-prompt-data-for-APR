{
    "1": "    def _match_one(filter_part, dct):\n        COMPARISON_OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n        }\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<key>[a-z_]+)\n            \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n            (?:\n                (?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)|\n                (?P<quote>[\"\\'])(?P<quotedstrval>(?:\\\\.|(?!(?P=quote)|\\\\).)+?)(?P=quote)|\n                (?P<strval>(?![0-9.])[a-z0-9A-Z]*)\n            )\n            \\s*$\n            ''' % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n        m = operator_rex.search(filter_part)\n        if m:\n            op = COMPARISON_OPERATORS[m.group('op')]\n            actual_value = dct.get(m.group('key'))\n            if (m.group('quotedstrval') is not None or\n                m.group('strval') is not None or\n                # If the original field is a string and matching comparisonvalue is\n                # a number we should respect the origin of the original field\n                # and process comparison value as a string (see\n                # https://github.com/rg3/youtube-dl/issues/11082).\n                actual_value is not None and m.group('intval') is not None and\n                    isinstance(actual_value, compat_str)):\n                if m.group('op') not in ('=', '!='):\n                    raise ValueError(\n                        'Operator %s does not support string values!' % m.group('op'))\n                comparison_value = m.group('quotedstrval') or m.group('strval') or m.group('intval')\n                quote = m.group('quote')\n                if quote is not None:\n                    comparison_value = comparison_value.replace(r'\\%s' % quote, quote)\n            else:\n                try:\n                    comparison_value = int(m.group('intval'))\n                except ValueError:\n                    comparison_value = parse_filesize(m.group('intval'))\n                    if comparison_value is None:\n                        comparison_value = parse_filesize(m.group('intval') + 'B')\n                    if comparison_value is None:\n                        raise ValueError(\n                            'Invalid integer value %r in filter part %r' % (\n                                m.group('intval'), filter_part))\n            if actual_value is None:\n                return m.group('none_inclusive')\n            return op(actual_value, comparison_value)\n    \n        UNARY_OPERATORS = {\n            '': lambda v: v is not None,\n            '!': lambda v: v is None,\n        }\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<op>%s)\\s*(?P<key>[a-z_]+)\n            \\s*$\n            ''' % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n        m = operator_rex.search(filter_part)\n        if m:\n            op = UNARY_OPERATORS[m.group('op')]\n            actual_value = dct.get(m.group('key'))\n            return op(actual_value)\n    \n        raise ValueError('Invalid filter part %r' % filter_part)\n    \n",
    "2": "",
    "3": "# file name: /Volumes/SSD2T/bgp_envs/repos/youtube-dl_1/youtube_dl/utils.py\n\n# relative function's signature in this file\ndef parse_filesize(s):\n    # ... omitted code ...\n    pass\n\n",
    "4": "# A test function for the buggy function\n```python\n# file name: /Volumes/SSD2T/bgp_envs/repos/youtube-dl_1/test/test_utils.py\n\n    def test_match_str(self):\n        self.assertRaises(ValueError, match_str, 'xy>foobar', {})\n        self.assertFalse(match_str('xy', {'x': 1200}))\n        self.assertTrue(match_str('!xy', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 1200}))\n        self.assertFalse(match_str('!x', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 0}))\n        self.assertFalse(match_str('x>0', {'x': 0}))\n        self.assertFalse(match_str('x>0', {}))\n        self.assertTrue(match_str('x>?0', {}))\n        self.assertTrue(match_str('x>1K', {'x': 1200}))\n        self.assertFalse(match_str('x>2K', {'x': 1200}))\n        self.assertTrue(match_str('x>=1200 & x < 1300', {'x': 1200}))\n        self.assertFalse(match_str('x>=1100 & x < 1200', {'x': 1200}))\n        self.assertFalse(match_str('y=a212', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y=foobar42', {'y': 'foobar42'}))\n        self.assertFalse(match_str('y!=foobar42', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y!=foobar2', {'y': 'foobar42'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 90, 'description': 'foo'}))\n        self.assertTrue(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 60, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 10}))\n        self.assertTrue(match_str('is_live', {'is_live': True}))\n        self.assertFalse(match_str('is_live', {'is_live': False}))\n        self.assertFalse(match_str('is_live', {'is_live': None}))\n        self.assertFalse(match_str('is_live', {}))\n        self.assertFalse(match_str('!is_live', {'is_live': True}))\n        self.assertTrue(match_str('!is_live', {'is_live': False}))\n        self.assertTrue(match_str('!is_live', {'is_live': None}))\n        self.assertTrue(match_str('!is_live', {}))\n        self.assertTrue(match_str('title', {'title': 'abc'}))\n        self.assertTrue(match_str('title', {'title': ''}))\n        self.assertFalse(match_str('!title', {'title': 'abc'}))\n        self.assertFalse(match_str('!title', {'title': ''}))\n```\n\n## Error message from test function\n```text\nself = <test.test_utils.TestUtil testMethod=test_match_str>\n\n    def test_match_str(self):\n        self.assertRaises(ValueError, match_str, 'xy>foobar', {})\n        self.assertFalse(match_str('xy', {'x': 1200}))\n        self.assertTrue(match_str('!xy', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 1200}))\n        self.assertFalse(match_str('!x', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 0}))\n        self.assertFalse(match_str('x>0', {'x': 0}))\n        self.assertFalse(match_str('x>0', {}))\n        self.assertTrue(match_str('x>?0', {}))\n        self.assertTrue(match_str('x>1K', {'x': 1200}))\n        self.assertFalse(match_str('x>2K', {'x': 1200}))\n        self.assertTrue(match_str('x>=1200 & x < 1300', {'x': 1200}))\n        self.assertFalse(match_str('x>=1100 & x < 1200', {'x': 1200}))\n        self.assertFalse(match_str('y=a212', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y=foobar42', {'y': 'foobar42'}))\n        self.assertFalse(match_str('y!=foobar42', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y!=foobar2', {'y': 'foobar42'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 90, 'description': 'foo'}))\n        self.assertTrue(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 60, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 10}))\n        self.assertTrue(match_str('is_live', {'is_live': True}))\n>       self.assertFalse(match_str('is_live', {'is_live': False}))\nE       AssertionError: True is not false\n\ntest/test_utils.py:1076: AssertionError\n\n```\n",
    "5": "# Variable runtime value and type inside buggy function\n## Buggy case 1\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'xy'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 2), match='xy'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110e31c20>`, type: `function`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110e31c20>, '!': <function _match_one.<locals>.<lambda> at 0x110e31cb0>}`, type: `dict`\n\n## Buggy case 2\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'!xy'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 3), match='!xy'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110e904d0>`, type: `function`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110e90440>, '!': <function _match_one.<locals>.<lambda> at 0x110e904d0>}`, type: `dict`\n\n## Buggy case 3\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'x'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 1), match='x'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110e90c20>`, type: `function`\n\nactual_value, value: `1200`, type: `int`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110e90c20>, '!': <function _match_one.<locals>.<lambda> at 0x110e90cb0>}`, type: `dict`\n\n## Buggy case 4\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'!x'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 2), match='!x'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110e974d0>`, type: `function`\n\nactual_value, value: `1200`, type: `int`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110e97440>, '!': <function _match_one.<locals>.<lambda> at 0x110e974d0>}`, type: `dict`\n\n## Buggy case 5\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'x'`, type: `str`\n\ndct, value: `{'x': 0}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 1), match='x'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110e974d0>`, type: `function`\n\nactual_value, value: `0`, type: `int`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110e974d0>, '!': <function _match_one.<locals>.<lambda> at 0x110e97440>}`, type: `dict`\n\n## Buggy case 6\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'x>0'`, type: `str`\n\ndct, value: `{'x': 0}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 3), match='x>0'>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, value: `0`, type: `int`\n\ncomparison_value, value: `0`, type: `int`\n\n## Buggy case 7\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'x>0'`, type: `str`\n\ndct, value: `{}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 3), match='x>0'>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\ncomparison_value, value: `0`, type: `int`\n\n## Buggy case 8\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'x>?0'`, type: `str`\n\ndct, value: `{}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 4), match='x>?0'>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\ncomparison_value, value: `0`, type: `int`\n\n## Buggy case 9\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'x>1K'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 4), match='x>1K'>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, value: `1200`, type: `int`\n\ncomparison_value, value: `1000`, type: `int`\n\n## Buggy case 10\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'x>2K'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 4), match='x>2K'>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, value: `1200`, type: `int`\n\ncomparison_value, value: `2000`, type: `int`\n\n## Buggy case 11\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'x>=1200 '`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 8), match='x>=1200 '>`, type: `Match`\n\nop, value: `<built-in function ge>`, type: `builtin_function_or_method`\n\nactual_value, value: `1200`, type: `int`\n\ncomparison_value, value: `1200`, type: `int`\n\n## Buggy case 12\n### input parameter runtime value and type for buggy function\nfilter_part, value: `' x < 1300'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 9), match=' x < 1300'>`, type: `Match`\n\nop, value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, value: `1200`, type: `int`\n\ncomparison_value, value: `1300`, type: `int`\n\n## Buggy case 13\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'x>=1100 '`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 8), match='x>=1100 '>`, type: `Match`\n\nop, value: `<built-in function ge>`, type: `builtin_function_or_method`\n\nactual_value, value: `1200`, type: `int`\n\ncomparison_value, value: `1100`, type: `int`\n\n## Buggy case 14\n### input parameter runtime value and type for buggy function\nfilter_part, value: `' x < 1200'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 9), match=' x < 1200'>`, type: `Match`\n\nop, value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, value: `1200`, type: `int`\n\ncomparison_value, value: `1200`, type: `int`\n\n## Buggy case 15\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'y=a212'`, type: `str`\n\ndct, value: `{'y': 'foobar42'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 6), match='y=a212'>`, type: `Match`\n\nop, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nactual_value, value: `'foobar42'`, type: `str`\n\ncomparison_value, value: `'a212'`, type: `str`\n\n## Buggy case 16\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'y=foobar42'`, type: `str`\n\ndct, value: `{'y': 'foobar42'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 10), match='y=foobar42'>`, type: `Match`\n\nop, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nactual_value, value: `'foobar42'`, type: `str`\n\ncomparison_value, value: `'foobar42'`, type: `str`\n\n## Buggy case 17\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'y!=foobar42'`, type: `str`\n\ndct, value: `{'y': 'foobar42'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 11), match='y!=foobar42'>`, type: `Match`\n\nop, value: `<built-in function ne>`, type: `builtin_function_or_method`\n\nactual_value, value: `'foobar42'`, type: `str`\n\ncomparison_value, value: `'foobar42'`, type: `str`\n\n## Buggy case 18\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'y!=foobar2'`, type: `str`\n\ndct, value: `{'y': 'foobar42'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 10), match='y!=foobar2'>`, type: `Match`\n\nop, value: `<built-in function ne>`, type: `builtin_function_or_method`\n\nactual_value, value: `'foobar42'`, type: `str`\n\ncomparison_value, value: `'foobar2'`, type: `str`\n\n## Buggy case 19\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'like_count > 100 '`, type: `str`\n\ndct, value: `{'like_count': 90, 'description': 'foo'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 17), match='like_count > 100 '>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, value: `90`, type: `int`\n\ncomparison_value, value: `100`, type: `int`\n\n## Buggy case 20\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'like_count > 100 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'description': 'foo'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 17), match='like_count > 100 '>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, value: `190`, type: `int`\n\ncomparison_value, value: `100`, type: `int`\n\n## Buggy case 21\n### input parameter runtime value and type for buggy function\nfilter_part, value: `' dislike_count <? 50 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'description': 'foo'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>`, type: `Match`\n\nop, value: `<built-in function lt>`, type: `builtin_function_or_method`\n\ncomparison_value, value: `50`, type: `int`\n\n## Buggy case 22\n### input parameter runtime value and type for buggy function\nfilter_part, value: `' description'`, type: `str`\n\ndct, value: `{'like_count': 190, 'description': 'foo'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 12), match=' description'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110e9ecb0>`, type: `function`\n\nactual_value, value: `'foo'`, type: `str`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110e9ecb0>, '!': <function _match_one.<locals>.<lambda> at 0x110eb5050>}`, type: `dict`\n\n## Buggy case 23\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'like_count > 100 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 17), match='like_count > 100 '>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, value: `190`, type: `int`\n\ncomparison_value, value: `100`, type: `int`\n\n## Buggy case 24\n### input parameter runtime value and type for buggy function\nfilter_part, value: `' dislike_count <? 50 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>`, type: `Match`\n\nop, value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, value: `60`, type: `int`\n\ncomparison_value, value: `50`, type: `int`\n\n## Buggy case 25\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'like_count > 100 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 10}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 17), match='like_count > 100 '>`, type: `Match`\n\nop, value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, value: `190`, type: `int`\n\ncomparison_value, value: `100`, type: `int`\n\n## Buggy case 26\n### input parameter runtime value and type for buggy function\nfilter_part, value: `' dislike_count <? 50 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 10}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>`, type: `Match`\n\nop, value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, value: `10`, type: `int`\n\ncomparison_value, value: `50`, type: `int`\n\n## Buggy case 27\n### input parameter runtime value and type for buggy function\nfilter_part, value: `' description'`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 10}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 12), match=' description'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110ebd0e0>`, type: `function`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110ebd0e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ebd170>}`, type: `dict`\n\n## Buggy case 28\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'is_live'`, type: `str`\n\ndct, value: `{'is_live': True}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 7), match='is_live'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110eb78c0>`, type: `function`\n\nactual_value, value: `True`, type: `bool`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110eb78c0>, '!': <function _match_one.<locals>.<lambda> at 0x110eb7950>}`, type: `dict`\n\n## Buggy case 29\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'is_live'`, type: `str`\n\ndct, value: `{'is_live': False}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 7), match='is_live'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110ebb0e0>`, type: `function`\n\nactual_value, value: `False`, type: `bool`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110ebb0e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ebb170>}`, type: `dict`\n\n## Buggy case 30\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'is_live'`, type: `str`\n\ndct, value: `{'is_live': None}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 7), match='is_live'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110eb7950>`, type: `function`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110eb7950>, '!': <function _match_one.<locals>.<lambda> at 0x110eb7200>}`, type: `dict`\n\n## Buggy case 31\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'is_live'`, type: `str`\n\ndct, value: `{}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 7), match='is_live'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110ec90e0>`, type: `function`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110ec90e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ec9170>}`, type: `dict`\n\n## Buggy case 32\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'!is_live'`, type: `str`\n\ndct, value: `{'is_live': True}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 8), match='!is_live'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110eb7200>`, type: `function`\n\nactual_value, value: `True`, type: `bool`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110eb78c0>, '!': <function _match_one.<locals>.<lambda> at 0x110eb7200>}`, type: `dict`\n\n## Buggy case 33\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'!is_live'`, type: `str`\n\ndct, value: `{'is_live': False}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 8), match='!is_live'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110ecc170>`, type: `function`\n\nactual_value, value: `False`, type: `bool`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110ecc0e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ecc170>}`, type: `dict`\n\n## Buggy case 34\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'!is_live'`, type: `str`\n\ndct, value: `{'is_live': None}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 8), match='!is_live'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110eb7320>`, type: `function`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110eb7440>, '!': <function _match_one.<locals>.<lambda> at 0x110eb7320>}`, type: `dict`\n\n## Buggy case 35\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'!is_live'`, type: `str`\n\ndct, value: `{}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 8), match='!is_live'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110edb170>`, type: `function`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110edb0e0>, '!': <function _match_one.<locals>.<lambda> at 0x110edb170>}`, type: `dict`\n\n## Buggy case 36\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'title'`, type: `str`\n\ndct, value: `{'title': 'abc'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 5), match='title'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110e933b0>`, type: `function`\n\nactual_value, value: `'abc'`, type: `str`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110e933b0>, '!': <function _match_one.<locals>.<lambda> at 0x110e935f0>}`, type: `dict`\n\n## Buggy case 37\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'title'`, type: `str`\n\ndct, value: `{'title': ''}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 5), match='title'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110ee80e0>`, type: `function`\n\nactual_value, value: `''`, type: `str`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110ee80e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ee8170>}`, type: `dict`\n\n## Buggy case 38\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'!title'`, type: `str`\n\ndct, value: `{'title': 'abc'}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 6), match='!title'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110eeb710>`, type: `function`\n\nactual_value, value: `'abc'`, type: `str`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110eeb4d0>, '!': <function _match_one.<locals>.<lambda> at 0x110eeb710>}`, type: `dict`\n\n## Buggy case 39\n### input parameter runtime value and type for buggy function\nfilter_part, value: `'!title'`, type: `str`\n\ndct, value: `{'title': ''}`, type: `dict`\n\n### variable runtime value and type before buggy function return\nCOMPARISON_OPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 6), match='!title'>`, type: `Match`\n\nop, value: `<function _match_one.<locals>.<lambda> at 0x110eeeef0>`, type: `function`\n\nactual_value, value: `''`, type: `str`\n\nUNARY_OPERATORS, value: `{'': <function _match_one.<locals>.<lambda> at 0x110eeee60>, '!': <function _match_one.<locals>.<lambda> at 0x110eeeef0>}`, type: `dict`\n\n\n\n# Expected variable value and type in tests\n## Expected case 1\n### Input parameter value and type\nfilter_part, value: `'xy'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 2), match='xy'>`, type: `Match`\n\nop, expected value: `<function _match_one.<locals>.<lambda> at 0x1112c1c20>`, type: `function`\n\nUNARY_OPERATORS, expected value: `{'': <function _match_one.<locals>.<lambda> at 0x1112c1c20>, '!': <function _match_one.<locals>.<lambda> at 0x1112c1cb0>}`, type: `dict`\n\n## Expected case 2\n### Input parameter value and type\nfilter_part, value: `'!xy'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 3), match='!xy'>`, type: `Match`\n\nop, expected value: `<function _match_one.<locals>.<lambda> at 0x11132d4d0>`, type: `function`\n\nUNARY_OPERATORS, expected value: `{'': <function _match_one.<locals>.<lambda> at 0x11132d440>, '!': <function _match_one.<locals>.<lambda> at 0x11132d4d0>}`, type: `dict`\n\n## Expected case 3\n### Input parameter value and type\nfilter_part, value: `'x'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 1), match='x'>`, type: `Match`\n\nop, expected value: `<function _match_one.<locals>.<lambda> at 0x1112c1ef0>`, type: `function`\n\nactual_value, expected value: `1200`, type: `int`\n\nUNARY_OPERATORS, expected value: `{'': <function _match_one.<locals>.<lambda> at 0x1112c1ef0>, '!': <function _match_one.<locals>.<lambda> at 0x1112c1dd0>}`, type: `dict`\n\n## Expected case 4\n### Input parameter value and type\nfilter_part, value: `'!x'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 2), match='!x'>`, type: `Match`\n\nop, expected value: `<function _match_one.<locals>.<lambda> at 0x11132d440>`, type: `function`\n\nactual_value, expected value: `1200`, type: `int`\n\nUNARY_OPERATORS, expected value: `{'': <function _match_one.<locals>.<lambda> at 0x11132d830>, '!': <function _match_one.<locals>.<lambda> at 0x11132d440>}`, type: `dict`\n\n## Expected case 5\n### Input parameter value and type\nfilter_part, value: `'x'`, type: `str`\n\ndct, value: `{'x': 0}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 1), match='x'>`, type: `Match`\n\nop, expected value: `<function _match_one.<locals>.<lambda> at 0x1113330e0>`, type: `function`\n\nactual_value, expected value: `0`, type: `int`\n\nUNARY_OPERATORS, expected value: `{'': <function _match_one.<locals>.<lambda> at 0x1113330e0>, '!': <function _match_one.<locals>.<lambda> at 0x111333170>}`, type: `dict`\n\n## Expected case 6\n### Input parameter value and type\nfilter_part, value: `'x>0'`, type: `str`\n\ndct, value: `{'x': 0}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 3), match='x>0'>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `0`, type: `int`\n\ncomparison_value, expected value: `0`, type: `int`\n\n## Expected case 7\n### Input parameter value and type\nfilter_part, value: `'x>0'`, type: `str`\n\ndct, value: `{}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 3), match='x>0'>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `0`, type: `int`\n\n## Expected case 8\n### Input parameter value and type\nfilter_part, value: `'x>?0'`, type: `str`\n\ndct, value: `{}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 4), match='x>?0'>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `0`, type: `int`\n\n## Expected case 9\n### Input parameter value and type\nfilter_part, value: `'x>1K'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 4), match='x>1K'>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `1200`, type: `int`\n\ncomparison_value, expected value: `1000`, type: `int`\n\n## Expected case 10\n### Input parameter value and type\nfilter_part, value: `'x>2K'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 4), match='x>2K'>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `1200`, type: `int`\n\ncomparison_value, expected value: `2000`, type: `int`\n\n## Expected case 11\n### Input parameter value and type\nfilter_part, value: `'x>=1200 '`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 8), match='x>=1200 '>`, type: `Match`\n\nop, expected value: `<built-in function ge>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `1200`, type: `int`\n\ncomparison_value, expected value: `1200`, type: `int`\n\n## Expected case 12\n### Input parameter value and type\nfilter_part, value: `' x < 1300'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 9), match=' x < 1300'>`, type: `Match`\n\nop, expected value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `1200`, type: `int`\n\ncomparison_value, expected value: `1300`, type: `int`\n\n## Expected case 13\n### Input parameter value and type\nfilter_part, value: `'x>=1100 '`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 8), match='x>=1100 '>`, type: `Match`\n\nop, expected value: `<built-in function ge>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `1200`, type: `int`\n\ncomparison_value, expected value: `1100`, type: `int`\n\n## Expected case 14\n### Input parameter value and type\nfilter_part, value: `' x < 1200'`, type: `str`\n\ndct, value: `{'x': 1200}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 9), match=' x < 1200'>`, type: `Match`\n\nop, expected value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `1200`, type: `int`\n\ncomparison_value, expected value: `1200`, type: `int`\n\n## Expected case 15\n### Input parameter value and type\nfilter_part, value: `'y=a212'`, type: `str`\n\ndct, value: `{'y': 'foobar42'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 6), match='y=a212'>`, type: `Match`\n\nop, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `'foobar42'`, type: `str`\n\ncomparison_value, expected value: `'a212'`, type: `str`\n\n## Expected case 16\n### Input parameter value and type\nfilter_part, value: `'y=foobar42'`, type: `str`\n\ndct, value: `{'y': 'foobar42'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 10), match='y=foobar42'>`, type: `Match`\n\nop, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `'foobar42'`, type: `str`\n\ncomparison_value, expected value: `'foobar42'`, type: `str`\n\n## Expected case 17\n### Input parameter value and type\nfilter_part, value: `'y!=foobar42'`, type: `str`\n\ndct, value: `{'y': 'foobar42'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 11), match='y!=foobar42'>`, type: `Match`\n\nop, expected value: `<built-in function ne>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `'foobar42'`, type: `str`\n\ncomparison_value, expected value: `'foobar42'`, type: `str`\n\n## Expected case 18\n### Input parameter value and type\nfilter_part, value: `'y!=foobar2'`, type: `str`\n\ndct, value: `{'y': 'foobar42'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 10), match='y!=foobar2'>`, type: `Match`\n\nop, expected value: `<built-in function ne>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `'foobar42'`, type: `str`\n\ncomparison_value, expected value: `'foobar2'`, type: `str`\n\n## Expected case 19\n### Input parameter value and type\nfilter_part, value: `'like_count > 100 '`, type: `str`\n\ndct, value: `{'like_count': 90, 'description': 'foo'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 17), match='like_count > 100 '>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `90`, type: `int`\n\ncomparison_value, expected value: `100`, type: `int`\n\n## Expected case 20\n### Input parameter value and type\nfilter_part, value: `'like_count > 100 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'description': 'foo'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 17), match='like_count > 100 '>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `190`, type: `int`\n\ncomparison_value, expected value: `100`, type: `int`\n\n## Expected case 21\n### Input parameter value and type\nfilter_part, value: `' dislike_count <? 50 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'description': 'foo'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>`, type: `Match`\n\nop, expected value: `<built-in function lt>`, type: `builtin_function_or_method`\n\ncomparison_value, expected value: `50`, type: `int`\n\n## Expected case 22\n### Input parameter value and type\nfilter_part, value: `' description'`, type: `str`\n\ndct, value: `{'like_count': 190, 'description': 'foo'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 12), match=' description'>`, type: `Match`\n\nop, expected value: `<function _match_one.<locals>.<lambda> at 0x111364320>`, type: `function`\n\nactual_value, expected value: `'foo'`, type: `str`\n\nUNARY_OPERATORS, expected value: `{'': <function _match_one.<locals>.<lambda> at 0x111364320>, '!': <function _match_one.<locals>.<lambda> at 0x1113640e0>}`, type: `dict`\n\n## Expected case 23\n### Input parameter value and type\nfilter_part, value: `'like_count > 100 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 17), match='like_count > 100 '>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `190`, type: `int`\n\ncomparison_value, expected value: `100`, type: `int`\n\n## Expected case 24\n### Input parameter value and type\nfilter_part, value: `' dislike_count <? 50 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>`, type: `Match`\n\nop, expected value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `60`, type: `int`\n\ncomparison_value, expected value: `50`, type: `int`\n\n## Expected case 25\n### Input parameter value and type\nfilter_part, value: `'like_count > 100 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 10}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 17), match='like_count > 100 '>`, type: `Match`\n\nop, expected value: `<built-in function gt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `190`, type: `int`\n\ncomparison_value, expected value: `100`, type: `int`\n\n## Expected case 26\n### Input parameter value and type\nfilter_part, value: `' dislike_count <? 50 '`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 10}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>`, type: `Match`\n\nop, expected value: `<built-in function lt>`, type: `builtin_function_or_method`\n\nactual_value, expected value: `10`, type: `int`\n\ncomparison_value, expected value: `50`, type: `int`\n\n## Expected case 27\n### Input parameter value and type\nfilter_part, value: `' description'`, type: `str`\n\ndct, value: `{'like_count': 190, 'dislike_count': 10}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 12), match=' description'>`, type: `Match`\n\nop, expected value: `<function _match_one.<locals>.<lambda> at 0x111346e60>`, type: `function`\n\nUNARY_OPERATORS, expected value: `{'': <function _match_one.<locals>.<lambda> at 0x111346e60>, '!': <function _match_one.<locals>.<lambda> at 0x111346ef0>}`, type: `dict`\n\n## Expected case 28\n### Input parameter value and type\nfilter_part, value: `'is_live'`, type: `str`\n\ndct, value: `{'is_live': True}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 7), match='is_live'>`, type: `Match`\n\nop, expected value: `<function _match_one.<locals>.<lambda> at 0x1113585f0>`, type: `function`\n\nactual_value, expected value: `True`, type: `bool`\n\nUNARY_OPERATORS, expected value: `{'': <function _match_one.<locals>.<lambda> at 0x1113585f0>, '!': <function _match_one.<locals>.<lambda> at 0x111358560>}`, type: `dict`\n\n## Expected case 29\n### Input parameter value and type\nfilter_part, value: `'is_live'`, type: `str`\n\ndct, value: `{'is_live': False}`, type: `dict`\n\n### Expected variable value and type before function return\nCOMPARISON_OPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n        (?P<op>`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 7), match='is_live'>`, type: `Match`\n\nop, expected value: `<function _match_one.<locals>.<lambda> at 0x111358200>`, type: `function`\n\nactual_value, expected value: `False`, type: `bool`\n\nUNARY_OPERATORS, expected value: `{'': <function _match_one.<locals>.<lambda> at 0x111358200>, '!': <function _match_one.<locals>.<lambda> at 0x111358050>}`, type: `dict`\n\n\n\n",
    "6": "",
    "7": "# Instructions\n\n1. Analyze the test case and its relationship with the error message, if applicable.\n2. Identify the potential error location within the problematic function.\n3. Explain the reasons behind the occurrence of the bug.\n4. Suggest possible approaches for fixing the bug.\n5. Present the corrected code for the problematic function."
}